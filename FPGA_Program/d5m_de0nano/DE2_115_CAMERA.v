// --------------------------------------------------------------------
// Copyright (c) 2010 by Terasic Technologies Inc. 
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// --------------------------------------------------------------------
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------
//
// Major Functions:	DE2_115 D5M+VGA 640*480 800*600 solution
//
// --------------------------------------------------------------------
//
// Revision History :
// --------------------------------------------------------------------
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| Johnny FAN Peli Li:| 22/07/2010:| Initial Revision
// --------------------------------------------------------------------
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//to set the VGA solution
`include "VGA_Param.h" 

module DE2_115_CAMERA(
	////////////////////	Clock Input	 	////////////////////	
	CLOCK_50,						//	50 MHz
	////////////////////	Push Button		////////////////////
	KEY,							//	Pushbutton[2:0]
	////////////////////	DPDT Switch		////////////////////
	SW,								//	Toggle Switch[4:0]
	/////////////////////	SDRAM Interface		////////////////
	DRAM_DQ,						//	SDRAM Data bus 16 Bits
	DRAM_ADDR,						//	SDRAM Address bus 13 Bits
	DRAM_DQM,						//	SDRAM Low-byte  Mask 
	DRAM_WE_N,						//	SDRAM Write Enable
	DRAM_CAS_N,						//	SDRAM Column Address Strobe
	DRAM_RAS_N,						//	SDRAM Row Address Strobe
	DRAM_CS_N,						//	SDRAM Chip Select
	DRAM_BA,							//	SDRAM Bank Address
	DRAM_CLK,						//	SDRAM Clock
	DRAM_CKE,						//	SDRAM Clock Enable
	////////////////////	GPIO	////////////////////////////
	GPIO_0_IN,
	GPIO_0_D,
	GPIO_1_IN,
	GPIO_1_D,
);

//=======================================================
//  PARAMETER declarations
//=======================================================

//=======================================================
//  PORT declarations
//=======================================================

////////////////////////	Clock Input	 	////////////////////////
input						CLOCK_50;				//	50 MHz
////////////////////////	Push Button		////////////////////////
input		[1:0]		KEY;						//	Pushbutton[2:0]
////////////////////////	DPDT Switch		////////////////////////
input		[3:0]		SW;							//	Toggle Switch[4:0]
///////////////////////		SDRAM Interface	////////////////////////
inout		[15:0]	DRAM_DQ;				//	SDRAM Data bus 16 Bits
output	[12:0]	DRAM_ADDR;			//	SDRAM Address bus 13 Bits
output	[1:0]		DRAM_DQM;				//	SDRAM Data Mask 
output					DRAM_WE_N;			//	SDRAM Write Enable
output					DRAM_CAS_N;			//	SDRAM Column Address Strobe
output					DRAM_RAS_N;			//	SDRAM Row Address Strobe
output					DRAM_CS_N;			//	SDRAM Chip Select
output	[1:0]		DRAM_BA;				//	SDRAM Bank Address
output					DRAM_CLK;				//	SDRAM Clock
output					DRAM_CKE;				//	SDRAM Clock Enable
////////////////////////	GPIO	////////////////////////////////
input 	[1:0] 	GPIO_0_IN;
inout		[33:0]	GPIO_0_D;
input 	[1:0] 	GPIO_1_IN;
inout		[33:0]	GPIO_1_D;	

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire	[15:0]	Read_DATA1;
wire	[15:0]	Read_DATA2;

wire	[11:0]	mCCD_DATA;
wire					mCCD_DVAL;
wire					mCCD_DVAL_d;
wire	[15:0]	X_Cont;
wire	[15:0]	Y_Cont;
wire	[9:0]		X_ADDR;
wire	[31:0]	Frame_Cont;
wire					DLY_RST_0;
wire					DLY_RST_1;
wire					DLY_RST_2;
wire					DLY_RST_3;
wire					DLY_RST_4;
wire					Read;
reg		[11:0]	rCCD_DATA;
reg						rCCD_LVAL;
reg						rCCD_FVAL;
wire	[11:0]	sCCD_R;
wire	[11:0]	sCCD_G;
wire	[11:0]	sCCD_B;
wire					sCCD_DVAL;

wire					sdram_ctrl_clk;
wire	[9:0]		oVGA_R;   				//	VGA Red[9:0]
wire	[9:0]		oVGA_G;	 				//	VGA Green[9:0]
wire	[9:0]		oVGA_B;   				//	VGA Blue[9:0]

////////////////////	D5M	PIN ////////////////////////////
wire	[11:0]	D5M_D;
wire	       	D5M_FVAL;
wire					D5M_LVAL;
wire	    		D5M_PIXLCLK;
wire	     		D5M_RESET_N;
wire	    		D5M_SCLK;
wire       		D5M_STROBE;
wire	     		D5M_TRIGGER;
//wire					D5M_SDATA;
wire	      	D5M_XCLKIN;


////////////////////	VGA	PIN ////////////////////////////

wire	[7:0]	VGA_B;
wire				VGA_BLANK_N;
wire				VGA_CLK;
wire	[7:0]	VGA_G;
wire				VGA_HS;
wire	[7:0]	VGA_R;
wire		  	VGA_SYNC_N;
wire				VGA_VS;

//power on start
wire  				auto_start;
//=======================================================
//  Structural coding
//=======================================================
// D5M
assign	D5M_TRIGGER	=	1'b1;  // tRIGGER
assign	D5M_RESET_N	=	DLY_RST_1;
assign  VGA_CTRL_CLK = ~VGA_CLK;

assign	LEDR		=	SW;
assign	LEDG		=	Y_Cont;

//fetch the high 8 bits
assign  VGA_R = oVGA_R[9:2];
assign  VGA_G = oVGA_G[9:2];
assign  VGA_B = oVGA_B[9:2];




assign	D5M_PIXLCLK	=	GPIO_1_IN[0];
assign	D5M_D[11]		=	GPIO_1_D[0];
assign	D5M_D[10]		=	GPIO_1_D[1];
assign	D5M_D[9]		=	GPIO_1_D[2];
assign	D5M_D[8]		=	GPIO_1_D[3];
assign	D5M_D[7]		=	GPIO_1_D[4];
assign	D5M_D[6]		=	GPIO_1_D[5];
assign	D5M_D[5]		=	GPIO_1_D[6];
assign	D5M_D[4]		=	GPIO_1_D[7];
assign	D5M_D[3]		=	GPIO_1_D[8];
assign	D5M_D[2]		=	GPIO_1_D[9];
assign	D5M_D[1]		=	GPIO_1_D[10];
assign	D5M_D[0]		=	GPIO_1_D[11];
assign	GPIO_1_D[14]=	D5M_XCLKIN;
assign	GPIO_1_D[15]=	D5M_RESET_N;
assign	GPIO_1_D[17]=	D5M_TRIGGER;
assign	D5M_STROBE	= GPIO_1_D[18];
assign	D5M_LVAL		=	GPIO_1_D[19];
assign	D5M_FVAL		=	GPIO_1_D[20];
//assign	GPIO_1_D[21]= D5M_SDATA;
assign	GPIO_1_D[22]= D5M_SCLK;


assign	GPIO_0_D[0]			=	VGA_CLK;
assign	GPIO_0_D[1]			=	VGA_HS;
assign	GPIO_0_D[2]			=	VGA_VS;
assign	GPIO_0_D[3]			=	VGA_BLANK_N;
assign	GPIO_0_D[4]			=	VGA_SYNC_N;
assign	GPIO_0_D[12:5]	=	VGA_R;
assign	GPIO_0_D[20:13]	=	VGA_G;
assign	GPIO_0_D[28:21]	=	VGA_B;


//D5M read 
always@(posedge D5M_PIXLCLK)
begin
	rCCD_DATA	<=	D5M_D;
	rCCD_LVAL	<=	D5M_LVAL;
	rCCD_FVAL	<=	D5M_FVAL;
end

//auto start when power on
assign auto_start = ((KEY[0])&&(DLY_RST_3)&&(!DLY_RST_4))? 1'b1:1'b0;
//Reset module
Reset_Delay			u2	(	.iCLK(CLOCK_50),
							.iRST(KEY[0]),
							.oRST_0(DLY_RST_0),
							.oRST_1(DLY_RST_1),
							.oRST_2(DLY_RST_2),
							.oRST_3(DLY_RST_3),
							.oRST_4(DLY_RST_4)
						);
//D5M image capture
CCD_Capture			u3	(	.oDATA(mCCD_DATA),
							.oDVAL(mCCD_DVAL),
							.oX_Cont(X_Cont),
							.oY_Cont(Y_Cont),
							.oFrame_Cont(Frame_Cont),
							.iDATA(rCCD_DATA),
							.iFVAL(rCCD_FVAL),
							.iLVAL(rCCD_LVAL),
							//.iSTART(!KEY[3]|auto_start),
							//.iEND(!KEY[2]),
							.iSTART(1'b0|auto_start),
							.iEND(1'b0),
							.iCLK(~D5M_PIXLCLK),
							.iRST(DLY_RST_2)
						);
//D5M raw date convert to RGB data
`ifdef VGA_640x480p60
RAW2RGB				u4	(	.iCLK(D5M_PIXLCLK),
							.iRST(DLY_RST_1),
							.iDATA(mCCD_DATA),
							.iDVAL(mCCD_DVAL),
							.oRed(sCCD_R),
							.oGreen(sCCD_G),
							.oBlue(sCCD_B),
							.oDVAL(sCCD_DVAL),
							.iX_Cont(X_Cont),
							.iY_Cont(Y_Cont)
						);
`else
RAW2RGB				u4	(	.iCLK(D5M_PIXLCLK),
							.iRST_n(DLY_RST_1),
							.iData(mCCD_DATA),
							.iDval(mCCD_DVAL),
							.oRed(sCCD_R),
							.oGreen(sCCD_G),
							.oBlue(sCCD_B),
							.oDval(sCCD_DVAL),
							//.iZoom(SW[16]),
							.iZoom(1'b0),
							.iX_Cont(X_Cont),
							.iY_Cont(Y_Cont)
						);
`endif
//Frame count display
/*SEG7_LUT_8 			u5	(	.oSEG0(HEX0),.oSEG1(HEX1),
							.oSEG2(HEX2),.oSEG3(HEX3),
							.oSEG4(HEX4),.oSEG5(HEX5),
							.oSEG6(HEX6),.oSEG7(HEX7),
							.iDIG(Frame_Cont[31:0])
						);*/

sdram_pll 			u6	(
							.inclk0(CLOCK_50),
							.c0(sdram_ctrl_clk),
							.c1(DRAM_CLK),
							.c2(D5M_XCLKIN), //25M
`ifdef VGA_640x480p60
							.c3(VGA_CLK)     //25M 
`else
						    .c4(VGA_CLK)     //40M 	
`endif
						);

//SDRam Read and Write as Frame Buffer
Sdram_Control	u7	(	//	HOST Side						
						    .RESET_N(KEY[0]),
							.CLK(sdram_ctrl_clk),

							//	FIFO Write Side 1
							.WR1_DATA({1'b0,sCCD_G[11:7],sCCD_B[11:2]}),
							.WR1(sCCD_DVAL),
							.WR1_ADDR(0),
`ifdef VGA_640x480p60
						    .WR1_MAX_ADDR(640*480/2),
						    .WR1_LENGTH(8'h50),
`else
							.WR1_MAX_ADDR(800*600/2),
							.WR1_LENGTH(8'h80),
`endif							
							.WR1_LOAD(!DLY_RST_0),
							.WR1_CLK(D5M_PIXLCLK),

							//	FIFO Write Side 2
							.WR2_DATA({1'b0,sCCD_G[6:2],sCCD_R[11:2]}),
							.WR2(sCCD_DVAL),
							.WR2_ADDR(23'h100000),
`ifdef VGA_640x480p60
						    .WR2_MAX_ADDR(23'h100000+640*480/2),
							.WR2_LENGTH(8'h50),
`else							
							.WR2_MAX_ADDR(23'h100000+800*600/2),
							.WR2_LENGTH(8'h80),
`endif	
							.WR2_LOAD(!DLY_RST_0),
							.WR2_CLK(D5M_PIXLCLK),

							//	FIFO Read Side 1
						    .RD1_DATA(Read_DATA1),
				        	.RD1(Read),
				        	.RD1_ADDR(0),
`ifdef VGA_640x480p60
						    .RD1_MAX_ADDR(640*480/2),
							.RD1_LENGTH(8'h50),
`else
							.RD1_MAX_ADDR(800*600/2),
							.RD1_LENGTH(8'h80),
`endif
							.RD1_LOAD(!DLY_RST_0),
							.RD1_CLK(~VGA_CTRL_CLK),
							
							//	FIFO Read Side 2
						    .RD2_DATA(Read_DATA2),
							.RD2(Read),
							.RD2_ADDR(23'h100000),
`ifdef VGA_640x480p60
						    .RD2_MAX_ADDR(23'h100000+640*480/2),
							.RD2_LENGTH(8'h50),
`else
							.RD2_MAX_ADDR(23'h100000+800*600/2),
							.RD2_LENGTH(8'h80),
`endif
				        	.RD2_LOAD(!DLY_RST_0),
							.RD2_CLK(~VGA_CTRL_CLK),
							
							//	SDRAM Side
						    .SA(DRAM_ADDR),
							.BA(DRAM_BA),
							.CS_N(DRAM_CS_N),
							.CKE(DRAM_CKE),
							.RAS_N(DRAM_RAS_N),
							.CAS_N(DRAM_CAS_N),
							.WE_N(DRAM_WE_N),
							.DQ(DRAM_DQ),
							.DQM(DRAM_DQM)
						);
//D5M I2C control
I2C_CCD_Config 		u8	(	//	Host Side
							.iCLK(CLOCK_50),
							.iRST_N(DLY_RST_2),
							.iEXPOSURE_ADJ(KEY[1]),
							.iEXPOSURE_DEC_p(SW[0]),
							//.iZOOM_MODE_SW(SW[16]),
							.iZOOM_MODE_SW(1'b0),
							//	I2C Side
							.I2C_SCLK(D5M_SCLK),
							.I2C_SDAT(GPIO_1_D[21]) // D5M_SDATA
						);
//VGA DISPLAY
VGA_Controller		u1	(	//	Host Side
							.oRequest(Read),
							.iRed(Read_DATA2[9:0]),
							.iGreen({Read_DATA1[14:10],Read_DATA2[14:10]}),
							.iBlue(Read_DATA1[9:0]),
							//	VGA Side
							.oVGA_R(oVGA_R),
							.oVGA_G(oVGA_G),
							.oVGA_B(oVGA_B),
							.oVGA_H_SYNC(VGA_HS),
							.oVGA_V_SYNC(VGA_VS),
							.oVGA_SYNC(VGA_SYNC_N),
							.oVGA_BLANK(VGA_BLANK_N),
							//	Control Signal
							.iCLK(VGA_CTRL_CLK),
							.iRST_N(DLY_RST_2),
							//.iZOOM_MODE_SW(SW[16])
							.iZOOM_MODE_SW(1'b0)
						);

endmodule
