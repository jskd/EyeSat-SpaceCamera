
cmv_controller.elf:     file format elf32-littlenios2
cmv_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01004020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x0001284c memsz 0x0001284c flags r-x
    LOAD off    0x000149e0 vaddr 0x008129e0 paddr 0x008146c8 align 2**12
         filesz 0x00001ce8 memsz 0x00001ce8 flags rw-
    LOAD off    0x000173b0 vaddr 0x008163b0 paddr 0x008163b0 align 2**12
         filesz 0x00000000 memsz 0x00000b00 flags rw-
    LOAD off    0x00017000 vaddr 0x01004000 paddr 0x01004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01004000  01004000  00017000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01004020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011ea4  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009a8  00812038  00812038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce8  008129e0  008146c8  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b00  008163b0  008163b0  000173b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00017020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011b8  00000000  00000000  00017048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002990  00000000  00000000  00018200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00035041  00000000  00000000  0001ab90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cd24  00000000  00000000  0004fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c5fb  00000000  00000000  0005c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002df0  00000000  00000000  00078ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041bf  00000000  00000000  0007bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f428  00000000  00000000  0007fe9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008f2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c08  00000000  00000000  0008f328  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00096543  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00096546  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00096549  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009654a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009654b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009654f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00096553  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00096557  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00096560  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00096569  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00096572  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  00096576  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004c3f7  00000000  00000000  000965c9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01004000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
00812038 l    d  .rodata	00000000 .rodata
008129e0 l    d  .rwdata	00000000 .rwdata
008163b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FSM.cpp
00000000 l    df *ABS*	00000000 PIO.cpp
00000000 l    df *ABS*	00000000 PIO_Bus.cpp
00000000 l    df *ABS*	00000000 PIO_Pin.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 UART.cpp
00801d74 l     F .text	00000060 _Z23_UART_receive_interruptPv
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_throw.cc
00802abc l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_opv.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00802db0 l     F .text	00000030 _Z12read_uleb128PKhPj
00802de0 l     F .text	00000054 _Z12read_sleb128PKhPi
00802e34 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00802ed0 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
008030a4 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
00803134 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00803234 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
008032b8 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
008163b0 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
008163f8 l     O .bss	00000800 emergency_buffer
008163bc l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
008163c0 l     O .bss	00000004 fc_static
00804564 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0080467c l     F .text	000000cc _Unwind_RaiseException_Phase2
00804748 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008056b0 l     F .text	00000058 __sprint_r
0081270a l     O .rodata	00000010 blanks.3452
008126fa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00807808 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00809204 l     F .text	00000058 std
00809310 l     F .text	00000008 __fp_lock
00809318 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00812de8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081469c l     O .rwdata	00000004 charset
00812740 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00812888 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080cc5c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080dd88 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e5fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e65c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080e688 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e7bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080eabc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080ec5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ed3c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ee98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f0c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008146bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080f390 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081339c l     O .rwdata	00001060 jtag_uart
008143fc l     O .rwdata	000000c4 uart
0080f488 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f6c8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080f8f0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00810364 l     F .text	0000009c altera_avalon_uart_irq
00810400 l     F .text	000000e0 altera_avalon_uart_rxirq
008104e0 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008108cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00810af4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810eec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811310 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0081144c l     F .text	000000dc alt_file_locked
008116b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00811dc4 l     F .text	00000004 register_fini
008040c8 g     F .text	00000040 __cxa_free_exception
00804244 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0080a7e8 g     F .text	00000094 _mprec_log10
00803e24 g     F .text	00000018 _ZSt10unexpectedv
00814598  w    O .rwdata	00000008 _ZTIw
0080a8d4 g     F .text	00000088 __any_on
0080bf70 g     F .text	00000070 _isatty_r
00812860 g     O .rodata	00000028 __mprec_tinytens
00814590  w    O .rwdata	00000008 _ZTIc
0080eef8 g     F .text	0000006c alt_main
008003ec g     F .text	00000020 _ZN3FSM10_spi_writeEv
00816c20 g     O .bss	00000100 alt_irq
00814588  w    O .rwdata	00000008 _ZTIa
0080bfe0 g     F .text	00000078 _lseek_r
00804514 g     F .text	00000014 _Unwind_GetIPInfo
008146c8 g       *ABS*	00000000 __flash_rwdata_start
0080d77c g     F .text	00000088 __eqdf2
008123b0  w    O .rodata	00000010 _ZTIPy
00814648  w    O .rwdata	00000002 _ZTSa
008029d4 g     F .text	00000074 __cxa_rethrow
008044b4 g     F .text	0000000c _Unwind_SjLj_Unregister
00803d44 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00802570  w    F .text	00000088 _ZN4FIFOIcE4pushEc
00812440  w    O .rodata	00000010 _ZTIPKi
00804504 g     F .text	00000010 _Unwind_GetIP
00800464 g     F .text	00000058 _ZN3FSMD1Ev
00816eb0 g       *ABS*	00000000 __alt_heap_start
00814608  w    O .rwdata	00000003 _ZTSPj
008055c8 g     F .text	00000074 _kill_r
008040b8 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00805204 g     F .text	00000044 printf
00803c24 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00805508 g     F .text	000000a0 _signal_r
008145e4  w    O .rwdata	00000003 _ZTSPx
008012e4 g     F .text	00000050 _ZN7PIO_BusD0Ev
00812168  w    O .rodata	00000010 _ZTV7PIO_Pin
0080ba3c g     F .text	00000068 __sseek
0080926c g     F .text	000000a4 __sinit
008145f0  w    O .rwdata	00000003 _ZTSPm
008025f8  w    F .text	00000040 _ZN4FIFOIcE22_triggerEmptyConditionEv
00814500  w    O .rwdata	00000006 _ZTS4UART
008010d8 g     F .text	0000008c _ZN7PIO_BusC1ER3PIOhhh
00803c14 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00809f44 g     F .text	00000084 _setlocale_r
00812294  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0080936c g     F .text	00000068 __sfmoreglue
0080ef84 g     F .text	00000020 __malloc_unlock
00812138  w    O .rodata	00000014 _ZTV3PIO
0080036c g     F .text	00000020 _ZN3FSM12_select_modeEv
00802bc4 g     F .text	00000020 _ZSt18uncaught_exceptionv
0080a2fc g     F .text	000000e0 memmove
0081460c  w    O .rwdata	00000002 _ZTSj
00803fb0 g     F .text	00000010 _ZNSt9exceptionD2Ev
0080935c g     F .text	00000010 _cleanup
00802510  w    F .text	00000020 _ZN4FIFOIcE6unlockEv
00801688 g     F .text	0000005c _ZN7PIO_Pin2onEv
0080a95c g     F .text	000000bc _Balloc
00812618  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
00804350 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
0080d88c g     F .text	00000088 __gtdf2
008122c8  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
0081466c  w    O .rwdata	00000002 _ZTSb
00801584 g     F .text	00000048 _ZN7PIO_Pin8getValueEv
01004000 g     F .entry	0000001c __reset
00800ed8 g     F .text	00000084 _ZN3PIOC2EmhNS_4ModeE
00800ce4 g     F .text	00000098 _ZN3FSM6actionEv
0081464c  w    O .rwdata	00000004 _ZTSPKc
00804544 g     F .text	00000008 _Unwind_GetRegionStart
00814664  w    O .rwdata	00000004 _ZTSPKb
008145d4  w    O .rwdata	00000004 _ZTSPKy
00800000 g       *ABS*	00000000 __flash_exceptions_start
0080befc g     F .text	00000074 _fstat_r
00812460  w    O .rodata	00000010 _ZTIPKt
00814644  w    O .rwdata	00000003 _ZTSPa
00803e3c g     F .text	00000100 _Znwm
008163d0 g     O .bss	00000004 errno
00814670  w    O .rwdata	00000004 _ZTSPKv
00801534 g     F .text	00000050 _ZN7PIO_PinD2Ev
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00804914 g     F .text	00000080 _Unwind_Backtrace
00812520  w    O .rodata	00000010 _ZTIPKb
008163e8 g     O .bss	00000004 alt_argv
0081c4c0 g       *ABS*	00000000 _gp
0080f240 g     F .text	00000030 usleep
0080197c g     F .text	00000038 _ZN4UART16inBuffer_isEmptyEv
00804048 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
0080e81c g     F .text	00000020 getpid
00801d28 g     F .text	0000004c _ZN4UART7sendAllEv
008144e8  w    O .rwdata	00000008 _ZTI7PIO_Pin
0080333c g     F .text	00000180 __cxa_call_unexpected
00802bbc g     F .text	00000008 __cxa_get_exception_ptr
008145f8  w    O .rwdata	00000004 _ZTSPKl
0081321c g     O .rwdata	00000180 alt_fd_list
00802638  w    F .text	00000084 _ZN4FIFOIcE4pullEv
00804420 g     F .text	00000034 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00800f5c g     F .text	00000050 _ZN3PIOD0Ev
008121e0  w    O .rodata	00000018 _ZTV4FIFOIcE
00812410  w    O .rodata	00000010 _ZTIPl
008048c4 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
008044d8 g     F .text	00000014 _Unwind_GetCFA
00814570  w    O .rwdata	00000008 _ZTIt
00803d30 g     F .text	00000014 _ZSt13set_terminatePFvvE
008118d4 g     F .text	00000094 alt_find_dev
0080a25c g     F .text	000000a0 memcpy
00814674  w    O .rwdata	00000003 _ZTSPv
00809350 g     F .text	0000000c _cleanup_r
0080da24 g     F .text	000000f8 __floatsidf
008113d4 g     F .text	00000078 alt_io_redirect
0080d99c g     F .text	00000088 __ltdf2
00801240 g     F .text	0000003c _ZN7PIO_Bus11allPinTogleEv
00812038 g       *ABS*	00000000 __DTOR_END__
00812550  w    O .rodata	00000010 _ZTIPv
00803a5c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00812690  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
008145a0  w    O .rwdata	00000008 _ZTIb
008001e0 g     F .text	00000038 _ZN3FSMC2Ev
00812400  w    O .rodata	00000010 _ZTIPKl
0080a738 g     F .text	000000b0 __ratio
0080431c g     F .text	00000034 _ZN10__cxxabiv119__pointer_type_infoD0Ev
0080fb08 g     F .text	00000224 altera_avalon_jtag_uart_read
00804a18 g     F .text	00000014 malloc
00805248 g     F .text	00000034 _printf_r
0080dec4 g     F .text	00000008 __udivsi3
0080e9fc g     F .text	000000c0 isatty
008052ec g     F .text	000000cc _raise_r
00814620  w    O .rwdata	00000003 _ZTSPt
00812770 g     O .rodata	000000c8 __mprec_tens
00804014 g     F .text	00000034 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
00809f20 g     F .text	00000008 __locale_charset
0080768c g     F .text	00000040 vsnprintf
00811b40 g     F .text	00000090 alt_icache_flush
008163c4 g     O .bss	00000004 __malloc_top_pad
008055c4 g     F .text	00000004 _getpid_r
00814698 g     O .rwdata	00000004 __mb_cur_max
00809f28 g     F .text	0000000c _localeconv_r
0080b054 g     F .text	0000003c __i2b
00809904 g     F .text	0000049c __sfvwrite_r
00803a7c g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
008145bc  w    O .rwdata	00000004 _ZTSPKd
00805440 g     F .text	000000b4 __sigtramp_r
0080527c g     F .text	00000070 _sbrk_r
008125c4  w    O .rodata	00000020 _ZTVSt9type_info
008018f4 g     F .text	00000050 _ZN3SPID2Ev
008144c8  w    O .rwdata	00000008 _ZTI3FSM
00804454 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0080c058 g     F .text	00000078 _read_r
00803f80 g     F .text	00000010 _ZNKSt9exception4whatEv
008145ec  w    O .rwdata	00000004 _ZTSPKm
008131e8 g     O .rwdata	0000000c __lc_ctype
008146b0 g     O .rwdata	00000004 alt_max_fd
0080e300 g     F .text	00000138 __unpack_d
0080bdd8 g     F .text	00000110 _fclose_r
008125b8  w    O .rodata	0000000c _ZTISt9bad_alloc
008091d0 g     F .text	00000034 fflush
00812390  w    O .rodata	00000010 _ZTIPf
008163c8 g     O .bss	00000004 __malloc_max_sbrked_mem
0080104c g     F .text	0000008c _ZN7PIO_BusC2ER3PIOhhh
0080e83c g     F .text	000001c0 alt_irq_register
00800250 g     F .text	00000094 _ZN3FSM10transitionEv
0081215c  w    O .rodata	00000009 _ZTS7PIO_Bus
008125f4  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
00801384 g     F .text	00000050 _ZN7PIO_BusD2Ev
0080d0ec g     F .text	00000074 __adddf3
00812268  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00801c74 g     F .text	000000b4 _ZN4UART4sendEv
0080a618 g     F .text	00000120 __b2d
0080c6ac g     F .text	000005b0 __umoddi3
0080eda8 g     F .text	000000f0 lseek
00803adc g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00802da0 g     F .text	0000000c _ZdlPv
00814694 g     O .rwdata	00000004 _global_impure_ptr
0080b3d0 g     F .text	000005f4 _realloc_r
00816eb0 g       *ABS*	00000000 __bss_end
008145d8  w    O .rwdata	00000003 _ZTSPy
00811218 g     F .text	000000f8 alt_iic_isr_register
00814610  w    O .rwdata	00000004 _ZTSPKi
00812530  w    O .rodata	00000010 _ZTIPb
008117a8 g     F .text	0000010c alt_tick
008044a4 g     F .text	00000010 _Unwind_SjLj_Register
0080c0d0 g     F .text	000005dc __udivdi3
00812838 g     O .rodata	00000028 __mprec_bigtens
0080b2b0 g     F .text	00000120 __s2b
008049ec g     F .text	00000018 abort
0080dbf4 g     F .text	00000194 __floatunsidf
0080a538 g     F .text	00000060 __mcmp
0081029c g     F .text	000000c8 altera_avalon_uart_init
00814540  w    O .rwdata	00000008 _ZTIy
00802be4 g     F .text	000000a4 __cxa_end_catch
00809338 g     F .text	00000018 __fp_lock_all
008111d0 g     F .text	00000048 alt_ic_irq_enabled
00804004 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00812380  w    O .rodata	00000010 _ZTIPKf
00811710 g     F .text	00000098 alt_alarm_stop
0080247c  w    F .text	00000074 _ZN4FIFOIcE6isFullEv
00812370  w    O .rodata	00000010 _ZTIPd
008163e0 g     O .bss	00000004 alt_irq_active
00803dfc g     F .text	00000018 _ZSt9terminatev
00814630  w    O .rwdata	00000002 _ZTSs
00812648  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
010040ec g     F .exceptions	000000c8 alt_irq_handler
008144d8  w    O .rwdata	00000008 _ZTI3PIO
008131f4 g     O .rwdata	00000028 alt_dev_null
00802228 g     F .text	00000220 _ZN4UARTC2Emmjj
00814614  w    O .rwdata	00000003 _ZTSPi
008145cc  w    O .rwdata	00000003 _ZTSPf
00812500  w    O .rodata	00000010 _ZTIPKw
008145c0  w    O .rwdata	00000003 _ZTSPd
00800ffc g     F .text	00000050 _ZN3PIOD2Ev
00812238  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00810df4 g     F .text	00000044 alt_dcache_flush_all
0080a404 g     F .text	00000070 __hi0bits
00814548  w    O .rwdata	00000008 _ZTIx
0081465c  w    O .rwdata	00000003 _ZTSPw
00814520  w    O .rwdata	00000008 _ZTISt9exception
0080db1c g     F .text	000000d8 __fixdfsi
00800fac g     F .text	00000050 _ZN3PIOD1Ev
008145f4  w    O .rwdata	00000002 _ZTSm
008016e4 g     F .text	00000040 _ZN3SPIC2Em
008146c8 g       *ABS*	00000000 __ram_rwdata_end
008012b0 g     F .text	00000034 _ZN7PIO_Bus8allPinOnEv
00812450  w    O .rodata	00000010 _ZTIPi
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory
008003ac g     F .text	00000020 _ZN3FSM9_spi_menuEv
00804274 g     F .text	00000010 _ZNSt9type_infoD1Ev
008146a8 g     O .rwdata	00000008 alt_dev_list
008163b8 g     O .bss	00000004 __new_handler
0080f270 g     F .text	00000120 write
00800d7c g     F .text	00000020 _ZN3PIO9_init_irqEv
00804264 g     F .text	00000010 _ZNSt9type_infoD0Ev
008129e0 g       *ABS*	00000000 __ram_rodata_end
0080e6e8 g     F .text	000000d4 fstat
00814538  w    O .rwdata	00000008 _ZTIf
0080eb1c g     F .text	00000140 kill
008145fc  w    O .rwdata	00000003 _ZTSPl
00812490  w    O .rodata	00000010 _ZTIPs
0080b190 g     F .text	00000120 __pow5mult
008163d4 g     O .bss	00000004 __nlocale_changed
0080decc g     F .text	00000008 __umodsi3
0080425c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
008145e0  w    O .rwdata	00000004 _ZTSPKx
0080040c g     F .text	00000058 _ZN3FSMD0Ev
00816eb0 g       *ABS*	00000000 end
00800514 g     F .text	000007d0 _ZN3FSM5_initEv
00814654  w    O .rwdata	00000002 _ZTSc
0081092c g     F .text	000001c8 altera_avalon_uart_write
00804664 g     F .text	00000018 _Unwind_DeleteException
00814604  w    O .rwdata	00000004 _ZTSPKj
0080f608 g     F .text	000000c0 altera_avalon_jtag_uart_init
00812034 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008123f0  w    O .rodata	00000010 _ZTIPm
008101fc g     F .text	00000058 altera_avalon_uart_write_fd
0080df6c g     F .text	00000080 __clzsi2
00810254 g     F .text	00000048 altera_avalon_uart_close_fd
0080399c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0080fd2c g     F .text	00000240 altera_avalon_jtag_uart_write
0080925c g     F .text	00000004 __sfp_lock_acquire
008122f0  w    O .rodata	00000012 _ZTSSt13bad_exception
0080a178 g     F .text	000000e4 memchr
00805708 g     F .text	00001eac ___vfprintf_internal_r
0081463c  w    O .rwdata	00000002 _ZTSh
008019b4 g     F .text	00000084 _ZN4UART13buffer_putstrEPKc
008095f0 g     F .text	00000314 _free_r
00801494 g     F .text	00000050 _ZN7PIO_PinD0Ev
00801dd4 g     F .text	000000bc _ZN4UARTD0Ev
00812178  w    O .rodata	00000009 _ZTS7PIO_Pin
00811dc8 g     F .text	000001b0 __call_exitprocs
008121f8  w    O .rodata	00000009 _ZTS4FIFOIcE
008163d8 g     O .bss	00000004 __mlocale_changed
0081468c g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000004c _start
008163f0 g     O .bss	00000004 _alt_tick_rate
00804464 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
008125e4  w    O .rodata	0000000d _ZTSSt9type_info
0080277c  w    F .text	0000006c _ZN4FIFOIcED0Ev
0080ad20 g     F .text	0000014c __lshift
0080ff6c g     F .text	00000238 alt_avalon_spi_command
00812594  w    O .rodata	00000014 _ZTVSt9bad_alloc
008163f4 g     O .bss	00000004 _alt_nticks
008055a8 g     F .text	0000001c signal
0080efa4 g     F .text	00000120 read
0080f424 g     F .text	00000064 alt_sys_init
00814668  w    O .rwdata	00000003 _ZTSPb
008124b0  w    O .rodata	00000010 _ZTIPh
00812510  w    O .rodata	00000010 _ZTIPw
00811c90 g     F .text	00000134 __register_exitproc
008125a8  w    O .rodata	0000000d _ZTSSt9bad_alloc
00814580  w    O .rwdata	00000008 _ZTIh
00801a74 g     F .text	00000040 _ZN4UART14buffer_getcharEv
00802530  w    F .text	00000040 _ZN4FIFOIcE21_triggerFullConditionEv
008123c0  w    O .rodata	00000010 _ZTIPKx
0080ae6c g     F .text	000001e8 __multiply
0080f9a0 g     F .text	00000074 altera_avalon_jtag_uart_close
008144e0  w    O .rwdata	00000008 _ZTI7PIO_Bus
008129e0 g       *ABS*	00000000 __ram_rwdata_start
008047cc g     F .text	000000f8 _Unwind_SjLj_RaiseException
00812038 g       *ABS*	00000000 __ram_rodata_start
00816bf8 g     O .bss	00000028 __malloc_current_mallinfo
00804770 g     F .text	0000005c _Unwind_SjLj_Resume
0080aa18 g     F .text	0000017c __d2b
00801e90 g     F .text	000000bc _ZN4UARTD1Ev
00814560  w    O .rwdata	00000008 _ZTIj
00814530  w    O .rwdata	00000008 _ZTId
00804284 g     F .text	00000010 _ZNSt9type_infoD2Ev
00800dc8 g     F .text	0000008c _ZN3PIO8setValueEj
00803b58 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00812420  w    O .rodata	00000010 _ZTIPKj
0080127c g     F .text	00000034 _ZN7PIO_Bus9allPinOffEv
008144d0  w    O .rwdata	00000005 _ZTS3PIO
00804294 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00812588  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
0080f4c0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080038c g     F .text	00000020 _ZN3FSM13_wait_requestEv
00811a88 g     F .text	000000b8 alt_get_fd
00810ca8 g     F .text	0000014c alt_busy_sleep
00802448  w    F .text	00000034 _ZN4FIFOIcE7isEmptyEv
0080e438 g     F .text	000000c8 __fpcmp_parts_d
0080bd68 g     F .text	00000070 _close_r
008145c8  w    O .rwdata	00000004 _ZTSPKf
00814640  w    O .rwdata	00000004 _ZTSPKa
00811c1c g     F .text	00000074 memcmp
0080f570 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00816eb0 g       *ABS*	00000000 __alt_stack_base
0080f5b8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804074 g     F .text	00000034 _ZNSt9bad_allocD0Ev
00800d9c g     F .text	0000002c _ZN3PIO8getValueEv
00803c04 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00804058 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
008076cc g     F .text	0000013c __swsetup_r
00804994 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0080d524 g     F .text	00000258 __divdf3
00800e54 g     F .text	00000084 _ZN3PIOC1EmhNS_4ModeE
008093d4 g     F .text	000000f0 __sfp
0080a87c g     F .text	00000058 __copybits
0080423c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00804360 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
008129e0 g     O .rwdata	00000408 __malloc_av_
00809268 g     F .text	00000004 __sinit_lock_release
008075d8 g     F .text	000000b4 _vsnprintf_r
0080d160 g     F .text	000003c4 __muldf3
0080bb20 g     F .text	00000060 __sread
008122dc  w    O .rodata	00000014 _ZTVSt9exception
00811968 g     F .text	00000120 alt_find_file
00803a08 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
00810e38 g     F .text	000000b4 alt_dev_llist_insert
0080ef64 g     F .text	00000020 __malloc_lock
0080f184 g     F .text	000000bc sbrk
008121d0  w    O .rodata	00000010 _ZTV4UART
0081220c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00802a48 g     F .text	00000074 __cxa_throw
00808fd4 g     F .text	000001fc _fflush_r
00804528 g     F .text	00000010 _Unwind_SetIP
0080bcb4 g     F .text	000000b4 _calloc_r
00814568  w    O .rwdata	00000008 _ZTIi
008015cc g     F .text	0000005c _ZN7PIO_Pin6toggleEv
008123a0  w    O .rodata	00000010 _ZTIPKy
008011b8 g     F .text	00000088 _ZN7PIO_Bus8setValueEj
008163b0 g       *ABS*	00000000 __bss_start
0080516c g     F .text	00000098 memset
00802854 g     F .text	00000180 main
008145b8  w    O .rwdata	00000002 _ZTSe
008163ec g     O .bss	00000004 alt_envp
008026bc  w    F .text	000000c0 _ZN4FIFOIcEC1Ej
008163cc g     O .bss	00000004 __malloc_max_total_mem
0080f518 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00814528  w    O .rwdata	00000008 _ZTIe
00801434 g     F .text	00000060 _ZN7PIO_PinC1ER3PIOhj
00803d20 g     F .text	00000008 __cxa_get_globals_fast
0080ba34 g     F .text	00000008 __sclose
00802dac g     F .text	00000004 _ZdaPv
01000000 g       *ABS*	00000000 __alt_heap_limit
008145d0  w    O .rwdata	00000002 _ZTSf
0080bee8 g     F .text	00000014 fclose
00816d20 g     O .bss	00000190 _atexit0
008124e0  w    O .rodata	00000010 _ZTIPKc
00807a20 g     F .text	000015b4 _dtoa_r
00804a2c g     F .text	00000740 _malloc_r
008123e0  w    O .rodata	00000010 _ZTIPKm
008146b4 g     O .rwdata	00000004 alt_errno
00801628 g     F .text	00000060 _ZN7PIO_Pin3offEv
00805430 g     F .text	00000010 _init_signal
0081225c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
008002e4 g     F .text	00000088 _ZN3FSM6_unsetEv
00801724 g     F .text	00000040 _ZN3SPIC1Em
00809e68 g     F .text	000000b8 _fwalk
008013d4 g     F .text	00000060 _ZN7PIO_PinC2ER3PIOhj
00803ff4 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0081214c  w    O .rodata	00000010 _ZTV7PIO_Bus
0080de04 g     F .text	00000060 __divsi3
00812894 g     O .rodata	00000014 __thenan_df
00812340  w    O .rodata	00000010 _ZTIPKe
008094c4 g     F .text	0000012c _malloc_trim_r
00812038 g       *ABS*	00000000 __CTOR_END__
0080bb80 g     F .text	000000bc strcmp
00812480  w    O .rodata	00000010 _ZTIPKs
008124f0  w    O .rodata	00000010 _ZTIPc
00812038 g       *ABS*	00000000 __flash_rodata_start
008144f0  w    O .rwdata	00000005 _ZTS3SPI
00812038 g       *ABS*	00000000 __DTOR_LIST__
00801854 g     F .text	00000050 _ZN3SPID0Ev
0080d804 g     F .text	00000088 __nedf2
00814660  w    O .rwdata	00000002 _ZTSw
008145b4  w    O .rwdata	00000003 _ZTSPe
00801164 g     F .text	00000054 _ZN7PIO_Bus8getValueEv
0080f3f0 g     F .text	00000034 alt_irq_init
00814650  w    O .rwdata	00000003 _ZTSPc
0080f124 g     F .text	00000060 alt_release_fd
00804370 g     F .text	000000b0 _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
00803bd0 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00802008 g     F .text	00000220 _ZN4UARTC1Emmjj
008128a8 g     O .rodata	00000100 __clz_tab
008163dc g     O .bss	00000004 _PathLocale
00801944 g     F .text	00000038 _ZN4UART17outBuffer_isEmptyEv
00811bd0 g     F .text	00000014 atexit
0080bc3c g     F .text	00000078 _write_r
00801f4c g     F .text	000000bc _ZN4UARTD2Ev
00809fc8 g     F .text	0000001c setlocale
008027e8  w    F .text	0000006c _ZN4FIFOIcED1Ev
0080455c g     F .text	00000008 _Unwind_GetTextRelBase
00801ab4 g     F .text	000001c0 _ZN4UART13buffer_printfEPKcz
00803f3c g     F .text	00000044 __cxa_call_terminate
00814550  w    O .rwdata	00000008 _ZTIm
00814690 g     O .rwdata	00000004 _impure_ptr
008163e4 g     O .bss	00000004 alt_argc
00812320  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
00810fb0 g     F .text	00000064 _do_dtors
008004bc g     F .text	00000058 _ZN3FSMD2Ev
01004020 g       .exceptions	00000000 alt_irq_entry
0080a598 g     F .text	00000080 __ulp
0080b9c4 g     F .text	00000040 __isinfd
0080454c g     F .text	00000008 _Unwind_FindEnclosingFunction
00809320 g     F .text	00000018 __fp_unlock_all
008124c0  w    O .rodata	00000010 _ZTIPKa
00802b1c g     F .text	000000a0 _Znam
008146a0 g     O .rwdata	00000008 alt_fs_list
00812430  w    O .rodata	00000010 _ZTIPj
00804538 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00802c88 g     F .text	00000118 __cxa_begin_catch
00814634  w    O .rwdata	00000004 _ZTSPKh
00803a6c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00803e14 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00812540  w    O .rodata	00000010 _ZTIPKv
008145b0  w    O .rwdata	00000004 _ZTSPKe
01004020 g       *ABS*	00000000 __ram_exceptions_start
00809f34 g     F .text	00000010 localeconv
00814678  w    O .rwdata	00000002 _ZTSv
00803fc0 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00814518 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00801a38 g     F .text	0000003c _ZN4UART14buffer_putcharEc
00814624  w    O .rwdata	00000002 _ZTSt
0080429c g     F .text	00000080 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00812470  w    O .rodata	00000010 _ZTIPt
00811044 g     F .text	00000050 alt_ic_isr_register
00804108 g     F .text	00000134 __cxa_allocate_exception
00812360  w    O .rodata	00000010 _ZTIPKd
008122bc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
008124a0  w    O .rodata	00000010 _ZTIPKh
00804068 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
008146c8 g       *ABS*	00000000 _edata
008101a4 g     F .text	00000058 altera_avalon_uart_read_fd
00816eb0 g       *ABS*	00000000 _end
0081467c g     O .rwdata	00000001 _ZSt7nothrow
00814508  w    O .rwdata	00000008 _ZTI4UART
008034bc g     F .text	000004e0 __gxx_personality_sj0
010041b4 g       *ABS*	00000000 __ram_exceptions_end
00814618  w    O .rwdata	00000002 _ZTSi
0080fa14 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00801334 g     F .text	00000050 _ZN7PIO_BusD1Ev
008145dc  w    O .rwdata	00000002 _ZTSy
00803b0c g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00803fa0 g     F .text	00000010 _ZNSt9exceptionD1Ev
0081266c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
00811130 g     F .text	000000a0 alt_ic_irq_disable
00812104  w    O .rodata	00000010 _ZTV3FSM
008144c0  w    O .rwdata	00000005 _ZTS3FSM
00814600  w    O .rwdata	00000002 _ZTSl
0080baa4 g     F .text	0000007c __swrite
008145a8  w    O .rwdata	00000008 _ZTIv
00814688 g     O .rwdata	00000004 __malloc_trim_threshold
0081462c  w    O .rwdata	00000003 _ZTSPs
008118b4 g     F .text	00000020 altera_nios2_qsys_irq_init
00811be4 g     F .text	00000038 exit
008044ec g     F .text	00000018 _Unwind_SetGR
00809da0 g     F .text	000000c8 _fwalk_reent
0080ab94 g     F .text	0000018c __mdiff
00803d58 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0080de64 g     F .text	00000060 __modsi3
008040a8 g     F .text	00000010 _ZNSt9bad_allocD1Ev
008014e4 g     F .text	00000050 _ZN7PIO_PinD1Ev
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
00809260 g     F .text	00000004 __sfp_lock_release
008145c4  w    O .rwdata	00000002 _ZTSd
00814558  w    O .rwdata	00000008 _ZTIl
00803c58 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00812304  w    O .rodata	0000000c _ZTISt13bad_exception
00804474  w    F .text	00000030 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
0081063c g     F .text	00000060 altera_avalon_uart_close
008123d0  w    O .rodata	00000010 _ZTIPx
0080ba04 g     F .text	00000030 __isnand
0080e6c8 g     F .text	00000020 _exit
00810b54 g     F .text	00000154 alt_alarm_start
00800218 g     F .text	00000038 _ZN3FSMC1Ev
0080ded4 g     F .text	00000098 __muldi3
008044c0 g     F .text	00000018 _Unwind_GetGR
00803d28 g     F .text	00000008 __cxa_get_globals
00809fe4 g     F .text	00000194 __smakebuf_r
0081451c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0080563c g     F .text	00000074 strlen
008053cc g     F .text	00000064 _init_signal_r
00814680  w    O .rwdata	00000008 _ZTISt9type_info
00811528 g     F .text	00000188 open
00812350  w    O .rodata	00000010 _ZTIPe
0080d914 g     F .text	00000088 __gedf2
00812310  w    O .rodata	0000000d _ZTSSt9exception
008144f8  w    O .rwdata	00000008 _ZTI3SPI
00803f90 g     F .text	00000010 _ZNSt9exceptionD0Ev
00811014 g     F .text	00000030 alt_icache_flush_all
008145e8  w    O .rwdata	00000002 _ZTSx
00804554 g     F .text	00000008 _Unwind_GetDataRelBase
008146b8 g     O .rwdata	00000004 alt_priority_mask
00801764 g     F .text	0000006c _ZN3SPI15readCMVRegisterEh
00811094 g     F .text	0000009c alt_ic_irq_enable
00814578  w    O .rwdata	00000008 _ZTIs
008075b4 g     F .text	00000024 __vfprintf_internal
0081069c g     F .text	00000230 altera_avalon_uart_read
008124d0  w    O .rodata	00000010 _ZTIPa
00814658  w    O .rwdata	00000004 _ZTSPKw
0080d06c g     F .text	00000080 __subdf3
008018a4 g     F .text	00000050 _ZN3SPID1Ev
008017d0 g     F .text	00000084 _ZN3SPI16writeCMVRegisterEhh
0080a474 g     F .text	000000c4 __lo0bits
008146c0 g     O .rwdata	00000008 alt_alarm_list
00812560  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
008024f0  w    F .text	00000020 _ZN4FIFOIcE4lockEv
00810f4c g     F .text	00000064 _do_ctors
008054f4 g     F .text	00000014 __sigtramp
00814510  w    O .rwdata	00000008 _ZTI4FIFOIcE
0081263c  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
0080e500 g     F .text	000000fc close
00814638  w    O .rwdata	00000003 _ZTSPh
00812184  w    O .rodata	00000010 _ZTV3SPI
0080ecbc g     F .text	00000080 alt_load
0080dfec g     F .text	00000314 __pack_d
0080424c g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00814628  w    O .rwdata	00000004 _ZTSPKs
008053b8 g     F .text	00000014 raise
0081461c  w    O .rwdata	00000004 _ZTSPKt
008003cc g     F .text	00000020 _ZN3FSM9_spi_readEv
00804a04 g     F .text	00000014 free
00809264 g     F .text	00000004 __sinit_lock_acquire
0080b090 g     F .text	00000100 __multadd
00803a28 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0080a3dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

01004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1004000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100400c:	00bffd16 	blt	zero,r2,1004004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1004010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1004014:	08406514 	ori	at,at,404
    jmp r1
 1004018:	0800683a 	jmp	at
 100401c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

01004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040ec0 	call	10040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000306 	br	1004098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1004094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040e8:	ef80083a 	eret

010040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040ec:	defff904 	addi	sp,sp,-28
 10040f0:	dfc00615 	stw	ra,24(sp)
 10040f4:	df000515 	stw	fp,20(sp)
 10040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10040fc:	0005313a 	rdctl	r2,ipending
 1004100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1004104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1004108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004110:	00800044 	movi	r2,1
 1004114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1004118:	e0ffff17 	ldw	r3,-4(fp)
 100411c:	e0bffe17 	ldw	r2,-8(fp)
 1004120:	1884703a 	and	r2,r3,r2
 1004124:	1005003a 	cmpeq	r2,r2,zero
 1004128:	1000161e 	bne	r2,zero,1004184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100412c:	e0bffd17 	ldw	r2,-12(fp)
 1004130:	00c02074 	movhi	r3,129
 1004134:	18db0804 	addi	r3,r3,27680
 1004138:	100490fa 	slli	r2,r2,3
 100413c:	10c5883a 	add	r2,r2,r3
 1004140:	11400017 	ldw	r5,0(r2)
 1004144:	e0bffd17 	ldw	r2,-12(fp)
 1004148:	00c02074 	movhi	r3,129
 100414c:	18db0804 	addi	r3,r3,27680
 1004150:	100490fa 	slli	r2,r2,3
 1004154:	10c5883a 	add	r2,r2,r3
 1004158:	10800104 	addi	r2,r2,4
 100415c:	11000017 	ldw	r4,0(r2)
 1004160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004164:	0005313a 	rdctl	r2,ipending
 1004168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1004170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1004174:	e0bfff17 	ldw	r2,-4(fp)
 1004178:	1004c03a 	cmpne	r2,r2,zero
 100417c:	103fe31e 	bne	r2,zero,100410c <alt_irq_handler+0x20>
 1004180:	00000706 	br	10041a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1004184:	e0bffe17 	ldw	r2,-8(fp)
 1004188:	1085883a 	add	r2,r2,r2
 100418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1004190:	e0bffd17 	ldw	r2,-12(fp)
 1004194:	10800044 	addi	r2,r2,1
 1004198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100419c:	003fde06 	br	1004118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10041a0:	e037883a 	mov	sp,fp
 10041a4:	dfc00117 	ldw	ra,4(sp)
 10041a8:	df000017 	ldw	fp,0(sp)
 10041ac:	dec00204 	addi	sp,sp,8
 10041b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a0:	00bffd16 	blt	zero,r2,800198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001ac:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b0:	d6b13014 	ori	gp,gp,50368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b8:	1098ec14 	ori	r2,r2,25520

    movhi r3, %hi(__bss_end)
  8001bc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c0:	18dbac14 	ori	r3,r3,28336

    beq r2, r3, 1f
  8001c4:	10c00326 	beq	r2,r3,8001d4 <_start+0x40>

0:
    stw zero, (r2)
  8001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d0:	10fffd36 	bltu	r2,r3,8001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d4:	080ecbc0 	call	80ecbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d8:	080eef80 	call	80eef8 <alt_main>

008001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001dc:	003fff06 	br	8001dc <alt_after_alt_main>

008001e0 <_ZN3FSMC2Ev>:
#include "controller/SPI.h"
#include "controller/PIO.h"
#include "controller/PIO_Bus.h"
#include "controller/PIO_Pin.h"
#include "unistd.h"
FSM::FSM() {
  8001e0:	defffe04 	addi	sp,sp,-8
  8001e4:	df000115 	stw	fp,4(sp)
  8001e8:	df000104 	addi	fp,sp,4
  8001ec:	e13fff15 	stw	r4,-4(fp)
  8001f0:	00802074 	movhi	r2,129
  8001f4:	10884304 	addi	r2,r2,8460
  8001f8:	e0ffff17 	ldw	r3,-4(fp)
  8001fc:	18800015 	stw	r2,0(r3)
	_current_state = init;
  800200:	e0bfff17 	ldw	r2,-4(fp)
  800204:	10000115 	stw	zero,4(r2)
}
  800208:	e037883a 	mov	sp,fp
  80020c:	df000017 	ldw	fp,0(sp)
  800210:	dec00104 	addi	sp,sp,4
  800214:	f800283a 	ret

00800218 <_ZN3FSMC1Ev>:
#include "controller/SPI.h"
#include "controller/PIO.h"
#include "controller/PIO_Bus.h"
#include "controller/PIO_Pin.h"
#include "unistd.h"
FSM::FSM() {
  800218:	defffe04 	addi	sp,sp,-8
  80021c:	df000115 	stw	fp,4(sp)
  800220:	df000104 	addi	fp,sp,4
  800224:	e13fff15 	stw	r4,-4(fp)
  800228:	00802074 	movhi	r2,129
  80022c:	10884304 	addi	r2,r2,8460
  800230:	e0ffff17 	ldw	r3,-4(fp)
  800234:	18800015 	stw	r2,0(r3)
	_current_state = init;
  800238:	e0bfff17 	ldw	r2,-4(fp)
  80023c:	10000115 	stw	zero,4(r2)
}
  800240:	e037883a 	mov	sp,fp
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00104 	addi	sp,sp,4
  80024c:	f800283a 	ret

00800250 <_ZN3FSM10transitionEv>:
			_unset();
			break;
	}
}

void FSM::transition(void) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	df000215 	stw	fp,8(sp)
  800258:	df000204 	addi	fp,sp,8
  80025c:	e13ffe15 	stw	r4,-8(fp)

	switch (_current_state) {
  800260:	e0bffe17 	ldw	r2,-8(fp)
  800264:	10800117 	ldw	r2,4(r2)
  800268:	e0bfff15 	stw	r2,-4(fp)
  80026c:	e0ffff17 	ldw	r3,-4(fp)
  800270:	18800228 	cmpgeui	r2,r3,8
  800274:	1000171e 	bne	r2,zero,8002d4 <_ZN3FSM10transitionEv+0x84>
  800278:	e13fff17 	ldw	r4,-4(fp)
  80027c:	e13fff17 	ldw	r4,-4(fp)
  800280:	2105883a 	add	r2,r4,r4
  800284:	1087883a 	add	r3,r2,r2
  800288:	00802034 	movhi	r2,128
  80028c:	1080a704 	addi	r2,r2,668
  800290:	1885883a 	add	r2,r3,r2
  800294:	10800017 	ldw	r2,0(r2)
  800298:	1000683a 	jmp	r2
  80029c:	008002bc 	xorhi	r2,zero,10
  8002a0:	008002cc 	andi	r2,zero,11
  8002a4:	008002d4 	movui	r2,11
  8002a8:	008002d4 	movui	r2,11
  8002ac:	008002d4 	movui	r2,11
  8002b0:	008002d4 	movui	r2,11
  8002b4:	008002d4 	movui	r2,11
  8002b8:	008002d4 	movui	r2,11
		case init:
			_current_state = select_mode;
  8002bc:	e0fffe17 	ldw	r3,-8(fp)
  8002c0:	00800084 	movi	r2,2
  8002c4:	18800115 	stw	r2,4(r3)
			break;
  8002c8:	00000206 	br	8002d4 <_ZN3FSM10transitionEv+0x84>
			break;
		case spi_read_all:

			break;
		case unset:
			_current_state = init;
  8002cc:	e0bffe17 	ldw	r2,-8(fp)
  8002d0:	10000115 	stw	zero,4(r2)
			break;
	}
}
  8002d4:	e037883a 	mov	sp,fp
  8002d8:	df000017 	ldw	fp,0(sp)
  8002dc:	dec00104 	addi	sp,sp,4
  8002e0:	f800283a 	ret

008002e4 <_ZN3FSM6_unsetEv>:
		_uart->sendAll();
		usleep(1000000);
	}
}

void FSM::_unset(void) {
  8002e4:	defffd04 	addi	sp,sp,-12
  8002e8:	dfc00215 	stw	ra,8(sp)
  8002ec:	df000115 	stw	fp,4(sp)
  8002f0:	df000104 	addi	fp,sp,4
  8002f4:	e13fff15 	stw	r4,-4(fp)
	delete this->_uart;
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	10800217 	ldw	r2,8(r2)
  800300:	1005003a 	cmpeq	r2,r2,zero
  800304:	1000081e 	bne	r2,zero,800328 <_ZN3FSM6_unsetEv+0x44>
  800308:	e0bfff17 	ldw	r2,-4(fp)
  80030c:	10800217 	ldw	r2,8(r2)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800104 	addi	r2,r2,4
  800318:	10c00017 	ldw	r3,0(r2)
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	11000217 	ldw	r4,8(r2)
  800324:	183ee83a 	callr	r3
	delete this->_spi;
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	10800317 	ldw	r2,12(r2)
  800330:	1005003a 	cmpeq	r2,r2,zero
  800334:	1000081e 	bne	r2,zero,800358 <_ZN3FSM6_unsetEv+0x74>
  800338:	e0bfff17 	ldw	r2,-4(fp)
  80033c:	10800317 	ldw	r2,12(r2)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	10800104 	addi	r2,r2,4
  800348:	10c00017 	ldw	r3,0(r2)
  80034c:	e0bfff17 	ldw	r2,-4(fp)
  800350:	11000317 	ldw	r4,12(r2)
  800354:	183ee83a 	callr	r3
}
  800358:	e037883a 	mov	sp,fp
  80035c:	dfc00117 	ldw	ra,4(sp)
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00204 	addi	sp,sp,8
  800368:	f800283a 	ret

0080036c <_ZN3FSM12_select_modeEv>:

void FSM::_select_mode(void) {
  80036c:	defffe04 	addi	sp,sp,-8
  800370:	df000115 	stw	fp,4(sp)
  800374:	df000104 	addi	fp,sp,4
  800378:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
  80037c:	e037883a 	mov	sp,fp
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00104 	addi	sp,sp,4
  800388:	f800283a 	ret

0080038c <_ZN3FSM13_wait_requestEv>:

void FSM::_wait_request(void) {
  80038c:	defffe04 	addi	sp,sp,-8
  800390:	df000115 	stw	fp,4(sp)
  800394:	df000104 	addi	fp,sp,4
  800398:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00104 	addi	sp,sp,4
  8003a8:	f800283a 	ret

008003ac <_ZN3FSM9_spi_menuEv>:

void FSM::_spi_menu(void) {
  8003ac:	defffe04 	addi	sp,sp,-8
  8003b0:	df000115 	stw	fp,4(sp)
  8003b4:	df000104 	addi	fp,sp,4
  8003b8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003bc:	e037883a 	mov	sp,fp
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00104 	addi	sp,sp,4
  8003c8:	f800283a 	ret

008003cc <_ZN3FSM9_spi_readEv>:

void FSM::_spi_read(void) {
  8003cc:	defffe04 	addi	sp,sp,-8
  8003d0:	df000115 	stw	fp,4(sp)
  8003d4:	df000104 	addi	fp,sp,4
  8003d8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00104 	addi	sp,sp,4
  8003e8:	f800283a 	ret

008003ec <_ZN3FSM10_spi_writeEv>:

void FSM::_spi_write(void) {
  8003ec:	defffe04 	addi	sp,sp,-8
  8003f0:	df000115 	stw	fp,4(sp)
  8003f4:	df000104 	addi	fp,sp,4
  8003f8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003fc:	e037883a 	mov	sp,fp
  800400:	df000017 	ldw	fp,0(sp)
  800404:	dec00104 	addi	sp,sp,4
  800408:	f800283a 	ret

0080040c <_ZN3FSMD0Ev>:
#include "unistd.h"
FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  80040c:	defffd04 	addi	sp,sp,-12
  800410:	dfc00215 	stw	ra,8(sp)
  800414:	df000115 	stw	fp,4(sp)
  800418:	df000104 	addi	fp,sp,4
  80041c:	e13fff15 	stw	r4,-4(fp)
  800420:	00c02074 	movhi	r3,129
  800424:	18c84304 	addi	r3,r3,8460
  800428:	e0bfff17 	ldw	r2,-4(fp)
  80042c:	10c00015 	stw	r3,0(r2)
	_unset();
  800430:	e13fff17 	ldw	r4,-4(fp)
  800434:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  800438:	00800044 	movi	r2,1
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	1005003a 	cmpeq	r2,r2,zero
  800444:	1000021e 	bne	r2,zero,800450 <_ZN3FSMD0Ev+0x44>
  800448:	e13fff17 	ldw	r4,-4(fp)
  80044c:	0802da00 	call	802da0 <_ZdlPv>
  800450:	e037883a 	mov	sp,fp
  800454:	dfc00117 	ldw	ra,4(sp)
  800458:	df000017 	ldw	fp,0(sp)
  80045c:	dec00204 	addi	sp,sp,8
  800460:	f800283a 	ret

00800464 <_ZN3FSMD1Ev>:
#include "unistd.h"
FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  800464:	defffd04 	addi	sp,sp,-12
  800468:	dfc00215 	stw	ra,8(sp)
  80046c:	df000115 	stw	fp,4(sp)
  800470:	df000104 	addi	fp,sp,4
  800474:	e13fff15 	stw	r4,-4(fp)
  800478:	00c02074 	movhi	r3,129
  80047c:	18c84304 	addi	r3,r3,8460
  800480:	e0bfff17 	ldw	r2,-4(fp)
  800484:	10c00015 	stw	r3,0(r2)
	_unset();
  800488:	e13fff17 	ldw	r4,-4(fp)
  80048c:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  800490:	0005883a 	mov	r2,zero
  800494:	10803fcc 	andi	r2,r2,255
  800498:	1005003a 	cmpeq	r2,r2,zero
  80049c:	1000021e 	bne	r2,zero,8004a8 <_ZN3FSMD1Ev+0x44>
  8004a0:	e13fff17 	ldw	r4,-4(fp)
  8004a4:	0802da00 	call	802da0 <_ZdlPv>
  8004a8:	e037883a 	mov	sp,fp
  8004ac:	dfc00117 	ldw	ra,4(sp)
  8004b0:	df000017 	ldw	fp,0(sp)
  8004b4:	dec00204 	addi	sp,sp,8
  8004b8:	f800283a 	ret

008004bc <_ZN3FSMD2Ev>:
#include "unistd.h"
FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  8004bc:	defffd04 	addi	sp,sp,-12
  8004c0:	dfc00215 	stw	ra,8(sp)
  8004c4:	df000115 	stw	fp,4(sp)
  8004c8:	df000104 	addi	fp,sp,4
  8004cc:	e13fff15 	stw	r4,-4(fp)
  8004d0:	00c02074 	movhi	r3,129
  8004d4:	18c84304 	addi	r3,r3,8460
  8004d8:	e0bfff17 	ldw	r2,-4(fp)
  8004dc:	10c00015 	stw	r3,0(r2)
	_unset();
  8004e0:	e13fff17 	ldw	r4,-4(fp)
  8004e4:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  8004e8:	0005883a 	mov	r2,zero
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	1005003a 	cmpeq	r2,r2,zero
  8004f4:	1000021e 	bne	r2,zero,800500 <_ZN3FSMD2Ev+0x44>
  8004f8:	e13fff17 	ldw	r4,-4(fp)
  8004fc:	0802da00 	call	802da0 <_ZdlPv>
  800500:	e037883a 	mov	sp,fp
  800504:	dfc00117 	ldw	ra,4(sp)
  800508:	df000017 	ldw	fp,0(sp)
  80050c:	dec00204 	addi	sp,sp,8
  800510:	f800283a 	ret

00800514 <_ZN3FSM5_initEv>:
			_current_state = init;
			break;
	}
}

void FSM::_init(void) {
  800514:	deffc304 	addi	sp,sp,-244
  800518:	dfc03c15 	stw	ra,240(sp)
  80051c:	df003b15 	stw	fp,236(sp)
  800520:	ddc03a15 	stw	r23,232(sp)
  800524:	dd803915 	stw	r22,228(sp)
  800528:	dd403815 	stw	r21,224(sp)
  80052c:	dd003715 	stw	r20,220(sp)
  800530:	dcc03615 	stw	r19,216(sp)
  800534:	dc803515 	stw	r18,212(sp)
  800538:	dc403415 	stw	r17,208(sp)
  80053c:	dc003315 	stw	r16,204(sp)
  800540:	df003304 	addi	fp,sp,204
  800544:	e13fd015 	stw	r4,-192(fp)
  800548:	00802034 	movhi	r2,128
  80054c:	108d2f04 	addi	r2,r2,13500
  800550:	e0bfd715 	stw	r2,-164(fp)
  800554:	00802074 	movhi	r2,129
  800558:	1087de04 	addi	r2,r2,8056
  80055c:	e0bfd815 	stw	r2,-160(fp)
  800560:	e0bfd904 	addi	r2,fp,-156
  800564:	e0ffd004 	addi	r3,fp,-192
  800568:	10c00015 	stw	r3,0(r2)
  80056c:	00c02034 	movhi	r3,128
  800570:	18c2e104 	addi	r3,r3,2948
  800574:	10c00115 	stw	r3,4(r2)
  800578:	16c00215 	stw	sp,8(r2)
  80057c:	e13fd104 	addi	r4,fp,-188
  800580:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>

	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  800584:	00bfffc4 	movi	r2,-1
  800588:	e0bfd215 	stw	r2,-184(fp)
  80058c:	01000704 	movi	r4,28
  800590:	0803e3c0 	call	803e3c <_Znwm>
  800594:	e0bffd15 	stw	r2,-12(fp)
  800598:	00801004 	movi	r2,64
  80059c:	d8800015 	stw	r2,0(sp)
  8005a0:	008002c4 	movi	r2,11
  8005a4:	e0bfd215 	stw	r2,-184(fp)
  8005a8:	e13ffd17 	ldw	r4,-12(fp)
  8005ac:	01404074 	movhi	r5,257
  8005b0:	29641004 	addi	r5,r5,-28608
  8005b4:	01800044 	movi	r6,1
  8005b8:	01c01004 	movi	r7,64
  8005bc:	08020080 	call	802008 <_ZN4UARTC1Emmjj>
  8005c0:	e0bfd017 	ldw	r2,-192(fp)
  8005c4:	e0fffd17 	ldw	r3,-12(fp)
  8005c8:	10c00215 	stw	r3,8(r2)
	_uart->buffer_printf("Init UART ok\r\n");
  8005cc:	e0bfd017 	ldw	r2,-192(fp)
  8005d0:	11000217 	ldw	r4,8(r2)
  8005d4:	00bfffc4 	movi	r2,-1
  8005d8:	e0bfd215 	stw	r2,-184(fp)
  8005dc:	01402074 	movhi	r5,129
  8005e0:	29480e04 	addi	r5,r5,8248
  8005e4:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
	_uart->sendAll();
  8005e8:	e0bfd017 	ldw	r2,-192(fp)
  8005ec:	11000217 	ldw	r4,8(r2)
  8005f0:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>

	this->_spi = new SPI(SPI_BASE);
  8005f4:	01000204 	movi	r4,8
  8005f8:	0803e3c0 	call	803e3c <_Znwm>
  8005fc:	e0bffc15 	stw	r2,-16(fp)
  800600:	00800284 	movi	r2,10
  800604:	e0bfd215 	stw	r2,-184(fp)
  800608:	e13ffc17 	ldw	r4,-16(fp)
  80060c:	01404074 	movhi	r5,257
  800610:	29641804 	addi	r5,r5,-28576
  800614:	08017240 	call	801724 <_ZN3SPIC1Em>
  800618:	00000a06 	br	800644 <_ZN3FSM5_initEv+0x130>
  80061c:	e0bffe17 	ldw	r2,-8(fp)
  800620:	e0bfe815 	stw	r2,-96(fp)
	}
}

void FSM::_init(void) {

	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  800624:	e13ffd17 	ldw	r4,-12(fp)
  800628:	0802da00 	call	802da0 <_ZdlPv>
  80062c:	e0ffe817 	ldw	r3,-96(fp)
  800630:	e0fffe15 	stw	r3,-8(fp)
  800634:	00bfffc4 	movi	r2,-1
  800638:	e0bfd215 	stw	r2,-184(fp)
  80063c:	e13ffe17 	ldw	r4,-8(fp)
  800640:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_uart->buffer_printf("Init UART ok\r\n");
	_uart->sendAll();

	this->_spi = new SPI(SPI_BASE);
  800644:	e0bfd017 	ldw	r2,-192(fp)
  800648:	e0fffc17 	ldw	r3,-16(fp)
  80064c:	10c00315 	stw	r3,12(r2)
	_uart->buffer_printf("Init SPI ok\r\n");
  800650:	e0bfd017 	ldw	r2,-192(fp)
  800654:	11000217 	ldw	r4,8(r2)
  800658:	00bfffc4 	movi	r2,-1
  80065c:	e0bfd215 	stw	r2,-184(fp)
  800660:	01402074 	movhi	r5,129
  800664:	29481204 	addi	r5,r5,8264
  800668:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
	_uart->sendAll();
  80066c:	e0bfd017 	ldw	r2,-192(fp)
  800670:	11000217 	ldw	r4,8(r2)
  800674:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  800678:	01000504 	movi	r4,20
  80067c:	0803e3c0 	call	803e3c <_Znwm>
  800680:	e0bffb15 	stw	r2,-20(fp)
  800684:	00800244 	movi	r2,9
  800688:	e0bfd215 	stw	r2,-184(fp)
  80068c:	e13ffb17 	ldw	r4,-20(fp)
  800690:	01404074 	movhi	r5,257
  800694:	29642404 	addi	r5,r5,-28528
  800698:	01800804 	movi	r6,32
  80069c:	000f883a 	mov	r7,zero
  8006a0:	0800e540 	call	800e54 <_ZN3PIOC1EmhNS_4ModeE>
  8006a4:	00000a06 	br	8006d0 <_ZN3FSM5_initEv+0x1bc>
  8006a8:	e0bffe17 	ldw	r2,-8(fp)
  8006ac:	e0bfe715 	stw	r2,-100(fp)

	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
	_uart->buffer_printf("Init UART ok\r\n");
	_uart->sendAll();

	this->_spi = new SPI(SPI_BASE);
  8006b0:	e13ffc17 	ldw	r4,-16(fp)
  8006b4:	0802da00 	call	802da0 <_ZdlPv>
  8006b8:	e0ffe717 	ldw	r3,-100(fp)
  8006bc:	e0fffe15 	stw	r3,-8(fp)
  8006c0:	00bfffc4 	movi	r2,-1
  8006c4:	e0bfd215 	stw	r2,-184(fp)
  8006c8:	e13ffe17 	ldw	r4,-8(fp)
  8006cc:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->sendAll();

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  8006d0:	e0bfd017 	ldw	r2,-192(fp)
  8006d4:	e0fffb17 	ldw	r3,-20(fp)
  8006d8:	10c00815 	stw	r3,32(r2)
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
  8006dc:	00bfffc4 	movi	r2,-1
  8006e0:	e0bfd215 	stw	r2,-184(fp)
  8006e4:	01000504 	movi	r4,20
  8006e8:	0803e3c0 	call	803e3c <_Znwm>
  8006ec:	e0bffa15 	stw	r2,-24(fp)
  8006f0:	e0bfd017 	ldw	r2,-192(fp)
  8006f4:	11400817 	ldw	r5,32(r2)
  8006f8:	00800044 	movi	r2,1
  8006fc:	d8800015 	stw	r2,0(sp)
  800700:	00800204 	movi	r2,8
  800704:	e0bfd215 	stw	r2,-184(fp)
  800708:	e13ffa17 	ldw	r4,-24(fp)
  80070c:	01800044 	movi	r6,1
  800710:	01c00284 	movi	r7,10
  800714:	08010d80 	call	8010d8 <_ZN7PIO_BusC1ER3PIOhhh>
  800718:	00000a06 	br	800744 <_ZN3FSM5_initEv+0x230>
  80071c:	e0bffe17 	ldw	r2,-8(fp)
  800720:	e0bfe615 	stw	r2,-104(fp)

	this->_spi = new SPI(SPI_BASE);
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->sendAll();

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  800724:	e13ffb17 	ldw	r4,-20(fp)
  800728:	0802da00 	call	802da0 <_ZdlPv>
  80072c:	e0ffe617 	ldw	r3,-104(fp)
  800730:	e0fffe15 	stw	r3,-8(fp)
  800734:	00bfffc4 	movi	r2,-1
  800738:	e0bfd215 	stw	r2,-184(fp)
  80073c:	e13ffe17 	ldw	r4,-8(fp)
  800740:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
  800744:	e0bfd017 	ldw	r2,-192(fp)
  800748:	e0fffa17 	ldw	r3,-24(fp)
  80074c:	10c00915 	stw	r3,36(r2)
	_bus_lvds_ch0 = new PIO_Bus(*_pio_input, 1, 10, 11);
  800750:	00bfffc4 	movi	r2,-1
  800754:	e0bfd215 	stw	r2,-184(fp)
  800758:	01000504 	movi	r4,20
  80075c:	0803e3c0 	call	803e3c <_Znwm>
  800760:	e0bff915 	stw	r2,-28(fp)
  800764:	e0bfd017 	ldw	r2,-192(fp)
  800768:	11400817 	ldw	r5,32(r2)
  80076c:	008002c4 	movi	r2,11
  800770:	d8800015 	stw	r2,0(sp)
  800774:	008001c4 	movi	r2,7
  800778:	e0bfd215 	stw	r2,-184(fp)
  80077c:	e13ff917 	ldw	r4,-28(fp)
  800780:	01800044 	movi	r6,1
  800784:	01c00284 	movi	r7,10
  800788:	08010d80 	call	8010d8 <_ZN7PIO_BusC1ER3PIOhhh>
  80078c:	00000a06 	br	8007b8 <_ZN3FSM5_initEv+0x2a4>
  800790:	e0bffe17 	ldw	r2,-8(fp)
  800794:	e0bfe515 	stw	r2,-108(fp)
	this->_spi = new SPI(SPI_BASE);
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->sendAll();

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
  800798:	e13ffa17 	ldw	r4,-24(fp)
  80079c:	0802da00 	call	802da0 <_ZdlPv>
  8007a0:	e0ffe517 	ldw	r3,-108(fp)
  8007a4:	e0fffe15 	stw	r3,-8(fp)
  8007a8:	00bfffc4 	movi	r2,-1
  8007ac:	e0bfd215 	stw	r2,-184(fp)
  8007b0:	e13ffe17 	ldw	r4,-8(fp)
  8007b4:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_bus_lvds_ch0 = new PIO_Bus(*_pio_input, 1, 10, 11);
  8007b8:	e0bfd017 	ldw	r2,-192(fp)
  8007bc:	e0fff917 	ldw	r3,-28(fp)
  8007c0:	10c00a15 	stw	r3,40(r2)
	_bus_lvds_ch9 = new PIO_Bus(*_pio_input, 1, 10, 21);
  8007c4:	00bfffc4 	movi	r2,-1
  8007c8:	e0bfd215 	stw	r2,-184(fp)
  8007cc:	01000504 	movi	r4,20
  8007d0:	0803e3c0 	call	803e3c <_Znwm>
  8007d4:	e0bff815 	stw	r2,-32(fp)
  8007d8:	e0bfd017 	ldw	r2,-192(fp)
  8007dc:	11400817 	ldw	r5,32(r2)
  8007e0:	00800544 	movi	r2,21
  8007e4:	d8800015 	stw	r2,0(sp)
  8007e8:	00800184 	movi	r2,6
  8007ec:	e0bfd215 	stw	r2,-184(fp)
  8007f0:	e13ff817 	ldw	r4,-32(fp)
  8007f4:	01800044 	movi	r6,1
  8007f8:	01c00284 	movi	r7,10
  8007fc:	08010d80 	call	8010d8 <_ZN7PIO_BusC1ER3PIOhhh>
  800800:	00000a06 	br	80082c <_ZN3FSM5_initEv+0x318>
  800804:	e0bffe17 	ldw	r2,-8(fp)
  800808:	e0bfe415 	stw	r2,-112(fp)
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->sendAll();

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
	_bus_lvds_ch0 = new PIO_Bus(*_pio_input, 1, 10, 11);
  80080c:	e13ff917 	ldw	r4,-28(fp)
  800810:	0802da00 	call	802da0 <_ZdlPv>
  800814:	e0ffe417 	ldw	r3,-112(fp)
  800818:	e0fffe15 	stw	r3,-8(fp)
  80081c:	00bfffc4 	movi	r2,-1
  800820:	e0bfd215 	stw	r2,-184(fp)
  800824:	e13ffe17 	ldw	r4,-8(fp)
  800828:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_bus_lvds_ch9 = new PIO_Bus(*_pio_input, 1, 10, 21);
  80082c:	e0bfd017 	ldw	r2,-192(fp)
  800830:	e0fff817 	ldw	r3,-32(fp)
  800834:	10c00b15 	stw	r3,44(r2)
	_lvds_clk_in= new PIO_Pin(*_pio_input, 1, 0x0001);
  800838:	00bfffc4 	movi	r2,-1
  80083c:	e0bfd215 	stw	r2,-184(fp)
  800840:	01000404 	movi	r4,16
  800844:	0803e3c0 	call	803e3c <_Znwm>
  800848:	e0bff715 	stw	r2,-36(fp)
  80084c:	e0bfd017 	ldw	r2,-192(fp)
  800850:	11400817 	ldw	r5,32(r2)
  800854:	00800144 	movi	r2,5
  800858:	e0bfd215 	stw	r2,-184(fp)
  80085c:	e13ff717 	ldw	r4,-36(fp)
  800860:	01800044 	movi	r6,1
  800864:	01c00044 	movi	r7,1
  800868:	08014340 	call	801434 <_ZN7PIO_PinC1ER3PIOhj>
  80086c:	00000a06 	br	800898 <_ZN3FSM5_initEv+0x384>
  800870:	e0bffe17 	ldw	r2,-8(fp)
  800874:	e0bfe315 	stw	r2,-116(fp)
	_uart->sendAll();

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
	_bus_lvds_ch0 = new PIO_Bus(*_pio_input, 1, 10, 11);
	_bus_lvds_ch9 = new PIO_Bus(*_pio_input, 1, 10, 21);
  800878:	e13ff817 	ldw	r4,-32(fp)
  80087c:	0802da00 	call	802da0 <_ZdlPv>
  800880:	e0ffe317 	ldw	r3,-116(fp)
  800884:	e0fffe15 	stw	r3,-8(fp)
  800888:	00bfffc4 	movi	r2,-1
  80088c:	e0bfd215 	stw	r2,-184(fp)
  800890:	e13ffe17 	ldw	r4,-8(fp)
  800894:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_lvds_clk_in= new PIO_Pin(*_pio_input, 1, 0x0001);
  800898:	e0bfd017 	ldw	r2,-192(fp)
  80089c:	e0fff717 	ldw	r3,-36(fp)
  8008a0:	10c00c15 	stw	r3,48(r2)
	_uart->buffer_printf("Init PIO input ok\r\n");
  8008a4:	e0bfd017 	ldw	r2,-192(fp)
  8008a8:	11000217 	ldw	r4,8(r2)
  8008ac:	00bfffc4 	movi	r2,-1
  8008b0:	e0bfd215 	stw	r2,-184(fp)
  8008b4:	01402074 	movhi	r5,129
  8008b8:	29481604 	addi	r5,r5,8280
  8008bc:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
	_uart->sendAll();
  8008c0:	e0bfd017 	ldw	r2,-192(fp)
  8008c4:	11000217 	ldw	r4,8(r2)
  8008c8:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
  8008cc:	01000504 	movi	r4,20
  8008d0:	0803e3c0 	call	803e3c <_Znwm>
  8008d4:	e0bff615 	stw	r2,-40(fp)
  8008d8:	00800104 	movi	r2,4
  8008dc:	e0bfd215 	stw	r2,-184(fp)
  8008e0:	e13ff617 	ldw	r4,-40(fp)
  8008e4:	01404074 	movhi	r5,257
  8008e8:	29642004 	addi	r5,r5,-28544
  8008ec:	01800204 	movi	r6,8
  8008f0:	01c00044 	movi	r7,1
  8008f4:	0800e540 	call	800e54 <_ZN3PIOC1EmhNS_4ModeE>
  8008f8:	00000a06 	br	800924 <_ZN3FSM5_initEv+0x410>
  8008fc:	e0bffe17 	ldw	r2,-8(fp)
  800900:	e0bfe215 	stw	r2,-120(fp)

	_pio_input = new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
	_bus_lvds_ctr = new PIO_Bus(*_pio_input, 1, 10, 1);
	_bus_lvds_ch0 = new PIO_Bus(*_pio_input, 1, 10, 11);
	_bus_lvds_ch9 = new PIO_Bus(*_pio_input, 1, 10, 21);
	_lvds_clk_in= new PIO_Pin(*_pio_input, 1, 0x0001);
  800904:	e13ff717 	ldw	r4,-36(fp)
  800908:	0802da00 	call	802da0 <_ZdlPv>
  80090c:	e0ffe217 	ldw	r3,-120(fp)
  800910:	e0fffe15 	stw	r3,-8(fp)
  800914:	00bfffc4 	movi	r2,-1
  800918:	e0bfd215 	stw	r2,-184(fp)
  80091c:	e13ffe17 	ldw	r4,-8(fp)
  800920:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_uart->buffer_printf("Init PIO input ok\r\n");
	_uart->sendAll();

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
  800924:	e0bfd017 	ldw	r2,-192(fp)
  800928:	e0fff617 	ldw	r3,-40(fp)
  80092c:	10c00415 	stw	r3,16(r2)
	_res_n= new PIO_Pin(*_pio_output, 0, 0x01);
  800930:	00bfffc4 	movi	r2,-1
  800934:	e0bfd215 	stw	r2,-184(fp)
  800938:	01000404 	movi	r4,16
  80093c:	0803e3c0 	call	803e3c <_Znwm>
  800940:	e0bff515 	stw	r2,-44(fp)
  800944:	e0bfd017 	ldw	r2,-192(fp)
  800948:	11400417 	ldw	r5,16(r2)
  80094c:	008000c4 	movi	r2,3
  800950:	e0bfd215 	stw	r2,-184(fp)
  800954:	e13ff517 	ldw	r4,-44(fp)
  800958:	000d883a 	mov	r6,zero
  80095c:	01c00044 	movi	r7,1
  800960:	08014340 	call	801434 <_ZN7PIO_PinC1ER3PIOhj>
  800964:	00000a06 	br	800990 <_ZN3FSM5_initEv+0x47c>
  800968:	e0bffe17 	ldw	r2,-8(fp)
  80096c:	e0bfe115 	stw	r2,-124(fp)
	_lvds_clk_in= new PIO_Pin(*_pio_input, 1, 0x0001);
	_uart->buffer_printf("Init PIO input ok\r\n");
	_uart->sendAll();

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
  800970:	e13ff617 	ldw	r4,-40(fp)
  800974:	0802da00 	call	802da0 <_ZdlPv>
  800978:	e0ffe117 	ldw	r3,-124(fp)
  80097c:	e0fffe15 	stw	r3,-8(fp)
  800980:	00bfffc4 	movi	r2,-1
  800984:	e0bfd215 	stw	r2,-184(fp)
  800988:	e13ffe17 	ldw	r4,-8(fp)
  80098c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_res_n= new PIO_Pin(*_pio_output, 0, 0x01);
  800990:	e0bfd017 	ldw	r2,-192(fp)
  800994:	e0fff517 	ldw	r3,-44(fp)
  800998:	10c00515 	stw	r3,20(r2)
	_frame_req= new PIO_Pin(*_pio_output, 1, 0x02);
  80099c:	00bfffc4 	movi	r2,-1
  8009a0:	e0bfd215 	stw	r2,-184(fp)
  8009a4:	01000404 	movi	r4,16
  8009a8:	0803e3c0 	call	803e3c <_Znwm>
  8009ac:	e0bff415 	stw	r2,-48(fp)
  8009b0:	e0bfd017 	ldw	r2,-192(fp)
  8009b4:	11400417 	ldw	r5,16(r2)
  8009b8:	00800084 	movi	r2,2
  8009bc:	e0bfd215 	stw	r2,-184(fp)
  8009c0:	e13ff417 	ldw	r4,-48(fp)
  8009c4:	01800044 	movi	r6,1
  8009c8:	01c00084 	movi	r7,2
  8009cc:	08014340 	call	801434 <_ZN7PIO_PinC1ER3PIOhj>
  8009d0:	00000a06 	br	8009fc <_ZN3FSM5_initEv+0x4e8>
  8009d4:	e0bffe17 	ldw	r2,-8(fp)
  8009d8:	e0bfe015 	stw	r2,-128(fp)
	_uart->buffer_printf("Init PIO input ok\r\n");
	_uart->sendAll();

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
	_res_n= new PIO_Pin(*_pio_output, 0, 0x01);
  8009dc:	e13ff517 	ldw	r4,-44(fp)
  8009e0:	0802da00 	call	802da0 <_ZdlPv>
  8009e4:	e0ffe017 	ldw	r3,-128(fp)
  8009e8:	e0fffe15 	stw	r3,-8(fp)
  8009ec:	00bfffc4 	movi	r2,-1
  8009f0:	e0bfd215 	stw	r2,-184(fp)
  8009f4:	e13ffe17 	ldw	r4,-8(fp)
  8009f8:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_frame_req= new PIO_Pin(*_pio_output, 1, 0x02);
  8009fc:	e0bfd017 	ldw	r2,-192(fp)
  800a00:	e0fff417 	ldw	r3,-48(fp)
  800a04:	10c00615 	stw	r3,24(r2)
	_bus_debug= new PIO_Bus(*_pio_output, 1, 6, 2);
  800a08:	00bfffc4 	movi	r2,-1
  800a0c:	e0bfd215 	stw	r2,-184(fp)
  800a10:	01000504 	movi	r4,20
  800a14:	0803e3c0 	call	803e3c <_Znwm>
  800a18:	e0bff315 	stw	r2,-52(fp)
  800a1c:	e0bfd017 	ldw	r2,-192(fp)
  800a20:	11400417 	ldw	r5,16(r2)
  800a24:	00800084 	movi	r2,2
  800a28:	d8800015 	stw	r2,0(sp)
  800a2c:	00800044 	movi	r2,1
  800a30:	e0bfd215 	stw	r2,-184(fp)
  800a34:	e13ff317 	ldw	r4,-52(fp)
  800a38:	01800044 	movi	r6,1
  800a3c:	01c00184 	movi	r7,6
  800a40:	08010d80 	call	8010d8 <_ZN7PIO_BusC1ER3PIOhhh>
  800a44:	00000a06 	br	800a70 <_ZN3FSM5_initEv+0x55c>
  800a48:	e0bffe17 	ldw	r2,-8(fp)
  800a4c:	e0bfdf15 	stw	r2,-132(fp)
	_uart->sendAll();

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
	_res_n= new PIO_Pin(*_pio_output, 0, 0x01);
	_frame_req= new PIO_Pin(*_pio_output, 1, 0x02);
  800a50:	e13ff417 	ldw	r4,-48(fp)
  800a54:	0802da00 	call	802da0 <_ZdlPv>
  800a58:	e0ffdf17 	ldw	r3,-132(fp)
  800a5c:	e0fffe15 	stw	r3,-8(fp)
  800a60:	00bfffc4 	movi	r2,-1
  800a64:	e0bfd215 	stw	r2,-184(fp)
  800a68:	e13ffe17 	ldw	r4,-8(fp)
  800a6c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_bus_debug= new PIO_Bus(*_pio_output, 1, 6, 2);
  800a70:	e0bfd017 	ldw	r2,-192(fp)
  800a74:	e0fff317 	ldw	r3,-52(fp)
  800a78:	10c00715 	stw	r3,28(r2)

	_uart->buffer_printf("Init PIO output ok\r\n");
  800a7c:	e0bfd017 	ldw	r2,-192(fp)
  800a80:	11000217 	ldw	r4,8(r2)
  800a84:	00bfffc4 	movi	r2,-1
  800a88:	e0bfd215 	stw	r2,-184(fp)
  800a8c:	01402074 	movhi	r5,129
  800a90:	29481b04 	addi	r5,r5,8300
  800a94:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
	_uart->sendAll();
  800a98:	e0bfd017 	ldw	r2,-192(fp)
  800a9c:	11000217 	ldw	r4,8(r2)
  800aa0:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>


	_res_n->off();
  800aa4:	e0bfd017 	ldw	r2,-192(fp)
  800aa8:	11000517 	ldw	r4,20(r2)
  800aac:	08016280 	call	801628 <_ZN7PIO_Pin3offEv>
	_frame_req->off();
  800ab0:	e0bfd017 	ldw	r2,-192(fp)
  800ab4:	11000617 	ldw	r4,24(r2)
  800ab8:	08016280 	call	801628 <_ZN7PIO_Pin3offEv>

	usleep(1000000);
  800abc:	010003f4 	movhi	r4,15
  800ac0:	21109004 	addi	r4,r4,16960
  800ac4:	080f2400 	call	80f240 <usleep>

	_uart->buffer_printf(
	    "PIO input= %08x | CLK=%01d | CTR=%03x | CH0=%03x | CH9=%03x \r\n",
	    _pio_input->getValue(), _lvds_clk_in->getValue(),  _bus_lvds_ctr->getValue(),
	    _bus_lvds_ch0->getValue(), _bus_lvds_ch9->getValue());
  800ac8:	e0bfd017 	ldw	r2,-192(fp)
  800acc:	10800217 	ldw	r2,8(r2)
  800ad0:	e0bff215 	stw	r2,-56(fp)
  800ad4:	e0bfd017 	ldw	r2,-192(fp)
  800ad8:	11000817 	ldw	r4,32(r2)
  800adc:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  800ae0:	e0bff115 	stw	r2,-60(fp)
  800ae4:	e0bfd017 	ldw	r2,-192(fp)
  800ae8:	11000c17 	ldw	r4,48(r2)
  800aec:	08015840 	call	801584 <_ZN7PIO_Pin8getValueEv>
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	e0bff015 	stw	r2,-64(fp)
  800af8:	e0bfd017 	ldw	r2,-192(fp)
  800afc:	11000917 	ldw	r4,36(r2)
  800b00:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800b04:	e0bfef15 	stw	r2,-68(fp)
  800b08:	e0bfd017 	ldw	r2,-192(fp)
  800b0c:	11000a17 	ldw	r4,40(r2)
  800b10:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800b14:	e0bfee15 	stw	r2,-72(fp)
  800b18:	e0bfd017 	ldw	r2,-192(fp)
  800b1c:	11000b17 	ldw	r4,44(r2)
  800b20:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800b24:	e0ffef17 	ldw	r3,-68(fp)
  800b28:	d8c00015 	stw	r3,0(sp)
  800b2c:	e0ffee17 	ldw	r3,-72(fp)
  800b30:	d8c00115 	stw	r3,4(sp)
  800b34:	d8800215 	stw	r2,8(sp)
  800b38:	e13ff217 	ldw	r4,-56(fp)
  800b3c:	01402074 	movhi	r5,129
  800b40:	29482104 	addi	r5,r5,8324
  800b44:	e1bff117 	ldw	r6,-60(fp)
  800b48:	e1fff017 	ldw	r7,-64(fp)
  800b4c:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
	_uart->sendAll();
  800b50:	e0bfd017 	ldw	r2,-192(fp)
  800b54:	11000217 	ldw	r4,8(r2)
  800b58:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>

	usleep(1000000);
  800b5c:	010003f4 	movhi	r4,15
  800b60:	21109004 	addi	r4,r4,16960
  800b64:	080f2400 	call	80f240 <usleep>

	_res_n->on();
  800b68:	e0bfd017 	ldw	r2,-192(fp)
  800b6c:	11000517 	ldw	r4,20(r2)
  800b70:	08016880 	call	801688 <_ZN7PIO_Pin2onEv>

	usleep(1000000);
  800b74:	010003f4 	movhi	r4,15
  800b78:	21109004 	addi	r4,r4,16960
  800b7c:	080f2400 	call	80f240 <usleep>
  800b80:	00002d06 	br	800c38 <_ZN3FSM5_initEv+0x724>
  800b84:	e7003004 	addi	fp,fp,192
  800b88:	e0bfd217 	ldw	r2,-184(fp)
  800b8c:	e0bfff15 	stw	r2,-4(fp)
  800b90:	e0ffd317 	ldw	r3,-180(fp)
  800b94:	e0fffe15 	stw	r3,-8(fp)
  800b98:	e0ffff17 	ldw	r3,-4(fp)
  800b9c:	18800060 	cmpeqi	r2,r3,1
  800ba0:	103fa91e 	bne	r2,zero,800a48 <_ZN3FSM5_initEv+0x534>
  800ba4:	e0ffff17 	ldw	r3,-4(fp)
  800ba8:	188000a0 	cmpeqi	r2,r3,2
  800bac:	103f891e 	bne	r2,zero,8009d4 <_ZN3FSM5_initEv+0x4c0>
  800bb0:	e0ffff17 	ldw	r3,-4(fp)
  800bb4:	188000e0 	cmpeqi	r2,r3,3
  800bb8:	103f6b1e 	bne	r2,zero,800968 <_ZN3FSM5_initEv+0x454>
  800bbc:	e0ffff17 	ldw	r3,-4(fp)
  800bc0:	18800120 	cmpeqi	r2,r3,4
  800bc4:	103f4d1e 	bne	r2,zero,8008fc <_ZN3FSM5_initEv+0x3e8>
  800bc8:	e0ffff17 	ldw	r3,-4(fp)
  800bcc:	18800160 	cmpeqi	r2,r3,5
  800bd0:	103f271e 	bne	r2,zero,800870 <_ZN3FSM5_initEv+0x35c>
  800bd4:	e0ffff17 	ldw	r3,-4(fp)
  800bd8:	188001a0 	cmpeqi	r2,r3,6
  800bdc:	103f091e 	bne	r2,zero,800804 <_ZN3FSM5_initEv+0x2f0>
  800be0:	e0ffff17 	ldw	r3,-4(fp)
  800be4:	188001e0 	cmpeqi	r2,r3,7
  800be8:	103ee91e 	bne	r2,zero,800790 <_ZN3FSM5_initEv+0x27c>
  800bec:	e0ffff17 	ldw	r3,-4(fp)
  800bf0:	18800220 	cmpeqi	r2,r3,8
  800bf4:	103ec91e 	bne	r2,zero,80071c <_ZN3FSM5_initEv+0x208>
  800bf8:	e0ffff17 	ldw	r3,-4(fp)
  800bfc:	18800260 	cmpeqi	r2,r3,9
  800c00:	103ea91e 	bne	r2,zero,8006a8 <_ZN3FSM5_initEv+0x194>
  800c04:	e0ffff17 	ldw	r3,-4(fp)
  800c08:	188002a0 	cmpeqi	r2,r3,10
  800c0c:	103e831e 	bne	r2,zero,80061c <_ZN3FSM5_initEv+0x108>
  800c10:	e0bffe17 	ldw	r2,-8(fp)
  800c14:	e0bfde15 	stw	r2,-136(fp)

	_pio_output = new PIO(CMV_TRANSMIT_DATA_BASE, CMV_TRANSMIT_DATA_DATA_WIDTH,
	    PIO::OUTPUT);
	_res_n= new PIO_Pin(*_pio_output, 0, 0x01);
	_frame_req= new PIO_Pin(*_pio_output, 1, 0x02);
	_bus_debug= new PIO_Bus(*_pio_output, 1, 6, 2);
  800c18:	e13ff317 	ldw	r4,-52(fp)
  800c1c:	0802da00 	call	802da0 <_ZdlPv>
  800c20:	e0ffde17 	ldw	r3,-136(fp)
  800c24:	e0fffe15 	stw	r3,-8(fp)
  800c28:	00bfffc4 	movi	r2,-1
  800c2c:	e0bfd215 	stw	r2,-184(fp)
  800c30:	e13ffe17 	ldw	r4,-8(fp)
  800c34:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	while (1) {

		_uart->buffer_printf(
		    "PIO_input= %08x | CLK=%01d | CTR=%03x | CH0=%03x | CH9=%03x \r\n",
		    _pio_input->getValue(), _lvds_clk_in->getValue(),  _bus_lvds_ctr->getValue(),
		    _bus_lvds_ch0->getValue(), _bus_lvds_ch9->getValue());
  800c38:	e0bfd017 	ldw	r2,-192(fp)
  800c3c:	10800217 	ldw	r2,8(r2)
  800c40:	e0bfed15 	stw	r2,-76(fp)
  800c44:	e0bfd017 	ldw	r2,-192(fp)
  800c48:	11000817 	ldw	r4,32(r2)
  800c4c:	00bfffc4 	movi	r2,-1
  800c50:	e0bfd215 	stw	r2,-184(fp)
  800c54:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  800c58:	e0bfec15 	stw	r2,-80(fp)
  800c5c:	e0bfd017 	ldw	r2,-192(fp)
  800c60:	11000c17 	ldw	r4,48(r2)
  800c64:	08015840 	call	801584 <_ZN7PIO_Pin8getValueEv>
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	e0bfeb15 	stw	r2,-84(fp)
  800c70:	e0bfd017 	ldw	r2,-192(fp)
  800c74:	11000917 	ldw	r4,36(r2)
  800c78:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800c7c:	e0bfea15 	stw	r2,-88(fp)
  800c80:	e0bfd017 	ldw	r2,-192(fp)
  800c84:	11000a17 	ldw	r4,40(r2)
  800c88:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800c8c:	e0bfe915 	stw	r2,-92(fp)
  800c90:	e0bfd017 	ldw	r2,-192(fp)
  800c94:	11000b17 	ldw	r4,44(r2)
  800c98:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  800c9c:	e0ffea17 	ldw	r3,-88(fp)
  800ca0:	d8c00015 	stw	r3,0(sp)
  800ca4:	e0ffe917 	ldw	r3,-92(fp)
  800ca8:	d8c00115 	stw	r3,4(sp)
  800cac:	d8800215 	stw	r2,8(sp)
  800cb0:	e13fed17 	ldw	r4,-76(fp)
  800cb4:	01402074 	movhi	r5,129
  800cb8:	29483104 	addi	r5,r5,8388
  800cbc:	e1bfec17 	ldw	r6,-80(fp)
  800cc0:	e1ffeb17 	ldw	r7,-84(fp)
  800cc4:	0801ab40 	call	801ab4 <_ZN4UART13buffer_printfEPKcz>
		_uart->sendAll();
  800cc8:	e0bfd017 	ldw	r2,-192(fp)
  800ccc:	11000217 	ldw	r4,8(r2)
  800cd0:	0801d280 	call	801d28 <_ZN4UART7sendAllEv>
		usleep(1000000);
  800cd4:	010003f4 	movhi	r4,15
  800cd8:	21109004 	addi	r4,r4,16960
  800cdc:	080f2400 	call	80f240 <usleep>

	_res_n->on();

	usleep(1000000);

	while (1) {
  800ce0:	003fd506 	br	800c38 <_ZN3FSM5_initEv+0x724>

00800ce4 <_ZN3FSM6actionEv>:

FSM::~FSM() {
	_unset();
}

void FSM::action(void) {
  800ce4:	defffc04 	addi	sp,sp,-16
  800ce8:	dfc00315 	stw	ra,12(sp)
  800cec:	df000215 	stw	fp,8(sp)
  800cf0:	df000204 	addi	fp,sp,8
  800cf4:	e13ffe15 	stw	r4,-8(fp)

	switch (_current_state) {
  800cf8:	e0bffe17 	ldw	r2,-8(fp)
  800cfc:	10800117 	ldw	r2,4(r2)
  800d00:	e0bfff15 	stw	r2,-4(fp)
  800d04:	e0ffff17 	ldw	r3,-4(fp)
  800d08:	18800228 	cmpgeui	r2,r3,8
  800d0c:	1000161e 	bne	r2,zero,800d68 <_ZN3FSM6actionEv+0x84>
  800d10:	e13fff17 	ldw	r4,-4(fp)
  800d14:	e13fff17 	ldw	r4,-4(fp)
  800d18:	2105883a 	add	r2,r4,r4
  800d1c:	1087883a 	add	r3,r2,r2
  800d20:	00802034 	movhi	r2,128
  800d24:	10834d04 	addi	r2,r2,3380
  800d28:	1885883a 	add	r2,r3,r2
  800d2c:	10800017 	ldw	r2,0(r2)
  800d30:	1000683a 	jmp	r2
  800d34:	00800d54 	movui	r2,53
  800d38:	00800d60 	cmpeqi	r2,zero,53
  800d3c:	00800d68 	cmpgeui	r2,zero,53
  800d40:	00800d68 	cmpgeui	r2,zero,53
  800d44:	00800d68 	cmpgeui	r2,zero,53
  800d48:	00800d68 	cmpgeui	r2,zero,53
  800d4c:	00800d68 	cmpgeui	r2,zero,53
  800d50:	00800d68 	cmpgeui	r2,zero,53

		case init:
			_init();
  800d54:	e13ffe17 	ldw	r4,-8(fp)
  800d58:	08005140 	call	800514 <_ZN3FSM5_initEv>
			break;
  800d5c:	00000206 	br	800d68 <_ZN3FSM6actionEv+0x84>
			break;
		case spi_read_all:

			break;
		case unset:
			_unset();
  800d60:	e13ffe17 	ldw	r4,-8(fp)
  800d64:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
			break;
	}
}
  800d68:	e037883a 	mov	sp,fp
  800d6c:	dfc00117 	ldw	ra,4(sp)
  800d70:	df000017 	ldw	fp,0(sp)
  800d74:	dec00204 	addi	sp,sp,8
  800d78:	f800283a 	ret

00800d7c <_ZN3PIO9_init_irqEv>:
}

PIO::~PIO() {
}

void PIO::_init_irq( void ) { }
  800d7c:	defffe04 	addi	sp,sp,-8
  800d80:	df000115 	stw	fp,4(sp)
  800d84:	df000104 	addi	fp,sp,4
  800d88:	e13fff15 	stw	r4,-4(fp)
  800d8c:	e037883a 	mov	sp,fp
  800d90:	df000017 	ldw	fp,0(sp)
  800d94:	dec00104 	addi	sp,sp,4
  800d98:	f800283a 	ret

00800d9c <_ZN3PIO8getValueEv>:

unsigned int PIO::getValue() {
  800d9c:	defffe04 	addi	sp,sp,-8
  800da0:	df000115 	stw	fp,4(sp)
  800da4:	df000104 	addi	fp,sp,4
  800da8:	e13fff15 	stw	r4,-4(fp)
	return IORD_ALTERA_AVALON_PIO_DATA(_base_address);
  800dac:	e0bfff17 	ldw	r2,-4(fp)
  800db0:	10800217 	ldw	r2,8(r2)
  800db4:	10800037 	ldwio	r2,0(r2)
}
  800db8:	e037883a 	mov	sp,fp
  800dbc:	df000017 	ldw	fp,0(sp)
  800dc0:	dec00104 	addi	sp,sp,4
  800dc4:	f800283a 	ret

00800dc8 <_ZN3PIO8setValueEj>:

void PIO::setValue(unsigned int val) {
  800dc8:	defffc04 	addi	sp,sp,-16
  800dcc:	dfc00315 	stw	ra,12(sp)
  800dd0:	df000215 	stw	fp,8(sp)
  800dd4:	df000204 	addi	fp,sp,8
  800dd8:	e13ffe15 	stw	r4,-8(fp)
  800ddc:	e17fff15 	stw	r5,-4(fp)
	if (_mode == PIO::INPUT) throw("Change value of PIO in input mode");
  800de0:	e0bffe17 	ldw	r2,-8(fp)
  800de4:	10800317 	ldw	r2,12(r2)
  800de8:	1004c03a 	cmpne	r2,r2,zero
  800dec:	10000b1e 	bne	r2,zero,800e1c <_ZN3PIO8setValueEj+0x54>
  800df0:	01000104 	movi	r4,4
  800df4:	08041080 	call	804108 <__cxa_allocate_exception>
  800df8:	1009883a 	mov	r4,r2
  800dfc:	2007883a 	mov	r3,r4
  800e00:	00802074 	movhi	r2,129
  800e04:	10884504 	addi	r2,r2,8468
  800e08:	18800015 	stw	r2,0(r3)
  800e0c:	01402074 	movhi	r5,129
  800e10:	29493804 	addi	r5,r5,9440
  800e14:	000d883a 	mov	r6,zero
  800e18:	0802a480 	call	802a48 <__cxa_throw>
	IOWR_ALTERA_AVALON_PIO_DATA(_base_address, val);
  800e1c:	e0bffe17 	ldw	r2,-8(fp)
  800e20:	10800217 	ldw	r2,8(r2)
  800e24:	e0ffff17 	ldw	r3,-4(fp)
  800e28:	10c00035 	stwio	r3,0(r2)
	_value= this->getValue();
  800e2c:	e13ffe17 	ldw	r4,-8(fp)
  800e30:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  800e34:	1007883a 	mov	r3,r2
  800e38:	e0bffe17 	ldw	r2,-8(fp)
  800e3c:	10c00415 	stw	r3,16(r2)
}
  800e40:	e037883a 	mov	sp,fp
  800e44:	dfc00117 	ldw	ra,4(sp)
  800e48:	df000017 	ldw	fp,0(sp)
  800e4c:	dec00204 	addi	sp,sp,8
  800e50:	f800283a 	ret

00800e54 <_ZN3PIOC1EmhNS_4ModeE>:
#include "PIO.h"
#include "altera_avalon_pio_regs.h"


PIO::PIO(const unsigned long base_address, const unsigned char width,
    Mode mode)
  800e54:	defffa04 	addi	sp,sp,-24
  800e58:	dfc00515 	stw	ra,20(sp)
  800e5c:	df000415 	stw	fp,16(sp)
  800e60:	df000404 	addi	fp,sp,16
  800e64:	e13ffc15 	stw	r4,-16(fp)
  800e68:	e17ffd15 	stw	r5,-12(fp)
  800e6c:	e1ffff15 	stw	r7,-4(fp)
  800e70:	e1bffe05 	stb	r6,-8(fp)
	:  _base_address( base_address ), _width( width ), _mode(mode)
  800e74:	00c02074 	movhi	r3,129
  800e78:	18c85004 	addi	r3,r3,8512
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c00015 	stw	r3,0(r2)
  800e84:	e0fffc17 	ldw	r3,-16(fp)
  800e88:	e0bffe03 	ldbu	r2,-8(fp)
  800e8c:	18800105 	stb	r2,4(r3)
  800e90:	e0fffc17 	ldw	r3,-16(fp)
  800e94:	e0bffd17 	ldw	r2,-12(fp)
  800e98:	18800215 	stw	r2,8(r3)
  800e9c:	e0fffc17 	ldw	r3,-16(fp)
  800ea0:	e0bfff17 	ldw	r2,-4(fp)
  800ea4:	18800315 	stw	r2,12(r3)
{
	_value= this->getValue();
  800ea8:	e13ffc17 	ldw	r4,-16(fp)
  800eac:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  800eb0:	1007883a 	mov	r3,r2
  800eb4:	e0bffc17 	ldw	r2,-16(fp)
  800eb8:	10c00415 	stw	r3,16(r2)
	_init_irq();
  800ebc:	e13ffc17 	ldw	r4,-16(fp)
  800ec0:	0800d7c0 	call	800d7c <_ZN3PIO9_init_irqEv>
}
  800ec4:	e037883a 	mov	sp,fp
  800ec8:	dfc00117 	ldw	ra,4(sp)
  800ecc:	df000017 	ldw	fp,0(sp)
  800ed0:	dec00204 	addi	sp,sp,8
  800ed4:	f800283a 	ret

00800ed8 <_ZN3PIOC2EmhNS_4ModeE>:
#include "PIO.h"
#include "altera_avalon_pio_regs.h"


PIO::PIO(const unsigned long base_address, const unsigned char width,
    Mode mode)
  800ed8:	defffa04 	addi	sp,sp,-24
  800edc:	dfc00515 	stw	ra,20(sp)
  800ee0:	df000415 	stw	fp,16(sp)
  800ee4:	df000404 	addi	fp,sp,16
  800ee8:	e13ffc15 	stw	r4,-16(fp)
  800eec:	e17ffd15 	stw	r5,-12(fp)
  800ef0:	e1ffff15 	stw	r7,-4(fp)
  800ef4:	e1bffe05 	stb	r6,-8(fp)
	:  _base_address( base_address ), _width( width ), _mode(mode)
  800ef8:	00c02074 	movhi	r3,129
  800efc:	18c85004 	addi	r3,r3,8512
  800f00:	e0bffc17 	ldw	r2,-16(fp)
  800f04:	10c00015 	stw	r3,0(r2)
  800f08:	e0fffc17 	ldw	r3,-16(fp)
  800f0c:	e0bffe03 	ldbu	r2,-8(fp)
  800f10:	18800105 	stb	r2,4(r3)
  800f14:	e0fffc17 	ldw	r3,-16(fp)
  800f18:	e0bffd17 	ldw	r2,-12(fp)
  800f1c:	18800215 	stw	r2,8(r3)
  800f20:	e0fffc17 	ldw	r3,-16(fp)
  800f24:	e0bfff17 	ldw	r2,-4(fp)
  800f28:	18800315 	stw	r2,12(r3)
{
	_value= this->getValue();
  800f2c:	e13ffc17 	ldw	r4,-16(fp)
  800f30:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  800f34:	1007883a 	mov	r3,r2
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10c00415 	stw	r3,16(r2)
	_init_irq();
  800f40:	e13ffc17 	ldw	r4,-16(fp)
  800f44:	0800d7c0 	call	800d7c <_ZN3PIO9_init_irqEv>
}
  800f48:	e037883a 	mov	sp,fp
  800f4c:	dfc00117 	ldw	ra,4(sp)
  800f50:	df000017 	ldw	fp,0(sp)
  800f54:	dec00204 	addi	sp,sp,8
  800f58:	f800283a 	ret

00800f5c <_ZN3PIOD0Ev>:

PIO::~PIO() {
  800f5c:	defffd04 	addi	sp,sp,-12
  800f60:	dfc00215 	stw	ra,8(sp)
  800f64:	df000115 	stw	fp,4(sp)
  800f68:	df000104 	addi	fp,sp,4
  800f6c:	e13fff15 	stw	r4,-4(fp)
  800f70:	00c02074 	movhi	r3,129
  800f74:	18c85004 	addi	r3,r3,8512
  800f78:	e0bfff17 	ldw	r2,-4(fp)
  800f7c:	10c00015 	stw	r3,0(r2)
}
  800f80:	00800044 	movi	r2,1
  800f84:	10803fcc 	andi	r2,r2,255
  800f88:	1005003a 	cmpeq	r2,r2,zero
  800f8c:	1000021e 	bne	r2,zero,800f98 <_ZN3PIOD0Ev+0x3c>
  800f90:	e13fff17 	ldw	r4,-4(fp)
  800f94:	0802da00 	call	802da0 <_ZdlPv>
  800f98:	e037883a 	mov	sp,fp
  800f9c:	dfc00117 	ldw	ra,4(sp)
  800fa0:	df000017 	ldw	fp,0(sp)
  800fa4:	dec00204 	addi	sp,sp,8
  800fa8:	f800283a 	ret

00800fac <_ZN3PIOD1Ev>:
{
	_value= this->getValue();
	_init_irq();
}

PIO::~PIO() {
  800fac:	defffd04 	addi	sp,sp,-12
  800fb0:	dfc00215 	stw	ra,8(sp)
  800fb4:	df000115 	stw	fp,4(sp)
  800fb8:	df000104 	addi	fp,sp,4
  800fbc:	e13fff15 	stw	r4,-4(fp)
  800fc0:	00c02074 	movhi	r3,129
  800fc4:	18c85004 	addi	r3,r3,8512
  800fc8:	e0bfff17 	ldw	r2,-4(fp)
  800fcc:	10c00015 	stw	r3,0(r2)
}
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	10803fcc 	andi	r2,r2,255
  800fd8:	1005003a 	cmpeq	r2,r2,zero
  800fdc:	1000021e 	bne	r2,zero,800fe8 <_ZN3PIOD1Ev+0x3c>
  800fe0:	e13fff17 	ldw	r4,-4(fp)
  800fe4:	0802da00 	call	802da0 <_ZdlPv>
  800fe8:	e037883a 	mov	sp,fp
  800fec:	dfc00117 	ldw	ra,4(sp)
  800ff0:	df000017 	ldw	fp,0(sp)
  800ff4:	dec00204 	addi	sp,sp,8
  800ff8:	f800283a 	ret

00800ffc <_ZN3PIOD2Ev>:
{
	_value= this->getValue();
	_init_irq();
}

PIO::~PIO() {
  800ffc:	defffd04 	addi	sp,sp,-12
  801000:	dfc00215 	stw	ra,8(sp)
  801004:	df000115 	stw	fp,4(sp)
  801008:	df000104 	addi	fp,sp,4
  80100c:	e13fff15 	stw	r4,-4(fp)
  801010:	00c02074 	movhi	r3,129
  801014:	18c85004 	addi	r3,r3,8512
  801018:	e0bfff17 	ldw	r2,-4(fp)
  80101c:	10c00015 	stw	r3,0(r2)
}
  801020:	0005883a 	mov	r2,zero
  801024:	10803fcc 	andi	r2,r2,255
  801028:	1005003a 	cmpeq	r2,r2,zero
  80102c:	1000021e 	bne	r2,zero,801038 <_ZN3PIOD2Ev+0x3c>
  801030:	e13fff17 	ldw	r4,-4(fp)
  801034:	0802da00 	call	802da0 <_ZdlPv>
  801038:	e037883a 	mov	sp,fp
  80103c:	dfc00117 	ldw	ra,4(sp)
  801040:	df000017 	ldw	fp,0(sp)
  801044:	dec00204 	addi	sp,sp,8
  801048:	f800283a 	ret

0080104c <_ZN7PIO_BusC2ER3PIOhhh>:
 */

#include "PIO_Bus.h"

PIO_Bus::PIO_Bus(PIO& pio, const unsigned char id, const unsigned char width,
    const unsigned char left_shift):
  80104c:	defffa04 	addi	sp,sp,-24
  801050:	df000515 	stw	fp,20(sp)
  801054:	df000504 	addi	fp,sp,20
  801058:	e13ffb15 	stw	r4,-20(fp)
  80105c:	e17ffc15 	stw	r5,-16(fp)
  801060:	e0800117 	ldw	r2,4(fp)
  801064:	e1bffd05 	stb	r6,-12(fp)
  801068:	e1fffe05 	stb	r7,-8(fp)
  80106c:	e0bfff05 	stb	r2,-4(fp)
    _pio(pio), _left_shift(left_shift), _id(id)
, _mask(((1 << width)-1) << left_shift)
  801070:	00c02074 	movhi	r3,129
  801074:	18c85504 	addi	r3,r3,8532
  801078:	e0bffb17 	ldw	r2,-20(fp)
  80107c:	10c00015 	stw	r3,0(r2)
  801080:	e0fffb17 	ldw	r3,-20(fp)
  801084:	e0bffc17 	ldw	r2,-16(fp)
  801088:	18800115 	stw	r2,4(r3)
  80108c:	e0fffe03 	ldbu	r3,-8(fp)
  801090:	00800044 	movi	r2,1
  801094:	10c4983a 	sll	r2,r2,r3
  801098:	10ffffc4 	addi	r3,r2,-1
  80109c:	e0bfff03 	ldbu	r2,-4(fp)
  8010a0:	1884983a 	sll	r2,r3,r2
  8010a4:	1007883a 	mov	r3,r2
  8010a8:	e0bffb17 	ldw	r2,-20(fp)
  8010ac:	10c00215 	stw	r3,8(r2)
  8010b0:	e0fffb17 	ldw	r3,-20(fp)
  8010b4:	e0bfff03 	ldbu	r2,-4(fp)
  8010b8:	18800305 	stb	r2,12(r3)
  8010bc:	e0fffd03 	ldbu	r3,-12(fp)
  8010c0:	e0bffb17 	ldw	r2,-20(fp)
  8010c4:	10c00415 	stw	r3,16(r2)
    {
}
  8010c8:	e037883a 	mov	sp,fp
  8010cc:	df000017 	ldw	fp,0(sp)
  8010d0:	dec00104 	addi	sp,sp,4
  8010d4:	f800283a 	ret

008010d8 <_ZN7PIO_BusC1ER3PIOhhh>:
 */

#include "PIO_Bus.h"

PIO_Bus::PIO_Bus(PIO& pio, const unsigned char id, const unsigned char width,
    const unsigned char left_shift):
  8010d8:	defffa04 	addi	sp,sp,-24
  8010dc:	df000515 	stw	fp,20(sp)
  8010e0:	df000504 	addi	fp,sp,20
  8010e4:	e13ffb15 	stw	r4,-20(fp)
  8010e8:	e17ffc15 	stw	r5,-16(fp)
  8010ec:	e0800117 	ldw	r2,4(fp)
  8010f0:	e1bffd05 	stb	r6,-12(fp)
  8010f4:	e1fffe05 	stb	r7,-8(fp)
  8010f8:	e0bfff05 	stb	r2,-4(fp)
    _pio(pio), _left_shift(left_shift), _id(id)
, _mask(((1 << width)-1) << left_shift)
  8010fc:	00c02074 	movhi	r3,129
  801100:	18c85504 	addi	r3,r3,8532
  801104:	e0bffb17 	ldw	r2,-20(fp)
  801108:	10c00015 	stw	r3,0(r2)
  80110c:	e0fffb17 	ldw	r3,-20(fp)
  801110:	e0bffc17 	ldw	r2,-16(fp)
  801114:	18800115 	stw	r2,4(r3)
  801118:	e0fffe03 	ldbu	r3,-8(fp)
  80111c:	00800044 	movi	r2,1
  801120:	10c4983a 	sll	r2,r2,r3
  801124:	10ffffc4 	addi	r3,r2,-1
  801128:	e0bfff03 	ldbu	r2,-4(fp)
  80112c:	1884983a 	sll	r2,r3,r2
  801130:	1007883a 	mov	r3,r2
  801134:	e0bffb17 	ldw	r2,-20(fp)
  801138:	10c00215 	stw	r3,8(r2)
  80113c:	e0fffb17 	ldw	r3,-20(fp)
  801140:	e0bfff03 	ldbu	r2,-4(fp)
  801144:	18800305 	stb	r2,12(r3)
  801148:	e0fffd03 	ldbu	r3,-12(fp)
  80114c:	e0bffb17 	ldw	r2,-20(fp)
  801150:	10c00415 	stw	r3,16(r2)
    {
}
  801154:	e037883a 	mov	sp,fp
  801158:	df000017 	ldw	fp,0(sp)
  80115c:	dec00104 	addi	sp,sp,4
  801160:	f800283a 	ret

00801164 <_ZN7PIO_Bus8getValueEv>:

PIO_Bus::~PIO_Bus() {
}

unsigned int PIO_Bus::getValue() {
  801164:	defffd04 	addi	sp,sp,-12
  801168:	dfc00215 	stw	ra,8(sp)
  80116c:	df000115 	stw	fp,4(sp)
  801170:	df000104 	addi	fp,sp,4
  801174:	e13fff15 	stw	r4,-4(fp)
	return (_pio.getValue() & _mask) >> _left_shift;
  801178:	e0bfff17 	ldw	r2,-4(fp)
  80117c:	11000117 	ldw	r4,4(r2)
  801180:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  801184:	1007883a 	mov	r3,r2
  801188:	e0bfff17 	ldw	r2,-4(fp)
  80118c:	10800217 	ldw	r2,8(r2)
  801190:	1886703a 	and	r3,r3,r2
  801194:	e0bfff17 	ldw	r2,-4(fp)
  801198:	10800303 	ldbu	r2,12(r2)
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	1884d83a 	srl	r2,r3,r2
}
  8011a4:	e037883a 	mov	sp,fp
  8011a8:	dfc00117 	ldw	ra,4(sp)
  8011ac:	df000017 	ldw	fp,0(sp)
  8011b0:	dec00204 	addi	sp,sp,8
  8011b4:	f800283a 	ret

008011b8 <_ZN7PIO_Bus8setValueEj>:

void PIO_Bus::setValue(unsigned int val) {
  8011b8:	defffb04 	addi	sp,sp,-20
  8011bc:	dfc00415 	stw	ra,16(sp)
  8011c0:	df000315 	stw	fp,12(sp)
  8011c4:	dc000215 	stw	r16,8(sp)
  8011c8:	df000204 	addi	fp,sp,8
  8011cc:	e13ffe15 	stw	r4,-8(fp)
  8011d0:	e17fff15 	stw	r5,-4(fp)
	_pio.setValue((_pio.getValue() & (~_mask) ) | (( val << _left_shift) & _mask));
  8011d4:	e0bffe17 	ldw	r2,-8(fp)
  8011d8:	14000117 	ldw	r16,4(r2)
  8011dc:	e0bffe17 	ldw	r2,-8(fp)
  8011e0:	11000117 	ldw	r4,4(r2)
  8011e4:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  8011e8:	1007883a 	mov	r3,r2
  8011ec:	e0bffe17 	ldw	r2,-8(fp)
  8011f0:	10800217 	ldw	r2,8(r2)
  8011f4:	0084303a 	nor	r2,zero,r2
  8011f8:	1888703a 	and	r4,r3,r2
  8011fc:	e0bffe17 	ldw	r2,-8(fp)
  801200:	10800303 	ldbu	r2,12(r2)
  801204:	10c03fcc 	andi	r3,r2,255
  801208:	e0bfff17 	ldw	r2,-4(fp)
  80120c:	10c6983a 	sll	r3,r2,r3
  801210:	e0bffe17 	ldw	r2,-8(fp)
  801214:	10800217 	ldw	r2,8(r2)
  801218:	1884703a 	and	r2,r3,r2
  80121c:	208ab03a 	or	r5,r4,r2
  801220:	8009883a 	mov	r4,r16
  801224:	0800dc80 	call	800dc8 <_ZN3PIO8setValueEj>
}
  801228:	e037883a 	mov	sp,fp
  80122c:	dfc00217 	ldw	ra,8(sp)
  801230:	df000117 	ldw	fp,4(sp)
  801234:	dc000017 	ldw	r16,0(sp)
  801238:	dec00304 	addi	sp,sp,12
  80123c:	f800283a 	ret

00801240 <_ZN7PIO_Bus11allPinTogleEv>:

void PIO_Bus::allPinOff() {
	setValue(0x00);
}

void PIO_Bus::allPinTogle() {
  801240:	defffd04 	addi	sp,sp,-12
  801244:	dfc00215 	stw	ra,8(sp)
  801248:	df000115 	stw	fp,4(sp)
  80124c:	df000104 	addi	fp,sp,4
  801250:	e13fff15 	stw	r4,-4(fp)
	setValue(~getValue());
  801254:	e13fff17 	ldw	r4,-4(fp)
  801258:	08011640 	call	801164 <_ZN7PIO_Bus8getValueEv>
  80125c:	008a303a 	nor	r5,zero,r2
  801260:	e13fff17 	ldw	r4,-4(fp)
  801264:	08011b80 	call	8011b8 <_ZN7PIO_Bus8setValueEj>
}
  801268:	e037883a 	mov	sp,fp
  80126c:	dfc00117 	ldw	ra,4(sp)
  801270:	df000017 	ldw	fp,0(sp)
  801274:	dec00204 	addi	sp,sp,8
  801278:	f800283a 	ret

0080127c <_ZN7PIO_Bus9allPinOffEv>:

void PIO_Bus::allPinOn() {
	setValue(0xffffffff);
}

void PIO_Bus::allPinOff() {
  80127c:	defffd04 	addi	sp,sp,-12
  801280:	dfc00215 	stw	ra,8(sp)
  801284:	df000115 	stw	fp,4(sp)
  801288:	df000104 	addi	fp,sp,4
  80128c:	e13fff15 	stw	r4,-4(fp)
	setValue(0x00);
  801290:	e13fff17 	ldw	r4,-4(fp)
  801294:	000b883a 	mov	r5,zero
  801298:	08011b80 	call	8011b8 <_ZN7PIO_Bus8setValueEj>
}
  80129c:	e037883a 	mov	sp,fp
  8012a0:	dfc00117 	ldw	ra,4(sp)
  8012a4:	df000017 	ldw	fp,0(sp)
  8012a8:	dec00204 	addi	sp,sp,8
  8012ac:	f800283a 	ret

008012b0 <_ZN7PIO_Bus8allPinOnEv>:

void PIO_Bus::setValue(unsigned int val) {
	_pio.setValue((_pio.getValue() & (~_mask) ) | (( val << _left_shift) & _mask));
}

void PIO_Bus::allPinOn() {
  8012b0:	defffd04 	addi	sp,sp,-12
  8012b4:	dfc00215 	stw	ra,8(sp)
  8012b8:	df000115 	stw	fp,4(sp)
  8012bc:	df000104 	addi	fp,sp,4
  8012c0:	e13fff15 	stw	r4,-4(fp)
	setValue(0xffffffff);
  8012c4:	e13fff17 	ldw	r4,-4(fp)
  8012c8:	017fffc4 	movi	r5,-1
  8012cc:	08011b80 	call	8011b8 <_ZN7PIO_Bus8setValueEj>
}
  8012d0:	e037883a 	mov	sp,fp
  8012d4:	dfc00117 	ldw	ra,4(sp)
  8012d8:	df000017 	ldw	fp,0(sp)
  8012dc:	dec00204 	addi	sp,sp,8
  8012e0:	f800283a 	ret

008012e4 <_ZN7PIO_BusD0Ev>:
    _pio(pio), _left_shift(left_shift), _id(id)
, _mask(((1 << width)-1) << left_shift)
    {
}

PIO_Bus::~PIO_Bus() {
  8012e4:	defffd04 	addi	sp,sp,-12
  8012e8:	dfc00215 	stw	ra,8(sp)
  8012ec:	df000115 	stw	fp,4(sp)
  8012f0:	df000104 	addi	fp,sp,4
  8012f4:	e13fff15 	stw	r4,-4(fp)
  8012f8:	00c02074 	movhi	r3,129
  8012fc:	18c85504 	addi	r3,r3,8532
  801300:	e0bfff17 	ldw	r2,-4(fp)
  801304:	10c00015 	stw	r3,0(r2)
}
  801308:	00800044 	movi	r2,1
  80130c:	10803fcc 	andi	r2,r2,255
  801310:	1005003a 	cmpeq	r2,r2,zero
  801314:	1000021e 	bne	r2,zero,801320 <_ZN7PIO_BusD0Ev+0x3c>
  801318:	e13fff17 	ldw	r4,-4(fp)
  80131c:	0802da00 	call	802da0 <_ZdlPv>
  801320:	e037883a 	mov	sp,fp
  801324:	dfc00117 	ldw	ra,4(sp)
  801328:	df000017 	ldw	fp,0(sp)
  80132c:	dec00204 	addi	sp,sp,8
  801330:	f800283a 	ret

00801334 <_ZN7PIO_BusD1Ev>:
    _pio(pio), _left_shift(left_shift), _id(id)
, _mask(((1 << width)-1) << left_shift)
    {
}

PIO_Bus::~PIO_Bus() {
  801334:	defffd04 	addi	sp,sp,-12
  801338:	dfc00215 	stw	ra,8(sp)
  80133c:	df000115 	stw	fp,4(sp)
  801340:	df000104 	addi	fp,sp,4
  801344:	e13fff15 	stw	r4,-4(fp)
  801348:	00c02074 	movhi	r3,129
  80134c:	18c85504 	addi	r3,r3,8532
  801350:	e0bfff17 	ldw	r2,-4(fp)
  801354:	10c00015 	stw	r3,0(r2)
}
  801358:	0005883a 	mov	r2,zero
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	1005003a 	cmpeq	r2,r2,zero
  801364:	1000021e 	bne	r2,zero,801370 <_ZN7PIO_BusD1Ev+0x3c>
  801368:	e13fff17 	ldw	r4,-4(fp)
  80136c:	0802da00 	call	802da0 <_ZdlPv>
  801370:	e037883a 	mov	sp,fp
  801374:	dfc00117 	ldw	ra,4(sp)
  801378:	df000017 	ldw	fp,0(sp)
  80137c:	dec00204 	addi	sp,sp,8
  801380:	f800283a 	ret

00801384 <_ZN7PIO_BusD2Ev>:
    _pio(pio), _left_shift(left_shift), _id(id)
, _mask(((1 << width)-1) << left_shift)
    {
}

PIO_Bus::~PIO_Bus() {
  801384:	defffd04 	addi	sp,sp,-12
  801388:	dfc00215 	stw	ra,8(sp)
  80138c:	df000115 	stw	fp,4(sp)
  801390:	df000104 	addi	fp,sp,4
  801394:	e13fff15 	stw	r4,-4(fp)
  801398:	00c02074 	movhi	r3,129
  80139c:	18c85504 	addi	r3,r3,8532
  8013a0:	e0bfff17 	ldw	r2,-4(fp)
  8013a4:	10c00015 	stw	r3,0(r2)
}
  8013a8:	0005883a 	mov	r2,zero
  8013ac:	10803fcc 	andi	r2,r2,255
  8013b0:	1005003a 	cmpeq	r2,r2,zero
  8013b4:	1000021e 	bne	r2,zero,8013c0 <_ZN7PIO_BusD2Ev+0x3c>
  8013b8:	e13fff17 	ldw	r4,-4(fp)
  8013bc:	0802da00 	call	802da0 <_ZdlPv>
  8013c0:	e037883a 	mov	sp,fp
  8013c4:	dfc00117 	ldw	ra,4(sp)
  8013c8:	df000017 	ldw	fp,0(sp)
  8013cc:	dec00204 	addi	sp,sp,8
  8013d0:	f800283a 	ret

008013d4 <_ZN7PIO_PinC2ER3PIOhj>:
 *      Author: innovlab
 */

#include "PIO_Pin.h"

PIO_Pin::PIO_Pin(PIO& pio, unsigned char id, unsigned int mask) :
  8013d4:	defffb04 	addi	sp,sp,-20
  8013d8:	df000415 	stw	fp,16(sp)
  8013dc:	df000404 	addi	fp,sp,16
  8013e0:	e13ffc15 	stw	r4,-16(fp)
  8013e4:	e17ffd15 	stw	r5,-12(fp)
  8013e8:	e1ffff15 	stw	r7,-4(fp)
  8013ec:	e1bffe05 	stb	r6,-8(fp)
		_pio(pio), _id(id), _mask(mask) {
  8013f0:	00c02074 	movhi	r3,129
  8013f4:	18c85c04 	addi	r3,r3,8560
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10c00015 	stw	r3,0(r2)
  801400:	e0fffc17 	ldw	r3,-16(fp)
  801404:	e0bffd17 	ldw	r2,-12(fp)
  801408:	18800115 	stw	r2,4(r3)
  80140c:	e0fffc17 	ldw	r3,-16(fp)
  801410:	e0bffe03 	ldbu	r2,-8(fp)
  801414:	18800205 	stb	r2,8(r3)
  801418:	e0fffc17 	ldw	r3,-16(fp)
  80141c:	e0bfff17 	ldw	r2,-4(fp)
  801420:	18800315 	stw	r2,12(r3)
}
  801424:	e037883a 	mov	sp,fp
  801428:	df000017 	ldw	fp,0(sp)
  80142c:	dec00104 	addi	sp,sp,4
  801430:	f800283a 	ret

00801434 <_ZN7PIO_PinC1ER3PIOhj>:
 *      Author: innovlab
 */

#include "PIO_Pin.h"

PIO_Pin::PIO_Pin(PIO& pio, unsigned char id, unsigned int mask) :
  801434:	defffb04 	addi	sp,sp,-20
  801438:	df000415 	stw	fp,16(sp)
  80143c:	df000404 	addi	fp,sp,16
  801440:	e13ffc15 	stw	r4,-16(fp)
  801444:	e17ffd15 	stw	r5,-12(fp)
  801448:	e1ffff15 	stw	r7,-4(fp)
  80144c:	e1bffe05 	stb	r6,-8(fp)
		_pio(pio), _id(id), _mask(mask) {
  801450:	00c02074 	movhi	r3,129
  801454:	18c85c04 	addi	r3,r3,8560
  801458:	e0bffc17 	ldw	r2,-16(fp)
  80145c:	10c00015 	stw	r3,0(r2)
  801460:	e0fffc17 	ldw	r3,-16(fp)
  801464:	e0bffd17 	ldw	r2,-12(fp)
  801468:	18800115 	stw	r2,4(r3)
  80146c:	e0fffc17 	ldw	r3,-16(fp)
  801470:	e0bffe03 	ldbu	r2,-8(fp)
  801474:	18800205 	stb	r2,8(r3)
  801478:	e0fffc17 	ldw	r3,-16(fp)
  80147c:	e0bfff17 	ldw	r2,-4(fp)
  801480:	18800315 	stw	r2,12(r3)
}
  801484:	e037883a 	mov	sp,fp
  801488:	df000017 	ldw	fp,0(sp)
  80148c:	dec00104 	addi	sp,sp,4
  801490:	f800283a 	ret

00801494 <_ZN7PIO_PinD0Ev>:
	return ((_pio.getValue() & _mask) != 0);
}



PIO_Pin::~PIO_Pin() {
  801494:	defffd04 	addi	sp,sp,-12
  801498:	dfc00215 	stw	ra,8(sp)
  80149c:	df000115 	stw	fp,4(sp)
  8014a0:	df000104 	addi	fp,sp,4
  8014a4:	e13fff15 	stw	r4,-4(fp)
  8014a8:	00c02074 	movhi	r3,129
  8014ac:	18c85c04 	addi	r3,r3,8560
  8014b0:	e0bfff17 	ldw	r2,-4(fp)
  8014b4:	10c00015 	stw	r3,0(r2)
}
  8014b8:	00800044 	movi	r2,1
  8014bc:	10803fcc 	andi	r2,r2,255
  8014c0:	1005003a 	cmpeq	r2,r2,zero
  8014c4:	1000021e 	bne	r2,zero,8014d0 <_ZN7PIO_PinD0Ev+0x3c>
  8014c8:	e13fff17 	ldw	r4,-4(fp)
  8014cc:	0802da00 	call	802da0 <_ZdlPv>
  8014d0:	e037883a 	mov	sp,fp
  8014d4:	dfc00117 	ldw	ra,4(sp)
  8014d8:	df000017 	ldw	fp,0(sp)
  8014dc:	dec00204 	addi	sp,sp,8
  8014e0:	f800283a 	ret

008014e4 <_ZN7PIO_PinD1Ev>:
	return ((_pio.getValue() & _mask) != 0);
}



PIO_Pin::~PIO_Pin() {
  8014e4:	defffd04 	addi	sp,sp,-12
  8014e8:	dfc00215 	stw	ra,8(sp)
  8014ec:	df000115 	stw	fp,4(sp)
  8014f0:	df000104 	addi	fp,sp,4
  8014f4:	e13fff15 	stw	r4,-4(fp)
  8014f8:	00c02074 	movhi	r3,129
  8014fc:	18c85c04 	addi	r3,r3,8560
  801500:	e0bfff17 	ldw	r2,-4(fp)
  801504:	10c00015 	stw	r3,0(r2)
}
  801508:	0005883a 	mov	r2,zero
  80150c:	10803fcc 	andi	r2,r2,255
  801510:	1005003a 	cmpeq	r2,r2,zero
  801514:	1000021e 	bne	r2,zero,801520 <_ZN7PIO_PinD1Ev+0x3c>
  801518:	e13fff17 	ldw	r4,-4(fp)
  80151c:	0802da00 	call	802da0 <_ZdlPv>
  801520:	e037883a 	mov	sp,fp
  801524:	dfc00117 	ldw	ra,4(sp)
  801528:	df000017 	ldw	fp,0(sp)
  80152c:	dec00204 	addi	sp,sp,8
  801530:	f800283a 	ret

00801534 <_ZN7PIO_PinD2Ev>:
	return ((_pio.getValue() & _mask) != 0);
}



PIO_Pin::~PIO_Pin() {
  801534:	defffd04 	addi	sp,sp,-12
  801538:	dfc00215 	stw	ra,8(sp)
  80153c:	df000115 	stw	fp,4(sp)
  801540:	df000104 	addi	fp,sp,4
  801544:	e13fff15 	stw	r4,-4(fp)
  801548:	00c02074 	movhi	r3,129
  80154c:	18c85c04 	addi	r3,r3,8560
  801550:	e0bfff17 	ldw	r2,-4(fp)
  801554:	10c00015 	stw	r3,0(r2)
}
  801558:	0005883a 	mov	r2,zero
  80155c:	10803fcc 	andi	r2,r2,255
  801560:	1005003a 	cmpeq	r2,r2,zero
  801564:	1000021e 	bne	r2,zero,801570 <_ZN7PIO_PinD2Ev+0x3c>
  801568:	e13fff17 	ldw	r4,-4(fp)
  80156c:	0802da00 	call	802da0 <_ZdlPv>
  801570:	e037883a 	mov	sp,fp
  801574:	dfc00117 	ldw	ra,4(sp)
  801578:	df000017 	ldw	fp,0(sp)
  80157c:	dec00204 	addi	sp,sp,8
  801580:	f800283a 	ret

00801584 <_ZN7PIO_Pin8getValueEv>:

void PIO_Pin::toggle(void) {
	_pio.setValue(_pio.getValue() ^ _mask);
}

unsigned char PIO_Pin::getValue(void) {
  801584:	defffd04 	addi	sp,sp,-12
  801588:	dfc00215 	stw	ra,8(sp)
  80158c:	df000115 	stw	fp,4(sp)
  801590:	df000104 	addi	fp,sp,4
  801594:	e13fff15 	stw	r4,-4(fp)
	return ((_pio.getValue() & _mask) != 0);
  801598:	e0bfff17 	ldw	r2,-4(fp)
  80159c:	11000117 	ldw	r4,4(r2)
  8015a0:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  8015a4:	1007883a 	mov	r3,r2
  8015a8:	e0bfff17 	ldw	r2,-4(fp)
  8015ac:	10800317 	ldw	r2,12(r2)
  8015b0:	1884703a 	and	r2,r3,r2
  8015b4:	1004c03a 	cmpne	r2,r2,zero
}
  8015b8:	e037883a 	mov	sp,fp
  8015bc:	dfc00117 	ldw	ra,4(sp)
  8015c0:	df000017 	ldw	fp,0(sp)
  8015c4:	dec00204 	addi	sp,sp,8
  8015c8:	f800283a 	ret

008015cc <_ZN7PIO_Pin6toggleEv>:

void PIO_Pin::off(void) {
	_pio.setValue(_pio.getValue() & (~_mask));
}

void PIO_Pin::toggle(void) {
  8015cc:	defffc04 	addi	sp,sp,-16
  8015d0:	dfc00315 	stw	ra,12(sp)
  8015d4:	df000215 	stw	fp,8(sp)
  8015d8:	dc000115 	stw	r16,4(sp)
  8015dc:	df000104 	addi	fp,sp,4
  8015e0:	e13fff15 	stw	r4,-4(fp)
	_pio.setValue(_pio.getValue() ^ _mask);
  8015e4:	e0bfff17 	ldw	r2,-4(fp)
  8015e8:	14000117 	ldw	r16,4(r2)
  8015ec:	e0bfff17 	ldw	r2,-4(fp)
  8015f0:	11000117 	ldw	r4,4(r2)
  8015f4:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  8015f8:	1007883a 	mov	r3,r2
  8015fc:	e0bfff17 	ldw	r2,-4(fp)
  801600:	10800317 	ldw	r2,12(r2)
  801604:	188af03a 	xor	r5,r3,r2
  801608:	8009883a 	mov	r4,r16
  80160c:	0800dc80 	call	800dc8 <_ZN3PIO8setValueEj>
}
  801610:	e037883a 	mov	sp,fp
  801614:	dfc00217 	ldw	ra,8(sp)
  801618:	df000117 	ldw	fp,4(sp)
  80161c:	dc000017 	ldw	r16,0(sp)
  801620:	dec00304 	addi	sp,sp,12
  801624:	f800283a 	ret

00801628 <_ZN7PIO_Pin3offEv>:

void PIO_Pin::on(void) {
	_pio.setValue(_pio.getValue() | _mask);
}

void PIO_Pin::off(void) {
  801628:	defffc04 	addi	sp,sp,-16
  80162c:	dfc00315 	stw	ra,12(sp)
  801630:	df000215 	stw	fp,8(sp)
  801634:	dc000115 	stw	r16,4(sp)
  801638:	df000104 	addi	fp,sp,4
  80163c:	e13fff15 	stw	r4,-4(fp)
	_pio.setValue(_pio.getValue() & (~_mask));
  801640:	e0bfff17 	ldw	r2,-4(fp)
  801644:	14000117 	ldw	r16,4(r2)
  801648:	e0bfff17 	ldw	r2,-4(fp)
  80164c:	11000117 	ldw	r4,4(r2)
  801650:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  801654:	1007883a 	mov	r3,r2
  801658:	e0bfff17 	ldw	r2,-4(fp)
  80165c:	10800317 	ldw	r2,12(r2)
  801660:	0084303a 	nor	r2,zero,r2
  801664:	188a703a 	and	r5,r3,r2
  801668:	8009883a 	mov	r4,r16
  80166c:	0800dc80 	call	800dc8 <_ZN3PIO8setValueEj>
}
  801670:	e037883a 	mov	sp,fp
  801674:	dfc00217 	ldw	ra,8(sp)
  801678:	df000117 	ldw	fp,4(sp)
  80167c:	dc000017 	ldw	r16,0(sp)
  801680:	dec00304 	addi	sp,sp,12
  801684:	f800283a 	ret

00801688 <_ZN7PIO_Pin2onEv>:

PIO_Pin::PIO_Pin(PIO& pio, unsigned char id, unsigned int mask) :
		_pio(pio), _id(id), _mask(mask) {
}

void PIO_Pin::on(void) {
  801688:	defffc04 	addi	sp,sp,-16
  80168c:	dfc00315 	stw	ra,12(sp)
  801690:	df000215 	stw	fp,8(sp)
  801694:	dc000115 	stw	r16,4(sp)
  801698:	df000104 	addi	fp,sp,4
  80169c:	e13fff15 	stw	r4,-4(fp)
	_pio.setValue(_pio.getValue() | _mask);
  8016a0:	e0bfff17 	ldw	r2,-4(fp)
  8016a4:	14000117 	ldw	r16,4(r2)
  8016a8:	e0bfff17 	ldw	r2,-4(fp)
  8016ac:	11000117 	ldw	r4,4(r2)
  8016b0:	0800d9c0 	call	800d9c <_ZN3PIO8getValueEv>
  8016b4:	1007883a 	mov	r3,r2
  8016b8:	e0bfff17 	ldw	r2,-4(fp)
  8016bc:	10800317 	ldw	r2,12(r2)
  8016c0:	188ab03a 	or	r5,r3,r2
  8016c4:	8009883a 	mov	r4,r16
  8016c8:	0800dc80 	call	800dc8 <_ZN3PIO8setValueEj>
}
  8016cc:	e037883a 	mov	sp,fp
  8016d0:	dfc00217 	ldw	ra,8(sp)
  8016d4:	df000117 	ldw	fp,4(sp)
  8016d8:	dc000017 	ldw	r16,0(sp)
  8016dc:	dec00304 	addi	sp,sp,12
  8016e0:	f800283a 	ret

008016e4 <_ZN3SPIC2Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  8016e4:	defffd04 	addi	sp,sp,-12
  8016e8:	df000215 	stw	fp,8(sp)
  8016ec:	df000204 	addi	fp,sp,8
  8016f0:	e13ffe15 	stw	r4,-8(fp)
  8016f4:	e17fff15 	stw	r5,-4(fp)
  8016f8:	00c02074 	movhi	r3,129
  8016fc:	18c86304 	addi	r3,r3,8588
  801700:	e0bffe17 	ldw	r2,-8(fp)
  801704:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  801708:	e0fffe17 	ldw	r3,-8(fp)
  80170c:	e0bfff17 	ldw	r2,-4(fp)
  801710:	18800115 	stw	r2,4(r3)
}
  801714:	e037883a 	mov	sp,fp
  801718:	df000017 	ldw	fp,0(sp)
  80171c:	dec00104 	addi	sp,sp,4
  801720:	f800283a 	ret

00801724 <_ZN3SPIC1Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  801724:	defffd04 	addi	sp,sp,-12
  801728:	df000215 	stw	fp,8(sp)
  80172c:	df000204 	addi	fp,sp,8
  801730:	e13ffe15 	stw	r4,-8(fp)
  801734:	e17fff15 	stw	r5,-4(fp)
  801738:	00c02074 	movhi	r3,129
  80173c:	18c86304 	addi	r3,r3,8588
  801740:	e0bffe17 	ldw	r2,-8(fp)
  801744:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  801748:	e0fffe17 	ldw	r3,-8(fp)
  80174c:	e0bfff17 	ldw	r2,-4(fp)
  801750:	18800115 	stw	r2,4(r3)
}
  801754:	e037883a 	mov	sp,fp
  801758:	df000017 	ldw	fp,0(sp)
  80175c:	dec00104 	addi	sp,sp,4
  801760:	f800283a 	ret

00801764 <_ZN3SPI15readCMVRegisterEh>:

SPI::~SPI(){}


unsigned char SPI::readCMVRegister(unsigned char address) {
  801764:	defff804 	addi	sp,sp,-32
  801768:	dfc00715 	stw	ra,28(sp)
  80176c:	df000615 	stw	fp,24(sp)
  801770:	df000604 	addi	fp,sp,24
  801774:	e13ffe15 	stw	r4,-8(fp)
  801778:	e17fff05 	stb	r5,-4(fp)

  unsigned char write_data[1];
  unsigned char read_data[1];

  write_data[0]= address & 0x7F;
  80177c:	e0bfff03 	ldbu	r2,-4(fp)
  801780:	10801fcc 	andi	r2,r2,127
  801784:	e0bffd05 	stb	r2,-12(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 1, write_data, 1, read_data, 0x00);
  801788:	e0bffe17 	ldw	r2,-8(fp)
  80178c:	11000117 	ldw	r4,4(r2)
  801790:	00800044 	movi	r2,1
  801794:	d8800015 	stw	r2,0(sp)
  801798:	e0bffd44 	addi	r2,fp,-11
  80179c:	d8800115 	stw	r2,4(sp)
  8017a0:	d8000215 	stw	zero,8(sp)
  8017a4:	000b883a 	mov	r5,zero
  8017a8:	01800044 	movi	r6,1
  8017ac:	e1fffd04 	addi	r7,fp,-12
  8017b0:	080ff6c0 	call	80ff6c <alt_avalon_spi_command>

	return read_data[0];
  8017b4:	e0bffd43 	ldbu	r2,-11(fp)
  8017b8:	10803fcc 	andi	r2,r2,255
}
  8017bc:	e037883a 	mov	sp,fp
  8017c0:	dfc00117 	ldw	ra,4(sp)
  8017c4:	df000017 	ldw	fp,0(sp)
  8017c8:	dec00204 	addi	sp,sp,8
  8017cc:	f800283a 	ret

008017d0 <_ZN3SPI16writeCMVRegisterEhh>:

bool SPI::writeCMVRegister(unsigned char address, unsigned char value)
  8017d0:	defff704 	addi	sp,sp,-36
  8017d4:	dfc00815 	stw	ra,32(sp)
  8017d8:	df000715 	stw	fp,28(sp)
  8017dc:	df000704 	addi	fp,sp,28
  8017e0:	e13ffd15 	stw	r4,-12(fp)
  8017e4:	e17ffe05 	stb	r5,-8(fp)
  8017e8:	e1bfff05 	stb	r6,-4(fp)
{
  unsigned char write_data[2];
  write_data[0]= address | 0x80;
  8017ec:	e0fffe03 	ldbu	r3,-8(fp)
  8017f0:	00bfe004 	movi	r2,-128
  8017f4:	1884b03a 	or	r2,r3,r2
  8017f8:	e0bffc05 	stb	r2,-16(fp)
  write_data[1]= value;
  8017fc:	e0bfff03 	ldbu	r2,-4(fp)
  801800:	e0bffc45 	stb	r2,-15(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 2, write_data, 0, 0x00, 0x00);
  801804:	e0bffd17 	ldw	r2,-12(fp)
  801808:	11000117 	ldw	r4,4(r2)
  80180c:	d8000015 	stw	zero,0(sp)
  801810:	d8000115 	stw	zero,4(sp)
  801814:	d8000215 	stw	zero,8(sp)
  801818:	000b883a 	mov	r5,zero
  80181c:	01800084 	movi	r6,2
  801820:	e1fffc04 	addi	r7,fp,-16
  801824:	080ff6c0 	call	80ff6c <alt_avalon_spi_command>

	return (value == this->readCMVRegister(address));
  801828:	e17ffe03 	ldbu	r5,-8(fp)
  80182c:	e13ffd17 	ldw	r4,-12(fp)
  801830:	08017640 	call	801764 <_ZN3SPI15readCMVRegisterEh>
  801834:	10c03fcc 	andi	r3,r2,255
  801838:	e0bfff03 	ldbu	r2,-4(fp)
  80183c:	1885003a 	cmpeq	r2,r3,r2
}
  801840:	e037883a 	mov	sp,fp
  801844:	dfc00117 	ldw	ra,4(sp)
  801848:	df000017 	ldw	fp,0(sp)
  80184c:	dec00204 	addi	sp,sp,8
  801850:	f800283a 	ret

00801854 <_ZN3SPID0Ev>:

SPI::SPI(unsigned long base_address){
	_base_address= base_address;
}

SPI::~SPI(){}
  801854:	defffd04 	addi	sp,sp,-12
  801858:	dfc00215 	stw	ra,8(sp)
  80185c:	df000115 	stw	fp,4(sp)
  801860:	df000104 	addi	fp,sp,4
  801864:	e13fff15 	stw	r4,-4(fp)
  801868:	00c02074 	movhi	r3,129
  80186c:	18c86304 	addi	r3,r3,8588
  801870:	e0bfff17 	ldw	r2,-4(fp)
  801874:	10c00015 	stw	r3,0(r2)
  801878:	00800044 	movi	r2,1
  80187c:	10803fcc 	andi	r2,r2,255
  801880:	1005003a 	cmpeq	r2,r2,zero
  801884:	1000021e 	bne	r2,zero,801890 <_ZN3SPID0Ev+0x3c>
  801888:	e13fff17 	ldw	r4,-4(fp)
  80188c:	0802da00 	call	802da0 <_ZdlPv>
  801890:	e037883a 	mov	sp,fp
  801894:	dfc00117 	ldw	ra,4(sp)
  801898:	df000017 	ldw	fp,0(sp)
  80189c:	dec00204 	addi	sp,sp,8
  8018a0:	f800283a 	ret

008018a4 <_ZN3SPID1Ev>:
  8018a4:	defffd04 	addi	sp,sp,-12
  8018a8:	dfc00215 	stw	ra,8(sp)
  8018ac:	df000115 	stw	fp,4(sp)
  8018b0:	df000104 	addi	fp,sp,4
  8018b4:	e13fff15 	stw	r4,-4(fp)
  8018b8:	00c02074 	movhi	r3,129
  8018bc:	18c86304 	addi	r3,r3,8588
  8018c0:	e0bfff17 	ldw	r2,-4(fp)
  8018c4:	10c00015 	stw	r3,0(r2)
  8018c8:	0005883a 	mov	r2,zero
  8018cc:	10803fcc 	andi	r2,r2,255
  8018d0:	1005003a 	cmpeq	r2,r2,zero
  8018d4:	1000021e 	bne	r2,zero,8018e0 <_ZN3SPID1Ev+0x3c>
  8018d8:	e13fff17 	ldw	r4,-4(fp)
  8018dc:	0802da00 	call	802da0 <_ZdlPv>
  8018e0:	e037883a 	mov	sp,fp
  8018e4:	dfc00117 	ldw	ra,4(sp)
  8018e8:	df000017 	ldw	fp,0(sp)
  8018ec:	dec00204 	addi	sp,sp,8
  8018f0:	f800283a 	ret

008018f4 <_ZN3SPID2Ev>:
  8018f4:	defffd04 	addi	sp,sp,-12
  8018f8:	dfc00215 	stw	ra,8(sp)
  8018fc:	df000115 	stw	fp,4(sp)
  801900:	df000104 	addi	fp,sp,4
  801904:	e13fff15 	stw	r4,-4(fp)
  801908:	00c02074 	movhi	r3,129
  80190c:	18c86304 	addi	r3,r3,8588
  801910:	e0bfff17 	ldw	r2,-4(fp)
  801914:	10c00015 	stw	r3,0(r2)
  801918:	0005883a 	mov	r2,zero
  80191c:	10803fcc 	andi	r2,r2,255
  801920:	1005003a 	cmpeq	r2,r2,zero
  801924:	1000021e 	bne	r2,zero,801930 <_ZN3SPID2Ev+0x3c>
  801928:	e13fff17 	ldw	r4,-4(fp)
  80192c:	0802da00 	call	802da0 <_ZdlPv>
  801930:	e037883a 	mov	sp,fp
  801934:	dfc00117 	ldw	ra,4(sp)
  801938:	df000017 	ldw	fp,0(sp)
  80193c:	dec00204 	addi	sp,sp,8
  801940:	f800283a 	ret

00801944 <_ZN4UART17outBuffer_isEmptyEv>:

bool UART::inBuffer_isEmpty(void) {
	return _in_buffer->isEmpty();
}

bool UART::outBuffer_isEmpty(void) {
  801944:	defffd04 	addi	sp,sp,-12
  801948:	dfc00215 	stw	ra,8(sp)
  80194c:	df000115 	stw	fp,4(sp)
  801950:	df000104 	addi	fp,sp,4
  801954:	e13fff15 	stw	r4,-4(fp)
	return _out_buffer->isEmpty();
  801958:	e0bfff17 	ldw	r2,-4(fp)
  80195c:	11000217 	ldw	r4,8(r2)
  801960:	08024480 	call	802448 <_ZN4FIFOIcE7isEmptyEv>
  801964:	10803fcc 	andi	r2,r2,255
}
  801968:	e037883a 	mov	sp,fp
  80196c:	dfc00117 	ldw	ra,4(sp)
  801970:	df000017 	ldw	fp,0(sp)
  801974:	dec00204 	addi	sp,sp,8
  801978:	f800283a 	ret

0080197c <_ZN4UART16inBuffer_isEmptyEv>:
	delete _in_buffer;
	delete _out_buffer;
	free(irq_context);
}

bool UART::inBuffer_isEmpty(void) {
  80197c:	defffd04 	addi	sp,sp,-12
  801980:	dfc00215 	stw	ra,8(sp)
  801984:	df000115 	stw	fp,4(sp)
  801988:	df000104 	addi	fp,sp,4
  80198c:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->isEmpty();
  801990:	e0bfff17 	ldw	r2,-4(fp)
  801994:	11000117 	ldw	r4,4(r2)
  801998:	08024480 	call	802448 <_ZN4FIFOIcE7isEmptyEv>
  80199c:	10803fcc 	andi	r2,r2,255
}
  8019a0:	e037883a 	mov	sp,fp
  8019a4:	dfc00117 	ldw	ra,4(sp)
  8019a8:	df000017 	ldw	fp,0(sp)
  8019ac:	dec00204 	addi	sp,sp,8
  8019b0:	f800283a 	ret

008019b4 <_ZN4UART13buffer_putstrEPKc>:

void UART::buffer_putchar(const char character) {
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
  8019b4:	defffa04 	addi	sp,sp,-24
  8019b8:	dfc00515 	stw	ra,20(sp)
  8019bc:	df000415 	stw	fp,16(sp)
  8019c0:	df000404 	addi	fp,sp,16
  8019c4:	e13ffe15 	stw	r4,-8(fp)
  8019c8:	e17fff15 	stw	r5,-4(fp)
	int len = strlen(str);
  8019cc:	e13fff17 	ldw	r4,-4(fp)
  8019d0:	080563c0 	call	80563c <strlen>
  8019d4:	e0bffd15 	stw	r2,-12(fp)
	for (int i = 0; i < len; i++)
  8019d8:	e03ffc15 	stw	zero,-16(fp)
  8019dc:	00000e06 	br	801a18 <_ZN4UART13buffer_putstrEPKc+0x64>
		_out_buffer->push(str[i]);
  8019e0:	e0bffe17 	ldw	r2,-8(fp)
  8019e4:	11000217 	ldw	r4,8(r2)
  8019e8:	e0bffc17 	ldw	r2,-16(fp)
  8019ec:	1007883a 	mov	r3,r2
  8019f0:	e0bfff17 	ldw	r2,-4(fp)
  8019f4:	1885883a 	add	r2,r3,r2
  8019f8:	10800003 	ldbu	r2,0(r2)
  8019fc:	11403fcc 	andi	r5,r2,255
  801a00:	2940201c 	xori	r5,r5,128
  801a04:	297fe004 	addi	r5,r5,-128
  801a08:	08025700 	call	802570 <_ZN4FIFOIcE4pushEc>
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
	int len = strlen(str);
	for (int i = 0; i < len; i++)
  801a0c:	e0bffc17 	ldw	r2,-16(fp)
  801a10:	10800044 	addi	r2,r2,1
  801a14:	e0bffc15 	stw	r2,-16(fp)
  801a18:	e0fffc17 	ldw	r3,-16(fp)
  801a1c:	e0bffd17 	ldw	r2,-12(fp)
  801a20:	18bfef16 	blt	r3,r2,8019e0 <_ZN4UART13buffer_putstrEPKc+0x2c>
		_out_buffer->push(str[i]);
}
  801a24:	e037883a 	mov	sp,fp
  801a28:	dfc00117 	ldw	ra,4(sp)
  801a2c:	df000017 	ldw	fp,0(sp)
  801a30:	dec00204 	addi	sp,sp,8
  801a34:	f800283a 	ret

00801a38 <_ZN4UART14buffer_putcharEc>:

	for (int i = 0; i < len; i++)
		_out_buffer->push(buffer[i]);
}

void UART::buffer_putchar(const char character) {
  801a38:	defffc04 	addi	sp,sp,-16
  801a3c:	dfc00315 	stw	ra,12(sp)
  801a40:	df000215 	stw	fp,8(sp)
  801a44:	df000204 	addi	fp,sp,8
  801a48:	e13ffe15 	stw	r4,-8(fp)
  801a4c:	e17fff05 	stb	r5,-4(fp)
	_out_buffer->push(character);
  801a50:	e0bffe17 	ldw	r2,-8(fp)
  801a54:	11000217 	ldw	r4,8(r2)
  801a58:	e17fff07 	ldb	r5,-4(fp)
  801a5c:	08025700 	call	802570 <_ZN4FIFOIcE4pushEc>
}
  801a60:	e037883a 	mov	sp,fp
  801a64:	dfc00117 	ldw	ra,4(sp)
  801a68:	df000017 	ldw	fp,0(sp)
  801a6c:	dec00204 	addi	sp,sp,8
  801a70:	f800283a 	ret

00801a74 <_ZN4UART14buffer_getcharEv>:

bool UART::outBuffer_isEmpty(void) {
	return _out_buffer->isEmpty();
}

char UART::buffer_getchar(void) {
  801a74:	defffd04 	addi	sp,sp,-12
  801a78:	dfc00215 	stw	ra,8(sp)
  801a7c:	df000115 	stw	fp,4(sp)
  801a80:	df000104 	addi	fp,sp,4
  801a84:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->pull();
  801a88:	e0bfff17 	ldw	r2,-4(fp)
  801a8c:	11000117 	ldw	r4,4(r2)
  801a90:	08026380 	call	802638 <_ZN4FIFOIcE4pullEv>
  801a94:	10803fcc 	andi	r2,r2,255
  801a98:	1080201c 	xori	r2,r2,128
  801a9c:	10bfe004 	addi	r2,r2,-128
}
  801aa0:	e037883a 	mov	sp,fp
  801aa4:	dfc00117 	ldw	ra,4(sp)
  801aa8:	df000017 	ldw	fp,0(sp)
  801aac:	dec00204 	addi	sp,sp,8
  801ab0:	f800283a 	ret

00801ab4 <_ZN4UART13buffer_printfEPKcz>:
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
	}
}

void UART::buffer_printf( const char* format, ... ) {
  801ab4:	deffdd04 	addi	sp,sp,-140
  801ab8:	dfc02015 	stw	ra,128(sp)
  801abc:	df001f15 	stw	fp,124(sp)
  801ac0:	ddc01e15 	stw	r23,120(sp)
  801ac4:	dd801d15 	stw	r22,116(sp)
  801ac8:	dd401c15 	stw	r21,112(sp)
  801acc:	dd001b15 	stw	r20,108(sp)
  801ad0:	dcc01a15 	stw	r19,104(sp)
  801ad4:	dc801915 	stw	r18,100(sp)
  801ad8:	dc401815 	stw	r17,96(sp)
  801adc:	dc001715 	stw	r16,92(sp)
  801ae0:	df001704 	addi	fp,sp,92
  801ae4:	e13fed15 	stw	r4,-76(fp)
  801ae8:	e1800a15 	stw	r6,40(fp)
  801aec:	e1c00b15 	stw	r7,44(fp)
  801af0:	e17fee15 	stw	r5,-72(fp)
  801af4:	00802034 	movhi	r2,128
  801af8:	108d2f04 	addi	r2,r2,13500
  801afc:	e0bff515 	stw	r2,-44(fp)
  801b00:	00802074 	movhi	r2,129
  801b04:	1087e484 	addi	r2,r2,8082
  801b08:	e0bff615 	stw	r2,-40(fp)
  801b0c:	e0bff704 	addi	r2,fp,-36
  801b10:	e0ffe904 	addi	r3,fp,-92
  801b14:	10c00015 	stw	r3,0(r2)
  801b18:	00c02034 	movhi	r3,128
  801b1c:	18c70304 	addi	r3,r3,7180
  801b20:	10c00115 	stw	r3,4(r2)
  801b24:	16c00215 	stw	sp,8(r2)
  801b28:	e13fef04 	addi	r4,fp,-68
  801b2c:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  801b30:	e6ffff15 	stw	sp,-4(fp)
  801b34:	d805883a 	mov	r2,sp
  801b38:	e0bffc15 	stw	r2,-16(fp)

  char buffer[_size_out];
  801b3c:	e0bfed17 	ldw	r2,-76(fp)
  801b40:	10800517 	ldw	r2,20(r2)
  801b44:	10bfffc4 	addi	r2,r2,-1
  801b48:	10800044 	addi	r2,r2,1
  801b4c:	108000c4 	addi	r2,r2,3
  801b50:	108000c4 	addi	r2,r2,3
  801b54:	1004d0ba 	srli	r2,r2,2
  801b58:	1085883a 	add	r2,r2,r2
  801b5c:	1085883a 	add	r2,r2,r2
  801b60:	d8b7c83a 	sub	sp,sp,r2
  801b64:	e6fffd15 	stw	sp,-12(fp)
  801b68:	e0fffd17 	ldw	r3,-12(fp)
  801b6c:	188000c4 	addi	r2,r3,3
  801b70:	1004d0ba 	srli	r2,r2,2
  801b74:	1085883a 	add	r2,r2,r2
  801b78:	1085883a 	add	r2,r2,r2
  801b7c:	e0bffd15 	stw	r2,-12(fp)
  801b80:	e0bffd17 	ldw	r2,-12(fp)
  801b84:	e0bfeb15 	stw	r2,-84(fp)
  int len;

  va_list args;
  va_start (args, format);
  801b88:	e0800a04 	addi	r2,fp,40
  801b8c:	e0bfec15 	stw	r2,-80(fp)
  len= vsnprintf(buffer, _size_out, format, args );
  801b90:	e13feb17 	ldw	r4,-84(fp)
  801b94:	e0bfed17 	ldw	r2,-76(fp)
  801b98:	11400517 	ldw	r5,20(r2)
  801b9c:	e1ffec17 	ldw	r7,-80(fp)
  801ba0:	00800044 	movi	r2,1
  801ba4:	e0bff015 	stw	r2,-64(fp)
  801ba8:	e1bfee17 	ldw	r6,-72(fp)
  801bac:	080768c0 	call	80768c <vsnprintf>
  801bb0:	e0bfea15 	stw	r2,-88(fp)
  va_end (args);

	for (int i = 0; i < len; i++)
  801bb4:	e03fe915 	stw	zero,-92(fp)
  801bb8:	00000f06 	br	801bf8 <_ZN4UART13buffer_printfEPKcz+0x144>
		_out_buffer->push(buffer[i]);
  801bbc:	e0bfed17 	ldw	r2,-76(fp)
  801bc0:	11000217 	ldw	r4,8(r2)
  801bc4:	e0ffe917 	ldw	r3,-92(fp)
  801bc8:	e0bfeb17 	ldw	r2,-84(fp)
  801bcc:	10c5883a 	add	r2,r2,r3
  801bd0:	10800003 	ldbu	r2,0(r2)
  801bd4:	11403fcc 	andi	r5,r2,255
  801bd8:	2940201c 	xori	r5,r5,128
  801bdc:	297fe004 	addi	r5,r5,-128
  801be0:	00800044 	movi	r2,1
  801be4:	e0bff015 	stw	r2,-64(fp)
  801be8:	08025700 	call	802570 <_ZN4FIFOIcE4pushEc>
  va_list args;
  va_start (args, format);
  len= vsnprintf(buffer, _size_out, format, args );
  va_end (args);

	for (int i = 0; i < len; i++)
  801bec:	e0bfe917 	ldw	r2,-92(fp)
  801bf0:	10800044 	addi	r2,r2,1
  801bf4:	e0bfe915 	stw	r2,-92(fp)
  801bf8:	e0ffe917 	ldw	r3,-92(fp)
  801bfc:	e0bfea17 	ldw	r2,-88(fp)
  801c00:	18bfee16 	blt	r3,r2,801bbc <_ZN4UART13buffer_printfEPKcz+0x108>
  801c04:	e6fffc17 	ldw	sp,-16(fp)
		_out_buffer->push(buffer[i]);
}
  801c08:	00000a06 	br	801c34 <_ZN4UART13buffer_printfEPKcz+0x180>
  801c0c:	e7001704 	addi	fp,fp,92
  801c10:	e0fff117 	ldw	r3,-60(fp)
  801c14:	e0fffe15 	stw	r3,-8(fp)
  801c18:	e0bffe17 	ldw	r2,-8(fp)
  801c1c:	e6fffc17 	ldw	sp,-16(fp)
  801c20:	e0bffe15 	stw	r2,-8(fp)
  801c24:	00bfffc4 	movi	r2,-1
  801c28:	e0bff015 	stw	r2,-64(fp)
  801c2c:	e13ffe17 	ldw	r4,-8(fp)
  801c30:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  801c34:	e6ffff17 	ldw	sp,-4(fp)
  801c38:	e13fef04 	addi	r4,fp,-68
  801c3c:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  801c40:	e037883a 	mov	sp,fp
  801c44:	dfc00917 	ldw	ra,36(sp)
  801c48:	df000817 	ldw	fp,32(sp)
  801c4c:	ddc00717 	ldw	r23,28(sp)
  801c50:	dd800617 	ldw	r22,24(sp)
  801c54:	dd400517 	ldw	r21,20(sp)
  801c58:	dd000417 	ldw	r20,16(sp)
  801c5c:	dcc00317 	ldw	r19,12(sp)
  801c60:	dc800217 	ldw	r18,8(sp)
  801c64:	dc400117 	ldw	r17,4(sp)
  801c68:	dc000017 	ldw	r16,0(sp)
  801c6c:	dec00c04 	addi	sp,sp,48
  801c70:	f800283a 	ret

00801c74 <_ZN4UART4sendEv>:
	while (!outBuffer_isEmpty()) {
		send();
	}
}

void UART::send() {
  801c74:	defffb04 	addi	sp,sp,-20
  801c78:	dfc00415 	stw	ra,16(sp)
  801c7c:	df000315 	stw	fp,12(sp)
  801c80:	dc000215 	stw	r16,8(sp)
  801c84:	df000204 	addi	fp,sp,8
  801c88:	e13ffe15 	stw	r4,-8(fp)
	if (!outBuffer_isEmpty()
  801c8c:	e13ffe17 	ldw	r4,-8(fp)
  801c90:	08019440 	call	801944 <_ZN4UART17outBuffer_isEmptyEv>
  801c94:	1080005c 	xori	r2,r2,1
  801c98:	1080005c 	xori	r2,r2,1
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1004c03a 	cmpne	r2,r2,zero
  801ca4:	10000a1e 	bne	r2,zero,801cd0 <_ZN4UART4sendEv+0x5c>
  801ca8:	e0bffe17 	ldw	r2,-8(fp)
  801cac:	10800317 	ldw	r2,12(r2)
  801cb0:	10800204 	addi	r2,r2,8
  801cb4:	10800037 	ldwio	r2,0(r2)
  801cb8:	1080100c 	andi	r2,r2,64
  801cbc:	1005003a 	cmpeq	r2,r2,zero
  801cc0:	1000031e 	bne	r2,zero,801cd0 <_ZN4UART4sendEv+0x5c>
  801cc4:	00800044 	movi	r2,1
  801cc8:	e0bfff05 	stb	r2,-4(fp)
  801ccc:	00000106 	br	801cd4 <_ZN4UART4sendEv+0x60>
  801cd0:	e03fff05 	stb	zero,-4(fp)
  801cd4:	e0bfff03 	ldbu	r2,-4(fp)
  801cd8:	10803fcc 	andi	r2,r2,255
  801cdc:	1005003a 	cmpeq	r2,r2,zero
  801ce0:	10000b1e 	bne	r2,zero,801d10 <_ZN4UART4sendEv+0x9c>
	    && (IORD_ALTERA_AVALON_UART_STATUS( _base_adress )
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
  801ce4:	e0bffe17 	ldw	r2,-8(fp)
  801ce8:	10800317 	ldw	r2,12(r2)
  801cec:	14000104 	addi	r16,r2,4
  801cf0:	e0bffe17 	ldw	r2,-8(fp)
  801cf4:	11000217 	ldw	r4,8(r2)
  801cf8:	08026380 	call	802638 <_ZN4FIFOIcE4pullEv>
  801cfc:	10c03fcc 	andi	r3,r2,255
  801d00:	18c0201c 	xori	r3,r3,128
  801d04:	18ffe004 	addi	r3,r3,-128
  801d08:	8005883a 	mov	r2,r16
  801d0c:	10c00035 	stwio	r3,0(r2)
	}
}
  801d10:	e037883a 	mov	sp,fp
  801d14:	dfc00217 	ldw	ra,8(sp)
  801d18:	df000117 	ldw	fp,4(sp)
  801d1c:	dc000017 	ldw	r16,0(sp)
  801d20:	dec00304 	addi	sp,sp,12
  801d24:	f800283a 	ret

00801d28 <_ZN4UART7sendAllEv>:

char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
  801d28:	defffd04 	addi	sp,sp,-12
  801d2c:	dfc00215 	stw	ra,8(sp)
  801d30:	df000115 	stw	fp,4(sp)
  801d34:	df000104 	addi	fp,sp,4
  801d38:	e13fff15 	stw	r4,-4(fp)
	while (!outBuffer_isEmpty()) {
  801d3c:	00000206 	br	801d48 <_ZN4UART7sendAllEv+0x20>
		send();
  801d40:	e13fff17 	ldw	r4,-4(fp)
  801d44:	0801c740 	call	801c74 <_ZN4UART4sendEv>
char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
	while (!outBuffer_isEmpty()) {
  801d48:	e13fff17 	ldw	r4,-4(fp)
  801d4c:	08019440 	call	801944 <_ZN4UART17outBuffer_isEmptyEv>
  801d50:	1080005c 	xori	r2,r2,1
  801d54:	10803fcc 	andi	r2,r2,255
  801d58:	1004c03a 	cmpne	r2,r2,zero
  801d5c:	103ff81e 	bne	r2,zero,801d40 <_ZN4UART7sendAllEv+0x18>
		send();
	}
}
  801d60:	e037883a 	mov	sp,fp
  801d64:	dfc00117 	ldw	ra,4(sp)
  801d68:	df000017 	ldw	fp,0(sp)
  801d6c:	dec00204 	addi	sp,sp,8
  801d70:	f800283a 	ret

00801d74 <_Z23_UART_receive_interruptPv>:

#include "malloc.h"
#include "string.h"
#include "stdarg.h"

static void _UART_receive_interrupt(void* context) {
  801d74:	defffc04 	addi	sp,sp,-16
  801d78:	dfc00315 	stw	ra,12(sp)
  801d7c:	df000215 	stw	fp,8(sp)
  801d80:	df000204 	addi	fp,sp,8
  801d84:	e13fff15 	stw	r4,-4(fp)
	UART_interrupt_context* interrupt_context = (UART_interrupt_context*) context;
  801d88:	e0bfff17 	ldw	r2,-4(fp)
  801d8c:	e0bffe15 	stw	r2,-8(fp)
	interrupt_context->_in_buffer->push(
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
  801d90:	e0bffe17 	ldw	r2,-8(fp)
  801d94:	11000017 	ldw	r4,0(r2)
  801d98:	e0bffe17 	ldw	r2,-8(fp)
  801d9c:	10800117 	ldw	r2,4(r2)
  801da0:	10800037 	ldwio	r2,0(r2)
  801da4:	11403fcc 	andi	r5,r2,255
  801da8:	2940201c 	xori	r5,r5,128
  801dac:	297fe004 	addi	r5,r5,-128
  801db0:	08025700 	call	802570 <_ZN4FIFOIcE4pushEc>
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
  801db4:	e0bffe17 	ldw	r2,-8(fp)
  801db8:	10800117 	ldw	r2,4(r2)
  801dbc:	10000035 	stwio	zero,0(r2)
}
  801dc0:	e037883a 	mov	sp,fp
  801dc4:	dfc00117 	ldw	ra,4(sp)
  801dc8:	df000017 	ldw	fp,0(sp)
  801dcc:	dec00204 	addi	sp,sp,8
  801dd0:	f800283a 	ret

00801dd4 <_ZN4UARTD0Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  801dd4:	defffd04 	addi	sp,sp,-12
  801dd8:	dfc00215 	stw	ra,8(sp)
  801ddc:	df000115 	stw	fp,4(sp)
  801de0:	df000104 	addi	fp,sp,4
  801de4:	e13fff15 	stw	r4,-4(fp)
  801de8:	00c02074 	movhi	r3,129
  801dec:	18c87604 	addi	r3,r3,8664
  801df0:	e0bfff17 	ldw	r2,-4(fp)
  801df4:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  801df8:	e0bfff17 	ldw	r2,-4(fp)
  801dfc:	10800117 	ldw	r2,4(r2)
  801e00:	1005003a 	cmpeq	r2,r2,zero
  801e04:	1000081e 	bne	r2,zero,801e28 <_ZN4UARTD0Ev+0x54>
  801e08:	e0bfff17 	ldw	r2,-4(fp)
  801e0c:	10800117 	ldw	r2,4(r2)
  801e10:	10800017 	ldw	r2,0(r2)
  801e14:	10800104 	addi	r2,r2,4
  801e18:	10c00017 	ldw	r3,0(r2)
  801e1c:	e0bfff17 	ldw	r2,-4(fp)
  801e20:	11000117 	ldw	r4,4(r2)
  801e24:	183ee83a 	callr	r3
	delete _out_buffer;
  801e28:	e0bfff17 	ldw	r2,-4(fp)
  801e2c:	10800217 	ldw	r2,8(r2)
  801e30:	1005003a 	cmpeq	r2,r2,zero
  801e34:	1000081e 	bne	r2,zero,801e58 <_ZN4UARTD0Ev+0x84>
  801e38:	e0bfff17 	ldw	r2,-4(fp)
  801e3c:	10800217 	ldw	r2,8(r2)
  801e40:	10800017 	ldw	r2,0(r2)
  801e44:	10800104 	addi	r2,r2,4
  801e48:	10c00017 	ldw	r3,0(r2)
  801e4c:	e0bfff17 	ldw	r2,-4(fp)
  801e50:	11000217 	ldw	r4,8(r2)
  801e54:	183ee83a 	callr	r3
	free(irq_context);
  801e58:	e0bfff17 	ldw	r2,-4(fp)
  801e5c:	11000617 	ldw	r4,24(r2)
  801e60:	0804a040 	call	804a04 <free>
}
  801e64:	00800044 	movi	r2,1
  801e68:	10803fcc 	andi	r2,r2,255
  801e6c:	1005003a 	cmpeq	r2,r2,zero
  801e70:	1000021e 	bne	r2,zero,801e7c <_ZN4UARTD0Ev+0xa8>
  801e74:	e13fff17 	ldw	r4,-4(fp)
  801e78:	0802da00 	call	802da0 <_ZdlPv>
  801e7c:	e037883a 	mov	sp,fp
  801e80:	dfc00117 	ldw	ra,4(sp)
  801e84:	df000017 	ldw	fp,0(sp)
  801e88:	dec00204 	addi	sp,sp,8
  801e8c:	f800283a 	ret

00801e90 <_ZN4UARTD1Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  801e90:	defffd04 	addi	sp,sp,-12
  801e94:	dfc00215 	stw	ra,8(sp)
  801e98:	df000115 	stw	fp,4(sp)
  801e9c:	df000104 	addi	fp,sp,4
  801ea0:	e13fff15 	stw	r4,-4(fp)
  801ea4:	00c02074 	movhi	r3,129
  801ea8:	18c87604 	addi	r3,r3,8664
  801eac:	e0bfff17 	ldw	r2,-4(fp)
  801eb0:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  801eb4:	e0bfff17 	ldw	r2,-4(fp)
  801eb8:	10800117 	ldw	r2,4(r2)
  801ebc:	1005003a 	cmpeq	r2,r2,zero
  801ec0:	1000081e 	bne	r2,zero,801ee4 <_ZN4UARTD1Ev+0x54>
  801ec4:	e0bfff17 	ldw	r2,-4(fp)
  801ec8:	10800117 	ldw	r2,4(r2)
  801ecc:	10800017 	ldw	r2,0(r2)
  801ed0:	10800104 	addi	r2,r2,4
  801ed4:	10c00017 	ldw	r3,0(r2)
  801ed8:	e0bfff17 	ldw	r2,-4(fp)
  801edc:	11000117 	ldw	r4,4(r2)
  801ee0:	183ee83a 	callr	r3
	delete _out_buffer;
  801ee4:	e0bfff17 	ldw	r2,-4(fp)
  801ee8:	10800217 	ldw	r2,8(r2)
  801eec:	1005003a 	cmpeq	r2,r2,zero
  801ef0:	1000081e 	bne	r2,zero,801f14 <_ZN4UARTD1Ev+0x84>
  801ef4:	e0bfff17 	ldw	r2,-4(fp)
  801ef8:	10800217 	ldw	r2,8(r2)
  801efc:	10800017 	ldw	r2,0(r2)
  801f00:	10800104 	addi	r2,r2,4
  801f04:	10c00017 	ldw	r3,0(r2)
  801f08:	e0bfff17 	ldw	r2,-4(fp)
  801f0c:	11000217 	ldw	r4,8(r2)
  801f10:	183ee83a 	callr	r3
	free(irq_context);
  801f14:	e0bfff17 	ldw	r2,-4(fp)
  801f18:	11000617 	ldw	r4,24(r2)
  801f1c:	0804a040 	call	804a04 <free>
}
  801f20:	0005883a 	mov	r2,zero
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1005003a 	cmpeq	r2,r2,zero
  801f2c:	1000021e 	bne	r2,zero,801f38 <_ZN4UARTD1Ev+0xa8>
  801f30:	e13fff17 	ldw	r4,-4(fp)
  801f34:	0802da00 	call	802da0 <_ZdlPv>
  801f38:	e037883a 	mov	sp,fp
  801f3c:	dfc00117 	ldw	ra,4(sp)
  801f40:	df000017 	ldw	fp,0(sp)
  801f44:	dec00204 	addi	sp,sp,8
  801f48:	f800283a 	ret

00801f4c <_ZN4UARTD2Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  801f4c:	defffd04 	addi	sp,sp,-12
  801f50:	dfc00215 	stw	ra,8(sp)
  801f54:	df000115 	stw	fp,4(sp)
  801f58:	df000104 	addi	fp,sp,4
  801f5c:	e13fff15 	stw	r4,-4(fp)
  801f60:	00c02074 	movhi	r3,129
  801f64:	18c87604 	addi	r3,r3,8664
  801f68:	e0bfff17 	ldw	r2,-4(fp)
  801f6c:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  801f70:	e0bfff17 	ldw	r2,-4(fp)
  801f74:	10800117 	ldw	r2,4(r2)
  801f78:	1005003a 	cmpeq	r2,r2,zero
  801f7c:	1000081e 	bne	r2,zero,801fa0 <_ZN4UARTD2Ev+0x54>
  801f80:	e0bfff17 	ldw	r2,-4(fp)
  801f84:	10800117 	ldw	r2,4(r2)
  801f88:	10800017 	ldw	r2,0(r2)
  801f8c:	10800104 	addi	r2,r2,4
  801f90:	10c00017 	ldw	r3,0(r2)
  801f94:	e0bfff17 	ldw	r2,-4(fp)
  801f98:	11000117 	ldw	r4,4(r2)
  801f9c:	183ee83a 	callr	r3
	delete _out_buffer;
  801fa0:	e0bfff17 	ldw	r2,-4(fp)
  801fa4:	10800217 	ldw	r2,8(r2)
  801fa8:	1005003a 	cmpeq	r2,r2,zero
  801fac:	1000081e 	bne	r2,zero,801fd0 <_ZN4UARTD2Ev+0x84>
  801fb0:	e0bfff17 	ldw	r2,-4(fp)
  801fb4:	10800217 	ldw	r2,8(r2)
  801fb8:	10800017 	ldw	r2,0(r2)
  801fbc:	10800104 	addi	r2,r2,4
  801fc0:	10c00017 	ldw	r3,0(r2)
  801fc4:	e0bfff17 	ldw	r2,-4(fp)
  801fc8:	11000217 	ldw	r4,8(r2)
  801fcc:	183ee83a 	callr	r3
	free(irq_context);
  801fd0:	e0bfff17 	ldw	r2,-4(fp)
  801fd4:	11000617 	ldw	r4,24(r2)
  801fd8:	0804a040 	call	804a04 <free>
}
  801fdc:	0005883a 	mov	r2,zero
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1005003a 	cmpeq	r2,r2,zero
  801fe8:	1000021e 	bne	r2,zero,801ff4 <_ZN4UARTD2Ev+0xa8>
  801fec:	e13fff17 	ldw	r4,-4(fp)
  801ff0:	0802da00 	call	802da0 <_ZdlPv>
  801ff4:	e037883a 	mov	sp,fp
  801ff8:	dfc00117 	ldw	ra,4(sp)
  801ffc:	df000017 	ldw	fp,0(sp)
  802000:	dec00204 	addi	sp,sp,8
  802004:	f800283a 	ret

00802008 <_ZN4UARTC1Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  802008:	deffe004 	addi	sp,sp,-128
  80200c:	dfc01f15 	stw	ra,124(sp)
  802010:	df001e15 	stw	fp,120(sp)
  802014:	ddc01d15 	stw	r23,116(sp)
  802018:	dd801c15 	stw	r22,112(sp)
  80201c:	dd401b15 	stw	r21,108(sp)
  802020:	dd001a15 	stw	r20,104(sp)
  802024:	dcc01915 	stw	r19,100(sp)
  802028:	dc801815 	stw	r18,96(sp)
  80202c:	dc401715 	stw	r17,92(sp)
  802030:	dc001615 	stw	r16,88(sp)
  802034:	df001604 	addi	fp,sp,88
  802038:	e13fea15 	stw	r4,-88(fp)
  80203c:	e17feb15 	stw	r5,-84(fp)
  802040:	e1bfec15 	stw	r6,-80(fp)
  802044:	e1ffed15 	stw	r7,-76(fp)
  802048:	00802034 	movhi	r2,128
  80204c:	108d2f04 	addi	r2,r2,13500
  802050:	e0bff415 	stw	r2,-48(fp)
  802054:	00802074 	movhi	r2,129
  802058:	1087e604 	addi	r2,r2,8088
  80205c:	e0bff515 	stw	r2,-44(fp)
  802060:	e0bff604 	addi	r2,fp,-40
  802064:	e0ffea04 	addi	r3,fp,-88
  802068:	10c00015 	stw	r3,0(r2)
  80206c:	00c02034 	movhi	r3,128
  802070:	18c86b04 	addi	r3,r3,8620
  802074:	10c00115 	stw	r3,4(r2)
  802078:	16c00215 	stw	sp,8(r2)
  80207c:	e13fee04 	addi	r4,fp,-72
  802080:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  802084:	00c02074 	movhi	r3,129
  802088:	18c87604 	addi	r3,r3,8664
  80208c:	e0bfea17 	ldw	r2,-88(fp)
  802090:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  802094:	e0ffea17 	ldw	r3,-88(fp)
  802098:	e0bfeb17 	ldw	r2,-84(fp)
  80209c:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  8020a0:	e0ffea17 	ldw	r3,-88(fp)
  8020a4:	e0800a17 	ldw	r2,40(fp)
  8020a8:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  8020ac:	e0ffea17 	ldw	r3,-88(fp)
  8020b0:	e0bfed17 	ldw	r2,-76(fp)
  8020b4:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  8020b8:	00bfffc4 	movi	r2,-1
  8020bc:	e0bfef15 	stw	r2,-68(fp)
  8020c0:	01000504 	movi	r4,20
  8020c4:	0803e3c0 	call	803e3c <_Znwm>
  8020c8:	e0bffe15 	stw	r2,-8(fp)
  8020cc:	00800084 	movi	r2,2
  8020d0:	e0bfef15 	stw	r2,-68(fp)
  8020d4:	e13ffe17 	ldw	r4,-8(fp)
  8020d8:	e17fed17 	ldw	r5,-76(fp)
  8020dc:	08026bc0 	call	8026bc <_ZN4FIFOIcEC1Ej>
  8020e0:	e0bfea17 	ldw	r2,-88(fp)
  8020e4:	e0fffe17 	ldw	r3,-8(fp)
  8020e8:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  8020ec:	00bfffc4 	movi	r2,-1
  8020f0:	e0bfef15 	stw	r2,-68(fp)
  8020f4:	01000504 	movi	r4,20
  8020f8:	0803e3c0 	call	803e3c <_Znwm>
  8020fc:	e0bffd15 	stw	r2,-12(fp)
  802100:	00800044 	movi	r2,1
  802104:	e0bfef15 	stw	r2,-68(fp)
  802108:	e13ffd17 	ldw	r4,-12(fp)
  80210c:	e1400a17 	ldw	r5,40(fp)
  802110:	08026bc0 	call	8026bc <_ZN4FIFOIcEC1Ej>
  802114:	00000a06 	br	802140 <_ZN4UARTC1Emmjj+0x138>
  802118:	e0bfff17 	ldw	r2,-4(fp)
  80211c:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  802120:	e13ffe17 	ldw	r4,-8(fp)
  802124:	0802da00 	call	802da0 <_ZdlPv>
  802128:	e0fffc17 	ldw	r3,-16(fp)
  80212c:	e0ffff15 	stw	r3,-4(fp)
  802130:	00bfffc4 	movi	r2,-1
  802134:	e0bfef15 	stw	r2,-68(fp)
  802138:	e13fff17 	ldw	r4,-4(fp)
  80213c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  802140:	e0bfea17 	ldw	r2,-88(fp)
  802144:	e0fffd17 	ldw	r3,-12(fp)
  802148:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  80214c:	01000204 	movi	r4,8
  802150:	0804a180 	call	804a18 <malloc>
  802154:	1007883a 	mov	r3,r2
  802158:	e0bfea17 	ldw	r2,-88(fp)
  80215c:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  802160:	e0bfea17 	ldw	r2,-88(fp)
  802164:	10c00617 	ldw	r3,24(r2)
  802168:	e0bfea17 	ldw	r2,-88(fp)
  80216c:	10800317 	ldw	r2,12(r2)
  802170:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  802174:	e0bfea17 	ldw	r2,-88(fp)
  802178:	10c00617 	ldw	r3,24(r2)
  80217c:	e0bfea17 	ldw	r2,-88(fp)
  802180:	10800117 	ldw	r2,4(r2)
  802184:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  802188:	e0bfea17 	ldw	r2,-88(fp)
  80218c:	11400617 	ldw	r5,24(r2)
  802190:	00bfffc4 	movi	r2,-1
  802194:	e0bfef15 	stw	r2,-68(fp)
  802198:	e13fec17 	ldw	r4,-80(fp)
  80219c:	01802034 	movhi	r6,128
  8021a0:	31875d04 	addi	r6,r6,7540
  8021a4:	080e83c0 	call	80e83c <alt_irq_register>
}
  8021a8:	00001006 	br	8021ec <_ZN4UARTC1Emmjj+0x1e4>
  8021ac:	e7001604 	addi	fp,fp,88
  8021b0:	e0bfef17 	ldw	r2,-68(fp)
  8021b4:	e0fff017 	ldw	r3,-64(fp)
  8021b8:	e0ffff15 	stw	r3,-4(fp)
  8021bc:	10800060 	cmpeqi	r2,r2,1
  8021c0:	103fd51e 	bne	r2,zero,802118 <_ZN4UARTC1Emmjj+0x110>
  8021c4:	e0bfff17 	ldw	r2,-4(fp)
  8021c8:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  8021cc:	e13ffd17 	ldw	r4,-12(fp)
  8021d0:	0802da00 	call	802da0 <_ZdlPv>
  8021d4:	e0fffb17 	ldw	r3,-20(fp)
  8021d8:	e0ffff15 	stw	r3,-4(fp)
  8021dc:	00bfffc4 	movi	r2,-1
  8021e0:	e0bfef15 	stw	r2,-68(fp)
  8021e4:	e13fff17 	ldw	r4,-4(fp)
  8021e8:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  8021ec:	e13fee04 	addi	r4,fp,-72
  8021f0:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  8021f4:	e037883a 	mov	sp,fp
  8021f8:	dfc00917 	ldw	ra,36(sp)
  8021fc:	df000817 	ldw	fp,32(sp)
  802200:	ddc00717 	ldw	r23,28(sp)
  802204:	dd800617 	ldw	r22,24(sp)
  802208:	dd400517 	ldw	r21,20(sp)
  80220c:	dd000417 	ldw	r20,16(sp)
  802210:	dcc00317 	ldw	r19,12(sp)
  802214:	dc800217 	ldw	r18,8(sp)
  802218:	dc400117 	ldw	r17,4(sp)
  80221c:	dc000017 	ldw	r16,0(sp)
  802220:	dec00a04 	addi	sp,sp,40
  802224:	f800283a 	ret

00802228 <_ZN4UARTC2Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  802228:	deffe004 	addi	sp,sp,-128
  80222c:	dfc01f15 	stw	ra,124(sp)
  802230:	df001e15 	stw	fp,120(sp)
  802234:	ddc01d15 	stw	r23,116(sp)
  802238:	dd801c15 	stw	r22,112(sp)
  80223c:	dd401b15 	stw	r21,108(sp)
  802240:	dd001a15 	stw	r20,104(sp)
  802244:	dcc01915 	stw	r19,100(sp)
  802248:	dc801815 	stw	r18,96(sp)
  80224c:	dc401715 	stw	r17,92(sp)
  802250:	dc001615 	stw	r16,88(sp)
  802254:	df001604 	addi	fp,sp,88
  802258:	e13fea15 	stw	r4,-88(fp)
  80225c:	e17feb15 	stw	r5,-84(fp)
  802260:	e1bfec15 	stw	r6,-80(fp)
  802264:	e1ffed15 	stw	r7,-76(fp)
  802268:	00802034 	movhi	r2,128
  80226c:	108d2f04 	addi	r2,r2,13500
  802270:	e0bff415 	stw	r2,-48(fp)
  802274:	00802074 	movhi	r2,129
  802278:	1087e804 	addi	r2,r2,8096
  80227c:	e0bff515 	stw	r2,-44(fp)
  802280:	e0bff604 	addi	r2,fp,-40
  802284:	e0ffea04 	addi	r3,fp,-88
  802288:	10c00015 	stw	r3,0(r2)
  80228c:	00c02034 	movhi	r3,128
  802290:	18c8f304 	addi	r3,r3,9164
  802294:	10c00115 	stw	r3,4(r2)
  802298:	16c00215 	stw	sp,8(r2)
  80229c:	e13fee04 	addi	r4,fp,-72
  8022a0:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  8022a4:	00c02074 	movhi	r3,129
  8022a8:	18c87604 	addi	r3,r3,8664
  8022ac:	e0bfea17 	ldw	r2,-88(fp)
  8022b0:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  8022b4:	e0ffea17 	ldw	r3,-88(fp)
  8022b8:	e0bfeb17 	ldw	r2,-84(fp)
  8022bc:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  8022c0:	e0ffea17 	ldw	r3,-88(fp)
  8022c4:	e0800a17 	ldw	r2,40(fp)
  8022c8:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  8022cc:	e0ffea17 	ldw	r3,-88(fp)
  8022d0:	e0bfed17 	ldw	r2,-76(fp)
  8022d4:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  8022d8:	00bfffc4 	movi	r2,-1
  8022dc:	e0bfef15 	stw	r2,-68(fp)
  8022e0:	01000504 	movi	r4,20
  8022e4:	0803e3c0 	call	803e3c <_Znwm>
  8022e8:	e0bffe15 	stw	r2,-8(fp)
  8022ec:	00800084 	movi	r2,2
  8022f0:	e0bfef15 	stw	r2,-68(fp)
  8022f4:	e13ffe17 	ldw	r4,-8(fp)
  8022f8:	e17fed17 	ldw	r5,-76(fp)
  8022fc:	08026bc0 	call	8026bc <_ZN4FIFOIcEC1Ej>
  802300:	e0bfea17 	ldw	r2,-88(fp)
  802304:	e0fffe17 	ldw	r3,-8(fp)
  802308:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  80230c:	00bfffc4 	movi	r2,-1
  802310:	e0bfef15 	stw	r2,-68(fp)
  802314:	01000504 	movi	r4,20
  802318:	0803e3c0 	call	803e3c <_Znwm>
  80231c:	e0bffd15 	stw	r2,-12(fp)
  802320:	00800044 	movi	r2,1
  802324:	e0bfef15 	stw	r2,-68(fp)
  802328:	e13ffd17 	ldw	r4,-12(fp)
  80232c:	e1400a17 	ldw	r5,40(fp)
  802330:	08026bc0 	call	8026bc <_ZN4FIFOIcEC1Ej>
  802334:	00000a06 	br	802360 <_ZN4UARTC2Emmjj+0x138>
  802338:	e0bfff17 	ldw	r2,-4(fp)
  80233c:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  802340:	e13ffe17 	ldw	r4,-8(fp)
  802344:	0802da00 	call	802da0 <_ZdlPv>
  802348:	e0fffc17 	ldw	r3,-16(fp)
  80234c:	e0ffff15 	stw	r3,-4(fp)
  802350:	00bfffc4 	movi	r2,-1
  802354:	e0bfef15 	stw	r2,-68(fp)
  802358:	e13fff17 	ldw	r4,-4(fp)
  80235c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  802360:	e0bfea17 	ldw	r2,-88(fp)
  802364:	e0fffd17 	ldw	r3,-12(fp)
  802368:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  80236c:	01000204 	movi	r4,8
  802370:	0804a180 	call	804a18 <malloc>
  802374:	1007883a 	mov	r3,r2
  802378:	e0bfea17 	ldw	r2,-88(fp)
  80237c:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  802380:	e0bfea17 	ldw	r2,-88(fp)
  802384:	10c00617 	ldw	r3,24(r2)
  802388:	e0bfea17 	ldw	r2,-88(fp)
  80238c:	10800317 	ldw	r2,12(r2)
  802390:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  802394:	e0bfea17 	ldw	r2,-88(fp)
  802398:	10c00617 	ldw	r3,24(r2)
  80239c:	e0bfea17 	ldw	r2,-88(fp)
  8023a0:	10800117 	ldw	r2,4(r2)
  8023a4:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  8023a8:	e0bfea17 	ldw	r2,-88(fp)
  8023ac:	11400617 	ldw	r5,24(r2)
  8023b0:	00bfffc4 	movi	r2,-1
  8023b4:	e0bfef15 	stw	r2,-68(fp)
  8023b8:	e13fec17 	ldw	r4,-80(fp)
  8023bc:	01802034 	movhi	r6,128
  8023c0:	31875d04 	addi	r6,r6,7540
  8023c4:	080e83c0 	call	80e83c <alt_irq_register>
}
  8023c8:	00001006 	br	80240c <_ZN4UARTC2Emmjj+0x1e4>
  8023cc:	e7001604 	addi	fp,fp,88
  8023d0:	e0bfef17 	ldw	r2,-68(fp)
  8023d4:	e0fff017 	ldw	r3,-64(fp)
  8023d8:	e0ffff15 	stw	r3,-4(fp)
  8023dc:	10800060 	cmpeqi	r2,r2,1
  8023e0:	103fd51e 	bne	r2,zero,802338 <_ZN4UARTC2Emmjj+0x110>
  8023e4:	e0bfff17 	ldw	r2,-4(fp)
  8023e8:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  8023ec:	e13ffd17 	ldw	r4,-12(fp)
  8023f0:	0802da00 	call	802da0 <_ZdlPv>
  8023f4:	e0fffb17 	ldw	r3,-20(fp)
  8023f8:	e0ffff15 	stw	r3,-4(fp)
  8023fc:	00bfffc4 	movi	r2,-1
  802400:	e0bfef15 	stw	r2,-68(fp)
  802404:	e13fff17 	ldw	r4,-4(fp)
  802408:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  80240c:	e13fee04 	addi	r4,fp,-72
  802410:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  802414:	e037883a 	mov	sp,fp
  802418:	dfc00917 	ldw	ra,36(sp)
  80241c:	df000817 	ldw	fp,32(sp)
  802420:	ddc00717 	ldw	r23,28(sp)
  802424:	dd800617 	ldw	r22,24(sp)
  802428:	dd400517 	ldw	r21,20(sp)
  80242c:	dd000417 	ldw	r20,16(sp)
  802430:	dcc00317 	ldw	r19,12(sp)
  802434:	dc800217 	ldw	r18,8(sp)
  802438:	dc400117 	ldw	r17,4(sp)
  80243c:	dc000017 	ldw	r16,0(sp)
  802440:	dec00a04 	addi	sp,sp,40
  802444:	f800283a 	ret

00802448 <_ZN4FIFOIcE7isEmptyEv>:

		virtual ~FIFO<T>() {
			delete[] _x;
		}

		bool isEmpty(void) {
  802448:	defffe04 	addi	sp,sp,-8
  80244c:	df000115 	stw	fp,4(sp)
  802450:	df000104 	addi	fp,sp,4
  802454:	e13fff15 	stw	r4,-4(fp)
			return (_r == _w);
  802458:	e0bfff17 	ldw	r2,-4(fp)
  80245c:	10c00217 	ldw	r3,8(r2)
  802460:	e0bfff17 	ldw	r2,-4(fp)
  802464:	10800317 	ldw	r2,12(r2)
  802468:	1885003a 	cmpeq	r2,r3,r2
  80246c:	e037883a 	mov	sp,fp
  802470:	df000017 	ldw	fp,0(sp)
  802474:	dec00104 	addi	sp,sp,4
  802478:	f800283a 	ret

0080247c <_ZN4FIFOIcE6isFullEv>:
		}

		bool isFull(void) {
  80247c:	defffd04 	addi	sp,sp,-12
  802480:	df000215 	stw	fp,8(sp)
  802484:	df000204 	addi	fp,sp,8
  802488:	e13ffe15 	stw	r4,-8(fp)
			return (((_r & _m) == (_w & _m)) && (_r != _w));
  80248c:	e0bffe17 	ldw	r2,-8(fp)
  802490:	10c00217 	ldw	r3,8(r2)
  802494:	e0bffe17 	ldw	r2,-8(fp)
  802498:	10800117 	ldw	r2,4(r2)
  80249c:	1888703a 	and	r4,r3,r2
  8024a0:	e0bffe17 	ldw	r2,-8(fp)
  8024a4:	10c00317 	ldw	r3,12(r2)
  8024a8:	e0bffe17 	ldw	r2,-8(fp)
  8024ac:	10800117 	ldw	r2,4(r2)
  8024b0:	1884703a 	and	r2,r3,r2
  8024b4:	2080081e 	bne	r4,r2,8024d8 <_ZN4FIFOIcE6isFullEv+0x5c>
  8024b8:	e0bffe17 	ldw	r2,-8(fp)
  8024bc:	10c00217 	ldw	r3,8(r2)
  8024c0:	e0bffe17 	ldw	r2,-8(fp)
  8024c4:	10800317 	ldw	r2,12(r2)
  8024c8:	18800326 	beq	r3,r2,8024d8 <_ZN4FIFOIcE6isFullEv+0x5c>
  8024cc:	00800044 	movi	r2,1
  8024d0:	e0bfff05 	stb	r2,-4(fp)
  8024d4:	00000106 	br	8024dc <_ZN4FIFOIcE6isFullEv+0x60>
  8024d8:	e03fff05 	stb	zero,-4(fp)
  8024dc:	e0bfff03 	ldbu	r2,-4(fp)
  8024e0:	e037883a 	mov	sp,fp
  8024e4:	df000017 	ldw	fp,0(sp)
  8024e8:	dec00104 	addi	sp,sp,4
  8024ec:	f800283a 	ret

008024f0 <_ZN4FIFOIcE4lockEv>:
		FIFO<T>& flush(void) {
			_r = _w = 0;
			return *this;
		}

		virtual void lock(void) {
  8024f0:	defffe04 	addi	sp,sp,-8
  8024f4:	df000115 	stw	fp,4(sp)
  8024f8:	df000104 	addi	fp,sp,4
  8024fc:	e13fff15 	stw	r4,-4(fp)
			;
  802500:	e037883a 	mov	sp,fp
  802504:	df000017 	ldw	fp,0(sp)
  802508:	dec00104 	addi	sp,sp,4
  80250c:	f800283a 	ret

00802510 <_ZN4FIFOIcE6unlockEv>:
		}

		virtual void unlock(void) {
  802510:	defffe04 	addi	sp,sp,-8
  802514:	df000115 	stw	fp,4(sp)
  802518:	df000104 	addi	fp,sp,4
  80251c:	e13fff15 	stw	r4,-4(fp)
			;
  802520:	e037883a 	mov	sp,fp
  802524:	df000017 	ldw	fp,0(sp)
  802528:	dec00104 	addi	sp,sp,4
  80252c:	f800283a 	ret

00802530 <_ZN4FIFOIcE21_triggerFullConditionEv>:
		unsigned _m; /* counter mask (= depth - 1) */
		unsigned _r; /* read offset in units of T  */
		unsigned _w; /* write offset in units of T */
		T* _x;

		void _triggerFullCondition(void) {
  802530:	defffd04 	addi	sp,sp,-12
  802534:	dfc00215 	stw	ra,8(sp)
  802538:	df000115 	stw	fp,4(sp)
  80253c:	df000104 	addi	fp,sp,4
  802540:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is full"; /* XXX FullFIFOException */
  802544:	01000104 	movi	r4,4
  802548:	08041080 	call	804108 <__cxa_allocate_exception>
  80254c:	1009883a 	mov	r4,r2
  802550:	2007883a 	mov	r3,r4
  802554:	00802074 	movhi	r2,129
  802558:	10886504 	addi	r2,r2,8596
  80255c:	18800015 	stw	r2,0(r3)
  802560:	01402074 	movhi	r5,129
  802564:	29493804 	addi	r5,r5,9440
  802568:	000d883a 	mov	r6,zero
  80256c:	0802a480 	call	802a48 <__cxa_throw>

00802570 <_ZN4FIFOIcE4pushEc>:

		bool isFull(void) {
			return (((_r & _m) == (_w & _m)) && (_r != _w));
		}

		FIFO<T>& push(T val) {
  802570:	defffc04 	addi	sp,sp,-16
  802574:	dfc00315 	stw	ra,12(sp)
  802578:	df000215 	stw	fp,8(sp)
  80257c:	df000204 	addi	fp,sp,8
  802580:	e13ffe15 	stw	r4,-8(fp)
  802584:	e17fff05 	stb	r5,-4(fp)
			if (isFull())
  802588:	e13ffe17 	ldw	r4,-8(fp)
  80258c:	080247c0 	call	80247c <_ZN4FIFOIcE6isFullEv>
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1005003a 	cmpeq	r2,r2,zero
  802598:	1000021e 	bne	r2,zero,8025a4 <_ZN4FIFOIcE4pushEc+0x34>
				_triggerFullCondition();
  80259c:	e13ffe17 	ldw	r4,-8(fp)
  8025a0:	08025300 	call	802530 <_ZN4FIFOIcE21_triggerFullConditionEv>

			_x[_w & _m] = val;
  8025a4:	e0bffe17 	ldw	r2,-8(fp)
  8025a8:	11000417 	ldw	r4,16(r2)
  8025ac:	e0bffe17 	ldw	r2,-8(fp)
  8025b0:	10c00317 	ldw	r3,12(r2)
  8025b4:	e0bffe17 	ldw	r2,-8(fp)
  8025b8:	10800117 	ldw	r2,4(r2)
  8025bc:	1884703a 	and	r2,r3,r2
  8025c0:	2087883a 	add	r3,r4,r2
  8025c4:	e0bfff03 	ldbu	r2,-4(fp)
  8025c8:	18800005 	stb	r2,0(r3)
			_w++;
  8025cc:	e0bffe17 	ldw	r2,-8(fp)
  8025d0:	10800317 	ldw	r2,12(r2)
  8025d4:	10c00044 	addi	r3,r2,1
  8025d8:	e0bffe17 	ldw	r2,-8(fp)
  8025dc:	10c00315 	stw	r3,12(r2)

			return *this;
  8025e0:	e0bffe17 	ldw	r2,-8(fp)
  8025e4:	e037883a 	mov	sp,fp
  8025e8:	dfc00117 	ldw	ra,4(sp)
  8025ec:	df000017 	ldw	fp,0(sp)
  8025f0:	dec00204 	addi	sp,sp,8
  8025f4:	f800283a 	ret

008025f8 <_ZN4FIFOIcE22_triggerEmptyConditionEv>:

		void _triggerFullCondition(void) {
			throw "FIFO is full"; /* XXX FullFIFOException */
		}

		void _triggerEmptyCondition(void) {
  8025f8:	defffd04 	addi	sp,sp,-12
  8025fc:	dfc00215 	stw	ra,8(sp)
  802600:	df000115 	stw	fp,4(sp)
  802604:	df000104 	addi	fp,sp,4
  802608:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is empty"; /*XXX EmptyFIFOException */
  80260c:	01000104 	movi	r4,4
  802610:	08041080 	call	804108 <__cxa_allocate_exception>
  802614:	1009883a 	mov	r4,r2
  802618:	2007883a 	mov	r3,r4
  80261c:	00802074 	movhi	r2,129
  802620:	10886904 	addi	r2,r2,8612
  802624:	18800015 	stw	r2,0(r3)
  802628:	01402074 	movhi	r5,129
  80262c:	29493804 	addi	r5,r5,9440
  802630:	000d883a 	mov	r6,zero
  802634:	0802a480 	call	802a48 <__cxa_throw>

00802638 <_ZN4FIFOIcE4pullEv>:
			_w++;

			return *this;
		}

		T pull(void) {
  802638:	defffc04 	addi	sp,sp,-16
  80263c:	dfc00315 	stw	ra,12(sp)
  802640:	df000215 	stw	fp,8(sp)
  802644:	df000204 	addi	fp,sp,8
  802648:	e13fff15 	stw	r4,-4(fp)
			if (isEmpty())
  80264c:	e13fff17 	ldw	r4,-4(fp)
  802650:	08024480 	call	802448 <_ZN4FIFOIcE7isEmptyEv>
  802654:	10803fcc 	andi	r2,r2,255
  802658:	1005003a 	cmpeq	r2,r2,zero
  80265c:	1000021e 	bne	r2,zero,802668 <_ZN4FIFOIcE4pullEv+0x30>
				_triggerEmptyCondition();
  802660:	e13fff17 	ldw	r4,-4(fp)
  802664:	08025f80 	call	8025f8 <_ZN4FIFOIcE22_triggerEmptyConditionEv>

			T rv = _x[_r & _m];
  802668:	e0bfff17 	ldw	r2,-4(fp)
  80266c:	11000417 	ldw	r4,16(r2)
  802670:	e0bfff17 	ldw	r2,-4(fp)
  802674:	10c00217 	ldw	r3,8(r2)
  802678:	e0bfff17 	ldw	r2,-4(fp)
  80267c:	10800117 	ldw	r2,4(r2)
  802680:	1884703a 	and	r2,r3,r2
  802684:	2085883a 	add	r2,r4,r2
  802688:	10800003 	ldbu	r2,0(r2)
  80268c:	e0bffe05 	stb	r2,-8(fp)
			_r++;
  802690:	e0bfff17 	ldw	r2,-4(fp)
  802694:	10800217 	ldw	r2,8(r2)
  802698:	10c00044 	addi	r3,r2,1
  80269c:	e0bfff17 	ldw	r2,-4(fp)
  8026a0:	10c00215 	stw	r3,8(r2)

			return rv;
  8026a4:	e0bffe07 	ldb	r2,-8(fp)
  8026a8:	e037883a 	mov	sp,fp
  8026ac:	dfc00117 	ldw	ra,4(sp)
  8026b0:	df000017 	ldw	fp,0(sp)
  8026b4:	dec00204 	addi	sp,sp,8
  8026b8:	f800283a 	ret

008026bc <_ZN4FIFOIcEC1Ej>:
template<class T>
class FIFO {

	public:

		FIFO<T>(unsigned depth = 1024) :
  8026bc:	defffc04 	addi	sp,sp,-16
  8026c0:	dfc00315 	stw	ra,12(sp)
  8026c4:	df000215 	stw	fp,8(sp)
  8026c8:	df000204 	addi	fp,sp,8
  8026cc:	e13ffe15 	stw	r4,-8(fp)
  8026d0:	e17fff15 	stw	r5,-4(fp)
				_m(depth - 1) {
  8026d4:	00c02074 	movhi	r3,129
  8026d8:	18c87a04 	addi	r3,r3,8680
  8026dc:	e0bffe17 	ldw	r2,-8(fp)
  8026e0:	10c00015 	stw	r3,0(r2)
  8026e4:	e0bfff17 	ldw	r2,-4(fp)
  8026e8:	10ffffc4 	addi	r3,r2,-1
  8026ec:	e0bffe17 	ldw	r2,-8(fp)
  8026f0:	10c00115 	stw	r3,4(r2)
			if ((depth < 2) || (depth & _m))
  8026f4:	e0bfff17 	ldw	r2,-4(fp)
  8026f8:	108000b0 	cmpltui	r2,r2,2
  8026fc:	1000061e 	bne	r2,zero,802718 <_ZN4FIFOIcEC1Ej+0x5c>
  802700:	e0bffe17 	ldw	r2,-8(fp)
  802704:	10c00117 	ldw	r3,4(r2)
  802708:	e0bfff17 	ldw	r2,-4(fp)
  80270c:	1884703a 	and	r2,r3,r2
  802710:	1005003a 	cmpeq	r2,r2,zero
  802714:	10000b1e 	bne	r2,zero,802744 <_ZN4FIFOIcEC1Ej+0x88>
				throw("depth must be a power of 2"); /* XXX InvalidFIFODepthException */
  802718:	01000104 	movi	r4,4
  80271c:	08041080 	call	804108 <__cxa_allocate_exception>
  802720:	1009883a 	mov	r4,r2
  802724:	2007883a 	mov	r3,r4
  802728:	00802074 	movhi	r2,129
  80272c:	10886d04 	addi	r2,r2,8628
  802730:	18800015 	stw	r2,0(r3)
  802734:	01402074 	movhi	r5,129
  802738:	29493804 	addi	r5,r5,9440
  80273c:	000d883a 	mov	r6,zero
  802740:	0802a480 	call	802a48 <__cxa_throw>

			_x = new T[depth];
  802744:	e13fff17 	ldw	r4,-4(fp)
  802748:	0802b1c0 	call	802b1c <_Znam>
  80274c:	1007883a 	mov	r3,r2
  802750:	e0bffe17 	ldw	r2,-8(fp)
  802754:	10c00415 	stw	r3,16(r2)
			_r = 0;
  802758:	e0bffe17 	ldw	r2,-8(fp)
  80275c:	10000215 	stw	zero,8(r2)
			_w = 0;
  802760:	e0bffe17 	ldw	r2,-8(fp)
  802764:	10000315 	stw	zero,12(r2)
  802768:	e037883a 	mov	sp,fp
  80276c:	dfc00117 	ldw	ra,4(sp)
  802770:	df000017 	ldw	fp,0(sp)
  802774:	dec00204 	addi	sp,sp,8
  802778:	f800283a 	ret

0080277c <_ZN4FIFOIcED0Ev>:
		}

		virtual ~FIFO<T>() {
  80277c:	defffd04 	addi	sp,sp,-12
  802780:	dfc00215 	stw	ra,8(sp)
  802784:	df000115 	stw	fp,4(sp)
  802788:	df000104 	addi	fp,sp,4
  80278c:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  802790:	00c02074 	movhi	r3,129
  802794:	18c87a04 	addi	r3,r3,8680
  802798:	e0bfff17 	ldw	r2,-4(fp)
  80279c:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  8027a0:	e0bfff17 	ldw	r2,-4(fp)
  8027a4:	10800417 	ldw	r2,16(r2)
  8027a8:	1005003a 	cmpeq	r2,r2,zero
  8027ac:	1000031e 	bne	r2,zero,8027bc <_ZN4FIFOIcED0Ev+0x40>
  8027b0:	e0bfff17 	ldw	r2,-4(fp)
  8027b4:	11000417 	ldw	r4,16(r2)
  8027b8:	0802dac0 	call	802dac <_ZdaPv>
  8027bc:	00800044 	movi	r2,1
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1005003a 	cmpeq	r2,r2,zero
  8027c8:	1000021e 	bne	r2,zero,8027d4 <_ZN4FIFOIcED0Ev+0x58>
  8027cc:	e13fff17 	ldw	r4,-4(fp)
  8027d0:	0802da00 	call	802da0 <_ZdlPv>
  8027d4:	e037883a 	mov	sp,fp
  8027d8:	dfc00117 	ldw	ra,4(sp)
  8027dc:	df000017 	ldw	fp,0(sp)
  8027e0:	dec00204 	addi	sp,sp,8
  8027e4:	f800283a 	ret

008027e8 <_ZN4FIFOIcED1Ev>:
			_x = new T[depth];
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
  8027e8:	defffd04 	addi	sp,sp,-12
  8027ec:	dfc00215 	stw	ra,8(sp)
  8027f0:	df000115 	stw	fp,4(sp)
  8027f4:	df000104 	addi	fp,sp,4
  8027f8:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  8027fc:	00c02074 	movhi	r3,129
  802800:	18c87a04 	addi	r3,r3,8680
  802804:	e0bfff17 	ldw	r2,-4(fp)
  802808:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  80280c:	e0bfff17 	ldw	r2,-4(fp)
  802810:	10800417 	ldw	r2,16(r2)
  802814:	1005003a 	cmpeq	r2,r2,zero
  802818:	1000031e 	bne	r2,zero,802828 <_ZN4FIFOIcED1Ev+0x40>
  80281c:	e0bfff17 	ldw	r2,-4(fp)
  802820:	11000417 	ldw	r4,16(r2)
  802824:	0802dac0 	call	802dac <_ZdaPv>
  802828:	0005883a 	mov	r2,zero
  80282c:	10803fcc 	andi	r2,r2,255
  802830:	1005003a 	cmpeq	r2,r2,zero
  802834:	1000021e 	bne	r2,zero,802840 <_ZN4FIFOIcED1Ev+0x58>
  802838:	e13fff17 	ldw	r4,-4(fp)
  80283c:	0802da00 	call	802da0 <_ZdlPv>
  802840:	e037883a 	mov	sp,fp
  802844:	dfc00117 	ldw	ra,4(sp)
  802848:	df000017 	ldw	fp,0(sp)
  80284c:	dec00204 	addi	sp,sp,8
  802850:	f800283a 	ret

00802854 <main>:
#include "system.h"
#include "FSM.h"
#include "stdio.h"

int main() {
  802854:	deffe104 	addi	sp,sp,-124
  802858:	dfc01e15 	stw	ra,120(sp)
  80285c:	df001d15 	stw	fp,116(sp)
  802860:	ddc01c15 	stw	r23,112(sp)
  802864:	dd801b15 	stw	r22,108(sp)
  802868:	dd401a15 	stw	r21,104(sp)
  80286c:	dd001915 	stw	r20,100(sp)
  802870:	dcc01815 	stw	r19,96(sp)
  802874:	dc801715 	stw	r18,92(sp)
  802878:	dc401615 	stw	r17,88(sp)
  80287c:	dc001515 	stw	r16,84(sp)
  802880:	df001504 	addi	fp,sp,84
  802884:	00802034 	movhi	r2,128
  802888:	108d2f04 	addi	r2,r2,13500
  80288c:	e0bff315 	stw	r2,-52(fp)
  802890:	00802074 	movhi	r2,129
  802894:	1087ea04 	addi	r2,r2,8104
  802898:	e0bff415 	stw	r2,-48(fp)
  80289c:	e0bff504 	addi	r2,fp,-44
  8028a0:	e0ffeb04 	addi	r3,fp,-84
  8028a4:	10c00015 	stw	r3,0(r2)
  8028a8:	00c02034 	movhi	r3,128
  8028ac:	18ca5f04 	addi	r3,r3,10620
  8028b0:	10c00115 	stw	r3,4(r2)
  8028b4:	16c00215 	stw	sp,8(r2)
  8028b8:	e13fed04 	addi	r4,fp,-76
  8028bc:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
	FSM* fsm = new FSM();
  8028c0:	00bfffc4 	movi	r2,-1
  8028c4:	e0bfee15 	stw	r2,-72(fp)
  8028c8:	01000e04 	movi	r4,56
  8028cc:	0803e3c0 	call	803e3c <_Znwm>
  8028d0:	e0bffc15 	stw	r2,-16(fp)
  8028d4:	008000c4 	movi	r2,3
  8028d8:	e0bfee15 	stw	r2,-72(fp)
  8028dc:	e13ffc17 	ldw	r4,-16(fp)
  8028e0:	08002180 	call	800218 <_ZN3FSMC1Ev>
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	e0bfec15 	stw	r2,-80(fp)
  8028ec:	00000a06 	br	802918 <main+0xc4>
  8028f0:	e0fffe17 	ldw	r3,-8(fp)
  8028f4:	e0fffb15 	stw	r3,-20(fp)
  8028f8:	e13ffc17 	ldw	r4,-16(fp)
  8028fc:	0802da00 	call	802da0 <_ZdlPv>
  802900:	e0bffb17 	ldw	r2,-20(fp)
  802904:	e0bffe15 	stw	r2,-8(fp)
  802908:	00bfffc4 	movi	r2,-1
  80290c:	e0bfee15 	stw	r2,-72(fp)
  802910:	e13ffe17 	ldw	r4,-8(fp)
  802914:	08047700 	call	804770 <_Unwind_SjLj_Resume>
	while (1) {
		try {
			fsm->action();
  802918:	00800084 	movi	r2,2
  80291c:	e0bfee15 	stw	r2,-72(fp)
  802920:	e13fec17 	ldw	r4,-80(fp)
  802924:	0800ce40 	call	800ce4 <_ZN3FSM6actionEv>
			fsm->transition();
  802928:	e13fec17 	ldw	r4,-80(fp)
  80292c:	08002500 	call	800250 <_ZN3FSM10transitionEv>
  802930:	003ff906 	br	802918 <main+0xc4>
  802934:	e0fffd17 	ldw	r3,-12(fp)
  802938:	18800060 	cmpeqi	r2,r3,1
  80293c:	1000041e 	bne	r2,zero,802950 <main+0xfc>
  802940:	00bfffc4 	movi	r2,-1
  802944:	e0bfee15 	stw	r2,-72(fp)
  802948:	e13ffe17 	ldw	r4,-8(fp)
  80294c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
		} catch (const char* msg) {
  802950:	e13ffe17 	ldw	r4,-8(fp)
  802954:	0802c880 	call	802c88 <__cxa_begin_catch>
  802958:	e0bfeb15 	stw	r2,-84(fp)
			printf("%s\r\n", msg);
  80295c:	00800044 	movi	r2,1
  802960:	e0bfee15 	stw	r2,-72(fp)
  802964:	01002074 	movhi	r4,129
  802968:	21088104 	addi	r4,r4,8708
  80296c:	e17feb17 	ldw	r5,-84(fp)
  802970:	08052040 	call	805204 <printf>
	FSM* fsm = new FSM();
	while (1) {
		try {
			fsm->action();
			fsm->transition();
		} catch (const char* msg) {
  802974:	0802be40 	call	802be4 <__cxa_end_catch>
  802978:	003fe706 	br	802918 <main+0xc4>
  80297c:	e7001504 	addi	fp,fp,84
  802980:	e0bfee17 	ldw	r2,-72(fp)
  802984:	e0bfff15 	stw	r2,-4(fp)
  802988:	e0ffef17 	ldw	r3,-68(fp)
  80298c:	e0fffe15 	stw	r3,-8(fp)
  802990:	e0bff017 	ldw	r2,-64(fp)
  802994:	e0bffd15 	stw	r2,-12(fp)
  802998:	e0ffff17 	ldw	r3,-4(fp)
  80299c:	18800060 	cmpeqi	r2,r3,1
  8029a0:	103fe41e 	bne	r2,zero,802934 <main+0xe0>
  8029a4:	e0ffff17 	ldw	r3,-4(fp)
  8029a8:	188000a0 	cmpeqi	r2,r3,2
  8029ac:	103fd01e 	bne	r2,zero,8028f0 <main+0x9c>
  8029b0:	e0bffe17 	ldw	r2,-8(fp)
  8029b4:	e0bffa15 	stw	r2,-24(fp)
  8029b8:	0802be40 	call	802be4 <__cxa_end_catch>
  8029bc:	e0fffa17 	ldw	r3,-24(fp)
  8029c0:	e0fffe15 	stw	r3,-8(fp)
  8029c4:	00bfffc4 	movi	r2,-1
  8029c8:	e0bfee15 	stw	r2,-72(fp)
  8029cc:	e13ffe17 	ldw	r4,-8(fp)
  8029d0:	08047700 	call	804770 <_Unwind_SjLj_Resume>

008029d4 <__cxa_rethrow>:
  8029d4:	defffe04 	addi	sp,sp,-8
  8029d8:	dc400015 	stw	r17,0(sp)
  8029dc:	dfc00115 	stw	ra,4(sp)
  8029e0:	0803d280 	call	803d28 <__cxa_get_globals>
  8029e4:	100b883a 	mov	r5,r2
  8029e8:	10800117 	ldw	r2,4(r2)
  8029ec:	2c400017 	ldw	r17,0(r5)
  8029f0:	10800044 	addi	r2,r2,1
  8029f4:	28800115 	stw	r2,4(r5)
  8029f8:	88000b26 	beq	r17,zero,802a28 <__cxa_rethrow+0x54>
  8029fc:	88c00b17 	ldw	r3,44(r17)
  802a00:	0090caf4 	movhi	r2,17195
  802a04:	108ac004 	addi	r2,r2,11008
  802a08:	89000c17 	ldw	r4,48(r17)
  802a0c:	18800726 	beq	r3,r2,802a2c <__cxa_rethrow+0x58>
  802a10:	28000015 	stw	zero,0(r5)
  802a14:	8c400b04 	addi	r17,r17,44
  802a18:	8809883a 	mov	r4,r17
  802a1c:	08049940 	call	804994 <_Unwind_SjLj_Resume_or_Rethrow>
  802a20:	8809883a 	mov	r4,r17
  802a24:	0802c880 	call	802c88 <__cxa_begin_catch>
  802a28:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  802a2c:	0091d3b4 	movhi	r2,18254
  802a30:	109550c4 	addi	r2,r2,21827
  802a34:	20bff61e 	bne	r4,r2,802a10 <__cxa_rethrow+0x3c>
  802a38:	88800517 	ldw	r2,20(r17)
  802a3c:	0085c83a 	sub	r2,zero,r2
  802a40:	88800515 	stw	r2,20(r17)
  802a44:	003ff306 	br	802a14 <__cxa_rethrow+0x40>

00802a48 <__cxa_throw>:
  802a48:	00802074 	movhi	r2,129
  802a4c:	10914704 	addi	r2,r2,17692
  802a50:	00c02074 	movhi	r3,129
  802a54:	18d14604 	addi	r3,r3,17688
  802a58:	12000017 	ldw	r8,0(r2)
  802a5c:	19c00017 	ldw	r7,0(r3)
  802a60:	defffe04 	addi	sp,sp,-8
  802a64:	213ff004 	addi	r4,r4,-64
  802a68:	dfc00115 	stw	ra,4(sp)
  802a6c:	dc400015 	stw	r17,0(sp)
  802a70:	0090caf4 	movhi	r2,17195
  802a74:	108ac004 	addi	r2,r2,11008
  802a78:	20800b15 	stw	r2,44(r4)
  802a7c:	00d1d3b4 	movhi	r3,18254
  802a80:	18d550c4 	addi	r3,r3,21827
  802a84:	24400b04 	addi	r17,r4,44
  802a88:	00802034 	movhi	r2,128
  802a8c:	108aaf04 	addi	r2,r2,10940
  802a90:	21400015 	stw	r5,0(r4)
  802a94:	21800115 	stw	r6,4(r4)
  802a98:	22000215 	stw	r8,8(r4)
  802a9c:	21c00315 	stw	r7,12(r4)
  802aa0:	20c00c15 	stw	r3,48(r4)
  802aa4:	20800d15 	stw	r2,52(r4)
  802aa8:	8809883a 	mov	r4,r17
  802aac:	08047cc0 	call	8047cc <_Unwind_SjLj_RaiseException>
  802ab0:	8809883a 	mov	r4,r17
  802ab4:	0802c880 	call	802c88 <__cxa_begin_catch>
  802ab8:	0803dfc0 	call	803dfc <_ZSt9terminatev>

00802abc <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
  802abc:	defffe04 	addi	sp,sp,-8
  802ac0:	00800044 	movi	r2,1
  802ac4:	dfc00115 	stw	ra,4(sp)
  802ac8:	dc000015 	stw	r16,0(sp)
  802acc:	28fff504 	addi	r3,r5,-44
  802ad0:	11001036 	bltu	r2,r4,802b14 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  802ad4:	18800117 	ldw	r2,4(r3)
  802ad8:	10000826 	beq	r2,zero,802afc <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  802adc:	2c000504 	addi	r16,r5,20
  802ae0:	8009883a 	mov	r4,r16
  802ae4:	103ee83a 	callr	r2
  802ae8:	8009883a 	mov	r4,r16
  802aec:	dfc00117 	ldw	ra,4(sp)
  802af0:	dc000017 	ldw	r16,0(sp)
  802af4:	dec00204 	addi	sp,sp,8
  802af8:	08040c81 	jmpi	8040c8 <__cxa_free_exception>
  802afc:	2c000504 	addi	r16,r5,20
  802b00:	8009883a 	mov	r4,r16
  802b04:	dfc00117 	ldw	ra,4(sp)
  802b08:	dc000017 	ldw	r16,0(sp)
  802b0c:	dec00204 	addi	sp,sp,8
  802b10:	08040c81 	jmpi	8040c8 <__cxa_free_exception>
  802b14:	19000317 	ldw	r4,12(r3)
  802b18:	0803d580 	call	803d58 <_ZN10__cxxabiv111__terminateEPFvvE>

00802b1c <_Znam>:
  802b1c:	deffee04 	addi	sp,sp,-72
  802b20:	00802034 	movhi	r2,128
  802b24:	108d2f04 	addi	r2,r2,13500
  802b28:	d8800615 	stw	r2,24(sp)
  802b2c:	00c02074 	movhi	r3,129
  802b30:	18c7ef04 	addi	r3,r3,8124
  802b34:	00802034 	movhi	r2,128
  802b38:	108ae604 	addi	r2,r2,11160
  802b3c:	d9000e15 	stw	r4,56(sp)
  802b40:	d809883a 	mov	r4,sp
  802b44:	d8800915 	stw	r2,36(sp)
  802b48:	dfc01115 	stw	ra,68(sp)
  802b4c:	df001015 	stw	fp,64(sp)
  802b50:	ddc00f15 	stw	r23,60(sp)
  802b54:	d8c00715 	stw	r3,28(sp)
  802b58:	dec00815 	stw	sp,32(sp)
  802b5c:	dec00a15 	stw	sp,40(sp)
  802b60:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  802b64:	00800044 	movi	r2,1
  802b68:	d8800115 	stw	r2,4(sp)
  802b6c:	d9000e17 	ldw	r4,56(sp)
  802b70:	0803e3c0 	call	803e3c <_Znwm>
  802b74:	d809883a 	mov	r4,sp
  802b78:	d8800d15 	stw	r2,52(sp)
  802b7c:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  802b80:	d8800d17 	ldw	r2,52(sp)
  802b84:	dfc01117 	ldw	ra,68(sp)
  802b88:	df001017 	ldw	fp,64(sp)
  802b8c:	ddc00f17 	ldw	r23,60(sp)
  802b90:	dec01204 	addi	sp,sp,72
  802b94:	f800283a 	ret
  802b98:	d8800317 	ldw	r2,12(sp)
  802b9c:	00ffffc4 	movi	r3,-1
  802ba0:	d9000217 	ldw	r4,8(sp)
  802ba4:	10c00226 	beq	r2,r3,802bb0 <_Znam+0x94>
  802ba8:	d8c00115 	stw	r3,4(sp)
  802bac:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  802bb0:	00bfffc4 	movi	r2,-1
  802bb4:	d8800115 	stw	r2,4(sp)
  802bb8:	080333c0 	call	80333c <__cxa_call_unexpected>

00802bbc <__cxa_get_exception_ptr>:
  802bbc:	20bfff17 	ldw	r2,-4(r4)
  802bc0:	f800283a 	ret

00802bc4 <_ZSt18uncaught_exceptionv>:
  802bc4:	deffff04 	addi	sp,sp,-4
  802bc8:	dfc00015 	stw	ra,0(sp)
  802bcc:	0803d280 	call	803d28 <__cxa_get_globals>
  802bd0:	10800117 	ldw	r2,4(r2)
  802bd4:	1004c03a 	cmpne	r2,r2,zero
  802bd8:	dfc00017 	ldw	ra,0(sp)
  802bdc:	dec00104 	addi	sp,sp,4
  802be0:	f800283a 	ret

00802be4 <__cxa_end_catch>:
  802be4:	deffff04 	addi	sp,sp,-4
  802be8:	dfc00015 	stw	ra,0(sp)
  802bec:	0803d200 	call	803d20 <__cxa_get_globals_fast>
  802bf0:	11000017 	ldw	r4,0(r2)
  802bf4:	1007883a 	mov	r3,r2
  802bf8:	20001326 	beq	r4,zero,802c48 <__cxa_end_catch+0x64>
  802bfc:	21400b17 	ldw	r5,44(r4)
  802c00:	0090caf4 	movhi	r2,17195
  802c04:	108ac004 	addi	r2,r2,11008
  802c08:	21800c17 	ldw	r6,48(r4)
  802c0c:	28800526 	beq	r5,r2,802c24 <__cxa_end_catch+0x40>
  802c10:	21000b04 	addi	r4,r4,44
  802c14:	18000015 	stw	zero,0(r3)
  802c18:	dfc00017 	ldw	ra,0(sp)
  802c1c:	dec00104 	addi	sp,sp,4
  802c20:	08046641 	jmpi	804664 <_Unwind_DeleteException>
  802c24:	0091d3b4 	movhi	r2,18254
  802c28:	109550c4 	addi	r2,r2,21827
  802c2c:	30bff81e 	bne	r6,r2,802c10 <__cxa_end_catch+0x2c>
  802c30:	20800517 	ldw	r2,20(r4)
  802c34:	10000e16 	blt	r2,zero,802c70 <__cxa_end_catch+0x8c>
  802c38:	117fffc4 	addi	r5,r2,-1
  802c3c:	28000526 	beq	r5,zero,802c54 <__cxa_end_catch+0x70>
  802c40:	28000a16 	blt	r5,zero,802c6c <__cxa_end_catch+0x88>
  802c44:	21400515 	stw	r5,20(r4)
  802c48:	dfc00017 	ldw	ra,0(sp)
  802c4c:	dec00104 	addi	sp,sp,4
  802c50:	f800283a 	ret
  802c54:	20800417 	ldw	r2,16(r4)
  802c58:	21000b04 	addi	r4,r4,44
  802c5c:	18800015 	stw	r2,0(r3)
  802c60:	dfc00017 	ldw	ra,0(sp)
  802c64:	dec00104 	addi	sp,sp,4
  802c68:	08046641 	jmpi	804664 <_Unwind_DeleteException>
  802c6c:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  802c70:	11400044 	addi	r5,r2,1
  802c74:	283ff31e 	bne	r5,zero,802c44 <__cxa_end_catch+0x60>
  802c78:	20800417 	ldw	r2,16(r4)
  802c7c:	21400515 	stw	r5,20(r4)
  802c80:	18800015 	stw	r2,0(r3)
  802c84:	003ff006 	br	802c48 <__cxa_end_catch+0x64>

00802c88 <__cxa_begin_catch>:
  802c88:	deffee04 	addi	sp,sp,-72
  802c8c:	00802034 	movhi	r2,128
  802c90:	108d2f04 	addi	r2,r2,13500
  802c94:	00c02074 	movhi	r3,129
  802c98:	18c7f404 	addi	r3,r3,8144
  802c9c:	d8800615 	stw	r2,24(sp)
  802ca0:	d9000e15 	stw	r4,56(sp)
  802ca4:	00802034 	movhi	r2,128
  802ca8:	108b5f04 	addi	r2,r2,11644
  802cac:	d809883a 	mov	r4,sp
  802cb0:	d8c00715 	stw	r3,28(sp)
  802cb4:	dfc01115 	stw	ra,68(sp)
  802cb8:	d8800915 	stw	r2,36(sp)
  802cbc:	df001015 	stw	fp,64(sp)
  802cc0:	ddc00f15 	stw	r23,60(sp)
  802cc4:	dec00815 	stw	sp,32(sp)
  802cc8:	dec00a15 	stw	sp,40(sp)
  802ccc:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  802cd0:	0803d280 	call	803d28 <__cxa_get_globals>
  802cd4:	100d883a 	mov	r6,r2
  802cd8:	d8800e17 	ldw	r2,56(sp)
  802cdc:	31c00017 	ldw	r7,0(r6)
  802ce0:	117ff504 	addi	r5,r2,-44
  802ce4:	28c00b17 	ldw	r3,44(r5)
  802ce8:	0090caf4 	movhi	r2,17195
  802cec:	108ac004 	addi	r2,r2,11008
  802cf0:	29000c17 	ldw	r4,48(r5)
  802cf4:	18800b26 	beq	r3,r2,802d24 <__cxa_begin_catch+0x9c>
  802cf8:	38001d1e 	bne	r7,zero,802d70 <__cxa_begin_catch+0xe8>
  802cfc:	d8000d15 	stw	zero,52(sp)
  802d00:	31400015 	stw	r5,0(r6)
  802d04:	d809883a 	mov	r4,sp
  802d08:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  802d0c:	d8800d17 	ldw	r2,52(sp)
  802d10:	dfc01117 	ldw	ra,68(sp)
  802d14:	df001017 	ldw	fp,64(sp)
  802d18:	ddc00f17 	ldw	r23,60(sp)
  802d1c:	dec01204 	addi	sp,sp,72
  802d20:	f800283a 	ret
  802d24:	0091d3b4 	movhi	r2,18254
  802d28:	109550c4 	addi	r2,r2,21827
  802d2c:	20bff21e 	bne	r4,r2,802cf8 <__cxa_begin_catch+0x70>
  802d30:	28c00517 	ldw	r3,20(r5)
  802d34:	18000b16 	blt	r3,zero,802d64 <__cxa_begin_catch+0xdc>
  802d38:	18800044 	addi	r2,r3,1
  802d3c:	28800515 	stw	r2,20(r5)
  802d40:	30800117 	ldw	r2,4(r6)
  802d44:	10bfffc4 	addi	r2,r2,-1
  802d48:	30800115 	stw	r2,4(r6)
  802d4c:	39400226 	beq	r7,r5,802d58 <__cxa_begin_catch+0xd0>
  802d50:	29c00415 	stw	r7,16(r5)
  802d54:	31400015 	stw	r5,0(r6)
  802d58:	29400a17 	ldw	r5,40(r5)
  802d5c:	d9400d15 	stw	r5,52(sp)
  802d60:	003fe806 	br	802d04 <__cxa_begin_catch+0x7c>
  802d64:	00800044 	movi	r2,1
  802d68:	10c5c83a 	sub	r2,r2,r3
  802d6c:	003ff306 	br	802d3c <__cxa_begin_catch+0xb4>
  802d70:	00800044 	movi	r2,1
  802d74:	d8800115 	stw	r2,4(sp)
  802d78:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  802d7c:	d8800317 	ldw	r2,12(sp)
  802d80:	00ffffc4 	movi	r3,-1
  802d84:	d9000217 	ldw	r4,8(sp)
  802d88:	10c00226 	beq	r2,r3,802d94 <__cxa_begin_catch+0x10c>
  802d8c:	d8c00115 	stw	r3,4(sp)
  802d90:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  802d94:	00bfffc4 	movi	r2,-1
  802d98:	d8800115 	stw	r2,4(sp)
  802d9c:	080333c0 	call	80333c <__cxa_call_unexpected>

00802da0 <_ZdlPv>:
  802da0:	20000126 	beq	r4,zero,802da8 <_ZdlPv+0x8>
  802da4:	0804a041 	jmpi	804a04 <free>
  802da8:	f800283a 	ret

00802dac <_ZdaPv>:
  802dac:	0802da01 	jmpi	802da0 <_ZdlPv>

00802db0 <_Z12read_uleb128PKhPj>:
  802db0:	000d883a 	mov	r6,zero
  802db4:	000f883a 	mov	r7,zero
  802db8:	20c00007 	ldb	r3,0(r4)
  802dbc:	21000044 	addi	r4,r4,1
  802dc0:	18801fcc 	andi	r2,r3,127
  802dc4:	1184983a 	sll	r2,r2,r6
  802dc8:	318001c4 	addi	r6,r6,7
  802dcc:	388eb03a 	or	r7,r7,r2
  802dd0:	183ff916 	blt	r3,zero,802db8 <_Z12read_uleb128PKhPj+0x8>
  802dd4:	2005883a 	mov	r2,r4
  802dd8:	29c00015 	stw	r7,0(r5)
  802ddc:	f800283a 	ret

00802de0 <_Z12read_sleb128PKhPi>:
  802de0:	000f883a 	mov	r7,zero
  802de4:	0011883a 	mov	r8,zero
  802de8:	20c00007 	ldb	r3,0(r4)
  802dec:	21000044 	addi	r4,r4,1
  802df0:	19803fcc 	andi	r6,r3,255
  802df4:	30801fcc 	andi	r2,r6,127
  802df8:	11c4983a 	sll	r2,r2,r7
  802dfc:	39c001c4 	addi	r7,r7,7
  802e00:	4090b03a 	or	r8,r8,r2
  802e04:	183ff816 	blt	r3,zero,802de8 <_Z12read_sleb128PKhPi+0x8>
  802e08:	008007c4 	movi	r2,31
  802e0c:	11c00636 	bltu	r2,r7,802e28 <_Z12read_sleb128PKhPi+0x48>
  802e10:	3080100c 	andi	r2,r6,64
  802e14:	10000426 	beq	r2,zero,802e28 <_Z12read_sleb128PKhPi+0x48>
  802e18:	00800044 	movi	r2,1
  802e1c:	11c4983a 	sll	r2,r2,r7
  802e20:	0085c83a 	sub	r2,zero,r2
  802e24:	4090b03a 	or	r8,r8,r2
  802e28:	2005883a 	mov	r2,r4
  802e2c:	2a000015 	stw	r8,0(r5)
  802e30:	f800283a 	ret

00802e34 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
  802e34:	28800017 	ldw	r2,0(r5)
  802e38:	defffb04 	addi	sp,sp,-20
  802e3c:	30c00017 	ldw	r3,0(r6)
  802e40:	dc400215 	stw	r17,8(sp)
  802e44:	2823883a 	mov	r17,r5
  802e48:	11400217 	ldw	r5,8(r2)
  802e4c:	dc800315 	stw	r18,12(sp)
  802e50:	dc000115 	stw	r16,4(sp)
  802e54:	dfc00415 	stw	ra,16(sp)
  802e58:	2021883a 	mov	r16,r4
  802e5c:	d8c00015 	stw	r3,0(sp)
  802e60:	8809883a 	mov	r4,r17
  802e64:	3025883a 	mov	r18,r6
  802e68:	283ee83a 	callr	r5
  802e6c:	10803fcc 	andi	r2,r2,255
  802e70:	880b883a 	mov	r5,r17
  802e74:	8009883a 	mov	r4,r16
  802e78:	d80d883a 	mov	r6,sp
  802e7c:	01c00044 	movi	r7,1
  802e80:	10000326 	beq	r2,zero,802e90 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
  802e84:	d8800017 	ldw	r2,0(sp)
  802e88:	10c00017 	ldw	r3,0(r2)
  802e8c:	d8c00015 	stw	r3,0(sp)
  802e90:	80800017 	ldw	r2,0(r16)
  802e94:	10c00417 	ldw	r3,16(r2)
  802e98:	183ee83a 	callr	r3
  802e9c:	10803fcc 	andi	r2,r2,255
  802ea0:	0007883a 	mov	r3,zero
  802ea4:	10000326 	beq	r2,zero,802eb4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
  802ea8:	d8800017 	ldw	r2,0(sp)
  802eac:	00c00044 	movi	r3,1
  802eb0:	90800015 	stw	r2,0(r18)
  802eb4:	1805883a 	mov	r2,r3
  802eb8:	dfc00417 	ldw	ra,16(sp)
  802ebc:	dc800317 	ldw	r18,12(sp)
  802ec0:	dc400217 	ldw	r17,8(sp)
  802ec4:	dc000117 	ldw	r16,4(sp)
  802ec8:	dec00504 	addi	sp,sp,20
  802ecc:	f800283a 	ret

00802ed0 <_Z28read_encoded_value_with_basehjPKhPj>:
  802ed0:	defff904 	addi	sp,sp,-28
  802ed4:	dc400215 	stw	r17,8(sp)
  802ed8:	00801404 	movi	r2,80
  802edc:	24403fcc 	andi	r17,r4,255
  802ee0:	dd000515 	stw	r20,20(sp)
  802ee4:	dcc00415 	stw	r19,16(sp)
  802ee8:	dc800315 	stw	r18,12(sp)
  802eec:	dc000115 	stw	r16,4(sp)
  802ef0:	dfc00615 	stw	ra,24(sp)
  802ef4:	2025883a 	mov	r18,r4
  802ef8:	2829883a 	mov	r20,r5
  802efc:	3021883a 	mov	r16,r6
  802f00:	3827883a 	mov	r19,r7
  802f04:	88801826 	beq	r17,r2,802f68 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
  802f08:	88c003cc 	andi	r3,r17,15
  802f0c:	00800304 	movi	r2,12
  802f10:	10c0012e 	bgeu	r2,r3,802f18 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
  802f14:	08049ec0 	call	8049ec <abort>
  802f18:	18c5883a 	add	r2,r3,r3
  802f1c:	1085883a 	add	r2,r2,r2
  802f20:	00c02034 	movhi	r3,128
  802f24:	18cbcd04 	addi	r3,r3,12084
  802f28:	10c5883a 	add	r2,r2,r3
  802f2c:	11000017 	ldw	r4,0(r2)
  802f30:	2000683a 	jmp	r4
  802f34:	00802fa4 	muli	r2,zero,190
  802f38:	0080308c 	andi	r2,zero,194
  802f3c:	00803038 	rdprs	r2,zero,192
  802f40:	00802fa4 	muli	r2,zero,190
  802f44:	00802ffc 	xorhi	r2,zero,191
  802f48:	00802f14 	movui	r2,188
  802f4c:	00802f14 	movui	r2,188
  802f50:	00802f14 	movui	r2,188
  802f54:	00802f14 	movui	r2,188
  802f58:	00803074 	movhi	r2,193
  802f5c:	00803050 	cmplti	r2,zero,193
  802f60:	00802fa4 	muli	r2,zero,190
  802f64:	00802ffc 	xorhi	r2,zero,191
  802f68:	308000c4 	addi	r2,r6,3
  802f6c:	00ffff04 	movi	r3,-4
  802f70:	10c4703a 	and	r2,r2,r3
  802f74:	11000017 	ldw	r4,0(r2)
  802f78:	11400104 	addi	r5,r2,4
  802f7c:	2805883a 	mov	r2,r5
  802f80:	99000015 	stw	r4,0(r19)
  802f84:	dfc00617 	ldw	ra,24(sp)
  802f88:	dd000517 	ldw	r20,20(sp)
  802f8c:	dcc00417 	ldw	r19,16(sp)
  802f90:	dc800317 	ldw	r18,12(sp)
  802f94:	dc400217 	ldw	r17,8(sp)
  802f98:	dc000117 	ldw	r16,4(sp)
  802f9c:	dec00704 	addi	sp,sp,28
  802fa0:	f800283a 	ret
  802fa4:	30800043 	ldbu	r2,1(r6)
  802fa8:	30c00083 	ldbu	r3,2(r6)
  802fac:	310000c3 	ldbu	r4,3(r6)
  802fb0:	31400003 	ldbu	r5,0(r6)
  802fb4:	1004923a 	slli	r2,r2,8
  802fb8:	1806943a 	slli	r3,r3,16
  802fbc:	2008963a 	slli	r4,r4,24
  802fc0:	1144b03a 	or	r2,r2,r5
  802fc4:	1886b03a 	or	r3,r3,r2
  802fc8:	20c8b03a 	or	r4,r4,r3
  802fcc:	31400104 	addi	r5,r6,4
  802fd0:	203fea26 	beq	r4,zero,802f7c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  802fd4:	88c01c0c 	andi	r3,r17,112
  802fd8:	00800404 	movi	r2,16
  802fdc:	18801426 	beq	r3,r2,803030 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
  802fe0:	90803fcc 	andi	r2,r18,255
  802fe4:	1080201c 	xori	r2,r2,128
  802fe8:	10bfe004 	addi	r2,r2,-128
  802fec:	2509883a 	add	r4,r4,r20
  802ff0:	103fe20e 	bge	r2,zero,802f7c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  802ff4:	21000017 	ldw	r4,0(r4)
  802ff8:	003fe006 	br	802f7c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  802ffc:	30800043 	ldbu	r2,1(r6)
  803000:	31800083 	ldbu	r6,2(r6)
  803004:	820000c3 	ldbu	r8,3(r16)
  803008:	1004923a 	slli	r2,r2,8
  80300c:	82400003 	ldbu	r9,0(r16)
  803010:	300c943a 	slli	r6,r6,16
  803014:	4010963a 	slli	r8,r8,24
  803018:	1244b03a 	or	r2,r2,r9
  80301c:	308cb03a 	or	r6,r6,r2
  803020:	4184b03a 	or	r2,r8,r6
  803024:	1009883a 	mov	r4,r2
  803028:	81400204 	addi	r5,r16,8
  80302c:	003fe806 	br	802fd0 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  803030:	8029883a 	mov	r20,r16
  803034:	003fea06 	br	802fe0 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
  803038:	30800043 	ldbu	r2,1(r6)
  80303c:	30c00003 	ldbu	r3,0(r6)
  803040:	31400084 	addi	r5,r6,2
  803044:	1004923a 	slli	r2,r2,8
  803048:	10c8b03a 	or	r4,r2,r3
  80304c:	003fe006 	br	802fd0 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  803050:	30800043 	ldbu	r2,1(r6)
  803054:	30c00003 	ldbu	r3,0(r6)
  803058:	31400084 	addi	r5,r6,2
  80305c:	1004923a 	slli	r2,r2,8
  803060:	10c4b03a 	or	r2,r2,r3
  803064:	113fffcc 	andi	r4,r2,65535
  803068:	2120001c 	xori	r4,r4,32768
  80306c:	21200004 	addi	r4,r4,-32768
  803070:	003fd706 	br	802fd0 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  803074:	3009883a 	mov	r4,r6
  803078:	d80b883a 	mov	r5,sp
  80307c:	0802de00 	call	802de0 <_Z12read_sleb128PKhPi>
  803080:	d9000017 	ldw	r4,0(sp)
  803084:	100b883a 	mov	r5,r2
  803088:	003fd106 	br	802fd0 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  80308c:	3009883a 	mov	r4,r6
  803090:	d80b883a 	mov	r5,sp
  803094:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  803098:	d9000017 	ldw	r4,0(sp)
  80309c:	100b883a 	mov	r5,r2
  8030a0:	003fcb06 	br	802fd0 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

008030a4 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
  8030a4:	deffff04 	addi	sp,sp,-4
  8030a8:	21003fcc 	andi	r4,r4,255
  8030ac:	00803fc4 	movi	r2,255
  8030b0:	dfc00015 	stw	ra,0(sp)
  8030b4:	20800c26 	beq	r4,r2,8030e8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  8030b8:	21001c0c 	andi	r4,r4,112
  8030bc:	00800804 	movi	r2,32
  8030c0:	20800d26 	beq	r4,r2,8030f8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
  8030c4:	1100070e 	bge	r2,r4,8030e4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
  8030c8:	00801004 	movi	r2,64
  8030cc:	20801126 	beq	r4,r2,803114 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
  8030d0:	00801404 	movi	r2,80
  8030d4:	20800426 	beq	r4,r2,8030e8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  8030d8:	00800c04 	movi	r2,48
  8030dc:	20801126 	beq	r4,r2,803124 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
  8030e0:	08049ec0 	call	8049ec <abort>
  8030e4:	2000081e 	bne	r4,zero,803108 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
  8030e8:	0005883a 	mov	r2,zero
  8030ec:	dfc00017 	ldw	ra,0(sp)
  8030f0:	dec00104 	addi	sp,sp,4
  8030f4:	f800283a 	ret
  8030f8:	2809883a 	mov	r4,r5
  8030fc:	dfc00017 	ldw	ra,0(sp)
  803100:	dec00104 	addi	sp,sp,4
  803104:	080455c1 	jmpi	80455c <_Unwind_GetTextRelBase>
  803108:	00800404 	movi	r2,16
  80310c:	20bff626 	beq	r4,r2,8030e8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  803110:	08049ec0 	call	8049ec <abort>
  803114:	2809883a 	mov	r4,r5
  803118:	dfc00017 	ldw	ra,0(sp)
  80311c:	dec00104 	addi	sp,sp,4
  803120:	08045441 	jmpi	804544 <_Unwind_GetRegionStart>
  803124:	2809883a 	mov	r4,r5
  803128:	dfc00017 	ldw	ra,0(sp)
  80312c:	dec00104 	addi	sp,sp,4
  803130:	08045541 	jmpi	804554 <_Unwind_GetDataRelBase>

00803134 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  803134:	defffa04 	addi	sp,sp,-24
  803138:	dc800415 	stw	r18,16(sp)
  80313c:	dc400315 	stw	r17,12(sp)
  803140:	dc000215 	stw	r16,8(sp)
  803144:	dfc00515 	stw	ra,20(sp)
  803148:	2021883a 	mov	r16,r4
  80314c:	000f883a 	mov	r7,zero
  803150:	3023883a 	mov	r17,r6
  803154:	2825883a 	mov	r18,r5
  803158:	20000226 	beq	r4,zero,803164 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
  80315c:	08045440 	call	804544 <_Unwind_GetRegionStart>
  803160:	100f883a 	mov	r7,r2
  803164:	89c00015 	stw	r7,0(r17)
  803168:	90c00003 	ldbu	r3,0(r18)
  80316c:	800b883a 	mov	r5,r16
  803170:	00803fc4 	movi	r2,255
  803174:	1c003fcc 	andi	r16,r3,255
  803178:	91800044 	addi	r6,r18,1
  80317c:	8009883a 	mov	r4,r16
  803180:	18802226 	beq	r3,r2,80320c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
  803184:	d9800115 	stw	r6,4(sp)
  803188:	08030a40 	call	8030a4 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  80318c:	d9800117 	ldw	r6,4(sp)
  803190:	8009883a 	mov	r4,r16
  803194:	100b883a 	mov	r5,r2
  803198:	89c00104 	addi	r7,r17,4
  80319c:	0802ed00 	call	802ed0 <_Z28read_encoded_value_with_basehjPKhPj>
  8031a0:	100d883a 	mov	r6,r2
  8031a4:	30800003 	ldbu	r2,0(r6)
  8031a8:	31c00044 	addi	r7,r6,1
  8031ac:	00c03fc4 	movi	r3,255
  8031b0:	d80b883a 	mov	r5,sp
  8031b4:	3809883a 	mov	r4,r7
  8031b8:	88800505 	stb	r2,20(r17)
  8031bc:	10c01b26 	beq	r2,r3,80322c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
  8031c0:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  8031c4:	100f883a 	mov	r7,r2
  8031c8:	d8800017 	ldw	r2,0(sp)
  8031cc:	3885883a 	add	r2,r7,r2
  8031d0:	88800315 	stw	r2,12(r17)
  8031d4:	38800003 	ldbu	r2,0(r7)
  8031d8:	39000044 	addi	r4,r7,1
  8031dc:	d80b883a 	mov	r5,sp
  8031e0:	88800545 	stb	r2,21(r17)
  8031e4:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  8031e8:	d8c00017 	ldw	r3,0(sp)
  8031ec:	10c9883a 	add	r4,r2,r3
  8031f0:	89000415 	stw	r4,16(r17)
  8031f4:	dfc00517 	ldw	ra,20(sp)
  8031f8:	dc800417 	ldw	r18,16(sp)
  8031fc:	dc400317 	ldw	r17,12(sp)
  803200:	dc000217 	ldw	r16,8(sp)
  803204:	dec00604 	addi	sp,sp,24
  803208:	f800283a 	ret
  80320c:	89c00115 	stw	r7,4(r17)
  803210:	30800003 	ldbu	r2,0(r6)
  803214:	31c00044 	addi	r7,r6,1
  803218:	00c03fc4 	movi	r3,255
  80321c:	d80b883a 	mov	r5,sp
  803220:	3809883a 	mov	r4,r7
  803224:	88800505 	stb	r2,20(r17)
  803228:	10ffe51e 	bne	r2,r3,8031c0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
  80322c:	88000315 	stw	zero,12(r17)
  803230:	003fe806 	br	8031d4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

00803234 <_Z15get_ttype_entryP16lsda_header_infoj>:
  803234:	defffe04 	addi	sp,sp,-8
  803238:	dfc00115 	stw	ra,4(sp)
  80323c:	21c00503 	ldbu	r7,20(r4)
  803240:	00803fc4 	movi	r2,255
  803244:	38801a26 	beq	r7,r2,8032b0 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
  803248:	38c001cc 	andi	r3,r7,7
  80324c:	00800084 	movi	r2,2
  803250:	18801326 	beq	r3,r2,8032a0 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
  803254:	10c0050e 	bge	r2,r3,80326c <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
  803258:	008000c4 	movi	r2,3
  80325c:	18800426 	beq	r3,r2,803270 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
  803260:	00800104 	movi	r2,4
  803264:	18801026 	beq	r3,r2,8032a8 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
  803268:	08049ec0 	call	8049ec <abort>
  80326c:	183ffe1e 	bne	r3,zero,803268 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
  803270:	2945883a 	add	r2,r5,r5
  803274:	1085883a 	add	r2,r2,r2
  803278:	21800317 	ldw	r6,12(r4)
  80327c:	21400217 	ldw	r5,8(r4)
  803280:	3809883a 	mov	r4,r7
  803284:	308dc83a 	sub	r6,r6,r2
  803288:	d80f883a 	mov	r7,sp
  80328c:	0802ed00 	call	802ed0 <_Z28read_encoded_value_with_basehjPKhPj>
  803290:	d8800017 	ldw	r2,0(sp)
  803294:	dfc00117 	ldw	ra,4(sp)
  803298:	dec00204 	addi	sp,sp,8
  80329c:	f800283a 	ret
  8032a0:	2945883a 	add	r2,r5,r5
  8032a4:	003ff406 	br	803278 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  8032a8:	280490fa 	slli	r2,r5,3
  8032ac:	003ff206 	br	803278 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  8032b0:	0005883a 	mov	r2,zero
  8032b4:	003ff006 	br	803278 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

008032b8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
  8032b8:	20800317 	ldw	r2,12(r4)
  8032bc:	defffa04 	addi	sp,sp,-24
  8032c0:	dc800415 	stw	r18,16(sp)
  8032c4:	11c5c83a 	sub	r2,r2,r7
  8032c8:	dc400315 	stw	r17,12(sp)
  8032cc:	dc000215 	stw	r16,8(sp)
  8032d0:	dfc00515 	stw	ra,20(sp)
  8032d4:	2023883a 	mov	r17,r4
  8032d8:	d9800115 	stw	r6,4(sp)
  8032dc:	2825883a 	mov	r18,r5
  8032e0:	143fffc4 	addi	r16,r2,-1
  8032e4:	8009883a 	mov	r4,r16
  8032e8:	d80b883a 	mov	r5,sp
  8032ec:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  8032f0:	1021883a 	mov	r16,r2
  8032f4:	d8800017 	ldw	r2,0(sp)
  8032f8:	8809883a 	mov	r4,r17
  8032fc:	100b883a 	mov	r5,r2
  803300:	10000826 	beq	r2,zero,803324 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
  803304:	08032340 	call	803234 <_Z15get_ttype_entryP16lsda_header_infoj>
  803308:	1009883a 	mov	r4,r2
  80330c:	900b883a 	mov	r5,r18
  803310:	d9800104 	addi	r6,sp,4
  803314:	0802e340 	call	802e34 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  803318:	10803fcc 	andi	r2,r2,255
  80331c:	103ff126 	beq	r2,zero,8032e4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
  803320:	00800044 	movi	r2,1
  803324:	dfc00517 	ldw	ra,20(sp)
  803328:	dc800417 	ldw	r18,16(sp)
  80332c:	dc400317 	ldw	r17,12(sp)
  803330:	dc000217 	ldw	r16,8(sp)
  803334:	dec00604 	addi	sp,sp,24
  803338:	f800283a 	ret

0080333c <__cxa_call_unexpected>:
  80333c:	deffe204 	addi	sp,sp,-120
  803340:	00802034 	movhi	r2,128
  803344:	108d2f04 	addi	r2,r2,13500
  803348:	00c02074 	movhi	r3,129
  80334c:	18c7f804 	addi	r3,r3,8160
  803350:	d8800c15 	stw	r2,48(sp)
  803354:	d9001815 	stw	r4,96(sp)
  803358:	00802034 	movhi	r2,128
  80335c:	108cf104 	addi	r2,r2,13252
  803360:	d9000604 	addi	r4,sp,24
  803364:	d8c00d15 	stw	r3,52(sp)
  803368:	dfc01d15 	stw	ra,116(sp)
  80336c:	d8800f15 	stw	r2,60(sp)
  803370:	df001c15 	stw	fp,112(sp)
  803374:	ddc01b15 	stw	r23,108(sp)
  803378:	dec00e15 	stw	sp,56(sp)
  80337c:	dec01015 	stw	sp,64(sp)
  803380:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  803384:	d9001817 	ldw	r4,96(sp)
  803388:	0802c880 	call	802c88 <__cxa_begin_catch>
  80338c:	d8801817 	ldw	r2,96(sp)
  803390:	10fff504 	addi	r3,r2,-44
  803394:	18800917 	ldw	r2,36(r3)
  803398:	19400617 	ldw	r5,24(r3)
  80339c:	19000217 	ldw	r4,8(r3)
  8033a0:	d8800215 	stw	r2,8(sp)
  8033a4:	18800817 	ldw	r2,32(r3)
  8033a8:	18c00317 	ldw	r3,12(r3)
  8033ac:	d9401615 	stw	r5,88(sp)
  8033b0:	d8801715 	stw	r2,92(sp)
  8033b4:	00800084 	movi	r2,2
  8033b8:	d8c01515 	stw	r3,84(sp)
  8033bc:	d8800715 	stw	r2,28(sp)
  8033c0:	0803e140 	call	803e14 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  8033c4:	d8800717 	ldw	r2,28(sp)
  8033c8:	d8c00817 	ldw	r3,32(sp)
  8033cc:	d8801a15 	stw	r2,104(sp)
  8033d0:	d9401a17 	ldw	r5,104(sp)
  8033d4:	00800044 	movi	r2,1
  8033d8:	d8c01915 	stw	r3,100(sp)
  8033dc:	28800826 	beq	r5,r2,803400 <__cxa_call_unexpected+0xc4>
  8033e0:	d8000715 	stw	zero,28(sp)
  8033e4:	0802be40 	call	802be4 <__cxa_end_catch>
  8033e8:	d8000715 	stw	zero,28(sp)
  8033ec:	0802be40 	call	802be4 <__cxa_end_catch>
  8033f0:	d9001917 	ldw	r4,100(sp)
  8033f4:	00bfffc4 	movi	r2,-1
  8033f8:	d8800715 	stw	r2,28(sp)
  8033fc:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  803400:	d9001917 	ldw	r4,100(sp)
  803404:	0802c880 	call	802c88 <__cxa_begin_catch>
  803408:	0803d200 	call	803d20 <__cxa_get_globals_fast>
  80340c:	10800017 	ldw	r2,0(r2)
  803410:	d8c01a17 	ldw	r3,104(sp)
  803414:	0009883a 	mov	r4,zero
  803418:	11401004 	addi	r5,r2,64
  80341c:	d9401315 	stw	r5,76(sp)
  803420:	d8801415 	stw	r2,80(sp)
  803424:	d8c00715 	stw	r3,28(sp)
  803428:	d9401717 	ldw	r5,92(sp)
  80342c:	d80d883a 	mov	r6,sp
  803430:	08031340 	call	803134 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  803434:	d8801417 	ldw	r2,80(sp)
  803438:	d809883a 	mov	r4,sp
  80343c:	d9801317 	ldw	r6,76(sp)
  803440:	11400017 	ldw	r5,0(r2)
  803444:	d9c01617 	ldw	r7,88(sp)
  803448:	08032b80 	call	8032b8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  80344c:	10803fcc 	andi	r2,r2,255
  803450:	1000151e 	bne	r2,zero,8034a8 <__cxa_call_unexpected+0x16c>
  803454:	d8c01a17 	ldw	r3,104(sp)
  803458:	d809883a 	mov	r4,sp
  80345c:	01402074 	movhi	r5,129
  803460:	2948c104 	addi	r5,r5,8964
  803464:	d8c00715 	stw	r3,28(sp)
  803468:	000d883a 	mov	r6,zero
  80346c:	d9c01617 	ldw	r7,88(sp)
  803470:	08032b80 	call	8032b8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  803474:	10803fcc 	andi	r2,r2,255
  803478:	10000c26 	beq	r2,zero,8034ac <__cxa_call_unexpected+0x170>
  80347c:	01000104 	movi	r4,4
  803480:	08041080 	call	804108 <__cxa_allocate_exception>
  803484:	1009883a 	mov	r4,r2
  803488:	00802074 	movhi	r2,129
  80348c:	1088b404 	addi	r2,r2,8912
  803490:	20800015 	stw	r2,0(r4)
  803494:	01402074 	movhi	r5,129
  803498:	2948c104 	addi	r5,r5,8964
  80349c:	01802034 	movhi	r6,128
  8034a0:	318ffd04 	addi	r6,r6,16372
  8034a4:	0802a480 	call	802a48 <__cxa_throw>
  8034a8:	08029d40 	call	8029d4 <__cxa_rethrow>
  8034ac:	d9401a17 	ldw	r5,104(sp)
  8034b0:	d9001517 	ldw	r4,84(sp)
  8034b4:	d9400715 	stw	r5,28(sp)
  8034b8:	0803d580 	call	803d58 <_ZN10__cxxabiv111__terminateEPFvvE>

008034bc <__gxx_personality_sj0>:
  8034bc:	deffd304 	addi	sp,sp,-180
  8034c0:	00802034 	movhi	r2,128
  8034c4:	108e5604 	addi	r2,r2,14680
  8034c8:	00c02074 	movhi	r3,129
  8034cc:	18c7fc04 	addi	r3,r3,8176
  8034d0:	d8801315 	stw	r2,76(sp)
  8034d4:	d9002315 	stw	r4,140(sp)
  8034d8:	00802034 	movhi	r2,128
  8034dc:	108d2f04 	addi	r2,r2,13500
  8034e0:	d9000a04 	addi	r4,sp,40
  8034e4:	d8801015 	stw	r2,64(sp)
  8034e8:	d8c01115 	stw	r3,68(sp)
  8034ec:	dfc02c15 	stw	ra,176(sp)
  8034f0:	df002b15 	stw	fp,172(sp)
  8034f4:	ddc02a15 	stw	r23,168(sp)
  8034f8:	dec01215 	stw	sp,72(sp)
  8034fc:	dec01415 	stw	sp,80(sp)
  803500:	d9802515 	stw	r6,148(sp)
  803504:	d9402415 	stw	r5,144(sp)
  803508:	d9c02615 	stw	r7,152(sp)
  80350c:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  803510:	d8c02317 	ldw	r3,140(sp)
  803514:	00800044 	movi	r2,1
  803518:	18800a26 	beq	r3,r2,803544 <__gxx_personality_sj0+0x88>
  80351c:	010000c4 	movi	r4,3
  803520:	d9002215 	stw	r4,136(sp)
  803524:	d9000a04 	addi	r4,sp,40
  803528:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  80352c:	d8802217 	ldw	r2,136(sp)
  803530:	dfc02c17 	ldw	ra,176(sp)
  803534:	df002b17 	ldw	fp,172(sp)
  803538:	ddc02a17 	ldw	r23,168(sp)
  80353c:	dec02d04 	addi	sp,sp,180
  803540:	f800283a 	ret
  803544:	d9402d17 	ldw	r5,180(sp)
  803548:	d9002517 	ldw	r4,148(sp)
  80354c:	0007883a 	mov	r3,zero
  803550:	28800504 	addi	r2,r5,20
  803554:	d8800015 	stw	r2,0(sp)
  803558:	28bff504 	addi	r2,r5,-44
  80355c:	d8801a15 	stw	r2,104(sp)
  803560:	0090caf4 	movhi	r2,17195
  803564:	108ac004 	addi	r2,r2,11008
  803568:	2080ad26 	beq	r4,r2,803820 <__gxx_personality_sj0+0x364>
  80356c:	d8c02105 	stb	r3,132(sp)
  803570:	d8c02417 	ldw	r3,144(sp)
  803574:	00800184 	movi	r2,6
  803578:	1880281e 	bne	r3,r2,80361c <__gxx_personality_sj0+0x160>
  80357c:	d8802103 	ldbu	r2,132(sp)
  803580:	10002626 	beq	r2,zero,80361c <__gxx_personality_sj0+0x160>
  803584:	d9001a17 	ldw	r4,104(sp)
  803588:	d9401a17 	ldw	r5,104(sp)
  80358c:	d8801a17 	ldw	r2,104(sp)
  803590:	21000917 	ldw	r4,36(r4)
  803594:	29400617 	ldw	r5,24(r5)
  803598:	10800817 	ldw	r2,32(r2)
  80359c:	d9001d15 	stw	r4,116(sp)
  8035a0:	d9401b15 	stw	r5,108(sp)
  8035a4:	d8802015 	stw	r2,128(sp)
  8035a8:	2000ad1e 	bne	r4,zero,803860 <__gxx_personality_sj0+0x3a4>
  8035ac:	01000044 	movi	r4,1
  8035b0:	00800044 	movi	r2,1
  8035b4:	2080e126 	beq	r4,r2,80393c <__gxx_personality_sj0+0x480>
  8035b8:	d8801b17 	ldw	r2,108(sp)
  8035bc:	1000d316 	blt	r2,zero,80390c <__gxx_personality_sj0+0x450>
  8035c0:	d9802d17 	ldw	r6,180(sp)
  8035c4:	d9002e17 	ldw	r4,184(sp)
  8035c8:	00bfffc4 	movi	r2,-1
  8035cc:	000b883a 	mov	r5,zero
  8035d0:	d8800b15 	stw	r2,44(sp)
  8035d4:	08044ec0 	call	8044ec <_Unwind_SetGR>
  8035d8:	d9801b17 	ldw	r6,108(sp)
  8035dc:	d9002e17 	ldw	r4,184(sp)
  8035e0:	01400044 	movi	r5,1
  8035e4:	08044ec0 	call	8044ec <_Unwind_SetGR>
  8035e8:	d9002e17 	ldw	r4,184(sp)
  8035ec:	d9401d17 	ldw	r5,116(sp)
  8035f0:	08045280 	call	804528 <_Unwind_SetIP>
  8035f4:	010001c4 	movi	r4,7
  8035f8:	d9002215 	stw	r4,136(sp)
  8035fc:	d9000a04 	addi	r4,sp,40
  803600:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  803604:	d8802217 	ldw	r2,136(sp)
  803608:	dfc02c17 	ldw	ra,176(sp)
  80360c:	df002b17 	ldw	fp,172(sp)
  803610:	ddc02a17 	ldw	r23,168(sp)
  803614:	dec02d04 	addi	sp,sp,180
  803618:	f800283a 	ret
  80361c:	d9002e17 	ldw	r4,184(sp)
  803620:	00ffffc4 	movi	r3,-1
  803624:	d8c00b15 	stw	r3,44(sp)
  803628:	08045380 	call	804538 <_Unwind_GetLanguageSpecificData>
  80362c:	10007226 	beq	r2,zero,8037f8 <__gxx_personality_sj0+0x33c>
  803630:	d9002e17 	ldw	r4,184(sp)
  803634:	d9800404 	addi	r6,sp,16
  803638:	100b883a 	mov	r5,r2
  80363c:	d8802015 	stw	r2,128(sp)
  803640:	08031340 	call	803134 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  803644:	d9000903 	ldbu	r4,36(sp)
  803648:	d9402e17 	ldw	r5,184(sp)
  80364c:	d8801e15 	stw	r2,120(sp)
  803650:	08030a40 	call	8030a4 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  803654:	d9002e17 	ldw	r4,184(sp)
  803658:	d8800615 	stw	r2,24(sp)
  80365c:	08045040 	call	804504 <_Unwind_GetIP>
  803660:	10bfffc4 	addi	r2,r2,-1
  803664:	d8801c15 	stw	r2,112(sp)
  803668:	10006316 	blt	r2,zero,8037f8 <__gxx_personality_sj0+0x33c>
  80366c:	10001b1e 	bne	r2,zero,8036dc <__gxx_personality_sj0+0x220>
  803670:	01000044 	movi	r4,1
  803674:	d8001f15 	stw	zero,124(sp)
  803678:	d8001d15 	stw	zero,116(sp)
  80367c:	d8001b15 	stw	zero,108(sp)
  803680:	d9402417 	ldw	r5,144(sp)
  803684:	00c00044 	movi	r3,1
  803688:	28c4703a 	and	r2,r5,r3
  80368c:	1005003a 	cmpeq	r2,r2,zero
  803690:	10006a1e 	bne	r2,zero,80383c <__gxx_personality_sj0+0x380>
  803694:	00800084 	movi	r2,2
  803698:	20805726 	beq	r4,r2,8037f8 <__gxx_personality_sj0+0x33c>
  80369c:	d8802103 	ldbu	r2,132(sp)
  8036a0:	10008626 	beq	r2,zero,8038bc <__gxx_personality_sj0+0x400>
  8036a4:	d9001a17 	ldw	r4,104(sp)
  8036a8:	d9401d17 	ldw	r5,116(sp)
  8036ac:	d8801b17 	ldw	r2,108(sp)
  8036b0:	00c00184 	movi	r3,6
  8036b4:	d8c02215 	stw	r3,136(sp)
  8036b8:	21400915 	stw	r5,36(r4)
  8036bc:	20800615 	stw	r2,24(r4)
  8036c0:	d8c01f17 	ldw	r3,124(sp)
  8036c4:	d9402017 	ldw	r5,128(sp)
  8036c8:	d8800017 	ldw	r2,0(sp)
  8036cc:	20c00715 	stw	r3,28(r4)
  8036d0:	21400815 	stw	r5,32(r4)
  8036d4:	20800a15 	stw	r2,40(r4)
  8036d8:	003f9206 	br	803524 <__gxx_personality_sj0+0x68>
  8036dc:	d9001e17 	ldw	r4,120(sp)
  8036e0:	d9400204 	addi	r5,sp,8
  8036e4:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  8036e8:	d9401c17 	ldw	r5,112(sp)
  8036ec:	1009883a 	mov	r4,r2
  8036f0:	297fffc4 	addi	r5,r5,-1
  8036f4:	d9401c15 	stw	r5,112(sp)
  8036f8:	d9400104 	addi	r5,sp,4
  8036fc:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  803700:	d8801e15 	stw	r2,120(sp)
  803704:	d8801c17 	ldw	r2,112(sp)
  803708:	103ff41e 	bne	r2,zero,8036dc <__gxx_personality_sj0+0x220>
  80370c:	d8800217 	ldw	r2,8(sp)
  803710:	d8c00117 	ldw	r3,4(sp)
  803714:	01000044 	movi	r4,1
  803718:	1105883a 	add	r2,r2,r4
  80371c:	d8801d15 	stw	r2,116(sp)
  803720:	1800541e 	bne	r3,zero,803874 <__gxx_personality_sj0+0x3b8>
  803724:	d8001f15 	stw	zero,124(sp)
  803728:	d8c01d17 	ldw	r3,116(sp)
  80372c:	18003226 	beq	r3,zero,8037f8 <__gxx_personality_sj0+0x33c>
  803730:	d9001f17 	ldw	r4,124(sp)
  803734:	20007226 	beq	r4,zero,803900 <__gxx_personality_sj0+0x444>
  803738:	d9402417 	ldw	r5,144(sp)
  80373c:	2880020c 	andi	r2,r5,8
  803740:	10006a1e 	bne	r2,zero,8038ec <__gxx_personality_sj0+0x430>
  803744:	d8802103 	ldbu	r2,132(sp)
  803748:	10006826 	beq	r2,zero,8038ec <__gxx_personality_sj0+0x430>
  80374c:	d8801a17 	ldw	r2,104(sp)
  803750:	10800017 	ldw	r2,0(r2)
  803754:	d8801915 	stw	r2,100(sp)
  803758:	d8c01917 	ldw	r3,100(sp)
  80375c:	d8001805 	stb	zero,96(sp)
  803760:	1807003a 	cmpeq	r3,r3,zero
  803764:	d8c02715 	stw	r3,156(sp)
  803768:	00000706 	br	803788 <__gxx_personality_sj0+0x2cc>
  80376c:	01000044 	movi	r4,1
  803770:	d9001805 	stb	r4,96(sp)
  803774:	d8800217 	ldw	r2,8(sp)
  803778:	10005e26 	beq	r2,zero,8038f4 <__gxx_personality_sj0+0x438>
  80377c:	d8c01717 	ldw	r3,92(sp)
  803780:	1885883a 	add	r2,r3,r2
  803784:	d8801f15 	stw	r2,124(sp)
  803788:	d9001f17 	ldw	r4,124(sp)
  80378c:	d9400104 	addi	r5,sp,4
  803790:	0802de00 	call	802de0 <_Z12read_sleb128PKhPi>
  803794:	1009883a 	mov	r4,r2
  803798:	d9400204 	addi	r5,sp,8
  80379c:	d8801715 	stw	r2,92(sp)
  8037a0:	0802de00 	call	802de0 <_Z12read_sleb128PKhPi>
  8037a4:	d8800117 	ldw	r2,4(sp)
  8037a8:	103ff026 	beq	r2,zero,80376c <__gxx_personality_sj0+0x2b0>
  8037ac:	0080360e 	bge	zero,r2,803888 <__gxx_personality_sj0+0x3cc>
  8037b0:	017fffc4 	movi	r5,-1
  8037b4:	d9400b15 	stw	r5,44(sp)
  8037b8:	d9000404 	addi	r4,sp,16
  8037bc:	100b883a 	mov	r5,r2
  8037c0:	08032340 	call	803234 <_Z15get_ttype_entryP16lsda_header_infoj>
  8037c4:	10000826 	beq	r2,zero,8037e8 <__gxx_personality_sj0+0x32c>
  8037c8:	d8c02717 	ldw	r3,156(sp)
  8037cc:	183fe91e 	bne	r3,zero,803774 <__gxx_personality_sj0+0x2b8>
  8037d0:	d9401917 	ldw	r5,100(sp)
  8037d4:	1009883a 	mov	r4,r2
  8037d8:	d80d883a 	mov	r6,sp
  8037dc:	0802e340 	call	802e34 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  8037e0:	10803fcc 	andi	r2,r2,255
  8037e4:	103fe326 	beq	r2,zero,803774 <__gxx_personality_sj0+0x2b8>
  8037e8:	d9000117 	ldw	r4,4(sp)
  8037ec:	d9001b15 	stw	r4,108(sp)
  8037f0:	010000c4 	movi	r4,3
  8037f4:	003fa206 	br	803680 <__gxx_personality_sj0+0x1c4>
  8037f8:	01400204 	movi	r5,8
  8037fc:	d9000a04 	addi	r4,sp,40
  803800:	d9402215 	stw	r5,136(sp)
  803804:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  803808:	d8802217 	ldw	r2,136(sp)
  80380c:	dfc02c17 	ldw	ra,176(sp)
  803810:	df002b17 	ldw	fp,172(sp)
  803814:	ddc02a17 	ldw	r23,168(sp)
  803818:	dec02d04 	addi	sp,sp,180
  80381c:	f800283a 	ret
  803820:	d9402617 	ldw	r5,152(sp)
  803824:	0091d3b4 	movhi	r2,18254
  803828:	109550c4 	addi	r2,r2,21827
  80382c:	28bf4f1e 	bne	r5,r2,80356c <__gxx_personality_sj0+0xb0>
  803830:	d8802317 	ldw	r2,140(sp)
  803834:	1007883a 	mov	r3,r2
  803838:	003f4c06 	br	80356c <__gxx_personality_sj0+0xb0>
  80383c:	d9402417 	ldw	r5,144(sp)
  803840:	2880020c 	andi	r2,r5,8
  803844:	10000826 	beq	r2,zero,803868 <__gxx_personality_sj0+0x3ac>
  803848:	20c04026 	beq	r4,r3,80394c <__gxx_personality_sj0+0x490>
  80384c:	d8801b17 	ldw	r2,108(sp)
  803850:	103f5b0e 	bge	r2,zero,8035c0 <__gxx_personality_sj0+0x104>
  803854:	00800084 	movi	r2,2
  803858:	d8800b15 	stw	r2,44(sp)
  80385c:	0803e240 	call	803e24 <_ZSt10unexpectedv>
  803860:	010000c4 	movi	r4,3
  803864:	003f5206 	br	8035b0 <__gxx_personality_sj0+0xf4>
  803868:	d8802103 	ldbu	r2,132(sp)
  80386c:	103f501e 	bne	r2,zero,8035b0 <__gxx_personality_sj0+0xf4>
  803870:	003ff506 	br	803848 <__gxx_personality_sj0+0x38c>
  803874:	d8800817 	ldw	r2,32(sp)
  803878:	1885883a 	add	r2,r3,r2
  80387c:	1105c83a 	sub	r2,r2,r4
  803880:	d8801f15 	stw	r2,124(sp)
  803884:	003fa806 	br	803728 <__gxx_personality_sj0+0x26c>
  803888:	d9002717 	ldw	r4,156(sp)
  80388c:	20000e1e 	bne	r4,zero,8038c8 <__gxx_personality_sj0+0x40c>
  803890:	017fffc4 	movi	r5,-1
  803894:	d9400b15 	stw	r5,44(sp)
  803898:	d9800017 	ldw	r6,0(sp)
  80389c:	d9401917 	ldw	r5,100(sp)
  8038a0:	100f883a 	mov	r7,r2
  8038a4:	d9000404 	addi	r4,sp,16
  8038a8:	08032b80 	call	8032b8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  8038ac:	1080005c 	xori	r2,r2,1
  8038b0:	10803fcc 	andi	r2,r2,255
  8038b4:	103faf26 	beq	r2,zero,803774 <__gxx_personality_sj0+0x2b8>
  8038b8:	003fcb06 	br	8037e8 <__gxx_personality_sj0+0x32c>
  8038bc:	00800184 	movi	r2,6
  8038c0:	d8802215 	stw	r2,136(sp)
  8038c4:	003f1706 	br	803524 <__gxx_personality_sj0+0x68>
  8038c8:	d9000717 	ldw	r4,28(sp)
  8038cc:	d9400304 	addi	r5,sp,12
  8038d0:	2089c83a 	sub	r4,r4,r2
  8038d4:	213fffc4 	addi	r4,r4,-1
  8038d8:	0802db00 	call	802db0 <_Z12read_uleb128PKhPj>
  8038dc:	d8c00317 	ldw	r3,12(sp)
  8038e0:	1807003a 	cmpeq	r3,r3,zero
  8038e4:	1805883a 	mov	r2,r3
  8038e8:	003ff106 	br	8038b0 <__gxx_personality_sj0+0x3f4>
  8038ec:	d8001915 	stw	zero,100(sp)
  8038f0:	003f9906 	br	803758 <__gxx_personality_sj0+0x29c>
  8038f4:	d8801803 	ldbu	r2,96(sp)
  8038f8:	1004c03a 	cmpne	r2,r2,zero
  8038fc:	103fbe26 	beq	r2,zero,8037f8 <__gxx_personality_sj0+0x33c>
  803900:	01000084 	movi	r4,2
  803904:	d8001b15 	stw	zero,108(sp)
  803908:	003f5d06 	br	803680 <__gxx_personality_sj0+0x1c4>
  80390c:	d9402017 	ldw	r5,128(sp)
  803910:	d9002e17 	ldw	r4,184(sp)
  803914:	00bfffc4 	movi	r2,-1
  803918:	d9800404 	addi	r6,sp,16
  80391c:	d8800b15 	stw	r2,44(sp)
  803920:	08031340 	call	803134 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  803924:	d9000903 	ldbu	r4,36(sp)
  803928:	d9402e17 	ldw	r5,184(sp)
  80392c:	08030a40 	call	8030a4 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  803930:	d8c01a17 	ldw	r3,104(sp)
  803934:	18800915 	stw	r2,36(r3)
  803938:	003f2106 	br	8035c0 <__gxx_personality_sj0+0x104>
  80393c:	d9002d17 	ldw	r4,180(sp)
  803940:	00bfffc4 	movi	r2,-1
  803944:	d8800b15 	stw	r2,44(sp)
  803948:	0803f3c0 	call	803f3c <__cxa_call_terminate>
  80394c:	00bfffc4 	movi	r2,-1
  803950:	d8800b15 	stw	r2,44(sp)
  803954:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  803958:	d9000b17 	ldw	r4,44(sp)
  80395c:	d9400c17 	ldw	r5,48(sp)
  803960:	00800044 	movi	r2,1
  803964:	d9002915 	stw	r4,164(sp)
  803968:	d9402815 	stw	r5,160(sp)
  80396c:	20800626 	beq	r4,r2,803988 <__gxx_personality_sj0+0x4cc>
  803970:	d8000b15 	stw	zero,44(sp)
  803974:	0802be40 	call	802be4 <__cxa_end_catch>
  803978:	d9002817 	ldw	r4,160(sp)
  80397c:	00bfffc4 	movi	r2,-1
  803980:	d8800b15 	stw	r2,44(sp)
  803984:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  803988:	d9002817 	ldw	r4,160(sp)
  80398c:	0802c880 	call	802c88 <__cxa_begin_catch>
  803990:	d8c02917 	ldw	r3,164(sp)
  803994:	d8c00b15 	stw	r3,44(sp)
  803998:	0803dfc0 	call	803dfc <_ZSt9terminatev>

0080399c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  80399c:	20c00017 	ldw	r3,0(r4)
  8039a0:	defffa04 	addi	sp,sp,-24
  8039a4:	dc000415 	stw	r16,16(sp)
  8039a8:	1a000617 	ldw	r8,24(r3)
  8039ac:	3021883a 	mov	r16,r6
  8039b0:	31800017 	ldw	r6,0(r6)
  8039b4:	00800404 	movi	r2,16
  8039b8:	dfc00515 	stw	ra,20(sp)
  8039bc:	d8800215 	stw	r2,8(sp)
  8039c0:	d8000015 	stw	zero,0(sp)
  8039c4:	d8000115 	stw	zero,4(sp)
  8039c8:	d8000315 	stw	zero,12(sp)
  8039cc:	d80f883a 	mov	r7,sp
  8039d0:	403ee83a 	callr	r8
  8039d4:	d8800117 	ldw	r2,4(sp)
  8039d8:	00c00184 	movi	r3,6
  8039dc:	0009883a 	mov	r4,zero
  8039e0:	1080018c 	andi	r2,r2,6
  8039e4:	10c0031e 	bne	r2,r3,8039f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
  8039e8:	d8800017 	ldw	r2,0(sp)
  8039ec:	01000044 	movi	r4,1
  8039f0:	80800015 	stw	r2,0(r16)
  8039f4:	2005883a 	mov	r2,r4
  8039f8:	dfc00517 	ldw	ra,20(sp)
  8039fc:	dc000417 	ldw	r16,16(sp)
  803a00:	dec00604 	addi	sp,sp,24
  803a04:	f800283a 	ret

00803a08 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
  803a08:	d8800017 	ldw	r2,0(sp)
  803a0c:	00c00184 	movi	r3,6
  803a10:	1180021e 	bne	r2,r6,803a1c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
  803a14:	1805883a 	mov	r2,r3
  803a18:	f800283a 	ret
  803a1c:	00c00044 	movi	r3,1
  803a20:	1805883a 	mov	r2,r3
  803a24:	f800283a 	ret

00803a28 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  803a28:	defffe04 	addi	sp,sp,-8
  803a2c:	00802074 	movhi	r2,129
  803a30:	10888504 	addi	r2,r2,8724
  803a34:	dc400015 	stw	r17,0(sp)
  803a38:	20800015 	stw	r2,0(r4)
  803a3c:	2023883a 	mov	r17,r4
  803a40:	dfc00115 	stw	ra,4(sp)
  803a44:	08042840 	call	804284 <_ZNSt9type_infoD2Ev>
  803a48:	8809883a 	mov	r4,r17
  803a4c:	dfc00117 	ldw	ra,4(sp)
  803a50:	dc400017 	ldw	r17,0(sp)
  803a54:	dec00204 	addi	sp,sp,8
  803a58:	0802da01 	jmpi	802da0 <_ZdlPv>

00803a5c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  803a5c:	00802074 	movhi	r2,129
  803a60:	10888504 	addi	r2,r2,8724
  803a64:	20800015 	stw	r2,0(r4)
  803a68:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00803a6c <_ZN10__cxxabiv117__class_type_infoD2Ev>:
  803a6c:	00802074 	movhi	r2,129
  803a70:	10888504 	addi	r2,r2,8724
  803a74:	20800015 	stw	r2,0(r4)
  803a78:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00803a7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  803a7c:	2811883a 	mov	r8,r5
  803a80:	20c00117 	ldw	r3,4(r4)
  803a84:	40800117 	ldw	r2,4(r8)
  803a88:	deffff04 	addi	sp,sp,-4
  803a8c:	dfc00015 	stw	ra,0(sp)
  803a90:	200b883a 	mov	r5,r4
  803a94:	02400044 	movi	r9,1
  803a98:	18800426 	beq	r3,r2,803aac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
  803a9c:	008000c4 	movi	r2,3
  803aa0:	4009883a 	mov	r4,r8
  803aa4:	0013883a 	mov	r9,zero
  803aa8:	11c0042e 	bgeu	r2,r7,803abc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
  803aac:	4805883a 	mov	r2,r9
  803ab0:	dfc00017 	ldw	ra,0(sp)
  803ab4:	dec00104 	addi	sp,sp,4
  803ab8:	f800283a 	ret
  803abc:	40800017 	ldw	r2,0(r8)
  803ac0:	10c00517 	ldw	r3,20(r2)
  803ac4:	183ee83a 	callr	r3
  803ac8:	12403fcc 	andi	r9,r2,255
  803acc:	4805883a 	mov	r2,r9
  803ad0:	dfc00017 	ldw	ra,0(sp)
  803ad4:	dec00104 	addi	sp,sp,4
  803ad8:	f800283a 	ret

00803adc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  803adc:	20c00117 	ldw	r3,4(r4)
  803ae0:	28800117 	ldw	r2,4(r5)
  803ae4:	0009883a 	mov	r4,zero
  803ae8:	1880061e 	bne	r3,r2,803b04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
  803aec:	00800184 	movi	r2,6
  803af0:	38800115 	stw	r2,4(r7)
  803af4:	00800204 	movi	r2,8
  803af8:	39800015 	stw	r6,0(r7)
  803afc:	38800315 	stw	r2,12(r7)
  803b00:	01000044 	movi	r4,1
  803b04:	2005883a 	mov	r2,r4
  803b08:	f800283a 	ret

00803b0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  803b0c:	da000017 	ldw	r8,0(sp)
  803b10:	d8800217 	ldw	r2,8(sp)
  803b14:	d9400317 	ldw	r5,12(sp)
  803b18:	40800926 	beq	r8,r2,803b40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
  803b1c:	21000117 	ldw	r4,4(r4)
  803b20:	38800117 	ldw	r2,4(r7)
  803b24:	2080041e 	bne	r4,r2,803b38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
  803b28:	00800044 	movi	r2,1
  803b2c:	28800315 	stw	r2,12(r5)
  803b30:	2a000015 	stw	r8,0(r5)
  803b34:	29800115 	stw	r6,4(r5)
  803b38:	0005883a 	mov	r2,zero
  803b3c:	f800283a 	ret
  803b40:	d8800117 	ldw	r2,4(sp)
  803b44:	21000117 	ldw	r4,4(r4)
  803b48:	10c00117 	ldw	r3,4(r2)
  803b4c:	20fff41e 	bne	r4,r3,803b20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
  803b50:	29800215 	stw	r6,8(r5)
  803b54:	003ff806 	br	803b38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

00803b58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  803b58:	defffb04 	addi	sp,sp,-20
  803b5c:	dd400315 	stw	r21,12(sp)
  803b60:	dcc00215 	stw	r19,8(sp)
  803b64:	dc400115 	stw	r17,4(sp)
  803b68:	dc000015 	stw	r16,0(sp)
  803b6c:	2823883a 	mov	r17,r5
  803b70:	3027883a 	mov	r19,r6
  803b74:	382b883a 	mov	r21,r7
  803b78:	dfc00415 	stw	ra,16(sp)
  803b7c:	2021883a 	mov	r16,r4
  803b80:	0803adc0 	call	803adc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  803b84:	10803fcc 	andi	r2,r2,255
  803b88:	880b883a 	mov	r5,r17
  803b8c:	980d883a 	mov	r6,r19
  803b90:	a80f883a 	mov	r7,r21
  803b94:	00c00044 	movi	r3,1
  803b98:	1000051e 	bne	r2,zero,803bb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
  803b9c:	81000217 	ldw	r4,8(r16)
  803ba0:	20800017 	ldw	r2,0(r4)
  803ba4:	10c00617 	ldw	r3,24(r2)
  803ba8:	183ee83a 	callr	r3
  803bac:	10c03fcc 	andi	r3,r2,255
  803bb0:	1805883a 	mov	r2,r3
  803bb4:	dfc00417 	ldw	ra,16(sp)
  803bb8:	dd400317 	ldw	r21,12(sp)
  803bbc:	dcc00217 	ldw	r19,8(sp)
  803bc0:	dc400117 	ldw	r17,4(sp)
  803bc4:	dc000017 	ldw	r16,0(sp)
  803bc8:	dec00504 	addi	sp,sp,20
  803bcc:	f800283a 	ret

00803bd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  803bd0:	defffe04 	addi	sp,sp,-8
  803bd4:	00802074 	movhi	r2,129
  803bd8:	10889c04 	addi	r2,r2,8816
  803bdc:	dc400015 	stw	r17,0(sp)
  803be0:	20800015 	stw	r2,0(r4)
  803be4:	2023883a 	mov	r17,r4
  803be8:	dfc00115 	stw	ra,4(sp)
  803bec:	0803a6c0 	call	803a6c <_ZN10__cxxabiv117__class_type_infoD2Ev>
  803bf0:	8809883a 	mov	r4,r17
  803bf4:	dfc00117 	ldw	ra,4(sp)
  803bf8:	dc400017 	ldw	r17,0(sp)
  803bfc:	dec00204 	addi	sp,sp,8
  803c00:	0802da01 	jmpi	802da0 <_ZdlPv>

00803c04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  803c04:	00802074 	movhi	r2,129
  803c08:	10889c04 	addi	r2,r2,8816
  803c0c:	20800015 	stw	r2,0(r4)
  803c10:	0803a6c1 	jmpi	803a6c <_ZN10__cxxabiv117__class_type_infoD2Ev>

00803c14 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
  803c14:	00802074 	movhi	r2,129
  803c18:	10889c04 	addi	r2,r2,8816
  803c1c:	20800015 	stw	r2,0(r4)
  803c20:	0803a6c1 	jmpi	803a6c <_ZN10__cxxabiv117__class_type_infoD2Ev>

00803c24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
  803c24:	da400017 	ldw	r9,0(sp)
  803c28:	2011883a 	mov	r8,r4
  803c2c:	49800526 	beq	r9,r6,803c44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
  803c30:	41000217 	ldw	r4,8(r8)
  803c34:	20800017 	ldw	r2,0(r4)
  803c38:	da400015 	stw	r9,0(sp)
  803c3c:	10c00817 	ldw	r3,32(r2)
  803c40:	1800683a 	jmp	r3
  803c44:	39000117 	ldw	r4,4(r7)
  803c48:	40c00117 	ldw	r3,4(r8)
  803c4c:	00800184 	movi	r2,6
  803c50:	193ff71e 	bne	r3,r4,803c30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
  803c54:	f800283a 	ret

00803c58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  803c58:	20c00117 	ldw	r3,4(r4)
  803c5c:	38800117 	ldw	r2,4(r7)
  803c60:	defffb04 	addi	sp,sp,-20
  803c64:	dfc00415 	stw	ra,16(sp)
  803c68:	da000517 	ldw	r8,20(sp)
  803c6c:	dac00617 	ldw	r11,24(sp)
  803c70:	da400717 	ldw	r9,28(sp)
  803c74:	da800817 	ldw	r10,32(sp)
  803c78:	18800c1e 	bne	r3,r2,803cac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
  803c7c:	51800115 	stw	r6,4(r10)
  803c80:	52000015 	stw	r8,0(r10)
  803c84:	28001c16 	blt	r5,zero,803cf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
  803c88:	4145883a 	add	r2,r8,r5
  803c8c:	48801e26 	beq	r9,r2,803d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
  803c90:	00800044 	movi	r2,1
  803c94:	0007883a 	mov	r3,zero
  803c98:	50800315 	stw	r2,12(r10)
  803c9c:	1805883a 	mov	r2,r3
  803ca0:	dfc00417 	ldw	ra,16(sp)
  803ca4:	dec00504 	addi	sp,sp,20
  803ca8:	f800283a 	ret
  803cac:	42400d26 	beq	r8,r9,803ce4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
  803cb0:	21000217 	ldw	r4,8(r4)
  803cb4:	20800017 	ldw	r2,0(r4)
  803cb8:	da000015 	stw	r8,0(sp)
  803cbc:	dac00115 	stw	r11,4(sp)
  803cc0:	da400215 	stw	r9,8(sp)
  803cc4:	da800315 	stw	r10,12(sp)
  803cc8:	10c00717 	ldw	r3,28(r2)
  803ccc:	183ee83a 	callr	r3
  803cd0:	10c03fcc 	andi	r3,r2,255
  803cd4:	1805883a 	mov	r2,r3
  803cd8:	dfc00417 	ldw	ra,16(sp)
  803cdc:	dec00504 	addi	sp,sp,20
  803ce0:	f800283a 	ret
  803ce4:	58800117 	ldw	r2,4(r11)
  803ce8:	18bff11e 	bne	r3,r2,803cb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
  803cec:	0007883a 	mov	r3,zero
  803cf0:	51800215 	stw	r6,8(r10)
  803cf4:	003fe906 	br	803c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  803cf8:	00bfff84 	movi	r2,-2
  803cfc:	28800426 	beq	r5,r2,803d10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
  803d00:	0007883a 	mov	r3,zero
  803d04:	003fe506 	br	803c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  803d08:	00800184 	movi	r2,6
  803d0c:	003fe106 	br	803c94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
  803d10:	00800044 	movi	r2,1
  803d14:	0007883a 	mov	r3,zero
  803d18:	50800315 	stw	r2,12(r10)
  803d1c:	003fdf06 	br	803c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

00803d20 <__cxa_get_globals_fast>:
  803d20:	d0a7bc04 	addi	r2,gp,-24848
  803d24:	f800283a 	ret

00803d28 <__cxa_get_globals>:
  803d28:	d0a7bc04 	addi	r2,gp,-24848
  803d2c:	f800283a 	ret

00803d30 <_ZSt13set_terminatePFvvE>:
  803d30:	00c02074 	movhi	r3,129
  803d34:	18d14604 	addi	r3,r3,17688
  803d38:	18800017 	ldw	r2,0(r3)
  803d3c:	19000015 	stw	r4,0(r3)
  803d40:	f800283a 	ret

00803d44 <_ZSt14set_unexpectedPFvvE>:
  803d44:	00c02074 	movhi	r3,129
  803d48:	18d14704 	addi	r3,r3,17692
  803d4c:	18800017 	ldw	r2,0(r3)
  803d50:	19000015 	stw	r4,0(r3)
  803d54:	f800283a 	ret

00803d58 <_ZN10__cxxabiv111__terminateEPFvvE>:
  803d58:	deffed04 	addi	sp,sp,-76
  803d5c:	00802034 	movhi	r2,128
  803d60:	108d2f04 	addi	r2,r2,13500
  803d64:	d8800615 	stw	r2,24(sp)
  803d68:	00c02074 	movhi	r3,129
  803d6c:	18c80004 	addi	r3,r3,8192
  803d70:	00802034 	movhi	r2,128
  803d74:	108f6d04 	addi	r2,r2,15796
  803d78:	d9000d15 	stw	r4,52(sp)
  803d7c:	d809883a 	mov	r4,sp
  803d80:	d8800915 	stw	r2,36(sp)
  803d84:	dfc01215 	stw	ra,72(sp)
  803d88:	df001115 	stw	fp,68(sp)
  803d8c:	ddc01015 	stw	r23,64(sp)
  803d90:	d8c00715 	stw	r3,28(sp)
  803d94:	dec00815 	stw	sp,32(sp)
  803d98:	dec00a15 	stw	sp,40(sp)
  803d9c:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  803da0:	00800084 	movi	r2,2
  803da4:	d8800115 	stw	r2,4(sp)
  803da8:	d8800d17 	ldw	r2,52(sp)
  803dac:	103ee83a 	callr	r2
  803db0:	08049ec0 	call	8049ec <abort>
  803db4:	d8800117 	ldw	r2,4(sp)
  803db8:	d8c00217 	ldw	r3,8(sp)
  803dbc:	d8800f15 	stw	r2,60(sp)
  803dc0:	d8c00e15 	stw	r3,56(sp)
  803dc4:	d8c00f17 	ldw	r3,60(sp)
  803dc8:	00800044 	movi	r2,1
  803dcc:	18800626 	beq	r3,r2,803de8 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
  803dd0:	d8000115 	stw	zero,4(sp)
  803dd4:	0802be40 	call	802be4 <__cxa_end_catch>
  803dd8:	d9000e17 	ldw	r4,56(sp)
  803ddc:	00bfffc4 	movi	r2,-1
  803de0:	d8800115 	stw	r2,4(sp)
  803de4:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  803de8:	d9000e17 	ldw	r4,56(sp)
  803dec:	0802c880 	call	802c88 <__cxa_begin_catch>
  803df0:	d8c00f17 	ldw	r3,60(sp)
  803df4:	d8c00115 	stw	r3,4(sp)
  803df8:	08049ec0 	call	8049ec <abort>

00803dfc <_ZSt9terminatev>:
  803dfc:	00802074 	movhi	r2,129
  803e00:	10914604 	addi	r2,r2,17688
  803e04:	11000017 	ldw	r4,0(r2)
  803e08:	deffff04 	addi	sp,sp,-4
  803e0c:	dfc00015 	stw	ra,0(sp)
  803e10:	0803d580 	call	803d58 <_ZN10__cxxabiv111__terminateEPFvvE>

00803e14 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  803e14:	deffff04 	addi	sp,sp,-4
  803e18:	dfc00015 	stw	ra,0(sp)
  803e1c:	203ee83a 	callr	r4
  803e20:	0803dfc0 	call	803dfc <_ZSt9terminatev>

00803e24 <_ZSt10unexpectedv>:
  803e24:	00802074 	movhi	r2,129
  803e28:	10914704 	addi	r2,r2,17692
  803e2c:	11000017 	ldw	r4,0(r2)
  803e30:	deffff04 	addi	sp,sp,-4
  803e34:	dfc00015 	stw	ra,0(sp)
  803e38:	0803e140 	call	803e14 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00803e3c <_Znwm>:
  803e3c:	deffee04 	addi	sp,sp,-72
  803e40:	00802034 	movhi	r2,128
  803e44:	108d2f04 	addi	r2,r2,13500
  803e48:	d8800615 	stw	r2,24(sp)
  803e4c:	00c02074 	movhi	r3,129
  803e50:	18c80404 	addi	r3,r3,8208
  803e54:	00802034 	movhi	r2,128
  803e58:	108fc604 	addi	r2,r2,16152
  803e5c:	d9000e15 	stw	r4,56(sp)
  803e60:	d809883a 	mov	r4,sp
  803e64:	d8800915 	stw	r2,36(sp)
  803e68:	dfc01115 	stw	ra,68(sp)
  803e6c:	df001015 	stw	fp,64(sp)
  803e70:	ddc00f15 	stw	r23,60(sp)
  803e74:	d8c00715 	stw	r3,28(sp)
  803e78:	dec00815 	stw	sp,32(sp)
  803e7c:	dec00a15 	stw	sp,40(sp)
  803e80:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  803e84:	d8800e17 	ldw	r2,56(sp)
  803e88:	10000a1e 	bne	r2,zero,803eb4 <_Znwm+0x78>
  803e8c:	00800044 	movi	r2,1
  803e90:	d8800e15 	stw	r2,56(sp)
  803e94:	00000706 	br	803eb4 <_Znwm+0x78>
  803e98:	00802074 	movhi	r2,129
  803e9c:	1098ee04 	addi	r2,r2,25528
  803ea0:	10c00017 	ldw	r3,0(r2)
  803ea4:	18000f26 	beq	r3,zero,803ee4 <_Znwm+0xa8>
  803ea8:	00800044 	movi	r2,1
  803eac:	d8800115 	stw	r2,4(sp)
  803eb0:	183ee83a 	callr	r3
  803eb4:	d9000e17 	ldw	r4,56(sp)
  803eb8:	0804a180 	call	804a18 <malloc>
  803ebc:	d8800d15 	stw	r2,52(sp)
  803ec0:	103ff526 	beq	r2,zero,803e98 <_Znwm+0x5c>
  803ec4:	d809883a 	mov	r4,sp
  803ec8:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  803ecc:	d8800d17 	ldw	r2,52(sp)
  803ed0:	dfc01117 	ldw	ra,68(sp)
  803ed4:	df001017 	ldw	fp,64(sp)
  803ed8:	ddc00f17 	ldw	r23,60(sp)
  803edc:	dec01204 	addi	sp,sp,72
  803ee0:	f800283a 	ret
  803ee4:	01000104 	movi	r4,4
  803ee8:	08041080 	call	804108 <__cxa_allocate_exception>
  803eec:	1009883a 	mov	r4,r2
  803ef0:	00802074 	movhi	r2,129
  803ef4:	10896704 	addi	r2,r2,9628
  803ef8:	20800015 	stw	r2,0(r4)
  803efc:	00c00044 	movi	r3,1
  803f00:	d8c00115 	stw	r3,4(sp)
  803f04:	01402074 	movhi	r5,129
  803f08:	29496e04 	addi	r5,r5,9656
  803f0c:	01802034 	movhi	r6,128
  803f10:	31902a04 	addi	r6,r6,16552
  803f14:	0802a480 	call	802a48 <__cxa_throw>
  803f18:	d8800317 	ldw	r2,12(sp)
  803f1c:	00ffffc4 	movi	r3,-1
  803f20:	d9000217 	ldw	r4,8(sp)
  803f24:	10c00226 	beq	r2,r3,803f30 <_Znwm+0xf4>
  803f28:	d8c00115 	stw	r3,4(sp)
  803f2c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  803f30:	00bfffc4 	movi	r2,-1
  803f34:	d8800115 	stw	r2,4(sp)
  803f38:	080333c0 	call	80333c <__cxa_call_unexpected>

00803f3c <__cxa_call_terminate>:
  803f3c:	defffe04 	addi	sp,sp,-8
  803f40:	dc000015 	stw	r16,0(sp)
  803f44:	dfc00115 	stw	ra,4(sp)
  803f48:	2021883a 	mov	r16,r4
  803f4c:	20000626 	beq	r4,zero,803f68 <__cxa_call_terminate+0x2c>
  803f50:	0802c880 	call	802c88 <__cxa_begin_catch>
  803f54:	80c00017 	ldw	r3,0(r16)
  803f58:	0090caf4 	movhi	r2,17195
  803f5c:	108ac004 	addi	r2,r2,11008
  803f60:	81000117 	ldw	r4,4(r16)
  803f64:	18800126 	beq	r3,r2,803f6c <__cxa_call_terminate+0x30>
  803f68:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  803f6c:	0091d3b4 	movhi	r2,18254
  803f70:	109550c4 	addi	r2,r2,21827
  803f74:	20bffc1e 	bne	r4,r2,803f68 <__cxa_call_terminate+0x2c>
  803f78:	813ff817 	ldw	r4,-32(r16)
  803f7c:	0803d580 	call	803d58 <_ZN10__cxxabiv111__terminateEPFvvE>

00803f80 <_ZNKSt9exception4whatEv>:
  803f80:	20800017 	ldw	r2,0(r4)
  803f84:	10ffff17 	ldw	r3,-4(r2)
  803f88:	18800117 	ldw	r2,4(r3)
  803f8c:	f800283a 	ret

00803f90 <_ZNSt9exceptionD0Ev>:
  803f90:	00802074 	movhi	r2,129
  803f94:	1088b904 	addi	r2,r2,8932
  803f98:	20800015 	stw	r2,0(r4)
  803f9c:	0802da01 	jmpi	802da0 <_ZdlPv>

00803fa0 <_ZNSt9exceptionD1Ev>:
  803fa0:	00802074 	movhi	r2,129
  803fa4:	1088b904 	addi	r2,r2,8932
  803fa8:	20800015 	stw	r2,0(r4)
  803fac:	f800283a 	ret

00803fb0 <_ZNSt9exceptionD2Ev>:
  803fb0:	00802074 	movhi	r2,129
  803fb4:	1088b904 	addi	r2,r2,8932
  803fb8:	20800015 	stw	r2,0(r4)
  803fbc:	f800283a 	ret

00803fc0 <_ZNSt13bad_exceptionD0Ev>:
  803fc0:	defffe04 	addi	sp,sp,-8
  803fc4:	00802074 	movhi	r2,129
  803fc8:	1088b404 	addi	r2,r2,8912
  803fcc:	dc400015 	stw	r17,0(sp)
  803fd0:	20800015 	stw	r2,0(r4)
  803fd4:	2023883a 	mov	r17,r4
  803fd8:	dfc00115 	stw	ra,4(sp)
  803fdc:	0803fb00 	call	803fb0 <_ZNSt9exceptionD2Ev>
  803fe0:	8809883a 	mov	r4,r17
  803fe4:	dfc00117 	ldw	ra,4(sp)
  803fe8:	dc400017 	ldw	r17,0(sp)
  803fec:	dec00204 	addi	sp,sp,8
  803ff0:	0802da01 	jmpi	802da0 <_ZdlPv>

00803ff4 <_ZNSt13bad_exceptionD1Ev>:
  803ff4:	00802074 	movhi	r2,129
  803ff8:	1088b404 	addi	r2,r2,8912
  803ffc:	20800015 	stw	r2,0(r4)
  804000:	0803fb01 	jmpi	803fb0 <_ZNSt9exceptionD2Ev>

00804004 <_ZNSt13bad_exceptionD2Ev>:
  804004:	00802074 	movhi	r2,129
  804008:	1088b404 	addi	r2,r2,8912
  80400c:	20800015 	stw	r2,0(r4)
  804010:	0803fb01 	jmpi	803fb0 <_ZNSt9exceptionD2Ev>

00804014 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
  804014:	defffe04 	addi	sp,sp,-8
  804018:	00802074 	movhi	r2,129
  80401c:	1088ca04 	addi	r2,r2,9000
  804020:	dc400015 	stw	r17,0(sp)
  804024:	20800015 	stw	r2,0(r4)
  804028:	2023883a 	mov	r17,r4
  80402c:	dfc00115 	stw	ra,4(sp)
  804030:	08042840 	call	804284 <_ZNSt9type_infoD2Ev>
  804034:	8809883a 	mov	r4,r17
  804038:	dfc00117 	ldw	ra,4(sp)
  80403c:	dc400017 	ldw	r17,0(sp)
  804040:	dec00204 	addi	sp,sp,8
  804044:	0802da01 	jmpi	802da0 <_ZdlPv>

00804048 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
  804048:	00802074 	movhi	r2,129
  80404c:	1088ca04 	addi	r2,r2,9000
  804050:	20800015 	stw	r2,0(r4)
  804054:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00804058 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
  804058:	00802074 	movhi	r2,129
  80405c:	1088ca04 	addi	r2,r2,9000
  804060:	20800015 	stw	r2,0(r4)
  804064:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00804068 <_ZSt15set_new_handlerPFvvE>:
  804068:	d0a7be17 	ldw	r2,-24840(gp)
  80406c:	d127be15 	stw	r4,-24840(gp)
  804070:	f800283a 	ret

00804074 <_ZNSt9bad_allocD0Ev>:
  804074:	defffe04 	addi	sp,sp,-8
  804078:	00802074 	movhi	r2,129
  80407c:	10896704 	addi	r2,r2,9628
  804080:	dc400015 	stw	r17,0(sp)
  804084:	20800015 	stw	r2,0(r4)
  804088:	2023883a 	mov	r17,r4
  80408c:	dfc00115 	stw	ra,4(sp)
  804090:	0803fb00 	call	803fb0 <_ZNSt9exceptionD2Ev>
  804094:	8809883a 	mov	r4,r17
  804098:	dfc00117 	ldw	ra,4(sp)
  80409c:	dc400017 	ldw	r17,0(sp)
  8040a0:	dec00204 	addi	sp,sp,8
  8040a4:	0802da01 	jmpi	802da0 <_ZdlPv>

008040a8 <_ZNSt9bad_allocD1Ev>:
  8040a8:	00802074 	movhi	r2,129
  8040ac:	10896704 	addi	r2,r2,9628
  8040b0:	20800015 	stw	r2,0(r4)
  8040b4:	0803fb01 	jmpi	803fb0 <_ZNSt9exceptionD2Ev>

008040b8 <_ZNSt9bad_allocD2Ev>:
  8040b8:	00802074 	movhi	r2,129
  8040bc:	10896704 	addi	r2,r2,9628
  8040c0:	20800015 	stw	r2,0(r4)
  8040c4:	0803fb01 	jmpi	803fb0 <_ZNSt9exceptionD2Ev>

008040c8 <__cxa_free_exception>:
  8040c8:	2007883a 	mov	r3,r4
  8040cc:	00802074 	movhi	r2,129
  8040d0:	1098fe04 	addi	r2,r2,25592
  8040d4:	213ff004 	addi	r4,r4,-64
  8040d8:	11420004 	addi	r5,r2,2048
  8040dc:	18800336 	bltu	r3,r2,8040ec <__cxa_free_exception+0x24>
  8040e0:	1885c83a 	sub	r2,r3,r2
  8040e4:	1004d27a 	srli	r2,r2,9
  8040e8:	19400136 	bltu	r3,r5,8040f0 <__cxa_free_exception+0x28>
  8040ec:	0804a041 	jmpi	804a04 <free>
  8040f0:	00ffff84 	movi	r3,-2
  8040f4:	1886183a 	rol	r3,r3,r2
  8040f8:	d0a7bf17 	ldw	r2,-24836(gp)
  8040fc:	10c4703a 	and	r2,r2,r3
  804100:	d0a7bf15 	stw	r2,-24836(gp)
  804104:	f800283a 	ret

00804108 <__cxa_allocate_exception>:
  804108:	deffed04 	addi	sp,sp,-76
  80410c:	00802034 	movhi	r2,128
  804110:	108d2f04 	addi	r2,r2,13500
  804114:	21001004 	addi	r4,r4,64
  804118:	00c02074 	movhi	r3,129
  80411c:	18c80904 	addi	r3,r3,8228
  804120:	d8800615 	stw	r2,24(sp)
  804124:	d9000d15 	stw	r4,52(sp)
  804128:	00802034 	movhi	r2,128
  80412c:	10908604 	addi	r2,r2,16920
  804130:	d809883a 	mov	r4,sp
  804134:	dfc01215 	stw	ra,72(sp)
  804138:	d8c00715 	stw	r3,28(sp)
  80413c:	d8800915 	stw	r2,36(sp)
  804140:	df001115 	stw	fp,68(sp)
  804144:	ddc01015 	stw	r23,64(sp)
  804148:	dec00815 	stw	sp,32(sp)
  80414c:	dec00a15 	stw	sp,40(sp)
  804150:	08044a40 	call	8044a4 <_Unwind_SjLj_Register>
  804154:	d9000d17 	ldw	r4,52(sp)
  804158:	0804a180 	call	804a18 <malloc>
  80415c:	d8800e15 	stw	r2,56(sp)
  804160:	1000171e 	bne	r2,zero,8041c0 <__cxa_allocate_exception+0xb8>
  804164:	d8c00d17 	ldw	r3,52(sp)
  804168:	00808004 	movi	r2,512
  80416c:	d1e7bf17 	ldw	r7,-24836(gp)
  804170:	10c02636 	bltu	r2,r3,80420c <__cxa_allocate_exception+0x104>
  804174:	3807883a 	mov	r3,r7
  804178:	01400044 	movi	r5,1
  80417c:	1944703a 	and	r2,r3,r5
  804180:	0009883a 	mov	r4,zero
  804184:	01800104 	movi	r6,4
  804188:	10000526 	beq	r2,zero,8041a0 <__cxa_allocate_exception+0x98>
  80418c:	2149883a 	add	r4,r4,r5
  804190:	21801e26 	beq	r4,r6,80420c <__cxa_allocate_exception+0x104>
  804194:	1806d07a 	srli	r3,r3,1
  804198:	1944703a 	and	r2,r3,r5
  80419c:	103ffb1e 	bne	r2,zero,80418c <__cxa_allocate_exception+0x84>
  8041a0:	2904983a 	sll	r2,r5,r4
  8041a4:	2008927a 	slli	r4,r4,9
  8041a8:	00c02074 	movhi	r3,129
  8041ac:	18d8fe04 	addi	r3,r3,25592
  8041b0:	3884b03a 	or	r2,r7,r2
  8041b4:	20c9883a 	add	r4,r4,r3
  8041b8:	d9000e15 	stw	r4,56(sp)
  8041bc:	d0a7bf15 	stw	r2,-24836(gp)
  8041c0:	0803d280 	call	803d28 <__cxa_get_globals>
  8041c4:	10c00117 	ldw	r3,4(r2)
  8041c8:	d9000e17 	ldw	r4,56(sp)
  8041cc:	000b883a 	mov	r5,zero
  8041d0:	18c00044 	addi	r3,r3,1
  8041d4:	10c00115 	stw	r3,4(r2)
  8041d8:	01801004 	movi	r6,64
  8041dc:	080516c0 	call	80516c <memset>
  8041e0:	d8800e17 	ldw	r2,56(sp)
  8041e4:	d809883a 	mov	r4,sp
  8041e8:	10801004 	addi	r2,r2,64
  8041ec:	d8800f15 	stw	r2,60(sp)
  8041f0:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  8041f4:	d8800f17 	ldw	r2,60(sp)
  8041f8:	dfc01217 	ldw	ra,72(sp)
  8041fc:	df001117 	ldw	fp,68(sp)
  804200:	ddc01017 	ldw	r23,64(sp)
  804204:	dec01304 	addi	sp,sp,76
  804208:	f800283a 	ret
  80420c:	00800044 	movi	r2,1
  804210:	d8800115 	stw	r2,4(sp)
  804214:	0803dfc0 	call	803dfc <_ZSt9terminatev>
  804218:	d8800317 	ldw	r2,12(sp)
  80421c:	00ffffc4 	movi	r3,-1
  804220:	d9000217 	ldw	r4,8(sp)
  804224:	10c00226 	beq	r2,r3,804230 <__cxa_allocate_exception+0x128>
  804228:	d8c00115 	stw	r3,4(sp)
  80422c:	08047700 	call	804770 <_Unwind_SjLj_Resume>
  804230:	00bfffc4 	movi	r2,-1
  804234:	d8800115 	stw	r2,4(sp)
  804238:	080333c0 	call	80333c <__cxa_call_unexpected>

0080423c <_ZNKSt9type_info14__is_pointer_pEv>:
  80423c:	0005883a 	mov	r2,zero
  804240:	f800283a 	ret

00804244 <_ZNKSt9type_info15__is_function_pEv>:
  804244:	0005883a 	mov	r2,zero
  804248:	f800283a 	ret

0080424c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
  80424c:	20c00117 	ldw	r3,4(r4)
  804250:	28800117 	ldw	r2,4(r5)
  804254:	1885003a 	cmpeq	r2,r3,r2
  804258:	f800283a 	ret

0080425c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
  80425c:	0005883a 	mov	r2,zero
  804260:	f800283a 	ret

00804264 <_ZNSt9type_infoD0Ev>:
  804264:	00802074 	movhi	r2,129
  804268:	10897304 	addi	r2,r2,9676
  80426c:	20800015 	stw	r2,0(r4)
  804270:	0802da01 	jmpi	802da0 <_ZdlPv>

00804274 <_ZNSt9type_infoD1Ev>:
  804274:	00802074 	movhi	r2,129
  804278:	10897304 	addi	r2,r2,9676
  80427c:	20800015 	stw	r2,0(r4)
  804280:	f800283a 	ret

00804284 <_ZNSt9type_infoD2Ev>:
  804284:	00802074 	movhi	r2,129
  804288:	10897304 	addi	r2,r2,9676
  80428c:	20800015 	stw	r2,0(r4)
  804290:	f800283a 	ret

00804294 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
  804294:	00800044 	movi	r2,1
  804298:	f800283a 	ret

0080429c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
  80429c:	deffff04 	addi	sp,sp,-4
  8042a0:	3807883a 	mov	r3,r7
  8042a4:	2005883a 	mov	r2,r4
  8042a8:	01000044 	movi	r4,1
  8042ac:	dfc00015 	stw	ra,0(sp)
  8042b0:	39c00084 	addi	r7,r7,2
  8042b4:	20c00a2e 	bgeu	r4,r3,8042e0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>
  8042b8:	12000317 	ldw	r8,12(r2)
  8042bc:	40800017 	ldw	r2,0(r8)
  8042c0:	29400317 	ldw	r5,12(r5)
  8042c4:	4009883a 	mov	r4,r8
  8042c8:	10c00417 	ldw	r3,16(r2)
  8042cc:	183ee83a 	callr	r3
  8042d0:	10803fcc 	andi	r2,r2,255
  8042d4:	dfc00017 	ldw	ra,0(sp)
  8042d8:	dec00104 	addi	sp,sp,4
  8042dc:	f800283a 	ret
  8042e0:	12000317 	ldw	r8,12(r2)
  8042e4:	00802074 	movhi	r2,129
  8042e8:	10916a04 	addi	r2,r2,17832
  8042ec:	11000117 	ldw	r4,4(r2)
  8042f0:	40c00117 	ldw	r3,4(r8)
  8042f4:	193ff11e 	bne	r3,r4,8042bc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
  8042f8:	29000317 	ldw	r4,12(r5)
  8042fc:	20800017 	ldw	r2,0(r4)
  804300:	10c00317 	ldw	r3,12(r2)
  804304:	183ee83a 	callr	r3
  804308:	1080005c 	xori	r2,r2,1
  80430c:	10803fcc 	andi	r2,r2,255
  804310:	dfc00017 	ldw	ra,0(sp)
  804314:	dec00104 	addi	sp,sp,4
  804318:	f800283a 	ret

0080431c <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
  80431c:	defffe04 	addi	sp,sp,-8
  804320:	00802074 	movhi	r2,129
  804324:	10897f04 	addi	r2,r2,9724
  804328:	dc400015 	stw	r17,0(sp)
  80432c:	20800015 	stw	r2,0(r4)
  804330:	2023883a 	mov	r17,r4
  804334:	dfc00115 	stw	ra,4(sp)
  804338:	08044640 	call	804464 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  80433c:	8809883a 	mov	r4,r17
  804340:	dfc00117 	ldw	ra,4(sp)
  804344:	dc400017 	ldw	r17,0(sp)
  804348:	dec00204 	addi	sp,sp,8
  80434c:	0802da01 	jmpi	802da0 <_ZdlPv>

00804350 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
  804350:	00802074 	movhi	r2,129
  804354:	10897f04 	addi	r2,r2,9724
  804358:	20800015 	stw	r2,0(r4)
  80435c:	08044641 	jmpi	804464 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00804360 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
  804360:	00802074 	movhi	r2,129
  804364:	10897f04 	addi	r2,r2,9724
  804368:	20800015 	stw	r2,0(r4)
  80436c:	08044641 	jmpi	804464 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00804370 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
  804370:	20c00117 	ldw	r3,4(r4)
  804374:	28800117 	ldw	r2,4(r5)
  804378:	deffff04 	addi	sp,sp,-4
  80437c:	dfc00015 	stw	ra,0(sp)
  804380:	02000044 	movi	r8,1
  804384:	3819883a 	mov	r12,r7
  804388:	18801526 	beq	r3,r2,8043e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
  80438c:	28800017 	ldw	r2,0(r5)
  804390:	23400017 	ldw	r13,0(r4)
  804394:	39c0004c 	andi	r7,r7,1
  804398:	127fff17 	ldw	r9,-4(r2)
  80439c:	68ffff17 	ldw	r3,-4(r13)
  8043a0:	380f003a 	cmpeq	r7,r7,zero
  8043a4:	48800117 	ldw	r2,4(r9)
  8043a8:	1a000117 	ldw	r8,4(r3)
  8043ac:	4080101e 	bne	r8,r2,8043f0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  8043b0:	38000f1e 	bne	r7,zero,8043f0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  8043b4:	21c00217 	ldw	r7,8(r4)
  8043b8:	28c00217 	ldw	r3,8(r5)
  8043bc:	01c4303a 	nor	r2,zero,r7
  8043c0:	10c4703a 	and	r2,r2,r3
  8043c4:	39c0004c 	andi	r7,r7,1
  8043c8:	1000091e 	bne	r2,zero,8043f0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  8043cc:	38000d26 	beq	r7,zero,804404 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
  8043d0:	68c00617 	ldw	r3,24(r13)
  8043d4:	600f883a 	mov	r7,r12
  8043d8:	183ee83a 	callr	r3
  8043dc:	12003fcc 	andi	r8,r2,255
  8043e0:	4005883a 	mov	r2,r8
  8043e4:	dfc00017 	ldw	ra,0(sp)
  8043e8:	dec00104 	addi	sp,sp,4
  8043ec:	f800283a 	ret
  8043f0:	0011883a 	mov	r8,zero
  8043f4:	4005883a 	mov	r2,r8
  8043f8:	dfc00017 	ldw	ra,0(sp)
  8043fc:	dec00104 	addi	sp,sp,4
  804400:	f800283a 	ret
  804404:	00bfff84 	movi	r2,-2
  804408:	68c00617 	ldw	r3,24(r13)
  80440c:	6098703a 	and	r12,r12,r2
  804410:	600f883a 	mov	r7,r12
  804414:	183ee83a 	callr	r3
  804418:	12003fcc 	andi	r8,r2,255
  80441c:	003ff006 	br	8043e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

00804420 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
  804420:	defffe04 	addi	sp,sp,-8
  804424:	00802074 	movhi	r2,129
  804428:	10899404 	addi	r2,r2,9808
  80442c:	dc400015 	stw	r17,0(sp)
  804430:	20800015 	stw	r2,0(r4)
  804434:	2023883a 	mov	r17,r4
  804438:	dfc00115 	stw	ra,4(sp)
  80443c:	08042840 	call	804284 <_ZNSt9type_infoD2Ev>
  804440:	8809883a 	mov	r4,r17
  804444:	dfc00117 	ldw	ra,4(sp)
  804448:	dc400017 	ldw	r17,0(sp)
  80444c:	dec00204 	addi	sp,sp,8
  804450:	0802da01 	jmpi	802da0 <_ZdlPv>

00804454 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
  804454:	00802074 	movhi	r2,129
  804458:	10899404 	addi	r2,r2,9808
  80445c:	20800015 	stw	r2,0(r4)
  804460:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00804464 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
  804464:	00802074 	movhi	r2,129
  804468:	10899404 	addi	r2,r2,9808
  80446c:	20800015 	stw	r2,0(r4)
  804470:	08042841 	jmpi	804284 <_ZNSt9type_infoD2Ev>

00804474 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
  804474:	21000317 	ldw	r4,12(r4)
  804478:	29400317 	ldw	r5,12(r5)
  80447c:	deffff04 	addi	sp,sp,-4
  804480:	20800017 	ldw	r2,0(r4)
  804484:	dfc00015 	stw	ra,0(sp)
  804488:	39c00084 	addi	r7,r7,2
  80448c:	10c00417 	ldw	r3,16(r2)
  804490:	183ee83a 	callr	r3
  804494:	10803fcc 	andi	r2,r2,255
  804498:	dfc00017 	ldw	ra,0(sp)
  80449c:	dec00104 	addi	sp,sp,4
  8044a0:	f800283a 	ret

008044a4 <_Unwind_SjLj_Register>:
  8044a4:	d0a7c017 	ldw	r2,-24832(gp)
  8044a8:	20800015 	stw	r2,0(r4)
  8044ac:	d127c015 	stw	r4,-24832(gp)
  8044b0:	f800283a 	ret

008044b4 <_Unwind_SjLj_Unregister>:
  8044b4:	20800017 	ldw	r2,0(r4)
  8044b8:	d0a7c015 	stw	r2,-24832(gp)
  8044bc:	f800283a 	ret

008044c0 <_Unwind_GetGR>:
  8044c0:	20800017 	ldw	r2,0(r4)
  8044c4:	294b883a 	add	r5,r5,r5
  8044c8:	294b883a 	add	r5,r5,r5
  8044cc:	288b883a 	add	r5,r5,r2
  8044d0:	28800217 	ldw	r2,8(r5)
  8044d4:	f800283a 	ret

008044d8 <_Unwind_GetCFA>:
  8044d8:	21000017 	ldw	r4,0(r4)
  8044dc:	0005883a 	mov	r2,zero
  8044e0:	20000126 	beq	r4,zero,8044e8 <_Unwind_GetCFA+0x10>
  8044e4:	20800a17 	ldw	r2,40(r4)
  8044e8:	f800283a 	ret

008044ec <_Unwind_SetGR>:
  8044ec:	20800017 	ldw	r2,0(r4)
  8044f0:	294b883a 	add	r5,r5,r5
  8044f4:	294b883a 	add	r5,r5,r5
  8044f8:	288b883a 	add	r5,r5,r2
  8044fc:	29800215 	stw	r6,8(r5)
  804500:	f800283a 	ret

00804504 <_Unwind_GetIP>:
  804504:	20c00017 	ldw	r3,0(r4)
  804508:	18800117 	ldw	r2,4(r3)
  80450c:	10800044 	addi	r2,r2,1
  804510:	f800283a 	ret

00804514 <_Unwind_GetIPInfo>:
  804514:	20c00017 	ldw	r3,0(r4)
  804518:	28000015 	stw	zero,0(r5)
  80451c:	18800117 	ldw	r2,4(r3)
  804520:	10800044 	addi	r2,r2,1
  804524:	f800283a 	ret

00804528 <_Unwind_SetIP>:
  804528:	20800017 	ldw	r2,0(r4)
  80452c:	297fffc4 	addi	r5,r5,-1
  804530:	11400115 	stw	r5,4(r2)
  804534:	f800283a 	ret

00804538 <_Unwind_GetLanguageSpecificData>:
  804538:	20c00017 	ldw	r3,0(r4)
  80453c:	18800717 	ldw	r2,28(r3)
  804540:	f800283a 	ret

00804544 <_Unwind_GetRegionStart>:
  804544:	0005883a 	mov	r2,zero
  804548:	f800283a 	ret

0080454c <_Unwind_FindEnclosingFunction>:
  80454c:	0005883a 	mov	r2,zero
  804550:	f800283a 	ret

00804554 <_Unwind_GetDataRelBase>:
  804554:	0005883a 	mov	r2,zero
  804558:	f800283a 	ret

0080455c <_Unwind_GetTextRelBase>:
  80455c:	0005883a 	mov	r2,zero
  804560:	f800283a 	ret

00804564 <_Unwind_ForcedUnwind_Phase2>:
  804564:	defff604 	addi	sp,sp,-40
  804568:	dd400815 	stw	r21,32(sp)
  80456c:	dd000715 	stw	r20,28(sp)
  804570:	25400317 	ldw	r21,12(r4)
  804574:	25000417 	ldw	r20,16(r4)
  804578:	28800017 	ldw	r2,0(r5)
  80457c:	dc800515 	stw	r18,20(sp)
  804580:	dc000315 	stw	r16,12(sp)
  804584:	2825883a 	mov	r18,r5
  804588:	2021883a 	mov	r16,r4
  80458c:	dfc00915 	stw	ra,36(sp)
  804590:	dcc00615 	stw	r19,24(sp)
  804594:	dc400415 	stw	r17,16(sp)
  804598:	00001406 	br	8045ec <_Unwind_ForcedUnwind_Phase2+0x88>
  80459c:	00800144 	movi	r2,5
  8045a0:	88802626 	beq	r17,r2,80463c <_Unwind_ForcedUnwind_Phase2+0xd8>
  8045a4:	98000c26 	beq	r19,zero,8045d8 <_Unwind_ForcedUnwind_Phase2+0x74>
  8045a8:	82000017 	ldw	r8,0(r16)
  8045ac:	dc000015 	stw	r16,0(sp)
  8045b0:	dc800115 	stw	r18,4(sp)
  8045b4:	82400117 	ldw	r9,4(r16)
  8045b8:	400d883a 	mov	r6,r8
  8045bc:	480f883a 	mov	r7,r9
  8045c0:	983ee83a 	callr	r19
  8045c4:	1023883a 	mov	r17,r2
  8045c8:	008001c4 	movi	r2,7
  8045cc:	88801b26 	beq	r17,r2,80463c <_Unwind_ForcedUnwind_Phase2+0xd8>
  8045d0:	00800204 	movi	r2,8
  8045d4:	8880181e 	bne	r17,r2,804638 <_Unwind_ForcedUnwind_Phase2+0xd4>
  8045d8:	91000017 	ldw	r4,0(r18)
  8045dc:	08044b40 	call	8044b4 <_Unwind_SjLj_Unregister>
  8045e0:	90800017 	ldw	r2,0(r18)
  8045e4:	10800017 	ldw	r2,0(r2)
  8045e8:	90800015 	stw	r2,0(r18)
  8045ec:	01400684 	movi	r5,26
  8045f0:	04400144 	movi	r17,5
  8045f4:	0027883a 	mov	r19,zero
  8045f8:	10000326 	beq	r2,zero,804608 <_Unwind_ForcedUnwind_Phase2+0xa4>
  8045fc:	14c00617 	ldw	r19,24(r2)
  804600:	0023883a 	mov	r17,zero
  804604:	01400284 	movi	r5,10
  804608:	dc000015 	stw	r16,0(sp)
  80460c:	dc800115 	stw	r18,4(sp)
  804610:	80800017 	ldw	r2,0(r16)
  804614:	dd000215 	stw	r20,8(sp)
  804618:	80c00117 	ldw	r3,4(r16)
  80461c:	01000044 	movi	r4,1
  804620:	100d883a 	mov	r6,r2
  804624:	180f883a 	mov	r7,r3
  804628:	a83ee83a 	callr	r21
  80462c:	01400284 	movi	r5,10
  804630:	01000044 	movi	r4,1
  804634:	103fd926 	beq	r2,zero,80459c <_Unwind_ForcedUnwind_Phase2+0x38>
  804638:	04400084 	movi	r17,2
  80463c:	8805883a 	mov	r2,r17
  804640:	dfc00917 	ldw	ra,36(sp)
  804644:	dd400817 	ldw	r21,32(sp)
  804648:	dd000717 	ldw	r20,28(sp)
  80464c:	dcc00617 	ldw	r19,24(sp)
  804650:	dc800517 	ldw	r18,20(sp)
  804654:	dc400417 	ldw	r17,16(sp)
  804658:	dc000317 	ldw	r16,12(sp)
  80465c:	dec00a04 	addi	sp,sp,40
  804660:	f800283a 	ret

00804664 <_Unwind_DeleteException>:
  804664:	20800217 	ldw	r2,8(r4)
  804668:	200b883a 	mov	r5,r4
  80466c:	01000044 	movi	r4,1
  804670:	10000126 	beq	r2,zero,804678 <_Unwind_DeleteException+0x14>
  804674:	1000683a 	jmp	r2
  804678:	f800283a 	ret

0080467c <_Unwind_RaiseException_Phase2>:
  80467c:	defffa04 	addi	sp,sp,-24
  804680:	dc800415 	stw	r18,16(sp)
  804684:	2825883a 	mov	r18,r5
  804688:	29400017 	ldw	r5,0(r5)
  80468c:	dc400315 	stw	r17,12(sp)
  804690:	dfc00515 	stw	ra,20(sp)
  804694:	dc000215 	stw	r16,8(sp)
  804698:	2023883a 	mov	r17,r4
  80469c:	28001b26 	beq	r5,zero,80470c <_Unwind_RaiseException_Phase2+0x90>
  8046a0:	88800417 	ldw	r2,16(r17)
  8046a4:	0007883a 	mov	r3,zero
  8046a8:	2a000617 	ldw	r8,24(r5)
  8046ac:	28a1003a 	cmpeq	r16,r5,r2
  8046b0:	802090ba 	slli	r16,r16,2
  8046b4:	18001b1e 	bne	r3,zero,804724 <_Unwind_RaiseException_Phase2+0xa8>
  8046b8:	40000e26 	beq	r8,zero,8046f4 <_Unwind_RaiseException_Phase2+0x78>
  8046bc:	88800017 	ldw	r2,0(r17)
  8046c0:	dc400015 	stw	r17,0(sp)
  8046c4:	dc800115 	stw	r18,4(sp)
  8046c8:	88c00117 	ldw	r3,4(r17)
  8046cc:	01000044 	movi	r4,1
  8046d0:	81400094 	ori	r5,r16,2
  8046d4:	180f883a 	mov	r7,r3
  8046d8:	100d883a 	mov	r6,r2
  8046dc:	403ee83a 	callr	r8
  8046e0:	1007883a 	mov	r3,r2
  8046e4:	008001c4 	movi	r2,7
  8046e8:	18800f26 	beq	r3,r2,804728 <_Unwind_RaiseException_Phase2+0xac>
  8046ec:	00800204 	movi	r2,8
  8046f0:	18800c1e 	bne	r3,r2,804724 <_Unwind_RaiseException_Phase2+0xa8>
  8046f4:	8000131e 	bne	r16,zero,804744 <_Unwind_RaiseException_Phase2+0xc8>
  8046f8:	91400017 	ldw	r5,0(r18)
  8046fc:	28800017 	ldw	r2,0(r5)
  804700:	100b883a 	mov	r5,r2
  804704:	90800015 	stw	r2,0(r18)
  804708:	283fe51e 	bne	r5,zero,8046a0 <_Unwind_RaiseException_Phase2+0x24>
  80470c:	88800417 	ldw	r2,16(r17)
  804710:	00c00144 	movi	r3,5
  804714:	0011883a 	mov	r8,zero
  804718:	28a1003a 	cmpeq	r16,r5,r2
  80471c:	802090ba 	slli	r16,r16,2
  804720:	183fe526 	beq	r3,zero,8046b8 <_Unwind_RaiseException_Phase2+0x3c>
  804724:	00c00084 	movi	r3,2
  804728:	1805883a 	mov	r2,r3
  80472c:	dfc00517 	ldw	ra,20(sp)
  804730:	dc800417 	ldw	r18,16(sp)
  804734:	dc400317 	ldw	r17,12(sp)
  804738:	dc000217 	ldw	r16,8(sp)
  80473c:	dec00604 	addi	sp,sp,24
  804740:	f800283a 	ret
  804744:	08049ec0 	call	8049ec <abort>

00804748 <uw_install_context>:
  804748:	28800017 	ldw	r2,0(r5)
  80474c:	deffff04 	addi	sp,sp,-4
  804750:	df000015 	stw	fp,0(sp)
  804754:	10c00804 	addi	r3,r2,32
  804758:	d839883a 	mov	fp,sp
  80475c:	d0a7c015 	stw	r2,-24832(gp)
  804760:	19000117 	ldw	r4,4(r3)
  804764:	1f000017 	ldw	fp,0(r3)
  804768:	1ec00217 	ldw	sp,8(r3)
  80476c:	2000683a 	jmp	r4

00804770 <_Unwind_SjLj_Resume>:
  804770:	d0e7c017 	ldw	r3,-24832(gp)
  804774:	20800317 	ldw	r2,12(r4)
  804778:	defffc04 	addi	sp,sp,-16
  80477c:	dfc00315 	stw	ra,12(sp)
  804780:	dc000215 	stw	r16,8(sp)
  804784:	d8c00015 	stw	r3,0(sp)
  804788:	d8c00115 	stw	r3,4(sp)
  80478c:	1000071e 	bne	r2,zero,8047ac <_Unwind_SjLj_Resume+0x3c>
  804790:	dc000104 	addi	r16,sp,4
  804794:	800b883a 	mov	r5,r16
  804798:	080467c0 	call	80467c <_Unwind_RaiseException_Phase2>
  80479c:	1007883a 	mov	r3,r2
  8047a0:	008001c4 	movi	r2,7
  8047a4:	18800626 	beq	r3,r2,8047c0 <_Unwind_SjLj_Resume+0x50>
  8047a8:	08049ec0 	call	8049ec <abort>
  8047ac:	dc000104 	addi	r16,sp,4
  8047b0:	800b883a 	mov	r5,r16
  8047b4:	08045640 	call	804564 <_Unwind_ForcedUnwind_Phase2>
  8047b8:	1007883a 	mov	r3,r2
  8047bc:	003ff806 	br	8047a0 <_Unwind_SjLj_Resume+0x30>
  8047c0:	800b883a 	mov	r5,r16
  8047c4:	d809883a 	mov	r4,sp
  8047c8:	08047480 	call	804748 <uw_install_context>

008047cc <_Unwind_SjLj_RaiseException>:
  8047cc:	d0a7c017 	ldw	r2,-24832(gp)
  8047d0:	defff804 	addi	sp,sp,-32
  8047d4:	dc000415 	stw	r16,16(sp)
  8047d8:	dfc00715 	stw	ra,28(sp)
  8047dc:	dc800615 	stw	r18,24(sp)
  8047e0:	dc400515 	stw	r17,20(sp)
  8047e4:	2021883a 	mov	r16,r4
  8047e8:	d8800215 	stw	r2,8(sp)
  8047ec:	d8800315 	stw	r2,12(sp)
  8047f0:	10001626 	beq	r2,zero,80484c <_Unwind_SjLj_RaiseException+0x80>
  8047f4:	dc400304 	addi	r17,sp,12
  8047f8:	04800184 	movi	r18,6
  8047fc:	00000106 	br	804804 <_Unwind_SjLj_RaiseException+0x38>
  804800:	d8800315 	stw	r2,12(sp)
  804804:	12000617 	ldw	r8,24(r2)
  804808:	40000d26 	beq	r8,zero,804840 <_Unwind_SjLj_RaiseException+0x74>
  80480c:	80800017 	ldw	r2,0(r16)
  804810:	dc000015 	stw	r16,0(sp)
  804814:	80c00117 	ldw	r3,4(r16)
  804818:	01000044 	movi	r4,1
  80481c:	dc400115 	stw	r17,4(sp)
  804820:	180f883a 	mov	r7,r3
  804824:	200b883a 	mov	r5,r4
  804828:	100d883a 	mov	r6,r2
  80482c:	403ee83a 	callr	r8
  804830:	1007883a 	mov	r3,r2
  804834:	14800d26 	beq	r2,r18,80486c <_Unwind_SjLj_RaiseException+0xa0>
  804838:	00800204 	movi	r2,8
  80483c:	1880191e 	bne	r3,r2,8048a4 <_Unwind_SjLj_RaiseException+0xd8>
  804840:	d8800317 	ldw	r2,12(sp)
  804844:	10800017 	ldw	r2,0(r2)
  804848:	103fed1e 	bne	r2,zero,804800 <_Unwind_SjLj_RaiseException+0x34>
  80484c:	00c00144 	movi	r3,5
  804850:	1805883a 	mov	r2,r3
  804854:	dfc00717 	ldw	ra,28(sp)
  804858:	dc800617 	ldw	r18,24(sp)
  80485c:	dc400517 	ldw	r17,20(sp)
  804860:	dc000417 	ldw	r16,16(sp)
  804864:	dec00804 	addi	sp,sp,32
  804868:	f800283a 	ret
  80486c:	d8800317 	ldw	r2,12(sp)
  804870:	80000315 	stw	zero,12(r16)
  804874:	8009883a 	mov	r4,r16
  804878:	80800415 	stw	r2,16(r16)
  80487c:	d8800217 	ldw	r2,8(sp)
  804880:	880b883a 	mov	r5,r17
  804884:	d8800315 	stw	r2,12(sp)
  804888:	080467c0 	call	80467c <_Unwind_RaiseException_Phase2>
  80488c:	1007883a 	mov	r3,r2
  804890:	008001c4 	movi	r2,7
  804894:	18bfee1e 	bne	r3,r2,804850 <_Unwind_SjLj_RaiseException+0x84>
  804898:	880b883a 	mov	r5,r17
  80489c:	d9000204 	addi	r4,sp,8
  8048a0:	08047480 	call	804748 <uw_install_context>
  8048a4:	00c000c4 	movi	r3,3
  8048a8:	1805883a 	mov	r2,r3
  8048ac:	dfc00717 	ldw	ra,28(sp)
  8048b0:	dc800617 	ldw	r18,24(sp)
  8048b4:	dc400517 	ldw	r17,20(sp)
  8048b8:	dc000417 	ldw	r16,16(sp)
  8048bc:	dec00804 	addi	sp,sp,32
  8048c0:	f800283a 	ret

008048c4 <_Unwind_SjLj_ForcedUnwind>:
  8048c4:	defffc04 	addi	sp,sp,-16
  8048c8:	d0a7c017 	ldw	r2,-24832(gp)
  8048cc:	dc000215 	stw	r16,8(sp)
  8048d0:	dc000104 	addi	r16,sp,4
  8048d4:	21400315 	stw	r5,12(r4)
  8048d8:	21800415 	stw	r6,16(r4)
  8048dc:	800b883a 	mov	r5,r16
  8048e0:	dfc00315 	stw	ra,12(sp)
  8048e4:	d8800015 	stw	r2,0(sp)
  8048e8:	d8800115 	stw	r2,4(sp)
  8048ec:	08045640 	call	804564 <_Unwind_ForcedUnwind_Phase2>
  8048f0:	00c001c4 	movi	r3,7
  8048f4:	10c00426 	beq	r2,r3,804908 <_Unwind_SjLj_ForcedUnwind+0x44>
  8048f8:	dfc00317 	ldw	ra,12(sp)
  8048fc:	dc000217 	ldw	r16,8(sp)
  804900:	dec00404 	addi	sp,sp,16
  804904:	f800283a 	ret
  804908:	800b883a 	mov	r5,r16
  80490c:	d809883a 	mov	r4,sp
  804910:	08047480 	call	804748 <uw_install_context>

00804914 <_Unwind_Backtrace>:
  804914:	d0a7c017 	ldw	r2,-24832(gp)
  804918:	defffa04 	addi	sp,sp,-24
  80491c:	dcc00415 	stw	r19,16(sp)
  804920:	dc800315 	stw	r18,12(sp)
  804924:	dc400215 	stw	r17,8(sp)
  804928:	2025883a 	mov	r18,r4
  80492c:	2823883a 	mov	r17,r5
  804930:	04c00144 	movi	r19,5
  804934:	dfc00515 	stw	ra,20(sp)
  804938:	dc000115 	stw	r16,4(sp)
  80493c:	d8800015 	stw	r2,0(sp)
  804940:	00000406 	br	804954 <_Unwind_Backtrace+0x40>
  804944:	84c00b26 	beq	r16,r19,804974 <_Unwind_Backtrace+0x60>
  804948:	d8800017 	ldw	r2,0(sp)
  80494c:	10800017 	ldw	r2,0(r2)
  804950:	d8800015 	stw	r2,0(sp)
  804954:	04000144 	movi	r16,5
  804958:	10000126 	beq	r2,zero,804960 <_Unwind_Backtrace+0x4c>
  80495c:	0021883a 	mov	r16,zero
  804960:	d809883a 	mov	r4,sp
  804964:	880b883a 	mov	r5,r17
  804968:	903ee83a 	callr	r18
  80496c:	103ff526 	beq	r2,zero,804944 <_Unwind_Backtrace+0x30>
  804970:	040000c4 	movi	r16,3
  804974:	8005883a 	mov	r2,r16
  804978:	dfc00517 	ldw	ra,20(sp)
  80497c:	dcc00417 	ldw	r19,16(sp)
  804980:	dc800317 	ldw	r18,12(sp)
  804984:	dc400217 	ldw	r17,8(sp)
  804988:	dc000117 	ldw	r16,4(sp)
  80498c:	dec00604 	addi	sp,sp,24
  804990:	f800283a 	ret

00804994 <_Unwind_SjLj_Resume_or_Rethrow>:
  804994:	20800317 	ldw	r2,12(r4)
  804998:	defffc04 	addi	sp,sp,-16
  80499c:	dfc00315 	stw	ra,12(sp)
  8049a0:	dc000215 	stw	r16,8(sp)
  8049a4:	10000926 	beq	r2,zero,8049cc <_Unwind_SjLj_Resume_or_Rethrow+0x38>
  8049a8:	d0a7c017 	ldw	r2,-24832(gp)
  8049ac:	dc000104 	addi	r16,sp,4
  8049b0:	800b883a 	mov	r5,r16
  8049b4:	d8800015 	stw	r2,0(sp)
  8049b8:	d8800115 	stw	r2,4(sp)
  8049bc:	08045640 	call	804564 <_Unwind_ForcedUnwind_Phase2>
  8049c0:	00c001c4 	movi	r3,7
  8049c4:	10c00626 	beq	r2,r3,8049e0 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
  8049c8:	08049ec0 	call	8049ec <abort>
  8049cc:	08047cc0 	call	8047cc <_Unwind_SjLj_RaiseException>
  8049d0:	dfc00317 	ldw	ra,12(sp)
  8049d4:	dc000217 	ldw	r16,8(sp)
  8049d8:	dec00404 	addi	sp,sp,16
  8049dc:	f800283a 	ret
  8049e0:	800b883a 	mov	r5,r16
  8049e4:	d809883a 	mov	r4,sp
  8049e8:	08047480 	call	804748 <uw_install_context>

008049ec <abort>:
  8049ec:	deffff04 	addi	sp,sp,-4
  8049f0:	01000184 	movi	r4,6
  8049f4:	dfc00015 	stw	ra,0(sp)
  8049f8:	08053b80 	call	8053b8 <raise>
  8049fc:	01000044 	movi	r4,1
  804a00:	080e6c80 	call	80e6c8 <_exit>

00804a04 <free>:
  804a04:	00802074 	movhi	r2,129
  804a08:	1091a404 	addi	r2,r2,18064
  804a0c:	200b883a 	mov	r5,r4
  804a10:	11000017 	ldw	r4,0(r2)
  804a14:	08095f01 	jmpi	8095f0 <_free_r>

00804a18 <malloc>:
  804a18:	00802074 	movhi	r2,129
  804a1c:	1091a404 	addi	r2,r2,18064
  804a20:	200b883a 	mov	r5,r4
  804a24:	11000017 	ldw	r4,0(r2)
  804a28:	0804a2c1 	jmpi	804a2c <_malloc_r>

00804a2c <_malloc_r>:
  804a2c:	defff604 	addi	sp,sp,-40
  804a30:	28c002c4 	addi	r3,r5,11
  804a34:	00800584 	movi	r2,22
  804a38:	dc800215 	stw	r18,8(sp)
  804a3c:	dfc00915 	stw	ra,36(sp)
  804a40:	df000815 	stw	fp,32(sp)
  804a44:	ddc00715 	stw	r23,28(sp)
  804a48:	dd800615 	stw	r22,24(sp)
  804a4c:	dd400515 	stw	r21,20(sp)
  804a50:	dd000415 	stw	r20,16(sp)
  804a54:	dcc00315 	stw	r19,12(sp)
  804a58:	dc400115 	stw	r17,4(sp)
  804a5c:	dc000015 	stw	r16,0(sp)
  804a60:	2025883a 	mov	r18,r4
  804a64:	10c01236 	bltu	r2,r3,804ab0 <_malloc_r+0x84>
  804a68:	04400404 	movi	r17,16
  804a6c:	8940142e 	bgeu	r17,r5,804ac0 <_malloc_r+0x94>
  804a70:	00800304 	movi	r2,12
  804a74:	0007883a 	mov	r3,zero
  804a78:	90800015 	stw	r2,0(r18)
  804a7c:	1805883a 	mov	r2,r3
  804a80:	dfc00917 	ldw	ra,36(sp)
  804a84:	df000817 	ldw	fp,32(sp)
  804a88:	ddc00717 	ldw	r23,28(sp)
  804a8c:	dd800617 	ldw	r22,24(sp)
  804a90:	dd400517 	ldw	r21,20(sp)
  804a94:	dd000417 	ldw	r20,16(sp)
  804a98:	dcc00317 	ldw	r19,12(sp)
  804a9c:	dc800217 	ldw	r18,8(sp)
  804aa0:	dc400117 	ldw	r17,4(sp)
  804aa4:	dc000017 	ldw	r16,0(sp)
  804aa8:	dec00a04 	addi	sp,sp,40
  804aac:	f800283a 	ret
  804ab0:	00bffe04 	movi	r2,-8
  804ab4:	18a2703a 	and	r17,r3,r2
  804ab8:	883fed16 	blt	r17,zero,804a70 <_malloc_r+0x44>
  804abc:	897fec36 	bltu	r17,r5,804a70 <_malloc_r+0x44>
  804ac0:	9009883a 	mov	r4,r18
  804ac4:	080ef640 	call	80ef64 <__malloc_lock>
  804ac8:	00807dc4 	movi	r2,503
  804acc:	14402b2e 	bgeu	r2,r17,804b7c <_malloc_r+0x150>
  804ad0:	8806d27a 	srli	r3,r17,9
  804ad4:	18003f1e 	bne	r3,zero,804bd4 <_malloc_r+0x1a8>
  804ad8:	880cd0fa 	srli	r6,r17,3
  804adc:	300490fa 	slli	r2,r6,3
  804ae0:	02c02074 	movhi	r11,129
  804ae4:	5aca7804 	addi	r11,r11,10720
  804ae8:	12cb883a 	add	r5,r2,r11
  804aec:	2c000317 	ldw	r16,12(r5)
  804af0:	580f883a 	mov	r7,r11
  804af4:	2c00041e 	bne	r5,r16,804b08 <_malloc_r+0xdc>
  804af8:	00000a06 	br	804b24 <_malloc_r+0xf8>
  804afc:	1800860e 	bge	r3,zero,804d18 <_malloc_r+0x2ec>
  804b00:	84000317 	ldw	r16,12(r16)
  804b04:	2c000726 	beq	r5,r16,804b24 <_malloc_r+0xf8>
  804b08:	80800117 	ldw	r2,4(r16)
  804b0c:	00ffff04 	movi	r3,-4
  804b10:	10c8703a 	and	r4,r2,r3
  804b14:	2447c83a 	sub	r3,r4,r17
  804b18:	008003c4 	movi	r2,15
  804b1c:	10fff70e 	bge	r2,r3,804afc <_malloc_r+0xd0>
  804b20:	31bfffc4 	addi	r6,r6,-1
  804b24:	32400044 	addi	r9,r6,1
  804b28:	02802074 	movhi	r10,129
  804b2c:	528a7a04 	addi	r10,r10,10728
  804b30:	54000217 	ldw	r16,8(r10)
  804b34:	8280a026 	beq	r16,r10,804db8 <_malloc_r+0x38c>
  804b38:	80800117 	ldw	r2,4(r16)
  804b3c:	00ffff04 	movi	r3,-4
  804b40:	10ca703a 	and	r5,r2,r3
  804b44:	2c4dc83a 	sub	r6,r5,r17
  804b48:	008003c4 	movi	r2,15
  804b4c:	11808316 	blt	r2,r6,804d5c <_malloc_r+0x330>
  804b50:	52800315 	stw	r10,12(r10)
  804b54:	52800215 	stw	r10,8(r10)
  804b58:	30002916 	blt	r6,zero,804c00 <_malloc_r+0x1d4>
  804b5c:	8147883a 	add	r3,r16,r5
  804b60:	18800117 	ldw	r2,4(r3)
  804b64:	9009883a 	mov	r4,r18
  804b68:	10800054 	ori	r2,r2,1
  804b6c:	18800115 	stw	r2,4(r3)
  804b70:	080ef840 	call	80ef84 <__malloc_unlock>
  804b74:	80c00204 	addi	r3,r16,8
  804b78:	003fc006 	br	804a7c <_malloc_r+0x50>
  804b7c:	02c02074 	movhi	r11,129
  804b80:	5aca7804 	addi	r11,r11,10720
  804b84:	8ac5883a 	add	r2,r17,r11
  804b88:	14000317 	ldw	r16,12(r2)
  804b8c:	580f883a 	mov	r7,r11
  804b90:	8806d0fa 	srli	r3,r17,3
  804b94:	14006c26 	beq	r2,r16,804d48 <_malloc_r+0x31c>
  804b98:	80c00117 	ldw	r3,4(r16)
  804b9c:	00bfff04 	movi	r2,-4
  804ba0:	81800317 	ldw	r6,12(r16)
  804ba4:	1886703a 	and	r3,r3,r2
  804ba8:	80c7883a 	add	r3,r16,r3
  804bac:	18800117 	ldw	r2,4(r3)
  804bb0:	81400217 	ldw	r5,8(r16)
  804bb4:	9009883a 	mov	r4,r18
  804bb8:	10800054 	ori	r2,r2,1
  804bbc:	18800115 	stw	r2,4(r3)
  804bc0:	31400215 	stw	r5,8(r6)
  804bc4:	29800315 	stw	r6,12(r5)
  804bc8:	080ef840 	call	80ef84 <__malloc_unlock>
  804bcc:	80c00204 	addi	r3,r16,8
  804bd0:	003faa06 	br	804a7c <_malloc_r+0x50>
  804bd4:	00800104 	movi	r2,4
  804bd8:	10c0052e 	bgeu	r2,r3,804bf0 <_malloc_r+0x1c4>
  804bdc:	00800504 	movi	r2,20
  804be0:	10c07836 	bltu	r2,r3,804dc4 <_malloc_r+0x398>
  804be4:	198016c4 	addi	r6,r3,91
  804be8:	300490fa 	slli	r2,r6,3
  804bec:	003fbc06 	br	804ae0 <_malloc_r+0xb4>
  804bf0:	8804d1ba 	srli	r2,r17,6
  804bf4:	11800e04 	addi	r6,r2,56
  804bf8:	300490fa 	slli	r2,r6,3
  804bfc:	003fb806 	br	804ae0 <_malloc_r+0xb4>
  804c00:	00807fc4 	movi	r2,511
  804c04:	1140bb36 	bltu	r2,r5,804ef4 <_malloc_r+0x4c8>
  804c08:	2806d0fa 	srli	r3,r5,3
  804c0c:	573ffe04 	addi	fp,r10,-8
  804c10:	00800044 	movi	r2,1
  804c14:	180890fa 	slli	r4,r3,3
  804c18:	1807d0ba 	srai	r3,r3,2
  804c1c:	e1c00117 	ldw	r7,4(fp)
  804c20:	5909883a 	add	r4,r11,r4
  804c24:	21400217 	ldw	r5,8(r4)
  804c28:	10c4983a 	sll	r2,r2,r3
  804c2c:	81000315 	stw	r4,12(r16)
  804c30:	81400215 	stw	r5,8(r16)
  804c34:	388eb03a 	or	r7,r7,r2
  804c38:	2c000315 	stw	r16,12(r5)
  804c3c:	24000215 	stw	r16,8(r4)
  804c40:	e1c00115 	stw	r7,4(fp)
  804c44:	4807883a 	mov	r3,r9
  804c48:	4800cd16 	blt	r9,zero,804f80 <_malloc_r+0x554>
  804c4c:	1807d0ba 	srai	r3,r3,2
  804c50:	00800044 	movi	r2,1
  804c54:	10c8983a 	sll	r4,r2,r3
  804c58:	39004436 	bltu	r7,r4,804d6c <_malloc_r+0x340>
  804c5c:	21c4703a 	and	r2,r4,r7
  804c60:	10000a1e 	bne	r2,zero,804c8c <_malloc_r+0x260>
  804c64:	2109883a 	add	r4,r4,r4
  804c68:	00bfff04 	movi	r2,-4
  804c6c:	4884703a 	and	r2,r9,r2
  804c70:	3906703a 	and	r3,r7,r4
  804c74:	12400104 	addi	r9,r2,4
  804c78:	1800041e 	bne	r3,zero,804c8c <_malloc_r+0x260>
  804c7c:	2109883a 	add	r4,r4,r4
  804c80:	3904703a 	and	r2,r7,r4
  804c84:	4a400104 	addi	r9,r9,4
  804c88:	103ffc26 	beq	r2,zero,804c7c <_malloc_r+0x250>
  804c8c:	480490fa 	slli	r2,r9,3
  804c90:	4819883a 	mov	r12,r9
  804c94:	023fff04 	movi	r8,-4
  804c98:	589b883a 	add	r13,r11,r2
  804c9c:	6807883a 	mov	r3,r13
  804ca0:	014003c4 	movi	r5,15
  804ca4:	1c000317 	ldw	r16,12(r3)
  804ca8:	1c00041e 	bne	r3,r16,804cbc <_malloc_r+0x290>
  804cac:	0000a706 	br	804f4c <_malloc_r+0x520>
  804cb0:	3000ab0e 	bge	r6,zero,804f60 <_malloc_r+0x534>
  804cb4:	84000317 	ldw	r16,12(r16)
  804cb8:	1c00a426 	beq	r3,r16,804f4c <_malloc_r+0x520>
  804cbc:	80800117 	ldw	r2,4(r16)
  804cc0:	1204703a 	and	r2,r2,r8
  804cc4:	144dc83a 	sub	r6,r2,r17
  804cc8:	29bff90e 	bge	r5,r6,804cb0 <_malloc_r+0x284>
  804ccc:	81000317 	ldw	r4,12(r16)
  804cd0:	80c00217 	ldw	r3,8(r16)
  804cd4:	89400054 	ori	r5,r17,1
  804cd8:	8445883a 	add	r2,r16,r17
  804cdc:	20c00215 	stw	r3,8(r4)
  804ce0:	19000315 	stw	r4,12(r3)
  804ce4:	81400115 	stw	r5,4(r16)
  804ce8:	1187883a 	add	r3,r2,r6
  804cec:	31000054 	ori	r4,r6,1
  804cf0:	50800315 	stw	r2,12(r10)
  804cf4:	50800215 	stw	r2,8(r10)
  804cf8:	19800015 	stw	r6,0(r3)
  804cfc:	11000115 	stw	r4,4(r2)
  804d00:	12800215 	stw	r10,8(r2)
  804d04:	12800315 	stw	r10,12(r2)
  804d08:	9009883a 	mov	r4,r18
  804d0c:	080ef840 	call	80ef84 <__malloc_unlock>
  804d10:	80c00204 	addi	r3,r16,8
  804d14:	003f5906 	br	804a7c <_malloc_r+0x50>
  804d18:	8109883a 	add	r4,r16,r4
  804d1c:	20800117 	ldw	r2,4(r4)
  804d20:	80c00217 	ldw	r3,8(r16)
  804d24:	81400317 	ldw	r5,12(r16)
  804d28:	10800054 	ori	r2,r2,1
  804d2c:	20800115 	stw	r2,4(r4)
  804d30:	28c00215 	stw	r3,8(r5)
  804d34:	19400315 	stw	r5,12(r3)
  804d38:	9009883a 	mov	r4,r18
  804d3c:	080ef840 	call	80ef84 <__malloc_unlock>
  804d40:	80c00204 	addi	r3,r16,8
  804d44:	003f4d06 	br	804a7c <_malloc_r+0x50>
  804d48:	80800204 	addi	r2,r16,8
  804d4c:	14000317 	ldw	r16,12(r2)
  804d50:	143f911e 	bne	r2,r16,804b98 <_malloc_r+0x16c>
  804d54:	1a400084 	addi	r9,r3,2
  804d58:	003f7306 	br	804b28 <_malloc_r+0xfc>
  804d5c:	88c00054 	ori	r3,r17,1
  804d60:	8445883a 	add	r2,r16,r17
  804d64:	80c00115 	stw	r3,4(r16)
  804d68:	003fdf06 	br	804ce8 <_malloc_r+0x2bc>
  804d6c:	e4000217 	ldw	r16,8(fp)
  804d70:	00bfff04 	movi	r2,-4
  804d74:	80c00117 	ldw	r3,4(r16)
  804d78:	802d883a 	mov	r22,r16
  804d7c:	18aa703a 	and	r21,r3,r2
  804d80:	ac401636 	bltu	r21,r17,804ddc <_malloc_r+0x3b0>
  804d84:	ac49c83a 	sub	r4,r21,r17
  804d88:	008003c4 	movi	r2,15
  804d8c:	1100130e 	bge	r2,r4,804ddc <_malloc_r+0x3b0>
  804d90:	88800054 	ori	r2,r17,1
  804d94:	8447883a 	add	r3,r16,r17
  804d98:	80800115 	stw	r2,4(r16)
  804d9c:	20800054 	ori	r2,r4,1
  804da0:	18800115 	stw	r2,4(r3)
  804da4:	e0c00215 	stw	r3,8(fp)
  804da8:	9009883a 	mov	r4,r18
  804dac:	080ef840 	call	80ef84 <__malloc_unlock>
  804db0:	80c00204 	addi	r3,r16,8
  804db4:	003f3106 	br	804a7c <_malloc_r+0x50>
  804db8:	39c00117 	ldw	r7,4(r7)
  804dbc:	573ffe04 	addi	fp,r10,-8
  804dc0:	003fa006 	br	804c44 <_malloc_r+0x218>
  804dc4:	00801504 	movi	r2,84
  804dc8:	10c06736 	bltu	r2,r3,804f68 <_malloc_r+0x53c>
  804dcc:	8804d33a 	srli	r2,r17,12
  804dd0:	11801b84 	addi	r6,r2,110
  804dd4:	300490fa 	slli	r2,r6,3
  804dd8:	003f4106 	br	804ae0 <_malloc_r+0xb4>
  804ddc:	d0a7c117 	ldw	r2,-24828(gp)
  804de0:	d0e07317 	ldw	r3,-32308(gp)
  804de4:	053fffc4 	movi	r20,-1
  804de8:	10800404 	addi	r2,r2,16
  804dec:	88a7883a 	add	r19,r17,r2
  804df0:	1d000326 	beq	r3,r20,804e00 <_malloc_r+0x3d4>
  804df4:	98c3ffc4 	addi	r3,r19,4095
  804df8:	00bc0004 	movi	r2,-4096
  804dfc:	18a6703a 	and	r19,r3,r2
  804e00:	9009883a 	mov	r4,r18
  804e04:	980b883a 	mov	r5,r19
  804e08:	080527c0 	call	80527c <_sbrk_r>
  804e0c:	1009883a 	mov	r4,r2
  804e10:	15000426 	beq	r2,r20,804e24 <_malloc_r+0x3f8>
  804e14:	854b883a 	add	r5,r16,r21
  804e18:	1029883a 	mov	r20,r2
  804e1c:	11405a2e 	bgeu	r2,r5,804f88 <_malloc_r+0x55c>
  804e20:	87000c26 	beq	r16,fp,804e54 <_malloc_r+0x428>
  804e24:	e4000217 	ldw	r16,8(fp)
  804e28:	80c00117 	ldw	r3,4(r16)
  804e2c:	00bfff04 	movi	r2,-4
  804e30:	1884703a 	and	r2,r3,r2
  804e34:	14400336 	bltu	r2,r17,804e44 <_malloc_r+0x418>
  804e38:	1449c83a 	sub	r4,r2,r17
  804e3c:	008003c4 	movi	r2,15
  804e40:	113fd316 	blt	r2,r4,804d90 <_malloc_r+0x364>
  804e44:	9009883a 	mov	r4,r18
  804e48:	080ef840 	call	80ef84 <__malloc_unlock>
  804e4c:	0007883a 	mov	r3,zero
  804e50:	003f0a06 	br	804a7c <_malloc_r+0x50>
  804e54:	05c02074 	movhi	r23,129
  804e58:	bddafe04 	addi	r23,r23,27640
  804e5c:	b8800017 	ldw	r2,0(r23)
  804e60:	988d883a 	add	r6,r19,r2
  804e64:	b9800015 	stw	r6,0(r23)
  804e68:	d0e07317 	ldw	r3,-32308(gp)
  804e6c:	00bfffc4 	movi	r2,-1
  804e70:	18808e26 	beq	r3,r2,8050ac <_malloc_r+0x680>
  804e74:	2145c83a 	sub	r2,r4,r5
  804e78:	3085883a 	add	r2,r6,r2
  804e7c:	b8800015 	stw	r2,0(r23)
  804e80:	20c001cc 	andi	r3,r4,7
  804e84:	18005f1e 	bne	r3,zero,805004 <_malloc_r+0x5d8>
  804e88:	000b883a 	mov	r5,zero
  804e8c:	a4c5883a 	add	r2,r20,r19
  804e90:	1083ffcc 	andi	r2,r2,4095
  804e94:	00c40004 	movi	r3,4096
  804e98:	1887c83a 	sub	r3,r3,r2
  804e9c:	28e7883a 	add	r19,r5,r3
  804ea0:	9009883a 	mov	r4,r18
  804ea4:	980b883a 	mov	r5,r19
  804ea8:	080527c0 	call	80527c <_sbrk_r>
  804eac:	1007883a 	mov	r3,r2
  804eb0:	00bfffc4 	movi	r2,-1
  804eb4:	18807a26 	beq	r3,r2,8050a0 <_malloc_r+0x674>
  804eb8:	1d05c83a 	sub	r2,r3,r20
  804ebc:	9885883a 	add	r2,r19,r2
  804ec0:	10c00054 	ori	r3,r2,1
  804ec4:	b8800017 	ldw	r2,0(r23)
  804ec8:	a021883a 	mov	r16,r20
  804ecc:	a0c00115 	stw	r3,4(r20)
  804ed0:	9885883a 	add	r2,r19,r2
  804ed4:	b8800015 	stw	r2,0(r23)
  804ed8:	e5000215 	stw	r20,8(fp)
  804edc:	b7003626 	beq	r22,fp,804fb8 <_malloc_r+0x58c>
  804ee0:	018003c4 	movi	r6,15
  804ee4:	35404b36 	bltu	r6,r21,805014 <_malloc_r+0x5e8>
  804ee8:	00800044 	movi	r2,1
  804eec:	a0800115 	stw	r2,4(r20)
  804ef0:	003fcd06 	br	804e28 <_malloc_r+0x3fc>
  804ef4:	2808d27a 	srli	r4,r5,9
  804ef8:	2000371e 	bne	r4,zero,804fd8 <_malloc_r+0x5ac>
  804efc:	2808d0fa 	srli	r4,r5,3
  804f00:	200690fa 	slli	r3,r4,3
  804f04:	1ad1883a 	add	r8,r3,r11
  804f08:	41800217 	ldw	r6,8(r8)
  804f0c:	41805b26 	beq	r8,r6,80507c <_malloc_r+0x650>
  804f10:	30800117 	ldw	r2,4(r6)
  804f14:	00ffff04 	movi	r3,-4
  804f18:	10c4703a 	and	r2,r2,r3
  804f1c:	2880022e 	bgeu	r5,r2,804f28 <_malloc_r+0x4fc>
  804f20:	31800217 	ldw	r6,8(r6)
  804f24:	41bffa1e 	bne	r8,r6,804f10 <_malloc_r+0x4e4>
  804f28:	32000317 	ldw	r8,12(r6)
  804f2c:	39c00117 	ldw	r7,4(r7)
  804f30:	82000315 	stw	r8,12(r16)
  804f34:	81800215 	stw	r6,8(r16)
  804f38:	07002074 	movhi	fp,129
  804f3c:	e70a7804 	addi	fp,fp,10720
  804f40:	34000315 	stw	r16,12(r6)
  804f44:	44000215 	stw	r16,8(r8)
  804f48:	003f3e06 	br	804c44 <_malloc_r+0x218>
  804f4c:	63000044 	addi	r12,r12,1
  804f50:	608000cc 	andi	r2,r12,3
  804f54:	10005d26 	beq	r2,zero,8050cc <_malloc_r+0x6a0>
  804f58:	18c00204 	addi	r3,r3,8
  804f5c:	003f5106 	br	804ca4 <_malloc_r+0x278>
  804f60:	8089883a 	add	r4,r16,r2
  804f64:	003f6d06 	br	804d1c <_malloc_r+0x2f0>
  804f68:	00805504 	movi	r2,340
  804f6c:	10c02036 	bltu	r2,r3,804ff0 <_malloc_r+0x5c4>
  804f70:	8804d3fa 	srli	r2,r17,15
  804f74:	11801dc4 	addi	r6,r2,119
  804f78:	300490fa 	slli	r2,r6,3
  804f7c:	003ed806 	br	804ae0 <_malloc_r+0xb4>
  804f80:	48c000c4 	addi	r3,r9,3
  804f84:	003f3106 	br	804c4c <_malloc_r+0x220>
  804f88:	05c02074 	movhi	r23,129
  804f8c:	bddafe04 	addi	r23,r23,27640
  804f90:	b8800017 	ldw	r2,0(r23)
  804f94:	988d883a 	add	r6,r19,r2
  804f98:	b9800015 	stw	r6,0(r23)
  804f9c:	293fb21e 	bne	r5,r4,804e68 <_malloc_r+0x43c>
  804fa0:	2083ffcc 	andi	r2,r4,4095
  804fa4:	103fb01e 	bne	r2,zero,804e68 <_malloc_r+0x43c>
  804fa8:	e4000217 	ldw	r16,8(fp)
  804fac:	9d45883a 	add	r2,r19,r21
  804fb0:	10800054 	ori	r2,r2,1
  804fb4:	80800115 	stw	r2,4(r16)
  804fb8:	b8c00017 	ldw	r3,0(r23)
  804fbc:	d0a7c217 	ldw	r2,-24824(gp)
  804fc0:	10c0012e 	bgeu	r2,r3,804fc8 <_malloc_r+0x59c>
  804fc4:	d0e7c215 	stw	r3,-24824(gp)
  804fc8:	d0a7c317 	ldw	r2,-24820(gp)
  804fcc:	10ff962e 	bgeu	r2,r3,804e28 <_malloc_r+0x3fc>
  804fd0:	d0e7c315 	stw	r3,-24820(gp)
  804fd4:	003f9406 	br	804e28 <_malloc_r+0x3fc>
  804fd8:	00800104 	movi	r2,4
  804fdc:	11001e36 	bltu	r2,r4,805058 <_malloc_r+0x62c>
  804fe0:	2804d1ba 	srli	r2,r5,6
  804fe4:	11000e04 	addi	r4,r2,56
  804fe8:	200690fa 	slli	r3,r4,3
  804fec:	003fc506 	br	804f04 <_malloc_r+0x4d8>
  804ff0:	00815504 	movi	r2,1364
  804ff4:	10c01d2e 	bgeu	r2,r3,80506c <_malloc_r+0x640>
  804ff8:	01801f84 	movi	r6,126
  804ffc:	0080fc04 	movi	r2,1008
  805000:	003eb706 	br	804ae0 <_malloc_r+0xb4>
  805004:	00800204 	movi	r2,8
  805008:	10cbc83a 	sub	r5,r2,r3
  80500c:	2169883a 	add	r20,r4,r5
  805010:	003f9e06 	br	804e8c <_malloc_r+0x460>
  805014:	00bffe04 	movi	r2,-8
  805018:	a93ffd04 	addi	r4,r21,-12
  80501c:	2088703a 	and	r4,r4,r2
  805020:	b10b883a 	add	r5,r22,r4
  805024:	00c00144 	movi	r3,5
  805028:	28c00215 	stw	r3,8(r5)
  80502c:	28c00115 	stw	r3,4(r5)
  805030:	b0800117 	ldw	r2,4(r22)
  805034:	1080004c 	andi	r2,r2,1
  805038:	2084b03a 	or	r2,r4,r2
  80503c:	b0800115 	stw	r2,4(r22)
  805040:	313fdd2e 	bgeu	r6,r4,804fb8 <_malloc_r+0x58c>
  805044:	b1400204 	addi	r5,r22,8
  805048:	9009883a 	mov	r4,r18
  80504c:	08095f00 	call	8095f0 <_free_r>
  805050:	e4000217 	ldw	r16,8(fp)
  805054:	003fd806 	br	804fb8 <_malloc_r+0x58c>
  805058:	00800504 	movi	r2,20
  80505c:	11001536 	bltu	r2,r4,8050b4 <_malloc_r+0x688>
  805060:	210016c4 	addi	r4,r4,91
  805064:	200690fa 	slli	r3,r4,3
  805068:	003fa606 	br	804f04 <_malloc_r+0x4d8>
  80506c:	8804d4ba 	srli	r2,r17,18
  805070:	11801f04 	addi	r6,r2,124
  805074:	300490fa 	slli	r2,r6,3
  805078:	003e9906 	br	804ae0 <_malloc_r+0xb4>
  80507c:	2009d0ba 	srai	r4,r4,2
  805080:	01402074 	movhi	r5,129
  805084:	294a7804 	addi	r5,r5,10720
  805088:	00c00044 	movi	r3,1
  80508c:	28800117 	ldw	r2,4(r5)
  805090:	1906983a 	sll	r3,r3,r4
  805094:	10c4b03a 	or	r2,r2,r3
  805098:	28800115 	stw	r2,4(r5)
  80509c:	003fa306 	br	804f2c <_malloc_r+0x500>
  8050a0:	0027883a 	mov	r19,zero
  8050a4:	00c00044 	movi	r3,1
  8050a8:	003f8606 	br	804ec4 <_malloc_r+0x498>
  8050ac:	d1207315 	stw	r4,-32308(gp)
  8050b0:	003f7306 	br	804e80 <_malloc_r+0x454>
  8050b4:	00801504 	movi	r2,84
  8050b8:	11001936 	bltu	r2,r4,805120 <_malloc_r+0x6f4>
  8050bc:	2804d33a 	srli	r2,r5,12
  8050c0:	11001b84 	addi	r4,r2,110
  8050c4:	200690fa 	slli	r3,r4,3
  8050c8:	003f8e06 	br	804f04 <_malloc_r+0x4d8>
  8050cc:	480b883a 	mov	r5,r9
  8050d0:	6807883a 	mov	r3,r13
  8050d4:	288000cc 	andi	r2,r5,3
  8050d8:	18fffe04 	addi	r3,r3,-8
  8050dc:	297fffc4 	addi	r5,r5,-1
  8050e0:	10001526 	beq	r2,zero,805138 <_malloc_r+0x70c>
  8050e4:	18800217 	ldw	r2,8(r3)
  8050e8:	10fffa26 	beq	r2,r3,8050d4 <_malloc_r+0x6a8>
  8050ec:	2109883a 	add	r4,r4,r4
  8050f0:	393f1e36 	bltu	r7,r4,804d6c <_malloc_r+0x340>
  8050f4:	203f1d26 	beq	r4,zero,804d6c <_malloc_r+0x340>
  8050f8:	21c4703a 	and	r2,r4,r7
  8050fc:	10000226 	beq	r2,zero,805108 <_malloc_r+0x6dc>
  805100:	6013883a 	mov	r9,r12
  805104:	003ee106 	br	804c8c <_malloc_r+0x260>
  805108:	2109883a 	add	r4,r4,r4
  80510c:	3904703a 	and	r2,r7,r4
  805110:	63000104 	addi	r12,r12,4
  805114:	103ffc26 	beq	r2,zero,805108 <_malloc_r+0x6dc>
  805118:	6013883a 	mov	r9,r12
  80511c:	003edb06 	br	804c8c <_malloc_r+0x260>
  805120:	00805504 	movi	r2,340
  805124:	11000836 	bltu	r2,r4,805148 <_malloc_r+0x71c>
  805128:	2804d3fa 	srli	r2,r5,15
  80512c:	11001dc4 	addi	r4,r2,119
  805130:	200690fa 	slli	r3,r4,3
  805134:	003f7306 	br	804f04 <_malloc_r+0x4d8>
  805138:	0104303a 	nor	r2,zero,r4
  80513c:	388e703a 	and	r7,r7,r2
  805140:	e1c00115 	stw	r7,4(fp)
  805144:	003fe906 	br	8050ec <_malloc_r+0x6c0>
  805148:	00815504 	movi	r2,1364
  80514c:	1100032e 	bgeu	r2,r4,80515c <_malloc_r+0x730>
  805150:	01001f84 	movi	r4,126
  805154:	00c0fc04 	movi	r3,1008
  805158:	003f6a06 	br	804f04 <_malloc_r+0x4d8>
  80515c:	2804d4ba 	srli	r2,r5,18
  805160:	11001f04 	addi	r4,r2,124
  805164:	200690fa 	slli	r3,r4,3
  805168:	003f6606 	br	804f04 <_malloc_r+0x4d8>

0080516c <memset>:
  80516c:	008000c4 	movi	r2,3
  805170:	29403fcc 	andi	r5,r5,255
  805174:	2007883a 	mov	r3,r4
  805178:	1180022e 	bgeu	r2,r6,805184 <memset+0x18>
  80517c:	2084703a 	and	r2,r4,r2
  805180:	10000826 	beq	r2,zero,8051a4 <memset+0x38>
  805184:	30000526 	beq	r6,zero,80519c <memset+0x30>
  805188:	2805883a 	mov	r2,r5
  80518c:	30cd883a 	add	r6,r6,r3
  805190:	18800005 	stb	r2,0(r3)
  805194:	18c00044 	addi	r3,r3,1
  805198:	19bffd1e 	bne	r3,r6,805190 <memset+0x24>
  80519c:	2005883a 	mov	r2,r4
  8051a0:	f800283a 	ret
  8051a4:	2804923a 	slli	r2,r5,8
  8051a8:	020003c4 	movi	r8,15
  8051ac:	200f883a 	mov	r7,r4
  8051b0:	2884b03a 	or	r2,r5,r2
  8051b4:	1006943a 	slli	r3,r2,16
  8051b8:	10c6b03a 	or	r3,r2,r3
  8051bc:	41800a2e 	bgeu	r8,r6,8051e8 <memset+0x7c>
  8051c0:	4005883a 	mov	r2,r8
  8051c4:	31bffc04 	addi	r6,r6,-16
  8051c8:	38c00015 	stw	r3,0(r7)
  8051cc:	38c00115 	stw	r3,4(r7)
  8051d0:	38c00215 	stw	r3,8(r7)
  8051d4:	38c00315 	stw	r3,12(r7)
  8051d8:	39c00404 	addi	r7,r7,16
  8051dc:	11bff936 	bltu	r2,r6,8051c4 <memset+0x58>
  8051e0:	008000c4 	movi	r2,3
  8051e4:	1180052e 	bgeu	r2,r6,8051fc <memset+0x90>
  8051e8:	31bfff04 	addi	r6,r6,-4
  8051ec:	008000c4 	movi	r2,3
  8051f0:	38c00015 	stw	r3,0(r7)
  8051f4:	39c00104 	addi	r7,r7,4
  8051f8:	11bffb36 	bltu	r2,r6,8051e8 <memset+0x7c>
  8051fc:	3807883a 	mov	r3,r7
  805200:	003fe006 	br	805184 <memset+0x18>

00805204 <printf>:
  805204:	defffb04 	addi	sp,sp,-20
  805208:	dfc00115 	stw	ra,4(sp)
  80520c:	d9400215 	stw	r5,8(sp)
  805210:	d9800315 	stw	r6,12(sp)
  805214:	d9c00415 	stw	r7,16(sp)
  805218:	00802074 	movhi	r2,129
  80521c:	1091a404 	addi	r2,r2,18064
  805220:	10c00017 	ldw	r3,0(r2)
  805224:	200b883a 	mov	r5,r4
  805228:	d8800204 	addi	r2,sp,8
  80522c:	19000217 	ldw	r4,8(r3)
  805230:	100d883a 	mov	r6,r2
  805234:	d8800015 	stw	r2,0(sp)
  805238:	08075b40 	call	8075b4 <__vfprintf_internal>
  80523c:	dfc00117 	ldw	ra,4(sp)
  805240:	dec00504 	addi	sp,sp,20
  805244:	f800283a 	ret

00805248 <_printf_r>:
  805248:	defffc04 	addi	sp,sp,-16
  80524c:	dfc00115 	stw	ra,4(sp)
  805250:	d9800215 	stw	r6,8(sp)
  805254:	d9c00315 	stw	r7,12(sp)
  805258:	280d883a 	mov	r6,r5
  80525c:	21400217 	ldw	r5,8(r4)
  805260:	d8c00204 	addi	r3,sp,8
  805264:	180f883a 	mov	r7,r3
  805268:	d8c00015 	stw	r3,0(sp)
  80526c:	08057080 	call	805708 <___vfprintf_internal_r>
  805270:	dfc00117 	ldw	ra,4(sp)
  805274:	dec00404 	addi	sp,sp,16
  805278:	f800283a 	ret

0080527c <_sbrk_r>:
  80527c:	defffd04 	addi	sp,sp,-12
  805280:	dc000015 	stw	r16,0(sp)
  805284:	04002074 	movhi	r16,129
  805288:	8418f404 	addi	r16,r16,25552
  80528c:	dc400115 	stw	r17,4(sp)
  805290:	80000015 	stw	zero,0(r16)
  805294:	2023883a 	mov	r17,r4
  805298:	2809883a 	mov	r4,r5
  80529c:	dfc00215 	stw	ra,8(sp)
  8052a0:	080f1840 	call	80f184 <sbrk>
  8052a4:	1007883a 	mov	r3,r2
  8052a8:	00bfffc4 	movi	r2,-1
  8052ac:	18800626 	beq	r3,r2,8052c8 <_sbrk_r+0x4c>
  8052b0:	1805883a 	mov	r2,r3
  8052b4:	dfc00217 	ldw	ra,8(sp)
  8052b8:	dc400117 	ldw	r17,4(sp)
  8052bc:	dc000017 	ldw	r16,0(sp)
  8052c0:	dec00304 	addi	sp,sp,12
  8052c4:	f800283a 	ret
  8052c8:	80800017 	ldw	r2,0(r16)
  8052cc:	103ff826 	beq	r2,zero,8052b0 <_sbrk_r+0x34>
  8052d0:	88800015 	stw	r2,0(r17)
  8052d4:	1805883a 	mov	r2,r3
  8052d8:	dfc00217 	ldw	ra,8(sp)
  8052dc:	dc400117 	ldw	r17,4(sp)
  8052e0:	dc000017 	ldw	r16,0(sp)
  8052e4:	dec00304 	addi	sp,sp,12
  8052e8:	f800283a 	ret

008052ec <_raise_r>:
  8052ec:	defffd04 	addi	sp,sp,-12
  8052f0:	008007c4 	movi	r2,31
  8052f4:	dc400115 	stw	r17,4(sp)
  8052f8:	dc000015 	stw	r16,0(sp)
  8052fc:	dfc00215 	stw	ra,8(sp)
  805300:	2821883a 	mov	r16,r5
  805304:	2023883a 	mov	r17,r4
  805308:	11402736 	bltu	r2,r5,8053a8 <_raise_r+0xbc>
  80530c:	20c0b717 	ldw	r3,732(r4)
  805310:	18001326 	beq	r3,zero,805360 <_raise_r+0x74>
  805314:	2945883a 	add	r2,r5,r5
  805318:	1085883a 	add	r2,r2,r2
  80531c:	188b883a 	add	r5,r3,r2
  805320:	28c00017 	ldw	r3,0(r5)
  805324:	18000e26 	beq	r3,zero,805360 <_raise_r+0x74>
  805328:	01000044 	movi	r4,1
  80532c:	19000526 	beq	r3,r4,805344 <_raise_r+0x58>
  805330:	00bfffc4 	movi	r2,-1
  805334:	18801326 	beq	r3,r2,805384 <_raise_r+0x98>
  805338:	28000015 	stw	zero,0(r5)
  80533c:	8009883a 	mov	r4,r16
  805340:	183ee83a 	callr	r3
  805344:	0007883a 	mov	r3,zero
  805348:	1805883a 	mov	r2,r3
  80534c:	dfc00217 	ldw	ra,8(sp)
  805350:	dc400117 	ldw	r17,4(sp)
  805354:	dc000017 	ldw	r16,0(sp)
  805358:	dec00304 	addi	sp,sp,12
  80535c:	f800283a 	ret
  805360:	08055c40 	call	8055c4 <_getpid_r>
  805364:	100b883a 	mov	r5,r2
  805368:	8809883a 	mov	r4,r17
  80536c:	800d883a 	mov	r6,r16
  805370:	dfc00217 	ldw	ra,8(sp)
  805374:	dc400117 	ldw	r17,4(sp)
  805378:	dc000017 	ldw	r16,0(sp)
  80537c:	dec00304 	addi	sp,sp,12
  805380:	08055c81 	jmpi	8055c8 <_kill_r>
  805384:	2007883a 	mov	r3,r4
  805388:	00800584 	movi	r2,22
  80538c:	88800015 	stw	r2,0(r17)
  805390:	1805883a 	mov	r2,r3
  805394:	dfc00217 	ldw	ra,8(sp)
  805398:	dc400117 	ldw	r17,4(sp)
  80539c:	dc000017 	ldw	r16,0(sp)
  8053a0:	dec00304 	addi	sp,sp,12
  8053a4:	f800283a 	ret
  8053a8:	00800584 	movi	r2,22
  8053ac:	00ffffc4 	movi	r3,-1
  8053b0:	20800015 	stw	r2,0(r4)
  8053b4:	003fe406 	br	805348 <_raise_r+0x5c>

008053b8 <raise>:
  8053b8:	00802074 	movhi	r2,129
  8053bc:	1091a404 	addi	r2,r2,18064
  8053c0:	200b883a 	mov	r5,r4
  8053c4:	11000017 	ldw	r4,0(r2)
  8053c8:	08052ec1 	jmpi	8052ec <_raise_r>

008053cc <_init_signal_r>:
  8053cc:	2080b717 	ldw	r2,732(r4)
  8053d0:	defffe04 	addi	sp,sp,-8
  8053d4:	dc000015 	stw	r16,0(sp)
  8053d8:	dfc00115 	stw	ra,4(sp)
  8053dc:	2021883a 	mov	r16,r4
  8053e0:	10000526 	beq	r2,zero,8053f8 <_init_signal_r+0x2c>
  8053e4:	0005883a 	mov	r2,zero
  8053e8:	dfc00117 	ldw	ra,4(sp)
  8053ec:	dc000017 	ldw	r16,0(sp)
  8053f0:	dec00204 	addi	sp,sp,8
  8053f4:	f800283a 	ret
  8053f8:	01402004 	movi	r5,128
  8053fc:	0804a2c0 	call	804a2c <_malloc_r>
  805400:	1009883a 	mov	r4,r2
  805404:	8080b715 	stw	r2,732(r16)
  805408:	10000726 	beq	r2,zero,805428 <_init_signal_r+0x5c>
  80540c:	0007883a 	mov	r3,zero
  805410:	01402004 	movi	r5,128
  805414:	20c5883a 	add	r2,r4,r3
  805418:	18c00104 	addi	r3,r3,4
  80541c:	10000015 	stw	zero,0(r2)
  805420:	197ffc1e 	bne	r3,r5,805414 <_init_signal_r+0x48>
  805424:	003fef06 	br	8053e4 <_init_signal_r+0x18>
  805428:	00bfffc4 	movi	r2,-1
  80542c:	003fee06 	br	8053e8 <_init_signal_r+0x1c>

00805430 <_init_signal>:
  805430:	00802074 	movhi	r2,129
  805434:	1091a404 	addi	r2,r2,18064
  805438:	11000017 	ldw	r4,0(r2)
  80543c:	08053cc1 	jmpi	8053cc <_init_signal_r>

00805440 <__sigtramp_r>:
  805440:	defffd04 	addi	sp,sp,-12
  805444:	008007c4 	movi	r2,31
  805448:	dc000115 	stw	r16,4(sp)
  80544c:	dfc00215 	stw	ra,8(sp)
  805450:	2021883a 	mov	r16,r4
  805454:	11401336 	bltu	r2,r5,8054a4 <__sigtramp_r+0x64>
  805458:	20c0b717 	ldw	r3,732(r4)
  80545c:	18001f26 	beq	r3,zero,8054dc <__sigtramp_r+0x9c>
  805460:	2945883a 	add	r2,r5,r5
  805464:	1085883a 	add	r2,r2,r2
  805468:	10c9883a 	add	r4,r2,r3
  80546c:	20c00017 	ldw	r3,0(r4)
  805470:	18001626 	beq	r3,zero,8054cc <__sigtramp_r+0x8c>
  805474:	00bfffc4 	movi	r2,-1
  805478:	18801626 	beq	r3,r2,8054d4 <__sigtramp_r+0x94>
  80547c:	00800044 	movi	r2,1
  805480:	18800d26 	beq	r3,r2,8054b8 <__sigtramp_r+0x78>
  805484:	20000015 	stw	zero,0(r4)
  805488:	2809883a 	mov	r4,r5
  80548c:	183ee83a 	callr	r3
  805490:	0005883a 	mov	r2,zero
  805494:	dfc00217 	ldw	ra,8(sp)
  805498:	dc000117 	ldw	r16,4(sp)
  80549c:	dec00304 	addi	sp,sp,12
  8054a0:	f800283a 	ret
  8054a4:	00bfffc4 	movi	r2,-1
  8054a8:	dfc00217 	ldw	ra,8(sp)
  8054ac:	dc000117 	ldw	r16,4(sp)
  8054b0:	dec00304 	addi	sp,sp,12
  8054b4:	f800283a 	ret
  8054b8:	008000c4 	movi	r2,3
  8054bc:	dfc00217 	ldw	ra,8(sp)
  8054c0:	dc000117 	ldw	r16,4(sp)
  8054c4:	dec00304 	addi	sp,sp,12
  8054c8:	f800283a 	ret
  8054cc:	00800044 	movi	r2,1
  8054d0:	003ff006 	br	805494 <__sigtramp_r+0x54>
  8054d4:	00800084 	movi	r2,2
  8054d8:	003fee06 	br	805494 <__sigtramp_r+0x54>
  8054dc:	d9400015 	stw	r5,0(sp)
  8054e0:	08053cc0 	call	8053cc <_init_signal_r>
  8054e4:	d9400017 	ldw	r5,0(sp)
  8054e8:	103fee1e 	bne	r2,zero,8054a4 <__sigtramp_r+0x64>
  8054ec:	80c0b717 	ldw	r3,732(r16)
  8054f0:	003fdb06 	br	805460 <__sigtramp_r+0x20>

008054f4 <__sigtramp>:
  8054f4:	00802074 	movhi	r2,129
  8054f8:	1091a404 	addi	r2,r2,18064
  8054fc:	200b883a 	mov	r5,r4
  805500:	11000017 	ldw	r4,0(r2)
  805504:	08054401 	jmpi	805440 <__sigtramp_r>

00805508 <_signal_r>:
  805508:	defffc04 	addi	sp,sp,-16
  80550c:	008007c4 	movi	r2,31
  805510:	dc800215 	stw	r18,8(sp)
  805514:	dc400115 	stw	r17,4(sp)
  805518:	dc000015 	stw	r16,0(sp)
  80551c:	dfc00315 	stw	ra,12(sp)
  805520:	2823883a 	mov	r17,r5
  805524:	00ffffc4 	movi	r3,-1
  805528:	3025883a 	mov	r18,r6
  80552c:	2021883a 	mov	r16,r4
  805530:	1140092e 	bgeu	r2,r5,805558 <_signal_r+0x50>
  805534:	00800584 	movi	r2,22
  805538:	20800015 	stw	r2,0(r4)
  80553c:	1805883a 	mov	r2,r3
  805540:	dfc00317 	ldw	ra,12(sp)
  805544:	dc800217 	ldw	r18,8(sp)
  805548:	dc400117 	ldw	r17,4(sp)
  80554c:	dc000017 	ldw	r16,0(sp)
  805550:	dec00404 	addi	sp,sp,16
  805554:	f800283a 	ret
  805558:	2140b717 	ldw	r5,732(r4)
  80555c:	28000c26 	beq	r5,zero,805590 <_signal_r+0x88>
  805560:	8c45883a 	add	r2,r17,r17
  805564:	1085883a 	add	r2,r2,r2
  805568:	1145883a 	add	r2,r2,r5
  80556c:	10c00017 	ldw	r3,0(r2)
  805570:	14800015 	stw	r18,0(r2)
  805574:	1805883a 	mov	r2,r3
  805578:	dfc00317 	ldw	ra,12(sp)
  80557c:	dc800217 	ldw	r18,8(sp)
  805580:	dc400117 	ldw	r17,4(sp)
  805584:	dc000017 	ldw	r16,0(sp)
  805588:	dec00404 	addi	sp,sp,16
  80558c:	f800283a 	ret
  805590:	08053cc0 	call	8053cc <_init_signal_r>
  805594:	1000021e 	bne	r2,zero,8055a0 <_signal_r+0x98>
  805598:	8140b717 	ldw	r5,732(r16)
  80559c:	003ff006 	br	805560 <_signal_r+0x58>
  8055a0:	00ffffc4 	movi	r3,-1
  8055a4:	003fe506 	br	80553c <_signal_r+0x34>

008055a8 <signal>:
  8055a8:	01802074 	movhi	r6,129
  8055ac:	3191a404 	addi	r6,r6,18064
  8055b0:	2007883a 	mov	r3,r4
  8055b4:	31000017 	ldw	r4,0(r6)
  8055b8:	280d883a 	mov	r6,r5
  8055bc:	180b883a 	mov	r5,r3
  8055c0:	08055081 	jmpi	805508 <_signal_r>

008055c4 <_getpid_r>:
  8055c4:	080e81c1 	jmpi	80e81c <getpid>

008055c8 <_kill_r>:
  8055c8:	defffd04 	addi	sp,sp,-12
  8055cc:	dc000015 	stw	r16,0(sp)
  8055d0:	04002074 	movhi	r16,129
  8055d4:	8418f404 	addi	r16,r16,25552
  8055d8:	dc400115 	stw	r17,4(sp)
  8055dc:	80000015 	stw	zero,0(r16)
  8055e0:	2023883a 	mov	r17,r4
  8055e4:	2809883a 	mov	r4,r5
  8055e8:	300b883a 	mov	r5,r6
  8055ec:	dfc00215 	stw	ra,8(sp)
  8055f0:	080eb1c0 	call	80eb1c <kill>
  8055f4:	1007883a 	mov	r3,r2
  8055f8:	00bfffc4 	movi	r2,-1
  8055fc:	18800626 	beq	r3,r2,805618 <_kill_r+0x50>
  805600:	1805883a 	mov	r2,r3
  805604:	dfc00217 	ldw	ra,8(sp)
  805608:	dc400117 	ldw	r17,4(sp)
  80560c:	dc000017 	ldw	r16,0(sp)
  805610:	dec00304 	addi	sp,sp,12
  805614:	f800283a 	ret
  805618:	80800017 	ldw	r2,0(r16)
  80561c:	103ff826 	beq	r2,zero,805600 <_kill_r+0x38>
  805620:	88800015 	stw	r2,0(r17)
  805624:	1805883a 	mov	r2,r3
  805628:	dfc00217 	ldw	ra,8(sp)
  80562c:	dc400117 	ldw	r17,4(sp)
  805630:	dc000017 	ldw	r16,0(sp)
  805634:	dec00304 	addi	sp,sp,12
  805638:	f800283a 	ret

0080563c <strlen>:
  80563c:	208000cc 	andi	r2,r4,3
  805640:	2011883a 	mov	r8,r4
  805644:	1000161e 	bne	r2,zero,8056a0 <strlen+0x64>
  805648:	20c00017 	ldw	r3,0(r4)
  80564c:	017fbff4 	movhi	r5,65279
  805650:	297fbfc4 	addi	r5,r5,-257
  805654:	01e02074 	movhi	r7,32897
  805658:	39e02004 	addi	r7,r7,-32640
  80565c:	1945883a 	add	r2,r3,r5
  805660:	11c4703a 	and	r2,r2,r7
  805664:	00c6303a 	nor	r3,zero,r3
  805668:	1886703a 	and	r3,r3,r2
  80566c:	18000c1e 	bne	r3,zero,8056a0 <strlen+0x64>
  805670:	280d883a 	mov	r6,r5
  805674:	380b883a 	mov	r5,r7
  805678:	21000104 	addi	r4,r4,4
  80567c:	20800017 	ldw	r2,0(r4)
  805680:	1187883a 	add	r3,r2,r6
  805684:	1946703a 	and	r3,r3,r5
  805688:	0084303a 	nor	r2,zero,r2
  80568c:	10c4703a 	and	r2,r2,r3
  805690:	103ff926 	beq	r2,zero,805678 <strlen+0x3c>
  805694:	20800007 	ldb	r2,0(r4)
  805698:	10000326 	beq	r2,zero,8056a8 <strlen+0x6c>
  80569c:	21000044 	addi	r4,r4,1
  8056a0:	20800007 	ldb	r2,0(r4)
  8056a4:	103ffd1e 	bne	r2,zero,80569c <strlen+0x60>
  8056a8:	2205c83a 	sub	r2,r4,r8
  8056ac:	f800283a 	ret

008056b0 <__sprint_r>:
  8056b0:	30800217 	ldw	r2,8(r6)
  8056b4:	defffe04 	addi	sp,sp,-8
  8056b8:	dc000015 	stw	r16,0(sp)
  8056bc:	dfc00115 	stw	ra,4(sp)
  8056c0:	3021883a 	mov	r16,r6
  8056c4:	0007883a 	mov	r3,zero
  8056c8:	1000061e 	bne	r2,zero,8056e4 <__sprint_r+0x34>
  8056cc:	1805883a 	mov	r2,r3
  8056d0:	30000115 	stw	zero,4(r6)
  8056d4:	dfc00117 	ldw	ra,4(sp)
  8056d8:	dc000017 	ldw	r16,0(sp)
  8056dc:	dec00204 	addi	sp,sp,8
  8056e0:	f800283a 	ret
  8056e4:	08099040 	call	809904 <__sfvwrite_r>
  8056e8:	1007883a 	mov	r3,r2
  8056ec:	1805883a 	mov	r2,r3
  8056f0:	80000115 	stw	zero,4(r16)
  8056f4:	80000215 	stw	zero,8(r16)
  8056f8:	dfc00117 	ldw	ra,4(sp)
  8056fc:	dc000017 	ldw	r16,0(sp)
  805700:	dec00204 	addi	sp,sp,8
  805704:	f800283a 	ret

00805708 <___vfprintf_internal_r>:
  805708:	defea404 	addi	sp,sp,-1392
  80570c:	dd815815 	stw	r22,1376(sp)
  805710:	dc015215 	stw	r16,1352(sp)
  805714:	d9c15115 	stw	r7,1348(sp)
  805718:	dfc15b15 	stw	ra,1388(sp)
  80571c:	df015a15 	stw	fp,1384(sp)
  805720:	ddc15915 	stw	r23,1380(sp)
  805724:	dd415715 	stw	r21,1372(sp)
  805728:	dd015615 	stw	r20,1368(sp)
  80572c:	dcc15515 	stw	r19,1364(sp)
  805730:	dc815415 	stw	r18,1360(sp)
  805734:	dc415315 	stw	r17,1356(sp)
  805738:	282d883a 	mov	r22,r5
  80573c:	3021883a 	mov	r16,r6
  805740:	d9014f15 	stw	r4,1340(sp)
  805744:	0809f280 	call	809f28 <_localeconv_r>
  805748:	10800017 	ldw	r2,0(r2)
  80574c:	d9c15117 	ldw	r7,1348(sp)
  805750:	d8814915 	stw	r2,1316(sp)
  805754:	d8814f17 	ldw	r2,1340(sp)
  805758:	10000226 	beq	r2,zero,805764 <___vfprintf_internal_r+0x5c>
  80575c:	10800e17 	ldw	r2,56(r2)
  805760:	10020d26 	beq	r2,zero,805f98 <___vfprintf_internal_r+0x890>
  805764:	b080030b 	ldhu	r2,12(r22)
  805768:	1080020c 	andi	r2,r2,8
  80576c:	10020e26 	beq	r2,zero,805fa8 <___vfprintf_internal_r+0x8a0>
  805770:	b0800417 	ldw	r2,16(r22)
  805774:	10020c26 	beq	r2,zero,805fa8 <___vfprintf_internal_r+0x8a0>
  805778:	b200030b 	ldhu	r8,12(r22)
  80577c:	00800284 	movi	r2,10
  805780:	40c0068c 	andi	r3,r8,26
  805784:	18802f1e 	bne	r3,r2,805844 <___vfprintf_internal_r+0x13c>
  805788:	b080038f 	ldh	r2,14(r22)
  80578c:	10002d16 	blt	r2,zero,805844 <___vfprintf_internal_r+0x13c>
  805790:	b240038b 	ldhu	r9,14(r22)
  805794:	b2800717 	ldw	r10,28(r22)
  805798:	b2c00917 	ldw	r11,36(r22)
  80579c:	d9014f17 	ldw	r4,1340(sp)
  8057a0:	dc402904 	addi	r17,sp,164
  8057a4:	d8804004 	addi	r2,sp,256
  8057a8:	00c10004 	movi	r3,1024
  8057ac:	423fff4c 	andi	r8,r8,65533
  8057b0:	800d883a 	mov	r6,r16
  8057b4:	880b883a 	mov	r5,r17
  8057b8:	da002c0d 	sth	r8,176(sp)
  8057bc:	da402c8d 	sth	r9,178(sp)
  8057c0:	da803015 	stw	r10,192(sp)
  8057c4:	dac03215 	stw	r11,200(sp)
  8057c8:	d8802d15 	stw	r2,180(sp)
  8057cc:	d8c02e15 	stw	r3,184(sp)
  8057d0:	d8802915 	stw	r2,164(sp)
  8057d4:	d8c02b15 	stw	r3,172(sp)
  8057d8:	d8002f15 	stw	zero,188(sp)
  8057dc:	08057080 	call	805708 <___vfprintf_internal_r>
  8057e0:	d8814b15 	stw	r2,1324(sp)
  8057e4:	10000416 	blt	r2,zero,8057f8 <___vfprintf_internal_r+0xf0>
  8057e8:	d9014f17 	ldw	r4,1340(sp)
  8057ec:	880b883a 	mov	r5,r17
  8057f0:	0808fd40 	call	808fd4 <_fflush_r>
  8057f4:	1002321e 	bne	r2,zero,8060c0 <___vfprintf_internal_r+0x9b8>
  8057f8:	d8802c0b 	ldhu	r2,176(sp)
  8057fc:	1080100c 	andi	r2,r2,64
  805800:	10000326 	beq	r2,zero,805810 <___vfprintf_internal_r+0x108>
  805804:	b080030b 	ldhu	r2,12(r22)
  805808:	10801014 	ori	r2,r2,64
  80580c:	b080030d 	sth	r2,12(r22)
  805810:	d8814b17 	ldw	r2,1324(sp)
  805814:	dfc15b17 	ldw	ra,1388(sp)
  805818:	df015a17 	ldw	fp,1384(sp)
  80581c:	ddc15917 	ldw	r23,1380(sp)
  805820:	dd815817 	ldw	r22,1376(sp)
  805824:	dd415717 	ldw	r21,1372(sp)
  805828:	dd015617 	ldw	r20,1368(sp)
  80582c:	dcc15517 	ldw	r19,1364(sp)
  805830:	dc815417 	ldw	r18,1360(sp)
  805834:	dc415317 	ldw	r17,1356(sp)
  805838:	dc015217 	ldw	r16,1352(sp)
  80583c:	dec15c04 	addi	sp,sp,1392
  805840:	f800283a 	ret
  805844:	0005883a 	mov	r2,zero
  805848:	0007883a 	mov	r3,zero
  80584c:	dd401904 	addi	r21,sp,100
  805850:	d8814215 	stw	r2,1288(sp)
  805854:	802f883a 	mov	r23,r16
  805858:	d8c14315 	stw	r3,1292(sp)
  80585c:	d8014b15 	stw	zero,1324(sp)
  805860:	d8014815 	stw	zero,1312(sp)
  805864:	d8014415 	stw	zero,1296(sp)
  805868:	d8014715 	stw	zero,1308(sp)
  80586c:	dd400c15 	stw	r21,48(sp)
  805870:	d8000e15 	stw	zero,56(sp)
  805874:	d8000d15 	stw	zero,52(sp)
  805878:	b8800007 	ldb	r2,0(r23)
  80587c:	10001926 	beq	r2,zero,8058e4 <___vfprintf_internal_r+0x1dc>
  805880:	00c00944 	movi	r3,37
  805884:	10c01726 	beq	r2,r3,8058e4 <___vfprintf_internal_r+0x1dc>
  805888:	b821883a 	mov	r16,r23
  80588c:	00000106 	br	805894 <___vfprintf_internal_r+0x18c>
  805890:	10c00326 	beq	r2,r3,8058a0 <___vfprintf_internal_r+0x198>
  805894:	84000044 	addi	r16,r16,1
  805898:	80800007 	ldb	r2,0(r16)
  80589c:	103ffc1e 	bne	r2,zero,805890 <___vfprintf_internal_r+0x188>
  8058a0:	85e7c83a 	sub	r19,r16,r23
  8058a4:	98000e26 	beq	r19,zero,8058e0 <___vfprintf_internal_r+0x1d8>
  8058a8:	dc800e17 	ldw	r18,56(sp)
  8058ac:	dc400d17 	ldw	r17,52(sp)
  8058b0:	008001c4 	movi	r2,7
  8058b4:	94e5883a 	add	r18,r18,r19
  8058b8:	8c400044 	addi	r17,r17,1
  8058bc:	adc00015 	stw	r23,0(r21)
  8058c0:	dc800e15 	stw	r18,56(sp)
  8058c4:	acc00115 	stw	r19,4(r21)
  8058c8:	dc400d15 	stw	r17,52(sp)
  8058cc:	14428b16 	blt	r2,r17,8062fc <___vfprintf_internal_r+0xbf4>
  8058d0:	ad400204 	addi	r21,r21,8
  8058d4:	d9014b17 	ldw	r4,1324(sp)
  8058d8:	24c9883a 	add	r4,r4,r19
  8058dc:	d9014b15 	stw	r4,1324(sp)
  8058e0:	802f883a 	mov	r23,r16
  8058e4:	b8800007 	ldb	r2,0(r23)
  8058e8:	10013c26 	beq	r2,zero,805ddc <___vfprintf_internal_r+0x6d4>
  8058ec:	bdc00044 	addi	r23,r23,1
  8058f0:	d8000405 	stb	zero,16(sp)
  8058f4:	b8c00007 	ldb	r3,0(r23)
  8058f8:	04ffffc4 	movi	r19,-1
  8058fc:	d8014c15 	stw	zero,1328(sp)
  805900:	d8014a15 	stw	zero,1320(sp)
  805904:	d8c14d15 	stw	r3,1332(sp)
  805908:	bdc00044 	addi	r23,r23,1
  80590c:	d9414d17 	ldw	r5,1332(sp)
  805910:	00801604 	movi	r2,88
  805914:	28fff804 	addi	r3,r5,-32
  805918:	10c06036 	bltu	r2,r3,805a9c <___vfprintf_internal_r+0x394>
  80591c:	18c5883a 	add	r2,r3,r3
  805920:	1085883a 	add	r2,r2,r2
  805924:	00c02034 	movhi	r3,128
  805928:	18d64e04 	addi	r3,r3,22840
  80592c:	10c5883a 	add	r2,r2,r3
  805930:	11000017 	ldw	r4,0(r2)
  805934:	2000683a 	jmp	r4
  805938:	008068ac 	andhi	r2,zero,418
  80593c:	00805a9c 	xori	r2,zero,362
  805940:	00805a9c 	xori	r2,zero,362
  805944:	00806898 	cmpnei	r2,zero,418
  805948:	00805a9c 	xori	r2,zero,362
  80594c:	00805a9c 	xori	r2,zero,362
  805950:	00805a9c 	xori	r2,zero,362
  805954:	00805a9c 	xori	r2,zero,362
  805958:	00805a9c 	xori	r2,zero,362
  80595c:	00805a9c 	xori	r2,zero,362
  805960:	00806678 	rdprs	r2,zero,409
  805964:	00806888 	cmpgei	r2,zero,418
  805968:	00805a9c 	xori	r2,zero,362
  80596c:	00806690 	cmplti	r2,zero,410
  805970:	00806924 	muli	r2,zero,420
  805974:	00805a9c 	xori	r2,zero,362
  805978:	00806910 	cmplti	r2,zero,420
  80597c:	008068d8 	cmpnei	r2,zero,419
  805980:	008068d8 	cmpnei	r2,zero,419
  805984:	008068d8 	cmpnei	r2,zero,419
  805988:	008068d8 	cmpnei	r2,zero,419
  80598c:	008068d8 	cmpnei	r2,zero,419
  805990:	008068d8 	cmpnei	r2,zero,419
  805994:	008068d8 	cmpnei	r2,zero,419
  805998:	008068d8 	cmpnei	r2,zero,419
  80599c:	008068d8 	cmpnei	r2,zero,419
  8059a0:	00805a9c 	xori	r2,zero,362
  8059a4:	00805a9c 	xori	r2,zero,362
  8059a8:	00805a9c 	xori	r2,zero,362
  8059ac:	00805a9c 	xori	r2,zero,362
  8059b0:	00805a9c 	xori	r2,zero,362
  8059b4:	00805a9c 	xori	r2,zero,362
  8059b8:	00805a9c 	xori	r2,zero,362
  8059bc:	00805a9c 	xori	r2,zero,362
  8059c0:	00805a9c 	xori	r2,zero,362
  8059c4:	00805a9c 	xori	r2,zero,362
  8059c8:	008060f4 	movhi	r2,387
  8059cc:	00806760 	cmpeqi	r2,zero,413
  8059d0:	00805a9c 	xori	r2,zero,362
  8059d4:	00806760 	cmpeqi	r2,zero,413
  8059d8:	00805a9c 	xori	r2,zero,362
  8059dc:	00805a9c 	xori	r2,zero,362
  8059e0:	00805a9c 	xori	r2,zero,362
  8059e4:	00805a9c 	xori	r2,zero,362
  8059e8:	008068c4 	movi	r2,419
  8059ec:	00805a9c 	xori	r2,zero,362
  8059f0:	00805a9c 	xori	r2,zero,362
  8059f4:	008061a8 	cmpgeui	r2,zero,390
  8059f8:	00805a9c 	xori	r2,zero,362
  8059fc:	00805a9c 	xori	r2,zero,362
  805a00:	00805a9c 	xori	r2,zero,362
  805a04:	00805a9c 	xori	r2,zero,362
  805a08:	00805a9c 	xori	r2,zero,362
  805a0c:	008061f4 	movhi	r2,391
  805a10:	00805a9c 	xori	r2,zero,362
  805a14:	00805a9c 	xori	r2,zero,362
  805a18:	00806814 	movui	r2,416
  805a1c:	00805a9c 	xori	r2,zero,362
  805a20:	00805a9c 	xori	r2,zero,362
  805a24:	00805a9c 	xori	r2,zero,362
  805a28:	00805a9c 	xori	r2,zero,362
  805a2c:	00805a9c 	xori	r2,zero,362
  805a30:	00805a9c 	xori	r2,zero,362
  805a34:	00805a9c 	xori	r2,zero,362
  805a38:	00805a9c 	xori	r2,zero,362
  805a3c:	00805a9c 	xori	r2,zero,362
  805a40:	00805a9c 	xori	r2,zero,362
  805a44:	008067e8 	cmpgeui	r2,zero,415
  805a48:	00806100 	call	80610 <__alt_mem_sdram_controller-0x77f9f0>
  805a4c:	00806760 	cmpeqi	r2,zero,413
  805a50:	00806760 	cmpeqi	r2,zero,413
  805a54:	00806760 	cmpeqi	r2,zero,413
  805a58:	0080674c 	andi	r2,zero,413
  805a5c:	00806100 	call	80610 <__alt_mem_sdram_controller-0x77f9f0>
  805a60:	00805a9c 	xori	r2,zero,362
  805a64:	00805a9c 	xori	r2,zero,362
  805a68:	008066d4 	movui	r2,411
  805a6c:	00805a9c 	xori	r2,zero,362
  805a70:	008066a4 	muli	r2,zero,410
  805a74:	008061b4 	movhi	r2,390
  805a78:	00806704 	movi	r2,412
  805a7c:	008066f0 	cmpltui	r2,zero,411
  805a80:	00805a9c 	xori	r2,zero,362
  805a84:	00806980 	call	80698 <__alt_mem_sdram_controller-0x77f968>
  805a88:	00805a9c 	xori	r2,zero,362
  805a8c:	00806200 	call	80620 <__alt_mem_sdram_controller-0x77f9e0>
  805a90:	00805a9c 	xori	r2,zero,362
  805a94:	00805a9c 	xori	r2,zero,362
  805a98:	00806878 	rdprs	r2,zero,417
  805a9c:	d9014d17 	ldw	r4,1332(sp)
  805aa0:	2000ce26 	beq	r4,zero,805ddc <___vfprintf_internal_r+0x6d4>
  805aa4:	01400044 	movi	r5,1
  805aa8:	d9800f04 	addi	r6,sp,60
  805aac:	d9c14015 	stw	r7,1280(sp)
  805ab0:	d9414515 	stw	r5,1300(sp)
  805ab4:	d9814115 	stw	r6,1284(sp)
  805ab8:	280f883a 	mov	r7,r5
  805abc:	d9000f05 	stb	r4,60(sp)
  805ac0:	d8000405 	stb	zero,16(sp)
  805ac4:	d8014615 	stw	zero,1304(sp)
  805ac8:	d8c14c17 	ldw	r3,1328(sp)
  805acc:	1880008c 	andi	r2,r3,2
  805ad0:	1005003a 	cmpeq	r2,r2,zero
  805ad4:	d8815015 	stw	r2,1344(sp)
  805ad8:	1000031e 	bne	r2,zero,805ae8 <___vfprintf_internal_r+0x3e0>
  805adc:	d9014517 	ldw	r4,1300(sp)
  805ae0:	21000084 	addi	r4,r4,2
  805ae4:	d9014515 	stw	r4,1300(sp)
  805ae8:	d9414c17 	ldw	r5,1328(sp)
  805aec:	2940210c 	andi	r5,r5,132
  805af0:	d9414e15 	stw	r5,1336(sp)
  805af4:	28002d1e 	bne	r5,zero,805bac <___vfprintf_internal_r+0x4a4>
  805af8:	d9814a17 	ldw	r6,1320(sp)
  805afc:	d8814517 	ldw	r2,1300(sp)
  805b00:	30a1c83a 	sub	r16,r6,r2
  805b04:	0400290e 	bge	zero,r16,805bac <___vfprintf_internal_r+0x4a4>
  805b08:	00800404 	movi	r2,16
  805b0c:	1404580e 	bge	r2,r16,806c70 <___vfprintf_internal_r+0x1568>
  805b10:	dc800e17 	ldw	r18,56(sp)
  805b14:	dc400d17 	ldw	r17,52(sp)
  805b18:	1027883a 	mov	r19,r2
  805b1c:	07002074 	movhi	fp,129
  805b20:	e709c284 	addi	fp,fp,9994
  805b24:	050001c4 	movi	r20,7
  805b28:	00000306 	br	805b38 <___vfprintf_internal_r+0x430>
  805b2c:	843ffc04 	addi	r16,r16,-16
  805b30:	ad400204 	addi	r21,r21,8
  805b34:	9c00130e 	bge	r19,r16,805b84 <___vfprintf_internal_r+0x47c>
  805b38:	94800404 	addi	r18,r18,16
  805b3c:	8c400044 	addi	r17,r17,1
  805b40:	af000015 	stw	fp,0(r21)
  805b44:	acc00115 	stw	r19,4(r21)
  805b48:	dc800e15 	stw	r18,56(sp)
  805b4c:	dc400d15 	stw	r17,52(sp)
  805b50:	a47ff60e 	bge	r20,r17,805b2c <___vfprintf_internal_r+0x424>
  805b54:	d9014f17 	ldw	r4,1340(sp)
  805b58:	b00b883a 	mov	r5,r22
  805b5c:	d9800c04 	addi	r6,sp,48
  805b60:	d9c15115 	stw	r7,1348(sp)
  805b64:	08056b00 	call	8056b0 <__sprint_r>
  805b68:	d9c15117 	ldw	r7,1348(sp)
  805b6c:	10009e1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  805b70:	843ffc04 	addi	r16,r16,-16
  805b74:	dc800e17 	ldw	r18,56(sp)
  805b78:	dc400d17 	ldw	r17,52(sp)
  805b7c:	dd401904 	addi	r21,sp,100
  805b80:	9c3fed16 	blt	r19,r16,805b38 <___vfprintf_internal_r+0x430>
  805b84:	9425883a 	add	r18,r18,r16
  805b88:	8c400044 	addi	r17,r17,1
  805b8c:	008001c4 	movi	r2,7
  805b90:	af000015 	stw	fp,0(r21)
  805b94:	ac000115 	stw	r16,4(r21)
  805b98:	dc800e15 	stw	r18,56(sp)
  805b9c:	dc400d15 	stw	r17,52(sp)
  805ba0:	1441f516 	blt	r2,r17,806378 <___vfprintf_internal_r+0xc70>
  805ba4:	ad400204 	addi	r21,r21,8
  805ba8:	00000206 	br	805bb4 <___vfprintf_internal_r+0x4ac>
  805bac:	dc800e17 	ldw	r18,56(sp)
  805bb0:	dc400d17 	ldw	r17,52(sp)
  805bb4:	d8800407 	ldb	r2,16(sp)
  805bb8:	10000b26 	beq	r2,zero,805be8 <___vfprintf_internal_r+0x4e0>
  805bbc:	00800044 	movi	r2,1
  805bc0:	94800044 	addi	r18,r18,1
  805bc4:	8c400044 	addi	r17,r17,1
  805bc8:	a8800115 	stw	r2,4(r21)
  805bcc:	d8c00404 	addi	r3,sp,16
  805bd0:	008001c4 	movi	r2,7
  805bd4:	a8c00015 	stw	r3,0(r21)
  805bd8:	dc800e15 	stw	r18,56(sp)
  805bdc:	dc400d15 	stw	r17,52(sp)
  805be0:	1441da16 	blt	r2,r17,80634c <___vfprintf_internal_r+0xc44>
  805be4:	ad400204 	addi	r21,r21,8
  805be8:	d9015017 	ldw	r4,1344(sp)
  805bec:	20000b1e 	bne	r4,zero,805c1c <___vfprintf_internal_r+0x514>
  805bf0:	d8800444 	addi	r2,sp,17
  805bf4:	94800084 	addi	r18,r18,2
  805bf8:	8c400044 	addi	r17,r17,1
  805bfc:	a8800015 	stw	r2,0(r21)
  805c00:	00c00084 	movi	r3,2
  805c04:	008001c4 	movi	r2,7
  805c08:	a8c00115 	stw	r3,4(r21)
  805c0c:	dc800e15 	stw	r18,56(sp)
  805c10:	dc400d15 	stw	r17,52(sp)
  805c14:	1441c216 	blt	r2,r17,806320 <___vfprintf_internal_r+0xc18>
  805c18:	ad400204 	addi	r21,r21,8
  805c1c:	d9414e17 	ldw	r5,1336(sp)
  805c20:	00802004 	movi	r2,128
  805c24:	2880b126 	beq	r5,r2,805eec <___vfprintf_internal_r+0x7e4>
  805c28:	d8c14617 	ldw	r3,1304(sp)
  805c2c:	19e1c83a 	sub	r16,r3,r7
  805c30:	0400260e 	bge	zero,r16,805ccc <___vfprintf_internal_r+0x5c4>
  805c34:	00800404 	movi	r2,16
  805c38:	1403c90e 	bge	r2,r16,806b60 <___vfprintf_internal_r+0x1458>
  805c3c:	1027883a 	mov	r19,r2
  805c40:	07002074 	movhi	fp,129
  805c44:	e709be84 	addi	fp,fp,9978
  805c48:	050001c4 	movi	r20,7
  805c4c:	00000306 	br	805c5c <___vfprintf_internal_r+0x554>
  805c50:	843ffc04 	addi	r16,r16,-16
  805c54:	ad400204 	addi	r21,r21,8
  805c58:	9c00130e 	bge	r19,r16,805ca8 <___vfprintf_internal_r+0x5a0>
  805c5c:	94800404 	addi	r18,r18,16
  805c60:	8c400044 	addi	r17,r17,1
  805c64:	af000015 	stw	fp,0(r21)
  805c68:	acc00115 	stw	r19,4(r21)
  805c6c:	dc800e15 	stw	r18,56(sp)
  805c70:	dc400d15 	stw	r17,52(sp)
  805c74:	a47ff60e 	bge	r20,r17,805c50 <___vfprintf_internal_r+0x548>
  805c78:	d9014f17 	ldw	r4,1340(sp)
  805c7c:	b00b883a 	mov	r5,r22
  805c80:	d9800c04 	addi	r6,sp,48
  805c84:	d9c15115 	stw	r7,1348(sp)
  805c88:	08056b00 	call	8056b0 <__sprint_r>
  805c8c:	d9c15117 	ldw	r7,1348(sp)
  805c90:	1000551e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  805c94:	843ffc04 	addi	r16,r16,-16
  805c98:	dc800e17 	ldw	r18,56(sp)
  805c9c:	dc400d17 	ldw	r17,52(sp)
  805ca0:	dd401904 	addi	r21,sp,100
  805ca4:	9c3fed16 	blt	r19,r16,805c5c <___vfprintf_internal_r+0x554>
  805ca8:	9425883a 	add	r18,r18,r16
  805cac:	8c400044 	addi	r17,r17,1
  805cb0:	008001c4 	movi	r2,7
  805cb4:	af000015 	stw	fp,0(r21)
  805cb8:	ac000115 	stw	r16,4(r21)
  805cbc:	dc800e15 	stw	r18,56(sp)
  805cc0:	dc400d15 	stw	r17,52(sp)
  805cc4:	14418216 	blt	r2,r17,8062d0 <___vfprintf_internal_r+0xbc8>
  805cc8:	ad400204 	addi	r21,r21,8
  805ccc:	d9014c17 	ldw	r4,1328(sp)
  805cd0:	2080400c 	andi	r2,r4,256
  805cd4:	10004a1e 	bne	r2,zero,805e00 <___vfprintf_internal_r+0x6f8>
  805cd8:	d9414117 	ldw	r5,1284(sp)
  805cdc:	91e5883a 	add	r18,r18,r7
  805ce0:	8c400044 	addi	r17,r17,1
  805ce4:	008001c4 	movi	r2,7
  805ce8:	a9400015 	stw	r5,0(r21)
  805cec:	a9c00115 	stw	r7,4(r21)
  805cf0:	dc800e15 	stw	r18,56(sp)
  805cf4:	dc400d15 	stw	r17,52(sp)
  805cf8:	14416716 	blt	r2,r17,806298 <___vfprintf_internal_r+0xb90>
  805cfc:	a8c00204 	addi	r3,r21,8
  805d00:	d9814c17 	ldw	r6,1328(sp)
  805d04:	3080010c 	andi	r2,r6,4
  805d08:	10002826 	beq	r2,zero,805dac <___vfprintf_internal_r+0x6a4>
  805d0c:	d8814a17 	ldw	r2,1320(sp)
  805d10:	d9014517 	ldw	r4,1300(sp)
  805d14:	1121c83a 	sub	r16,r2,r4
  805d18:	0400240e 	bge	zero,r16,805dac <___vfprintf_internal_r+0x6a4>
  805d1c:	00800404 	movi	r2,16
  805d20:	14044f0e 	bge	r2,r16,806e60 <___vfprintf_internal_r+0x1758>
  805d24:	dc400d17 	ldw	r17,52(sp)
  805d28:	1027883a 	mov	r19,r2
  805d2c:	07002074 	movhi	fp,129
  805d30:	e709c284 	addi	fp,fp,9994
  805d34:	050001c4 	movi	r20,7
  805d38:	00000306 	br	805d48 <___vfprintf_internal_r+0x640>
  805d3c:	843ffc04 	addi	r16,r16,-16
  805d40:	18c00204 	addi	r3,r3,8
  805d44:	9c00110e 	bge	r19,r16,805d8c <___vfprintf_internal_r+0x684>
  805d48:	94800404 	addi	r18,r18,16
  805d4c:	8c400044 	addi	r17,r17,1
  805d50:	1f000015 	stw	fp,0(r3)
  805d54:	1cc00115 	stw	r19,4(r3)
  805d58:	dc800e15 	stw	r18,56(sp)
  805d5c:	dc400d15 	stw	r17,52(sp)
  805d60:	a47ff60e 	bge	r20,r17,805d3c <___vfprintf_internal_r+0x634>
  805d64:	d9014f17 	ldw	r4,1340(sp)
  805d68:	b00b883a 	mov	r5,r22
  805d6c:	d9800c04 	addi	r6,sp,48
  805d70:	08056b00 	call	8056b0 <__sprint_r>
  805d74:	10001c1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  805d78:	843ffc04 	addi	r16,r16,-16
  805d7c:	dc800e17 	ldw	r18,56(sp)
  805d80:	dc400d17 	ldw	r17,52(sp)
  805d84:	d8c01904 	addi	r3,sp,100
  805d88:	9c3fef16 	blt	r19,r16,805d48 <___vfprintf_internal_r+0x640>
  805d8c:	9425883a 	add	r18,r18,r16
  805d90:	8c400044 	addi	r17,r17,1
  805d94:	008001c4 	movi	r2,7
  805d98:	1f000015 	stw	fp,0(r3)
  805d9c:	1c000115 	stw	r16,4(r3)
  805da0:	dc800e15 	stw	r18,56(sp)
  805da4:	dc400d15 	stw	r17,52(sp)
  805da8:	1440cb16 	blt	r2,r17,8060d8 <___vfprintf_internal_r+0x9d0>
  805dac:	d8814a17 	ldw	r2,1320(sp)
  805db0:	d9414517 	ldw	r5,1300(sp)
  805db4:	1140010e 	bge	r2,r5,805dbc <___vfprintf_internal_r+0x6b4>
  805db8:	2805883a 	mov	r2,r5
  805dbc:	d9814b17 	ldw	r6,1324(sp)
  805dc0:	308d883a 	add	r6,r6,r2
  805dc4:	d9814b15 	stw	r6,1324(sp)
  805dc8:	90013b1e 	bne	r18,zero,8062b8 <___vfprintf_internal_r+0xbb0>
  805dcc:	d9c14017 	ldw	r7,1280(sp)
  805dd0:	dd401904 	addi	r21,sp,100
  805dd4:	d8000d15 	stw	zero,52(sp)
  805dd8:	003ea706 	br	805878 <___vfprintf_internal_r+0x170>
  805ddc:	d8800e17 	ldw	r2,56(sp)
  805de0:	10053f1e 	bne	r2,zero,8072e0 <___vfprintf_internal_r+0x1bd8>
  805de4:	d8000d15 	stw	zero,52(sp)
  805de8:	b080030b 	ldhu	r2,12(r22)
  805dec:	1080100c 	andi	r2,r2,64
  805df0:	103e8726 	beq	r2,zero,805810 <___vfprintf_internal_r+0x108>
  805df4:	00bfffc4 	movi	r2,-1
  805df8:	d8814b15 	stw	r2,1324(sp)
  805dfc:	003e8406 	br	805810 <___vfprintf_internal_r+0x108>
  805e00:	d9814d17 	ldw	r6,1332(sp)
  805e04:	00801944 	movi	r2,101
  805e08:	11806e16 	blt	r2,r6,805fc4 <___vfprintf_internal_r+0x8bc>
  805e0c:	d9414717 	ldw	r5,1308(sp)
  805e10:	00c00044 	movi	r3,1
  805e14:	1943430e 	bge	r3,r5,806b24 <___vfprintf_internal_r+0x141c>
  805e18:	d8814117 	ldw	r2,1284(sp)
  805e1c:	94800044 	addi	r18,r18,1
  805e20:	8c400044 	addi	r17,r17,1
  805e24:	a8800015 	stw	r2,0(r21)
  805e28:	008001c4 	movi	r2,7
  805e2c:	a8c00115 	stw	r3,4(r21)
  805e30:	dc800e15 	stw	r18,56(sp)
  805e34:	dc400d15 	stw	r17,52(sp)
  805e38:	1441ca16 	blt	r2,r17,806564 <___vfprintf_internal_r+0xe5c>
  805e3c:	a8c00204 	addi	r3,r21,8
  805e40:	d9014917 	ldw	r4,1316(sp)
  805e44:	00800044 	movi	r2,1
  805e48:	94800044 	addi	r18,r18,1
  805e4c:	8c400044 	addi	r17,r17,1
  805e50:	18800115 	stw	r2,4(r3)
  805e54:	008001c4 	movi	r2,7
  805e58:	19000015 	stw	r4,0(r3)
  805e5c:	dc800e15 	stw	r18,56(sp)
  805e60:	dc400d15 	stw	r17,52(sp)
  805e64:	1441b616 	blt	r2,r17,806540 <___vfprintf_internal_r+0xe38>
  805e68:	1cc00204 	addi	r19,r3,8
  805e6c:	d9014217 	ldw	r4,1288(sp)
  805e70:	d9414317 	ldw	r5,1292(sp)
  805e74:	000d883a 	mov	r6,zero
  805e78:	000f883a 	mov	r7,zero
  805e7c:	080d8040 	call	80d804 <__nedf2>
  805e80:	10017426 	beq	r2,zero,806454 <___vfprintf_internal_r+0xd4c>
  805e84:	d9414717 	ldw	r5,1308(sp)
  805e88:	d9814117 	ldw	r6,1284(sp)
  805e8c:	8c400044 	addi	r17,r17,1
  805e90:	2c85883a 	add	r2,r5,r18
  805e94:	14bfffc4 	addi	r18,r2,-1
  805e98:	28bfffc4 	addi	r2,r5,-1
  805e9c:	30c00044 	addi	r3,r6,1
  805ea0:	98800115 	stw	r2,4(r19)
  805ea4:	008001c4 	movi	r2,7
  805ea8:	98c00015 	stw	r3,0(r19)
  805eac:	dc800e15 	stw	r18,56(sp)
  805eb0:	dc400d15 	stw	r17,52(sp)
  805eb4:	14418e16 	blt	r2,r17,8064f0 <___vfprintf_internal_r+0xde8>
  805eb8:	9cc00204 	addi	r19,r19,8
  805ebc:	d9414817 	ldw	r5,1312(sp)
  805ec0:	d8800804 	addi	r2,sp,32
  805ec4:	8c400044 	addi	r17,r17,1
  805ec8:	9165883a 	add	r18,r18,r5
  805ecc:	98800015 	stw	r2,0(r19)
  805ed0:	008001c4 	movi	r2,7
  805ed4:	99400115 	stw	r5,4(r19)
  805ed8:	dc800e15 	stw	r18,56(sp)
  805edc:	dc400d15 	stw	r17,52(sp)
  805ee0:	1440ed16 	blt	r2,r17,806298 <___vfprintf_internal_r+0xb90>
  805ee4:	98c00204 	addi	r3,r19,8
  805ee8:	003f8506 	br	805d00 <___vfprintf_internal_r+0x5f8>
  805eec:	d9814a17 	ldw	r6,1320(sp)
  805ef0:	d8814517 	ldw	r2,1300(sp)
  805ef4:	30a1c83a 	sub	r16,r6,r2
  805ef8:	043f4b0e 	bge	zero,r16,805c28 <___vfprintf_internal_r+0x520>
  805efc:	00800404 	movi	r2,16
  805f00:	1404340e 	bge	r2,r16,806fd4 <___vfprintf_internal_r+0x18cc>
  805f04:	1027883a 	mov	r19,r2
  805f08:	07002074 	movhi	fp,129
  805f0c:	e709be84 	addi	fp,fp,9978
  805f10:	050001c4 	movi	r20,7
  805f14:	00000306 	br	805f24 <___vfprintf_internal_r+0x81c>
  805f18:	843ffc04 	addi	r16,r16,-16
  805f1c:	ad400204 	addi	r21,r21,8
  805f20:	9c00130e 	bge	r19,r16,805f70 <___vfprintf_internal_r+0x868>
  805f24:	94800404 	addi	r18,r18,16
  805f28:	8c400044 	addi	r17,r17,1
  805f2c:	af000015 	stw	fp,0(r21)
  805f30:	acc00115 	stw	r19,4(r21)
  805f34:	dc800e15 	stw	r18,56(sp)
  805f38:	dc400d15 	stw	r17,52(sp)
  805f3c:	a47ff60e 	bge	r20,r17,805f18 <___vfprintf_internal_r+0x810>
  805f40:	d9014f17 	ldw	r4,1340(sp)
  805f44:	b00b883a 	mov	r5,r22
  805f48:	d9800c04 	addi	r6,sp,48
  805f4c:	d9c15115 	stw	r7,1348(sp)
  805f50:	08056b00 	call	8056b0 <__sprint_r>
  805f54:	d9c15117 	ldw	r7,1348(sp)
  805f58:	103fa31e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  805f5c:	843ffc04 	addi	r16,r16,-16
  805f60:	dc800e17 	ldw	r18,56(sp)
  805f64:	dc400d17 	ldw	r17,52(sp)
  805f68:	dd401904 	addi	r21,sp,100
  805f6c:	9c3fed16 	blt	r19,r16,805f24 <___vfprintf_internal_r+0x81c>
  805f70:	9425883a 	add	r18,r18,r16
  805f74:	8c400044 	addi	r17,r17,1
  805f78:	008001c4 	movi	r2,7
  805f7c:	af000015 	stw	fp,0(r21)
  805f80:	ac000115 	stw	r16,4(r21)
  805f84:	dc800e15 	stw	r18,56(sp)
  805f88:	dc400d15 	stw	r17,52(sp)
  805f8c:	14416116 	blt	r2,r17,806514 <___vfprintf_internal_r+0xe0c>
  805f90:	ad400204 	addi	r21,r21,8
  805f94:	003f2406 	br	805c28 <___vfprintf_internal_r+0x520>
  805f98:	d9014f17 	ldw	r4,1340(sp)
  805f9c:	080926c0 	call	80926c <__sinit>
  805fa0:	d9c15117 	ldw	r7,1348(sp)
  805fa4:	003def06 	br	805764 <___vfprintf_internal_r+0x5c>
  805fa8:	d9014f17 	ldw	r4,1340(sp)
  805fac:	b00b883a 	mov	r5,r22
  805fb0:	d9c15115 	stw	r7,1348(sp)
  805fb4:	08076cc0 	call	8076cc <__swsetup_r>
  805fb8:	d9c15117 	ldw	r7,1348(sp)
  805fbc:	103dee26 	beq	r2,zero,805778 <___vfprintf_internal_r+0x70>
  805fc0:	003f8c06 	br	805df4 <___vfprintf_internal_r+0x6ec>
  805fc4:	d9014217 	ldw	r4,1288(sp)
  805fc8:	d9414317 	ldw	r5,1292(sp)
  805fcc:	000d883a 	mov	r6,zero
  805fd0:	000f883a 	mov	r7,zero
  805fd4:	080d77c0 	call	80d77c <__eqdf2>
  805fd8:	1000f21e 	bne	r2,zero,8063a4 <___vfprintf_internal_r+0xc9c>
  805fdc:	00802074 	movhi	r2,129
  805fe0:	1089be04 	addi	r2,r2,9976
  805fe4:	94800044 	addi	r18,r18,1
  805fe8:	8c400044 	addi	r17,r17,1
  805fec:	a8800015 	stw	r2,0(r21)
  805ff0:	00c00044 	movi	r3,1
  805ff4:	008001c4 	movi	r2,7
  805ff8:	a8c00115 	stw	r3,4(r21)
  805ffc:	dc800e15 	stw	r18,56(sp)
  806000:	dc400d15 	stw	r17,52(sp)
  806004:	1442fa16 	blt	r2,r17,806bf0 <___vfprintf_internal_r+0x14e8>
  806008:	a8c00204 	addi	r3,r21,8
  80600c:	d8800517 	ldw	r2,20(sp)
  806010:	d9014717 	ldw	r4,1308(sp)
  806014:	11015c0e 	bge	r2,r4,806588 <___vfprintf_internal_r+0xe80>
  806018:	dc400d17 	ldw	r17,52(sp)
  80601c:	d9814917 	ldw	r6,1316(sp)
  806020:	00800044 	movi	r2,1
  806024:	94800044 	addi	r18,r18,1
  806028:	8c400044 	addi	r17,r17,1
  80602c:	18800115 	stw	r2,4(r3)
  806030:	008001c4 	movi	r2,7
  806034:	19800015 	stw	r6,0(r3)
  806038:	dc800e15 	stw	r18,56(sp)
  80603c:	dc400d15 	stw	r17,52(sp)
  806040:	14431016 	blt	r2,r17,806c84 <___vfprintf_internal_r+0x157c>
  806044:	18c00204 	addi	r3,r3,8
  806048:	d8814717 	ldw	r2,1308(sp)
  80604c:	143fffc4 	addi	r16,r2,-1
  806050:	043f2b0e 	bge	zero,r16,805d00 <___vfprintf_internal_r+0x5f8>
  806054:	00800404 	movi	r2,16
  806058:	1402a20e 	bge	r2,r16,806ae4 <___vfprintf_internal_r+0x13dc>
  80605c:	dc400d17 	ldw	r17,52(sp)
  806060:	1027883a 	mov	r19,r2
  806064:	07002074 	movhi	fp,129
  806068:	e709be84 	addi	fp,fp,9978
  80606c:	050001c4 	movi	r20,7
  806070:	00000306 	br	806080 <___vfprintf_internal_r+0x978>
  806074:	18c00204 	addi	r3,r3,8
  806078:	843ffc04 	addi	r16,r16,-16
  80607c:	9c029c0e 	bge	r19,r16,806af0 <___vfprintf_internal_r+0x13e8>
  806080:	94800404 	addi	r18,r18,16
  806084:	8c400044 	addi	r17,r17,1
  806088:	1f000015 	stw	fp,0(r3)
  80608c:	1cc00115 	stw	r19,4(r3)
  806090:	dc800e15 	stw	r18,56(sp)
  806094:	dc400d15 	stw	r17,52(sp)
  806098:	a47ff60e 	bge	r20,r17,806074 <___vfprintf_internal_r+0x96c>
  80609c:	d9014f17 	ldw	r4,1340(sp)
  8060a0:	b00b883a 	mov	r5,r22
  8060a4:	d9800c04 	addi	r6,sp,48
  8060a8:	08056b00 	call	8056b0 <__sprint_r>
  8060ac:	103f4e1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8060b0:	dc800e17 	ldw	r18,56(sp)
  8060b4:	dc400d17 	ldw	r17,52(sp)
  8060b8:	d8c01904 	addi	r3,sp,100
  8060bc:	003fee06 	br	806078 <___vfprintf_internal_r+0x970>
  8060c0:	d8802c0b 	ldhu	r2,176(sp)
  8060c4:	00ffffc4 	movi	r3,-1
  8060c8:	d8c14b15 	stw	r3,1324(sp)
  8060cc:	1080100c 	andi	r2,r2,64
  8060d0:	103dcc1e 	bne	r2,zero,805804 <___vfprintf_internal_r+0xfc>
  8060d4:	003dce06 	br	805810 <___vfprintf_internal_r+0x108>
  8060d8:	d9014f17 	ldw	r4,1340(sp)
  8060dc:	b00b883a 	mov	r5,r22
  8060e0:	d9800c04 	addi	r6,sp,48
  8060e4:	08056b00 	call	8056b0 <__sprint_r>
  8060e8:	103f3f1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8060ec:	dc800e17 	ldw	r18,56(sp)
  8060f0:	003f2e06 	br	805dac <___vfprintf_internal_r+0x6a4>
  8060f4:	d9414c17 	ldw	r5,1328(sp)
  8060f8:	29400414 	ori	r5,r5,16
  8060fc:	d9414c15 	stw	r5,1328(sp)
  806100:	d9814c17 	ldw	r6,1328(sp)
  806104:	3080080c 	andi	r2,r6,32
  806108:	10014f1e 	bne	r2,zero,806648 <___vfprintf_internal_r+0xf40>
  80610c:	d8c14c17 	ldw	r3,1328(sp)
  806110:	1880040c 	andi	r2,r3,16
  806114:	1002ea1e 	bne	r2,zero,806cc0 <___vfprintf_internal_r+0x15b8>
  806118:	d9014c17 	ldw	r4,1328(sp)
  80611c:	2080100c 	andi	r2,r4,64
  806120:	1002e726 	beq	r2,zero,806cc0 <___vfprintf_internal_r+0x15b8>
  806124:	3880000f 	ldh	r2,0(r7)
  806128:	39c00104 	addi	r7,r7,4
  80612c:	d9c14015 	stw	r7,1280(sp)
  806130:	1023d7fa 	srai	r17,r2,31
  806134:	1021883a 	mov	r16,r2
  806138:	88037216 	blt	r17,zero,806f04 <___vfprintf_internal_r+0x17fc>
  80613c:	01000044 	movi	r4,1
  806140:	98000416 	blt	r19,zero,806154 <___vfprintf_internal_r+0xa4c>
  806144:	d8c14c17 	ldw	r3,1328(sp)
  806148:	00bfdfc4 	movi	r2,-129
  80614c:	1886703a 	and	r3,r3,r2
  806150:	d8c14c15 	stw	r3,1328(sp)
  806154:	8444b03a 	or	r2,r16,r17
  806158:	1002261e 	bne	r2,zero,8069f4 <___vfprintf_internal_r+0x12ec>
  80615c:	9802251e 	bne	r19,zero,8069f4 <___vfprintf_internal_r+0x12ec>
  806160:	20803fcc 	andi	r2,r4,255
  806164:	10029b26 	beq	r2,zero,806bd4 <___vfprintf_internal_r+0x14cc>
  806168:	d8c01904 	addi	r3,sp,100
  80616c:	dd000f04 	addi	r20,sp,60
  806170:	d8c14115 	stw	r3,1284(sp)
  806174:	d8c14117 	ldw	r3,1284(sp)
  806178:	dcc14515 	stw	r19,1300(sp)
  80617c:	a0c5c83a 	sub	r2,r20,r3
  806180:	11c00a04 	addi	r7,r2,40
  806184:	99c0010e 	bge	r19,r7,80618c <___vfprintf_internal_r+0xa84>
  806188:	d9c14515 	stw	r7,1300(sp)
  80618c:	dcc14615 	stw	r19,1304(sp)
  806190:	d8800407 	ldb	r2,16(sp)
  806194:	103e4c26 	beq	r2,zero,805ac8 <___vfprintf_internal_r+0x3c0>
  806198:	d8814517 	ldw	r2,1300(sp)
  80619c:	10800044 	addi	r2,r2,1
  8061a0:	d8814515 	stw	r2,1300(sp)
  8061a4:	003e4806 	br	805ac8 <___vfprintf_internal_r+0x3c0>
  8061a8:	d9814c17 	ldw	r6,1328(sp)
  8061ac:	31800414 	ori	r6,r6,16
  8061b0:	d9814c15 	stw	r6,1328(sp)
  8061b4:	d8c14c17 	ldw	r3,1328(sp)
  8061b8:	1880080c 	andi	r2,r3,32
  8061bc:	1001271e 	bne	r2,zero,80665c <___vfprintf_internal_r+0xf54>
  8061c0:	d9414c17 	ldw	r5,1328(sp)
  8061c4:	2880040c 	andi	r2,r5,16
  8061c8:	1002b61e 	bne	r2,zero,806ca4 <___vfprintf_internal_r+0x159c>
  8061cc:	d9814c17 	ldw	r6,1328(sp)
  8061d0:	3080100c 	andi	r2,r6,64
  8061d4:	1002b326 	beq	r2,zero,806ca4 <___vfprintf_internal_r+0x159c>
  8061d8:	3c00000b 	ldhu	r16,0(r7)
  8061dc:	0009883a 	mov	r4,zero
  8061e0:	39c00104 	addi	r7,r7,4
  8061e4:	0023883a 	mov	r17,zero
  8061e8:	d9c14015 	stw	r7,1280(sp)
  8061ec:	d8000405 	stb	zero,16(sp)
  8061f0:	003fd306 	br	806140 <___vfprintf_internal_r+0xa38>
  8061f4:	d9014c17 	ldw	r4,1328(sp)
  8061f8:	21000414 	ori	r4,r4,16
  8061fc:	d9014c15 	stw	r4,1328(sp)
  806200:	d9414c17 	ldw	r5,1328(sp)
  806204:	2880080c 	andi	r2,r5,32
  806208:	1001081e 	bne	r2,zero,80662c <___vfprintf_internal_r+0xf24>
  80620c:	d8c14c17 	ldw	r3,1328(sp)
  806210:	1880040c 	andi	r2,r3,16
  806214:	1002b01e 	bne	r2,zero,806cd8 <___vfprintf_internal_r+0x15d0>
  806218:	d9014c17 	ldw	r4,1328(sp)
  80621c:	2080100c 	andi	r2,r4,64
  806220:	1002ad26 	beq	r2,zero,806cd8 <___vfprintf_internal_r+0x15d0>
  806224:	3c00000b 	ldhu	r16,0(r7)
  806228:	01000044 	movi	r4,1
  80622c:	39c00104 	addi	r7,r7,4
  806230:	0023883a 	mov	r17,zero
  806234:	d9c14015 	stw	r7,1280(sp)
  806238:	d8000405 	stb	zero,16(sp)
  80623c:	003fc006 	br	806140 <___vfprintf_internal_r+0xa38>
  806240:	d9014f17 	ldw	r4,1340(sp)
  806244:	b00b883a 	mov	r5,r22
  806248:	d9800c04 	addi	r6,sp,48
  80624c:	08056b00 	call	8056b0 <__sprint_r>
  806250:	103ee51e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806254:	dc800e17 	ldw	r18,56(sp)
  806258:	d8c01904 	addi	r3,sp,100
  80625c:	d9814c17 	ldw	r6,1328(sp)
  806260:	3080004c 	andi	r2,r6,1
  806264:	1005003a 	cmpeq	r2,r2,zero
  806268:	103ea51e 	bne	r2,zero,805d00 <___vfprintf_internal_r+0x5f8>
  80626c:	00800044 	movi	r2,1
  806270:	dc400d17 	ldw	r17,52(sp)
  806274:	18800115 	stw	r2,4(r3)
  806278:	d8814917 	ldw	r2,1316(sp)
  80627c:	94800044 	addi	r18,r18,1
  806280:	8c400044 	addi	r17,r17,1
  806284:	18800015 	stw	r2,0(r3)
  806288:	008001c4 	movi	r2,7
  80628c:	dc800e15 	stw	r18,56(sp)
  806290:	dc400d15 	stw	r17,52(sp)
  806294:	14421e0e 	bge	r2,r17,806b10 <___vfprintf_internal_r+0x1408>
  806298:	d9014f17 	ldw	r4,1340(sp)
  80629c:	b00b883a 	mov	r5,r22
  8062a0:	d9800c04 	addi	r6,sp,48
  8062a4:	08056b00 	call	8056b0 <__sprint_r>
  8062a8:	103ecf1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8062ac:	dc800e17 	ldw	r18,56(sp)
  8062b0:	d8c01904 	addi	r3,sp,100
  8062b4:	003e9206 	br	805d00 <___vfprintf_internal_r+0x5f8>
  8062b8:	d9014f17 	ldw	r4,1340(sp)
  8062bc:	b00b883a 	mov	r5,r22
  8062c0:	d9800c04 	addi	r6,sp,48
  8062c4:	08056b00 	call	8056b0 <__sprint_r>
  8062c8:	103ec026 	beq	r2,zero,805dcc <___vfprintf_internal_r+0x6c4>
  8062cc:	003ec606 	br	805de8 <___vfprintf_internal_r+0x6e0>
  8062d0:	d9014f17 	ldw	r4,1340(sp)
  8062d4:	b00b883a 	mov	r5,r22
  8062d8:	d9800c04 	addi	r6,sp,48
  8062dc:	d9c15115 	stw	r7,1348(sp)
  8062e0:	08056b00 	call	8056b0 <__sprint_r>
  8062e4:	d9c15117 	ldw	r7,1348(sp)
  8062e8:	103ebf1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8062ec:	dc800e17 	ldw	r18,56(sp)
  8062f0:	dc400d17 	ldw	r17,52(sp)
  8062f4:	dd401904 	addi	r21,sp,100
  8062f8:	003e7406 	br	805ccc <___vfprintf_internal_r+0x5c4>
  8062fc:	d9014f17 	ldw	r4,1340(sp)
  806300:	b00b883a 	mov	r5,r22
  806304:	d9800c04 	addi	r6,sp,48
  806308:	d9c15115 	stw	r7,1348(sp)
  80630c:	08056b00 	call	8056b0 <__sprint_r>
  806310:	d9c15117 	ldw	r7,1348(sp)
  806314:	103eb41e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806318:	dd401904 	addi	r21,sp,100
  80631c:	003d6d06 	br	8058d4 <___vfprintf_internal_r+0x1cc>
  806320:	d9014f17 	ldw	r4,1340(sp)
  806324:	b00b883a 	mov	r5,r22
  806328:	d9800c04 	addi	r6,sp,48
  80632c:	d9c15115 	stw	r7,1348(sp)
  806330:	08056b00 	call	8056b0 <__sprint_r>
  806334:	d9c15117 	ldw	r7,1348(sp)
  806338:	103eab1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  80633c:	dc800e17 	ldw	r18,56(sp)
  806340:	dc400d17 	ldw	r17,52(sp)
  806344:	dd401904 	addi	r21,sp,100
  806348:	003e3406 	br	805c1c <___vfprintf_internal_r+0x514>
  80634c:	d9014f17 	ldw	r4,1340(sp)
  806350:	b00b883a 	mov	r5,r22
  806354:	d9800c04 	addi	r6,sp,48
  806358:	d9c15115 	stw	r7,1348(sp)
  80635c:	08056b00 	call	8056b0 <__sprint_r>
  806360:	d9c15117 	ldw	r7,1348(sp)
  806364:	103ea01e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806368:	dc800e17 	ldw	r18,56(sp)
  80636c:	dc400d17 	ldw	r17,52(sp)
  806370:	dd401904 	addi	r21,sp,100
  806374:	003e1c06 	br	805be8 <___vfprintf_internal_r+0x4e0>
  806378:	d9014f17 	ldw	r4,1340(sp)
  80637c:	b00b883a 	mov	r5,r22
  806380:	d9800c04 	addi	r6,sp,48
  806384:	d9c15115 	stw	r7,1348(sp)
  806388:	08056b00 	call	8056b0 <__sprint_r>
  80638c:	d9c15117 	ldw	r7,1348(sp)
  806390:	103e951e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806394:	dc800e17 	ldw	r18,56(sp)
  806398:	dc400d17 	ldw	r17,52(sp)
  80639c:	dd401904 	addi	r21,sp,100
  8063a0:	003e0406 	br	805bb4 <___vfprintf_internal_r+0x4ac>
  8063a4:	d9000517 	ldw	r4,20(sp)
  8063a8:	0102520e 	bge	zero,r4,806cf4 <___vfprintf_internal_r+0x15ec>
  8063ac:	d9814717 	ldw	r6,1308(sp)
  8063b0:	21807a16 	blt	r4,r6,80659c <___vfprintf_internal_r+0xe94>
  8063b4:	d8814117 	ldw	r2,1284(sp)
  8063b8:	91a5883a 	add	r18,r18,r6
  8063bc:	8c400044 	addi	r17,r17,1
  8063c0:	a8800015 	stw	r2,0(r21)
  8063c4:	008001c4 	movi	r2,7
  8063c8:	a9800115 	stw	r6,4(r21)
  8063cc:	dc800e15 	stw	r18,56(sp)
  8063d0:	dc400d15 	stw	r17,52(sp)
  8063d4:	1442f616 	blt	r2,r17,806fb0 <___vfprintf_internal_r+0x18a8>
  8063d8:	a8c00204 	addi	r3,r21,8
  8063dc:	d9414717 	ldw	r5,1308(sp)
  8063e0:	2161c83a 	sub	r16,r4,r5
  8063e4:	043f9d0e 	bge	zero,r16,80625c <___vfprintf_internal_r+0xb54>
  8063e8:	00800404 	movi	r2,16
  8063ec:	1402130e 	bge	r2,r16,806c3c <___vfprintf_internal_r+0x1534>
  8063f0:	dc400d17 	ldw	r17,52(sp)
  8063f4:	1027883a 	mov	r19,r2
  8063f8:	07002074 	movhi	fp,129
  8063fc:	e709be84 	addi	fp,fp,9978
  806400:	050001c4 	movi	r20,7
  806404:	00000306 	br	806414 <___vfprintf_internal_r+0xd0c>
  806408:	18c00204 	addi	r3,r3,8
  80640c:	843ffc04 	addi	r16,r16,-16
  806410:	9c020d0e 	bge	r19,r16,806c48 <___vfprintf_internal_r+0x1540>
  806414:	94800404 	addi	r18,r18,16
  806418:	8c400044 	addi	r17,r17,1
  80641c:	1f000015 	stw	fp,0(r3)
  806420:	1cc00115 	stw	r19,4(r3)
  806424:	dc800e15 	stw	r18,56(sp)
  806428:	dc400d15 	stw	r17,52(sp)
  80642c:	a47ff60e 	bge	r20,r17,806408 <___vfprintf_internal_r+0xd00>
  806430:	d9014f17 	ldw	r4,1340(sp)
  806434:	b00b883a 	mov	r5,r22
  806438:	d9800c04 	addi	r6,sp,48
  80643c:	08056b00 	call	8056b0 <__sprint_r>
  806440:	103e691e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806444:	dc800e17 	ldw	r18,56(sp)
  806448:	dc400d17 	ldw	r17,52(sp)
  80644c:	d8c01904 	addi	r3,sp,100
  806450:	003fee06 	br	80640c <___vfprintf_internal_r+0xd04>
  806454:	d8814717 	ldw	r2,1308(sp)
  806458:	143fffc4 	addi	r16,r2,-1
  80645c:	043e970e 	bge	zero,r16,805ebc <___vfprintf_internal_r+0x7b4>
  806460:	00800404 	movi	r2,16
  806464:	1400180e 	bge	r2,r16,8064c8 <___vfprintf_internal_r+0xdc0>
  806468:	1029883a 	mov	r20,r2
  80646c:	07002074 	movhi	fp,129
  806470:	e709be84 	addi	fp,fp,9978
  806474:	054001c4 	movi	r21,7
  806478:	00000306 	br	806488 <___vfprintf_internal_r+0xd80>
  80647c:	9cc00204 	addi	r19,r19,8
  806480:	843ffc04 	addi	r16,r16,-16
  806484:	a400120e 	bge	r20,r16,8064d0 <___vfprintf_internal_r+0xdc8>
  806488:	94800404 	addi	r18,r18,16
  80648c:	8c400044 	addi	r17,r17,1
  806490:	9f000015 	stw	fp,0(r19)
  806494:	9d000115 	stw	r20,4(r19)
  806498:	dc800e15 	stw	r18,56(sp)
  80649c:	dc400d15 	stw	r17,52(sp)
  8064a0:	ac7ff60e 	bge	r21,r17,80647c <___vfprintf_internal_r+0xd74>
  8064a4:	d9014f17 	ldw	r4,1340(sp)
  8064a8:	b00b883a 	mov	r5,r22
  8064ac:	d9800c04 	addi	r6,sp,48
  8064b0:	08056b00 	call	8056b0 <__sprint_r>
  8064b4:	103e4c1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8064b8:	dc800e17 	ldw	r18,56(sp)
  8064bc:	dc400d17 	ldw	r17,52(sp)
  8064c0:	dcc01904 	addi	r19,sp,100
  8064c4:	003fee06 	br	806480 <___vfprintf_internal_r+0xd78>
  8064c8:	07002074 	movhi	fp,129
  8064cc:	e709be84 	addi	fp,fp,9978
  8064d0:	9425883a 	add	r18,r18,r16
  8064d4:	8c400044 	addi	r17,r17,1
  8064d8:	008001c4 	movi	r2,7
  8064dc:	9f000015 	stw	fp,0(r19)
  8064e0:	9c000115 	stw	r16,4(r19)
  8064e4:	dc800e15 	stw	r18,56(sp)
  8064e8:	dc400d15 	stw	r17,52(sp)
  8064ec:	147e720e 	bge	r2,r17,805eb8 <___vfprintf_internal_r+0x7b0>
  8064f0:	d9014f17 	ldw	r4,1340(sp)
  8064f4:	b00b883a 	mov	r5,r22
  8064f8:	d9800c04 	addi	r6,sp,48
  8064fc:	08056b00 	call	8056b0 <__sprint_r>
  806500:	103e391e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806504:	dc800e17 	ldw	r18,56(sp)
  806508:	dc400d17 	ldw	r17,52(sp)
  80650c:	dcc01904 	addi	r19,sp,100
  806510:	003e6a06 	br	805ebc <___vfprintf_internal_r+0x7b4>
  806514:	d9014f17 	ldw	r4,1340(sp)
  806518:	b00b883a 	mov	r5,r22
  80651c:	d9800c04 	addi	r6,sp,48
  806520:	d9c15115 	stw	r7,1348(sp)
  806524:	08056b00 	call	8056b0 <__sprint_r>
  806528:	d9c15117 	ldw	r7,1348(sp)
  80652c:	103e2e1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806530:	dc800e17 	ldw	r18,56(sp)
  806534:	dc400d17 	ldw	r17,52(sp)
  806538:	dd401904 	addi	r21,sp,100
  80653c:	003dba06 	br	805c28 <___vfprintf_internal_r+0x520>
  806540:	d9014f17 	ldw	r4,1340(sp)
  806544:	b00b883a 	mov	r5,r22
  806548:	d9800c04 	addi	r6,sp,48
  80654c:	08056b00 	call	8056b0 <__sprint_r>
  806550:	103e251e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806554:	dc800e17 	ldw	r18,56(sp)
  806558:	dc400d17 	ldw	r17,52(sp)
  80655c:	dcc01904 	addi	r19,sp,100
  806560:	003e4206 	br	805e6c <___vfprintf_internal_r+0x764>
  806564:	d9014f17 	ldw	r4,1340(sp)
  806568:	b00b883a 	mov	r5,r22
  80656c:	d9800c04 	addi	r6,sp,48
  806570:	08056b00 	call	8056b0 <__sprint_r>
  806574:	103e1c1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806578:	dc800e17 	ldw	r18,56(sp)
  80657c:	dc400d17 	ldw	r17,52(sp)
  806580:	d8c01904 	addi	r3,sp,100
  806584:	003e2e06 	br	805e40 <___vfprintf_internal_r+0x738>
  806588:	d9414c17 	ldw	r5,1328(sp)
  80658c:	2880004c 	andi	r2,r5,1
  806590:	1005003a 	cmpeq	r2,r2,zero
  806594:	103dda1e 	bne	r2,zero,805d00 <___vfprintf_internal_r+0x5f8>
  806598:	003e9f06 	br	806018 <___vfprintf_internal_r+0x910>
  80659c:	d8c14117 	ldw	r3,1284(sp)
  8065a0:	9125883a 	add	r18,r18,r4
  8065a4:	8c400044 	addi	r17,r17,1
  8065a8:	008001c4 	movi	r2,7
  8065ac:	a8c00015 	stw	r3,0(r21)
  8065b0:	a9000115 	stw	r4,4(r21)
  8065b4:	dc800e15 	stw	r18,56(sp)
  8065b8:	dc400d15 	stw	r17,52(sp)
  8065bc:	14426616 	blt	r2,r17,806f58 <___vfprintf_internal_r+0x1850>
  8065c0:	a8c00204 	addi	r3,r21,8
  8065c4:	d9414917 	ldw	r5,1316(sp)
  8065c8:	00800044 	movi	r2,1
  8065cc:	94800044 	addi	r18,r18,1
  8065d0:	8c400044 	addi	r17,r17,1
  8065d4:	18800115 	stw	r2,4(r3)
  8065d8:	008001c4 	movi	r2,7
  8065dc:	19400015 	stw	r5,0(r3)
  8065e0:	dc800e15 	stw	r18,56(sp)
  8065e4:	dc400d15 	stw	r17,52(sp)
  8065e8:	2021883a 	mov	r16,r4
  8065ec:	14425016 	blt	r2,r17,806f30 <___vfprintf_internal_r+0x1828>
  8065f0:	19400204 	addi	r5,r3,8
  8065f4:	d9814717 	ldw	r6,1308(sp)
  8065f8:	8c400044 	addi	r17,r17,1
  8065fc:	dc400d15 	stw	r17,52(sp)
  806600:	3107c83a 	sub	r3,r6,r4
  806604:	d9014117 	ldw	r4,1284(sp)
  806608:	90e5883a 	add	r18,r18,r3
  80660c:	28c00115 	stw	r3,4(r5)
  806610:	8105883a 	add	r2,r16,r4
  806614:	28800015 	stw	r2,0(r5)
  806618:	008001c4 	movi	r2,7
  80661c:	dc800e15 	stw	r18,56(sp)
  806620:	147f1d16 	blt	r2,r17,806298 <___vfprintf_internal_r+0xb90>
  806624:	28c00204 	addi	r3,r5,8
  806628:	003db506 	br	805d00 <___vfprintf_internal_r+0x5f8>
  80662c:	3c000017 	ldw	r16,0(r7)
  806630:	3c400117 	ldw	r17,4(r7)
  806634:	39800204 	addi	r6,r7,8
  806638:	01000044 	movi	r4,1
  80663c:	d9814015 	stw	r6,1280(sp)
  806640:	d8000405 	stb	zero,16(sp)
  806644:	003ebe06 	br	806140 <___vfprintf_internal_r+0xa38>
  806648:	3c000017 	ldw	r16,0(r7)
  80664c:	3c400117 	ldw	r17,4(r7)
  806650:	38800204 	addi	r2,r7,8
  806654:	d8814015 	stw	r2,1280(sp)
  806658:	003eb706 	br	806138 <___vfprintf_internal_r+0xa30>
  80665c:	3c000017 	ldw	r16,0(r7)
  806660:	3c400117 	ldw	r17,4(r7)
  806664:	39000204 	addi	r4,r7,8
  806668:	d9014015 	stw	r4,1280(sp)
  80666c:	0009883a 	mov	r4,zero
  806670:	d8000405 	stb	zero,16(sp)
  806674:	003eb206 	br	806140 <___vfprintf_internal_r+0xa38>
  806678:	38c00017 	ldw	r3,0(r7)
  80667c:	39c00104 	addi	r7,r7,4
  806680:	d8c14a15 	stw	r3,1320(sp)
  806684:	1800d10e 	bge	r3,zero,8069cc <___vfprintf_internal_r+0x12c4>
  806688:	00c7c83a 	sub	r3,zero,r3
  80668c:	d8c14a15 	stw	r3,1320(sp)
  806690:	d9014c17 	ldw	r4,1328(sp)
  806694:	b8c00007 	ldb	r3,0(r23)
  806698:	21000114 	ori	r4,r4,4
  80669c:	d9014c15 	stw	r4,1328(sp)
  8066a0:	003c9806 	br	805904 <___vfprintf_internal_r+0x1fc>
  8066a4:	d9814c17 	ldw	r6,1328(sp)
  8066a8:	3080080c 	andi	r2,r6,32
  8066ac:	1001f026 	beq	r2,zero,806e70 <___vfprintf_internal_r+0x1768>
  8066b0:	d9014b17 	ldw	r4,1324(sp)
  8066b4:	38800017 	ldw	r2,0(r7)
  8066b8:	39c00104 	addi	r7,r7,4
  8066bc:	d9c14015 	stw	r7,1280(sp)
  8066c0:	2007d7fa 	srai	r3,r4,31
  8066c4:	d9c14017 	ldw	r7,1280(sp)
  8066c8:	11000015 	stw	r4,0(r2)
  8066cc:	10c00115 	stw	r3,4(r2)
  8066d0:	003c6906 	br	805878 <___vfprintf_internal_r+0x170>
  8066d4:	b8c00007 	ldb	r3,0(r23)
  8066d8:	00801b04 	movi	r2,108
  8066dc:	18824f26 	beq	r3,r2,80701c <___vfprintf_internal_r+0x1914>
  8066e0:	d9414c17 	ldw	r5,1328(sp)
  8066e4:	29400414 	ori	r5,r5,16
  8066e8:	d9414c15 	stw	r5,1328(sp)
  8066ec:	003c8506 	br	805904 <___vfprintf_internal_r+0x1fc>
  8066f0:	d9814c17 	ldw	r6,1328(sp)
  8066f4:	b8c00007 	ldb	r3,0(r23)
  8066f8:	31800814 	ori	r6,r6,32
  8066fc:	d9814c15 	stw	r6,1328(sp)
  806700:	003c8006 	br	805904 <___vfprintf_internal_r+0x1fc>
  806704:	d8814c17 	ldw	r2,1328(sp)
  806708:	3c000017 	ldw	r16,0(r7)
  80670c:	00c01e04 	movi	r3,120
  806710:	10800094 	ori	r2,r2,2
  806714:	d8814c15 	stw	r2,1328(sp)
  806718:	39c00104 	addi	r7,r7,4
  80671c:	01402074 	movhi	r5,129
  806720:	2949a704 	addi	r5,r5,9884
  806724:	00800c04 	movi	r2,48
  806728:	0023883a 	mov	r17,zero
  80672c:	01000084 	movi	r4,2
  806730:	d9c14015 	stw	r7,1280(sp)
  806734:	d8c14d15 	stw	r3,1332(sp)
  806738:	d9414415 	stw	r5,1296(sp)
  80673c:	d8800445 	stb	r2,17(sp)
  806740:	d8c00485 	stb	r3,18(sp)
  806744:	d8000405 	stb	zero,16(sp)
  806748:	003e7d06 	br	806140 <___vfprintf_internal_r+0xa38>
  80674c:	d8814c17 	ldw	r2,1328(sp)
  806750:	b8c00007 	ldb	r3,0(r23)
  806754:	10801014 	ori	r2,r2,64
  806758:	d8814c15 	stw	r2,1328(sp)
  80675c:	003c6906 	br	805904 <___vfprintf_internal_r+0x1fc>
  806760:	d9414c17 	ldw	r5,1328(sp)
  806764:	2880020c 	andi	r2,r5,8
  806768:	1001df26 	beq	r2,zero,806ee8 <___vfprintf_internal_r+0x17e0>
  80676c:	39800017 	ldw	r6,0(r7)
  806770:	38800204 	addi	r2,r7,8
  806774:	d8814015 	stw	r2,1280(sp)
  806778:	d9814215 	stw	r6,1288(sp)
  80677c:	39c00117 	ldw	r7,4(r7)
  806780:	d9c14315 	stw	r7,1292(sp)
  806784:	d9014217 	ldw	r4,1288(sp)
  806788:	d9414317 	ldw	r5,1292(sp)
  80678c:	080b9c40 	call	80b9c4 <__isinfd>
  806790:	10021726 	beq	r2,zero,806ff0 <___vfprintf_internal_r+0x18e8>
  806794:	d9014217 	ldw	r4,1288(sp)
  806798:	d9414317 	ldw	r5,1292(sp)
  80679c:	000d883a 	mov	r6,zero
  8067a0:	000f883a 	mov	r7,zero
  8067a4:	080d99c0 	call	80d99c <__ltdf2>
  8067a8:	1002ca16 	blt	r2,zero,8072d4 <___vfprintf_internal_r+0x1bcc>
  8067ac:	d9414d17 	ldw	r5,1332(sp)
  8067b0:	008011c4 	movi	r2,71
  8067b4:	11420a16 	blt	r2,r5,806fe0 <___vfprintf_internal_r+0x18d8>
  8067b8:	01802074 	movhi	r6,129
  8067bc:	3189ac04 	addi	r6,r6,9904
  8067c0:	d9814115 	stw	r6,1284(sp)
  8067c4:	d9014c17 	ldw	r4,1328(sp)
  8067c8:	00c000c4 	movi	r3,3
  8067cc:	00bfdfc4 	movi	r2,-129
  8067d0:	2088703a 	and	r4,r4,r2
  8067d4:	180f883a 	mov	r7,r3
  8067d8:	d8c14515 	stw	r3,1300(sp)
  8067dc:	d9014c15 	stw	r4,1328(sp)
  8067e0:	d8014615 	stw	zero,1304(sp)
  8067e4:	003e6a06 	br	806190 <___vfprintf_internal_r+0xa88>
  8067e8:	38800017 	ldw	r2,0(r7)
  8067ec:	00c00044 	movi	r3,1
  8067f0:	39c00104 	addi	r7,r7,4
  8067f4:	d9c14015 	stw	r7,1280(sp)
  8067f8:	d9000f04 	addi	r4,sp,60
  8067fc:	180f883a 	mov	r7,r3
  806800:	d8c14515 	stw	r3,1300(sp)
  806804:	d9014115 	stw	r4,1284(sp)
  806808:	d8800f05 	stb	r2,60(sp)
  80680c:	d8000405 	stb	zero,16(sp)
  806810:	003cac06 	br	805ac4 <___vfprintf_internal_r+0x3bc>
  806814:	01402074 	movhi	r5,129
  806818:	2949b204 	addi	r5,r5,9928
  80681c:	d9414415 	stw	r5,1296(sp)
  806820:	d9814c17 	ldw	r6,1328(sp)
  806824:	3080080c 	andi	r2,r6,32
  806828:	1000f926 	beq	r2,zero,806c10 <___vfprintf_internal_r+0x1508>
  80682c:	3c000017 	ldw	r16,0(r7)
  806830:	3c400117 	ldw	r17,4(r7)
  806834:	38800204 	addi	r2,r7,8
  806838:	d8814015 	stw	r2,1280(sp)
  80683c:	d9414c17 	ldw	r5,1328(sp)
  806840:	2880004c 	andi	r2,r5,1
  806844:	1005003a 	cmpeq	r2,r2,zero
  806848:	1000b31e 	bne	r2,zero,806b18 <___vfprintf_internal_r+0x1410>
  80684c:	8444b03a 	or	r2,r16,r17
  806850:	1000b126 	beq	r2,zero,806b18 <___vfprintf_internal_r+0x1410>
  806854:	d9814d17 	ldw	r6,1332(sp)
  806858:	29400094 	ori	r5,r5,2
  80685c:	00800c04 	movi	r2,48
  806860:	01000084 	movi	r4,2
  806864:	d9414c15 	stw	r5,1328(sp)
  806868:	d8800445 	stb	r2,17(sp)
  80686c:	d9800485 	stb	r6,18(sp)
  806870:	d8000405 	stb	zero,16(sp)
  806874:	003e3206 	br	806140 <___vfprintf_internal_r+0xa38>
  806878:	01802074 	movhi	r6,129
  80687c:	3189a704 	addi	r6,r6,9884
  806880:	d9814415 	stw	r6,1296(sp)
  806884:	003fe606 	br	806820 <___vfprintf_internal_r+0x1118>
  806888:	00800ac4 	movi	r2,43
  80688c:	d8800405 	stb	r2,16(sp)
  806890:	b8c00007 	ldb	r3,0(r23)
  806894:	003c1b06 	br	805904 <___vfprintf_internal_r+0x1fc>
  806898:	d8814c17 	ldw	r2,1328(sp)
  80689c:	b8c00007 	ldb	r3,0(r23)
  8068a0:	10800054 	ori	r2,r2,1
  8068a4:	d8814c15 	stw	r2,1328(sp)
  8068a8:	003c1606 	br	805904 <___vfprintf_internal_r+0x1fc>
  8068ac:	d8800407 	ldb	r2,16(sp)
  8068b0:	1000461e 	bne	r2,zero,8069cc <___vfprintf_internal_r+0x12c4>
  8068b4:	00800804 	movi	r2,32
  8068b8:	d8800405 	stb	r2,16(sp)
  8068bc:	b8c00007 	ldb	r3,0(r23)
  8068c0:	003c1006 	br	805904 <___vfprintf_internal_r+0x1fc>
  8068c4:	d9814c17 	ldw	r6,1328(sp)
  8068c8:	b8c00007 	ldb	r3,0(r23)
  8068cc:	31800214 	ori	r6,r6,8
  8068d0:	d9814c15 	stw	r6,1328(sp)
  8068d4:	003c0b06 	br	805904 <___vfprintf_internal_r+0x1fc>
  8068d8:	0007883a 	mov	r3,zero
  8068dc:	01000244 	movi	r4,9
  8068e0:	188002a4 	muli	r2,r3,10
  8068e4:	b8c00007 	ldb	r3,0(r23)
  8068e8:	d9814d17 	ldw	r6,1332(sp)
  8068ec:	bdc00044 	addi	r23,r23,1
  8068f0:	d8c14d15 	stw	r3,1332(sp)
  8068f4:	d9414d17 	ldw	r5,1332(sp)
  8068f8:	3085883a 	add	r2,r6,r2
  8068fc:	10fff404 	addi	r3,r2,-48
  806900:	28bff404 	addi	r2,r5,-48
  806904:	20bff62e 	bgeu	r4,r2,8068e0 <___vfprintf_internal_r+0x11d8>
  806908:	d8c14a15 	stw	r3,1320(sp)
  80690c:	003bff06 	br	80590c <___vfprintf_internal_r+0x204>
  806910:	d9414c17 	ldw	r5,1328(sp)
  806914:	b8c00007 	ldb	r3,0(r23)
  806918:	29402014 	ori	r5,r5,128
  80691c:	d9414c15 	stw	r5,1328(sp)
  806920:	003bf806 	br	805904 <___vfprintf_internal_r+0x1fc>
  806924:	b8c00007 	ldb	r3,0(r23)
  806928:	00800a84 	movi	r2,42
  80692c:	bdc00044 	addi	r23,r23,1
  806930:	18831526 	beq	r3,r2,807588 <___vfprintf_internal_r+0x1e80>
  806934:	d8c14d15 	stw	r3,1332(sp)
  806938:	18bff404 	addi	r2,r3,-48
  80693c:	00c00244 	movi	r3,9
  806940:	18827836 	bltu	r3,r2,807324 <___vfprintf_internal_r+0x1c1c>
  806944:	000d883a 	mov	r6,zero
  806948:	308002a4 	muli	r2,r6,10
  80694c:	b9800007 	ldb	r6,0(r23)
  806950:	d9414d17 	ldw	r5,1332(sp)
  806954:	bdc00044 	addi	r23,r23,1
  806958:	d9814d15 	stw	r6,1332(sp)
  80695c:	d9014d17 	ldw	r4,1332(sp)
  806960:	1145883a 	add	r2,r2,r5
  806964:	11bff404 	addi	r6,r2,-48
  806968:	20bff404 	addi	r2,r4,-48
  80696c:	18bff62e 	bgeu	r3,r2,806948 <___vfprintf_internal_r+0x1240>
  806970:	3027883a 	mov	r19,r6
  806974:	303be50e 	bge	r6,zero,80590c <___vfprintf_internal_r+0x204>
  806978:	04ffffc4 	movi	r19,-1
  80697c:	003be306 	br	80590c <___vfprintf_internal_r+0x204>
  806980:	d8000405 	stb	zero,16(sp)
  806984:	39800017 	ldw	r6,0(r7)
  806988:	39c00104 	addi	r7,r7,4
  80698c:	d9c14015 	stw	r7,1280(sp)
  806990:	d9814115 	stw	r6,1284(sp)
  806994:	3001c926 	beq	r6,zero,8070bc <___vfprintf_internal_r+0x19b4>
  806998:	98000e16 	blt	r19,zero,8069d4 <___vfprintf_internal_r+0x12cc>
  80699c:	d9014117 	ldw	r4,1284(sp)
  8069a0:	000b883a 	mov	r5,zero
  8069a4:	980d883a 	mov	r6,r19
  8069a8:	080a1780 	call	80a178 <memchr>
  8069ac:	10025926 	beq	r2,zero,807314 <___vfprintf_internal_r+0x1c0c>
  8069b0:	d8c14117 	ldw	r3,1284(sp)
  8069b4:	10cfc83a 	sub	r7,r2,r3
  8069b8:	99c19e16 	blt	r19,r7,807034 <___vfprintf_internal_r+0x192c>
  8069bc:	d9c14515 	stw	r7,1300(sp)
  8069c0:	38000916 	blt	r7,zero,8069e8 <___vfprintf_internal_r+0x12e0>
  8069c4:	d8014615 	stw	zero,1304(sp)
  8069c8:	003df106 	br	806190 <___vfprintf_internal_r+0xa88>
  8069cc:	b8c00007 	ldb	r3,0(r23)
  8069d0:	003bcc06 	br	805904 <___vfprintf_internal_r+0x1fc>
  8069d4:	d9014117 	ldw	r4,1284(sp)
  8069d8:	080563c0 	call	80563c <strlen>
  8069dc:	d8814515 	stw	r2,1300(sp)
  8069e0:	100f883a 	mov	r7,r2
  8069e4:	103ff70e 	bge	r2,zero,8069c4 <___vfprintf_internal_r+0x12bc>
  8069e8:	d8014515 	stw	zero,1300(sp)
  8069ec:	d8014615 	stw	zero,1304(sp)
  8069f0:	003de706 	br	806190 <___vfprintf_internal_r+0xa88>
  8069f4:	20c03fcc 	andi	r3,r4,255
  8069f8:	00800044 	movi	r2,1
  8069fc:	18802d26 	beq	r3,r2,806ab4 <___vfprintf_internal_r+0x13ac>
  806a00:	18800e36 	bltu	r3,r2,806a3c <___vfprintf_internal_r+0x1334>
  806a04:	00800084 	movi	r2,2
  806a08:	1880fa26 	beq	r3,r2,806df4 <___vfprintf_internal_r+0x16ec>
  806a0c:	01002074 	movhi	r4,129
  806a10:	2109b704 	addi	r4,r4,9948
  806a14:	080563c0 	call	80563c <strlen>
  806a18:	100f883a 	mov	r7,r2
  806a1c:	dcc14515 	stw	r19,1300(sp)
  806a20:	9880010e 	bge	r19,r2,806a28 <___vfprintf_internal_r+0x1320>
  806a24:	d8814515 	stw	r2,1300(sp)
  806a28:	00802074 	movhi	r2,129
  806a2c:	1089b704 	addi	r2,r2,9948
  806a30:	dcc14615 	stw	r19,1304(sp)
  806a34:	d8814115 	stw	r2,1284(sp)
  806a38:	003dd506 	br	806190 <___vfprintf_internal_r+0xa88>
  806a3c:	d9401904 	addi	r5,sp,100
  806a40:	dd000f04 	addi	r20,sp,60
  806a44:	d9414115 	stw	r5,1284(sp)
  806a48:	880a977a 	slli	r5,r17,29
  806a4c:	d9814117 	ldw	r6,1284(sp)
  806a50:	8004d0fa 	srli	r2,r16,3
  806a54:	8806d0fa 	srli	r3,r17,3
  806a58:	810001cc 	andi	r4,r16,7
  806a5c:	2884b03a 	or	r2,r5,r2
  806a60:	31bfffc4 	addi	r6,r6,-1
  806a64:	21000c04 	addi	r4,r4,48
  806a68:	d9814115 	stw	r6,1284(sp)
  806a6c:	10cab03a 	or	r5,r2,r3
  806a70:	31000005 	stb	r4,0(r6)
  806a74:	1021883a 	mov	r16,r2
  806a78:	1823883a 	mov	r17,r3
  806a7c:	283ff21e 	bne	r5,zero,806a48 <___vfprintf_internal_r+0x1340>
  806a80:	d8c14c17 	ldw	r3,1328(sp)
  806a84:	1880004c 	andi	r2,r3,1
  806a88:	1005003a 	cmpeq	r2,r2,zero
  806a8c:	103db91e 	bne	r2,zero,806174 <___vfprintf_internal_r+0xa6c>
  806a90:	20803fcc 	andi	r2,r4,255
  806a94:	1080201c 	xori	r2,r2,128
  806a98:	10bfe004 	addi	r2,r2,-128
  806a9c:	00c00c04 	movi	r3,48
  806aa0:	10fdb426 	beq	r2,r3,806174 <___vfprintf_internal_r+0xa6c>
  806aa4:	31bfffc4 	addi	r6,r6,-1
  806aa8:	d9814115 	stw	r6,1284(sp)
  806aac:	30c00005 	stb	r3,0(r6)
  806ab0:	003db006 	br	806174 <___vfprintf_internal_r+0xa6c>
  806ab4:	88800068 	cmpgeui	r2,r17,1
  806ab8:	10002c1e 	bne	r2,zero,806b6c <___vfprintf_internal_r+0x1464>
  806abc:	8800021e 	bne	r17,zero,806ac8 <___vfprintf_internal_r+0x13c0>
  806ac0:	00800244 	movi	r2,9
  806ac4:	14002936 	bltu	r2,r16,806b6c <___vfprintf_internal_r+0x1464>
  806ac8:	d90018c4 	addi	r4,sp,99
  806acc:	dd000f04 	addi	r20,sp,60
  806ad0:	d9014115 	stw	r4,1284(sp)
  806ad4:	d9014117 	ldw	r4,1284(sp)
  806ad8:	80800c04 	addi	r2,r16,48
  806adc:	20800005 	stb	r2,0(r4)
  806ae0:	003da406 	br	806174 <___vfprintf_internal_r+0xa6c>
  806ae4:	dc400d17 	ldw	r17,52(sp)
  806ae8:	07002074 	movhi	fp,129
  806aec:	e709be84 	addi	fp,fp,9978
  806af0:	9425883a 	add	r18,r18,r16
  806af4:	8c400044 	addi	r17,r17,1
  806af8:	008001c4 	movi	r2,7
  806afc:	1f000015 	stw	fp,0(r3)
  806b00:	1c000115 	stw	r16,4(r3)
  806b04:	dc800e15 	stw	r18,56(sp)
  806b08:	dc400d15 	stw	r17,52(sp)
  806b0c:	147de216 	blt	r2,r17,806298 <___vfprintf_internal_r+0xb90>
  806b10:	18c00204 	addi	r3,r3,8
  806b14:	003c7a06 	br	805d00 <___vfprintf_internal_r+0x5f8>
  806b18:	01000084 	movi	r4,2
  806b1c:	d8000405 	stb	zero,16(sp)
  806b20:	003d8706 	br	806140 <___vfprintf_internal_r+0xa38>
  806b24:	d9814c17 	ldw	r6,1328(sp)
  806b28:	30c4703a 	and	r2,r6,r3
  806b2c:	1005003a 	cmpeq	r2,r2,zero
  806b30:	103cb926 	beq	r2,zero,805e18 <___vfprintf_internal_r+0x710>
  806b34:	d9014117 	ldw	r4,1284(sp)
  806b38:	94800044 	addi	r18,r18,1
  806b3c:	8c400044 	addi	r17,r17,1
  806b40:	008001c4 	movi	r2,7
  806b44:	a9000015 	stw	r4,0(r21)
  806b48:	a8c00115 	stw	r3,4(r21)
  806b4c:	dc800e15 	stw	r18,56(sp)
  806b50:	dc400d15 	stw	r17,52(sp)
  806b54:	147e6616 	blt	r2,r17,8064f0 <___vfprintf_internal_r+0xde8>
  806b58:	acc00204 	addi	r19,r21,8
  806b5c:	003cd706 	br	805ebc <___vfprintf_internal_r+0x7b4>
  806b60:	07002074 	movhi	fp,129
  806b64:	e709be84 	addi	fp,fp,9978
  806b68:	003c4f06 	br	805ca8 <___vfprintf_internal_r+0x5a0>
  806b6c:	dd000f04 	addi	r20,sp,60
  806b70:	dc801904 	addi	r18,sp,100
  806b74:	8009883a 	mov	r4,r16
  806b78:	880b883a 	mov	r5,r17
  806b7c:	01800284 	movi	r6,10
  806b80:	000f883a 	mov	r7,zero
  806b84:	080c6ac0 	call	80c6ac <__umoddi3>
  806b88:	12000c04 	addi	r8,r2,48
  806b8c:	94bfffc4 	addi	r18,r18,-1
  806b90:	8009883a 	mov	r4,r16
  806b94:	880b883a 	mov	r5,r17
  806b98:	01800284 	movi	r6,10
  806b9c:	000f883a 	mov	r7,zero
  806ba0:	92000005 	stb	r8,0(r18)
  806ba4:	080c0d00 	call	80c0d0 <__udivdi3>
  806ba8:	1009883a 	mov	r4,r2
  806bac:	1021883a 	mov	r16,r2
  806bb0:	18800068 	cmpgeui	r2,r3,1
  806bb4:	1823883a 	mov	r17,r3
  806bb8:	103fee1e 	bne	r2,zero,806b74 <___vfprintf_internal_r+0x146c>
  806bbc:	1800021e 	bne	r3,zero,806bc8 <___vfprintf_internal_r+0x14c0>
  806bc0:	00800244 	movi	r2,9
  806bc4:	113feb36 	bltu	r2,r4,806b74 <___vfprintf_internal_r+0x146c>
  806bc8:	94bfffc4 	addi	r18,r18,-1
  806bcc:	dc814115 	stw	r18,1284(sp)
  806bd0:	003fc006 	br	806ad4 <___vfprintf_internal_r+0x13cc>
  806bd4:	d9014c17 	ldw	r4,1328(sp)
  806bd8:	2080004c 	andi	r2,r4,1
  806bdc:	10009a1e 	bne	r2,zero,806e48 <___vfprintf_internal_r+0x1740>
  806be0:	d9401904 	addi	r5,sp,100
  806be4:	dd000f04 	addi	r20,sp,60
  806be8:	d9414115 	stw	r5,1284(sp)
  806bec:	003d6106 	br	806174 <___vfprintf_internal_r+0xa6c>
  806bf0:	d9014f17 	ldw	r4,1340(sp)
  806bf4:	b00b883a 	mov	r5,r22
  806bf8:	d9800c04 	addi	r6,sp,48
  806bfc:	08056b00 	call	8056b0 <__sprint_r>
  806c00:	103c791e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806c04:	dc800e17 	ldw	r18,56(sp)
  806c08:	d8c01904 	addi	r3,sp,100
  806c0c:	003cff06 	br	80600c <___vfprintf_internal_r+0x904>
  806c10:	d8c14c17 	ldw	r3,1328(sp)
  806c14:	1880040c 	andi	r2,r3,16
  806c18:	1000711e 	bne	r2,zero,806de0 <___vfprintf_internal_r+0x16d8>
  806c1c:	d9014c17 	ldw	r4,1328(sp)
  806c20:	2080100c 	andi	r2,r4,64
  806c24:	10006e26 	beq	r2,zero,806de0 <___vfprintf_internal_r+0x16d8>
  806c28:	3c00000b 	ldhu	r16,0(r7)
  806c2c:	0023883a 	mov	r17,zero
  806c30:	39c00104 	addi	r7,r7,4
  806c34:	d9c14015 	stw	r7,1280(sp)
  806c38:	003f0006 	br	80683c <___vfprintf_internal_r+0x1134>
  806c3c:	dc400d17 	ldw	r17,52(sp)
  806c40:	07002074 	movhi	fp,129
  806c44:	e709be84 	addi	fp,fp,9978
  806c48:	9425883a 	add	r18,r18,r16
  806c4c:	8c400044 	addi	r17,r17,1
  806c50:	008001c4 	movi	r2,7
  806c54:	1f000015 	stw	fp,0(r3)
  806c58:	1c000115 	stw	r16,4(r3)
  806c5c:	dc800e15 	stw	r18,56(sp)
  806c60:	dc400d15 	stw	r17,52(sp)
  806c64:	147d7616 	blt	r2,r17,806240 <___vfprintf_internal_r+0xb38>
  806c68:	18c00204 	addi	r3,r3,8
  806c6c:	003d7b06 	br	80625c <___vfprintf_internal_r+0xb54>
  806c70:	dc800e17 	ldw	r18,56(sp)
  806c74:	dc400d17 	ldw	r17,52(sp)
  806c78:	07002074 	movhi	fp,129
  806c7c:	e709c284 	addi	fp,fp,9994
  806c80:	003bc006 	br	805b84 <___vfprintf_internal_r+0x47c>
  806c84:	d9014f17 	ldw	r4,1340(sp)
  806c88:	b00b883a 	mov	r5,r22
  806c8c:	d9800c04 	addi	r6,sp,48
  806c90:	08056b00 	call	8056b0 <__sprint_r>
  806c94:	103c541e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806c98:	dc800e17 	ldw	r18,56(sp)
  806c9c:	d8c01904 	addi	r3,sp,100
  806ca0:	003ce906 	br	806048 <___vfprintf_internal_r+0x940>
  806ca4:	3c000017 	ldw	r16,0(r7)
  806ca8:	0009883a 	mov	r4,zero
  806cac:	39c00104 	addi	r7,r7,4
  806cb0:	0023883a 	mov	r17,zero
  806cb4:	d9c14015 	stw	r7,1280(sp)
  806cb8:	d8000405 	stb	zero,16(sp)
  806cbc:	003d2006 	br	806140 <___vfprintf_internal_r+0xa38>
  806cc0:	38800017 	ldw	r2,0(r7)
  806cc4:	39c00104 	addi	r7,r7,4
  806cc8:	d9c14015 	stw	r7,1280(sp)
  806ccc:	1023d7fa 	srai	r17,r2,31
  806cd0:	1021883a 	mov	r16,r2
  806cd4:	003d1806 	br	806138 <___vfprintf_internal_r+0xa30>
  806cd8:	3c000017 	ldw	r16,0(r7)
  806cdc:	01000044 	movi	r4,1
  806ce0:	39c00104 	addi	r7,r7,4
  806ce4:	0023883a 	mov	r17,zero
  806ce8:	d9c14015 	stw	r7,1280(sp)
  806cec:	d8000405 	stb	zero,16(sp)
  806cf0:	003d1306 	br	806140 <___vfprintf_internal_r+0xa38>
  806cf4:	00802074 	movhi	r2,129
  806cf8:	1089be04 	addi	r2,r2,9976
  806cfc:	94800044 	addi	r18,r18,1
  806d00:	8c400044 	addi	r17,r17,1
  806d04:	a8800015 	stw	r2,0(r21)
  806d08:	00c00044 	movi	r3,1
  806d0c:	008001c4 	movi	r2,7
  806d10:	a8c00115 	stw	r3,4(r21)
  806d14:	dc800e15 	stw	r18,56(sp)
  806d18:	dc400d15 	stw	r17,52(sp)
  806d1c:	1440ca16 	blt	r2,r17,807048 <___vfprintf_internal_r+0x1940>
  806d20:	a8c00204 	addi	r3,r21,8
  806d24:	2000061e 	bne	r4,zero,806d40 <___vfprintf_internal_r+0x1638>
  806d28:	d9414717 	ldw	r5,1308(sp)
  806d2c:	2800041e 	bne	r5,zero,806d40 <___vfprintf_internal_r+0x1638>
  806d30:	d9814c17 	ldw	r6,1328(sp)
  806d34:	3080004c 	andi	r2,r6,1
  806d38:	1005003a 	cmpeq	r2,r2,zero
  806d3c:	103bf01e 	bne	r2,zero,805d00 <___vfprintf_internal_r+0x5f8>
  806d40:	00800044 	movi	r2,1
  806d44:	dc400d17 	ldw	r17,52(sp)
  806d48:	18800115 	stw	r2,4(r3)
  806d4c:	d8814917 	ldw	r2,1316(sp)
  806d50:	94800044 	addi	r18,r18,1
  806d54:	8c400044 	addi	r17,r17,1
  806d58:	18800015 	stw	r2,0(r3)
  806d5c:	008001c4 	movi	r2,7
  806d60:	dc800e15 	stw	r18,56(sp)
  806d64:	dc400d15 	stw	r17,52(sp)
  806d68:	1440ca16 	blt	r2,r17,807094 <___vfprintf_internal_r+0x198c>
  806d6c:	18c00204 	addi	r3,r3,8
  806d70:	0121c83a 	sub	r16,zero,r4
  806d74:	0400500e 	bge	zero,r16,806eb8 <___vfprintf_internal_r+0x17b0>
  806d78:	00800404 	movi	r2,16
  806d7c:	1400800e 	bge	r2,r16,806f80 <___vfprintf_internal_r+0x1878>
  806d80:	1027883a 	mov	r19,r2
  806d84:	07002074 	movhi	fp,129
  806d88:	e709be84 	addi	fp,fp,9978
  806d8c:	050001c4 	movi	r20,7
  806d90:	00000306 	br	806da0 <___vfprintf_internal_r+0x1698>
  806d94:	18c00204 	addi	r3,r3,8
  806d98:	843ffc04 	addi	r16,r16,-16
  806d9c:	9c007a0e 	bge	r19,r16,806f88 <___vfprintf_internal_r+0x1880>
  806da0:	94800404 	addi	r18,r18,16
  806da4:	8c400044 	addi	r17,r17,1
  806da8:	1f000015 	stw	fp,0(r3)
  806dac:	1cc00115 	stw	r19,4(r3)
  806db0:	dc800e15 	stw	r18,56(sp)
  806db4:	dc400d15 	stw	r17,52(sp)
  806db8:	a47ff60e 	bge	r20,r17,806d94 <___vfprintf_internal_r+0x168c>
  806dbc:	d9014f17 	ldw	r4,1340(sp)
  806dc0:	b00b883a 	mov	r5,r22
  806dc4:	d9800c04 	addi	r6,sp,48
  806dc8:	08056b00 	call	8056b0 <__sprint_r>
  806dcc:	103c061e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806dd0:	dc800e17 	ldw	r18,56(sp)
  806dd4:	dc400d17 	ldw	r17,52(sp)
  806dd8:	d8c01904 	addi	r3,sp,100
  806ddc:	003fee06 	br	806d98 <___vfprintf_internal_r+0x1690>
  806de0:	3c000017 	ldw	r16,0(r7)
  806de4:	0023883a 	mov	r17,zero
  806de8:	39c00104 	addi	r7,r7,4
  806dec:	d9c14015 	stw	r7,1280(sp)
  806df0:	003e9206 	br	80683c <___vfprintf_internal_r+0x1134>
  806df4:	d9401904 	addi	r5,sp,100
  806df8:	dd000f04 	addi	r20,sp,60
  806dfc:	d9414115 	stw	r5,1284(sp)
  806e00:	d9814417 	ldw	r6,1296(sp)
  806e04:	880a973a 	slli	r5,r17,28
  806e08:	8004d13a 	srli	r2,r16,4
  806e0c:	810003cc 	andi	r4,r16,15
  806e10:	3109883a 	add	r4,r6,r4
  806e14:	2884b03a 	or	r2,r5,r2
  806e18:	21400003 	ldbu	r5,0(r4)
  806e1c:	d9014117 	ldw	r4,1284(sp)
  806e20:	8806d13a 	srli	r3,r17,4
  806e24:	1021883a 	mov	r16,r2
  806e28:	213fffc4 	addi	r4,r4,-1
  806e2c:	d9014115 	stw	r4,1284(sp)
  806e30:	d9814117 	ldw	r6,1284(sp)
  806e34:	10c8b03a 	or	r4,r2,r3
  806e38:	1823883a 	mov	r17,r3
  806e3c:	31400005 	stb	r5,0(r6)
  806e40:	203fef1e 	bne	r4,zero,806e00 <___vfprintf_internal_r+0x16f8>
  806e44:	003ccb06 	br	806174 <___vfprintf_internal_r+0xa6c>
  806e48:	00800c04 	movi	r2,48
  806e4c:	d98018c4 	addi	r6,sp,99
  806e50:	dd000f04 	addi	r20,sp,60
  806e54:	d88018c5 	stb	r2,99(sp)
  806e58:	d9814115 	stw	r6,1284(sp)
  806e5c:	003cc506 	br	806174 <___vfprintf_internal_r+0xa6c>
  806e60:	dc400d17 	ldw	r17,52(sp)
  806e64:	07002074 	movhi	fp,129
  806e68:	e709c284 	addi	fp,fp,9994
  806e6c:	003bc706 	br	805d8c <___vfprintf_internal_r+0x684>
  806e70:	d9414c17 	ldw	r5,1328(sp)
  806e74:	2880040c 	andi	r2,r5,16
  806e78:	10007c26 	beq	r2,zero,80706c <___vfprintf_internal_r+0x1964>
  806e7c:	38800017 	ldw	r2,0(r7)
  806e80:	39c00104 	addi	r7,r7,4
  806e84:	d9c14015 	stw	r7,1280(sp)
  806e88:	d9814b17 	ldw	r6,1324(sp)
  806e8c:	d9c14017 	ldw	r7,1280(sp)
  806e90:	11800015 	stw	r6,0(r2)
  806e94:	003a7806 	br	805878 <___vfprintf_internal_r+0x170>
  806e98:	d9014f17 	ldw	r4,1340(sp)
  806e9c:	b00b883a 	mov	r5,r22
  806ea0:	d9800c04 	addi	r6,sp,48
  806ea4:	08056b00 	call	8056b0 <__sprint_r>
  806ea8:	103bcf1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806eac:	dc800e17 	ldw	r18,56(sp)
  806eb0:	dc400d17 	ldw	r17,52(sp)
  806eb4:	d8c01904 	addi	r3,sp,100
  806eb8:	d9014717 	ldw	r4,1308(sp)
  806ebc:	d9414117 	ldw	r5,1284(sp)
  806ec0:	8c400044 	addi	r17,r17,1
  806ec4:	9125883a 	add	r18,r18,r4
  806ec8:	008001c4 	movi	r2,7
  806ecc:	19400015 	stw	r5,0(r3)
  806ed0:	19000115 	stw	r4,4(r3)
  806ed4:	dc800e15 	stw	r18,56(sp)
  806ed8:	dc400d15 	stw	r17,52(sp)
  806edc:	147cee16 	blt	r2,r17,806298 <___vfprintf_internal_r+0xb90>
  806ee0:	18c00204 	addi	r3,r3,8
  806ee4:	003b8606 	br	805d00 <___vfprintf_internal_r+0x5f8>
  806ee8:	38c00017 	ldw	r3,0(r7)
  806eec:	39000204 	addi	r4,r7,8
  806ef0:	d9014015 	stw	r4,1280(sp)
  806ef4:	d8c14215 	stw	r3,1288(sp)
  806ef8:	39c00117 	ldw	r7,4(r7)
  806efc:	d9c14315 	stw	r7,1292(sp)
  806f00:	003e2006 	br	806784 <___vfprintf_internal_r+0x107c>
  806f04:	0005883a 	mov	r2,zero
  806f08:	1409c83a 	sub	r4,r2,r16
  806f0c:	1105803a 	cmpltu	r2,r2,r4
  806f10:	044bc83a 	sub	r5,zero,r17
  806f14:	2885c83a 	sub	r2,r5,r2
  806f18:	2021883a 	mov	r16,r4
  806f1c:	1023883a 	mov	r17,r2
  806f20:	01000044 	movi	r4,1
  806f24:	00800b44 	movi	r2,45
  806f28:	d8800405 	stb	r2,16(sp)
  806f2c:	003c8406 	br	806140 <___vfprintf_internal_r+0xa38>
  806f30:	d9014f17 	ldw	r4,1340(sp)
  806f34:	b00b883a 	mov	r5,r22
  806f38:	d9800c04 	addi	r6,sp,48
  806f3c:	08056b00 	call	8056b0 <__sprint_r>
  806f40:	103ba91e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806f44:	dc800e17 	ldw	r18,56(sp)
  806f48:	dc400d17 	ldw	r17,52(sp)
  806f4c:	d9000517 	ldw	r4,20(sp)
  806f50:	d9401904 	addi	r5,sp,100
  806f54:	003da706 	br	8065f4 <___vfprintf_internal_r+0xeec>
  806f58:	d9014f17 	ldw	r4,1340(sp)
  806f5c:	b00b883a 	mov	r5,r22
  806f60:	d9800c04 	addi	r6,sp,48
  806f64:	08056b00 	call	8056b0 <__sprint_r>
  806f68:	103b9f1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806f6c:	dc800e17 	ldw	r18,56(sp)
  806f70:	dc400d17 	ldw	r17,52(sp)
  806f74:	d9000517 	ldw	r4,20(sp)
  806f78:	d8c01904 	addi	r3,sp,100
  806f7c:	003d9106 	br	8065c4 <___vfprintf_internal_r+0xebc>
  806f80:	07002074 	movhi	fp,129
  806f84:	e709be84 	addi	fp,fp,9978
  806f88:	9425883a 	add	r18,r18,r16
  806f8c:	8c400044 	addi	r17,r17,1
  806f90:	008001c4 	movi	r2,7
  806f94:	1f000015 	stw	fp,0(r3)
  806f98:	1c000115 	stw	r16,4(r3)
  806f9c:	dc800e15 	stw	r18,56(sp)
  806fa0:	dc400d15 	stw	r17,52(sp)
  806fa4:	147fbc16 	blt	r2,r17,806e98 <___vfprintf_internal_r+0x1790>
  806fa8:	18c00204 	addi	r3,r3,8
  806fac:	003fc206 	br	806eb8 <___vfprintf_internal_r+0x17b0>
  806fb0:	d9014f17 	ldw	r4,1340(sp)
  806fb4:	b00b883a 	mov	r5,r22
  806fb8:	d9800c04 	addi	r6,sp,48
  806fbc:	08056b00 	call	8056b0 <__sprint_r>
  806fc0:	103b891e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  806fc4:	dc800e17 	ldw	r18,56(sp)
  806fc8:	d9000517 	ldw	r4,20(sp)
  806fcc:	d8c01904 	addi	r3,sp,100
  806fd0:	003d0206 	br	8063dc <___vfprintf_internal_r+0xcd4>
  806fd4:	07002074 	movhi	fp,129
  806fd8:	e709be84 	addi	fp,fp,9978
  806fdc:	003be406 	br	805f70 <___vfprintf_internal_r+0x868>
  806fe0:	00802074 	movhi	r2,129
  806fe4:	1089ad04 	addi	r2,r2,9908
  806fe8:	d8814115 	stw	r2,1284(sp)
  806fec:	003df506 	br	8067c4 <___vfprintf_internal_r+0x10bc>
  806ff0:	d9014217 	ldw	r4,1288(sp)
  806ff4:	d9414317 	ldw	r5,1292(sp)
  806ff8:	080ba040 	call	80ba04 <__isnand>
  806ffc:	10003926 	beq	r2,zero,8070e4 <___vfprintf_internal_r+0x19dc>
  807000:	d9414d17 	ldw	r5,1332(sp)
  807004:	008011c4 	movi	r2,71
  807008:	1140ce16 	blt	r2,r5,807344 <___vfprintf_internal_r+0x1c3c>
  80700c:	01802074 	movhi	r6,129
  807010:	3189ae04 	addi	r6,r6,9912
  807014:	d9814115 	stw	r6,1284(sp)
  807018:	003dea06 	br	8067c4 <___vfprintf_internal_r+0x10bc>
  80701c:	d9014c17 	ldw	r4,1328(sp)
  807020:	bdc00044 	addi	r23,r23,1
  807024:	b8c00007 	ldb	r3,0(r23)
  807028:	21000814 	ori	r4,r4,32
  80702c:	d9014c15 	stw	r4,1328(sp)
  807030:	003a3406 	br	805904 <___vfprintf_internal_r+0x1fc>
  807034:	dcc14515 	stw	r19,1300(sp)
  807038:	98011016 	blt	r19,zero,80747c <___vfprintf_internal_r+0x1d74>
  80703c:	980f883a 	mov	r7,r19
  807040:	d8014615 	stw	zero,1304(sp)
  807044:	003c5206 	br	806190 <___vfprintf_internal_r+0xa88>
  807048:	d9014f17 	ldw	r4,1340(sp)
  80704c:	b00b883a 	mov	r5,r22
  807050:	d9800c04 	addi	r6,sp,48
  807054:	08056b00 	call	8056b0 <__sprint_r>
  807058:	103b631e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  80705c:	dc800e17 	ldw	r18,56(sp)
  807060:	d9000517 	ldw	r4,20(sp)
  807064:	d8c01904 	addi	r3,sp,100
  807068:	003f2e06 	br	806d24 <___vfprintf_internal_r+0x161c>
  80706c:	d8c14c17 	ldw	r3,1328(sp)
  807070:	1880100c 	andi	r2,r3,64
  807074:	1000a026 	beq	r2,zero,8072f8 <___vfprintf_internal_r+0x1bf0>
  807078:	38800017 	ldw	r2,0(r7)
  80707c:	39c00104 	addi	r7,r7,4
  807080:	d9c14015 	stw	r7,1280(sp)
  807084:	d9014b17 	ldw	r4,1324(sp)
  807088:	d9c14017 	ldw	r7,1280(sp)
  80708c:	1100000d 	sth	r4,0(r2)
  807090:	0039f906 	br	805878 <___vfprintf_internal_r+0x170>
  807094:	d9014f17 	ldw	r4,1340(sp)
  807098:	b00b883a 	mov	r5,r22
  80709c:	d9800c04 	addi	r6,sp,48
  8070a0:	08056b00 	call	8056b0 <__sprint_r>
  8070a4:	103b501e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8070a8:	dc800e17 	ldw	r18,56(sp)
  8070ac:	dc400d17 	ldw	r17,52(sp)
  8070b0:	d9000517 	ldw	r4,20(sp)
  8070b4:	d8c01904 	addi	r3,sp,100
  8070b8:	003f2d06 	br	806d70 <___vfprintf_internal_r+0x1668>
  8070bc:	00800184 	movi	r2,6
  8070c0:	14c09a36 	bltu	r2,r19,80732c <___vfprintf_internal_r+0x1c24>
  8070c4:	dcc14515 	stw	r19,1300(sp)
  8070c8:	9800010e 	bge	r19,zero,8070d0 <___vfprintf_internal_r+0x19c8>
  8070cc:	d8014515 	stw	zero,1300(sp)
  8070d0:	00802074 	movhi	r2,129
  8070d4:	1089b004 	addi	r2,r2,9920
  8070d8:	980f883a 	mov	r7,r19
  8070dc:	d8814115 	stw	r2,1284(sp)
  8070e0:	003a7806 	br	805ac4 <___vfprintf_internal_r+0x3bc>
  8070e4:	00bfffc4 	movi	r2,-1
  8070e8:	9880e226 	beq	r19,r2,807474 <___vfprintf_internal_r+0x1d6c>
  8070ec:	d9414d17 	ldw	r5,1332(sp)
  8070f0:	008019c4 	movi	r2,103
  8070f4:	2880dc26 	beq	r5,r2,807468 <___vfprintf_internal_r+0x1d60>
  8070f8:	008011c4 	movi	r2,71
  8070fc:	2880da26 	beq	r5,r2,807468 <___vfprintf_internal_r+0x1d60>
  807100:	d9414c17 	ldw	r5,1328(sp)
  807104:	d9014317 	ldw	r4,1292(sp)
  807108:	d9814217 	ldw	r6,1288(sp)
  80710c:	29404014 	ori	r5,r5,256
  807110:	d9414c15 	stw	r5,1328(sp)
  807114:	2000cc16 	blt	r4,zero,807448 <___vfprintf_internal_r+0x1d40>
  807118:	3021883a 	mov	r16,r6
  80711c:	2023883a 	mov	r17,r4
  807120:	0039883a 	mov	fp,zero
  807124:	d9414d17 	ldw	r5,1332(sp)
  807128:	00801984 	movi	r2,102
  80712c:	2880b726 	beq	r5,r2,80740c <___vfprintf_internal_r+0x1d04>
  807130:	00801184 	movi	r2,70
  807134:	2880b526 	beq	r5,r2,80740c <___vfprintf_internal_r+0x1d04>
  807138:	00801944 	movi	r2,101
  80713c:	2880c826 	beq	r5,r2,807460 <___vfprintf_internal_r+0x1d58>
  807140:	00801144 	movi	r2,69
  807144:	2880c626 	beq	r5,r2,807460 <___vfprintf_internal_r+0x1d58>
  807148:	9829883a 	mov	r20,r19
  80714c:	d9014f17 	ldw	r4,1340(sp)
  807150:	d8800504 	addi	r2,sp,20
  807154:	880d883a 	mov	r6,r17
  807158:	d8800115 	stw	r2,4(sp)
  80715c:	d8c00604 	addi	r3,sp,24
  807160:	d8800704 	addi	r2,sp,28
  807164:	800b883a 	mov	r5,r16
  807168:	01c00084 	movi	r7,2
  80716c:	d8c00215 	stw	r3,8(sp)
  807170:	d8800315 	stw	r2,12(sp)
  807174:	dd000015 	stw	r20,0(sp)
  807178:	0807a200 	call	807a20 <_dtoa_r>
  80717c:	d9814d17 	ldw	r6,1332(sp)
  807180:	d8814115 	stw	r2,1284(sp)
  807184:	008019c4 	movi	r2,103
  807188:	30809526 	beq	r6,r2,8073e0 <___vfprintf_internal_r+0x1cd8>
  80718c:	d8c14d17 	ldw	r3,1332(sp)
  807190:	008011c4 	movi	r2,71
  807194:	18809226 	beq	r3,r2,8073e0 <___vfprintf_internal_r+0x1cd8>
  807198:	d9414117 	ldw	r5,1284(sp)
  80719c:	d9814d17 	ldw	r6,1332(sp)
  8071a0:	00801984 	movi	r2,102
  8071a4:	2d25883a 	add	r18,r5,r20
  8071a8:	30808626 	beq	r6,r2,8073c4 <___vfprintf_internal_r+0x1cbc>
  8071ac:	00801184 	movi	r2,70
  8071b0:	30808426 	beq	r6,r2,8073c4 <___vfprintf_internal_r+0x1cbc>
  8071b4:	000d883a 	mov	r6,zero
  8071b8:	000f883a 	mov	r7,zero
  8071bc:	880b883a 	mov	r5,r17
  8071c0:	8009883a 	mov	r4,r16
  8071c4:	080d77c0 	call	80d77c <__eqdf2>
  8071c8:	1000751e 	bne	r2,zero,8073a0 <___vfprintf_internal_r+0x1c98>
  8071cc:	9005883a 	mov	r2,r18
  8071d0:	dc800715 	stw	r18,28(sp)
  8071d4:	d9014117 	ldw	r4,1284(sp)
  8071d8:	d9414d17 	ldw	r5,1332(sp)
  8071dc:	00c019c4 	movi	r3,103
  8071e0:	1125c83a 	sub	r18,r2,r4
  8071e4:	28c06826 	beq	r5,r3,807388 <___vfprintf_internal_r+0x1c80>
  8071e8:	008011c4 	movi	r2,71
  8071ec:	28806626 	beq	r5,r2,807388 <___vfprintf_internal_r+0x1c80>
  8071f0:	d9000517 	ldw	r4,20(sp)
  8071f4:	d8c14d17 	ldw	r3,1332(sp)
  8071f8:	00801944 	movi	r2,101
  8071fc:	10c05516 	blt	r2,r3,807354 <___vfprintf_internal_r+0x1c4c>
  807200:	213fffc4 	addi	r4,r4,-1
  807204:	d9000515 	stw	r4,20(sp)
  807208:	d8c00805 	stb	r3,32(sp)
  80720c:	2021883a 	mov	r16,r4
  807210:	2000c116 	blt	r4,zero,807518 <___vfprintf_internal_r+0x1e10>
  807214:	00800ac4 	movi	r2,43
  807218:	d8800845 	stb	r2,33(sp)
  80721c:	00800244 	movi	r2,9
  807220:	1400af0e 	bge	r2,r16,8074e0 <___vfprintf_internal_r+0x1dd8>
  807224:	1027883a 	mov	r19,r2
  807228:	dc400b84 	addi	r17,sp,46
  80722c:	8009883a 	mov	r4,r16
  807230:	01400284 	movi	r5,10
  807234:	080de640 	call	80de64 <__modsi3>
  807238:	10800c04 	addi	r2,r2,48
  80723c:	8c7fffc4 	addi	r17,r17,-1
  807240:	8009883a 	mov	r4,r16
  807244:	01400284 	movi	r5,10
  807248:	88800005 	stb	r2,0(r17)
  80724c:	080de040 	call	80de04 <__divsi3>
  807250:	1021883a 	mov	r16,r2
  807254:	98bff516 	blt	r19,r2,80722c <___vfprintf_internal_r+0x1b24>
  807258:	10c00c04 	addi	r3,r2,48
  80725c:	d88009c4 	addi	r2,sp,39
  807260:	108001c4 	addi	r2,r2,7
  807264:	897fffc4 	addi	r5,r17,-1
  807268:	88ffffc5 	stb	r3,-1(r17)
  80726c:	2880a72e 	bgeu	r5,r2,80750c <___vfprintf_internal_r+0x1e04>
  807270:	1009883a 	mov	r4,r2
  807274:	d9800804 	addi	r6,sp,32
  807278:	d8c00884 	addi	r3,sp,34
  80727c:	28800003 	ldbu	r2,0(r5)
  807280:	29400044 	addi	r5,r5,1
  807284:	18800005 	stb	r2,0(r3)
  807288:	18c00044 	addi	r3,r3,1
  80728c:	293ffb36 	bltu	r5,r4,80727c <___vfprintf_internal_r+0x1b74>
  807290:	1987c83a 	sub	r3,r3,r6
  807294:	00800044 	movi	r2,1
  807298:	d8c14815 	stw	r3,1312(sp)
  80729c:	90cf883a 	add	r7,r18,r3
  8072a0:	1480960e 	bge	r2,r18,8074fc <___vfprintf_internal_r+0x1df4>
  8072a4:	39c00044 	addi	r7,r7,1
  8072a8:	d9c14515 	stw	r7,1300(sp)
  8072ac:	38003416 	blt	r7,zero,807380 <___vfprintf_internal_r+0x1c78>
  8072b0:	e0803fcc 	andi	r2,fp,255
  8072b4:	1080201c 	xori	r2,r2,128
  8072b8:	10bfe004 	addi	r2,r2,-128
  8072bc:	10004e26 	beq	r2,zero,8073f8 <___vfprintf_internal_r+0x1cf0>
  8072c0:	00800b44 	movi	r2,45
  8072c4:	dc814715 	stw	r18,1308(sp)
  8072c8:	d8014615 	stw	zero,1304(sp)
  8072cc:	d8800405 	stb	r2,16(sp)
  8072d0:	003bb106 	br	806198 <___vfprintf_internal_r+0xa90>
  8072d4:	00800b44 	movi	r2,45
  8072d8:	d8800405 	stb	r2,16(sp)
  8072dc:	003d3306 	br	8067ac <___vfprintf_internal_r+0x10a4>
  8072e0:	d9014f17 	ldw	r4,1340(sp)
  8072e4:	b00b883a 	mov	r5,r22
  8072e8:	d9800c04 	addi	r6,sp,48
  8072ec:	08056b00 	call	8056b0 <__sprint_r>
  8072f0:	103abd1e 	bne	r2,zero,805de8 <___vfprintf_internal_r+0x6e0>
  8072f4:	003abb06 	br	805de4 <___vfprintf_internal_r+0x6dc>
  8072f8:	38800017 	ldw	r2,0(r7)
  8072fc:	39c00104 	addi	r7,r7,4
  807300:	d9c14015 	stw	r7,1280(sp)
  807304:	d9414b17 	ldw	r5,1324(sp)
  807308:	d9c14017 	ldw	r7,1280(sp)
  80730c:	11400015 	stw	r5,0(r2)
  807310:	00395906 	br	805878 <___vfprintf_internal_r+0x170>
  807314:	980f883a 	mov	r7,r19
  807318:	dcc14515 	stw	r19,1300(sp)
  80731c:	d8014615 	stw	zero,1304(sp)
  807320:	003b9b06 	br	806190 <___vfprintf_internal_r+0xa88>
  807324:	0027883a 	mov	r19,zero
  807328:	00397806 	br	80590c <___vfprintf_internal_r+0x204>
  80732c:	00c02074 	movhi	r3,129
  807330:	18c9b004 	addi	r3,r3,9920
  807334:	100f883a 	mov	r7,r2
  807338:	d8814515 	stw	r2,1300(sp)
  80733c:	d8c14115 	stw	r3,1284(sp)
  807340:	0039e006 	br	805ac4 <___vfprintf_internal_r+0x3bc>
  807344:	00802074 	movhi	r2,129
  807348:	1089af04 	addi	r2,r2,9916
  80734c:	d8814115 	stw	r2,1284(sp)
  807350:	003d1c06 	br	8067c4 <___vfprintf_internal_r+0x10bc>
  807354:	d9414d17 	ldw	r5,1332(sp)
  807358:	00801984 	movi	r2,102
  80735c:	28804926 	beq	r5,r2,807484 <___vfprintf_internal_r+0x1d7c>
  807360:	200f883a 	mov	r7,r4
  807364:	24805716 	blt	r4,r18,8074c4 <___vfprintf_internal_r+0x1dbc>
  807368:	d9414c17 	ldw	r5,1328(sp)
  80736c:	2880004c 	andi	r2,r5,1
  807370:	10000126 	beq	r2,zero,807378 <___vfprintf_internal_r+0x1c70>
  807374:	21c00044 	addi	r7,r4,1
  807378:	d9c14515 	stw	r7,1300(sp)
  80737c:	383fcc0e 	bge	r7,zero,8072b0 <___vfprintf_internal_r+0x1ba8>
  807380:	d8014515 	stw	zero,1300(sp)
  807384:	003fca06 	br	8072b0 <___vfprintf_internal_r+0x1ba8>
  807388:	d9000517 	ldw	r4,20(sp)
  80738c:	00bfff04 	movi	r2,-4
  807390:	1100480e 	bge	r2,r4,8074b4 <___vfprintf_internal_r+0x1dac>
  807394:	99004716 	blt	r19,r4,8074b4 <___vfprintf_internal_r+0x1dac>
  807398:	d8c14d15 	stw	r3,1332(sp)
  80739c:	003ff006 	br	807360 <___vfprintf_internal_r+0x1c58>
  8073a0:	d8800717 	ldw	r2,28(sp)
  8073a4:	14bf8b2e 	bgeu	r2,r18,8071d4 <___vfprintf_internal_r+0x1acc>
  8073a8:	9007883a 	mov	r3,r18
  8073ac:	01000c04 	movi	r4,48
  8073b0:	11000005 	stb	r4,0(r2)
  8073b4:	10800044 	addi	r2,r2,1
  8073b8:	d8800715 	stw	r2,28(sp)
  8073bc:	18bffc1e 	bne	r3,r2,8073b0 <___vfprintf_internal_r+0x1ca8>
  8073c0:	003f8406 	br	8071d4 <___vfprintf_internal_r+0x1acc>
  8073c4:	d8814117 	ldw	r2,1284(sp)
  8073c8:	10c00007 	ldb	r3,0(r2)
  8073cc:	00800c04 	movi	r2,48
  8073d0:	18805b26 	beq	r3,r2,807540 <___vfprintf_internal_r+0x1e38>
  8073d4:	d9000517 	ldw	r4,20(sp)
  8073d8:	9125883a 	add	r18,r18,r4
  8073dc:	003f7506 	br	8071b4 <___vfprintf_internal_r+0x1aac>
  8073e0:	d9014c17 	ldw	r4,1328(sp)
  8073e4:	2080004c 	andi	r2,r4,1
  8073e8:	1005003a 	cmpeq	r2,r2,zero
  8073ec:	103f6a26 	beq	r2,zero,807198 <___vfprintf_internal_r+0x1a90>
  8073f0:	d8800717 	ldw	r2,28(sp)
  8073f4:	003f7706 	br	8071d4 <___vfprintf_internal_r+0x1acc>
  8073f8:	d9c14515 	stw	r7,1300(sp)
  8073fc:	38004d16 	blt	r7,zero,807534 <___vfprintf_internal_r+0x1e2c>
  807400:	dc814715 	stw	r18,1308(sp)
  807404:	d8014615 	stw	zero,1304(sp)
  807408:	003b6106 	br	806190 <___vfprintf_internal_r+0xa88>
  80740c:	d9014f17 	ldw	r4,1340(sp)
  807410:	d8800504 	addi	r2,sp,20
  807414:	d8800115 	stw	r2,4(sp)
  807418:	d8c00604 	addi	r3,sp,24
  80741c:	d8800704 	addi	r2,sp,28
  807420:	800b883a 	mov	r5,r16
  807424:	880d883a 	mov	r6,r17
  807428:	01c000c4 	movi	r7,3
  80742c:	d8c00215 	stw	r3,8(sp)
  807430:	d8800315 	stw	r2,12(sp)
  807434:	dcc00015 	stw	r19,0(sp)
  807438:	9829883a 	mov	r20,r19
  80743c:	0807a200 	call	807a20 <_dtoa_r>
  807440:	d8814115 	stw	r2,1284(sp)
  807444:	003f5106 	br	80718c <___vfprintf_internal_r+0x1a84>
  807448:	d8c14217 	ldw	r3,1288(sp)
  80744c:	d9014317 	ldw	r4,1292(sp)
  807450:	07000b44 	movi	fp,45
  807454:	1821883a 	mov	r16,r3
  807458:	2460003c 	xorhi	r17,r4,32768
  80745c:	003f3106 	br	807124 <___vfprintf_internal_r+0x1a1c>
  807460:	9d000044 	addi	r20,r19,1
  807464:	003f3906 	br	80714c <___vfprintf_internal_r+0x1a44>
  807468:	983f251e 	bne	r19,zero,807100 <___vfprintf_internal_r+0x19f8>
  80746c:	04c00044 	movi	r19,1
  807470:	003f2306 	br	807100 <___vfprintf_internal_r+0x19f8>
  807474:	04c00184 	movi	r19,6
  807478:	003f2106 	br	807100 <___vfprintf_internal_r+0x19f8>
  80747c:	d8014515 	stw	zero,1300(sp)
  807480:	003eee06 	br	80703c <___vfprintf_internal_r+0x1934>
  807484:	200f883a 	mov	r7,r4
  807488:	0100370e 	bge	zero,r4,807568 <___vfprintf_internal_r+0x1e60>
  80748c:	9800031e 	bne	r19,zero,80749c <___vfprintf_internal_r+0x1d94>
  807490:	d9814c17 	ldw	r6,1328(sp)
  807494:	3080004c 	andi	r2,r6,1
  807498:	103fb726 	beq	r2,zero,807378 <___vfprintf_internal_r+0x1c70>
  80749c:	20800044 	addi	r2,r4,1
  8074a0:	98a7883a 	add	r19,r19,r2
  8074a4:	dcc14515 	stw	r19,1300(sp)
  8074a8:	980f883a 	mov	r7,r19
  8074ac:	983f800e 	bge	r19,zero,8072b0 <___vfprintf_internal_r+0x1ba8>
  8074b0:	003fb306 	br	807380 <___vfprintf_internal_r+0x1c78>
  8074b4:	d9814d17 	ldw	r6,1332(sp)
  8074b8:	31bfff84 	addi	r6,r6,-2
  8074bc:	d9814d15 	stw	r6,1332(sp)
  8074c0:	003f4c06 	br	8071f4 <___vfprintf_internal_r+0x1aec>
  8074c4:	0100180e 	bge	zero,r4,807528 <___vfprintf_internal_r+0x1e20>
  8074c8:	00800044 	movi	r2,1
  8074cc:	1485883a 	add	r2,r2,r18
  8074d0:	d8814515 	stw	r2,1300(sp)
  8074d4:	100f883a 	mov	r7,r2
  8074d8:	103f750e 	bge	r2,zero,8072b0 <___vfprintf_internal_r+0x1ba8>
  8074dc:	003fa806 	br	807380 <___vfprintf_internal_r+0x1c78>
  8074e0:	80c00c04 	addi	r3,r16,48
  8074e4:	00800c04 	movi	r2,48
  8074e8:	d8c008c5 	stb	r3,35(sp)
  8074ec:	d9800804 	addi	r6,sp,32
  8074f0:	d8c00904 	addi	r3,sp,36
  8074f4:	d8800885 	stb	r2,34(sp)
  8074f8:	003f6506 	br	807290 <___vfprintf_internal_r+0x1b88>
  8074fc:	d9014c17 	ldw	r4,1328(sp)
  807500:	2084703a 	and	r2,r4,r2
  807504:	103f9c26 	beq	r2,zero,807378 <___vfprintf_internal_r+0x1c70>
  807508:	003f6606 	br	8072a4 <___vfprintf_internal_r+0x1b9c>
  80750c:	d9800804 	addi	r6,sp,32
  807510:	d8c00884 	addi	r3,sp,34
  807514:	003f5e06 	br	807290 <___vfprintf_internal_r+0x1b88>
  807518:	00800b44 	movi	r2,45
  80751c:	0121c83a 	sub	r16,zero,r4
  807520:	d8800845 	stb	r2,33(sp)
  807524:	003f3d06 	br	80721c <___vfprintf_internal_r+0x1b14>
  807528:	00800084 	movi	r2,2
  80752c:	1105c83a 	sub	r2,r2,r4
  807530:	003fe606 	br	8074cc <___vfprintf_internal_r+0x1dc4>
  807534:	d8014515 	stw	zero,1300(sp)
  807538:	dc814715 	stw	r18,1308(sp)
  80753c:	003fb106 	br	807404 <___vfprintf_internal_r+0x1cfc>
  807540:	000d883a 	mov	r6,zero
  807544:	000f883a 	mov	r7,zero
  807548:	8009883a 	mov	r4,r16
  80754c:	880b883a 	mov	r5,r17
  807550:	080d8040 	call	80d804 <__nedf2>
  807554:	103f9f26 	beq	r2,zero,8073d4 <___vfprintf_internal_r+0x1ccc>
  807558:	00800044 	movi	r2,1
  80755c:	1509c83a 	sub	r4,r2,r20
  807560:	d9000515 	stw	r4,20(sp)
  807564:	003f9b06 	br	8073d4 <___vfprintf_internal_r+0x1ccc>
  807568:	98000d1e 	bne	r19,zero,8075a0 <___vfprintf_internal_r+0x1e98>
  80756c:	d8c14c17 	ldw	r3,1328(sp)
  807570:	1880004c 	andi	r2,r3,1
  807574:	10000a1e 	bne	r2,zero,8075a0 <___vfprintf_internal_r+0x1e98>
  807578:	01000044 	movi	r4,1
  80757c:	200f883a 	mov	r7,r4
  807580:	d9014515 	stw	r4,1300(sp)
  807584:	003f4a06 	br	8072b0 <___vfprintf_internal_r+0x1ba8>
  807588:	3cc00017 	ldw	r19,0(r7)
  80758c:	39c00104 	addi	r7,r7,4
  807590:	983d0e0e 	bge	r19,zero,8069cc <___vfprintf_internal_r+0x12c4>
  807594:	b8c00007 	ldb	r3,0(r23)
  807598:	04ffffc4 	movi	r19,-1
  80759c:	0038d906 	br	805904 <___vfprintf_internal_r+0x1fc>
  8075a0:	9cc00084 	addi	r19,r19,2
  8075a4:	dcc14515 	stw	r19,1300(sp)
  8075a8:	980f883a 	mov	r7,r19
  8075ac:	983f400e 	bge	r19,zero,8072b0 <___vfprintf_internal_r+0x1ba8>
  8075b0:	003f7306 	br	807380 <___vfprintf_internal_r+0x1c78>

008075b4 <__vfprintf_internal>:
  8075b4:	00802074 	movhi	r2,129
  8075b8:	1091a404 	addi	r2,r2,18064
  8075bc:	2013883a 	mov	r9,r4
  8075c0:	11000017 	ldw	r4,0(r2)
  8075c4:	2805883a 	mov	r2,r5
  8075c8:	300f883a 	mov	r7,r6
  8075cc:	480b883a 	mov	r5,r9
  8075d0:	100d883a 	mov	r6,r2
  8075d4:	08057081 	jmpi	805708 <___vfprintf_internal_r>

008075d8 <_vsnprintf_r>:
  8075d8:	deffe604 	addi	sp,sp,-104
  8075dc:	dc401815 	stw	r17,96(sp)
  8075e0:	dc001715 	stw	r16,92(sp)
  8075e4:	dfc01915 	stw	ra,100(sp)
  8075e8:	3021883a 	mov	r16,r6
  8075ec:	00ffffc4 	movi	r3,-1
  8075f0:	2023883a 	mov	r17,r4
  8075f4:	2811883a 	mov	r8,r5
  8075f8:	30002116 	blt	r6,zero,807680 <_vsnprintf_r+0xa8>
  8075fc:	0007883a 	mov	r3,zero
  807600:	30000126 	beq	r6,zero,807608 <_vsnprintf_r+0x30>
  807604:	30ffffc4 	addi	r3,r6,-1
  807608:	00802074 	movhi	r2,129
  80760c:	1091a404 	addi	r2,r2,18064
  807610:	380d883a 	mov	r6,r7
  807614:	11000017 	ldw	r4,0(r2)
  807618:	d9c01a17 	ldw	r7,104(sp)
  80761c:	00808204 	movi	r2,520
  807620:	d880030d 	sth	r2,12(sp)
  807624:	d80b883a 	mov	r5,sp
  807628:	00bfffc4 	movi	r2,-1
  80762c:	d8c00515 	stw	r3,20(sp)
  807630:	d8c00215 	stw	r3,8(sp)
  807634:	da000415 	stw	r8,16(sp)
  807638:	d880038d 	sth	r2,14(sp)
  80763c:	da000015 	stw	r8,0(sp)
  807640:	08057080 	call	805708 <___vfprintf_internal_r>
  807644:	1007883a 	mov	r3,r2
  807648:	00bfffc4 	movi	r2,-1
  80764c:	18800916 	blt	r3,r2,807674 <_vsnprintf_r+0x9c>
  807650:	80000226 	beq	r16,zero,80765c <_vsnprintf_r+0x84>
  807654:	d8800017 	ldw	r2,0(sp)
  807658:	10000005 	stb	zero,0(r2)
  80765c:	1805883a 	mov	r2,r3
  807660:	dfc01917 	ldw	ra,100(sp)
  807664:	dc401817 	ldw	r17,96(sp)
  807668:	dc001717 	ldw	r16,92(sp)
  80766c:	dec01a04 	addi	sp,sp,104
  807670:	f800283a 	ret
  807674:	008022c4 	movi	r2,139
  807678:	88800015 	stw	r2,0(r17)
  80767c:	003ff406 	br	807650 <_vsnprintf_r+0x78>
  807680:	008022c4 	movi	r2,139
  807684:	20800015 	stw	r2,0(r4)
  807688:	003ff406 	br	80765c <_vsnprintf_r+0x84>

0080768c <vsnprintf>:
  80768c:	00802074 	movhi	r2,129
  807690:	1091a404 	addi	r2,r2,18064
  807694:	2017883a 	mov	r11,r4
  807698:	11000017 	ldw	r4,0(r2)
  80769c:	defffe04 	addi	sp,sp,-8
  8076a0:	3013883a 	mov	r9,r6
  8076a4:	2805883a 	mov	r2,r5
  8076a8:	d9c00015 	stw	r7,0(sp)
  8076ac:	580b883a 	mov	r5,r11
  8076b0:	100d883a 	mov	r6,r2
  8076b4:	480f883a 	mov	r7,r9
  8076b8:	dfc00115 	stw	ra,4(sp)
  8076bc:	08075d80 	call	8075d8 <_vsnprintf_r>
  8076c0:	dfc00117 	ldw	ra,4(sp)
  8076c4:	dec00204 	addi	sp,sp,8
  8076c8:	f800283a 	ret

008076cc <__swsetup_r>:
  8076cc:	00802074 	movhi	r2,129
  8076d0:	1091a404 	addi	r2,r2,18064
  8076d4:	10c00017 	ldw	r3,0(r2)
  8076d8:	defffd04 	addi	sp,sp,-12
  8076dc:	dc400115 	stw	r17,4(sp)
  8076e0:	dc000015 	stw	r16,0(sp)
  8076e4:	dfc00215 	stw	ra,8(sp)
  8076e8:	2023883a 	mov	r17,r4
  8076ec:	2821883a 	mov	r16,r5
  8076f0:	18000226 	beq	r3,zero,8076fc <__swsetup_r+0x30>
  8076f4:	18800e17 	ldw	r2,56(r3)
  8076f8:	10001f26 	beq	r2,zero,807778 <__swsetup_r+0xac>
  8076fc:	8100030b 	ldhu	r4,12(r16)
  807700:	2080020c 	andi	r2,r4,8
  807704:	10002826 	beq	r2,zero,8077a8 <__swsetup_r+0xdc>
  807708:	81400417 	ldw	r5,16(r16)
  80770c:	28001d26 	beq	r5,zero,807784 <__swsetup_r+0xb8>
  807710:	2080004c 	andi	r2,r4,1
  807714:	1005003a 	cmpeq	r2,r2,zero
  807718:	10000b26 	beq	r2,zero,807748 <__swsetup_r+0x7c>
  80771c:	2080008c 	andi	r2,r4,2
  807720:	10001226 	beq	r2,zero,80776c <__swsetup_r+0xa0>
  807724:	0005883a 	mov	r2,zero
  807728:	80800215 	stw	r2,8(r16)
  80772c:	28000b26 	beq	r5,zero,80775c <__swsetup_r+0x90>
  807730:	0005883a 	mov	r2,zero
  807734:	dfc00217 	ldw	ra,8(sp)
  807738:	dc400117 	ldw	r17,4(sp)
  80773c:	dc000017 	ldw	r16,0(sp)
  807740:	dec00304 	addi	sp,sp,12
  807744:	f800283a 	ret
  807748:	80800517 	ldw	r2,20(r16)
  80774c:	80000215 	stw	zero,8(r16)
  807750:	0085c83a 	sub	r2,zero,r2
  807754:	80800615 	stw	r2,24(r16)
  807758:	283ff51e 	bne	r5,zero,807730 <__swsetup_r+0x64>
  80775c:	2080200c 	andi	r2,r4,128
  807760:	103ff326 	beq	r2,zero,807730 <__swsetup_r+0x64>
  807764:	00bfffc4 	movi	r2,-1
  807768:	003ff206 	br	807734 <__swsetup_r+0x68>
  80776c:	80800517 	ldw	r2,20(r16)
  807770:	80800215 	stw	r2,8(r16)
  807774:	003fed06 	br	80772c <__swsetup_r+0x60>
  807778:	1809883a 	mov	r4,r3
  80777c:	080926c0 	call	80926c <__sinit>
  807780:	003fde06 	br	8076fc <__swsetup_r+0x30>
  807784:	20c0a00c 	andi	r3,r4,640
  807788:	00808004 	movi	r2,512
  80778c:	18bfe026 	beq	r3,r2,807710 <__swsetup_r+0x44>
  807790:	8809883a 	mov	r4,r17
  807794:	800b883a 	mov	r5,r16
  807798:	0809fe40 	call	809fe4 <__smakebuf_r>
  80779c:	8100030b 	ldhu	r4,12(r16)
  8077a0:	81400417 	ldw	r5,16(r16)
  8077a4:	003fda06 	br	807710 <__swsetup_r+0x44>
  8077a8:	2080040c 	andi	r2,r4,16
  8077ac:	103fed26 	beq	r2,zero,807764 <__swsetup_r+0x98>
  8077b0:	2080010c 	andi	r2,r4,4
  8077b4:	10001226 	beq	r2,zero,807800 <__swsetup_r+0x134>
  8077b8:	81400c17 	ldw	r5,48(r16)
  8077bc:	28000526 	beq	r5,zero,8077d4 <__swsetup_r+0x108>
  8077c0:	80801004 	addi	r2,r16,64
  8077c4:	28800226 	beq	r5,r2,8077d0 <__swsetup_r+0x104>
  8077c8:	8809883a 	mov	r4,r17
  8077cc:	08095f00 	call	8095f0 <_free_r>
  8077d0:	80000c15 	stw	zero,48(r16)
  8077d4:	8080030b 	ldhu	r2,12(r16)
  8077d8:	81400417 	ldw	r5,16(r16)
  8077dc:	80000115 	stw	zero,4(r16)
  8077e0:	10bff6cc 	andi	r2,r2,65499
  8077e4:	8080030d 	sth	r2,12(r16)
  8077e8:	81400015 	stw	r5,0(r16)
  8077ec:	8080030b 	ldhu	r2,12(r16)
  8077f0:	10800214 	ori	r2,r2,8
  8077f4:	113fffcc 	andi	r4,r2,65535
  8077f8:	8080030d 	sth	r2,12(r16)
  8077fc:	003fc306 	br	80770c <__swsetup_r+0x40>
  807800:	81400417 	ldw	r5,16(r16)
  807804:	003ff906 	br	8077ec <__swsetup_r+0x120>

00807808 <quorem>:
  807808:	28c00417 	ldw	r3,16(r5)
  80780c:	20800417 	ldw	r2,16(r4)
  807810:	defff604 	addi	sp,sp,-40
  807814:	ddc00715 	stw	r23,28(sp)
  807818:	dd400515 	stw	r21,20(sp)
  80781c:	dfc00915 	stw	ra,36(sp)
  807820:	df000815 	stw	fp,32(sp)
  807824:	dd800615 	stw	r22,24(sp)
  807828:	dd000415 	stw	r20,16(sp)
  80782c:	dcc00315 	stw	r19,12(sp)
  807830:	dc800215 	stw	r18,8(sp)
  807834:	dc400115 	stw	r17,4(sp)
  807838:	dc000015 	stw	r16,0(sp)
  80783c:	202f883a 	mov	r23,r4
  807840:	282b883a 	mov	r21,r5
  807844:	10c07416 	blt	r2,r3,807a18 <quorem+0x210>
  807848:	1c7fffc4 	addi	r17,r3,-1
  80784c:	8c45883a 	add	r2,r17,r17
  807850:	1085883a 	add	r2,r2,r2
  807854:	2c000504 	addi	r16,r5,20
  807858:	24c00504 	addi	r19,r4,20
  80785c:	14ed883a 	add	r22,r2,r19
  807860:	80a5883a 	add	r18,r16,r2
  807864:	b7000017 	ldw	fp,0(r22)
  807868:	91400017 	ldw	r5,0(r18)
  80786c:	e009883a 	mov	r4,fp
  807870:	29400044 	addi	r5,r5,1
  807874:	080dec40 	call	80dec4 <__udivsi3>
  807878:	1029883a 	mov	r20,r2
  80787c:	10003c1e 	bne	r2,zero,807970 <quorem+0x168>
  807880:	a80b883a 	mov	r5,r21
  807884:	b809883a 	mov	r4,r23
  807888:	080a5380 	call	80a538 <__mcmp>
  80788c:	10002b16 	blt	r2,zero,80793c <quorem+0x134>
  807890:	a5000044 	addi	r20,r20,1
  807894:	980f883a 	mov	r7,r19
  807898:	0011883a 	mov	r8,zero
  80789c:	0009883a 	mov	r4,zero
  8078a0:	81400017 	ldw	r5,0(r16)
  8078a4:	38c00017 	ldw	r3,0(r7)
  8078a8:	84000104 	addi	r16,r16,4
  8078ac:	28bfffcc 	andi	r2,r5,65535
  8078b0:	2085883a 	add	r2,r4,r2
  8078b4:	11bfffcc 	andi	r6,r2,65535
  8078b8:	193fffcc 	andi	r4,r3,65535
  8078bc:	1004d43a 	srli	r2,r2,16
  8078c0:	280ad43a 	srli	r5,r5,16
  8078c4:	2189c83a 	sub	r4,r4,r6
  8078c8:	2209883a 	add	r4,r4,r8
  8078cc:	1806d43a 	srli	r3,r3,16
  8078d0:	288b883a 	add	r5,r5,r2
  8078d4:	200dd43a 	srai	r6,r4,16
  8078d8:	28bfffcc 	andi	r2,r5,65535
  8078dc:	1887c83a 	sub	r3,r3,r2
  8078e0:	1987883a 	add	r3,r3,r6
  8078e4:	3900000d 	sth	r4,0(r7)
  8078e8:	38c0008d 	sth	r3,2(r7)
  8078ec:	2808d43a 	srli	r4,r5,16
  8078f0:	39c00104 	addi	r7,r7,4
  8078f4:	1811d43a 	srai	r8,r3,16
  8078f8:	943fe92e 	bgeu	r18,r16,8078a0 <quorem+0x98>
  8078fc:	8c45883a 	add	r2,r17,r17
  807900:	1085883a 	add	r2,r2,r2
  807904:	9885883a 	add	r2,r19,r2
  807908:	10c00017 	ldw	r3,0(r2)
  80790c:	18000b1e 	bne	r3,zero,80793c <quorem+0x134>
  807910:	113fff04 	addi	r4,r2,-4
  807914:	9900082e 	bgeu	r19,r4,807938 <quorem+0x130>
  807918:	10bfff17 	ldw	r2,-4(r2)
  80791c:	10000326 	beq	r2,zero,80792c <quorem+0x124>
  807920:	00000506 	br	807938 <quorem+0x130>
  807924:	20800017 	ldw	r2,0(r4)
  807928:	1000031e 	bne	r2,zero,807938 <quorem+0x130>
  80792c:	213fff04 	addi	r4,r4,-4
  807930:	8c7fffc4 	addi	r17,r17,-1
  807934:	993ffb36 	bltu	r19,r4,807924 <quorem+0x11c>
  807938:	bc400415 	stw	r17,16(r23)
  80793c:	a005883a 	mov	r2,r20
  807940:	dfc00917 	ldw	ra,36(sp)
  807944:	df000817 	ldw	fp,32(sp)
  807948:	ddc00717 	ldw	r23,28(sp)
  80794c:	dd800617 	ldw	r22,24(sp)
  807950:	dd400517 	ldw	r21,20(sp)
  807954:	dd000417 	ldw	r20,16(sp)
  807958:	dcc00317 	ldw	r19,12(sp)
  80795c:	dc800217 	ldw	r18,8(sp)
  807960:	dc400117 	ldw	r17,4(sp)
  807964:	dc000017 	ldw	r16,0(sp)
  807968:	dec00a04 	addi	sp,sp,40
  80796c:	f800283a 	ret
  807970:	980f883a 	mov	r7,r19
  807974:	8011883a 	mov	r8,r16
  807978:	0013883a 	mov	r9,zero
  80797c:	000d883a 	mov	r6,zero
  807980:	40c00017 	ldw	r3,0(r8)
  807984:	39000017 	ldw	r4,0(r7)
  807988:	42000104 	addi	r8,r8,4
  80798c:	18bfffcc 	andi	r2,r3,65535
  807990:	a085383a 	mul	r2,r20,r2
  807994:	1806d43a 	srli	r3,r3,16
  807998:	217fffcc 	andi	r5,r4,65535
  80799c:	3085883a 	add	r2,r6,r2
  8079a0:	11bfffcc 	andi	r6,r2,65535
  8079a4:	a0c7383a 	mul	r3,r20,r3
  8079a8:	1004d43a 	srli	r2,r2,16
  8079ac:	298bc83a 	sub	r5,r5,r6
  8079b0:	2a4b883a 	add	r5,r5,r9
  8079b4:	2008d43a 	srli	r4,r4,16
  8079b8:	1887883a 	add	r3,r3,r2
  8079bc:	280dd43a 	srai	r6,r5,16
  8079c0:	18bfffcc 	andi	r2,r3,65535
  8079c4:	2089c83a 	sub	r4,r4,r2
  8079c8:	2189883a 	add	r4,r4,r6
  8079cc:	3900008d 	sth	r4,2(r7)
  8079d0:	3940000d 	sth	r5,0(r7)
  8079d4:	180cd43a 	srli	r6,r3,16
  8079d8:	39c00104 	addi	r7,r7,4
  8079dc:	2013d43a 	srai	r9,r4,16
  8079e0:	923fe72e 	bgeu	r18,r8,807980 <quorem+0x178>
  8079e4:	e03fa61e 	bne	fp,zero,807880 <quorem+0x78>
  8079e8:	b0ffff04 	addi	r3,r22,-4
  8079ec:	98c0082e 	bgeu	r19,r3,807a10 <quorem+0x208>
  8079f0:	b0bfff17 	ldw	r2,-4(r22)
  8079f4:	10000326 	beq	r2,zero,807a04 <quorem+0x1fc>
  8079f8:	00000506 	br	807a10 <quorem+0x208>
  8079fc:	18800017 	ldw	r2,0(r3)
  807a00:	1000031e 	bne	r2,zero,807a10 <quorem+0x208>
  807a04:	18ffff04 	addi	r3,r3,-4
  807a08:	8c7fffc4 	addi	r17,r17,-1
  807a0c:	98fffb36 	bltu	r19,r3,8079fc <quorem+0x1f4>
  807a10:	bc400415 	stw	r17,16(r23)
  807a14:	003f9a06 	br	807880 <quorem+0x78>
  807a18:	0005883a 	mov	r2,zero
  807a1c:	003fc806 	br	807940 <quorem+0x138>

00807a20 <_dtoa_r>:
  807a20:	22001017 	ldw	r8,64(r4)
  807a24:	deffda04 	addi	sp,sp,-152
  807a28:	dd402115 	stw	r21,132(sp)
  807a2c:	dd002015 	stw	r20,128(sp)
  807a30:	dc801e15 	stw	r18,120(sp)
  807a34:	dc401d15 	stw	r17,116(sp)
  807a38:	dfc02515 	stw	ra,148(sp)
  807a3c:	df002415 	stw	fp,144(sp)
  807a40:	ddc02315 	stw	r23,140(sp)
  807a44:	dd802215 	stw	r22,136(sp)
  807a48:	dcc01f15 	stw	r19,124(sp)
  807a4c:	dc001c15 	stw	r16,112(sp)
  807a50:	d9001615 	stw	r4,88(sp)
  807a54:	3023883a 	mov	r17,r6
  807a58:	2829883a 	mov	r20,r5
  807a5c:	d9c01715 	stw	r7,92(sp)
  807a60:	dc802817 	ldw	r18,160(sp)
  807a64:	302b883a 	mov	r21,r6
  807a68:	40000a26 	beq	r8,zero,807a94 <_dtoa_r+0x74>
  807a6c:	20801117 	ldw	r2,68(r4)
  807a70:	400b883a 	mov	r5,r8
  807a74:	40800115 	stw	r2,4(r8)
  807a78:	20c01117 	ldw	r3,68(r4)
  807a7c:	00800044 	movi	r2,1
  807a80:	10c4983a 	sll	r2,r2,r3
  807a84:	40800215 	stw	r2,8(r8)
  807a88:	080a3dc0 	call	80a3dc <_Bfree>
  807a8c:	d8c01617 	ldw	r3,88(sp)
  807a90:	18001015 	stw	zero,64(r3)
  807a94:	8800a316 	blt	r17,zero,807d24 <_dtoa_r+0x304>
  807a98:	90000015 	stw	zero,0(r18)
  807a9c:	a8dffc2c 	andhi	r3,r21,32752
  807aa0:	009ffc34 	movhi	r2,32752
  807aa4:	18809126 	beq	r3,r2,807cec <_dtoa_r+0x2cc>
  807aa8:	000d883a 	mov	r6,zero
  807aac:	000f883a 	mov	r7,zero
  807ab0:	a009883a 	mov	r4,r20
  807ab4:	a80b883a 	mov	r5,r21
  807ab8:	dd001215 	stw	r20,72(sp)
  807abc:	dd401315 	stw	r21,76(sp)
  807ac0:	080d8040 	call	80d804 <__nedf2>
  807ac4:	1000171e 	bne	r2,zero,807b24 <_dtoa_r+0x104>
  807ac8:	d9802717 	ldw	r6,156(sp)
  807acc:	00800044 	movi	r2,1
  807ad0:	30800015 	stw	r2,0(r6)
  807ad4:	d8802917 	ldw	r2,164(sp)
  807ad8:	10029b26 	beq	r2,zero,808548 <_dtoa_r+0xb28>
  807adc:	d9002917 	ldw	r4,164(sp)
  807ae0:	00802074 	movhi	r2,129
  807ae4:	1089be44 	addi	r2,r2,9977
  807ae8:	10ffffc4 	addi	r3,r2,-1
  807aec:	20800015 	stw	r2,0(r4)
  807af0:	1805883a 	mov	r2,r3
  807af4:	dfc02517 	ldw	ra,148(sp)
  807af8:	df002417 	ldw	fp,144(sp)
  807afc:	ddc02317 	ldw	r23,140(sp)
  807b00:	dd802217 	ldw	r22,136(sp)
  807b04:	dd402117 	ldw	r21,132(sp)
  807b08:	dd002017 	ldw	r20,128(sp)
  807b0c:	dcc01f17 	ldw	r19,124(sp)
  807b10:	dc801e17 	ldw	r18,120(sp)
  807b14:	dc401d17 	ldw	r17,116(sp)
  807b18:	dc001c17 	ldw	r16,112(sp)
  807b1c:	dec02604 	addi	sp,sp,152
  807b20:	f800283a 	ret
  807b24:	d9001617 	ldw	r4,88(sp)
  807b28:	d9401217 	ldw	r5,72(sp)
  807b2c:	d8800104 	addi	r2,sp,4
  807b30:	a80d883a 	mov	r6,r21
  807b34:	d9c00204 	addi	r7,sp,8
  807b38:	d8800015 	stw	r2,0(sp)
  807b3c:	080aa180 	call	80aa18 <__d2b>
  807b40:	d8800715 	stw	r2,28(sp)
  807b44:	a804d53a 	srli	r2,r21,20
  807b48:	1101ffcc 	andi	r4,r2,2047
  807b4c:	20008626 	beq	r4,zero,807d68 <_dtoa_r+0x348>
  807b50:	d8c01217 	ldw	r3,72(sp)
  807b54:	00800434 	movhi	r2,16
  807b58:	10bfffc4 	addi	r2,r2,-1
  807b5c:	ddc00117 	ldw	r23,4(sp)
  807b60:	a884703a 	and	r2,r21,r2
  807b64:	1811883a 	mov	r8,r3
  807b68:	124ffc34 	orhi	r9,r2,16368
  807b6c:	25bf0044 	addi	r22,r4,-1023
  807b70:	d8000815 	stw	zero,32(sp)
  807b74:	0005883a 	mov	r2,zero
  807b78:	00cffe34 	movhi	r3,16376
  807b7c:	480b883a 	mov	r5,r9
  807b80:	4009883a 	mov	r4,r8
  807b84:	180f883a 	mov	r7,r3
  807b88:	100d883a 	mov	r6,r2
  807b8c:	080d06c0 	call	80d06c <__subdf3>
  807b90:	0218dbf4 	movhi	r8,25455
  807b94:	4210d844 	addi	r8,r8,17249
  807b98:	024ff4f4 	movhi	r9,16339
  807b9c:	4a61e9c4 	addi	r9,r9,-30809
  807ba0:	480f883a 	mov	r7,r9
  807ba4:	400d883a 	mov	r6,r8
  807ba8:	180b883a 	mov	r5,r3
  807bac:	1009883a 	mov	r4,r2
  807bb0:	080d1600 	call	80d160 <__muldf3>
  807bb4:	0222d874 	movhi	r8,35681
  807bb8:	42322cc4 	addi	r8,r8,-14157
  807bbc:	024ff1f4 	movhi	r9,16327
  807bc0:	4a628a04 	addi	r9,r9,-30168
  807bc4:	480f883a 	mov	r7,r9
  807bc8:	400d883a 	mov	r6,r8
  807bcc:	180b883a 	mov	r5,r3
  807bd0:	1009883a 	mov	r4,r2
  807bd4:	080d0ec0 	call	80d0ec <__adddf3>
  807bd8:	b009883a 	mov	r4,r22
  807bdc:	1021883a 	mov	r16,r2
  807be0:	1823883a 	mov	r17,r3
  807be4:	080da240 	call	80da24 <__floatsidf>
  807be8:	021427f4 	movhi	r8,20639
  807bec:	421e7ec4 	addi	r8,r8,31227
  807bf0:	024ff4f4 	movhi	r9,16339
  807bf4:	4a5104c4 	addi	r9,r9,17427
  807bf8:	480f883a 	mov	r7,r9
  807bfc:	400d883a 	mov	r6,r8
  807c00:	180b883a 	mov	r5,r3
  807c04:	1009883a 	mov	r4,r2
  807c08:	080d1600 	call	80d160 <__muldf3>
  807c0c:	180f883a 	mov	r7,r3
  807c10:	880b883a 	mov	r5,r17
  807c14:	100d883a 	mov	r6,r2
  807c18:	8009883a 	mov	r4,r16
  807c1c:	080d0ec0 	call	80d0ec <__adddf3>
  807c20:	1009883a 	mov	r4,r2
  807c24:	180b883a 	mov	r5,r3
  807c28:	1021883a 	mov	r16,r2
  807c2c:	1823883a 	mov	r17,r3
  807c30:	080db1c0 	call	80db1c <__fixdfsi>
  807c34:	000d883a 	mov	r6,zero
  807c38:	000f883a 	mov	r7,zero
  807c3c:	8009883a 	mov	r4,r16
  807c40:	880b883a 	mov	r5,r17
  807c44:	d8800d15 	stw	r2,52(sp)
  807c48:	080d99c0 	call	80d99c <__ltdf2>
  807c4c:	10031716 	blt	r2,zero,8088ac <_dtoa_r+0xe8c>
  807c50:	d8c00d17 	ldw	r3,52(sp)
  807c54:	00800584 	movi	r2,22
  807c58:	10c1482e 	bgeu	r2,r3,80817c <_dtoa_r+0x75c>
  807c5c:	01000044 	movi	r4,1
  807c60:	d9000c15 	stw	r4,48(sp)
  807c64:	bd85c83a 	sub	r2,r23,r22
  807c68:	11bfffc4 	addi	r6,r2,-1
  807c6c:	30030b16 	blt	r6,zero,80889c <_dtoa_r+0xe7c>
  807c70:	d9800a15 	stw	r6,40(sp)
  807c74:	d8001115 	stw	zero,68(sp)
  807c78:	d8c00d17 	ldw	r3,52(sp)
  807c7c:	1802ff16 	blt	r3,zero,80887c <_dtoa_r+0xe5c>
  807c80:	d9000a17 	ldw	r4,40(sp)
  807c84:	d8c00915 	stw	r3,36(sp)
  807c88:	d8001015 	stw	zero,64(sp)
  807c8c:	20c9883a 	add	r4,r4,r3
  807c90:	d9000a15 	stw	r4,40(sp)
  807c94:	d9001717 	ldw	r4,92(sp)
  807c98:	00800244 	movi	r2,9
  807c9c:	11004636 	bltu	r2,r4,807db8 <_dtoa_r+0x398>
  807ca0:	00800144 	movi	r2,5
  807ca4:	11020416 	blt	r2,r4,8084b8 <_dtoa_r+0xa98>
  807ca8:	04400044 	movi	r17,1
  807cac:	d8c01717 	ldw	r3,92(sp)
  807cb0:	00800144 	movi	r2,5
  807cb4:	10c1ed36 	bltu	r2,r3,80846c <_dtoa_r+0xa4c>
  807cb8:	18c5883a 	add	r2,r3,r3
  807cbc:	1085883a 	add	r2,r2,r2
  807cc0:	00c02034 	movhi	r3,128
  807cc4:	18df3504 	addi	r3,r3,31956
  807cc8:	10c5883a 	add	r2,r2,r3
  807ccc:	11000017 	ldw	r4,0(r2)
  807cd0:	2000683a 	jmp	r4
  807cd4:	00807dc0 	call	807dc <__alt_mem_sdram_controller-0x77f824>
  807cd8:	00807dc0 	call	807dc <__alt_mem_sdram_controller-0x77f824>
  807cdc:	008087c0 	call	8087c <__alt_mem_sdram_controller-0x77f784>
  807ce0:	00808798 	cmpnei	r2,zero,542
  807ce4:	008087dc 	xori	r2,zero,543
  807ce8:	008087e8 	cmpgeui	r2,zero,543
  807cec:	d9002717 	ldw	r4,156(sp)
  807cf0:	0089c3c4 	movi	r2,9999
  807cf4:	20800015 	stw	r2,0(r4)
  807cf8:	a0001026 	beq	r20,zero,807d3c <_dtoa_r+0x31c>
  807cfc:	00c02074 	movhi	r3,129
  807d00:	18c9ca04 	addi	r3,r3,10024
  807d04:	d9802917 	ldw	r6,164(sp)
  807d08:	303f7926 	beq	r6,zero,807af0 <_dtoa_r+0xd0>
  807d0c:	188000c7 	ldb	r2,3(r3)
  807d10:	190000c4 	addi	r4,r3,3
  807d14:	1000101e 	bne	r2,zero,807d58 <_dtoa_r+0x338>
  807d18:	d8802917 	ldw	r2,164(sp)
  807d1c:	11000015 	stw	r4,0(r2)
  807d20:	003f7306 	br	807af0 <_dtoa_r+0xd0>
  807d24:	00a00034 	movhi	r2,32768
  807d28:	10bfffc4 	addi	r2,r2,-1
  807d2c:	00c00044 	movi	r3,1
  807d30:	88aa703a 	and	r21,r17,r2
  807d34:	90c00015 	stw	r3,0(r18)
  807d38:	003f5806 	br	807a9c <_dtoa_r+0x7c>
  807d3c:	00800434 	movhi	r2,16
  807d40:	10bfffc4 	addi	r2,r2,-1
  807d44:	a884703a 	and	r2,r21,r2
  807d48:	103fec1e 	bne	r2,zero,807cfc <_dtoa_r+0x2dc>
  807d4c:	00c02074 	movhi	r3,129
  807d50:	18c9c704 	addi	r3,r3,10012
  807d54:	003feb06 	br	807d04 <_dtoa_r+0x2e4>
  807d58:	d8802917 	ldw	r2,164(sp)
  807d5c:	19000204 	addi	r4,r3,8
  807d60:	11000015 	stw	r4,0(r2)
  807d64:	003f6206 	br	807af0 <_dtoa_r+0xd0>
  807d68:	ddc00117 	ldw	r23,4(sp)
  807d6c:	d8800217 	ldw	r2,8(sp)
  807d70:	01000804 	movi	r4,32
  807d74:	b8c10c84 	addi	r3,r23,1074
  807d78:	18a3883a 	add	r17,r3,r2
  807d7c:	2441b80e 	bge	r4,r17,808460 <_dtoa_r+0xa40>
  807d80:	00c01004 	movi	r3,64
  807d84:	1c47c83a 	sub	r3,r3,r17
  807d88:	88bff804 	addi	r2,r17,-32
  807d8c:	a8c6983a 	sll	r3,r21,r3
  807d90:	a084d83a 	srl	r2,r20,r2
  807d94:	1888b03a 	or	r4,r3,r2
  807d98:	080dbf40 	call	80dbf4 <__floatunsidf>
  807d9c:	1011883a 	mov	r8,r2
  807da0:	00bf8434 	movhi	r2,65040
  807da4:	01000044 	movi	r4,1
  807da8:	10d3883a 	add	r9,r2,r3
  807dac:	8dbef344 	addi	r22,r17,-1075
  807db0:	d9000815 	stw	r4,32(sp)
  807db4:	003f6f06 	br	807b74 <_dtoa_r+0x154>
  807db8:	d8001715 	stw	zero,92(sp)
  807dbc:	04400044 	movi	r17,1
  807dc0:	00bfffc4 	movi	r2,-1
  807dc4:	00c00044 	movi	r3,1
  807dc8:	d8800e15 	stw	r2,56(sp)
  807dcc:	d8002615 	stw	zero,152(sp)
  807dd0:	d8800f15 	stw	r2,60(sp)
  807dd4:	d8c00b15 	stw	r3,44(sp)
  807dd8:	1021883a 	mov	r16,r2
  807ddc:	d8801617 	ldw	r2,88(sp)
  807de0:	10001115 	stw	zero,68(r2)
  807de4:	d8801617 	ldw	r2,88(sp)
  807de8:	11401117 	ldw	r5,68(r2)
  807dec:	1009883a 	mov	r4,r2
  807df0:	080a95c0 	call	80a95c <_Balloc>
  807df4:	d8c01617 	ldw	r3,88(sp)
  807df8:	d8800515 	stw	r2,20(sp)
  807dfc:	18801015 	stw	r2,64(r3)
  807e00:	00800384 	movi	r2,14
  807e04:	14006836 	bltu	r2,r16,807fa8 <_dtoa_r+0x588>
  807e08:	8805003a 	cmpeq	r2,r17,zero
  807e0c:	1000661e 	bne	r2,zero,807fa8 <_dtoa_r+0x588>
  807e10:	d9000d17 	ldw	r4,52(sp)
  807e14:	0102300e 	bge	zero,r4,8086d8 <_dtoa_r+0xcb8>
  807e18:	208003cc 	andi	r2,r4,15
  807e1c:	100490fa 	slli	r2,r2,3
  807e20:	2025d13a 	srai	r18,r4,4
  807e24:	00c02074 	movhi	r3,129
  807e28:	18c9dc04 	addi	r3,r3,10096
  807e2c:	10c5883a 	add	r2,r2,r3
  807e30:	90c0040c 	andi	r3,r18,16
  807e34:	14000017 	ldw	r16,0(r2)
  807e38:	14400117 	ldw	r17,4(r2)
  807e3c:	18036a1e 	bne	r3,zero,808be8 <_dtoa_r+0x11c8>
  807e40:	05800084 	movi	r22,2
  807e44:	90001026 	beq	r18,zero,807e88 <_dtoa_r+0x468>
  807e48:	04c02074 	movhi	r19,129
  807e4c:	9cca0e04 	addi	r19,r19,10296
  807e50:	9080004c 	andi	r2,r18,1
  807e54:	1005003a 	cmpeq	r2,r2,zero
  807e58:	1000081e 	bne	r2,zero,807e7c <_dtoa_r+0x45c>
  807e5c:	99800017 	ldw	r6,0(r19)
  807e60:	99c00117 	ldw	r7,4(r19)
  807e64:	880b883a 	mov	r5,r17
  807e68:	8009883a 	mov	r4,r16
  807e6c:	080d1600 	call	80d160 <__muldf3>
  807e70:	1021883a 	mov	r16,r2
  807e74:	b5800044 	addi	r22,r22,1
  807e78:	1823883a 	mov	r17,r3
  807e7c:	9025d07a 	srai	r18,r18,1
  807e80:	9cc00204 	addi	r19,r19,8
  807e84:	903ff21e 	bne	r18,zero,807e50 <_dtoa_r+0x430>
  807e88:	a80b883a 	mov	r5,r21
  807e8c:	a009883a 	mov	r4,r20
  807e90:	880f883a 	mov	r7,r17
  807e94:	800d883a 	mov	r6,r16
  807e98:	080d5240 	call	80d524 <__divdf3>
  807e9c:	1029883a 	mov	r20,r2
  807ea0:	182b883a 	mov	r21,r3
  807ea4:	d8c00c17 	ldw	r3,48(sp)
  807ea8:	1805003a 	cmpeq	r2,r3,zero
  807eac:	1000081e 	bne	r2,zero,807ed0 <_dtoa_r+0x4b0>
  807eb0:	0005883a 	mov	r2,zero
  807eb4:	00cffc34 	movhi	r3,16368
  807eb8:	180f883a 	mov	r7,r3
  807ebc:	a009883a 	mov	r4,r20
  807ec0:	a80b883a 	mov	r5,r21
  807ec4:	100d883a 	mov	r6,r2
  807ec8:	080d99c0 	call	80d99c <__ltdf2>
  807ecc:	1003fe16 	blt	r2,zero,808ec8 <_dtoa_r+0x14a8>
  807ed0:	b009883a 	mov	r4,r22
  807ed4:	080da240 	call	80da24 <__floatsidf>
  807ed8:	180b883a 	mov	r5,r3
  807edc:	1009883a 	mov	r4,r2
  807ee0:	a00d883a 	mov	r6,r20
  807ee4:	a80f883a 	mov	r7,r21
  807ee8:	080d1600 	call	80d160 <__muldf3>
  807eec:	0011883a 	mov	r8,zero
  807ef0:	02500734 	movhi	r9,16412
  807ef4:	1009883a 	mov	r4,r2
  807ef8:	180b883a 	mov	r5,r3
  807efc:	480f883a 	mov	r7,r9
  807f00:	400d883a 	mov	r6,r8
  807f04:	080d0ec0 	call	80d0ec <__adddf3>
  807f08:	d9000f17 	ldw	r4,60(sp)
  807f0c:	102d883a 	mov	r22,r2
  807f10:	00bf3034 	movhi	r2,64704
  807f14:	18b9883a 	add	fp,r3,r2
  807f18:	e02f883a 	mov	r23,fp
  807f1c:	20028f1e 	bne	r4,zero,80895c <_dtoa_r+0xf3c>
  807f20:	0005883a 	mov	r2,zero
  807f24:	00d00534 	movhi	r3,16404
  807f28:	a009883a 	mov	r4,r20
  807f2c:	a80b883a 	mov	r5,r21
  807f30:	180f883a 	mov	r7,r3
  807f34:	100d883a 	mov	r6,r2
  807f38:	080d06c0 	call	80d06c <__subdf3>
  807f3c:	1009883a 	mov	r4,r2
  807f40:	e00f883a 	mov	r7,fp
  807f44:	180b883a 	mov	r5,r3
  807f48:	b00d883a 	mov	r6,r22
  807f4c:	1025883a 	mov	r18,r2
  807f50:	1827883a 	mov	r19,r3
  807f54:	080d88c0 	call	80d88c <__gtdf2>
  807f58:	00834f16 	blt	zero,r2,808c98 <_dtoa_r+0x1278>
  807f5c:	e0e0003c 	xorhi	r3,fp,32768
  807f60:	9009883a 	mov	r4,r18
  807f64:	980b883a 	mov	r5,r19
  807f68:	180f883a 	mov	r7,r3
  807f6c:	b00d883a 	mov	r6,r22
  807f70:	080d99c0 	call	80d99c <__ltdf2>
  807f74:	1000080e 	bge	r2,zero,807f98 <_dtoa_r+0x578>
  807f78:	0027883a 	mov	r19,zero
  807f7c:	0025883a 	mov	r18,zero
  807f80:	d8802617 	ldw	r2,152(sp)
  807f84:	df000517 	ldw	fp,20(sp)
  807f88:	d8000615 	stw	zero,24(sp)
  807f8c:	0084303a 	nor	r2,zero,r2
  807f90:	d8800d15 	stw	r2,52(sp)
  807f94:	00019b06 	br	808604 <_dtoa_r+0xbe4>
  807f98:	d9801217 	ldw	r6,72(sp)
  807f9c:	d8801317 	ldw	r2,76(sp)
  807fa0:	3029883a 	mov	r20,r6
  807fa4:	102b883a 	mov	r21,r2
  807fa8:	d8c00217 	ldw	r3,8(sp)
  807fac:	18008516 	blt	r3,zero,8081c4 <_dtoa_r+0x7a4>
  807fb0:	d9000d17 	ldw	r4,52(sp)
  807fb4:	00800384 	movi	r2,14
  807fb8:	11008216 	blt	r2,r4,8081c4 <_dtoa_r+0x7a4>
  807fbc:	200490fa 	slli	r2,r4,3
  807fc0:	d9802617 	ldw	r6,152(sp)
  807fc4:	00c02074 	movhi	r3,129
  807fc8:	18c9dc04 	addi	r3,r3,10096
  807fcc:	10c5883a 	add	r2,r2,r3
  807fd0:	14800017 	ldw	r18,0(r2)
  807fd4:	14c00117 	ldw	r19,4(r2)
  807fd8:	30031e16 	blt	r6,zero,808c54 <_dtoa_r+0x1234>
  807fdc:	d9000517 	ldw	r4,20(sp)
  807fe0:	d8c00f17 	ldw	r3,60(sp)
  807fe4:	a823883a 	mov	r17,r21
  807fe8:	a021883a 	mov	r16,r20
  807fec:	192b883a 	add	r21,r3,r4
  807ff0:	2039883a 	mov	fp,r4
  807ff4:	00000f06 	br	808034 <_dtoa_r+0x614>
  807ff8:	0005883a 	mov	r2,zero
  807ffc:	00d00934 	movhi	r3,16420
  808000:	5009883a 	mov	r4,r10
  808004:	580b883a 	mov	r5,r11
  808008:	180f883a 	mov	r7,r3
  80800c:	100d883a 	mov	r6,r2
  808010:	080d1600 	call	80d160 <__muldf3>
  808014:	180b883a 	mov	r5,r3
  808018:	000d883a 	mov	r6,zero
  80801c:	000f883a 	mov	r7,zero
  808020:	1009883a 	mov	r4,r2
  808024:	1021883a 	mov	r16,r2
  808028:	1823883a 	mov	r17,r3
  80802c:	080d8040 	call	80d804 <__nedf2>
  808030:	10004526 	beq	r2,zero,808148 <_dtoa_r+0x728>
  808034:	900d883a 	mov	r6,r18
  808038:	980f883a 	mov	r7,r19
  80803c:	8009883a 	mov	r4,r16
  808040:	880b883a 	mov	r5,r17
  808044:	080d5240 	call	80d524 <__divdf3>
  808048:	180b883a 	mov	r5,r3
  80804c:	1009883a 	mov	r4,r2
  808050:	080db1c0 	call	80db1c <__fixdfsi>
  808054:	1009883a 	mov	r4,r2
  808058:	1029883a 	mov	r20,r2
  80805c:	080da240 	call	80da24 <__floatsidf>
  808060:	180f883a 	mov	r7,r3
  808064:	9009883a 	mov	r4,r18
  808068:	980b883a 	mov	r5,r19
  80806c:	100d883a 	mov	r6,r2
  808070:	080d1600 	call	80d160 <__muldf3>
  808074:	180f883a 	mov	r7,r3
  808078:	880b883a 	mov	r5,r17
  80807c:	8009883a 	mov	r4,r16
  808080:	100d883a 	mov	r6,r2
  808084:	080d06c0 	call	80d06c <__subdf3>
  808088:	1015883a 	mov	r10,r2
  80808c:	a0800c04 	addi	r2,r20,48
  808090:	e0800005 	stb	r2,0(fp)
  808094:	e7000044 	addi	fp,fp,1
  808098:	1817883a 	mov	r11,r3
  80809c:	e57fd61e 	bne	fp,r21,807ff8 <_dtoa_r+0x5d8>
  8080a0:	500d883a 	mov	r6,r10
  8080a4:	180f883a 	mov	r7,r3
  8080a8:	5009883a 	mov	r4,r10
  8080ac:	180b883a 	mov	r5,r3
  8080b0:	080d0ec0 	call	80d0ec <__adddf3>
  8080b4:	100d883a 	mov	r6,r2
  8080b8:	9009883a 	mov	r4,r18
  8080bc:	980b883a 	mov	r5,r19
  8080c0:	180f883a 	mov	r7,r3
  8080c4:	1021883a 	mov	r16,r2
  8080c8:	1823883a 	mov	r17,r3
  8080cc:	080d99c0 	call	80d99c <__ltdf2>
  8080d0:	10000816 	blt	r2,zero,8080f4 <_dtoa_r+0x6d4>
  8080d4:	980b883a 	mov	r5,r19
  8080d8:	800d883a 	mov	r6,r16
  8080dc:	880f883a 	mov	r7,r17
  8080e0:	9009883a 	mov	r4,r18
  8080e4:	080d77c0 	call	80d77c <__eqdf2>
  8080e8:	1000171e 	bne	r2,zero,808148 <_dtoa_r+0x728>
  8080ec:	a080004c 	andi	r2,r20,1
  8080f0:	10001526 	beq	r2,zero,808148 <_dtoa_r+0x728>
  8080f4:	d8800d17 	ldw	r2,52(sp)
  8080f8:	d8800415 	stw	r2,16(sp)
  8080fc:	e009883a 	mov	r4,fp
  808100:	213fffc4 	addi	r4,r4,-1
  808104:	20c00007 	ldb	r3,0(r4)
  808108:	00800e44 	movi	r2,57
  80810c:	1880081e 	bne	r3,r2,808130 <_dtoa_r+0x710>
  808110:	d8800517 	ldw	r2,20(sp)
  808114:	113ffa1e 	bne	r2,r4,808100 <_dtoa_r+0x6e0>
  808118:	d8c00417 	ldw	r3,16(sp)
  80811c:	d9800517 	ldw	r6,20(sp)
  808120:	00800c04 	movi	r2,48
  808124:	18c00044 	addi	r3,r3,1
  808128:	d8c00415 	stw	r3,16(sp)
  80812c:	30800005 	stb	r2,0(r6)
  808130:	20800003 	ldbu	r2,0(r4)
  808134:	d8c00417 	ldw	r3,16(sp)
  808138:	27000044 	addi	fp,r4,1
  80813c:	10800044 	addi	r2,r2,1
  808140:	d8c00d15 	stw	r3,52(sp)
  808144:	20800005 	stb	r2,0(r4)
  808148:	d9001617 	ldw	r4,88(sp)
  80814c:	d9400717 	ldw	r5,28(sp)
  808150:	080a3dc0 	call	80a3dc <_Bfree>
  808154:	e0000005 	stb	zero,0(fp)
  808158:	d9800d17 	ldw	r6,52(sp)
  80815c:	d8c02717 	ldw	r3,156(sp)
  808160:	d9002917 	ldw	r4,164(sp)
  808164:	30800044 	addi	r2,r6,1
  808168:	18800015 	stw	r2,0(r3)
  80816c:	20029c26 	beq	r4,zero,808be0 <_dtoa_r+0x11c0>
  808170:	d8c00517 	ldw	r3,20(sp)
  808174:	27000015 	stw	fp,0(r4)
  808178:	003e5d06 	br	807af0 <_dtoa_r+0xd0>
  80817c:	d9800d17 	ldw	r6,52(sp)
  808180:	00c02074 	movhi	r3,129
  808184:	18c9dc04 	addi	r3,r3,10096
  808188:	d9001217 	ldw	r4,72(sp)
  80818c:	300490fa 	slli	r2,r6,3
  808190:	d9401317 	ldw	r5,76(sp)
  808194:	10c5883a 	add	r2,r2,r3
  808198:	12000017 	ldw	r8,0(r2)
  80819c:	12400117 	ldw	r9,4(r2)
  8081a0:	400d883a 	mov	r6,r8
  8081a4:	480f883a 	mov	r7,r9
  8081a8:	080d99c0 	call	80d99c <__ltdf2>
  8081ac:	1000030e 	bge	r2,zero,8081bc <_dtoa_r+0x79c>
  8081b0:	d8800d17 	ldw	r2,52(sp)
  8081b4:	10bfffc4 	addi	r2,r2,-1
  8081b8:	d8800d15 	stw	r2,52(sp)
  8081bc:	d8000c15 	stw	zero,48(sp)
  8081c0:	003ea806 	br	807c64 <_dtoa_r+0x244>
  8081c4:	d9000b17 	ldw	r4,44(sp)
  8081c8:	202cc03a 	cmpne	r22,r4,zero
  8081cc:	b000c71e 	bne	r22,zero,8084ec <_dtoa_r+0xacc>
  8081d0:	dc001117 	ldw	r16,68(sp)
  8081d4:	dc801017 	ldw	r18,64(sp)
  8081d8:	0027883a 	mov	r19,zero
  8081dc:	04000b0e 	bge	zero,r16,80820c <_dtoa_r+0x7ec>
  8081e0:	d8c00a17 	ldw	r3,40(sp)
  8081e4:	00c0090e 	bge	zero,r3,80820c <_dtoa_r+0x7ec>
  8081e8:	8005883a 	mov	r2,r16
  8081ec:	1c011316 	blt	r3,r16,80863c <_dtoa_r+0xc1c>
  8081f0:	d9000a17 	ldw	r4,40(sp)
  8081f4:	d9801117 	ldw	r6,68(sp)
  8081f8:	80a1c83a 	sub	r16,r16,r2
  8081fc:	2089c83a 	sub	r4,r4,r2
  808200:	308dc83a 	sub	r6,r6,r2
  808204:	d9000a15 	stw	r4,40(sp)
  808208:	d9801115 	stw	r6,68(sp)
  80820c:	d8801017 	ldw	r2,64(sp)
  808210:	0080150e 	bge	zero,r2,808268 <_dtoa_r+0x848>
  808214:	d8c00b17 	ldw	r3,44(sp)
  808218:	1805003a 	cmpeq	r2,r3,zero
  80821c:	1001c91e 	bne	r2,zero,808944 <_dtoa_r+0xf24>
  808220:	04800e0e 	bge	zero,r18,80825c <_dtoa_r+0x83c>
  808224:	d9001617 	ldw	r4,88(sp)
  808228:	980b883a 	mov	r5,r19
  80822c:	900d883a 	mov	r6,r18
  808230:	080b1900 	call	80b190 <__pow5mult>
  808234:	d9001617 	ldw	r4,88(sp)
  808238:	d9800717 	ldw	r6,28(sp)
  80823c:	100b883a 	mov	r5,r2
  808240:	1027883a 	mov	r19,r2
  808244:	080ae6c0 	call	80ae6c <__multiply>
  808248:	d9001617 	ldw	r4,88(sp)
  80824c:	d9400717 	ldw	r5,28(sp)
  808250:	1023883a 	mov	r17,r2
  808254:	080a3dc0 	call	80a3dc <_Bfree>
  808258:	dc400715 	stw	r17,28(sp)
  80825c:	d9001017 	ldw	r4,64(sp)
  808260:	248dc83a 	sub	r6,r4,r18
  808264:	30010e1e 	bne	r6,zero,8086a0 <_dtoa_r+0xc80>
  808268:	d9001617 	ldw	r4,88(sp)
  80826c:	04400044 	movi	r17,1
  808270:	880b883a 	mov	r5,r17
  808274:	080b0540 	call	80b054 <__i2b>
  808278:	d9800917 	ldw	r6,36(sp)
  80827c:	1025883a 	mov	r18,r2
  808280:	0180040e 	bge	zero,r6,808294 <_dtoa_r+0x874>
  808284:	d9001617 	ldw	r4,88(sp)
  808288:	100b883a 	mov	r5,r2
  80828c:	080b1900 	call	80b190 <__pow5mult>
  808290:	1025883a 	mov	r18,r2
  808294:	d8801717 	ldw	r2,92(sp)
  808298:	8880f30e 	bge	r17,r2,808668 <_dtoa_r+0xc48>
  80829c:	0023883a 	mov	r17,zero
  8082a0:	d9800917 	ldw	r6,36(sp)
  8082a4:	30019e1e 	bne	r6,zero,808920 <_dtoa_r+0xf00>
  8082a8:	00c00044 	movi	r3,1
  8082ac:	d9000a17 	ldw	r4,40(sp)
  8082b0:	20c5883a 	add	r2,r4,r3
  8082b4:	10c007cc 	andi	r3,r2,31
  8082b8:	1800841e 	bne	r3,zero,8084cc <_dtoa_r+0xaac>
  8082bc:	00800704 	movi	r2,28
  8082c0:	d9000a17 	ldw	r4,40(sp)
  8082c4:	d9801117 	ldw	r6,68(sp)
  8082c8:	80a1883a 	add	r16,r16,r2
  8082cc:	2089883a 	add	r4,r4,r2
  8082d0:	308d883a 	add	r6,r6,r2
  8082d4:	d9000a15 	stw	r4,40(sp)
  8082d8:	d9801115 	stw	r6,68(sp)
  8082dc:	d8801117 	ldw	r2,68(sp)
  8082e0:	0080050e 	bge	zero,r2,8082f8 <_dtoa_r+0x8d8>
  8082e4:	d9400717 	ldw	r5,28(sp)
  8082e8:	d9001617 	ldw	r4,88(sp)
  8082ec:	100d883a 	mov	r6,r2
  8082f0:	080ad200 	call	80ad20 <__lshift>
  8082f4:	d8800715 	stw	r2,28(sp)
  8082f8:	d8c00a17 	ldw	r3,40(sp)
  8082fc:	00c0050e 	bge	zero,r3,808314 <_dtoa_r+0x8f4>
  808300:	d9001617 	ldw	r4,88(sp)
  808304:	900b883a 	mov	r5,r18
  808308:	180d883a 	mov	r6,r3
  80830c:	080ad200 	call	80ad20 <__lshift>
  808310:	1025883a 	mov	r18,r2
  808314:	d9000c17 	ldw	r4,48(sp)
  808318:	2005003a 	cmpeq	r2,r4,zero
  80831c:	10016f26 	beq	r2,zero,8088dc <_dtoa_r+0xebc>
  808320:	d9000f17 	ldw	r4,60(sp)
  808324:	0102170e 	bge	zero,r4,808b84 <_dtoa_r+0x1164>
  808328:	d9800b17 	ldw	r6,44(sp)
  80832c:	3005003a 	cmpeq	r2,r6,zero
  808330:	1000881e 	bne	r2,zero,808554 <_dtoa_r+0xb34>
  808334:	0400050e 	bge	zero,r16,80834c <_dtoa_r+0x92c>
  808338:	d9001617 	ldw	r4,88(sp)
  80833c:	980b883a 	mov	r5,r19
  808340:	800d883a 	mov	r6,r16
  808344:	080ad200 	call	80ad20 <__lshift>
  808348:	1027883a 	mov	r19,r2
  80834c:	8804c03a 	cmpne	r2,r17,zero
  808350:	1002541e 	bne	r2,zero,808ca4 <_dtoa_r+0x1284>
  808354:	980b883a 	mov	r5,r19
  808358:	dd800517 	ldw	r22,20(sp)
  80835c:	dcc00615 	stw	r19,24(sp)
  808360:	a700004c 	andi	fp,r20,1
  808364:	2827883a 	mov	r19,r5
  808368:	d9000717 	ldw	r4,28(sp)
  80836c:	900b883a 	mov	r5,r18
  808370:	08078080 	call	807808 <quorem>
  808374:	d9000717 	ldw	r4,28(sp)
  808378:	d9400617 	ldw	r5,24(sp)
  80837c:	1023883a 	mov	r17,r2
  808380:	8dc00c04 	addi	r23,r17,48
  808384:	080a5380 	call	80a538 <__mcmp>
  808388:	d9001617 	ldw	r4,88(sp)
  80838c:	900b883a 	mov	r5,r18
  808390:	980d883a 	mov	r6,r19
  808394:	1029883a 	mov	r20,r2
  808398:	080ab940 	call	80ab94 <__mdiff>
  80839c:	102b883a 	mov	r21,r2
  8083a0:	10800317 	ldw	r2,12(r2)
  8083a4:	1001281e 	bne	r2,zero,808848 <_dtoa_r+0xe28>
  8083a8:	d9000717 	ldw	r4,28(sp)
  8083ac:	a80b883a 	mov	r5,r21
  8083b0:	080a5380 	call	80a538 <__mcmp>
  8083b4:	d9001617 	ldw	r4,88(sp)
  8083b8:	1021883a 	mov	r16,r2
  8083bc:	a80b883a 	mov	r5,r21
  8083c0:	080a3dc0 	call	80a3dc <_Bfree>
  8083c4:	8000041e 	bne	r16,zero,8083d8 <_dtoa_r+0x9b8>
  8083c8:	d8801717 	ldw	r2,92(sp)
  8083cc:	1000021e 	bne	r2,zero,8083d8 <_dtoa_r+0x9b8>
  8083d0:	e004c03a 	cmpne	r2,fp,zero
  8083d4:	10011726 	beq	r2,zero,808834 <_dtoa_r+0xe14>
  8083d8:	a0010616 	blt	r20,zero,8087f4 <_dtoa_r+0xdd4>
  8083dc:	a000041e 	bne	r20,zero,8083f0 <_dtoa_r+0x9d0>
  8083e0:	d8c01717 	ldw	r3,92(sp)
  8083e4:	1800021e 	bne	r3,zero,8083f0 <_dtoa_r+0x9d0>
  8083e8:	e004c03a 	cmpne	r2,fp,zero
  8083ec:	10010126 	beq	r2,zero,8087f4 <_dtoa_r+0xdd4>
  8083f0:	04023d16 	blt	zero,r16,808ce8 <_dtoa_r+0x12c8>
  8083f4:	b5c00005 	stb	r23,0(r22)
  8083f8:	d9800517 	ldw	r6,20(sp)
  8083fc:	d9000f17 	ldw	r4,60(sp)
  808400:	b5800044 	addi	r22,r22,1
  808404:	3105883a 	add	r2,r6,r4
  808408:	b0806526 	beq	r22,r2,8085a0 <_dtoa_r+0xb80>
  80840c:	d9400717 	ldw	r5,28(sp)
  808410:	d9001617 	ldw	r4,88(sp)
  808414:	01800284 	movi	r6,10
  808418:	000f883a 	mov	r7,zero
  80841c:	080b0900 	call	80b090 <__multadd>
  808420:	d8800715 	stw	r2,28(sp)
  808424:	d8800617 	ldw	r2,24(sp)
  808428:	14c10c26 	beq	r2,r19,80885c <_dtoa_r+0xe3c>
  80842c:	d9400617 	ldw	r5,24(sp)
  808430:	d9001617 	ldw	r4,88(sp)
  808434:	01800284 	movi	r6,10
  808438:	000f883a 	mov	r7,zero
  80843c:	080b0900 	call	80b090 <__multadd>
  808440:	d9001617 	ldw	r4,88(sp)
  808444:	980b883a 	mov	r5,r19
  808448:	01800284 	movi	r6,10
  80844c:	000f883a 	mov	r7,zero
  808450:	d8800615 	stw	r2,24(sp)
  808454:	080b0900 	call	80b090 <__multadd>
  808458:	1027883a 	mov	r19,r2
  80845c:	003fc206 	br	808368 <_dtoa_r+0x948>
  808460:	2445c83a 	sub	r2,r4,r17
  808464:	a088983a 	sll	r4,r20,r2
  808468:	003e4b06 	br	807d98 <_dtoa_r+0x378>
  80846c:	01bfffc4 	movi	r6,-1
  808470:	00800044 	movi	r2,1
  808474:	d9800e15 	stw	r6,56(sp)
  808478:	d9800f15 	stw	r6,60(sp)
  80847c:	d8800b15 	stw	r2,44(sp)
  808480:	d8c01617 	ldw	r3,88(sp)
  808484:	008005c4 	movi	r2,23
  808488:	18001115 	stw	zero,68(r3)
  80848c:	1580082e 	bgeu	r2,r22,8084b0 <_dtoa_r+0xa90>
  808490:	00c00104 	movi	r3,4
  808494:	0009883a 	mov	r4,zero
  808498:	18c7883a 	add	r3,r3,r3
  80849c:	18800504 	addi	r2,r3,20
  8084a0:	21000044 	addi	r4,r4,1
  8084a4:	b0bffc2e 	bgeu	r22,r2,808498 <_dtoa_r+0xa78>
  8084a8:	d9801617 	ldw	r6,88(sp)
  8084ac:	31001115 	stw	r4,68(r6)
  8084b0:	dc000f17 	ldw	r16,60(sp)
  8084b4:	003e4b06 	br	807de4 <_dtoa_r+0x3c4>
  8084b8:	d9801717 	ldw	r6,92(sp)
  8084bc:	0023883a 	mov	r17,zero
  8084c0:	31bfff04 	addi	r6,r6,-4
  8084c4:	d9801715 	stw	r6,92(sp)
  8084c8:	003df806 	br	807cac <_dtoa_r+0x28c>
  8084cc:	00800804 	movi	r2,32
  8084d0:	10c9c83a 	sub	r4,r2,r3
  8084d4:	00c00104 	movi	r3,4
  8084d8:	19005a16 	blt	r3,r4,808644 <_dtoa_r+0xc24>
  8084dc:	008000c4 	movi	r2,3
  8084e0:	113f7e16 	blt	r2,r4,8082dc <_dtoa_r+0x8bc>
  8084e4:	20800704 	addi	r2,r4,28
  8084e8:	003f7506 	br	8082c0 <_dtoa_r+0x8a0>
  8084ec:	d9801717 	ldw	r6,92(sp)
  8084f0:	00800044 	movi	r2,1
  8084f4:	1180a10e 	bge	r2,r6,80877c <_dtoa_r+0xd5c>
  8084f8:	d9800f17 	ldw	r6,60(sp)
  8084fc:	d8c01017 	ldw	r3,64(sp)
  808500:	30bfffc4 	addi	r2,r6,-1
  808504:	1881c616 	blt	r3,r2,808c20 <_dtoa_r+0x1200>
  808508:	18a5c83a 	sub	r18,r3,r2
  80850c:	d8800f17 	ldw	r2,60(sp)
  808510:	10026216 	blt	r2,zero,808e9c <_dtoa_r+0x147c>
  808514:	dc001117 	ldw	r16,68(sp)
  808518:	1007883a 	mov	r3,r2
  80851c:	d9800a17 	ldw	r6,40(sp)
  808520:	d8801117 	ldw	r2,68(sp)
  808524:	d9001617 	ldw	r4,88(sp)
  808528:	30cd883a 	add	r6,r6,r3
  80852c:	10c5883a 	add	r2,r2,r3
  808530:	01400044 	movi	r5,1
  808534:	d9800a15 	stw	r6,40(sp)
  808538:	d8801115 	stw	r2,68(sp)
  80853c:	080b0540 	call	80b054 <__i2b>
  808540:	1027883a 	mov	r19,r2
  808544:	003f2506 	br	8081dc <_dtoa_r+0x7bc>
  808548:	00c02074 	movhi	r3,129
  80854c:	18c9be04 	addi	r3,r3,9976
  808550:	003d6706 	br	807af0 <_dtoa_r+0xd0>
  808554:	dd800517 	ldw	r22,20(sp)
  808558:	04000044 	movi	r16,1
  80855c:	00000706 	br	80857c <_dtoa_r+0xb5c>
  808560:	d9400717 	ldw	r5,28(sp)
  808564:	d9001617 	ldw	r4,88(sp)
  808568:	01800284 	movi	r6,10
  80856c:	000f883a 	mov	r7,zero
  808570:	080b0900 	call	80b090 <__multadd>
  808574:	d8800715 	stw	r2,28(sp)
  808578:	84000044 	addi	r16,r16,1
  80857c:	d9000717 	ldw	r4,28(sp)
  808580:	900b883a 	mov	r5,r18
  808584:	08078080 	call	807808 <quorem>
  808588:	15c00c04 	addi	r23,r2,48
  80858c:	b5c00005 	stb	r23,0(r22)
  808590:	d8c00f17 	ldw	r3,60(sp)
  808594:	b5800044 	addi	r22,r22,1
  808598:	80fff116 	blt	r16,r3,808560 <_dtoa_r+0xb40>
  80859c:	d8000615 	stw	zero,24(sp)
  8085a0:	d9400717 	ldw	r5,28(sp)
  8085a4:	d9001617 	ldw	r4,88(sp)
  8085a8:	01800044 	movi	r6,1
  8085ac:	080ad200 	call	80ad20 <__lshift>
  8085b0:	1009883a 	mov	r4,r2
  8085b4:	900b883a 	mov	r5,r18
  8085b8:	d8800715 	stw	r2,28(sp)
  8085bc:	080a5380 	call	80a538 <__mcmp>
  8085c0:	00803c0e 	bge	zero,r2,8086b4 <_dtoa_r+0xc94>
  8085c4:	b009883a 	mov	r4,r22
  8085c8:	213fffc4 	addi	r4,r4,-1
  8085cc:	21400003 	ldbu	r5,0(r4)
  8085d0:	00800e44 	movi	r2,57
  8085d4:	28c03fcc 	andi	r3,r5,255
  8085d8:	18c0201c 	xori	r3,r3,128
  8085dc:	18ffe004 	addi	r3,r3,-128
  8085e0:	1881981e 	bne	r3,r2,808c44 <_dtoa_r+0x1224>
  8085e4:	d9800517 	ldw	r6,20(sp)
  8085e8:	21bff71e 	bne	r4,r6,8085c8 <_dtoa_r+0xba8>
  8085ec:	d8800d17 	ldw	r2,52(sp)
  8085f0:	37000044 	addi	fp,r6,1
  8085f4:	10800044 	addi	r2,r2,1
  8085f8:	d8800d15 	stw	r2,52(sp)
  8085fc:	00800c44 	movi	r2,49
  808600:	30800005 	stb	r2,0(r6)
  808604:	d9001617 	ldw	r4,88(sp)
  808608:	900b883a 	mov	r5,r18
  80860c:	080a3dc0 	call	80a3dc <_Bfree>
  808610:	983ecd26 	beq	r19,zero,808148 <_dtoa_r+0x728>
  808614:	d8c00617 	ldw	r3,24(sp)
  808618:	18000426 	beq	r3,zero,80862c <_dtoa_r+0xc0c>
  80861c:	1cc00326 	beq	r3,r19,80862c <_dtoa_r+0xc0c>
  808620:	d9001617 	ldw	r4,88(sp)
  808624:	180b883a 	mov	r5,r3
  808628:	080a3dc0 	call	80a3dc <_Bfree>
  80862c:	d9001617 	ldw	r4,88(sp)
  808630:	980b883a 	mov	r5,r19
  808634:	080a3dc0 	call	80a3dc <_Bfree>
  808638:	003ec306 	br	808148 <_dtoa_r+0x728>
  80863c:	1805883a 	mov	r2,r3
  808640:	003eeb06 	br	8081f0 <_dtoa_r+0x7d0>
  808644:	d9800a17 	ldw	r6,40(sp)
  808648:	d8c01117 	ldw	r3,68(sp)
  80864c:	20bfff04 	addi	r2,r4,-4
  808650:	308d883a 	add	r6,r6,r2
  808654:	1887883a 	add	r3,r3,r2
  808658:	80a1883a 	add	r16,r16,r2
  80865c:	d9800a15 	stw	r6,40(sp)
  808660:	d8c01115 	stw	r3,68(sp)
  808664:	003f1d06 	br	8082dc <_dtoa_r+0x8bc>
  808668:	a03f0c1e 	bne	r20,zero,80829c <_dtoa_r+0x87c>
  80866c:	00800434 	movhi	r2,16
  808670:	10bfffc4 	addi	r2,r2,-1
  808674:	a884703a 	and	r2,r21,r2
  808678:	103f081e 	bne	r2,zero,80829c <_dtoa_r+0x87c>
  80867c:	a89ffc2c 	andhi	r2,r21,32752
  808680:	103f0626 	beq	r2,zero,80829c <_dtoa_r+0x87c>
  808684:	d8c01117 	ldw	r3,68(sp)
  808688:	d9000a17 	ldw	r4,40(sp)
  80868c:	18c00044 	addi	r3,r3,1
  808690:	21000044 	addi	r4,r4,1
  808694:	d8c01115 	stw	r3,68(sp)
  808698:	d9000a15 	stw	r4,40(sp)
  80869c:	003f0006 	br	8082a0 <_dtoa_r+0x880>
  8086a0:	d9400717 	ldw	r5,28(sp)
  8086a4:	d9001617 	ldw	r4,88(sp)
  8086a8:	080b1900 	call	80b190 <__pow5mult>
  8086ac:	d8800715 	stw	r2,28(sp)
  8086b0:	003eed06 	br	808268 <_dtoa_r+0x848>
  8086b4:	1000021e 	bne	r2,zero,8086c0 <_dtoa_r+0xca0>
  8086b8:	b880004c 	andi	r2,r23,1
  8086bc:	103fc11e 	bne	r2,zero,8085c4 <_dtoa_r+0xba4>
  8086c0:	b5bfffc4 	addi	r22,r22,-1
  8086c4:	b0c00007 	ldb	r3,0(r22)
  8086c8:	00800c04 	movi	r2,48
  8086cc:	18bffc26 	beq	r3,r2,8086c0 <_dtoa_r+0xca0>
  8086d0:	b7000044 	addi	fp,r22,1
  8086d4:	003fcb06 	br	808604 <_dtoa_r+0xbe4>
  8086d8:	d9800d17 	ldw	r6,52(sp)
  8086dc:	018fc83a 	sub	r7,zero,r6
  8086e0:	3801f726 	beq	r7,zero,808ec0 <_dtoa_r+0x14a0>
  8086e4:	398003cc 	andi	r6,r7,15
  8086e8:	300c90fa 	slli	r6,r6,3
  8086ec:	01402074 	movhi	r5,129
  8086f0:	2949dc04 	addi	r5,r5,10096
  8086f4:	d9001217 	ldw	r4,72(sp)
  8086f8:	314d883a 	add	r6,r6,r5
  8086fc:	30c00117 	ldw	r3,4(r6)
  808700:	30800017 	ldw	r2,0(r6)
  808704:	d9401317 	ldw	r5,76(sp)
  808708:	3821d13a 	srai	r16,r7,4
  80870c:	100d883a 	mov	r6,r2
  808710:	180f883a 	mov	r7,r3
  808714:	080d1600 	call	80d160 <__muldf3>
  808718:	1011883a 	mov	r8,r2
  80871c:	1813883a 	mov	r9,r3
  808720:	1029883a 	mov	r20,r2
  808724:	182b883a 	mov	r21,r3
  808728:	8001e526 	beq	r16,zero,808ec0 <_dtoa_r+0x14a0>
  80872c:	05800084 	movi	r22,2
  808730:	04402074 	movhi	r17,129
  808734:	8c4a0e04 	addi	r17,r17,10296
  808738:	8080004c 	andi	r2,r16,1
  80873c:	1005003a 	cmpeq	r2,r2,zero
  808740:	1000081e 	bne	r2,zero,808764 <_dtoa_r+0xd44>
  808744:	89800017 	ldw	r6,0(r17)
  808748:	89c00117 	ldw	r7,4(r17)
  80874c:	480b883a 	mov	r5,r9
  808750:	4009883a 	mov	r4,r8
  808754:	080d1600 	call	80d160 <__muldf3>
  808758:	1011883a 	mov	r8,r2
  80875c:	b5800044 	addi	r22,r22,1
  808760:	1813883a 	mov	r9,r3
  808764:	8021d07a 	srai	r16,r16,1
  808768:	8c400204 	addi	r17,r17,8
  80876c:	803ff21e 	bne	r16,zero,808738 <_dtoa_r+0xd18>
  808770:	4029883a 	mov	r20,r8
  808774:	482b883a 	mov	r21,r9
  808778:	003dca06 	br	807ea4 <_dtoa_r+0x484>
  80877c:	d9000817 	ldw	r4,32(sp)
  808780:	2005003a 	cmpeq	r2,r4,zero
  808784:	1001f61e 	bne	r2,zero,808f60 <_dtoa_r+0x1540>
  808788:	dc001117 	ldw	r16,68(sp)
  80878c:	dc801017 	ldw	r18,64(sp)
  808790:	18c10cc4 	addi	r3,r3,1075
  808794:	003f6106 	br	80851c <_dtoa_r+0xafc>
  808798:	d8000b15 	stw	zero,44(sp)
  80879c:	d9802617 	ldw	r6,152(sp)
  8087a0:	d8c00d17 	ldw	r3,52(sp)
  8087a4:	30800044 	addi	r2,r6,1
  8087a8:	18ad883a 	add	r22,r3,r2
  8087ac:	b13fffc4 	addi	r4,r22,-1
  8087b0:	d9000e15 	stw	r4,56(sp)
  8087b4:	0581f60e 	bge	zero,r22,808f90 <_dtoa_r+0x1570>
  8087b8:	dd800f15 	stw	r22,60(sp)
  8087bc:	003f3006 	br	808480 <_dtoa_r+0xa60>
  8087c0:	d8000b15 	stw	zero,44(sp)
  8087c4:	d9002617 	ldw	r4,152(sp)
  8087c8:	0101eb0e 	bge	zero,r4,808f78 <_dtoa_r+0x1558>
  8087cc:	202d883a 	mov	r22,r4
  8087d0:	d9000e15 	stw	r4,56(sp)
  8087d4:	d9000f15 	stw	r4,60(sp)
  8087d8:	003f2906 	br	808480 <_dtoa_r+0xa60>
  8087dc:	01800044 	movi	r6,1
  8087e0:	d9800b15 	stw	r6,44(sp)
  8087e4:	003ff706 	br	8087c4 <_dtoa_r+0xda4>
  8087e8:	01000044 	movi	r4,1
  8087ec:	d9000b15 	stw	r4,44(sp)
  8087f0:	003fea06 	br	80879c <_dtoa_r+0xd7c>
  8087f4:	04000c0e 	bge	zero,r16,808828 <_dtoa_r+0xe08>
  8087f8:	d9400717 	ldw	r5,28(sp)
  8087fc:	d9001617 	ldw	r4,88(sp)
  808800:	01800044 	movi	r6,1
  808804:	080ad200 	call	80ad20 <__lshift>
  808808:	1009883a 	mov	r4,r2
  80880c:	900b883a 	mov	r5,r18
  808810:	d8800715 	stw	r2,28(sp)
  808814:	080a5380 	call	80a538 <__mcmp>
  808818:	0081e00e 	bge	zero,r2,808f9c <_dtoa_r+0x157c>
  80881c:	bdc00044 	addi	r23,r23,1
  808820:	00800e84 	movi	r2,58
  808824:	b881a226 	beq	r23,r2,808eb0 <_dtoa_r+0x1490>
  808828:	b7000044 	addi	fp,r22,1
  80882c:	b5c00005 	stb	r23,0(r22)
  808830:	003f7406 	br	808604 <_dtoa_r+0xbe4>
  808834:	00800e44 	movi	r2,57
  808838:	b8819d26 	beq	r23,r2,808eb0 <_dtoa_r+0x1490>
  80883c:	053ffa0e 	bge	zero,r20,808828 <_dtoa_r+0xe08>
  808840:	8dc00c44 	addi	r23,r17,49
  808844:	003ff806 	br	808828 <_dtoa_r+0xe08>
  808848:	d9001617 	ldw	r4,88(sp)
  80884c:	a80b883a 	mov	r5,r21
  808850:	04000044 	movi	r16,1
  808854:	080a3dc0 	call	80a3dc <_Bfree>
  808858:	003edf06 	br	8083d8 <_dtoa_r+0x9b8>
  80885c:	d9001617 	ldw	r4,88(sp)
  808860:	980b883a 	mov	r5,r19
  808864:	01800284 	movi	r6,10
  808868:	000f883a 	mov	r7,zero
  80886c:	080b0900 	call	80b090 <__multadd>
  808870:	1027883a 	mov	r19,r2
  808874:	d8800615 	stw	r2,24(sp)
  808878:	003ebb06 	br	808368 <_dtoa_r+0x948>
  80887c:	d9801117 	ldw	r6,68(sp)
  808880:	d8800d17 	ldw	r2,52(sp)
  808884:	d8000915 	stw	zero,36(sp)
  808888:	308dc83a 	sub	r6,r6,r2
  80888c:	0087c83a 	sub	r3,zero,r2
  808890:	d9801115 	stw	r6,68(sp)
  808894:	d8c01015 	stw	r3,64(sp)
  808898:	003cfe06 	br	807c94 <_dtoa_r+0x274>
  80889c:	018dc83a 	sub	r6,zero,r6
  8088a0:	d9801115 	stw	r6,68(sp)
  8088a4:	d8000a15 	stw	zero,40(sp)
  8088a8:	003cf306 	br	807c78 <_dtoa_r+0x258>
  8088ac:	d9000d17 	ldw	r4,52(sp)
  8088b0:	080da240 	call	80da24 <__floatsidf>
  8088b4:	880b883a 	mov	r5,r17
  8088b8:	8009883a 	mov	r4,r16
  8088bc:	180f883a 	mov	r7,r3
  8088c0:	100d883a 	mov	r6,r2
  8088c4:	080d8040 	call	80d804 <__nedf2>
  8088c8:	103ce126 	beq	r2,zero,807c50 <_dtoa_r+0x230>
  8088cc:	d9800d17 	ldw	r6,52(sp)
  8088d0:	31bfffc4 	addi	r6,r6,-1
  8088d4:	d9800d15 	stw	r6,52(sp)
  8088d8:	003cdd06 	br	807c50 <_dtoa_r+0x230>
  8088dc:	d9000717 	ldw	r4,28(sp)
  8088e0:	900b883a 	mov	r5,r18
  8088e4:	080a5380 	call	80a538 <__mcmp>
  8088e8:	103e8d0e 	bge	r2,zero,808320 <_dtoa_r+0x900>
  8088ec:	d9400717 	ldw	r5,28(sp)
  8088f0:	d9001617 	ldw	r4,88(sp)
  8088f4:	01800284 	movi	r6,10
  8088f8:	000f883a 	mov	r7,zero
  8088fc:	080b0900 	call	80b090 <__multadd>
  808900:	d9800d17 	ldw	r6,52(sp)
  808904:	d8800715 	stw	r2,28(sp)
  808908:	31bfffc4 	addi	r6,r6,-1
  80890c:	d9800d15 	stw	r6,52(sp)
  808910:	b001a71e 	bne	r22,zero,808fb0 <_dtoa_r+0x1590>
  808914:	d8800e17 	ldw	r2,56(sp)
  808918:	d8800f15 	stw	r2,60(sp)
  80891c:	003e8006 	br	808320 <_dtoa_r+0x900>
  808920:	90800417 	ldw	r2,16(r18)
  808924:	1085883a 	add	r2,r2,r2
  808928:	1085883a 	add	r2,r2,r2
  80892c:	1485883a 	add	r2,r2,r18
  808930:	11000417 	ldw	r4,16(r2)
  808934:	080a4040 	call	80a404 <__hi0bits>
  808938:	00c00804 	movi	r3,32
  80893c:	1887c83a 	sub	r3,r3,r2
  808940:	003e5a06 	br	8082ac <_dtoa_r+0x88c>
  808944:	d9400717 	ldw	r5,28(sp)
  808948:	d9801017 	ldw	r6,64(sp)
  80894c:	d9001617 	ldw	r4,88(sp)
  808950:	080b1900 	call	80b190 <__pow5mult>
  808954:	d8800715 	stw	r2,28(sp)
  808958:	003e4306 	br	808268 <_dtoa_r+0x848>
  80895c:	d9800f17 	ldw	r6,60(sp)
  808960:	d8800d17 	ldw	r2,52(sp)
  808964:	d9800315 	stw	r6,12(sp)
  808968:	d8800415 	stw	r2,16(sp)
  80896c:	d8c00b17 	ldw	r3,44(sp)
  808970:	1805003a 	cmpeq	r2,r3,zero
  808974:	1000e21e 	bne	r2,zero,808d00 <_dtoa_r+0x12e0>
  808978:	d9000317 	ldw	r4,12(sp)
  80897c:	0005883a 	mov	r2,zero
  808980:	00cff834 	movhi	r3,16352
  808984:	200c90fa 	slli	r6,r4,3
  808988:	01002074 	movhi	r4,129
  80898c:	2109dc04 	addi	r4,r4,10096
  808990:	180b883a 	mov	r5,r3
  808994:	310d883a 	add	r6,r6,r4
  808998:	327fff17 	ldw	r9,-4(r6)
  80899c:	323ffe17 	ldw	r8,-8(r6)
  8089a0:	1009883a 	mov	r4,r2
  8089a4:	480f883a 	mov	r7,r9
  8089a8:	400d883a 	mov	r6,r8
  8089ac:	080d5240 	call	80d524 <__divdf3>
  8089b0:	180b883a 	mov	r5,r3
  8089b4:	b00d883a 	mov	r6,r22
  8089b8:	b80f883a 	mov	r7,r23
  8089bc:	1009883a 	mov	r4,r2
  8089c0:	080d06c0 	call	80d06c <__subdf3>
  8089c4:	a80b883a 	mov	r5,r21
  8089c8:	a009883a 	mov	r4,r20
  8089cc:	d8c01915 	stw	r3,100(sp)
  8089d0:	d8801815 	stw	r2,96(sp)
  8089d4:	080db1c0 	call	80db1c <__fixdfsi>
  8089d8:	1009883a 	mov	r4,r2
  8089dc:	1027883a 	mov	r19,r2
  8089e0:	080da240 	call	80da24 <__floatsidf>
  8089e4:	a80b883a 	mov	r5,r21
  8089e8:	a009883a 	mov	r4,r20
  8089ec:	180f883a 	mov	r7,r3
  8089f0:	100d883a 	mov	r6,r2
  8089f4:	080d06c0 	call	80d06c <__subdf3>
  8089f8:	d9801817 	ldw	r6,96(sp)
  8089fc:	1823883a 	mov	r17,r3
  808a00:	d8801415 	stw	r2,80(sp)
  808a04:	302d883a 	mov	r22,r6
  808a08:	d9800517 	ldw	r6,20(sp)
  808a0c:	9cc00c04 	addi	r19,r19,48
  808a10:	dc401515 	stw	r17,84(sp)
  808a14:	d8c01917 	ldw	r3,100(sp)
  808a18:	34c00005 	stb	r19,0(r6)
  808a1c:	d8800517 	ldw	r2,20(sp)
  808a20:	d9401917 	ldw	r5,100(sp)
  808a24:	d9801417 	ldw	r6,80(sp)
  808a28:	b009883a 	mov	r4,r22
  808a2c:	880f883a 	mov	r7,r17
  808a30:	182f883a 	mov	r23,r3
  808a34:	17000044 	addi	fp,r2,1
  808a38:	080d88c0 	call	80d88c <__gtdf2>
  808a3c:	00804e16 	blt	zero,r2,808b78 <_dtoa_r+0x1158>
  808a40:	d9801417 	ldw	r6,80(sp)
  808a44:	0005883a 	mov	r2,zero
  808a48:	00cffc34 	movhi	r3,16368
  808a4c:	180b883a 	mov	r5,r3
  808a50:	880f883a 	mov	r7,r17
  808a54:	1009883a 	mov	r4,r2
  808a58:	080d06c0 	call	80d06c <__subdf3>
  808a5c:	d9401917 	ldw	r5,100(sp)
  808a60:	180f883a 	mov	r7,r3
  808a64:	b009883a 	mov	r4,r22
  808a68:	100d883a 	mov	r6,r2
  808a6c:	080d88c0 	call	80d88c <__gtdf2>
  808a70:	00bda216 	blt	zero,r2,8080fc <_dtoa_r+0x6dc>
  808a74:	d8c00317 	ldw	r3,12(sp)
  808a78:	00800044 	movi	r2,1
  808a7c:	10c01216 	blt	r2,r3,808ac8 <_dtoa_r+0x10a8>
  808a80:	003d4506 	br	807f98 <_dtoa_r+0x578>
  808a84:	d9801417 	ldw	r6,80(sp)
  808a88:	0005883a 	mov	r2,zero
  808a8c:	00cffc34 	movhi	r3,16368
  808a90:	180b883a 	mov	r5,r3
  808a94:	880f883a 	mov	r7,r17
  808a98:	1009883a 	mov	r4,r2
  808a9c:	080d06c0 	call	80d06c <__subdf3>
  808aa0:	d9c01b17 	ldw	r7,108(sp)
  808aa4:	180b883a 	mov	r5,r3
  808aa8:	1009883a 	mov	r4,r2
  808aac:	b00d883a 	mov	r6,r22
  808ab0:	080d99c0 	call	80d99c <__ltdf2>
  808ab4:	103d9116 	blt	r2,zero,8080fc <_dtoa_r+0x6dc>
  808ab8:	d9800517 	ldw	r6,20(sp)
  808abc:	d9000317 	ldw	r4,12(sp)
  808ac0:	3105883a 	add	r2,r6,r4
  808ac4:	e0bd3426 	beq	fp,r2,807f98 <_dtoa_r+0x578>
  808ac8:	04500934 	movhi	r17,16420
  808acc:	0021883a 	mov	r16,zero
  808ad0:	b80b883a 	mov	r5,r23
  808ad4:	b009883a 	mov	r4,r22
  808ad8:	800d883a 	mov	r6,r16
  808adc:	880f883a 	mov	r7,r17
  808ae0:	080d1600 	call	80d160 <__muldf3>
  808ae4:	d9401517 	ldw	r5,84(sp)
  808ae8:	d9001417 	ldw	r4,80(sp)
  808aec:	880f883a 	mov	r7,r17
  808af0:	000d883a 	mov	r6,zero
  808af4:	d8801a15 	stw	r2,104(sp)
  808af8:	d8c01b15 	stw	r3,108(sp)
  808afc:	080d1600 	call	80d160 <__muldf3>
  808b00:	180b883a 	mov	r5,r3
  808b04:	1009883a 	mov	r4,r2
  808b08:	1823883a 	mov	r17,r3
  808b0c:	1021883a 	mov	r16,r2
  808b10:	080db1c0 	call	80db1c <__fixdfsi>
  808b14:	1009883a 	mov	r4,r2
  808b18:	102b883a 	mov	r21,r2
  808b1c:	080da240 	call	80da24 <__floatsidf>
  808b20:	880b883a 	mov	r5,r17
  808b24:	8009883a 	mov	r4,r16
  808b28:	180f883a 	mov	r7,r3
  808b2c:	100d883a 	mov	r6,r2
  808b30:	080d06c0 	call	80d06c <__subdf3>
  808b34:	1021883a 	mov	r16,r2
  808b38:	d9001b17 	ldw	r4,108(sp)
  808b3c:	1823883a 	mov	r17,r3
  808b40:	dc001415 	stw	r16,80(sp)
  808b44:	ad400c04 	addi	r21,r21,48
  808b48:	dc401515 	stw	r17,84(sp)
  808b4c:	d8801a17 	ldw	r2,104(sp)
  808b50:	e5400005 	stb	r21,0(fp)
  808b54:	202f883a 	mov	r23,r4
  808b58:	d9c01b17 	ldw	r7,108(sp)
  808b5c:	d9001417 	ldw	r4,80(sp)
  808b60:	880b883a 	mov	r5,r17
  808b64:	100d883a 	mov	r6,r2
  808b68:	102d883a 	mov	r22,r2
  808b6c:	e7000044 	addi	fp,fp,1
  808b70:	080d99c0 	call	80d99c <__ltdf2>
  808b74:	103fc30e 	bge	r2,zero,808a84 <_dtoa_r+0x1064>
  808b78:	d9000417 	ldw	r4,16(sp)
  808b7c:	d9000d15 	stw	r4,52(sp)
  808b80:	003d7106 	br	808148 <_dtoa_r+0x728>
  808b84:	d9801717 	ldw	r6,92(sp)
  808b88:	00800084 	movi	r2,2
  808b8c:	11bde60e 	bge	r2,r6,808328 <_dtoa_r+0x908>
  808b90:	203cfb1e 	bne	r4,zero,807f80 <_dtoa_r+0x560>
  808b94:	d9001617 	ldw	r4,88(sp)
  808b98:	900b883a 	mov	r5,r18
  808b9c:	01800144 	movi	r6,5
  808ba0:	000f883a 	mov	r7,zero
  808ba4:	080b0900 	call	80b090 <__multadd>
  808ba8:	d9000717 	ldw	r4,28(sp)
  808bac:	100b883a 	mov	r5,r2
  808bb0:	1025883a 	mov	r18,r2
  808bb4:	080a5380 	call	80a538 <__mcmp>
  808bb8:	00bcf10e 	bge	zero,r2,807f80 <_dtoa_r+0x560>
  808bbc:	d8c00d17 	ldw	r3,52(sp)
  808bc0:	d9000517 	ldw	r4,20(sp)
  808bc4:	d8000615 	stw	zero,24(sp)
  808bc8:	18c00044 	addi	r3,r3,1
  808bcc:	d8c00d15 	stw	r3,52(sp)
  808bd0:	00800c44 	movi	r2,49
  808bd4:	27000044 	addi	fp,r4,1
  808bd8:	20800005 	stb	r2,0(r4)
  808bdc:	003e8906 	br	808604 <_dtoa_r+0xbe4>
  808be0:	d8c00517 	ldw	r3,20(sp)
  808be4:	003bc206 	br	807af0 <_dtoa_r+0xd0>
  808be8:	01802074 	movhi	r6,129
  808bec:	318a0e04 	addi	r6,r6,10296
  808bf0:	30c00917 	ldw	r3,36(r6)
  808bf4:	30800817 	ldw	r2,32(r6)
  808bf8:	d9001217 	ldw	r4,72(sp)
  808bfc:	d9401317 	ldw	r5,76(sp)
  808c00:	180f883a 	mov	r7,r3
  808c04:	100d883a 	mov	r6,r2
  808c08:	080d5240 	call	80d524 <__divdf3>
  808c0c:	948003cc 	andi	r18,r18,15
  808c10:	058000c4 	movi	r22,3
  808c14:	1029883a 	mov	r20,r2
  808c18:	182b883a 	mov	r21,r3
  808c1c:	003c8906 	br	807e44 <_dtoa_r+0x424>
  808c20:	d9001017 	ldw	r4,64(sp)
  808c24:	d9800917 	ldw	r6,36(sp)
  808c28:	0025883a 	mov	r18,zero
  808c2c:	1105c83a 	sub	r2,r2,r4
  808c30:	2089883a 	add	r4,r4,r2
  808c34:	308d883a 	add	r6,r6,r2
  808c38:	d9001015 	stw	r4,64(sp)
  808c3c:	d9800915 	stw	r6,36(sp)
  808c40:	003e3206 	br	80850c <_dtoa_r+0xaec>
  808c44:	28800044 	addi	r2,r5,1
  808c48:	27000044 	addi	fp,r4,1
  808c4c:	20800005 	stb	r2,0(r4)
  808c50:	003e6c06 	br	808604 <_dtoa_r+0xbe4>
  808c54:	d8800f17 	ldw	r2,60(sp)
  808c58:	00bce016 	blt	zero,r2,807fdc <_dtoa_r+0x5bc>
  808c5c:	d9800f17 	ldw	r6,60(sp)
  808c60:	303cc51e 	bne	r6,zero,807f78 <_dtoa_r+0x558>
  808c64:	0005883a 	mov	r2,zero
  808c68:	00d00534 	movhi	r3,16404
  808c6c:	980b883a 	mov	r5,r19
  808c70:	180f883a 	mov	r7,r3
  808c74:	9009883a 	mov	r4,r18
  808c78:	100d883a 	mov	r6,r2
  808c7c:	080d1600 	call	80d160 <__muldf3>
  808c80:	180b883a 	mov	r5,r3
  808c84:	a80f883a 	mov	r7,r21
  808c88:	1009883a 	mov	r4,r2
  808c8c:	a00d883a 	mov	r6,r20
  808c90:	080d9140 	call	80d914 <__gedf2>
  808c94:	103cb80e 	bge	r2,zero,807f78 <_dtoa_r+0x558>
  808c98:	0027883a 	mov	r19,zero
  808c9c:	0025883a 	mov	r18,zero
  808ca0:	003fc606 	br	808bbc <_dtoa_r+0x119c>
  808ca4:	99400117 	ldw	r5,4(r19)
  808ca8:	d9001617 	ldw	r4,88(sp)
  808cac:	080a95c0 	call	80a95c <_Balloc>
  808cb0:	99800417 	ldw	r6,16(r19)
  808cb4:	11000304 	addi	r4,r2,12
  808cb8:	99400304 	addi	r5,r19,12
  808cbc:	318d883a 	add	r6,r6,r6
  808cc0:	318d883a 	add	r6,r6,r6
  808cc4:	31800204 	addi	r6,r6,8
  808cc8:	1023883a 	mov	r17,r2
  808ccc:	080a25c0 	call	80a25c <memcpy>
  808cd0:	d9001617 	ldw	r4,88(sp)
  808cd4:	880b883a 	mov	r5,r17
  808cd8:	01800044 	movi	r6,1
  808cdc:	080ad200 	call	80ad20 <__lshift>
  808ce0:	100b883a 	mov	r5,r2
  808ce4:	003d9c06 	br	808358 <_dtoa_r+0x938>
  808ce8:	00800e44 	movi	r2,57
  808cec:	b8807026 	beq	r23,r2,808eb0 <_dtoa_r+0x1490>
  808cf0:	b8800044 	addi	r2,r23,1
  808cf4:	b7000044 	addi	fp,r22,1
  808cf8:	b0800005 	stb	r2,0(r22)
  808cfc:	003e4106 	br	808604 <_dtoa_r+0xbe4>
  808d00:	d8800317 	ldw	r2,12(sp)
  808d04:	01802074 	movhi	r6,129
  808d08:	3189dc04 	addi	r6,r6,10096
  808d0c:	b009883a 	mov	r4,r22
  808d10:	100e90fa 	slli	r7,r2,3
  808d14:	b80b883a 	mov	r5,r23
  808d18:	398f883a 	add	r7,r7,r6
  808d1c:	38bffe17 	ldw	r2,-8(r7)
  808d20:	d9800517 	ldw	r6,20(sp)
  808d24:	38ffff17 	ldw	r3,-4(r7)
  808d28:	37000044 	addi	fp,r6,1
  808d2c:	180f883a 	mov	r7,r3
  808d30:	100d883a 	mov	r6,r2
  808d34:	080d1600 	call	80d160 <__muldf3>
  808d38:	a80b883a 	mov	r5,r21
  808d3c:	a009883a 	mov	r4,r20
  808d40:	182f883a 	mov	r23,r3
  808d44:	102d883a 	mov	r22,r2
  808d48:	080db1c0 	call	80db1c <__fixdfsi>
  808d4c:	1009883a 	mov	r4,r2
  808d50:	1027883a 	mov	r19,r2
  808d54:	080da240 	call	80da24 <__floatsidf>
  808d58:	a80b883a 	mov	r5,r21
  808d5c:	a009883a 	mov	r4,r20
  808d60:	180f883a 	mov	r7,r3
  808d64:	100d883a 	mov	r6,r2
  808d68:	080d06c0 	call	80d06c <__subdf3>
  808d6c:	180b883a 	mov	r5,r3
  808d70:	d8c00517 	ldw	r3,20(sp)
  808d74:	9cc00c04 	addi	r19,r19,48
  808d78:	1009883a 	mov	r4,r2
  808d7c:	1cc00005 	stb	r19,0(r3)
  808d80:	2021883a 	mov	r16,r4
  808d84:	d9000317 	ldw	r4,12(sp)
  808d88:	00800044 	movi	r2,1
  808d8c:	2823883a 	mov	r17,r5
  808d90:	20802226 	beq	r4,r2,808e1c <_dtoa_r+0x13fc>
  808d94:	1029883a 	mov	r20,r2
  808d98:	0005883a 	mov	r2,zero
  808d9c:	00d00934 	movhi	r3,16420
  808da0:	180f883a 	mov	r7,r3
  808da4:	100d883a 	mov	r6,r2
  808da8:	880b883a 	mov	r5,r17
  808dac:	8009883a 	mov	r4,r16
  808db0:	080d1600 	call	80d160 <__muldf3>
  808db4:	180b883a 	mov	r5,r3
  808db8:	1009883a 	mov	r4,r2
  808dbc:	1823883a 	mov	r17,r3
  808dc0:	1021883a 	mov	r16,r2
  808dc4:	080db1c0 	call	80db1c <__fixdfsi>
  808dc8:	1009883a 	mov	r4,r2
  808dcc:	102b883a 	mov	r21,r2
  808dd0:	080da240 	call	80da24 <__floatsidf>
  808dd4:	880b883a 	mov	r5,r17
  808dd8:	8009883a 	mov	r4,r16
  808ddc:	180f883a 	mov	r7,r3
  808de0:	100d883a 	mov	r6,r2
  808de4:	080d06c0 	call	80d06c <__subdf3>
  808de8:	180b883a 	mov	r5,r3
  808dec:	d8c00517 	ldw	r3,20(sp)
  808df0:	1009883a 	mov	r4,r2
  808df4:	ad400c04 	addi	r21,r21,48
  808df8:	1d05883a 	add	r2,r3,r20
  808dfc:	15400005 	stb	r21,0(r2)
  808e00:	2021883a 	mov	r16,r4
  808e04:	d9000317 	ldw	r4,12(sp)
  808e08:	a5000044 	addi	r20,r20,1
  808e0c:	2823883a 	mov	r17,r5
  808e10:	a13fe11e 	bne	r20,r4,808d98 <_dtoa_r+0x1378>
  808e14:	e505883a 	add	r2,fp,r20
  808e18:	173fffc4 	addi	fp,r2,-1
  808e1c:	0025883a 	mov	r18,zero
  808e20:	04cff834 	movhi	r19,16352
  808e24:	b009883a 	mov	r4,r22
  808e28:	b80b883a 	mov	r5,r23
  808e2c:	900d883a 	mov	r6,r18
  808e30:	980f883a 	mov	r7,r19
  808e34:	080d0ec0 	call	80d0ec <__adddf3>
  808e38:	180b883a 	mov	r5,r3
  808e3c:	1009883a 	mov	r4,r2
  808e40:	800d883a 	mov	r6,r16
  808e44:	880f883a 	mov	r7,r17
  808e48:	080d99c0 	call	80d99c <__ltdf2>
  808e4c:	103cab16 	blt	r2,zero,8080fc <_dtoa_r+0x6dc>
  808e50:	0009883a 	mov	r4,zero
  808e54:	980b883a 	mov	r5,r19
  808e58:	b80f883a 	mov	r7,r23
  808e5c:	b00d883a 	mov	r6,r22
  808e60:	080d06c0 	call	80d06c <__subdf3>
  808e64:	180b883a 	mov	r5,r3
  808e68:	880f883a 	mov	r7,r17
  808e6c:	1009883a 	mov	r4,r2
  808e70:	800d883a 	mov	r6,r16
  808e74:	080d88c0 	call	80d88c <__gtdf2>
  808e78:	00bc470e 	bge	zero,r2,807f98 <_dtoa_r+0x578>
  808e7c:	00c00c04 	movi	r3,48
  808e80:	e73fffc4 	addi	fp,fp,-1
  808e84:	e0800007 	ldb	r2,0(fp)
  808e88:	10fffd26 	beq	r2,r3,808e80 <_dtoa_r+0x1460>
  808e8c:	d9800417 	ldw	r6,16(sp)
  808e90:	e7000044 	addi	fp,fp,1
  808e94:	d9800d15 	stw	r6,52(sp)
  808e98:	003cab06 	br	808148 <_dtoa_r+0x728>
  808e9c:	d8c00f17 	ldw	r3,60(sp)
  808ea0:	d9001117 	ldw	r4,68(sp)
  808ea4:	20e1c83a 	sub	r16,r4,r3
  808ea8:	0007883a 	mov	r3,zero
  808eac:	003d9b06 	br	80851c <_dtoa_r+0xafc>
  808eb0:	00800e44 	movi	r2,57
  808eb4:	b0800005 	stb	r2,0(r22)
  808eb8:	b5800044 	addi	r22,r22,1
  808ebc:	003dc106 	br	8085c4 <_dtoa_r+0xba4>
  808ec0:	05800084 	movi	r22,2
  808ec4:	003bf706 	br	807ea4 <_dtoa_r+0x484>
  808ec8:	d9000f17 	ldw	r4,60(sp)
  808ecc:	013c000e 	bge	zero,r4,807ed0 <_dtoa_r+0x4b0>
  808ed0:	d9800e17 	ldw	r6,56(sp)
  808ed4:	01bc300e 	bge	zero,r6,807f98 <_dtoa_r+0x578>
  808ed8:	0005883a 	mov	r2,zero
  808edc:	00d00934 	movhi	r3,16420
  808ee0:	a80b883a 	mov	r5,r21
  808ee4:	180f883a 	mov	r7,r3
  808ee8:	a009883a 	mov	r4,r20
  808eec:	100d883a 	mov	r6,r2
  808ef0:	080d1600 	call	80d160 <__muldf3>
  808ef4:	b1000044 	addi	r4,r22,1
  808ef8:	1021883a 	mov	r16,r2
  808efc:	1823883a 	mov	r17,r3
  808f00:	080da240 	call	80da24 <__floatsidf>
  808f04:	880b883a 	mov	r5,r17
  808f08:	8009883a 	mov	r4,r16
  808f0c:	180f883a 	mov	r7,r3
  808f10:	100d883a 	mov	r6,r2
  808f14:	080d1600 	call	80d160 <__muldf3>
  808f18:	0011883a 	mov	r8,zero
  808f1c:	02500734 	movhi	r9,16412
  808f20:	180b883a 	mov	r5,r3
  808f24:	480f883a 	mov	r7,r9
  808f28:	1009883a 	mov	r4,r2
  808f2c:	400d883a 	mov	r6,r8
  808f30:	080d0ec0 	call	80d0ec <__adddf3>
  808f34:	102d883a 	mov	r22,r2
  808f38:	00bf3034 	movhi	r2,64704
  808f3c:	10ef883a 	add	r23,r2,r3
  808f40:	d8800d17 	ldw	r2,52(sp)
  808f44:	d8c00e17 	ldw	r3,56(sp)
  808f48:	8029883a 	mov	r20,r16
  808f4c:	10bfffc4 	addi	r2,r2,-1
  808f50:	882b883a 	mov	r21,r17
  808f54:	d8800415 	stw	r2,16(sp)
  808f58:	d8c00315 	stw	r3,12(sp)
  808f5c:	003e8306 	br	80896c <_dtoa_r+0xf4c>
  808f60:	d8800117 	ldw	r2,4(sp)
  808f64:	dc001117 	ldw	r16,68(sp)
  808f68:	dc801017 	ldw	r18,64(sp)
  808f6c:	00c00d84 	movi	r3,54
  808f70:	1887c83a 	sub	r3,r3,r2
  808f74:	003d6906 	br	80851c <_dtoa_r+0xafc>
  808f78:	01800044 	movi	r6,1
  808f7c:	3021883a 	mov	r16,r6
  808f80:	d9800f15 	stw	r6,60(sp)
  808f84:	d9802615 	stw	r6,152(sp)
  808f88:	d9800e15 	stw	r6,56(sp)
  808f8c:	003b9306 	br	807ddc <_dtoa_r+0x3bc>
  808f90:	b021883a 	mov	r16,r22
  808f94:	dd800f15 	stw	r22,60(sp)
  808f98:	003b9006 	br	807ddc <_dtoa_r+0x3bc>
  808f9c:	103e221e 	bne	r2,zero,808828 <_dtoa_r+0xe08>
  808fa0:	b880004c 	andi	r2,r23,1
  808fa4:	1005003a 	cmpeq	r2,r2,zero
  808fa8:	103e1f1e 	bne	r2,zero,808828 <_dtoa_r+0xe08>
  808fac:	003e1b06 	br	80881c <_dtoa_r+0xdfc>
  808fb0:	d9001617 	ldw	r4,88(sp)
  808fb4:	980b883a 	mov	r5,r19
  808fb8:	01800284 	movi	r6,10
  808fbc:	000f883a 	mov	r7,zero
  808fc0:	080b0900 	call	80b090 <__multadd>
  808fc4:	d8c00e17 	ldw	r3,56(sp)
  808fc8:	1027883a 	mov	r19,r2
  808fcc:	d8c00f15 	stw	r3,60(sp)
  808fd0:	003cd306 	br	808320 <_dtoa_r+0x900>

00808fd4 <_fflush_r>:
  808fd4:	defffb04 	addi	sp,sp,-20
  808fd8:	dcc00315 	stw	r19,12(sp)
  808fdc:	dc800215 	stw	r18,8(sp)
  808fe0:	dfc00415 	stw	ra,16(sp)
  808fe4:	dc400115 	stw	r17,4(sp)
  808fe8:	dc000015 	stw	r16,0(sp)
  808fec:	2027883a 	mov	r19,r4
  808ff0:	2825883a 	mov	r18,r5
  808ff4:	20000226 	beq	r4,zero,809000 <_fflush_r+0x2c>
  808ff8:	20800e17 	ldw	r2,56(r4)
  808ffc:	10005626 	beq	r2,zero,809158 <_fflush_r+0x184>
  809000:	9100030b 	ldhu	r4,12(r18)
  809004:	20ffffcc 	andi	r3,r4,65535
  809008:	18e0001c 	xori	r3,r3,32768
  80900c:	18e00004 	addi	r3,r3,-32768
  809010:	1880020c 	andi	r2,r3,8
  809014:	1000261e 	bne	r2,zero,8090b0 <_fflush_r+0xdc>
  809018:	90c00117 	ldw	r3,4(r18)
  80901c:	20820014 	ori	r2,r4,2048
  809020:	9080030d 	sth	r2,12(r18)
  809024:	1009883a 	mov	r4,r2
  809028:	00c0400e 	bge	zero,r3,80912c <_fflush_r+0x158>
  80902c:	92000a17 	ldw	r8,40(r18)
  809030:	40004026 	beq	r8,zero,809134 <_fflush_r+0x160>
  809034:	2084000c 	andi	r2,r4,4096
  809038:	10005326 	beq	r2,zero,809188 <_fflush_r+0x1b4>
  80903c:	94001417 	ldw	r16,80(r18)
  809040:	9080030b 	ldhu	r2,12(r18)
  809044:	1080010c 	andi	r2,r2,4
  809048:	1000481e 	bne	r2,zero,80916c <_fflush_r+0x198>
  80904c:	91400717 	ldw	r5,28(r18)
  809050:	9809883a 	mov	r4,r19
  809054:	800d883a 	mov	r6,r16
  809058:	000f883a 	mov	r7,zero
  80905c:	403ee83a 	callr	r8
  809060:	8080261e 	bne	r16,r2,8090fc <_fflush_r+0x128>
  809064:	9080030b 	ldhu	r2,12(r18)
  809068:	91000417 	ldw	r4,16(r18)
  80906c:	90000115 	stw	zero,4(r18)
  809070:	10bdffcc 	andi	r2,r2,63487
  809074:	10ffffcc 	andi	r3,r2,65535
  809078:	18c4000c 	andi	r3,r3,4096
  80907c:	9080030d 	sth	r2,12(r18)
  809080:	91000015 	stw	r4,0(r18)
  809084:	18002b26 	beq	r3,zero,809134 <_fflush_r+0x160>
  809088:	0007883a 	mov	r3,zero
  80908c:	1805883a 	mov	r2,r3
  809090:	94001415 	stw	r16,80(r18)
  809094:	dfc00417 	ldw	ra,16(sp)
  809098:	dcc00317 	ldw	r19,12(sp)
  80909c:	dc800217 	ldw	r18,8(sp)
  8090a0:	dc400117 	ldw	r17,4(sp)
  8090a4:	dc000017 	ldw	r16,0(sp)
  8090a8:	dec00504 	addi	sp,sp,20
  8090ac:	f800283a 	ret
  8090b0:	94400417 	ldw	r17,16(r18)
  8090b4:	88001f26 	beq	r17,zero,809134 <_fflush_r+0x160>
  8090b8:	90800017 	ldw	r2,0(r18)
  8090bc:	18c000cc 	andi	r3,r3,3
  8090c0:	94400015 	stw	r17,0(r18)
  8090c4:	1461c83a 	sub	r16,r2,r17
  8090c8:	18002526 	beq	r3,zero,809160 <_fflush_r+0x18c>
  8090cc:	0005883a 	mov	r2,zero
  8090d0:	90800215 	stw	r2,8(r18)
  8090d4:	0400170e 	bge	zero,r16,809134 <_fflush_r+0x160>
  8090d8:	90c00917 	ldw	r3,36(r18)
  8090dc:	91400717 	ldw	r5,28(r18)
  8090e0:	880d883a 	mov	r6,r17
  8090e4:	800f883a 	mov	r7,r16
  8090e8:	9809883a 	mov	r4,r19
  8090ec:	183ee83a 	callr	r3
  8090f0:	88a3883a 	add	r17,r17,r2
  8090f4:	80a1c83a 	sub	r16,r16,r2
  8090f8:	00bff616 	blt	zero,r2,8090d4 <_fflush_r+0x100>
  8090fc:	9080030b 	ldhu	r2,12(r18)
  809100:	00ffffc4 	movi	r3,-1
  809104:	10801014 	ori	r2,r2,64
  809108:	9080030d 	sth	r2,12(r18)
  80910c:	1805883a 	mov	r2,r3
  809110:	dfc00417 	ldw	ra,16(sp)
  809114:	dcc00317 	ldw	r19,12(sp)
  809118:	dc800217 	ldw	r18,8(sp)
  80911c:	dc400117 	ldw	r17,4(sp)
  809120:	dc000017 	ldw	r16,0(sp)
  809124:	dec00504 	addi	sp,sp,20
  809128:	f800283a 	ret
  80912c:	90800f17 	ldw	r2,60(r18)
  809130:	00bfbe16 	blt	zero,r2,80902c <_fflush_r+0x58>
  809134:	0007883a 	mov	r3,zero
  809138:	1805883a 	mov	r2,r3
  80913c:	dfc00417 	ldw	ra,16(sp)
  809140:	dcc00317 	ldw	r19,12(sp)
  809144:	dc800217 	ldw	r18,8(sp)
  809148:	dc400117 	ldw	r17,4(sp)
  80914c:	dc000017 	ldw	r16,0(sp)
  809150:	dec00504 	addi	sp,sp,20
  809154:	f800283a 	ret
  809158:	080926c0 	call	80926c <__sinit>
  80915c:	003fa806 	br	809000 <_fflush_r+0x2c>
  809160:	90800517 	ldw	r2,20(r18)
  809164:	90800215 	stw	r2,8(r18)
  809168:	003fda06 	br	8090d4 <_fflush_r+0x100>
  80916c:	90800117 	ldw	r2,4(r18)
  809170:	90c00c17 	ldw	r3,48(r18)
  809174:	80a1c83a 	sub	r16,r16,r2
  809178:	183fb426 	beq	r3,zero,80904c <_fflush_r+0x78>
  80917c:	90800f17 	ldw	r2,60(r18)
  809180:	80a1c83a 	sub	r16,r16,r2
  809184:	003fb106 	br	80904c <_fflush_r+0x78>
  809188:	91400717 	ldw	r5,28(r18)
  80918c:	9809883a 	mov	r4,r19
  809190:	000d883a 	mov	r6,zero
  809194:	01c00044 	movi	r7,1
  809198:	403ee83a 	callr	r8
  80919c:	1021883a 	mov	r16,r2
  8091a0:	00bfffc4 	movi	r2,-1
  8091a4:	80800226 	beq	r16,r2,8091b0 <_fflush_r+0x1dc>
  8091a8:	92000a17 	ldw	r8,40(r18)
  8091ac:	003fa406 	br	809040 <_fflush_r+0x6c>
  8091b0:	98c00017 	ldw	r3,0(r19)
  8091b4:	00800744 	movi	r2,29
  8091b8:	18bfde26 	beq	r3,r2,809134 <_fflush_r+0x160>
  8091bc:	9080030b 	ldhu	r2,12(r18)
  8091c0:	8007883a 	mov	r3,r16
  8091c4:	10801014 	ori	r2,r2,64
  8091c8:	9080030d 	sth	r2,12(r18)
  8091cc:	003fcf06 	br	80910c <_fflush_r+0x138>

008091d0 <fflush>:
  8091d0:	01402074 	movhi	r5,129
  8091d4:	2963f504 	addi	r5,r5,-28716
  8091d8:	2007883a 	mov	r3,r4
  8091dc:	20000526 	beq	r4,zero,8091f4 <fflush+0x24>
  8091e0:	00802074 	movhi	r2,129
  8091e4:	1091a404 	addi	r2,r2,18064
  8091e8:	11000017 	ldw	r4,0(r2)
  8091ec:	180b883a 	mov	r5,r3
  8091f0:	0808fd41 	jmpi	808fd4 <_fflush_r>
  8091f4:	00802074 	movhi	r2,129
  8091f8:	1091a504 	addi	r2,r2,18068
  8091fc:	11000017 	ldw	r4,0(r2)
  809200:	0809da01 	jmpi	809da0 <_fwalk_reent>

00809204 <std>:
  809204:	00802074 	movhi	r2,129
  809208:	10ae8d04 	addi	r2,r2,-17868
  80920c:	20800b15 	stw	r2,44(r4)
  809210:	00802074 	movhi	r2,129
  809214:	10aec804 	addi	r2,r2,-17632
  809218:	20800815 	stw	r2,32(r4)
  80921c:	00c02074 	movhi	r3,129
  809220:	18eea904 	addi	r3,r3,-17756
  809224:	00802074 	movhi	r2,129
  809228:	10ae8f04 	addi	r2,r2,-17860
  80922c:	2140030d 	sth	r5,12(r4)
  809230:	2180038d 	sth	r6,14(r4)
  809234:	20c00915 	stw	r3,36(r4)
  809238:	20800a15 	stw	r2,40(r4)
  80923c:	20000015 	stw	zero,0(r4)
  809240:	20000115 	stw	zero,4(r4)
  809244:	20000215 	stw	zero,8(r4)
  809248:	20000415 	stw	zero,16(r4)
  80924c:	20000515 	stw	zero,20(r4)
  809250:	20000615 	stw	zero,24(r4)
  809254:	21000715 	stw	r4,28(r4)
  809258:	f800283a 	ret

0080925c <__sfp_lock_acquire>:
  80925c:	f800283a 	ret

00809260 <__sfp_lock_release>:
  809260:	f800283a 	ret

00809264 <__sinit_lock_acquire>:
  809264:	f800283a 	ret

00809268 <__sinit_lock_release>:
  809268:	f800283a 	ret

0080926c <__sinit>:
  80926c:	20800e17 	ldw	r2,56(r4)
  809270:	defffd04 	addi	sp,sp,-12
  809274:	dc400115 	stw	r17,4(sp)
  809278:	dc000015 	stw	r16,0(sp)
  80927c:	dfc00215 	stw	ra,8(sp)
  809280:	04400044 	movi	r17,1
  809284:	01400104 	movi	r5,4
  809288:	000d883a 	mov	r6,zero
  80928c:	2021883a 	mov	r16,r4
  809290:	2200bb04 	addi	r8,r4,748
  809294:	200f883a 	mov	r7,r4
  809298:	10000526 	beq	r2,zero,8092b0 <__sinit+0x44>
  80929c:	dfc00217 	ldw	ra,8(sp)
  8092a0:	dc400117 	ldw	r17,4(sp)
  8092a4:	dc000017 	ldw	r16,0(sp)
  8092a8:	dec00304 	addi	sp,sp,12
  8092ac:	f800283a 	ret
  8092b0:	21000117 	ldw	r4,4(r4)
  8092b4:	00802074 	movhi	r2,129
  8092b8:	10a4d404 	addi	r2,r2,-27824
  8092bc:	00c000c4 	movi	r3,3
  8092c0:	80800f15 	stw	r2,60(r16)
  8092c4:	80c0b915 	stw	r3,740(r16)
  8092c8:	8200ba15 	stw	r8,744(r16)
  8092cc:	84400e15 	stw	r17,56(r16)
  8092d0:	8000b815 	stw	zero,736(r16)
  8092d4:	08092040 	call	809204 <std>
  8092d8:	81000217 	ldw	r4,8(r16)
  8092dc:	880d883a 	mov	r6,r17
  8092e0:	800f883a 	mov	r7,r16
  8092e4:	01400284 	movi	r5,10
  8092e8:	08092040 	call	809204 <std>
  8092ec:	81000317 	ldw	r4,12(r16)
  8092f0:	800f883a 	mov	r7,r16
  8092f4:	01400484 	movi	r5,18
  8092f8:	01800084 	movi	r6,2
  8092fc:	dfc00217 	ldw	ra,8(sp)
  809300:	dc400117 	ldw	r17,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00304 	addi	sp,sp,12
  80930c:	08092041 	jmpi	809204 <std>

00809310 <__fp_lock>:
  809310:	0005883a 	mov	r2,zero
  809314:	f800283a 	ret

00809318 <__fp_unlock>:
  809318:	0005883a 	mov	r2,zero
  80931c:	f800283a 	ret

00809320 <__fp_unlock_all>:
  809320:	00802074 	movhi	r2,129
  809324:	1091a404 	addi	r2,r2,18064
  809328:	11000017 	ldw	r4,0(r2)
  80932c:	01402074 	movhi	r5,129
  809330:	2964c604 	addi	r5,r5,-27880
  809334:	0809e681 	jmpi	809e68 <_fwalk>

00809338 <__fp_lock_all>:
  809338:	00802074 	movhi	r2,129
  80933c:	1091a404 	addi	r2,r2,18064
  809340:	11000017 	ldw	r4,0(r2)
  809344:	01402074 	movhi	r5,129
  809348:	2964c404 	addi	r5,r5,-27888
  80934c:	0809e681 	jmpi	809e68 <_fwalk>

00809350 <_cleanup_r>:
  809350:	01402074 	movhi	r5,129
  809354:	296fba04 	addi	r5,r5,-16664
  809358:	0809e681 	jmpi	809e68 <_fwalk>

0080935c <_cleanup>:
  80935c:	00802074 	movhi	r2,129
  809360:	1091a504 	addi	r2,r2,18068
  809364:	11000017 	ldw	r4,0(r2)
  809368:	08093501 	jmpi	809350 <_cleanup_r>

0080936c <__sfmoreglue>:
  80936c:	defffc04 	addi	sp,sp,-16
  809370:	dc400115 	stw	r17,4(sp)
  809374:	2c401724 	muli	r17,r5,92
  809378:	dc800215 	stw	r18,8(sp)
  80937c:	2825883a 	mov	r18,r5
  809380:	89400304 	addi	r5,r17,12
  809384:	dc000015 	stw	r16,0(sp)
  809388:	dfc00315 	stw	ra,12(sp)
  80938c:	0804a2c0 	call	804a2c <_malloc_r>
  809390:	0021883a 	mov	r16,zero
  809394:	880d883a 	mov	r6,r17
  809398:	000b883a 	mov	r5,zero
  80939c:	10000626 	beq	r2,zero,8093b8 <__sfmoreglue+0x4c>
  8093a0:	11000304 	addi	r4,r2,12
  8093a4:	14800115 	stw	r18,4(r2)
  8093a8:	10000015 	stw	zero,0(r2)
  8093ac:	11000215 	stw	r4,8(r2)
  8093b0:	1021883a 	mov	r16,r2
  8093b4:	080516c0 	call	80516c <memset>
  8093b8:	8005883a 	mov	r2,r16
  8093bc:	dfc00317 	ldw	ra,12(sp)
  8093c0:	dc800217 	ldw	r18,8(sp)
  8093c4:	dc400117 	ldw	r17,4(sp)
  8093c8:	dc000017 	ldw	r16,0(sp)
  8093cc:	dec00404 	addi	sp,sp,16
  8093d0:	f800283a 	ret

008093d4 <__sfp>:
  8093d4:	defffd04 	addi	sp,sp,-12
  8093d8:	00802074 	movhi	r2,129
  8093dc:	1091a504 	addi	r2,r2,18068
  8093e0:	dc000015 	stw	r16,0(sp)
  8093e4:	14000017 	ldw	r16,0(r2)
  8093e8:	dc400115 	stw	r17,4(sp)
  8093ec:	dfc00215 	stw	ra,8(sp)
  8093f0:	80800e17 	ldw	r2,56(r16)
  8093f4:	2023883a 	mov	r17,r4
  8093f8:	10002626 	beq	r2,zero,809494 <__sfp+0xc0>
  8093fc:	8400b804 	addi	r16,r16,736
  809400:	80800117 	ldw	r2,4(r16)
  809404:	81000217 	ldw	r4,8(r16)
  809408:	10ffffc4 	addi	r3,r2,-1
  80940c:	18000916 	blt	r3,zero,809434 <__sfp+0x60>
  809410:	2080030f 	ldh	r2,12(r4)
  809414:	10000b26 	beq	r2,zero,809444 <__sfp+0x70>
  809418:	017fffc4 	movi	r5,-1
  80941c:	00000206 	br	809428 <__sfp+0x54>
  809420:	2080030f 	ldh	r2,12(r4)
  809424:	10000726 	beq	r2,zero,809444 <__sfp+0x70>
  809428:	18ffffc4 	addi	r3,r3,-1
  80942c:	21001704 	addi	r4,r4,92
  809430:	197ffb1e 	bne	r3,r5,809420 <__sfp+0x4c>
  809434:	80800017 	ldw	r2,0(r16)
  809438:	10001926 	beq	r2,zero,8094a0 <__sfp+0xcc>
  80943c:	1021883a 	mov	r16,r2
  809440:	003fef06 	br	809400 <__sfp+0x2c>
  809444:	00bfffc4 	movi	r2,-1
  809448:	00c00044 	movi	r3,1
  80944c:	2080038d 	sth	r2,14(r4)
  809450:	20c0030d 	sth	r3,12(r4)
  809454:	20000015 	stw	zero,0(r4)
  809458:	20000215 	stw	zero,8(r4)
  80945c:	20000115 	stw	zero,4(r4)
  809460:	20000415 	stw	zero,16(r4)
  809464:	20000515 	stw	zero,20(r4)
  809468:	20000615 	stw	zero,24(r4)
  80946c:	20000c15 	stw	zero,48(r4)
  809470:	20000d15 	stw	zero,52(r4)
  809474:	20001115 	stw	zero,68(r4)
  809478:	20001215 	stw	zero,72(r4)
  80947c:	2005883a 	mov	r2,r4
  809480:	dfc00217 	ldw	ra,8(sp)
  809484:	dc400117 	ldw	r17,4(sp)
  809488:	dc000017 	ldw	r16,0(sp)
  80948c:	dec00304 	addi	sp,sp,12
  809490:	f800283a 	ret
  809494:	8009883a 	mov	r4,r16
  809498:	080926c0 	call	80926c <__sinit>
  80949c:	003fd706 	br	8093fc <__sfp+0x28>
  8094a0:	8809883a 	mov	r4,r17
  8094a4:	01400104 	movi	r5,4
  8094a8:	080936c0 	call	80936c <__sfmoreglue>
  8094ac:	80800015 	stw	r2,0(r16)
  8094b0:	103fe21e 	bne	r2,zero,80943c <__sfp+0x68>
  8094b4:	00800304 	movi	r2,12
  8094b8:	0009883a 	mov	r4,zero
  8094bc:	88800015 	stw	r2,0(r17)
  8094c0:	003fee06 	br	80947c <__sfp+0xa8>

008094c4 <_malloc_trim_r>:
  8094c4:	defffb04 	addi	sp,sp,-20
  8094c8:	dcc00315 	stw	r19,12(sp)
  8094cc:	04c02074 	movhi	r19,129
  8094d0:	9cca7804 	addi	r19,r19,10720
  8094d4:	dc800215 	stw	r18,8(sp)
  8094d8:	dc400115 	stw	r17,4(sp)
  8094dc:	dc000015 	stw	r16,0(sp)
  8094e0:	2823883a 	mov	r17,r5
  8094e4:	2025883a 	mov	r18,r4
  8094e8:	dfc00415 	stw	ra,16(sp)
  8094ec:	080ef640 	call	80ef64 <__malloc_lock>
  8094f0:	98800217 	ldw	r2,8(r19)
  8094f4:	9009883a 	mov	r4,r18
  8094f8:	000b883a 	mov	r5,zero
  8094fc:	10c00117 	ldw	r3,4(r2)
  809500:	00bfff04 	movi	r2,-4
  809504:	18a0703a 	and	r16,r3,r2
  809508:	8463c83a 	sub	r17,r16,r17
  80950c:	8c43fbc4 	addi	r17,r17,4079
  809510:	8822d33a 	srli	r17,r17,12
  809514:	0083ffc4 	movi	r2,4095
  809518:	8c7fffc4 	addi	r17,r17,-1
  80951c:	8822933a 	slli	r17,r17,12
  809520:	1440060e 	bge	r2,r17,80953c <_malloc_trim_r+0x78>
  809524:	080527c0 	call	80527c <_sbrk_r>
  809528:	98c00217 	ldw	r3,8(r19)
  80952c:	9009883a 	mov	r4,r18
  809530:	044bc83a 	sub	r5,zero,r17
  809534:	80c7883a 	add	r3,r16,r3
  809538:	10c00926 	beq	r2,r3,809560 <_malloc_trim_r+0x9c>
  80953c:	080ef840 	call	80ef84 <__malloc_unlock>
  809540:	0005883a 	mov	r2,zero
  809544:	dfc00417 	ldw	ra,16(sp)
  809548:	dcc00317 	ldw	r19,12(sp)
  80954c:	dc800217 	ldw	r18,8(sp)
  809550:	dc400117 	ldw	r17,4(sp)
  809554:	dc000017 	ldw	r16,0(sp)
  809558:	dec00504 	addi	sp,sp,20
  80955c:	f800283a 	ret
  809560:	9009883a 	mov	r4,r18
  809564:	080527c0 	call	80527c <_sbrk_r>
  809568:	844dc83a 	sub	r6,r16,r17
  80956c:	00ffffc4 	movi	r3,-1
  809570:	9009883a 	mov	r4,r18
  809574:	000b883a 	mov	r5,zero
  809578:	01c02074 	movhi	r7,129
  80957c:	39dafe04 	addi	r7,r7,27640
  809580:	31800054 	ori	r6,r6,1
  809584:	10c00926 	beq	r2,r3,8095ac <_malloc_trim_r+0xe8>
  809588:	38800017 	ldw	r2,0(r7)
  80958c:	98c00217 	ldw	r3,8(r19)
  809590:	9009883a 	mov	r4,r18
  809594:	1445c83a 	sub	r2,r2,r17
  809598:	38800015 	stw	r2,0(r7)
  80959c:	19800115 	stw	r6,4(r3)
  8095a0:	080ef840 	call	80ef84 <__malloc_unlock>
  8095a4:	00800044 	movi	r2,1
  8095a8:	003fe606 	br	809544 <_malloc_trim_r+0x80>
  8095ac:	080527c0 	call	80527c <_sbrk_r>
  8095b0:	99800217 	ldw	r6,8(r19)
  8095b4:	100f883a 	mov	r7,r2
  8095b8:	9009883a 	mov	r4,r18
  8095bc:	1187c83a 	sub	r3,r2,r6
  8095c0:	008003c4 	movi	r2,15
  8095c4:	19400054 	ori	r5,r3,1
  8095c8:	10ffdc0e 	bge	r2,r3,80953c <_malloc_trim_r+0x78>
  8095cc:	00802074 	movhi	r2,129
  8095d0:	1091a304 	addi	r2,r2,18060
  8095d4:	10c00017 	ldw	r3,0(r2)
  8095d8:	00802074 	movhi	r2,129
  8095dc:	109afe04 	addi	r2,r2,27640
  8095e0:	31400115 	stw	r5,4(r6)
  8095e4:	38c7c83a 	sub	r3,r7,r3
  8095e8:	10c00015 	stw	r3,0(r2)
  8095ec:	003fd306 	br	80953c <_malloc_trim_r+0x78>

008095f0 <_free_r>:
  8095f0:	defffd04 	addi	sp,sp,-12
  8095f4:	dc400115 	stw	r17,4(sp)
  8095f8:	dc000015 	stw	r16,0(sp)
  8095fc:	dfc00215 	stw	ra,8(sp)
  809600:	2821883a 	mov	r16,r5
  809604:	2023883a 	mov	r17,r4
  809608:	28005a26 	beq	r5,zero,809774 <_free_r+0x184>
  80960c:	080ef640 	call	80ef64 <__malloc_lock>
  809610:	823ffe04 	addi	r8,r16,-8
  809614:	41400117 	ldw	r5,4(r8)
  809618:	00bfff84 	movi	r2,-2
  80961c:	02802074 	movhi	r10,129
  809620:	528a7804 	addi	r10,r10,10720
  809624:	288e703a 	and	r7,r5,r2
  809628:	41cd883a 	add	r6,r8,r7
  80962c:	30c00117 	ldw	r3,4(r6)
  809630:	51000217 	ldw	r4,8(r10)
  809634:	00bfff04 	movi	r2,-4
  809638:	1892703a 	and	r9,r3,r2
  80963c:	5017883a 	mov	r11,r10
  809640:	31006726 	beq	r6,r4,8097e0 <_free_r+0x1f0>
  809644:	2880004c 	andi	r2,r5,1
  809648:	1005003a 	cmpeq	r2,r2,zero
  80964c:	32400115 	stw	r9,4(r6)
  809650:	10001a1e 	bne	r2,zero,8096bc <_free_r+0xcc>
  809654:	000b883a 	mov	r5,zero
  809658:	3247883a 	add	r3,r6,r9
  80965c:	18800117 	ldw	r2,4(r3)
  809660:	1080004c 	andi	r2,r2,1
  809664:	1000231e 	bne	r2,zero,8096f4 <_free_r+0x104>
  809668:	280ac03a 	cmpne	r5,r5,zero
  80966c:	3a4f883a 	add	r7,r7,r9
  809670:	2800451e 	bne	r5,zero,809788 <_free_r+0x198>
  809674:	31000217 	ldw	r4,8(r6)
  809678:	00802074 	movhi	r2,129
  80967c:	108a7a04 	addi	r2,r2,10728
  809680:	20807b26 	beq	r4,r2,809870 <_free_r+0x280>
  809684:	30800317 	ldw	r2,12(r6)
  809688:	3a07883a 	add	r3,r7,r8
  80968c:	19c00015 	stw	r7,0(r3)
  809690:	11000215 	stw	r4,8(r2)
  809694:	20800315 	stw	r2,12(r4)
  809698:	38800054 	ori	r2,r7,1
  80969c:	40800115 	stw	r2,4(r8)
  8096a0:	28001a26 	beq	r5,zero,80970c <_free_r+0x11c>
  8096a4:	8809883a 	mov	r4,r17
  8096a8:	dfc00217 	ldw	ra,8(sp)
  8096ac:	dc400117 	ldw	r17,4(sp)
  8096b0:	dc000017 	ldw	r16,0(sp)
  8096b4:	dec00304 	addi	sp,sp,12
  8096b8:	080ef841 	jmpi	80ef84 <__malloc_unlock>
  8096bc:	80bffe17 	ldw	r2,-8(r16)
  8096c0:	50c00204 	addi	r3,r10,8
  8096c4:	4091c83a 	sub	r8,r8,r2
  8096c8:	41000217 	ldw	r4,8(r8)
  8096cc:	388f883a 	add	r7,r7,r2
  8096d0:	20c06126 	beq	r4,r3,809858 <_free_r+0x268>
  8096d4:	40800317 	ldw	r2,12(r8)
  8096d8:	3247883a 	add	r3,r6,r9
  8096dc:	000b883a 	mov	r5,zero
  8096e0:	11000215 	stw	r4,8(r2)
  8096e4:	20800315 	stw	r2,12(r4)
  8096e8:	18800117 	ldw	r2,4(r3)
  8096ec:	1080004c 	andi	r2,r2,1
  8096f0:	103fdd26 	beq	r2,zero,809668 <_free_r+0x78>
  8096f4:	38800054 	ori	r2,r7,1
  8096f8:	3a07883a 	add	r3,r7,r8
  8096fc:	280ac03a 	cmpne	r5,r5,zero
  809700:	40800115 	stw	r2,4(r8)
  809704:	19c00015 	stw	r7,0(r3)
  809708:	283fe61e 	bne	r5,zero,8096a4 <_free_r+0xb4>
  80970c:	00807fc4 	movi	r2,511
  809710:	11c01f2e 	bgeu	r2,r7,809790 <_free_r+0x1a0>
  809714:	3806d27a 	srli	r3,r7,9
  809718:	1800481e 	bne	r3,zero,80983c <_free_r+0x24c>
  80971c:	3804d0fa 	srli	r2,r7,3
  809720:	100690fa 	slli	r3,r2,3
  809724:	1acd883a 	add	r6,r3,r11
  809728:	31400217 	ldw	r5,8(r6)
  80972c:	31405926 	beq	r6,r5,809894 <_free_r+0x2a4>
  809730:	28800117 	ldw	r2,4(r5)
  809734:	00ffff04 	movi	r3,-4
  809738:	10c4703a 	and	r2,r2,r3
  80973c:	3880022e 	bgeu	r7,r2,809748 <_free_r+0x158>
  809740:	29400217 	ldw	r5,8(r5)
  809744:	317ffa1e 	bne	r6,r5,809730 <_free_r+0x140>
  809748:	29800317 	ldw	r6,12(r5)
  80974c:	41800315 	stw	r6,12(r8)
  809750:	41400215 	stw	r5,8(r8)
  809754:	8809883a 	mov	r4,r17
  809758:	2a000315 	stw	r8,12(r5)
  80975c:	32000215 	stw	r8,8(r6)
  809760:	dfc00217 	ldw	ra,8(sp)
  809764:	dc400117 	ldw	r17,4(sp)
  809768:	dc000017 	ldw	r16,0(sp)
  80976c:	dec00304 	addi	sp,sp,12
  809770:	080ef841 	jmpi	80ef84 <__malloc_unlock>
  809774:	dfc00217 	ldw	ra,8(sp)
  809778:	dc400117 	ldw	r17,4(sp)
  80977c:	dc000017 	ldw	r16,0(sp)
  809780:	dec00304 	addi	sp,sp,12
  809784:	f800283a 	ret
  809788:	31000217 	ldw	r4,8(r6)
  80978c:	003fbd06 	br	809684 <_free_r+0x94>
  809790:	3806d0fa 	srli	r3,r7,3
  809794:	00800044 	movi	r2,1
  809798:	51400117 	ldw	r5,4(r10)
  80979c:	180890fa 	slli	r4,r3,3
  8097a0:	1807d0ba 	srai	r3,r3,2
  8097a4:	22c9883a 	add	r4,r4,r11
  8097a8:	21800217 	ldw	r6,8(r4)
  8097ac:	10c4983a 	sll	r2,r2,r3
  8097b0:	41000315 	stw	r4,12(r8)
  8097b4:	41800215 	stw	r6,8(r8)
  8097b8:	288ab03a 	or	r5,r5,r2
  8097bc:	22000215 	stw	r8,8(r4)
  8097c0:	8809883a 	mov	r4,r17
  8097c4:	51400115 	stw	r5,4(r10)
  8097c8:	32000315 	stw	r8,12(r6)
  8097cc:	dfc00217 	ldw	ra,8(sp)
  8097d0:	dc400117 	ldw	r17,4(sp)
  8097d4:	dc000017 	ldw	r16,0(sp)
  8097d8:	dec00304 	addi	sp,sp,12
  8097dc:	080ef841 	jmpi	80ef84 <__malloc_unlock>
  8097e0:	2880004c 	andi	r2,r5,1
  8097e4:	3a4d883a 	add	r6,r7,r9
  8097e8:	1000071e 	bne	r2,zero,809808 <_free_r+0x218>
  8097ec:	80bffe17 	ldw	r2,-8(r16)
  8097f0:	4091c83a 	sub	r8,r8,r2
  8097f4:	41000317 	ldw	r4,12(r8)
  8097f8:	40c00217 	ldw	r3,8(r8)
  8097fc:	308d883a 	add	r6,r6,r2
  809800:	20c00215 	stw	r3,8(r4)
  809804:	19000315 	stw	r4,12(r3)
  809808:	00802074 	movhi	r2,129
  80980c:	1091a204 	addi	r2,r2,18056
  809810:	11000017 	ldw	r4,0(r2)
  809814:	30c00054 	ori	r3,r6,1
  809818:	52000215 	stw	r8,8(r10)
  80981c:	40c00115 	stw	r3,4(r8)
  809820:	313fa036 	bltu	r6,r4,8096a4 <_free_r+0xb4>
  809824:	00802074 	movhi	r2,129
  809828:	1098f104 	addi	r2,r2,25540
  80982c:	11400017 	ldw	r5,0(r2)
  809830:	8809883a 	mov	r4,r17
  809834:	08094c40 	call	8094c4 <_malloc_trim_r>
  809838:	003f9a06 	br	8096a4 <_free_r+0xb4>
  80983c:	00800104 	movi	r2,4
  809840:	10c0072e 	bgeu	r2,r3,809860 <_free_r+0x270>
  809844:	00800504 	movi	r2,20
  809848:	10c01936 	bltu	r2,r3,8098b0 <_free_r+0x2c0>
  80984c:	188016c4 	addi	r2,r3,91
  809850:	100690fa 	slli	r3,r2,3
  809854:	003fb306 	br	809724 <_free_r+0x134>
  809858:	01400044 	movi	r5,1
  80985c:	003f7e06 	br	809658 <_free_r+0x68>
  809860:	3804d1ba 	srli	r2,r7,6
  809864:	10800e04 	addi	r2,r2,56
  809868:	100690fa 	slli	r3,r2,3
  80986c:	003fad06 	br	809724 <_free_r+0x134>
  809870:	22000315 	stw	r8,12(r4)
  809874:	22000215 	stw	r8,8(r4)
  809878:	3a05883a 	add	r2,r7,r8
  80987c:	38c00054 	ori	r3,r7,1
  809880:	11c00015 	stw	r7,0(r2)
  809884:	41000215 	stw	r4,8(r8)
  809888:	40c00115 	stw	r3,4(r8)
  80988c:	41000315 	stw	r4,12(r8)
  809890:	003f8406 	br	8096a4 <_free_r+0xb4>
  809894:	1005d0ba 	srai	r2,r2,2
  809898:	00c00044 	movi	r3,1
  80989c:	51000117 	ldw	r4,4(r10)
  8098a0:	1886983a 	sll	r3,r3,r2
  8098a4:	20c8b03a 	or	r4,r4,r3
  8098a8:	51000115 	stw	r4,4(r10)
  8098ac:	003fa706 	br	80974c <_free_r+0x15c>
  8098b0:	00801504 	movi	r2,84
  8098b4:	10c00436 	bltu	r2,r3,8098c8 <_free_r+0x2d8>
  8098b8:	3804d33a 	srli	r2,r7,12
  8098bc:	10801b84 	addi	r2,r2,110
  8098c0:	100690fa 	slli	r3,r2,3
  8098c4:	003f9706 	br	809724 <_free_r+0x134>
  8098c8:	00805504 	movi	r2,340
  8098cc:	10c00436 	bltu	r2,r3,8098e0 <_free_r+0x2f0>
  8098d0:	3804d3fa 	srli	r2,r7,15
  8098d4:	10801dc4 	addi	r2,r2,119
  8098d8:	100690fa 	slli	r3,r2,3
  8098dc:	003f9106 	br	809724 <_free_r+0x134>
  8098e0:	00815504 	movi	r2,1364
  8098e4:	10c0032e 	bgeu	r2,r3,8098f4 <_free_r+0x304>
  8098e8:	00801f84 	movi	r2,126
  8098ec:	00c0fc04 	movi	r3,1008
  8098f0:	003f8c06 	br	809724 <_free_r+0x134>
  8098f4:	3804d4ba 	srli	r2,r7,18
  8098f8:	10801f04 	addi	r2,r2,124
  8098fc:	100690fa 	slli	r3,r2,3
  809900:	003f8806 	br	809724 <_free_r+0x134>

00809904 <__sfvwrite_r>:
  809904:	30800217 	ldw	r2,8(r6)
  809908:	defff504 	addi	sp,sp,-44
  80990c:	df000915 	stw	fp,36(sp)
  809910:	dd800715 	stw	r22,28(sp)
  809914:	dc800315 	stw	r18,12(sp)
  809918:	dfc00a15 	stw	ra,40(sp)
  80991c:	ddc00815 	stw	r23,32(sp)
  809920:	dd400615 	stw	r21,24(sp)
  809924:	dd000515 	stw	r20,20(sp)
  809928:	dcc00415 	stw	r19,16(sp)
  80992c:	dc400215 	stw	r17,8(sp)
  809930:	dc000115 	stw	r16,4(sp)
  809934:	302d883a 	mov	r22,r6
  809938:	2039883a 	mov	fp,r4
  80993c:	2825883a 	mov	r18,r5
  809940:	10001c26 	beq	r2,zero,8099b4 <__sfvwrite_r+0xb0>
  809944:	29c0030b 	ldhu	r7,12(r5)
  809948:	3880020c 	andi	r2,r7,8
  80994c:	10002726 	beq	r2,zero,8099ec <__sfvwrite_r+0xe8>
  809950:	28800417 	ldw	r2,16(r5)
  809954:	10002526 	beq	r2,zero,8099ec <__sfvwrite_r+0xe8>
  809958:	3880008c 	andi	r2,r7,2
  80995c:	b5400017 	ldw	r21,0(r22)
  809960:	10002826 	beq	r2,zero,809a04 <__sfvwrite_r+0x100>
  809964:	0021883a 	mov	r16,zero
  809968:	0023883a 	mov	r17,zero
  80996c:	880d883a 	mov	r6,r17
  809970:	e009883a 	mov	r4,fp
  809974:	00810004 	movi	r2,1024
  809978:	80006e26 	beq	r16,zero,809b34 <__sfvwrite_r+0x230>
  80997c:	800f883a 	mov	r7,r16
  809980:	91400717 	ldw	r5,28(r18)
  809984:	1400012e 	bgeu	r2,r16,80998c <__sfvwrite_r+0x88>
  809988:	100f883a 	mov	r7,r2
  80998c:	90c00917 	ldw	r3,36(r18)
  809990:	183ee83a 	callr	r3
  809994:	1007883a 	mov	r3,r2
  809998:	80a1c83a 	sub	r16,r16,r2
  80999c:	88a3883a 	add	r17,r17,r2
  8099a0:	00806d0e 	bge	zero,r2,809b58 <__sfvwrite_r+0x254>
  8099a4:	b0800217 	ldw	r2,8(r22)
  8099a8:	10c5c83a 	sub	r2,r2,r3
  8099ac:	b0800215 	stw	r2,8(r22)
  8099b0:	103fee1e 	bne	r2,zero,80996c <__sfvwrite_r+0x68>
  8099b4:	0009883a 	mov	r4,zero
  8099b8:	2005883a 	mov	r2,r4
  8099bc:	dfc00a17 	ldw	ra,40(sp)
  8099c0:	df000917 	ldw	fp,36(sp)
  8099c4:	ddc00817 	ldw	r23,32(sp)
  8099c8:	dd800717 	ldw	r22,28(sp)
  8099cc:	dd400617 	ldw	r21,24(sp)
  8099d0:	dd000517 	ldw	r20,20(sp)
  8099d4:	dcc00417 	ldw	r19,16(sp)
  8099d8:	dc800317 	ldw	r18,12(sp)
  8099dc:	dc400217 	ldw	r17,8(sp)
  8099e0:	dc000117 	ldw	r16,4(sp)
  8099e4:	dec00b04 	addi	sp,sp,44
  8099e8:	f800283a 	ret
  8099ec:	08076cc0 	call	8076cc <__swsetup_r>
  8099f0:	1000e41e 	bne	r2,zero,809d84 <__sfvwrite_r+0x480>
  8099f4:	91c0030b 	ldhu	r7,12(r18)
  8099f8:	b5400017 	ldw	r21,0(r22)
  8099fc:	3880008c 	andi	r2,r7,2
  809a00:	103fd81e 	bne	r2,zero,809964 <__sfvwrite_r+0x60>
  809a04:	3880004c 	andi	r2,r7,1
  809a08:	1005003a 	cmpeq	r2,r2,zero
  809a0c:	10005726 	beq	r2,zero,809b6c <__sfvwrite_r+0x268>
  809a10:	0029883a 	mov	r20,zero
  809a14:	002f883a 	mov	r23,zero
  809a18:	a0004226 	beq	r20,zero,809b24 <__sfvwrite_r+0x220>
  809a1c:	3880800c 	andi	r2,r7,512
  809a20:	94000217 	ldw	r16,8(r18)
  809a24:	10008b26 	beq	r2,zero,809c54 <__sfvwrite_r+0x350>
  809a28:	800d883a 	mov	r6,r16
  809a2c:	a400a536 	bltu	r20,r16,809cc4 <__sfvwrite_r+0x3c0>
  809a30:	3881200c 	andi	r2,r7,1152
  809a34:	10002726 	beq	r2,zero,809ad4 <__sfvwrite_r+0x1d0>
  809a38:	90800517 	ldw	r2,20(r18)
  809a3c:	92000417 	ldw	r8,16(r18)
  809a40:	91400017 	ldw	r5,0(r18)
  809a44:	1087883a 	add	r3,r2,r2
  809a48:	1887883a 	add	r3,r3,r2
  809a4c:	1808d7fa 	srli	r4,r3,31
  809a50:	2a21c83a 	sub	r16,r5,r8
  809a54:	80800044 	addi	r2,r16,1
  809a58:	20c9883a 	add	r4,r4,r3
  809a5c:	2027d07a 	srai	r19,r4,1
  809a60:	a085883a 	add	r2,r20,r2
  809a64:	980d883a 	mov	r6,r19
  809a68:	9880022e 	bgeu	r19,r2,809a74 <__sfvwrite_r+0x170>
  809a6c:	1027883a 	mov	r19,r2
  809a70:	100d883a 	mov	r6,r2
  809a74:	3881000c 	andi	r2,r7,1024
  809a78:	1000b826 	beq	r2,zero,809d5c <__sfvwrite_r+0x458>
  809a7c:	300b883a 	mov	r5,r6
  809a80:	e009883a 	mov	r4,fp
  809a84:	0804a2c0 	call	804a2c <_malloc_r>
  809a88:	10003126 	beq	r2,zero,809b50 <__sfvwrite_r+0x24c>
  809a8c:	91400417 	ldw	r5,16(r18)
  809a90:	1009883a 	mov	r4,r2
  809a94:	800d883a 	mov	r6,r16
  809a98:	1023883a 	mov	r17,r2
  809a9c:	080a25c0 	call	80a25c <memcpy>
  809aa0:	90c0030b 	ldhu	r3,12(r18)
  809aa4:	00beffc4 	movi	r2,-1025
  809aa8:	1886703a 	and	r3,r3,r2
  809aac:	18c02014 	ori	r3,r3,128
  809ab0:	90c0030d 	sth	r3,12(r18)
  809ab4:	9c07c83a 	sub	r3,r19,r16
  809ab8:	8c05883a 	add	r2,r17,r16
  809abc:	a00d883a 	mov	r6,r20
  809ac0:	a021883a 	mov	r16,r20
  809ac4:	90800015 	stw	r2,0(r18)
  809ac8:	90c00215 	stw	r3,8(r18)
  809acc:	94400415 	stw	r17,16(r18)
  809ad0:	94c00515 	stw	r19,20(r18)
  809ad4:	91000017 	ldw	r4,0(r18)
  809ad8:	b80b883a 	mov	r5,r23
  809adc:	a023883a 	mov	r17,r20
  809ae0:	080a2fc0 	call	80a2fc <memmove>
  809ae4:	90c00217 	ldw	r3,8(r18)
  809ae8:	90800017 	ldw	r2,0(r18)
  809aec:	a027883a 	mov	r19,r20
  809af0:	1c07c83a 	sub	r3,r3,r16
  809af4:	1405883a 	add	r2,r2,r16
  809af8:	90c00215 	stw	r3,8(r18)
  809afc:	a021883a 	mov	r16,r20
  809b00:	90800015 	stw	r2,0(r18)
  809b04:	b0800217 	ldw	r2,8(r22)
  809b08:	1405c83a 	sub	r2,r2,r16
  809b0c:	b0800215 	stw	r2,8(r22)
  809b10:	103fa826 	beq	r2,zero,8099b4 <__sfvwrite_r+0xb0>
  809b14:	a469c83a 	sub	r20,r20,r17
  809b18:	91c0030b 	ldhu	r7,12(r18)
  809b1c:	bcef883a 	add	r23,r23,r19
  809b20:	a03fbe1e 	bne	r20,zero,809a1c <__sfvwrite_r+0x118>
  809b24:	adc00017 	ldw	r23,0(r21)
  809b28:	ad000117 	ldw	r20,4(r21)
  809b2c:	ad400204 	addi	r21,r21,8
  809b30:	003fb906 	br	809a18 <__sfvwrite_r+0x114>
  809b34:	ac400017 	ldw	r17,0(r21)
  809b38:	ac000117 	ldw	r16,4(r21)
  809b3c:	ad400204 	addi	r21,r21,8
  809b40:	003f8a06 	br	80996c <__sfvwrite_r+0x68>
  809b44:	91400417 	ldw	r5,16(r18)
  809b48:	e009883a 	mov	r4,fp
  809b4c:	08095f00 	call	8095f0 <_free_r>
  809b50:	00800304 	movi	r2,12
  809b54:	e0800015 	stw	r2,0(fp)
  809b58:	9080030b 	ldhu	r2,12(r18)
  809b5c:	013fffc4 	movi	r4,-1
  809b60:	10801014 	ori	r2,r2,64
  809b64:	9080030d 	sth	r2,12(r18)
  809b68:	003f9306 	br	8099b8 <__sfvwrite_r+0xb4>
  809b6c:	0027883a 	mov	r19,zero
  809b70:	002f883a 	mov	r23,zero
  809b74:	d8000015 	stw	zero,0(sp)
  809b78:	0029883a 	mov	r20,zero
  809b7c:	98001e26 	beq	r19,zero,809bf8 <__sfvwrite_r+0x2f4>
  809b80:	d8c00017 	ldw	r3,0(sp)
  809b84:	1804c03a 	cmpne	r2,r3,zero
  809b88:	10005e26 	beq	r2,zero,809d04 <__sfvwrite_r+0x400>
  809b8c:	9821883a 	mov	r16,r19
  809b90:	a4c0012e 	bgeu	r20,r19,809b98 <__sfvwrite_r+0x294>
  809b94:	a021883a 	mov	r16,r20
  809b98:	91000017 	ldw	r4,0(r18)
  809b9c:	90800417 	ldw	r2,16(r18)
  809ba0:	91800217 	ldw	r6,8(r18)
  809ba4:	91c00517 	ldw	r7,20(r18)
  809ba8:	1100022e 	bgeu	r2,r4,809bb4 <__sfvwrite_r+0x2b0>
  809bac:	31e3883a 	add	r17,r6,r7
  809bb0:	8c001616 	blt	r17,r16,809c0c <__sfvwrite_r+0x308>
  809bb4:	81c03816 	blt	r16,r7,809c98 <__sfvwrite_r+0x394>
  809bb8:	90c00917 	ldw	r3,36(r18)
  809bbc:	91400717 	ldw	r5,28(r18)
  809bc0:	e009883a 	mov	r4,fp
  809bc4:	b80d883a 	mov	r6,r23
  809bc8:	183ee83a 	callr	r3
  809bcc:	1023883a 	mov	r17,r2
  809bd0:	00bfe10e 	bge	zero,r2,809b58 <__sfvwrite_r+0x254>
  809bd4:	a469c83a 	sub	r20,r20,r17
  809bd8:	a0001826 	beq	r20,zero,809c3c <__sfvwrite_r+0x338>
  809bdc:	b0800217 	ldw	r2,8(r22)
  809be0:	1445c83a 	sub	r2,r2,r17
  809be4:	b0800215 	stw	r2,8(r22)
  809be8:	103f7226 	beq	r2,zero,8099b4 <__sfvwrite_r+0xb0>
  809bec:	9c67c83a 	sub	r19,r19,r17
  809bf0:	bc6f883a 	add	r23,r23,r17
  809bf4:	983fe21e 	bne	r19,zero,809b80 <__sfvwrite_r+0x27c>
  809bf8:	adc00017 	ldw	r23,0(r21)
  809bfc:	acc00117 	ldw	r19,4(r21)
  809c00:	ad400204 	addi	r21,r21,8
  809c04:	d8000015 	stw	zero,0(sp)
  809c08:	003fdc06 	br	809b7c <__sfvwrite_r+0x278>
  809c0c:	b80b883a 	mov	r5,r23
  809c10:	880d883a 	mov	r6,r17
  809c14:	080a2fc0 	call	80a2fc <memmove>
  809c18:	90c00017 	ldw	r3,0(r18)
  809c1c:	e009883a 	mov	r4,fp
  809c20:	900b883a 	mov	r5,r18
  809c24:	1c47883a 	add	r3,r3,r17
  809c28:	90c00015 	stw	r3,0(r18)
  809c2c:	0808fd40 	call	808fd4 <_fflush_r>
  809c30:	103fc91e 	bne	r2,zero,809b58 <__sfvwrite_r+0x254>
  809c34:	a469c83a 	sub	r20,r20,r17
  809c38:	a03fe81e 	bne	r20,zero,809bdc <__sfvwrite_r+0x2d8>
  809c3c:	e009883a 	mov	r4,fp
  809c40:	900b883a 	mov	r5,r18
  809c44:	0808fd40 	call	808fd4 <_fflush_r>
  809c48:	103fc31e 	bne	r2,zero,809b58 <__sfvwrite_r+0x254>
  809c4c:	d8000015 	stw	zero,0(sp)
  809c50:	003fe206 	br	809bdc <__sfvwrite_r+0x2d8>
  809c54:	91000017 	ldw	r4,0(r18)
  809c58:	90800417 	ldw	r2,16(r18)
  809c5c:	1100022e 	bgeu	r2,r4,809c68 <__sfvwrite_r+0x364>
  809c60:	8023883a 	mov	r17,r16
  809c64:	85003136 	bltu	r16,r20,809d2c <__sfvwrite_r+0x428>
  809c68:	91c00517 	ldw	r7,20(r18)
  809c6c:	a1c01836 	bltu	r20,r7,809cd0 <__sfvwrite_r+0x3cc>
  809c70:	90c00917 	ldw	r3,36(r18)
  809c74:	91400717 	ldw	r5,28(r18)
  809c78:	e009883a 	mov	r4,fp
  809c7c:	b80d883a 	mov	r6,r23
  809c80:	183ee83a 	callr	r3
  809c84:	1021883a 	mov	r16,r2
  809c88:	00bfb30e 	bge	zero,r2,809b58 <__sfvwrite_r+0x254>
  809c8c:	1023883a 	mov	r17,r2
  809c90:	1027883a 	mov	r19,r2
  809c94:	003f9b06 	br	809b04 <__sfvwrite_r+0x200>
  809c98:	b80b883a 	mov	r5,r23
  809c9c:	800d883a 	mov	r6,r16
  809ca0:	080a2fc0 	call	80a2fc <memmove>
  809ca4:	90c00217 	ldw	r3,8(r18)
  809ca8:	90800017 	ldw	r2,0(r18)
  809cac:	8023883a 	mov	r17,r16
  809cb0:	1c07c83a 	sub	r3,r3,r16
  809cb4:	1405883a 	add	r2,r2,r16
  809cb8:	90c00215 	stw	r3,8(r18)
  809cbc:	90800015 	stw	r2,0(r18)
  809cc0:	003fc406 	br	809bd4 <__sfvwrite_r+0x2d0>
  809cc4:	a00d883a 	mov	r6,r20
  809cc8:	a021883a 	mov	r16,r20
  809ccc:	003f8106 	br	809ad4 <__sfvwrite_r+0x1d0>
  809cd0:	b80b883a 	mov	r5,r23
  809cd4:	a00d883a 	mov	r6,r20
  809cd8:	080a2fc0 	call	80a2fc <memmove>
  809cdc:	90c00217 	ldw	r3,8(r18)
  809ce0:	90800017 	ldw	r2,0(r18)
  809ce4:	a021883a 	mov	r16,r20
  809ce8:	1d07c83a 	sub	r3,r3,r20
  809cec:	1505883a 	add	r2,r2,r20
  809cf0:	a023883a 	mov	r17,r20
  809cf4:	a027883a 	mov	r19,r20
  809cf8:	90c00215 	stw	r3,8(r18)
  809cfc:	90800015 	stw	r2,0(r18)
  809d00:	003f8006 	br	809b04 <__sfvwrite_r+0x200>
  809d04:	b809883a 	mov	r4,r23
  809d08:	01400284 	movi	r5,10
  809d0c:	980d883a 	mov	r6,r19
  809d10:	080a1780 	call	80a178 <memchr>
  809d14:	10001726 	beq	r2,zero,809d74 <__sfvwrite_r+0x470>
  809d18:	15c5c83a 	sub	r2,r2,r23
  809d1c:	15000044 	addi	r20,r2,1
  809d20:	00800044 	movi	r2,1
  809d24:	d8800015 	stw	r2,0(sp)
  809d28:	003f9806 	br	809b8c <__sfvwrite_r+0x288>
  809d2c:	b80b883a 	mov	r5,r23
  809d30:	800d883a 	mov	r6,r16
  809d34:	080a2fc0 	call	80a2fc <memmove>
  809d38:	90c00017 	ldw	r3,0(r18)
  809d3c:	e009883a 	mov	r4,fp
  809d40:	900b883a 	mov	r5,r18
  809d44:	1c07883a 	add	r3,r3,r16
  809d48:	90c00015 	stw	r3,0(r18)
  809d4c:	8027883a 	mov	r19,r16
  809d50:	0808fd40 	call	808fd4 <_fflush_r>
  809d54:	103f6b26 	beq	r2,zero,809b04 <__sfvwrite_r+0x200>
  809d58:	003f7f06 	br	809b58 <__sfvwrite_r+0x254>
  809d5c:	400b883a 	mov	r5,r8
  809d60:	e009883a 	mov	r4,fp
  809d64:	080b3d00 	call	80b3d0 <_realloc_r>
  809d68:	103f7626 	beq	r2,zero,809b44 <__sfvwrite_r+0x240>
  809d6c:	1023883a 	mov	r17,r2
  809d70:	003f5006 	br	809ab4 <__sfvwrite_r+0x1b0>
  809d74:	00c00044 	movi	r3,1
  809d78:	9d000044 	addi	r20,r19,1
  809d7c:	d8c00015 	stw	r3,0(sp)
  809d80:	003f8206 	br	809b8c <__sfvwrite_r+0x288>
  809d84:	9080030b 	ldhu	r2,12(r18)
  809d88:	00c00244 	movi	r3,9
  809d8c:	013fffc4 	movi	r4,-1
  809d90:	10801014 	ori	r2,r2,64
  809d94:	9080030d 	sth	r2,12(r18)
  809d98:	e0c00015 	stw	r3,0(fp)
  809d9c:	003f0606 	br	8099b8 <__sfvwrite_r+0xb4>

00809da0 <_fwalk_reent>:
  809da0:	defff704 	addi	sp,sp,-36
  809da4:	dcc00315 	stw	r19,12(sp)
  809da8:	24c0b804 	addi	r19,r4,736
  809dac:	dd800615 	stw	r22,24(sp)
  809db0:	dd400515 	stw	r21,20(sp)
  809db4:	dfc00815 	stw	ra,32(sp)
  809db8:	ddc00715 	stw	r23,28(sp)
  809dbc:	dd000415 	stw	r20,16(sp)
  809dc0:	dc800215 	stw	r18,8(sp)
  809dc4:	dc400115 	stw	r17,4(sp)
  809dc8:	dc000015 	stw	r16,0(sp)
  809dcc:	202b883a 	mov	r21,r4
  809dd0:	282d883a 	mov	r22,r5
  809dd4:	080925c0 	call	80925c <__sfp_lock_acquire>
  809dd8:	98002126 	beq	r19,zero,809e60 <_fwalk_reent+0xc0>
  809ddc:	002f883a 	mov	r23,zero
  809de0:	9c800117 	ldw	r18,4(r19)
  809de4:	9c000217 	ldw	r16,8(r19)
  809de8:	90bfffc4 	addi	r2,r18,-1
  809dec:	10000d16 	blt	r2,zero,809e24 <_fwalk_reent+0x84>
  809df0:	0023883a 	mov	r17,zero
  809df4:	053fffc4 	movi	r20,-1
  809df8:	8080030f 	ldh	r2,12(r16)
  809dfc:	8c400044 	addi	r17,r17,1
  809e00:	10000626 	beq	r2,zero,809e1c <_fwalk_reent+0x7c>
  809e04:	8080038f 	ldh	r2,14(r16)
  809e08:	800b883a 	mov	r5,r16
  809e0c:	a809883a 	mov	r4,r21
  809e10:	15000226 	beq	r2,r20,809e1c <_fwalk_reent+0x7c>
  809e14:	b03ee83a 	callr	r22
  809e18:	b8aeb03a 	or	r23,r23,r2
  809e1c:	84001704 	addi	r16,r16,92
  809e20:	947ff51e 	bne	r18,r17,809df8 <_fwalk_reent+0x58>
  809e24:	9cc00017 	ldw	r19,0(r19)
  809e28:	983fed1e 	bne	r19,zero,809de0 <_fwalk_reent+0x40>
  809e2c:	08092600 	call	809260 <__sfp_lock_release>
  809e30:	b805883a 	mov	r2,r23
  809e34:	dfc00817 	ldw	ra,32(sp)
  809e38:	ddc00717 	ldw	r23,28(sp)
  809e3c:	dd800617 	ldw	r22,24(sp)
  809e40:	dd400517 	ldw	r21,20(sp)
  809e44:	dd000417 	ldw	r20,16(sp)
  809e48:	dcc00317 	ldw	r19,12(sp)
  809e4c:	dc800217 	ldw	r18,8(sp)
  809e50:	dc400117 	ldw	r17,4(sp)
  809e54:	dc000017 	ldw	r16,0(sp)
  809e58:	dec00904 	addi	sp,sp,36
  809e5c:	f800283a 	ret
  809e60:	002f883a 	mov	r23,zero
  809e64:	003ff106 	br	809e2c <_fwalk_reent+0x8c>

00809e68 <_fwalk>:
  809e68:	defff804 	addi	sp,sp,-32
  809e6c:	dcc00315 	stw	r19,12(sp)
  809e70:	24c0b804 	addi	r19,r4,736
  809e74:	dd400515 	stw	r21,20(sp)
  809e78:	dfc00715 	stw	ra,28(sp)
  809e7c:	dd800615 	stw	r22,24(sp)
  809e80:	dd000415 	stw	r20,16(sp)
  809e84:	dc800215 	stw	r18,8(sp)
  809e88:	dc400115 	stw	r17,4(sp)
  809e8c:	dc000015 	stw	r16,0(sp)
  809e90:	282b883a 	mov	r21,r5
  809e94:	080925c0 	call	80925c <__sfp_lock_acquire>
  809e98:	98001f26 	beq	r19,zero,809f18 <_fwalk+0xb0>
  809e9c:	002d883a 	mov	r22,zero
  809ea0:	9c800117 	ldw	r18,4(r19)
  809ea4:	9c000217 	ldw	r16,8(r19)
  809ea8:	90bfffc4 	addi	r2,r18,-1
  809eac:	10000c16 	blt	r2,zero,809ee0 <_fwalk+0x78>
  809eb0:	0023883a 	mov	r17,zero
  809eb4:	053fffc4 	movi	r20,-1
  809eb8:	8080030f 	ldh	r2,12(r16)
  809ebc:	8c400044 	addi	r17,r17,1
  809ec0:	10000526 	beq	r2,zero,809ed8 <_fwalk+0x70>
  809ec4:	8080038f 	ldh	r2,14(r16)
  809ec8:	8009883a 	mov	r4,r16
  809ecc:	15000226 	beq	r2,r20,809ed8 <_fwalk+0x70>
  809ed0:	a83ee83a 	callr	r21
  809ed4:	b0acb03a 	or	r22,r22,r2
  809ed8:	84001704 	addi	r16,r16,92
  809edc:	947ff61e 	bne	r18,r17,809eb8 <_fwalk+0x50>
  809ee0:	9cc00017 	ldw	r19,0(r19)
  809ee4:	983fee1e 	bne	r19,zero,809ea0 <_fwalk+0x38>
  809ee8:	08092600 	call	809260 <__sfp_lock_release>
  809eec:	b005883a 	mov	r2,r22
  809ef0:	dfc00717 	ldw	ra,28(sp)
  809ef4:	dd800617 	ldw	r22,24(sp)
  809ef8:	dd400517 	ldw	r21,20(sp)
  809efc:	dd000417 	ldw	r20,16(sp)
  809f00:	dcc00317 	ldw	r19,12(sp)
  809f04:	dc800217 	ldw	r18,8(sp)
  809f08:	dc400117 	ldw	r17,4(sp)
  809f0c:	dc000017 	ldw	r16,0(sp)
  809f10:	dec00804 	addi	sp,sp,32
  809f14:	f800283a 	ret
  809f18:	002d883a 	mov	r22,zero
  809f1c:	003ff206 	br	809ee8 <_fwalk+0x80>

00809f20 <__locale_charset>:
  809f20:	d0a07717 	ldw	r2,-32292(gp)
  809f24:	f800283a 	ret

00809f28 <_localeconv_r>:
  809f28:	00802074 	movhi	r2,129
  809f2c:	1089d004 	addi	r2,r2,10048
  809f30:	f800283a 	ret

00809f34 <localeconv>:
  809f34:	00802074 	movhi	r2,129
  809f38:	1091a404 	addi	r2,r2,18064
  809f3c:	11000017 	ldw	r4,0(r2)
  809f40:	0809f281 	jmpi	809f28 <_localeconv_r>

00809f44 <_setlocale_r>:
  809f44:	defffc04 	addi	sp,sp,-16
  809f48:	00c02074 	movhi	r3,129
  809f4c:	18c9cb04 	addi	r3,r3,10028
  809f50:	dc800215 	stw	r18,8(sp)
  809f54:	dc400115 	stw	r17,4(sp)
  809f58:	dc000015 	stw	r16,0(sp)
  809f5c:	2023883a 	mov	r17,r4
  809f60:	2825883a 	mov	r18,r5
  809f64:	dfc00315 	stw	ra,12(sp)
  809f68:	3021883a 	mov	r16,r6
  809f6c:	3009883a 	mov	r4,r6
  809f70:	180b883a 	mov	r5,r3
  809f74:	30000926 	beq	r6,zero,809f9c <_setlocale_r+0x58>
  809f78:	080bb800 	call	80bb80 <strcmp>
  809f7c:	8009883a 	mov	r4,r16
  809f80:	01402074 	movhi	r5,129
  809f84:	2949b604 	addi	r5,r5,9944
  809f88:	10000b1e 	bne	r2,zero,809fb8 <_setlocale_r+0x74>
  809f8c:	8c000d15 	stw	r16,52(r17)
  809f90:	8c800c15 	stw	r18,48(r17)
  809f94:	00c02074 	movhi	r3,129
  809f98:	18c9cb04 	addi	r3,r3,10028
  809f9c:	1805883a 	mov	r2,r3
  809fa0:	dfc00317 	ldw	ra,12(sp)
  809fa4:	dc800217 	ldw	r18,8(sp)
  809fa8:	dc400117 	ldw	r17,4(sp)
  809fac:	dc000017 	ldw	r16,0(sp)
  809fb0:	dec00404 	addi	sp,sp,16
  809fb4:	f800283a 	ret
  809fb8:	080bb800 	call	80bb80 <strcmp>
  809fbc:	0007883a 	mov	r3,zero
  809fc0:	103ff226 	beq	r2,zero,809f8c <_setlocale_r+0x48>
  809fc4:	003ff506 	br	809f9c <_setlocale_r+0x58>

00809fc8 <setlocale>:
  809fc8:	01802074 	movhi	r6,129
  809fcc:	3191a404 	addi	r6,r6,18064
  809fd0:	2007883a 	mov	r3,r4
  809fd4:	31000017 	ldw	r4,0(r6)
  809fd8:	280d883a 	mov	r6,r5
  809fdc:	180b883a 	mov	r5,r3
  809fe0:	0809f441 	jmpi	809f44 <_setlocale_r>

00809fe4 <__smakebuf_r>:
  809fe4:	2880030b 	ldhu	r2,12(r5)
  809fe8:	deffed04 	addi	sp,sp,-76
  809fec:	dc401015 	stw	r17,64(sp)
  809ff0:	1080008c 	andi	r2,r2,2
  809ff4:	dc000f15 	stw	r16,60(sp)
  809ff8:	dfc01215 	stw	ra,72(sp)
  809ffc:	dc801115 	stw	r18,68(sp)
  80a000:	2821883a 	mov	r16,r5
  80a004:	2023883a 	mov	r17,r4
  80a008:	10000b26 	beq	r2,zero,80a038 <__smakebuf_r+0x54>
  80a00c:	28c010c4 	addi	r3,r5,67
  80a010:	00800044 	movi	r2,1
  80a014:	28800515 	stw	r2,20(r5)
  80a018:	28c00415 	stw	r3,16(r5)
  80a01c:	28c00015 	stw	r3,0(r5)
  80a020:	dfc01217 	ldw	ra,72(sp)
  80a024:	dc801117 	ldw	r18,68(sp)
  80a028:	dc401017 	ldw	r17,64(sp)
  80a02c:	dc000f17 	ldw	r16,60(sp)
  80a030:	dec01304 	addi	sp,sp,76
  80a034:	f800283a 	ret
  80a038:	2940038f 	ldh	r5,14(r5)
  80a03c:	28002116 	blt	r5,zero,80a0c4 <__smakebuf_r+0xe0>
  80a040:	d80d883a 	mov	r6,sp
  80a044:	080befc0 	call	80befc <_fstat_r>
  80a048:	10001e16 	blt	r2,zero,80a0c4 <__smakebuf_r+0xe0>
  80a04c:	d8800117 	ldw	r2,4(sp)
  80a050:	00e00014 	movui	r3,32768
  80a054:	113c000c 	andi	r4,r2,61440
  80a058:	20c03126 	beq	r4,r3,80a120 <__smakebuf_r+0x13c>
  80a05c:	8080030b 	ldhu	r2,12(r16)
  80a060:	00c80004 	movi	r3,8192
  80a064:	10820014 	ori	r2,r2,2048
  80a068:	8080030d 	sth	r2,12(r16)
  80a06c:	20c01e26 	beq	r4,r3,80a0e8 <__smakebuf_r+0x104>
  80a070:	04810004 	movi	r18,1024
  80a074:	8809883a 	mov	r4,r17
  80a078:	900b883a 	mov	r5,r18
  80a07c:	0804a2c0 	call	804a2c <_malloc_r>
  80a080:	1009883a 	mov	r4,r2
  80a084:	10003126 	beq	r2,zero,80a14c <__smakebuf_r+0x168>
  80a088:	80c0030b 	ldhu	r3,12(r16)
  80a08c:	00802074 	movhi	r2,129
  80a090:	10a4d404 	addi	r2,r2,-27824
  80a094:	88800f15 	stw	r2,60(r17)
  80a098:	18c02014 	ori	r3,r3,128
  80a09c:	84800515 	stw	r18,20(r16)
  80a0a0:	80c0030d 	sth	r3,12(r16)
  80a0a4:	81000415 	stw	r4,16(r16)
  80a0a8:	81000015 	stw	r4,0(r16)
  80a0ac:	dfc01217 	ldw	ra,72(sp)
  80a0b0:	dc801117 	ldw	r18,68(sp)
  80a0b4:	dc401017 	ldw	r17,64(sp)
  80a0b8:	dc000f17 	ldw	r16,60(sp)
  80a0bc:	dec01304 	addi	sp,sp,76
  80a0c0:	f800283a 	ret
  80a0c4:	80c0030b 	ldhu	r3,12(r16)
  80a0c8:	1880200c 	andi	r2,r3,128
  80a0cc:	10000426 	beq	r2,zero,80a0e0 <__smakebuf_r+0xfc>
  80a0d0:	04801004 	movi	r18,64
  80a0d4:	18820014 	ori	r2,r3,2048
  80a0d8:	8080030d 	sth	r2,12(r16)
  80a0dc:	003fe506 	br	80a074 <__smakebuf_r+0x90>
  80a0e0:	04810004 	movi	r18,1024
  80a0e4:	003ffb06 	br	80a0d4 <__smakebuf_r+0xf0>
  80a0e8:	8140038f 	ldh	r5,14(r16)
  80a0ec:	8809883a 	mov	r4,r17
  80a0f0:	080bf700 	call	80bf70 <_isatty_r>
  80a0f4:	103fde26 	beq	r2,zero,80a070 <__smakebuf_r+0x8c>
  80a0f8:	8080030b 	ldhu	r2,12(r16)
  80a0fc:	80c010c4 	addi	r3,r16,67
  80a100:	04810004 	movi	r18,1024
  80a104:	10800054 	ori	r2,r2,1
  80a108:	8080030d 	sth	r2,12(r16)
  80a10c:	00800044 	movi	r2,1
  80a110:	80c00415 	stw	r3,16(r16)
  80a114:	80800515 	stw	r2,20(r16)
  80a118:	80c00015 	stw	r3,0(r16)
  80a11c:	003fd506 	br	80a074 <__smakebuf_r+0x90>
  80a120:	80c00a17 	ldw	r3,40(r16)
  80a124:	00802074 	movhi	r2,129
  80a128:	10ae8f04 	addi	r2,r2,-17860
  80a12c:	18bfcb1e 	bne	r3,r2,80a05c <__smakebuf_r+0x78>
  80a130:	8080030b 	ldhu	r2,12(r16)
  80a134:	00c10004 	movi	r3,1024
  80a138:	1825883a 	mov	r18,r3
  80a13c:	10c4b03a 	or	r2,r2,r3
  80a140:	8080030d 	sth	r2,12(r16)
  80a144:	80c01315 	stw	r3,76(r16)
  80a148:	003fca06 	br	80a074 <__smakebuf_r+0x90>
  80a14c:	8100030b 	ldhu	r4,12(r16)
  80a150:	2080800c 	andi	r2,r4,512
  80a154:	103fb21e 	bne	r2,zero,80a020 <__smakebuf_r+0x3c>
  80a158:	80c010c4 	addi	r3,r16,67
  80a15c:	21000094 	ori	r4,r4,2
  80a160:	00800044 	movi	r2,1
  80a164:	80800515 	stw	r2,20(r16)
  80a168:	8100030d 	sth	r4,12(r16)
  80a16c:	80c00415 	stw	r3,16(r16)
  80a170:	80c00015 	stw	r3,0(r16)
  80a174:	003faa06 	br	80a020 <__smakebuf_r+0x3c>

0080a178 <memchr>:
  80a178:	008000c4 	movi	r2,3
  80a17c:	29403fcc 	andi	r5,r5,255
  80a180:	2007883a 	mov	r3,r4
  80a184:	1180022e 	bgeu	r2,r6,80a190 <memchr+0x18>
  80a188:	2084703a 	and	r2,r4,r2
  80a18c:	10000b26 	beq	r2,zero,80a1bc <memchr+0x44>
  80a190:	313fffc4 	addi	r4,r6,-1
  80a194:	3000051e 	bne	r6,zero,80a1ac <memchr+0x34>
  80a198:	00002c06 	br	80a24c <memchr+0xd4>
  80a19c:	213fffc4 	addi	r4,r4,-1
  80a1a0:	00bfffc4 	movi	r2,-1
  80a1a4:	18c00044 	addi	r3,r3,1
  80a1a8:	20802826 	beq	r4,r2,80a24c <memchr+0xd4>
  80a1ac:	18800003 	ldbu	r2,0(r3)
  80a1b0:	28bffa1e 	bne	r5,r2,80a19c <memchr+0x24>
  80a1b4:	1805883a 	mov	r2,r3
  80a1b8:	f800283a 	ret
  80a1bc:	0011883a 	mov	r8,zero
  80a1c0:	0007883a 	mov	r3,zero
  80a1c4:	01c00104 	movi	r7,4
  80a1c8:	4004923a 	slli	r2,r8,8
  80a1cc:	18c00044 	addi	r3,r3,1
  80a1d0:	1151883a 	add	r8,r2,r5
  80a1d4:	19fffc1e 	bne	r3,r7,80a1c8 <memchr+0x50>
  80a1d8:	02bfbff4 	movhi	r10,65279
  80a1dc:	52bfbfc4 	addi	r10,r10,-257
  80a1e0:	02602074 	movhi	r9,32897
  80a1e4:	4a602004 	addi	r9,r9,-32640
  80a1e8:	02c000c4 	movi	r11,3
  80a1ec:	20800017 	ldw	r2,0(r4)
  80a1f0:	31bfff04 	addi	r6,r6,-4
  80a1f4:	200f883a 	mov	r7,r4
  80a1f8:	1204f03a 	xor	r2,r2,r8
  80a1fc:	1287883a 	add	r3,r2,r10
  80a200:	1a46703a 	and	r3,r3,r9
  80a204:	0084303a 	nor	r2,zero,r2
  80a208:	10c4703a 	and	r2,r2,r3
  80a20c:	10000b26 	beq	r2,zero,80a23c <memchr+0xc4>
  80a210:	20800003 	ldbu	r2,0(r4)
  80a214:	28800f26 	beq	r5,r2,80a254 <memchr+0xdc>
  80a218:	20800043 	ldbu	r2,1(r4)
  80a21c:	21c00044 	addi	r7,r4,1
  80a220:	28800c26 	beq	r5,r2,80a254 <memchr+0xdc>
  80a224:	20800083 	ldbu	r2,2(r4)
  80a228:	21c00084 	addi	r7,r4,2
  80a22c:	28800926 	beq	r5,r2,80a254 <memchr+0xdc>
  80a230:	208000c3 	ldbu	r2,3(r4)
  80a234:	21c000c4 	addi	r7,r4,3
  80a238:	28800626 	beq	r5,r2,80a254 <memchr+0xdc>
  80a23c:	21000104 	addi	r4,r4,4
  80a240:	59bfea36 	bltu	r11,r6,80a1ec <memchr+0x74>
  80a244:	2007883a 	mov	r3,r4
  80a248:	003fd106 	br	80a190 <memchr+0x18>
  80a24c:	0005883a 	mov	r2,zero
  80a250:	f800283a 	ret
  80a254:	3805883a 	mov	r2,r7
  80a258:	f800283a 	ret

0080a25c <memcpy>:
  80a25c:	01c003c4 	movi	r7,15
  80a260:	2007883a 	mov	r3,r4
  80a264:	3980032e 	bgeu	r7,r6,80a274 <memcpy+0x18>
  80a268:	2904b03a 	or	r2,r5,r4
  80a26c:	108000cc 	andi	r2,r2,3
  80a270:	10000926 	beq	r2,zero,80a298 <memcpy+0x3c>
  80a274:	30000626 	beq	r6,zero,80a290 <memcpy+0x34>
  80a278:	30cd883a 	add	r6,r6,r3
  80a27c:	28800003 	ldbu	r2,0(r5)
  80a280:	29400044 	addi	r5,r5,1
  80a284:	18800005 	stb	r2,0(r3)
  80a288:	18c00044 	addi	r3,r3,1
  80a28c:	30fffb1e 	bne	r6,r3,80a27c <memcpy+0x20>
  80a290:	2005883a 	mov	r2,r4
  80a294:	f800283a 	ret
  80a298:	3811883a 	mov	r8,r7
  80a29c:	200f883a 	mov	r7,r4
  80a2a0:	28c00017 	ldw	r3,0(r5)
  80a2a4:	31bffc04 	addi	r6,r6,-16
  80a2a8:	38c00015 	stw	r3,0(r7)
  80a2ac:	28800117 	ldw	r2,4(r5)
  80a2b0:	38800115 	stw	r2,4(r7)
  80a2b4:	28c00217 	ldw	r3,8(r5)
  80a2b8:	38c00215 	stw	r3,8(r7)
  80a2bc:	28800317 	ldw	r2,12(r5)
  80a2c0:	29400404 	addi	r5,r5,16
  80a2c4:	38800315 	stw	r2,12(r7)
  80a2c8:	39c00404 	addi	r7,r7,16
  80a2cc:	41bff436 	bltu	r8,r6,80a2a0 <memcpy+0x44>
  80a2d0:	008000c4 	movi	r2,3
  80a2d4:	1180072e 	bgeu	r2,r6,80a2f4 <memcpy+0x98>
  80a2d8:	1007883a 	mov	r3,r2
  80a2dc:	28800017 	ldw	r2,0(r5)
  80a2e0:	31bfff04 	addi	r6,r6,-4
  80a2e4:	29400104 	addi	r5,r5,4
  80a2e8:	38800015 	stw	r2,0(r7)
  80a2ec:	39c00104 	addi	r7,r7,4
  80a2f0:	19bffa36 	bltu	r3,r6,80a2dc <memcpy+0x80>
  80a2f4:	3807883a 	mov	r3,r7
  80a2f8:	003fde06 	br	80a274 <memcpy+0x18>

0080a2fc <memmove>:
  80a2fc:	2807883a 	mov	r3,r5
  80a300:	2011883a 	mov	r8,r4
  80a304:	29000c2e 	bgeu	r5,r4,80a338 <memmove+0x3c>
  80a308:	298f883a 	add	r7,r5,r6
  80a30c:	21c00a2e 	bgeu	r4,r7,80a338 <memmove+0x3c>
  80a310:	30000726 	beq	r6,zero,80a330 <memmove+0x34>
  80a314:	2187883a 	add	r3,r4,r6
  80a318:	198dc83a 	sub	r6,r3,r6
  80a31c:	39ffffc4 	addi	r7,r7,-1
  80a320:	38800003 	ldbu	r2,0(r7)
  80a324:	18ffffc4 	addi	r3,r3,-1
  80a328:	18800005 	stb	r2,0(r3)
  80a32c:	19bffb1e 	bne	r3,r6,80a31c <memmove+0x20>
  80a330:	2005883a 	mov	r2,r4
  80a334:	f800283a 	ret
  80a338:	01c003c4 	movi	r7,15
  80a33c:	39800a36 	bltu	r7,r6,80a368 <memmove+0x6c>
  80a340:	303ffb26 	beq	r6,zero,80a330 <memmove+0x34>
  80a344:	400f883a 	mov	r7,r8
  80a348:	320d883a 	add	r6,r6,r8
  80a34c:	28800003 	ldbu	r2,0(r5)
  80a350:	29400044 	addi	r5,r5,1
  80a354:	38800005 	stb	r2,0(r7)
  80a358:	39c00044 	addi	r7,r7,1
  80a35c:	39bffb1e 	bne	r7,r6,80a34c <memmove+0x50>
  80a360:	2005883a 	mov	r2,r4
  80a364:	f800283a 	ret
  80a368:	1904b03a 	or	r2,r3,r4
  80a36c:	108000cc 	andi	r2,r2,3
  80a370:	103ff31e 	bne	r2,zero,80a340 <memmove+0x44>
  80a374:	3811883a 	mov	r8,r7
  80a378:	180b883a 	mov	r5,r3
  80a37c:	200f883a 	mov	r7,r4
  80a380:	28c00017 	ldw	r3,0(r5)
  80a384:	31bffc04 	addi	r6,r6,-16
  80a388:	38c00015 	stw	r3,0(r7)
  80a38c:	28800117 	ldw	r2,4(r5)
  80a390:	38800115 	stw	r2,4(r7)
  80a394:	28c00217 	ldw	r3,8(r5)
  80a398:	38c00215 	stw	r3,8(r7)
  80a39c:	28800317 	ldw	r2,12(r5)
  80a3a0:	29400404 	addi	r5,r5,16
  80a3a4:	38800315 	stw	r2,12(r7)
  80a3a8:	39c00404 	addi	r7,r7,16
  80a3ac:	41bff436 	bltu	r8,r6,80a380 <memmove+0x84>
  80a3b0:	008000c4 	movi	r2,3
  80a3b4:	1180072e 	bgeu	r2,r6,80a3d4 <memmove+0xd8>
  80a3b8:	1007883a 	mov	r3,r2
  80a3bc:	28800017 	ldw	r2,0(r5)
  80a3c0:	31bfff04 	addi	r6,r6,-4
  80a3c4:	29400104 	addi	r5,r5,4
  80a3c8:	38800015 	stw	r2,0(r7)
  80a3cc:	39c00104 	addi	r7,r7,4
  80a3d0:	19bffa36 	bltu	r3,r6,80a3bc <memmove+0xc0>
  80a3d4:	3811883a 	mov	r8,r7
  80a3d8:	003fd906 	br	80a340 <memmove+0x44>

0080a3dc <_Bfree>:
  80a3dc:	28000826 	beq	r5,zero,80a400 <_Bfree+0x24>
  80a3e0:	28800117 	ldw	r2,4(r5)
  80a3e4:	21001317 	ldw	r4,76(r4)
  80a3e8:	1085883a 	add	r2,r2,r2
  80a3ec:	1085883a 	add	r2,r2,r2
  80a3f0:	1105883a 	add	r2,r2,r4
  80a3f4:	10c00017 	ldw	r3,0(r2)
  80a3f8:	28c00015 	stw	r3,0(r5)
  80a3fc:	11400015 	stw	r5,0(r2)
  80a400:	f800283a 	ret

0080a404 <__hi0bits>:
  80a404:	20bfffec 	andhi	r2,r4,65535
  80a408:	10001426 	beq	r2,zero,80a45c <__hi0bits+0x58>
  80a40c:	0007883a 	mov	r3,zero
  80a410:	20bfc02c 	andhi	r2,r4,65280
  80a414:	1000021e 	bne	r2,zero,80a420 <__hi0bits+0x1c>
  80a418:	2008923a 	slli	r4,r4,8
  80a41c:	18c00204 	addi	r3,r3,8
  80a420:	20bc002c 	andhi	r2,r4,61440
  80a424:	1000021e 	bne	r2,zero,80a430 <__hi0bits+0x2c>
  80a428:	2008913a 	slli	r4,r4,4
  80a42c:	18c00104 	addi	r3,r3,4
  80a430:	20b0002c 	andhi	r2,r4,49152
  80a434:	1000031e 	bne	r2,zero,80a444 <__hi0bits+0x40>
  80a438:	2105883a 	add	r2,r4,r4
  80a43c:	18c00084 	addi	r3,r3,2
  80a440:	1089883a 	add	r4,r2,r2
  80a444:	20000316 	blt	r4,zero,80a454 <__hi0bits+0x50>
  80a448:	2090002c 	andhi	r2,r4,16384
  80a44c:	10000626 	beq	r2,zero,80a468 <__hi0bits+0x64>
  80a450:	18c00044 	addi	r3,r3,1
  80a454:	1805883a 	mov	r2,r3
  80a458:	f800283a 	ret
  80a45c:	2008943a 	slli	r4,r4,16
  80a460:	00c00404 	movi	r3,16
  80a464:	003fea06 	br	80a410 <__hi0bits+0xc>
  80a468:	00c00804 	movi	r3,32
  80a46c:	1805883a 	mov	r2,r3
  80a470:	f800283a 	ret

0080a474 <__lo0bits>:
  80a474:	20c00017 	ldw	r3,0(r4)
  80a478:	188001cc 	andi	r2,r3,7
  80a47c:	10000a26 	beq	r2,zero,80a4a8 <__lo0bits+0x34>
  80a480:	1880004c 	andi	r2,r3,1
  80a484:	1005003a 	cmpeq	r2,r2,zero
  80a488:	10002126 	beq	r2,zero,80a510 <__lo0bits+0x9c>
  80a48c:	1880008c 	andi	r2,r3,2
  80a490:	1000251e 	bne	r2,zero,80a528 <__lo0bits+0xb4>
  80a494:	1804d0ba 	srli	r2,r3,2
  80a498:	01400084 	movi	r5,2
  80a49c:	20800015 	stw	r2,0(r4)
  80a4a0:	2805883a 	mov	r2,r5
  80a4a4:	f800283a 	ret
  80a4a8:	18bfffcc 	andi	r2,r3,65535
  80a4ac:	10001526 	beq	r2,zero,80a504 <__lo0bits+0x90>
  80a4b0:	000b883a 	mov	r5,zero
  80a4b4:	18803fcc 	andi	r2,r3,255
  80a4b8:	1000021e 	bne	r2,zero,80a4c4 <__lo0bits+0x50>
  80a4bc:	1806d23a 	srli	r3,r3,8
  80a4c0:	29400204 	addi	r5,r5,8
  80a4c4:	188003cc 	andi	r2,r3,15
  80a4c8:	1000021e 	bne	r2,zero,80a4d4 <__lo0bits+0x60>
  80a4cc:	1806d13a 	srli	r3,r3,4
  80a4d0:	29400104 	addi	r5,r5,4
  80a4d4:	188000cc 	andi	r2,r3,3
  80a4d8:	1000021e 	bne	r2,zero,80a4e4 <__lo0bits+0x70>
  80a4dc:	1806d0ba 	srli	r3,r3,2
  80a4e0:	29400084 	addi	r5,r5,2
  80a4e4:	1880004c 	andi	r2,r3,1
  80a4e8:	1000031e 	bne	r2,zero,80a4f8 <__lo0bits+0x84>
  80a4ec:	1806d07a 	srli	r3,r3,1
  80a4f0:	18000a26 	beq	r3,zero,80a51c <__lo0bits+0xa8>
  80a4f4:	29400044 	addi	r5,r5,1
  80a4f8:	2805883a 	mov	r2,r5
  80a4fc:	20c00015 	stw	r3,0(r4)
  80a500:	f800283a 	ret
  80a504:	1806d43a 	srli	r3,r3,16
  80a508:	01400404 	movi	r5,16
  80a50c:	003fe906 	br	80a4b4 <__lo0bits+0x40>
  80a510:	000b883a 	mov	r5,zero
  80a514:	2805883a 	mov	r2,r5
  80a518:	f800283a 	ret
  80a51c:	01400804 	movi	r5,32
  80a520:	2805883a 	mov	r2,r5
  80a524:	f800283a 	ret
  80a528:	1804d07a 	srli	r2,r3,1
  80a52c:	01400044 	movi	r5,1
  80a530:	20800015 	stw	r2,0(r4)
  80a534:	003fda06 	br	80a4a0 <__lo0bits+0x2c>

0080a538 <__mcmp>:
  80a538:	20800417 	ldw	r2,16(r4)
  80a53c:	28c00417 	ldw	r3,16(r5)
  80a540:	10cfc83a 	sub	r7,r2,r3
  80a544:	38000c1e 	bne	r7,zero,80a578 <__mcmp+0x40>
  80a548:	18c5883a 	add	r2,r3,r3
  80a54c:	1085883a 	add	r2,r2,r2
  80a550:	10c00504 	addi	r3,r2,20
  80a554:	21000504 	addi	r4,r4,20
  80a558:	28cb883a 	add	r5,r5,r3
  80a55c:	2085883a 	add	r2,r4,r2
  80a560:	10bfff04 	addi	r2,r2,-4
  80a564:	297fff04 	addi	r5,r5,-4
  80a568:	11800017 	ldw	r6,0(r2)
  80a56c:	28c00017 	ldw	r3,0(r5)
  80a570:	30c0031e 	bne	r6,r3,80a580 <__mcmp+0x48>
  80a574:	20bffa36 	bltu	r4,r2,80a560 <__mcmp+0x28>
  80a578:	3805883a 	mov	r2,r7
  80a57c:	f800283a 	ret
  80a580:	30c00336 	bltu	r6,r3,80a590 <__mcmp+0x58>
  80a584:	01c00044 	movi	r7,1
  80a588:	3805883a 	mov	r2,r7
  80a58c:	f800283a 	ret
  80a590:	01ffffc4 	movi	r7,-1
  80a594:	003ff806 	br	80a578 <__mcmp+0x40>

0080a598 <__ulp>:
  80a598:	295ffc2c 	andhi	r5,r5,32752
  80a59c:	013f3034 	movhi	r4,64704
  80a5a0:	290b883a 	add	r5,r5,r4
  80a5a4:	0145c83a 	sub	r2,zero,r5
  80a5a8:	1007d53a 	srai	r3,r2,20
  80a5ac:	000d883a 	mov	r6,zero
  80a5b0:	0140040e 	bge	zero,r5,80a5c4 <__ulp+0x2c>
  80a5b4:	280f883a 	mov	r7,r5
  80a5b8:	3807883a 	mov	r3,r7
  80a5bc:	3005883a 	mov	r2,r6
  80a5c0:	f800283a 	ret
  80a5c4:	008004c4 	movi	r2,19
  80a5c8:	193ffb04 	addi	r4,r3,-20
  80a5cc:	10c00c0e 	bge	r2,r3,80a600 <__ulp+0x68>
  80a5d0:	008007c4 	movi	r2,31
  80a5d4:	1107c83a 	sub	r3,r2,r4
  80a5d8:	00800784 	movi	r2,30
  80a5dc:	01400044 	movi	r5,1
  80a5e0:	11000216 	blt	r2,r4,80a5ec <__ulp+0x54>
  80a5e4:	00800044 	movi	r2,1
  80a5e8:	10ca983a 	sll	r5,r2,r3
  80a5ec:	000f883a 	mov	r7,zero
  80a5f0:	280d883a 	mov	r6,r5
  80a5f4:	3807883a 	mov	r3,r7
  80a5f8:	3005883a 	mov	r2,r6
  80a5fc:	f800283a 	ret
  80a600:	00800234 	movhi	r2,8
  80a604:	10cfd83a 	sra	r7,r2,r3
  80a608:	000d883a 	mov	r6,zero
  80a60c:	3005883a 	mov	r2,r6
  80a610:	3807883a 	mov	r3,r7
  80a614:	f800283a 	ret

0080a618 <__b2d>:
  80a618:	20800417 	ldw	r2,16(r4)
  80a61c:	defff904 	addi	sp,sp,-28
  80a620:	dd000415 	stw	r20,16(sp)
  80a624:	1085883a 	add	r2,r2,r2
  80a628:	25000504 	addi	r20,r4,20
  80a62c:	1085883a 	add	r2,r2,r2
  80a630:	dc000015 	stw	r16,0(sp)
  80a634:	a0a1883a 	add	r16,r20,r2
  80a638:	dd400515 	stw	r21,20(sp)
  80a63c:	857fff17 	ldw	r21,-4(r16)
  80a640:	dc400115 	stw	r17,4(sp)
  80a644:	dfc00615 	stw	ra,24(sp)
  80a648:	a809883a 	mov	r4,r21
  80a64c:	2823883a 	mov	r17,r5
  80a650:	dcc00315 	stw	r19,12(sp)
  80a654:	dc800215 	stw	r18,8(sp)
  80a658:	080a4040 	call	80a404 <__hi0bits>
  80a65c:	100b883a 	mov	r5,r2
  80a660:	00800804 	movi	r2,32
  80a664:	1145c83a 	sub	r2,r2,r5
  80a668:	88800015 	stw	r2,0(r17)
  80a66c:	00800284 	movi	r2,10
  80a670:	80ffff04 	addi	r3,r16,-4
  80a674:	11401416 	blt	r2,r5,80a6c8 <__b2d+0xb0>
  80a678:	008002c4 	movi	r2,11
  80a67c:	1149c83a 	sub	r4,r2,r5
  80a680:	a0c02736 	bltu	r20,r3,80a720 <__b2d+0x108>
  80a684:	000d883a 	mov	r6,zero
  80a688:	28800544 	addi	r2,r5,21
  80a68c:	a906d83a 	srl	r3,r21,r4
  80a690:	a884983a 	sll	r2,r21,r2
  80a694:	1ccffc34 	orhi	r19,r3,16368
  80a698:	11a4b03a 	or	r18,r2,r6
  80a69c:	9005883a 	mov	r2,r18
  80a6a0:	9807883a 	mov	r3,r19
  80a6a4:	dfc00617 	ldw	ra,24(sp)
  80a6a8:	dd400517 	ldw	r21,20(sp)
  80a6ac:	dd000417 	ldw	r20,16(sp)
  80a6b0:	dcc00317 	ldw	r19,12(sp)
  80a6b4:	dc800217 	ldw	r18,8(sp)
  80a6b8:	dc400117 	ldw	r17,4(sp)
  80a6bc:	dc000017 	ldw	r16,0(sp)
  80a6c0:	dec00704 	addi	sp,sp,28
  80a6c4:	f800283a 	ret
  80a6c8:	a0c00e36 	bltu	r20,r3,80a704 <__b2d+0xec>
  80a6cc:	293ffd44 	addi	r4,r5,-11
  80a6d0:	000d883a 	mov	r6,zero
  80a6d4:	20000f26 	beq	r4,zero,80a714 <__b2d+0xfc>
  80a6d8:	00800804 	movi	r2,32
  80a6dc:	110bc83a 	sub	r5,r2,r4
  80a6e0:	a0c01236 	bltu	r20,r3,80a72c <__b2d+0x114>
  80a6e4:	000f883a 	mov	r7,zero
  80a6e8:	a904983a 	sll	r2,r21,r4
  80a6ec:	3146d83a 	srl	r3,r6,r5
  80a6f0:	3108983a 	sll	r4,r6,r4
  80a6f4:	108ffc34 	orhi	r2,r2,16368
  80a6f8:	18a6b03a 	or	r19,r3,r2
  80a6fc:	3924b03a 	or	r18,r7,r4
  80a700:	003fe606 	br	80a69c <__b2d+0x84>
  80a704:	293ffd44 	addi	r4,r5,-11
  80a708:	81bffe17 	ldw	r6,-8(r16)
  80a70c:	80fffe04 	addi	r3,r16,-8
  80a710:	203ff11e 	bne	r4,zero,80a6d8 <__b2d+0xc0>
  80a714:	accffc34 	orhi	r19,r21,16368
  80a718:	3025883a 	mov	r18,r6
  80a71c:	003fdf06 	br	80a69c <__b2d+0x84>
  80a720:	18bfff17 	ldw	r2,-4(r3)
  80a724:	110cd83a 	srl	r6,r2,r4
  80a728:	003fd706 	br	80a688 <__b2d+0x70>
  80a72c:	18bfff17 	ldw	r2,-4(r3)
  80a730:	114ed83a 	srl	r7,r2,r5
  80a734:	003fec06 	br	80a6e8 <__b2d+0xd0>

0080a738 <__ratio>:
  80a738:	defff904 	addi	sp,sp,-28
  80a73c:	dc400215 	stw	r17,8(sp)
  80a740:	2823883a 	mov	r17,r5
  80a744:	d80b883a 	mov	r5,sp
  80a748:	dfc00615 	stw	ra,24(sp)
  80a74c:	dd000515 	stw	r20,20(sp)
  80a750:	dcc00415 	stw	r19,16(sp)
  80a754:	dc800315 	stw	r18,12(sp)
  80a758:	2025883a 	mov	r18,r4
  80a75c:	080a6180 	call	80a618 <__b2d>
  80a760:	8809883a 	mov	r4,r17
  80a764:	d9400104 	addi	r5,sp,4
  80a768:	1027883a 	mov	r19,r2
  80a76c:	1829883a 	mov	r20,r3
  80a770:	080a6180 	call	80a618 <__b2d>
  80a774:	89000417 	ldw	r4,16(r17)
  80a778:	91c00417 	ldw	r7,16(r18)
  80a77c:	d9800117 	ldw	r6,4(sp)
  80a780:	180b883a 	mov	r5,r3
  80a784:	390fc83a 	sub	r7,r7,r4
  80a788:	1009883a 	mov	r4,r2
  80a78c:	d8800017 	ldw	r2,0(sp)
  80a790:	380e917a 	slli	r7,r7,5
  80a794:	2011883a 	mov	r8,r4
  80a798:	1185c83a 	sub	r2,r2,r6
  80a79c:	11c5883a 	add	r2,r2,r7
  80a7a0:	1006953a 	slli	r3,r2,20
  80a7a4:	2813883a 	mov	r9,r5
  80a7a8:	00800d0e 	bge	zero,r2,80a7e0 <__ratio+0xa8>
  80a7ac:	1d29883a 	add	r20,r3,r20
  80a7b0:	a00b883a 	mov	r5,r20
  80a7b4:	480f883a 	mov	r7,r9
  80a7b8:	9809883a 	mov	r4,r19
  80a7bc:	400d883a 	mov	r6,r8
  80a7c0:	080d5240 	call	80d524 <__divdf3>
  80a7c4:	dfc00617 	ldw	ra,24(sp)
  80a7c8:	dd000517 	ldw	r20,20(sp)
  80a7cc:	dcc00417 	ldw	r19,16(sp)
  80a7d0:	dc800317 	ldw	r18,12(sp)
  80a7d4:	dc400217 	ldw	r17,8(sp)
  80a7d8:	dec00704 	addi	sp,sp,28
  80a7dc:	f800283a 	ret
  80a7e0:	28d3c83a 	sub	r9,r5,r3
  80a7e4:	003ff206 	br	80a7b0 <__ratio+0x78>

0080a7e8 <_mprec_log10>:
  80a7e8:	defffe04 	addi	sp,sp,-8
  80a7ec:	008005c4 	movi	r2,23
  80a7f0:	dc000015 	stw	r16,0(sp)
  80a7f4:	dfc00115 	stw	ra,4(sp)
  80a7f8:	2021883a 	mov	r16,r4
  80a7fc:	11000c16 	blt	r2,r4,80a830 <_mprec_log10+0x48>
  80a800:	200490fa 	slli	r2,r4,3
  80a804:	00c02074 	movhi	r3,129
  80a808:	18c9dc04 	addi	r3,r3,10096
  80a80c:	10c5883a 	add	r2,r2,r3
  80a810:	12400117 	ldw	r9,4(r2)
  80a814:	12000017 	ldw	r8,0(r2)
  80a818:	4807883a 	mov	r3,r9
  80a81c:	4005883a 	mov	r2,r8
  80a820:	dfc00117 	ldw	ra,4(sp)
  80a824:	dc000017 	ldw	r16,0(sp)
  80a828:	dec00204 	addi	sp,sp,8
  80a82c:	f800283a 	ret
  80a830:	0011883a 	mov	r8,zero
  80a834:	024ffc34 	movhi	r9,16368
  80a838:	0005883a 	mov	r2,zero
  80a83c:	00d00934 	movhi	r3,16420
  80a840:	480b883a 	mov	r5,r9
  80a844:	4009883a 	mov	r4,r8
  80a848:	180f883a 	mov	r7,r3
  80a84c:	100d883a 	mov	r6,r2
  80a850:	080d1600 	call	80d160 <__muldf3>
  80a854:	843fffc4 	addi	r16,r16,-1
  80a858:	1011883a 	mov	r8,r2
  80a85c:	1813883a 	mov	r9,r3
  80a860:	803ff51e 	bne	r16,zero,80a838 <_mprec_log10+0x50>
  80a864:	4005883a 	mov	r2,r8
  80a868:	4807883a 	mov	r3,r9
  80a86c:	dfc00117 	ldw	ra,4(sp)
  80a870:	dc000017 	ldw	r16,0(sp)
  80a874:	dec00204 	addi	sp,sp,8
  80a878:	f800283a 	ret

0080a87c <__copybits>:
  80a87c:	297fffc4 	addi	r5,r5,-1
  80a880:	30800417 	ldw	r2,16(r6)
  80a884:	280bd17a 	srai	r5,r5,5
  80a888:	31800504 	addi	r6,r6,20
  80a88c:	1085883a 	add	r2,r2,r2
  80a890:	294b883a 	add	r5,r5,r5
  80a894:	294b883a 	add	r5,r5,r5
  80a898:	1085883a 	add	r2,r2,r2
  80a89c:	290b883a 	add	r5,r5,r4
  80a8a0:	3087883a 	add	r3,r6,r2
  80a8a4:	29400104 	addi	r5,r5,4
  80a8a8:	30c0052e 	bgeu	r6,r3,80a8c0 <__copybits+0x44>
  80a8ac:	30800017 	ldw	r2,0(r6)
  80a8b0:	31800104 	addi	r6,r6,4
  80a8b4:	20800015 	stw	r2,0(r4)
  80a8b8:	21000104 	addi	r4,r4,4
  80a8bc:	30fffb36 	bltu	r6,r3,80a8ac <__copybits+0x30>
  80a8c0:	2140032e 	bgeu	r4,r5,80a8d0 <__copybits+0x54>
  80a8c4:	20000015 	stw	zero,0(r4)
  80a8c8:	21000104 	addi	r4,r4,4
  80a8cc:	217ffd36 	bltu	r4,r5,80a8c4 <__copybits+0x48>
  80a8d0:	f800283a 	ret

0080a8d4 <__any_on>:
  80a8d4:	20800417 	ldw	r2,16(r4)
  80a8d8:	2807d17a 	srai	r3,r5,5
  80a8dc:	21000504 	addi	r4,r4,20
  80a8e0:	10c00d0e 	bge	r2,r3,80a918 <__any_on+0x44>
  80a8e4:	1085883a 	add	r2,r2,r2
  80a8e8:	1085883a 	add	r2,r2,r2
  80a8ec:	208d883a 	add	r6,r4,r2
  80a8f0:	2180182e 	bgeu	r4,r6,80a954 <__any_on+0x80>
  80a8f4:	30bfff17 	ldw	r2,-4(r6)
  80a8f8:	30ffff04 	addi	r3,r6,-4
  80a8fc:	1000041e 	bne	r2,zero,80a910 <__any_on+0x3c>
  80a900:	20c0142e 	bgeu	r4,r3,80a954 <__any_on+0x80>
  80a904:	18ffff04 	addi	r3,r3,-4
  80a908:	18800017 	ldw	r2,0(r3)
  80a90c:	103ffc26 	beq	r2,zero,80a900 <__any_on+0x2c>
  80a910:	00800044 	movi	r2,1
  80a914:	f800283a 	ret
  80a918:	18800a0e 	bge	r3,r2,80a944 <__any_on+0x70>
  80a91c:	294007cc 	andi	r5,r5,31
  80a920:	28000826 	beq	r5,zero,80a944 <__any_on+0x70>
  80a924:	18c5883a 	add	r2,r3,r3
  80a928:	1085883a 	add	r2,r2,r2
  80a92c:	208d883a 	add	r6,r4,r2
  80a930:	30c00017 	ldw	r3,0(r6)
  80a934:	1944d83a 	srl	r2,r3,r5
  80a938:	1144983a 	sll	r2,r2,r5
  80a93c:	18bff41e 	bne	r3,r2,80a910 <__any_on+0x3c>
  80a940:	003feb06 	br	80a8f0 <__any_on+0x1c>
  80a944:	18c5883a 	add	r2,r3,r3
  80a948:	1085883a 	add	r2,r2,r2
  80a94c:	208d883a 	add	r6,r4,r2
  80a950:	003fe706 	br	80a8f0 <__any_on+0x1c>
  80a954:	0005883a 	mov	r2,zero
  80a958:	f800283a 	ret

0080a95c <_Balloc>:
  80a95c:	20c01317 	ldw	r3,76(r4)
  80a960:	defffb04 	addi	sp,sp,-20
  80a964:	dcc00315 	stw	r19,12(sp)
  80a968:	dc800215 	stw	r18,8(sp)
  80a96c:	dfc00415 	stw	ra,16(sp)
  80a970:	2825883a 	mov	r18,r5
  80a974:	dc400115 	stw	r17,4(sp)
  80a978:	dc000015 	stw	r16,0(sp)
  80a97c:	2027883a 	mov	r19,r4
  80a980:	01800404 	movi	r6,16
  80a984:	01400104 	movi	r5,4
  80a988:	18001726 	beq	r3,zero,80a9e8 <_Balloc+0x8c>
  80a98c:	01400044 	movi	r5,1
  80a990:	9485883a 	add	r2,r18,r18
  80a994:	2ca2983a 	sll	r17,r5,r18
  80a998:	1085883a 	add	r2,r2,r2
  80a99c:	10c7883a 	add	r3,r2,r3
  80a9a0:	1c000017 	ldw	r16,0(r3)
  80a9a4:	8c4d883a 	add	r6,r17,r17
  80a9a8:	318d883a 	add	r6,r6,r6
  80a9ac:	9809883a 	mov	r4,r19
  80a9b0:	31800504 	addi	r6,r6,20
  80a9b4:	80001226 	beq	r16,zero,80aa00 <_Balloc+0xa4>
  80a9b8:	80800017 	ldw	r2,0(r16)
  80a9bc:	18800015 	stw	r2,0(r3)
  80a9c0:	80000415 	stw	zero,16(r16)
  80a9c4:	80000315 	stw	zero,12(r16)
  80a9c8:	8005883a 	mov	r2,r16
  80a9cc:	dfc00417 	ldw	ra,16(sp)
  80a9d0:	dcc00317 	ldw	r19,12(sp)
  80a9d4:	dc800217 	ldw	r18,8(sp)
  80a9d8:	dc400117 	ldw	r17,4(sp)
  80a9dc:	dc000017 	ldw	r16,0(sp)
  80a9e0:	dec00504 	addi	sp,sp,20
  80a9e4:	f800283a 	ret
  80a9e8:	080bcb40 	call	80bcb4 <_calloc_r>
  80a9ec:	1007883a 	mov	r3,r2
  80a9f0:	0021883a 	mov	r16,zero
  80a9f4:	98801315 	stw	r2,76(r19)
  80a9f8:	103fe41e 	bne	r2,zero,80a98c <_Balloc+0x30>
  80a9fc:	003ff206 	br	80a9c8 <_Balloc+0x6c>
  80aa00:	080bcb40 	call	80bcb4 <_calloc_r>
  80aa04:	103ff026 	beq	r2,zero,80a9c8 <_Balloc+0x6c>
  80aa08:	1021883a 	mov	r16,r2
  80aa0c:	14800115 	stw	r18,4(r2)
  80aa10:	14400215 	stw	r17,8(r2)
  80aa14:	003fea06 	br	80a9c0 <_Balloc+0x64>

0080aa18 <__d2b>:
  80aa18:	defff504 	addi	sp,sp,-44
  80aa1c:	dcc00515 	stw	r19,20(sp)
  80aa20:	04c00044 	movi	r19,1
  80aa24:	dc000215 	stw	r16,8(sp)
  80aa28:	2821883a 	mov	r16,r5
  80aa2c:	980b883a 	mov	r5,r19
  80aa30:	ddc00915 	stw	r23,36(sp)
  80aa34:	dd800815 	stw	r22,32(sp)
  80aa38:	dd400715 	stw	r21,28(sp)
  80aa3c:	dd000615 	stw	r20,24(sp)
  80aa40:	dc800415 	stw	r18,16(sp)
  80aa44:	dc400315 	stw	r17,12(sp)
  80aa48:	dfc00a15 	stw	ra,40(sp)
  80aa4c:	3023883a 	mov	r17,r6
  80aa50:	382d883a 	mov	r22,r7
  80aa54:	ddc00b17 	ldw	r23,44(sp)
  80aa58:	080a95c0 	call	80a95c <_Balloc>
  80aa5c:	1025883a 	mov	r18,r2
  80aa60:	00a00034 	movhi	r2,32768
  80aa64:	10bfffc4 	addi	r2,r2,-1
  80aa68:	8888703a 	and	r4,r17,r2
  80aa6c:	202ad53a 	srli	r21,r4,20
  80aa70:	00800434 	movhi	r2,16
  80aa74:	10bfffc4 	addi	r2,r2,-1
  80aa78:	8886703a 	and	r3,r17,r2
  80aa7c:	a829003a 	cmpeq	r20,r21,zero
  80aa80:	800b883a 	mov	r5,r16
  80aa84:	d8c00115 	stw	r3,4(sp)
  80aa88:	94000504 	addi	r16,r18,20
  80aa8c:	a000021e 	bne	r20,zero,80aa98 <__d2b+0x80>
  80aa90:	18c00434 	orhi	r3,r3,16
  80aa94:	d8c00115 	stw	r3,4(sp)
  80aa98:	28002726 	beq	r5,zero,80ab38 <__d2b+0x120>
  80aa9c:	d809883a 	mov	r4,sp
  80aaa0:	d9400015 	stw	r5,0(sp)
  80aaa4:	080a4740 	call	80a474 <__lo0bits>
  80aaa8:	100d883a 	mov	r6,r2
  80aaac:	10003526 	beq	r2,zero,80ab84 <__d2b+0x16c>
  80aab0:	d8c00117 	ldw	r3,4(sp)
  80aab4:	00800804 	movi	r2,32
  80aab8:	1185c83a 	sub	r2,r2,r6
  80aabc:	d9000017 	ldw	r4,0(sp)
  80aac0:	1886983a 	sll	r3,r3,r2
  80aac4:	1906b03a 	or	r3,r3,r4
  80aac8:	90c00515 	stw	r3,20(r18)
  80aacc:	d8c00117 	ldw	r3,4(sp)
  80aad0:	1986d83a 	srl	r3,r3,r6
  80aad4:	d8c00115 	stw	r3,4(sp)
  80aad8:	180b003a 	cmpeq	r5,r3,zero
  80aadc:	00800084 	movi	r2,2
  80aae0:	114bc83a 	sub	r5,r2,r5
  80aae4:	80c00115 	stw	r3,4(r16)
  80aae8:	91400415 	stw	r5,16(r18)
  80aaec:	a0001a1e 	bne	r20,zero,80ab58 <__d2b+0x140>
  80aaf0:	3545883a 	add	r2,r6,r21
  80aaf4:	10bef344 	addi	r2,r2,-1075
  80aaf8:	00c00d44 	movi	r3,53
  80aafc:	b0800015 	stw	r2,0(r22)
  80ab00:	1987c83a 	sub	r3,r3,r6
  80ab04:	b8c00015 	stw	r3,0(r23)
  80ab08:	9005883a 	mov	r2,r18
  80ab0c:	dfc00a17 	ldw	ra,40(sp)
  80ab10:	ddc00917 	ldw	r23,36(sp)
  80ab14:	dd800817 	ldw	r22,32(sp)
  80ab18:	dd400717 	ldw	r21,28(sp)
  80ab1c:	dd000617 	ldw	r20,24(sp)
  80ab20:	dcc00517 	ldw	r19,20(sp)
  80ab24:	dc800417 	ldw	r18,16(sp)
  80ab28:	dc400317 	ldw	r17,12(sp)
  80ab2c:	dc000217 	ldw	r16,8(sp)
  80ab30:	dec00b04 	addi	sp,sp,44
  80ab34:	f800283a 	ret
  80ab38:	d9000104 	addi	r4,sp,4
  80ab3c:	080a4740 	call	80a474 <__lo0bits>
  80ab40:	11800804 	addi	r6,r2,32
  80ab44:	d8800117 	ldw	r2,4(sp)
  80ab48:	94c00415 	stw	r19,16(r18)
  80ab4c:	980b883a 	mov	r5,r19
  80ab50:	90800515 	stw	r2,20(r18)
  80ab54:	a03fe626 	beq	r20,zero,80aaf0 <__d2b+0xd8>
  80ab58:	2945883a 	add	r2,r5,r5
  80ab5c:	1085883a 	add	r2,r2,r2
  80ab60:	1405883a 	add	r2,r2,r16
  80ab64:	113fff17 	ldw	r4,-4(r2)
  80ab68:	30fef384 	addi	r3,r6,-1074
  80ab6c:	2820917a 	slli	r16,r5,5
  80ab70:	b0c00015 	stw	r3,0(r22)
  80ab74:	080a4040 	call	80a404 <__hi0bits>
  80ab78:	80a1c83a 	sub	r16,r16,r2
  80ab7c:	bc000015 	stw	r16,0(r23)
  80ab80:	003fe106 	br	80ab08 <__d2b+0xf0>
  80ab84:	d8800017 	ldw	r2,0(sp)
  80ab88:	90800515 	stw	r2,20(r18)
  80ab8c:	d8c00117 	ldw	r3,4(sp)
  80ab90:	003fd106 	br	80aad8 <__d2b+0xc0>

0080ab94 <__mdiff>:
  80ab94:	defffb04 	addi	sp,sp,-20
  80ab98:	dc000015 	stw	r16,0(sp)
  80ab9c:	2821883a 	mov	r16,r5
  80aba0:	dc800215 	stw	r18,8(sp)
  80aba4:	300b883a 	mov	r5,r6
  80aba8:	2025883a 	mov	r18,r4
  80abac:	8009883a 	mov	r4,r16
  80abb0:	dc400115 	stw	r17,4(sp)
  80abb4:	dfc00415 	stw	ra,16(sp)
  80abb8:	dcc00315 	stw	r19,12(sp)
  80abbc:	3023883a 	mov	r17,r6
  80abc0:	080a5380 	call	80a538 <__mcmp>
  80abc4:	10004226 	beq	r2,zero,80acd0 <__mdiff+0x13c>
  80abc8:	10005016 	blt	r2,zero,80ad0c <__mdiff+0x178>
  80abcc:	0027883a 	mov	r19,zero
  80abd0:	81400117 	ldw	r5,4(r16)
  80abd4:	9009883a 	mov	r4,r18
  80abd8:	080a95c0 	call	80a95c <_Balloc>
  80abdc:	1019883a 	mov	r12,r2
  80abe0:	82800417 	ldw	r10,16(r16)
  80abe4:	88800417 	ldw	r2,16(r17)
  80abe8:	81800504 	addi	r6,r16,20
  80abec:	5287883a 	add	r3,r10,r10
  80abf0:	1085883a 	add	r2,r2,r2
  80abf4:	18c7883a 	add	r3,r3,r3
  80abf8:	1085883a 	add	r2,r2,r2
  80abfc:	8a000504 	addi	r8,r17,20
  80ac00:	64c00315 	stw	r19,12(r12)
  80ac04:	30db883a 	add	r13,r6,r3
  80ac08:	4097883a 	add	r11,r8,r2
  80ac0c:	61c00504 	addi	r7,r12,20
  80ac10:	0013883a 	mov	r9,zero
  80ac14:	31000017 	ldw	r4,0(r6)
  80ac18:	41400017 	ldw	r5,0(r8)
  80ac1c:	42000104 	addi	r8,r8,4
  80ac20:	20bfffcc 	andi	r2,r4,65535
  80ac24:	28ffffcc 	andi	r3,r5,65535
  80ac28:	10c5c83a 	sub	r2,r2,r3
  80ac2c:	1245883a 	add	r2,r2,r9
  80ac30:	2008d43a 	srli	r4,r4,16
  80ac34:	280ad43a 	srli	r5,r5,16
  80ac38:	1007d43a 	srai	r3,r2,16
  80ac3c:	3880000d 	sth	r2,0(r7)
  80ac40:	2149c83a 	sub	r4,r4,r5
  80ac44:	20c9883a 	add	r4,r4,r3
  80ac48:	3900008d 	sth	r4,2(r7)
  80ac4c:	31800104 	addi	r6,r6,4
  80ac50:	39c00104 	addi	r7,r7,4
  80ac54:	2013d43a 	srai	r9,r4,16
  80ac58:	42ffee36 	bltu	r8,r11,80ac14 <__mdiff+0x80>
  80ac5c:	33400c2e 	bgeu	r6,r13,80ac90 <__mdiff+0xfc>
  80ac60:	30800017 	ldw	r2,0(r6)
  80ac64:	31800104 	addi	r6,r6,4
  80ac68:	10ffffcc 	andi	r3,r2,65535
  80ac6c:	1a47883a 	add	r3,r3,r9
  80ac70:	1004d43a 	srli	r2,r2,16
  80ac74:	1809d43a 	srai	r4,r3,16
  80ac78:	38c0000d 	sth	r3,0(r7)
  80ac7c:	1105883a 	add	r2,r2,r4
  80ac80:	3880008d 	sth	r2,2(r7)
  80ac84:	1013d43a 	srai	r9,r2,16
  80ac88:	39c00104 	addi	r7,r7,4
  80ac8c:	337ff436 	bltu	r6,r13,80ac60 <__mdiff+0xcc>
  80ac90:	38bfff17 	ldw	r2,-4(r7)
  80ac94:	38ffff04 	addi	r3,r7,-4
  80ac98:	1000041e 	bne	r2,zero,80acac <__mdiff+0x118>
  80ac9c:	18ffff04 	addi	r3,r3,-4
  80aca0:	18800017 	ldw	r2,0(r3)
  80aca4:	52bfffc4 	addi	r10,r10,-1
  80aca8:	103ffc26 	beq	r2,zero,80ac9c <__mdiff+0x108>
  80acac:	6005883a 	mov	r2,r12
  80acb0:	62800415 	stw	r10,16(r12)
  80acb4:	dfc00417 	ldw	ra,16(sp)
  80acb8:	dcc00317 	ldw	r19,12(sp)
  80acbc:	dc800217 	ldw	r18,8(sp)
  80acc0:	dc400117 	ldw	r17,4(sp)
  80acc4:	dc000017 	ldw	r16,0(sp)
  80acc8:	dec00504 	addi	sp,sp,20
  80accc:	f800283a 	ret
  80acd0:	9009883a 	mov	r4,r18
  80acd4:	000b883a 	mov	r5,zero
  80acd8:	080a95c0 	call	80a95c <_Balloc>
  80acdc:	1019883a 	mov	r12,r2
  80ace0:	00800044 	movi	r2,1
  80ace4:	60800415 	stw	r2,16(r12)
  80ace8:	6005883a 	mov	r2,r12
  80acec:	60000515 	stw	zero,20(r12)
  80acf0:	dfc00417 	ldw	ra,16(sp)
  80acf4:	dcc00317 	ldw	r19,12(sp)
  80acf8:	dc800217 	ldw	r18,8(sp)
  80acfc:	dc400117 	ldw	r17,4(sp)
  80ad00:	dc000017 	ldw	r16,0(sp)
  80ad04:	dec00504 	addi	sp,sp,20
  80ad08:	f800283a 	ret
  80ad0c:	880d883a 	mov	r6,r17
  80ad10:	04c00044 	movi	r19,1
  80ad14:	8023883a 	mov	r17,r16
  80ad18:	3021883a 	mov	r16,r6
  80ad1c:	003fac06 	br	80abd0 <__mdiff+0x3c>

0080ad20 <__lshift>:
  80ad20:	defff904 	addi	sp,sp,-28
  80ad24:	28800417 	ldw	r2,16(r5)
  80ad28:	dc000015 	stw	r16,0(sp)
  80ad2c:	3021d17a 	srai	r16,r6,5
  80ad30:	28c00217 	ldw	r3,8(r5)
  80ad34:	10800044 	addi	r2,r2,1
  80ad38:	dc400115 	stw	r17,4(sp)
  80ad3c:	80a3883a 	add	r17,r16,r2
  80ad40:	dd400515 	stw	r21,20(sp)
  80ad44:	dd000415 	stw	r20,16(sp)
  80ad48:	dc800215 	stw	r18,8(sp)
  80ad4c:	dfc00615 	stw	ra,24(sp)
  80ad50:	2825883a 	mov	r18,r5
  80ad54:	dcc00315 	stw	r19,12(sp)
  80ad58:	3029883a 	mov	r20,r6
  80ad5c:	202b883a 	mov	r21,r4
  80ad60:	29400117 	ldw	r5,4(r5)
  80ad64:	1c40030e 	bge	r3,r17,80ad74 <__lshift+0x54>
  80ad68:	18c7883a 	add	r3,r3,r3
  80ad6c:	29400044 	addi	r5,r5,1
  80ad70:	1c7ffd16 	blt	r3,r17,80ad68 <__lshift+0x48>
  80ad74:	a809883a 	mov	r4,r21
  80ad78:	080a95c0 	call	80a95c <_Balloc>
  80ad7c:	1027883a 	mov	r19,r2
  80ad80:	11400504 	addi	r5,r2,20
  80ad84:	0400090e 	bge	zero,r16,80adac <__lshift+0x8c>
  80ad88:	2805883a 	mov	r2,r5
  80ad8c:	0007883a 	mov	r3,zero
  80ad90:	18c00044 	addi	r3,r3,1
  80ad94:	10000015 	stw	zero,0(r2)
  80ad98:	10800104 	addi	r2,r2,4
  80ad9c:	80fffc1e 	bne	r16,r3,80ad90 <__lshift+0x70>
  80ada0:	8405883a 	add	r2,r16,r16
  80ada4:	1085883a 	add	r2,r2,r2
  80ada8:	288b883a 	add	r5,r5,r2
  80adac:	90800417 	ldw	r2,16(r18)
  80adb0:	91000504 	addi	r4,r18,20
  80adb4:	a18007cc 	andi	r6,r20,31
  80adb8:	1085883a 	add	r2,r2,r2
  80adbc:	1085883a 	add	r2,r2,r2
  80adc0:	208f883a 	add	r7,r4,r2
  80adc4:	30001e26 	beq	r6,zero,80ae40 <__lshift+0x120>
  80adc8:	00800804 	movi	r2,32
  80adcc:	1191c83a 	sub	r8,r2,r6
  80add0:	0007883a 	mov	r3,zero
  80add4:	20800017 	ldw	r2,0(r4)
  80add8:	1184983a 	sll	r2,r2,r6
  80addc:	1884b03a 	or	r2,r3,r2
  80ade0:	28800015 	stw	r2,0(r5)
  80ade4:	20c00017 	ldw	r3,0(r4)
  80ade8:	21000104 	addi	r4,r4,4
  80adec:	29400104 	addi	r5,r5,4
  80adf0:	1a06d83a 	srl	r3,r3,r8
  80adf4:	21fff736 	bltu	r4,r7,80add4 <__lshift+0xb4>
  80adf8:	28c00015 	stw	r3,0(r5)
  80adfc:	18000126 	beq	r3,zero,80ae04 <__lshift+0xe4>
  80ae00:	8c400044 	addi	r17,r17,1
  80ae04:	88bfffc4 	addi	r2,r17,-1
  80ae08:	98800415 	stw	r2,16(r19)
  80ae0c:	a809883a 	mov	r4,r21
  80ae10:	900b883a 	mov	r5,r18
  80ae14:	080a3dc0 	call	80a3dc <_Bfree>
  80ae18:	9805883a 	mov	r2,r19
  80ae1c:	dfc00617 	ldw	ra,24(sp)
  80ae20:	dd400517 	ldw	r21,20(sp)
  80ae24:	dd000417 	ldw	r20,16(sp)
  80ae28:	dcc00317 	ldw	r19,12(sp)
  80ae2c:	dc800217 	ldw	r18,8(sp)
  80ae30:	dc400117 	ldw	r17,4(sp)
  80ae34:	dc000017 	ldw	r16,0(sp)
  80ae38:	dec00704 	addi	sp,sp,28
  80ae3c:	f800283a 	ret
  80ae40:	20800017 	ldw	r2,0(r4)
  80ae44:	21000104 	addi	r4,r4,4
  80ae48:	28800015 	stw	r2,0(r5)
  80ae4c:	29400104 	addi	r5,r5,4
  80ae50:	21ffec2e 	bgeu	r4,r7,80ae04 <__lshift+0xe4>
  80ae54:	20800017 	ldw	r2,0(r4)
  80ae58:	21000104 	addi	r4,r4,4
  80ae5c:	28800015 	stw	r2,0(r5)
  80ae60:	29400104 	addi	r5,r5,4
  80ae64:	21fff636 	bltu	r4,r7,80ae40 <__lshift+0x120>
  80ae68:	003fe606 	br	80ae04 <__lshift+0xe4>

0080ae6c <__multiply>:
  80ae6c:	defff904 	addi	sp,sp,-28
  80ae70:	dcc00315 	stw	r19,12(sp)
  80ae74:	dc800215 	stw	r18,8(sp)
  80ae78:	2cc00417 	ldw	r19,16(r5)
  80ae7c:	34800417 	ldw	r18,16(r6)
  80ae80:	dd000415 	stw	r20,16(sp)
  80ae84:	dc400115 	stw	r17,4(sp)
  80ae88:	dfc00615 	stw	ra,24(sp)
  80ae8c:	dd400515 	stw	r21,20(sp)
  80ae90:	dc000015 	stw	r16,0(sp)
  80ae94:	2823883a 	mov	r17,r5
  80ae98:	3029883a 	mov	r20,r6
  80ae9c:	9c80040e 	bge	r19,r18,80aeb0 <__multiply+0x44>
  80aea0:	9027883a 	mov	r19,r18
  80aea4:	2c800417 	ldw	r18,16(r5)
  80aea8:	2829883a 	mov	r20,r5
  80aeac:	3023883a 	mov	r17,r6
  80aeb0:	88800217 	ldw	r2,8(r17)
  80aeb4:	9ca1883a 	add	r16,r19,r18
  80aeb8:	89400117 	ldw	r5,4(r17)
  80aebc:	1400010e 	bge	r2,r16,80aec4 <__multiply+0x58>
  80aec0:	29400044 	addi	r5,r5,1
  80aec4:	080a95c0 	call	80a95c <_Balloc>
  80aec8:	102b883a 	mov	r21,r2
  80aecc:	8405883a 	add	r2,r16,r16
  80aed0:	1085883a 	add	r2,r2,r2
  80aed4:	a9000504 	addi	r4,r21,20
  80aed8:	209d883a 	add	r14,r4,r2
  80aedc:	2380042e 	bgeu	r4,r14,80aef0 <__multiply+0x84>
  80aee0:	2005883a 	mov	r2,r4
  80aee4:	10000015 	stw	zero,0(r2)
  80aee8:	10800104 	addi	r2,r2,4
  80aeec:	13bffd36 	bltu	r2,r14,80aee4 <__multiply+0x78>
  80aef0:	9485883a 	add	r2,r18,r18
  80aef4:	9cc7883a 	add	r3,r19,r19
  80aef8:	a1800504 	addi	r6,r20,20
  80aefc:	1085883a 	add	r2,r2,r2
  80af00:	8b400504 	addi	r13,r17,20
  80af04:	18c7883a 	add	r3,r3,r3
  80af08:	309f883a 	add	r15,r6,r2
  80af0c:	68d7883a 	add	r11,r13,r3
  80af10:	33c03b2e 	bgeu	r6,r15,80b000 <__multiply+0x194>
  80af14:	2019883a 	mov	r12,r4
  80af18:	30800017 	ldw	r2,0(r6)
  80af1c:	127fffcc 	andi	r9,r2,65535
  80af20:	48001826 	beq	r9,zero,80af84 <__multiply+0x118>
  80af24:	6811883a 	mov	r8,r13
  80af28:	600f883a 	mov	r7,r12
  80af2c:	0015883a 	mov	r10,zero
  80af30:	40c00017 	ldw	r3,0(r8)
  80af34:	39400017 	ldw	r5,0(r7)
  80af38:	42000104 	addi	r8,r8,4
  80af3c:	193fffcc 	andi	r4,r3,65535
  80af40:	4909383a 	mul	r4,r9,r4
  80af44:	1806d43a 	srli	r3,r3,16
  80af48:	28bfffcc 	andi	r2,r5,65535
  80af4c:	5085883a 	add	r2,r10,r2
  80af50:	2089883a 	add	r4,r4,r2
  80af54:	48c7383a 	mul	r3,r9,r3
  80af58:	280ad43a 	srli	r5,r5,16
  80af5c:	2004d43a 	srli	r2,r4,16
  80af60:	3900000d 	sth	r4,0(r7)
  80af64:	1947883a 	add	r3,r3,r5
  80af68:	10c5883a 	add	r2,r2,r3
  80af6c:	3880008d 	sth	r2,2(r7)
  80af70:	1014d43a 	srli	r10,r2,16
  80af74:	39c00104 	addi	r7,r7,4
  80af78:	42ffed36 	bltu	r8,r11,80af30 <__multiply+0xc4>
  80af7c:	3a800015 	stw	r10,0(r7)
  80af80:	30800017 	ldw	r2,0(r6)
  80af84:	1012d43a 	srli	r9,r2,16
  80af88:	48001926 	beq	r9,zero,80aff0 <__multiply+0x184>
  80af8c:	60800017 	ldw	r2,0(r12)
  80af90:	6811883a 	mov	r8,r13
  80af94:	600f883a 	mov	r7,r12
  80af98:	0015883a 	mov	r10,zero
  80af9c:	100b883a 	mov	r5,r2
  80afa0:	41000017 	ldw	r4,0(r8)
  80afa4:	2806d43a 	srli	r3,r5,16
  80afa8:	3880000d 	sth	r2,0(r7)
  80afac:	20bfffcc 	andi	r2,r4,65535
  80afb0:	4885383a 	mul	r2,r9,r2
  80afb4:	50c7883a 	add	r3,r10,r3
  80afb8:	2008d43a 	srli	r4,r4,16
  80afbc:	10c5883a 	add	r2,r2,r3
  80afc0:	3880008d 	sth	r2,2(r7)
  80afc4:	39c00104 	addi	r7,r7,4
  80afc8:	39400017 	ldw	r5,0(r7)
  80afcc:	4909383a 	mul	r4,r9,r4
  80afd0:	1004d43a 	srli	r2,r2,16
  80afd4:	28ffffcc 	andi	r3,r5,65535
  80afd8:	20c9883a 	add	r4,r4,r3
  80afdc:	1105883a 	add	r2,r2,r4
  80afe0:	42000104 	addi	r8,r8,4
  80afe4:	1014d43a 	srli	r10,r2,16
  80afe8:	42ffed36 	bltu	r8,r11,80afa0 <__multiply+0x134>
  80afec:	38800015 	stw	r2,0(r7)
  80aff0:	31800104 	addi	r6,r6,4
  80aff4:	33c0022e 	bgeu	r6,r15,80b000 <__multiply+0x194>
  80aff8:	63000104 	addi	r12,r12,4
  80affc:	003fc606 	br	80af18 <__multiply+0xac>
  80b000:	0400090e 	bge	zero,r16,80b028 <__multiply+0x1bc>
  80b004:	70bfff17 	ldw	r2,-4(r14)
  80b008:	70ffff04 	addi	r3,r14,-4
  80b00c:	10000326 	beq	r2,zero,80b01c <__multiply+0x1b0>
  80b010:	00000506 	br	80b028 <__multiply+0x1bc>
  80b014:	18800017 	ldw	r2,0(r3)
  80b018:	1000031e 	bne	r2,zero,80b028 <__multiply+0x1bc>
  80b01c:	843fffc4 	addi	r16,r16,-1
  80b020:	18ffff04 	addi	r3,r3,-4
  80b024:	803ffb1e 	bne	r16,zero,80b014 <__multiply+0x1a8>
  80b028:	a805883a 	mov	r2,r21
  80b02c:	ac000415 	stw	r16,16(r21)
  80b030:	dfc00617 	ldw	ra,24(sp)
  80b034:	dd400517 	ldw	r21,20(sp)
  80b038:	dd000417 	ldw	r20,16(sp)
  80b03c:	dcc00317 	ldw	r19,12(sp)
  80b040:	dc800217 	ldw	r18,8(sp)
  80b044:	dc400117 	ldw	r17,4(sp)
  80b048:	dc000017 	ldw	r16,0(sp)
  80b04c:	dec00704 	addi	sp,sp,28
  80b050:	f800283a 	ret

0080b054 <__i2b>:
  80b054:	defffd04 	addi	sp,sp,-12
  80b058:	dc000015 	stw	r16,0(sp)
  80b05c:	04000044 	movi	r16,1
  80b060:	dc800115 	stw	r18,4(sp)
  80b064:	2825883a 	mov	r18,r5
  80b068:	800b883a 	mov	r5,r16
  80b06c:	dfc00215 	stw	ra,8(sp)
  80b070:	080a95c0 	call	80a95c <_Balloc>
  80b074:	14000415 	stw	r16,16(r2)
  80b078:	14800515 	stw	r18,20(r2)
  80b07c:	dfc00217 	ldw	ra,8(sp)
  80b080:	dc800117 	ldw	r18,4(sp)
  80b084:	dc000017 	ldw	r16,0(sp)
  80b088:	dec00304 	addi	sp,sp,12
  80b08c:	f800283a 	ret

0080b090 <__multadd>:
  80b090:	defffa04 	addi	sp,sp,-24
  80b094:	dc800215 	stw	r18,8(sp)
  80b098:	2c800417 	ldw	r18,16(r5)
  80b09c:	dd000415 	stw	r20,16(sp)
  80b0a0:	dcc00315 	stw	r19,12(sp)
  80b0a4:	dc000015 	stw	r16,0(sp)
  80b0a8:	dfc00515 	stw	ra,20(sp)
  80b0ac:	3821883a 	mov	r16,r7
  80b0b0:	dc400115 	stw	r17,4(sp)
  80b0b4:	2827883a 	mov	r19,r5
  80b0b8:	2029883a 	mov	r20,r4
  80b0bc:	2a000504 	addi	r8,r5,20
  80b0c0:	000f883a 	mov	r7,zero
  80b0c4:	40800017 	ldw	r2,0(r8)
  80b0c8:	39c00044 	addi	r7,r7,1
  80b0cc:	10ffffcc 	andi	r3,r2,65535
  80b0d0:	1987383a 	mul	r3,r3,r6
  80b0d4:	1004d43a 	srli	r2,r2,16
  80b0d8:	1c07883a 	add	r3,r3,r16
  80b0dc:	180ad43a 	srli	r5,r3,16
  80b0e0:	1185383a 	mul	r2,r2,r6
  80b0e4:	18ffffcc 	andi	r3,r3,65535
  80b0e8:	1145883a 	add	r2,r2,r5
  80b0ec:	1008943a 	slli	r4,r2,16
  80b0f0:	1020d43a 	srli	r16,r2,16
  80b0f4:	20c9883a 	add	r4,r4,r3
  80b0f8:	41000015 	stw	r4,0(r8)
  80b0fc:	42000104 	addi	r8,r8,4
  80b100:	3cbff016 	blt	r7,r18,80b0c4 <__multadd+0x34>
  80b104:	80000826 	beq	r16,zero,80b128 <__multadd+0x98>
  80b108:	98800217 	ldw	r2,8(r19)
  80b10c:	90800f0e 	bge	r18,r2,80b14c <__multadd+0xbc>
  80b110:	9485883a 	add	r2,r18,r18
  80b114:	1085883a 	add	r2,r2,r2
  80b118:	14c5883a 	add	r2,r2,r19
  80b11c:	90c00044 	addi	r3,r18,1
  80b120:	14000515 	stw	r16,20(r2)
  80b124:	98c00415 	stw	r3,16(r19)
  80b128:	9805883a 	mov	r2,r19
  80b12c:	dfc00517 	ldw	ra,20(sp)
  80b130:	dd000417 	ldw	r20,16(sp)
  80b134:	dcc00317 	ldw	r19,12(sp)
  80b138:	dc800217 	ldw	r18,8(sp)
  80b13c:	dc400117 	ldw	r17,4(sp)
  80b140:	dc000017 	ldw	r16,0(sp)
  80b144:	dec00604 	addi	sp,sp,24
  80b148:	f800283a 	ret
  80b14c:	99400117 	ldw	r5,4(r19)
  80b150:	a009883a 	mov	r4,r20
  80b154:	29400044 	addi	r5,r5,1
  80b158:	080a95c0 	call	80a95c <_Balloc>
  80b15c:	99800417 	ldw	r6,16(r19)
  80b160:	99400304 	addi	r5,r19,12
  80b164:	11000304 	addi	r4,r2,12
  80b168:	318d883a 	add	r6,r6,r6
  80b16c:	318d883a 	add	r6,r6,r6
  80b170:	31800204 	addi	r6,r6,8
  80b174:	1023883a 	mov	r17,r2
  80b178:	080a25c0 	call	80a25c <memcpy>
  80b17c:	980b883a 	mov	r5,r19
  80b180:	a009883a 	mov	r4,r20
  80b184:	080a3dc0 	call	80a3dc <_Bfree>
  80b188:	8827883a 	mov	r19,r17
  80b18c:	003fe006 	br	80b110 <__multadd+0x80>

0080b190 <__pow5mult>:
  80b190:	defffa04 	addi	sp,sp,-24
  80b194:	308000cc 	andi	r2,r6,3
  80b198:	dd000415 	stw	r20,16(sp)
  80b19c:	dcc00315 	stw	r19,12(sp)
  80b1a0:	dc000015 	stw	r16,0(sp)
  80b1a4:	dfc00515 	stw	ra,20(sp)
  80b1a8:	dc800215 	stw	r18,8(sp)
  80b1ac:	dc400115 	stw	r17,4(sp)
  80b1b0:	3021883a 	mov	r16,r6
  80b1b4:	2027883a 	mov	r19,r4
  80b1b8:	2829883a 	mov	r20,r5
  80b1bc:	10002b1e 	bne	r2,zero,80b26c <__pow5mult+0xdc>
  80b1c0:	8025d0ba 	srai	r18,r16,2
  80b1c4:	90001b26 	beq	r18,zero,80b234 <__pow5mult+0xa4>
  80b1c8:	9c001217 	ldw	r16,72(r19)
  80b1cc:	8000081e 	bne	r16,zero,80b1f0 <__pow5mult+0x60>
  80b1d0:	00003006 	br	80b294 <__pow5mult+0x104>
  80b1d4:	800b883a 	mov	r5,r16
  80b1d8:	800d883a 	mov	r6,r16
  80b1dc:	9809883a 	mov	r4,r19
  80b1e0:	90001426 	beq	r18,zero,80b234 <__pow5mult+0xa4>
  80b1e4:	80800017 	ldw	r2,0(r16)
  80b1e8:	10001b26 	beq	r2,zero,80b258 <__pow5mult+0xc8>
  80b1ec:	1021883a 	mov	r16,r2
  80b1f0:	9080004c 	andi	r2,r18,1
  80b1f4:	1005003a 	cmpeq	r2,r2,zero
  80b1f8:	9025d07a 	srai	r18,r18,1
  80b1fc:	800d883a 	mov	r6,r16
  80b200:	9809883a 	mov	r4,r19
  80b204:	a00b883a 	mov	r5,r20
  80b208:	103ff21e 	bne	r2,zero,80b1d4 <__pow5mult+0x44>
  80b20c:	080ae6c0 	call	80ae6c <__multiply>
  80b210:	a00b883a 	mov	r5,r20
  80b214:	9809883a 	mov	r4,r19
  80b218:	1023883a 	mov	r17,r2
  80b21c:	080a3dc0 	call	80a3dc <_Bfree>
  80b220:	8829883a 	mov	r20,r17
  80b224:	800b883a 	mov	r5,r16
  80b228:	800d883a 	mov	r6,r16
  80b22c:	9809883a 	mov	r4,r19
  80b230:	903fec1e 	bne	r18,zero,80b1e4 <__pow5mult+0x54>
  80b234:	a005883a 	mov	r2,r20
  80b238:	dfc00517 	ldw	ra,20(sp)
  80b23c:	dd000417 	ldw	r20,16(sp)
  80b240:	dcc00317 	ldw	r19,12(sp)
  80b244:	dc800217 	ldw	r18,8(sp)
  80b248:	dc400117 	ldw	r17,4(sp)
  80b24c:	dc000017 	ldw	r16,0(sp)
  80b250:	dec00604 	addi	sp,sp,24
  80b254:	f800283a 	ret
  80b258:	080ae6c0 	call	80ae6c <__multiply>
  80b25c:	80800015 	stw	r2,0(r16)
  80b260:	1021883a 	mov	r16,r2
  80b264:	10000015 	stw	zero,0(r2)
  80b268:	003fe106 	br	80b1f0 <__pow5mult+0x60>
  80b26c:	1085883a 	add	r2,r2,r2
  80b270:	00c02074 	movhi	r3,129
  80b274:	18ca2204 	addi	r3,r3,10376
  80b278:	1085883a 	add	r2,r2,r2
  80b27c:	10c5883a 	add	r2,r2,r3
  80b280:	11bfff17 	ldw	r6,-4(r2)
  80b284:	000f883a 	mov	r7,zero
  80b288:	080b0900 	call	80b090 <__multadd>
  80b28c:	1029883a 	mov	r20,r2
  80b290:	003fcb06 	br	80b1c0 <__pow5mult+0x30>
  80b294:	9809883a 	mov	r4,r19
  80b298:	01409c44 	movi	r5,625
  80b29c:	080b0540 	call	80b054 <__i2b>
  80b2a0:	98801215 	stw	r2,72(r19)
  80b2a4:	1021883a 	mov	r16,r2
  80b2a8:	10000015 	stw	zero,0(r2)
  80b2ac:	003fd006 	br	80b1f0 <__pow5mult+0x60>

0080b2b0 <__s2b>:
  80b2b0:	defff904 	addi	sp,sp,-28
  80b2b4:	dcc00315 	stw	r19,12(sp)
  80b2b8:	dc800215 	stw	r18,8(sp)
  80b2bc:	2827883a 	mov	r19,r5
  80b2c0:	2025883a 	mov	r18,r4
  80b2c4:	01400244 	movi	r5,9
  80b2c8:	39000204 	addi	r4,r7,8
  80b2cc:	dd000415 	stw	r20,16(sp)
  80b2d0:	dc400115 	stw	r17,4(sp)
  80b2d4:	dfc00615 	stw	ra,24(sp)
  80b2d8:	dd400515 	stw	r21,20(sp)
  80b2dc:	dc000015 	stw	r16,0(sp)
  80b2e0:	3829883a 	mov	r20,r7
  80b2e4:	3023883a 	mov	r17,r6
  80b2e8:	080de040 	call	80de04 <__divsi3>
  80b2ec:	00c00044 	movi	r3,1
  80b2f0:	1880350e 	bge	r3,r2,80b3c8 <__s2b+0x118>
  80b2f4:	000b883a 	mov	r5,zero
  80b2f8:	18c7883a 	add	r3,r3,r3
  80b2fc:	29400044 	addi	r5,r5,1
  80b300:	18bffd16 	blt	r3,r2,80b2f8 <__s2b+0x48>
  80b304:	9009883a 	mov	r4,r18
  80b308:	080a95c0 	call	80a95c <_Balloc>
  80b30c:	1011883a 	mov	r8,r2
  80b310:	d8800717 	ldw	r2,28(sp)
  80b314:	00c00044 	movi	r3,1
  80b318:	01800244 	movi	r6,9
  80b31c:	40800515 	stw	r2,20(r8)
  80b320:	40c00415 	stw	r3,16(r8)
  80b324:	3440260e 	bge	r6,r17,80b3c0 <__s2b+0x110>
  80b328:	3021883a 	mov	r16,r6
  80b32c:	99ab883a 	add	r21,r19,r6
  80b330:	9c05883a 	add	r2,r19,r16
  80b334:	11c00007 	ldb	r7,0(r2)
  80b338:	400b883a 	mov	r5,r8
  80b33c:	9009883a 	mov	r4,r18
  80b340:	39fff404 	addi	r7,r7,-48
  80b344:	01800284 	movi	r6,10
  80b348:	080b0900 	call	80b090 <__multadd>
  80b34c:	84000044 	addi	r16,r16,1
  80b350:	1011883a 	mov	r8,r2
  80b354:	8c3ff61e 	bne	r17,r16,80b330 <__s2b+0x80>
  80b358:	ac45883a 	add	r2,r21,r17
  80b35c:	117ffe04 	addi	r5,r2,-8
  80b360:	880d883a 	mov	r6,r17
  80b364:	35000c0e 	bge	r6,r20,80b398 <__s2b+0xe8>
  80b368:	a185c83a 	sub	r2,r20,r6
  80b36c:	2821883a 	mov	r16,r5
  80b370:	28a3883a 	add	r17,r5,r2
  80b374:	81c00007 	ldb	r7,0(r16)
  80b378:	400b883a 	mov	r5,r8
  80b37c:	9009883a 	mov	r4,r18
  80b380:	39fff404 	addi	r7,r7,-48
  80b384:	01800284 	movi	r6,10
  80b388:	080b0900 	call	80b090 <__multadd>
  80b38c:	84000044 	addi	r16,r16,1
  80b390:	1011883a 	mov	r8,r2
  80b394:	847ff71e 	bne	r16,r17,80b374 <__s2b+0xc4>
  80b398:	4005883a 	mov	r2,r8
  80b39c:	dfc00617 	ldw	ra,24(sp)
  80b3a0:	dd400517 	ldw	r21,20(sp)
  80b3a4:	dd000417 	ldw	r20,16(sp)
  80b3a8:	dcc00317 	ldw	r19,12(sp)
  80b3ac:	dc800217 	ldw	r18,8(sp)
  80b3b0:	dc400117 	ldw	r17,4(sp)
  80b3b4:	dc000017 	ldw	r16,0(sp)
  80b3b8:	dec00704 	addi	sp,sp,28
  80b3bc:	f800283a 	ret
  80b3c0:	99400284 	addi	r5,r19,10
  80b3c4:	003fe706 	br	80b364 <__s2b+0xb4>
  80b3c8:	000b883a 	mov	r5,zero
  80b3cc:	003fcd06 	br	80b304 <__s2b+0x54>

0080b3d0 <_realloc_r>:
  80b3d0:	defff404 	addi	sp,sp,-48
  80b3d4:	dd800815 	stw	r22,32(sp)
  80b3d8:	dc800415 	stw	r18,16(sp)
  80b3dc:	dc400315 	stw	r17,12(sp)
  80b3e0:	dfc00b15 	stw	ra,44(sp)
  80b3e4:	df000a15 	stw	fp,40(sp)
  80b3e8:	ddc00915 	stw	r23,36(sp)
  80b3ec:	dd400715 	stw	r21,28(sp)
  80b3f0:	dd000615 	stw	r20,24(sp)
  80b3f4:	dcc00515 	stw	r19,20(sp)
  80b3f8:	dc000215 	stw	r16,8(sp)
  80b3fc:	2825883a 	mov	r18,r5
  80b400:	3023883a 	mov	r17,r6
  80b404:	202d883a 	mov	r22,r4
  80b408:	2800c926 	beq	r5,zero,80b730 <_realloc_r+0x360>
  80b40c:	080ef640 	call	80ef64 <__malloc_lock>
  80b410:	943ffe04 	addi	r16,r18,-8
  80b414:	88c002c4 	addi	r3,r17,11
  80b418:	00800584 	movi	r2,22
  80b41c:	82000117 	ldw	r8,4(r16)
  80b420:	10c01b2e 	bgeu	r2,r3,80b490 <_realloc_r+0xc0>
  80b424:	00bffe04 	movi	r2,-8
  80b428:	188e703a 	and	r7,r3,r2
  80b42c:	3839883a 	mov	fp,r7
  80b430:	38001a16 	blt	r7,zero,80b49c <_realloc_r+0xcc>
  80b434:	e4401936 	bltu	fp,r17,80b49c <_realloc_r+0xcc>
  80b438:	013fff04 	movi	r4,-4
  80b43c:	4126703a 	and	r19,r8,r4
  80b440:	99c02616 	blt	r19,r7,80b4dc <_realloc_r+0x10c>
  80b444:	802b883a 	mov	r21,r16
  80b448:	9829883a 	mov	r20,r19
  80b44c:	84000204 	addi	r16,r16,8
  80b450:	a80f883a 	mov	r7,r21
  80b454:	a70dc83a 	sub	r6,r20,fp
  80b458:	008003c4 	movi	r2,15
  80b45c:	1180c136 	bltu	r2,r6,80b764 <_realloc_r+0x394>
  80b460:	38800117 	ldw	r2,4(r7)
  80b464:	a549883a 	add	r4,r20,r21
  80b468:	1080004c 	andi	r2,r2,1
  80b46c:	a084b03a 	or	r2,r20,r2
  80b470:	38800115 	stw	r2,4(r7)
  80b474:	20c00117 	ldw	r3,4(r4)
  80b478:	18c00054 	ori	r3,r3,1
  80b47c:	20c00115 	stw	r3,4(r4)
  80b480:	b009883a 	mov	r4,r22
  80b484:	080ef840 	call	80ef84 <__malloc_unlock>
  80b488:	8023883a 	mov	r17,r16
  80b48c:	00000606 	br	80b4a8 <_realloc_r+0xd8>
  80b490:	01c00404 	movi	r7,16
  80b494:	3839883a 	mov	fp,r7
  80b498:	e47fe72e 	bgeu	fp,r17,80b438 <_realloc_r+0x68>
  80b49c:	00800304 	movi	r2,12
  80b4a0:	0023883a 	mov	r17,zero
  80b4a4:	b0800015 	stw	r2,0(r22)
  80b4a8:	8805883a 	mov	r2,r17
  80b4ac:	dfc00b17 	ldw	ra,44(sp)
  80b4b0:	df000a17 	ldw	fp,40(sp)
  80b4b4:	ddc00917 	ldw	r23,36(sp)
  80b4b8:	dd800817 	ldw	r22,32(sp)
  80b4bc:	dd400717 	ldw	r21,28(sp)
  80b4c0:	dd000617 	ldw	r20,24(sp)
  80b4c4:	dcc00517 	ldw	r19,20(sp)
  80b4c8:	dc800417 	ldw	r18,16(sp)
  80b4cc:	dc400317 	ldw	r17,12(sp)
  80b4d0:	dc000217 	ldw	r16,8(sp)
  80b4d4:	dec00c04 	addi	sp,sp,48
  80b4d8:	f800283a 	ret
  80b4dc:	00802074 	movhi	r2,129
  80b4e0:	108a7804 	addi	r2,r2,10720
  80b4e4:	12400217 	ldw	r9,8(r2)
  80b4e8:	84cd883a 	add	r6,r16,r19
  80b4ec:	802b883a 	mov	r21,r16
  80b4f0:	3240b926 	beq	r6,r9,80b7d8 <_realloc_r+0x408>
  80b4f4:	31400117 	ldw	r5,4(r6)
  80b4f8:	00bfff84 	movi	r2,-2
  80b4fc:	2884703a 	and	r2,r5,r2
  80b500:	1185883a 	add	r2,r2,r6
  80b504:	10c00117 	ldw	r3,4(r2)
  80b508:	18c0004c 	andi	r3,r3,1
  80b50c:	1807003a 	cmpeq	r3,r3,zero
  80b510:	1800a326 	beq	r3,zero,80b7a0 <_realloc_r+0x3d0>
  80b514:	2908703a 	and	r4,r5,r4
  80b518:	9929883a 	add	r20,r19,r4
  80b51c:	a1c0a30e 	bge	r20,r7,80b7ac <_realloc_r+0x3dc>
  80b520:	4080004c 	andi	r2,r8,1
  80b524:	1000551e 	bne	r2,zero,80b67c <_realloc_r+0x2ac>
  80b528:	80800017 	ldw	r2,0(r16)
  80b52c:	80afc83a 	sub	r23,r16,r2
  80b530:	b8c00117 	ldw	r3,4(r23)
  80b534:	00bfff04 	movi	r2,-4
  80b538:	1884703a 	and	r2,r3,r2
  80b53c:	30002e26 	beq	r6,zero,80b5f8 <_realloc_r+0x228>
  80b540:	3240b926 	beq	r6,r9,80b828 <_realloc_r+0x458>
  80b544:	98a9883a 	add	r20,r19,r2
  80b548:	2509883a 	add	r4,r4,r20
  80b54c:	d9000015 	stw	r4,0(sp)
  80b550:	21c02a16 	blt	r4,r7,80b5fc <_realloc_r+0x22c>
  80b554:	30800317 	ldw	r2,12(r6)
  80b558:	30c00217 	ldw	r3,8(r6)
  80b55c:	01400904 	movi	r5,36
  80b560:	99bfff04 	addi	r6,r19,-4
  80b564:	18800315 	stw	r2,12(r3)
  80b568:	10c00215 	stw	r3,8(r2)
  80b56c:	b9000317 	ldw	r4,12(r23)
  80b570:	b8800217 	ldw	r2,8(r23)
  80b574:	b82b883a 	mov	r21,r23
  80b578:	bc000204 	addi	r16,r23,8
  80b57c:	20800215 	stw	r2,8(r4)
  80b580:	11000315 	stw	r4,12(r2)
  80b584:	2980e436 	bltu	r5,r6,80b918 <_realloc_r+0x548>
  80b588:	008004c4 	movi	r2,19
  80b58c:	9009883a 	mov	r4,r18
  80b590:	8011883a 	mov	r8,r16
  80b594:	11800f2e 	bgeu	r2,r6,80b5d4 <_realloc_r+0x204>
  80b598:	90800017 	ldw	r2,0(r18)
  80b59c:	ba000404 	addi	r8,r23,16
  80b5a0:	91000204 	addi	r4,r18,8
  80b5a4:	b8800215 	stw	r2,8(r23)
  80b5a8:	90c00117 	ldw	r3,4(r18)
  80b5ac:	008006c4 	movi	r2,27
  80b5b0:	b8c00315 	stw	r3,12(r23)
  80b5b4:	1180072e 	bgeu	r2,r6,80b5d4 <_realloc_r+0x204>
  80b5b8:	90c00217 	ldw	r3,8(r18)
  80b5bc:	ba000604 	addi	r8,r23,24
  80b5c0:	91000404 	addi	r4,r18,16
  80b5c4:	b8c00415 	stw	r3,16(r23)
  80b5c8:	90800317 	ldw	r2,12(r18)
  80b5cc:	b8800515 	stw	r2,20(r23)
  80b5d0:	3140e726 	beq	r6,r5,80b970 <_realloc_r+0x5a0>
  80b5d4:	20800017 	ldw	r2,0(r4)
  80b5d8:	dd000017 	ldw	r20,0(sp)
  80b5dc:	b80f883a 	mov	r7,r23
  80b5e0:	40800015 	stw	r2,0(r8)
  80b5e4:	20c00117 	ldw	r3,4(r4)
  80b5e8:	40c00115 	stw	r3,4(r8)
  80b5ec:	20800217 	ldw	r2,8(r4)
  80b5f0:	40800215 	stw	r2,8(r8)
  80b5f4:	003f9706 	br	80b454 <_realloc_r+0x84>
  80b5f8:	98a9883a 	add	r20,r19,r2
  80b5fc:	a1c01f16 	blt	r20,r7,80b67c <_realloc_r+0x2ac>
  80b600:	b8c00317 	ldw	r3,12(r23)
  80b604:	b8800217 	ldw	r2,8(r23)
  80b608:	99bfff04 	addi	r6,r19,-4
  80b60c:	01400904 	movi	r5,36
  80b610:	b82b883a 	mov	r21,r23
  80b614:	18800215 	stw	r2,8(r3)
  80b618:	10c00315 	stw	r3,12(r2)
  80b61c:	bc000204 	addi	r16,r23,8
  80b620:	2980c336 	bltu	r5,r6,80b930 <_realloc_r+0x560>
  80b624:	008004c4 	movi	r2,19
  80b628:	9009883a 	mov	r4,r18
  80b62c:	8011883a 	mov	r8,r16
  80b630:	11800f2e 	bgeu	r2,r6,80b670 <_realloc_r+0x2a0>
  80b634:	90800017 	ldw	r2,0(r18)
  80b638:	ba000404 	addi	r8,r23,16
  80b63c:	91000204 	addi	r4,r18,8
  80b640:	b8800215 	stw	r2,8(r23)
  80b644:	90c00117 	ldw	r3,4(r18)
  80b648:	008006c4 	movi	r2,27
  80b64c:	b8c00315 	stw	r3,12(r23)
  80b650:	1180072e 	bgeu	r2,r6,80b670 <_realloc_r+0x2a0>
  80b654:	90c00217 	ldw	r3,8(r18)
  80b658:	ba000604 	addi	r8,r23,24
  80b65c:	91000404 	addi	r4,r18,16
  80b660:	b8c00415 	stw	r3,16(r23)
  80b664:	90800317 	ldw	r2,12(r18)
  80b668:	b8800515 	stw	r2,20(r23)
  80b66c:	3140c726 	beq	r6,r5,80b98c <_realloc_r+0x5bc>
  80b670:	20800017 	ldw	r2,0(r4)
  80b674:	b80f883a 	mov	r7,r23
  80b678:	003fd906 	br	80b5e0 <_realloc_r+0x210>
  80b67c:	880b883a 	mov	r5,r17
  80b680:	b009883a 	mov	r4,r22
  80b684:	0804a2c0 	call	804a2c <_malloc_r>
  80b688:	1023883a 	mov	r17,r2
  80b68c:	10002526 	beq	r2,zero,80b724 <_realloc_r+0x354>
  80b690:	80800117 	ldw	r2,4(r16)
  80b694:	00ffff84 	movi	r3,-2
  80b698:	893ffe04 	addi	r4,r17,-8
  80b69c:	10c4703a 	and	r2,r2,r3
  80b6a0:	8085883a 	add	r2,r16,r2
  80b6a4:	20809526 	beq	r4,r2,80b8fc <_realloc_r+0x52c>
  80b6a8:	99bfff04 	addi	r6,r19,-4
  80b6ac:	01c00904 	movi	r7,36
  80b6b0:	39804536 	bltu	r7,r6,80b7c8 <_realloc_r+0x3f8>
  80b6b4:	008004c4 	movi	r2,19
  80b6b8:	9009883a 	mov	r4,r18
  80b6bc:	880b883a 	mov	r5,r17
  80b6c0:	11800f2e 	bgeu	r2,r6,80b700 <_realloc_r+0x330>
  80b6c4:	90800017 	ldw	r2,0(r18)
  80b6c8:	89400204 	addi	r5,r17,8
  80b6cc:	91000204 	addi	r4,r18,8
  80b6d0:	88800015 	stw	r2,0(r17)
  80b6d4:	90c00117 	ldw	r3,4(r18)
  80b6d8:	008006c4 	movi	r2,27
  80b6dc:	88c00115 	stw	r3,4(r17)
  80b6e0:	1180072e 	bgeu	r2,r6,80b700 <_realloc_r+0x330>
  80b6e4:	90c00217 	ldw	r3,8(r18)
  80b6e8:	89400404 	addi	r5,r17,16
  80b6ec:	91000404 	addi	r4,r18,16
  80b6f0:	88c00215 	stw	r3,8(r17)
  80b6f4:	90800317 	ldw	r2,12(r18)
  80b6f8:	88800315 	stw	r2,12(r17)
  80b6fc:	31c09126 	beq	r6,r7,80b944 <_realloc_r+0x574>
  80b700:	20800017 	ldw	r2,0(r4)
  80b704:	28800015 	stw	r2,0(r5)
  80b708:	20c00117 	ldw	r3,4(r4)
  80b70c:	28c00115 	stw	r3,4(r5)
  80b710:	20800217 	ldw	r2,8(r4)
  80b714:	28800215 	stw	r2,8(r5)
  80b718:	900b883a 	mov	r5,r18
  80b71c:	b009883a 	mov	r4,r22
  80b720:	08095f00 	call	8095f0 <_free_r>
  80b724:	b009883a 	mov	r4,r22
  80b728:	080ef840 	call	80ef84 <__malloc_unlock>
  80b72c:	003f5e06 	br	80b4a8 <_realloc_r+0xd8>
  80b730:	300b883a 	mov	r5,r6
  80b734:	dfc00b17 	ldw	ra,44(sp)
  80b738:	df000a17 	ldw	fp,40(sp)
  80b73c:	ddc00917 	ldw	r23,36(sp)
  80b740:	dd800817 	ldw	r22,32(sp)
  80b744:	dd400717 	ldw	r21,28(sp)
  80b748:	dd000617 	ldw	r20,24(sp)
  80b74c:	dcc00517 	ldw	r19,20(sp)
  80b750:	dc800417 	ldw	r18,16(sp)
  80b754:	dc400317 	ldw	r17,12(sp)
  80b758:	dc000217 	ldw	r16,8(sp)
  80b75c:	dec00c04 	addi	sp,sp,48
  80b760:	0804a2c1 	jmpi	804a2c <_malloc_r>
  80b764:	38800117 	ldw	r2,4(r7)
  80b768:	e54b883a 	add	r5,fp,r21
  80b76c:	31000054 	ori	r4,r6,1
  80b770:	1080004c 	andi	r2,r2,1
  80b774:	1704b03a 	or	r2,r2,fp
  80b778:	38800115 	stw	r2,4(r7)
  80b77c:	29000115 	stw	r4,4(r5)
  80b780:	2987883a 	add	r3,r5,r6
  80b784:	18800117 	ldw	r2,4(r3)
  80b788:	29400204 	addi	r5,r5,8
  80b78c:	b009883a 	mov	r4,r22
  80b790:	10800054 	ori	r2,r2,1
  80b794:	18800115 	stw	r2,4(r3)
  80b798:	08095f00 	call	8095f0 <_free_r>
  80b79c:	003f3806 	br	80b480 <_realloc_r+0xb0>
  80b7a0:	000d883a 	mov	r6,zero
  80b7a4:	0009883a 	mov	r4,zero
  80b7a8:	003f5d06 	br	80b520 <_realloc_r+0x150>
  80b7ac:	30c00217 	ldw	r3,8(r6)
  80b7b0:	30800317 	ldw	r2,12(r6)
  80b7b4:	800f883a 	mov	r7,r16
  80b7b8:	84000204 	addi	r16,r16,8
  80b7bc:	10c00215 	stw	r3,8(r2)
  80b7c0:	18800315 	stw	r2,12(r3)
  80b7c4:	003f2306 	br	80b454 <_realloc_r+0x84>
  80b7c8:	8809883a 	mov	r4,r17
  80b7cc:	900b883a 	mov	r5,r18
  80b7d0:	080a2fc0 	call	80a2fc <memmove>
  80b7d4:	003fd006 	br	80b718 <_realloc_r+0x348>
  80b7d8:	30800117 	ldw	r2,4(r6)
  80b7dc:	e0c00404 	addi	r3,fp,16
  80b7e0:	1108703a 	and	r4,r2,r4
  80b7e4:	9905883a 	add	r2,r19,r4
  80b7e8:	10ff4d16 	blt	r2,r3,80b520 <_realloc_r+0x150>
  80b7ec:	1705c83a 	sub	r2,r2,fp
  80b7f0:	870b883a 	add	r5,r16,fp
  80b7f4:	10800054 	ori	r2,r2,1
  80b7f8:	28800115 	stw	r2,4(r5)
  80b7fc:	80c00117 	ldw	r3,4(r16)
  80b800:	00802074 	movhi	r2,129
  80b804:	108a7804 	addi	r2,r2,10720
  80b808:	b009883a 	mov	r4,r22
  80b80c:	18c0004c 	andi	r3,r3,1
  80b810:	e0c6b03a 	or	r3,fp,r3
  80b814:	11400215 	stw	r5,8(r2)
  80b818:	80c00115 	stw	r3,4(r16)
  80b81c:	080ef840 	call	80ef84 <__malloc_unlock>
  80b820:	84400204 	addi	r17,r16,8
  80b824:	003f2006 	br	80b4a8 <_realloc_r+0xd8>
  80b828:	98a9883a 	add	r20,r19,r2
  80b82c:	2509883a 	add	r4,r4,r20
  80b830:	e0800404 	addi	r2,fp,16
  80b834:	d9000115 	stw	r4,4(sp)
  80b838:	20bf7016 	blt	r4,r2,80b5fc <_realloc_r+0x22c>
  80b83c:	b8c00317 	ldw	r3,12(r23)
  80b840:	b8800217 	ldw	r2,8(r23)
  80b844:	99bfff04 	addi	r6,r19,-4
  80b848:	01400904 	movi	r5,36
  80b84c:	18800215 	stw	r2,8(r3)
  80b850:	10c00315 	stw	r3,12(r2)
  80b854:	bc400204 	addi	r17,r23,8
  80b858:	29804136 	bltu	r5,r6,80b960 <_realloc_r+0x590>
  80b85c:	008004c4 	movi	r2,19
  80b860:	9009883a 	mov	r4,r18
  80b864:	880f883a 	mov	r7,r17
  80b868:	11800f2e 	bgeu	r2,r6,80b8a8 <_realloc_r+0x4d8>
  80b86c:	90800017 	ldw	r2,0(r18)
  80b870:	b9c00404 	addi	r7,r23,16
  80b874:	91000204 	addi	r4,r18,8
  80b878:	b8800215 	stw	r2,8(r23)
  80b87c:	90c00117 	ldw	r3,4(r18)
  80b880:	008006c4 	movi	r2,27
  80b884:	b8c00315 	stw	r3,12(r23)
  80b888:	1180072e 	bgeu	r2,r6,80b8a8 <_realloc_r+0x4d8>
  80b88c:	90c00217 	ldw	r3,8(r18)
  80b890:	b9c00604 	addi	r7,r23,24
  80b894:	91000404 	addi	r4,r18,16
  80b898:	b8c00415 	stw	r3,16(r23)
  80b89c:	90800317 	ldw	r2,12(r18)
  80b8a0:	b8800515 	stw	r2,20(r23)
  80b8a4:	31404026 	beq	r6,r5,80b9a8 <_realloc_r+0x5d8>
  80b8a8:	20800017 	ldw	r2,0(r4)
  80b8ac:	38800015 	stw	r2,0(r7)
  80b8b0:	20c00117 	ldw	r3,4(r4)
  80b8b4:	38c00115 	stw	r3,4(r7)
  80b8b8:	20800217 	ldw	r2,8(r4)
  80b8bc:	38800215 	stw	r2,8(r7)
  80b8c0:	d8c00117 	ldw	r3,4(sp)
  80b8c4:	bf0b883a 	add	r5,r23,fp
  80b8c8:	b009883a 	mov	r4,r22
  80b8cc:	1f05c83a 	sub	r2,r3,fp
  80b8d0:	10800054 	ori	r2,r2,1
  80b8d4:	28800115 	stw	r2,4(r5)
  80b8d8:	b8c00117 	ldw	r3,4(r23)
  80b8dc:	00802074 	movhi	r2,129
  80b8e0:	108a7804 	addi	r2,r2,10720
  80b8e4:	11400215 	stw	r5,8(r2)
  80b8e8:	18c0004c 	andi	r3,r3,1
  80b8ec:	e0c6b03a 	or	r3,fp,r3
  80b8f0:	b8c00115 	stw	r3,4(r23)
  80b8f4:	080ef840 	call	80ef84 <__malloc_unlock>
  80b8f8:	003eeb06 	br	80b4a8 <_realloc_r+0xd8>
  80b8fc:	20800117 	ldw	r2,4(r4)
  80b900:	00ffff04 	movi	r3,-4
  80b904:	800f883a 	mov	r7,r16
  80b908:	10c4703a 	and	r2,r2,r3
  80b90c:	98a9883a 	add	r20,r19,r2
  80b910:	84000204 	addi	r16,r16,8
  80b914:	003ecf06 	br	80b454 <_realloc_r+0x84>
  80b918:	900b883a 	mov	r5,r18
  80b91c:	8009883a 	mov	r4,r16
  80b920:	080a2fc0 	call	80a2fc <memmove>
  80b924:	dd000017 	ldw	r20,0(sp)
  80b928:	b80f883a 	mov	r7,r23
  80b92c:	003ec906 	br	80b454 <_realloc_r+0x84>
  80b930:	900b883a 	mov	r5,r18
  80b934:	8009883a 	mov	r4,r16
  80b938:	080a2fc0 	call	80a2fc <memmove>
  80b93c:	b80f883a 	mov	r7,r23
  80b940:	003ec406 	br	80b454 <_realloc_r+0x84>
  80b944:	90c00417 	ldw	r3,16(r18)
  80b948:	89400604 	addi	r5,r17,24
  80b94c:	91000604 	addi	r4,r18,24
  80b950:	88c00415 	stw	r3,16(r17)
  80b954:	90800517 	ldw	r2,20(r18)
  80b958:	88800515 	stw	r2,20(r17)
  80b95c:	003f6806 	br	80b700 <_realloc_r+0x330>
  80b960:	900b883a 	mov	r5,r18
  80b964:	8809883a 	mov	r4,r17
  80b968:	080a2fc0 	call	80a2fc <memmove>
  80b96c:	003fd406 	br	80b8c0 <_realloc_r+0x4f0>
  80b970:	90c00417 	ldw	r3,16(r18)
  80b974:	91000604 	addi	r4,r18,24
  80b978:	ba000804 	addi	r8,r23,32
  80b97c:	b8c00615 	stw	r3,24(r23)
  80b980:	90800517 	ldw	r2,20(r18)
  80b984:	b8800715 	stw	r2,28(r23)
  80b988:	003f1206 	br	80b5d4 <_realloc_r+0x204>
  80b98c:	90c00417 	ldw	r3,16(r18)
  80b990:	91000604 	addi	r4,r18,24
  80b994:	ba000804 	addi	r8,r23,32
  80b998:	b8c00615 	stw	r3,24(r23)
  80b99c:	90800517 	ldw	r2,20(r18)
  80b9a0:	b8800715 	stw	r2,28(r23)
  80b9a4:	003f3206 	br	80b670 <_realloc_r+0x2a0>
  80b9a8:	90c00417 	ldw	r3,16(r18)
  80b9ac:	91000604 	addi	r4,r18,24
  80b9b0:	b9c00804 	addi	r7,r23,32
  80b9b4:	b8c00615 	stw	r3,24(r23)
  80b9b8:	90800517 	ldw	r2,20(r18)
  80b9bc:	b8800715 	stw	r2,28(r23)
  80b9c0:	003fb906 	br	80b8a8 <_realloc_r+0x4d8>

0080b9c4 <__isinfd>:
  80b9c4:	200d883a 	mov	r6,r4
  80b9c8:	0109c83a 	sub	r4,zero,r4
  80b9cc:	2188b03a 	or	r4,r4,r6
  80b9d0:	2008d7fa 	srli	r4,r4,31
  80b9d4:	00a00034 	movhi	r2,32768
  80b9d8:	10bfffc4 	addi	r2,r2,-1
  80b9dc:	1144703a 	and	r2,r2,r5
  80b9e0:	2088b03a 	or	r4,r4,r2
  80b9e4:	009ffc34 	movhi	r2,32752
  80b9e8:	1105c83a 	sub	r2,r2,r4
  80b9ec:	0087c83a 	sub	r3,zero,r2
  80b9f0:	10c4b03a 	or	r2,r2,r3
  80b9f4:	1004d7fa 	srli	r2,r2,31
  80b9f8:	00c00044 	movi	r3,1
  80b9fc:	1885c83a 	sub	r2,r3,r2
  80ba00:	f800283a 	ret

0080ba04 <__isnand>:
  80ba04:	200d883a 	mov	r6,r4
  80ba08:	0109c83a 	sub	r4,zero,r4
  80ba0c:	2188b03a 	or	r4,r4,r6
  80ba10:	2008d7fa 	srli	r4,r4,31
  80ba14:	00a00034 	movhi	r2,32768
  80ba18:	10bfffc4 	addi	r2,r2,-1
  80ba1c:	1144703a 	and	r2,r2,r5
  80ba20:	2088b03a 	or	r4,r4,r2
  80ba24:	009ffc34 	movhi	r2,32752
  80ba28:	1105c83a 	sub	r2,r2,r4
  80ba2c:	1004d7fa 	srli	r2,r2,31
  80ba30:	f800283a 	ret

0080ba34 <__sclose>:
  80ba34:	2940038f 	ldh	r5,14(r5)
  80ba38:	080bd681 	jmpi	80bd68 <_close_r>

0080ba3c <__sseek>:
  80ba3c:	defffe04 	addi	sp,sp,-8
  80ba40:	dc000015 	stw	r16,0(sp)
  80ba44:	2821883a 	mov	r16,r5
  80ba48:	2940038f 	ldh	r5,14(r5)
  80ba4c:	dfc00115 	stw	ra,4(sp)
  80ba50:	080bfe00 	call	80bfe0 <_lseek_r>
  80ba54:	1007883a 	mov	r3,r2
  80ba58:	00bfffc4 	movi	r2,-1
  80ba5c:	18800926 	beq	r3,r2,80ba84 <__sseek+0x48>
  80ba60:	8080030b 	ldhu	r2,12(r16)
  80ba64:	80c01415 	stw	r3,80(r16)
  80ba68:	10840014 	ori	r2,r2,4096
  80ba6c:	8080030d 	sth	r2,12(r16)
  80ba70:	1805883a 	mov	r2,r3
  80ba74:	dfc00117 	ldw	ra,4(sp)
  80ba78:	dc000017 	ldw	r16,0(sp)
  80ba7c:	dec00204 	addi	sp,sp,8
  80ba80:	f800283a 	ret
  80ba84:	8080030b 	ldhu	r2,12(r16)
  80ba88:	10bbffcc 	andi	r2,r2,61439
  80ba8c:	8080030d 	sth	r2,12(r16)
  80ba90:	1805883a 	mov	r2,r3
  80ba94:	dfc00117 	ldw	ra,4(sp)
  80ba98:	dc000017 	ldw	r16,0(sp)
  80ba9c:	dec00204 	addi	sp,sp,8
  80baa0:	f800283a 	ret

0080baa4 <__swrite>:
  80baa4:	2880030b 	ldhu	r2,12(r5)
  80baa8:	defffb04 	addi	sp,sp,-20
  80baac:	dcc00315 	stw	r19,12(sp)
  80bab0:	1080400c 	andi	r2,r2,256
  80bab4:	dc800215 	stw	r18,8(sp)
  80bab8:	dc400115 	stw	r17,4(sp)
  80babc:	dc000015 	stw	r16,0(sp)
  80bac0:	3027883a 	mov	r19,r6
  80bac4:	3825883a 	mov	r18,r7
  80bac8:	dfc00415 	stw	ra,16(sp)
  80bacc:	2821883a 	mov	r16,r5
  80bad0:	000d883a 	mov	r6,zero
  80bad4:	01c00084 	movi	r7,2
  80bad8:	2023883a 	mov	r17,r4
  80badc:	10000226 	beq	r2,zero,80bae8 <__swrite+0x44>
  80bae0:	2940038f 	ldh	r5,14(r5)
  80bae4:	080bfe00 	call	80bfe0 <_lseek_r>
  80bae8:	8080030b 	ldhu	r2,12(r16)
  80baec:	8140038f 	ldh	r5,14(r16)
  80baf0:	8809883a 	mov	r4,r17
  80baf4:	10bbffcc 	andi	r2,r2,61439
  80baf8:	980d883a 	mov	r6,r19
  80bafc:	900f883a 	mov	r7,r18
  80bb00:	8080030d 	sth	r2,12(r16)
  80bb04:	dfc00417 	ldw	ra,16(sp)
  80bb08:	dcc00317 	ldw	r19,12(sp)
  80bb0c:	dc800217 	ldw	r18,8(sp)
  80bb10:	dc400117 	ldw	r17,4(sp)
  80bb14:	dc000017 	ldw	r16,0(sp)
  80bb18:	dec00504 	addi	sp,sp,20
  80bb1c:	080bc3c1 	jmpi	80bc3c <_write_r>

0080bb20 <__sread>:
  80bb20:	defffe04 	addi	sp,sp,-8
  80bb24:	dc000015 	stw	r16,0(sp)
  80bb28:	2821883a 	mov	r16,r5
  80bb2c:	2940038f 	ldh	r5,14(r5)
  80bb30:	dfc00115 	stw	ra,4(sp)
  80bb34:	080c0580 	call	80c058 <_read_r>
  80bb38:	1007883a 	mov	r3,r2
  80bb3c:	10000816 	blt	r2,zero,80bb60 <__sread+0x40>
  80bb40:	80801417 	ldw	r2,80(r16)
  80bb44:	10c5883a 	add	r2,r2,r3
  80bb48:	80801415 	stw	r2,80(r16)
  80bb4c:	1805883a 	mov	r2,r3
  80bb50:	dfc00117 	ldw	ra,4(sp)
  80bb54:	dc000017 	ldw	r16,0(sp)
  80bb58:	dec00204 	addi	sp,sp,8
  80bb5c:	f800283a 	ret
  80bb60:	8080030b 	ldhu	r2,12(r16)
  80bb64:	10bbffcc 	andi	r2,r2,61439
  80bb68:	8080030d 	sth	r2,12(r16)
  80bb6c:	1805883a 	mov	r2,r3
  80bb70:	dfc00117 	ldw	ra,4(sp)
  80bb74:	dc000017 	ldw	r16,0(sp)
  80bb78:	dec00204 	addi	sp,sp,8
  80bb7c:	f800283a 	ret

0080bb80 <strcmp>:
  80bb80:	2144b03a 	or	r2,r4,r5
  80bb84:	108000cc 	andi	r2,r2,3
  80bb88:	10001d1e 	bne	r2,zero,80bc00 <strcmp+0x80>
  80bb8c:	200f883a 	mov	r7,r4
  80bb90:	28800017 	ldw	r2,0(r5)
  80bb94:	21000017 	ldw	r4,0(r4)
  80bb98:	280d883a 	mov	r6,r5
  80bb9c:	2080161e 	bne	r4,r2,80bbf8 <strcmp+0x78>
  80bba0:	023fbff4 	movhi	r8,65279
  80bba4:	423fbfc4 	addi	r8,r8,-257
  80bba8:	2207883a 	add	r3,r4,r8
  80bbac:	01602074 	movhi	r5,32897
  80bbb0:	29602004 	addi	r5,r5,-32640
  80bbb4:	1946703a 	and	r3,r3,r5
  80bbb8:	0104303a 	nor	r2,zero,r4
  80bbbc:	10c4703a 	and	r2,r2,r3
  80bbc0:	10001c1e 	bne	r2,zero,80bc34 <strcmp+0xb4>
  80bbc4:	4013883a 	mov	r9,r8
  80bbc8:	2811883a 	mov	r8,r5
  80bbcc:	00000106 	br	80bbd4 <strcmp+0x54>
  80bbd0:	1800181e 	bne	r3,zero,80bc34 <strcmp+0xb4>
  80bbd4:	39c00104 	addi	r7,r7,4
  80bbd8:	39000017 	ldw	r4,0(r7)
  80bbdc:	31800104 	addi	r6,r6,4
  80bbe0:	31400017 	ldw	r5,0(r6)
  80bbe4:	2245883a 	add	r2,r4,r9
  80bbe8:	1204703a 	and	r2,r2,r8
  80bbec:	0106303a 	nor	r3,zero,r4
  80bbf0:	1886703a 	and	r3,r3,r2
  80bbf4:	217ff626 	beq	r4,r5,80bbd0 <strcmp+0x50>
  80bbf8:	3809883a 	mov	r4,r7
  80bbfc:	300b883a 	mov	r5,r6
  80bc00:	20c00007 	ldb	r3,0(r4)
  80bc04:	1800051e 	bne	r3,zero,80bc1c <strcmp+0x9c>
  80bc08:	00000606 	br	80bc24 <strcmp+0xa4>
  80bc0c:	21000044 	addi	r4,r4,1
  80bc10:	20c00007 	ldb	r3,0(r4)
  80bc14:	29400044 	addi	r5,r5,1
  80bc18:	18000226 	beq	r3,zero,80bc24 <strcmp+0xa4>
  80bc1c:	28800007 	ldb	r2,0(r5)
  80bc20:	18bffa26 	beq	r3,r2,80bc0c <strcmp+0x8c>
  80bc24:	20c00003 	ldbu	r3,0(r4)
  80bc28:	28800003 	ldbu	r2,0(r5)
  80bc2c:	1885c83a 	sub	r2,r3,r2
  80bc30:	f800283a 	ret
  80bc34:	0005883a 	mov	r2,zero
  80bc38:	f800283a 	ret

0080bc3c <_write_r>:
  80bc3c:	defffd04 	addi	sp,sp,-12
  80bc40:	dc000015 	stw	r16,0(sp)
  80bc44:	04002074 	movhi	r16,129
  80bc48:	8418f404 	addi	r16,r16,25552
  80bc4c:	dc400115 	stw	r17,4(sp)
  80bc50:	80000015 	stw	zero,0(r16)
  80bc54:	2023883a 	mov	r17,r4
  80bc58:	2809883a 	mov	r4,r5
  80bc5c:	300b883a 	mov	r5,r6
  80bc60:	380d883a 	mov	r6,r7
  80bc64:	dfc00215 	stw	ra,8(sp)
  80bc68:	080f2700 	call	80f270 <write>
  80bc6c:	1007883a 	mov	r3,r2
  80bc70:	00bfffc4 	movi	r2,-1
  80bc74:	18800626 	beq	r3,r2,80bc90 <_write_r+0x54>
  80bc78:	1805883a 	mov	r2,r3
  80bc7c:	dfc00217 	ldw	ra,8(sp)
  80bc80:	dc400117 	ldw	r17,4(sp)
  80bc84:	dc000017 	ldw	r16,0(sp)
  80bc88:	dec00304 	addi	sp,sp,12
  80bc8c:	f800283a 	ret
  80bc90:	80800017 	ldw	r2,0(r16)
  80bc94:	103ff826 	beq	r2,zero,80bc78 <_write_r+0x3c>
  80bc98:	88800015 	stw	r2,0(r17)
  80bc9c:	1805883a 	mov	r2,r3
  80bca0:	dfc00217 	ldw	ra,8(sp)
  80bca4:	dc400117 	ldw	r17,4(sp)
  80bca8:	dc000017 	ldw	r16,0(sp)
  80bcac:	dec00304 	addi	sp,sp,12
  80bcb0:	f800283a 	ret

0080bcb4 <_calloc_r>:
  80bcb4:	298b383a 	mul	r5,r5,r6
  80bcb8:	defffe04 	addi	sp,sp,-8
  80bcbc:	dc000015 	stw	r16,0(sp)
  80bcc0:	dfc00115 	stw	ra,4(sp)
  80bcc4:	0804a2c0 	call	804a2c <_malloc_r>
  80bcc8:	1021883a 	mov	r16,r2
  80bccc:	01c00904 	movi	r7,36
  80bcd0:	10000d26 	beq	r2,zero,80bd08 <_calloc_r+0x54>
  80bcd4:	10ffff17 	ldw	r3,-4(r2)
  80bcd8:	1009883a 	mov	r4,r2
  80bcdc:	00bfff04 	movi	r2,-4
  80bce0:	1886703a 	and	r3,r3,r2
  80bce4:	1887883a 	add	r3,r3,r2
  80bce8:	180d883a 	mov	r6,r3
  80bcec:	000b883a 	mov	r5,zero
  80bcf0:	38c01736 	bltu	r7,r3,80bd50 <_calloc_r+0x9c>
  80bcf4:	008004c4 	movi	r2,19
  80bcf8:	10c00836 	bltu	r2,r3,80bd1c <_calloc_r+0x68>
  80bcfc:	20000215 	stw	zero,8(r4)
  80bd00:	20000015 	stw	zero,0(r4)
  80bd04:	20000115 	stw	zero,4(r4)
  80bd08:	8005883a 	mov	r2,r16
  80bd0c:	dfc00117 	ldw	ra,4(sp)
  80bd10:	dc000017 	ldw	r16,0(sp)
  80bd14:	dec00204 	addi	sp,sp,8
  80bd18:	f800283a 	ret
  80bd1c:	008006c4 	movi	r2,27
  80bd20:	80000015 	stw	zero,0(r16)
  80bd24:	80000115 	stw	zero,4(r16)
  80bd28:	81000204 	addi	r4,r16,8
  80bd2c:	10fff32e 	bgeu	r2,r3,80bcfc <_calloc_r+0x48>
  80bd30:	80000215 	stw	zero,8(r16)
  80bd34:	80000315 	stw	zero,12(r16)
  80bd38:	81000404 	addi	r4,r16,16
  80bd3c:	19ffef1e 	bne	r3,r7,80bcfc <_calloc_r+0x48>
  80bd40:	81000604 	addi	r4,r16,24
  80bd44:	80000415 	stw	zero,16(r16)
  80bd48:	80000515 	stw	zero,20(r16)
  80bd4c:	003feb06 	br	80bcfc <_calloc_r+0x48>
  80bd50:	080516c0 	call	80516c <memset>
  80bd54:	8005883a 	mov	r2,r16
  80bd58:	dfc00117 	ldw	ra,4(sp)
  80bd5c:	dc000017 	ldw	r16,0(sp)
  80bd60:	dec00204 	addi	sp,sp,8
  80bd64:	f800283a 	ret

0080bd68 <_close_r>:
  80bd68:	defffd04 	addi	sp,sp,-12
  80bd6c:	dc000015 	stw	r16,0(sp)
  80bd70:	04002074 	movhi	r16,129
  80bd74:	8418f404 	addi	r16,r16,25552
  80bd78:	dc400115 	stw	r17,4(sp)
  80bd7c:	80000015 	stw	zero,0(r16)
  80bd80:	2023883a 	mov	r17,r4
  80bd84:	2809883a 	mov	r4,r5
  80bd88:	dfc00215 	stw	ra,8(sp)
  80bd8c:	080e5000 	call	80e500 <close>
  80bd90:	1007883a 	mov	r3,r2
  80bd94:	00bfffc4 	movi	r2,-1
  80bd98:	18800626 	beq	r3,r2,80bdb4 <_close_r+0x4c>
  80bd9c:	1805883a 	mov	r2,r3
  80bda0:	dfc00217 	ldw	ra,8(sp)
  80bda4:	dc400117 	ldw	r17,4(sp)
  80bda8:	dc000017 	ldw	r16,0(sp)
  80bdac:	dec00304 	addi	sp,sp,12
  80bdb0:	f800283a 	ret
  80bdb4:	80800017 	ldw	r2,0(r16)
  80bdb8:	103ff826 	beq	r2,zero,80bd9c <_close_r+0x34>
  80bdbc:	88800015 	stw	r2,0(r17)
  80bdc0:	1805883a 	mov	r2,r3
  80bdc4:	dfc00217 	ldw	ra,8(sp)
  80bdc8:	dc400117 	ldw	r17,4(sp)
  80bdcc:	dc000017 	ldw	r16,0(sp)
  80bdd0:	dec00304 	addi	sp,sp,12
  80bdd4:	f800283a 	ret

0080bdd8 <_fclose_r>:
  80bdd8:	defffc04 	addi	sp,sp,-16
  80bddc:	dc400115 	stw	r17,4(sp)
  80bde0:	dc000015 	stw	r16,0(sp)
  80bde4:	dfc00315 	stw	ra,12(sp)
  80bde8:	dc800215 	stw	r18,8(sp)
  80bdec:	2821883a 	mov	r16,r5
  80bdf0:	2023883a 	mov	r17,r4
  80bdf4:	28002926 	beq	r5,zero,80be9c <_fclose_r+0xc4>
  80bdf8:	080925c0 	call	80925c <__sfp_lock_acquire>
  80bdfc:	88000226 	beq	r17,zero,80be08 <_fclose_r+0x30>
  80be00:	88800e17 	ldw	r2,56(r17)
  80be04:	10002d26 	beq	r2,zero,80bebc <_fclose_r+0xe4>
  80be08:	8080030f 	ldh	r2,12(r16)
  80be0c:	10002226 	beq	r2,zero,80be98 <_fclose_r+0xc0>
  80be10:	8809883a 	mov	r4,r17
  80be14:	800b883a 	mov	r5,r16
  80be18:	0808fd40 	call	808fd4 <_fflush_r>
  80be1c:	1025883a 	mov	r18,r2
  80be20:	80800b17 	ldw	r2,44(r16)
  80be24:	10000426 	beq	r2,zero,80be38 <_fclose_r+0x60>
  80be28:	81400717 	ldw	r5,28(r16)
  80be2c:	8809883a 	mov	r4,r17
  80be30:	103ee83a 	callr	r2
  80be34:	10002a16 	blt	r2,zero,80bee0 <_fclose_r+0x108>
  80be38:	8080030b 	ldhu	r2,12(r16)
  80be3c:	1080200c 	andi	r2,r2,128
  80be40:	1000231e 	bne	r2,zero,80bed0 <_fclose_r+0xf8>
  80be44:	81400c17 	ldw	r5,48(r16)
  80be48:	28000526 	beq	r5,zero,80be60 <_fclose_r+0x88>
  80be4c:	80801004 	addi	r2,r16,64
  80be50:	28800226 	beq	r5,r2,80be5c <_fclose_r+0x84>
  80be54:	8809883a 	mov	r4,r17
  80be58:	08095f00 	call	8095f0 <_free_r>
  80be5c:	80000c15 	stw	zero,48(r16)
  80be60:	81401117 	ldw	r5,68(r16)
  80be64:	28000326 	beq	r5,zero,80be74 <_fclose_r+0x9c>
  80be68:	8809883a 	mov	r4,r17
  80be6c:	08095f00 	call	8095f0 <_free_r>
  80be70:	80001115 	stw	zero,68(r16)
  80be74:	8000030d 	sth	zero,12(r16)
  80be78:	08092600 	call	809260 <__sfp_lock_release>
  80be7c:	9005883a 	mov	r2,r18
  80be80:	dfc00317 	ldw	ra,12(sp)
  80be84:	dc800217 	ldw	r18,8(sp)
  80be88:	dc400117 	ldw	r17,4(sp)
  80be8c:	dc000017 	ldw	r16,0(sp)
  80be90:	dec00404 	addi	sp,sp,16
  80be94:	f800283a 	ret
  80be98:	08092600 	call	809260 <__sfp_lock_release>
  80be9c:	0025883a 	mov	r18,zero
  80bea0:	9005883a 	mov	r2,r18
  80bea4:	dfc00317 	ldw	ra,12(sp)
  80bea8:	dc800217 	ldw	r18,8(sp)
  80beac:	dc400117 	ldw	r17,4(sp)
  80beb0:	dc000017 	ldw	r16,0(sp)
  80beb4:	dec00404 	addi	sp,sp,16
  80beb8:	f800283a 	ret
  80bebc:	8809883a 	mov	r4,r17
  80bec0:	080926c0 	call	80926c <__sinit>
  80bec4:	8080030f 	ldh	r2,12(r16)
  80bec8:	103fd11e 	bne	r2,zero,80be10 <_fclose_r+0x38>
  80becc:	003ff206 	br	80be98 <_fclose_r+0xc0>
  80bed0:	81400417 	ldw	r5,16(r16)
  80bed4:	8809883a 	mov	r4,r17
  80bed8:	08095f00 	call	8095f0 <_free_r>
  80bedc:	003fd906 	br	80be44 <_fclose_r+0x6c>
  80bee0:	04bfffc4 	movi	r18,-1
  80bee4:	003fd406 	br	80be38 <_fclose_r+0x60>

0080bee8 <fclose>:
  80bee8:	00802074 	movhi	r2,129
  80beec:	1091a404 	addi	r2,r2,18064
  80bef0:	200b883a 	mov	r5,r4
  80bef4:	11000017 	ldw	r4,0(r2)
  80bef8:	080bdd81 	jmpi	80bdd8 <_fclose_r>

0080befc <_fstat_r>:
  80befc:	defffd04 	addi	sp,sp,-12
  80bf00:	dc000015 	stw	r16,0(sp)
  80bf04:	04002074 	movhi	r16,129
  80bf08:	8418f404 	addi	r16,r16,25552
  80bf0c:	dc400115 	stw	r17,4(sp)
  80bf10:	80000015 	stw	zero,0(r16)
  80bf14:	2023883a 	mov	r17,r4
  80bf18:	2809883a 	mov	r4,r5
  80bf1c:	300b883a 	mov	r5,r6
  80bf20:	dfc00215 	stw	ra,8(sp)
  80bf24:	080e6e80 	call	80e6e8 <fstat>
  80bf28:	1007883a 	mov	r3,r2
  80bf2c:	00bfffc4 	movi	r2,-1
  80bf30:	18800626 	beq	r3,r2,80bf4c <_fstat_r+0x50>
  80bf34:	1805883a 	mov	r2,r3
  80bf38:	dfc00217 	ldw	ra,8(sp)
  80bf3c:	dc400117 	ldw	r17,4(sp)
  80bf40:	dc000017 	ldw	r16,0(sp)
  80bf44:	dec00304 	addi	sp,sp,12
  80bf48:	f800283a 	ret
  80bf4c:	80800017 	ldw	r2,0(r16)
  80bf50:	103ff826 	beq	r2,zero,80bf34 <_fstat_r+0x38>
  80bf54:	88800015 	stw	r2,0(r17)
  80bf58:	1805883a 	mov	r2,r3
  80bf5c:	dfc00217 	ldw	ra,8(sp)
  80bf60:	dc400117 	ldw	r17,4(sp)
  80bf64:	dc000017 	ldw	r16,0(sp)
  80bf68:	dec00304 	addi	sp,sp,12
  80bf6c:	f800283a 	ret

0080bf70 <_isatty_r>:
  80bf70:	defffd04 	addi	sp,sp,-12
  80bf74:	dc000015 	stw	r16,0(sp)
  80bf78:	04002074 	movhi	r16,129
  80bf7c:	8418f404 	addi	r16,r16,25552
  80bf80:	dc400115 	stw	r17,4(sp)
  80bf84:	80000015 	stw	zero,0(r16)
  80bf88:	2023883a 	mov	r17,r4
  80bf8c:	2809883a 	mov	r4,r5
  80bf90:	dfc00215 	stw	ra,8(sp)
  80bf94:	080e9fc0 	call	80e9fc <isatty>
  80bf98:	1007883a 	mov	r3,r2
  80bf9c:	00bfffc4 	movi	r2,-1
  80bfa0:	18800626 	beq	r3,r2,80bfbc <_isatty_r+0x4c>
  80bfa4:	1805883a 	mov	r2,r3
  80bfa8:	dfc00217 	ldw	ra,8(sp)
  80bfac:	dc400117 	ldw	r17,4(sp)
  80bfb0:	dc000017 	ldw	r16,0(sp)
  80bfb4:	dec00304 	addi	sp,sp,12
  80bfb8:	f800283a 	ret
  80bfbc:	80800017 	ldw	r2,0(r16)
  80bfc0:	103ff826 	beq	r2,zero,80bfa4 <_isatty_r+0x34>
  80bfc4:	88800015 	stw	r2,0(r17)
  80bfc8:	1805883a 	mov	r2,r3
  80bfcc:	dfc00217 	ldw	ra,8(sp)
  80bfd0:	dc400117 	ldw	r17,4(sp)
  80bfd4:	dc000017 	ldw	r16,0(sp)
  80bfd8:	dec00304 	addi	sp,sp,12
  80bfdc:	f800283a 	ret

0080bfe0 <_lseek_r>:
  80bfe0:	defffd04 	addi	sp,sp,-12
  80bfe4:	dc000015 	stw	r16,0(sp)
  80bfe8:	04002074 	movhi	r16,129
  80bfec:	8418f404 	addi	r16,r16,25552
  80bff0:	dc400115 	stw	r17,4(sp)
  80bff4:	80000015 	stw	zero,0(r16)
  80bff8:	2023883a 	mov	r17,r4
  80bffc:	2809883a 	mov	r4,r5
  80c000:	300b883a 	mov	r5,r6
  80c004:	380d883a 	mov	r6,r7
  80c008:	dfc00215 	stw	ra,8(sp)
  80c00c:	080eda80 	call	80eda8 <lseek>
  80c010:	1007883a 	mov	r3,r2
  80c014:	00bfffc4 	movi	r2,-1
  80c018:	18800626 	beq	r3,r2,80c034 <_lseek_r+0x54>
  80c01c:	1805883a 	mov	r2,r3
  80c020:	dfc00217 	ldw	ra,8(sp)
  80c024:	dc400117 	ldw	r17,4(sp)
  80c028:	dc000017 	ldw	r16,0(sp)
  80c02c:	dec00304 	addi	sp,sp,12
  80c030:	f800283a 	ret
  80c034:	80800017 	ldw	r2,0(r16)
  80c038:	103ff826 	beq	r2,zero,80c01c <_lseek_r+0x3c>
  80c03c:	88800015 	stw	r2,0(r17)
  80c040:	1805883a 	mov	r2,r3
  80c044:	dfc00217 	ldw	ra,8(sp)
  80c048:	dc400117 	ldw	r17,4(sp)
  80c04c:	dc000017 	ldw	r16,0(sp)
  80c050:	dec00304 	addi	sp,sp,12
  80c054:	f800283a 	ret

0080c058 <_read_r>:
  80c058:	defffd04 	addi	sp,sp,-12
  80c05c:	dc000015 	stw	r16,0(sp)
  80c060:	04002074 	movhi	r16,129
  80c064:	8418f404 	addi	r16,r16,25552
  80c068:	dc400115 	stw	r17,4(sp)
  80c06c:	80000015 	stw	zero,0(r16)
  80c070:	2023883a 	mov	r17,r4
  80c074:	2809883a 	mov	r4,r5
  80c078:	300b883a 	mov	r5,r6
  80c07c:	380d883a 	mov	r6,r7
  80c080:	dfc00215 	stw	ra,8(sp)
  80c084:	080efa40 	call	80efa4 <read>
  80c088:	1007883a 	mov	r3,r2
  80c08c:	00bfffc4 	movi	r2,-1
  80c090:	18800626 	beq	r3,r2,80c0ac <_read_r+0x54>
  80c094:	1805883a 	mov	r2,r3
  80c098:	dfc00217 	ldw	ra,8(sp)
  80c09c:	dc400117 	ldw	r17,4(sp)
  80c0a0:	dc000017 	ldw	r16,0(sp)
  80c0a4:	dec00304 	addi	sp,sp,12
  80c0a8:	f800283a 	ret
  80c0ac:	80800017 	ldw	r2,0(r16)
  80c0b0:	103ff826 	beq	r2,zero,80c094 <_read_r+0x3c>
  80c0b4:	88800015 	stw	r2,0(r17)
  80c0b8:	1805883a 	mov	r2,r3
  80c0bc:	dfc00217 	ldw	ra,8(sp)
  80c0c0:	dc400117 	ldw	r17,4(sp)
  80c0c4:	dc000017 	ldw	r16,0(sp)
  80c0c8:	dec00304 	addi	sp,sp,12
  80c0cc:	f800283a 	ret

0080c0d0 <__udivdi3>:
  80c0d0:	defff004 	addi	sp,sp,-64
  80c0d4:	2005883a 	mov	r2,r4
  80c0d8:	3011883a 	mov	r8,r6
  80c0dc:	df000e15 	stw	fp,56(sp)
  80c0e0:	dd000a15 	stw	r20,40(sp)
  80c0e4:	dc000615 	stw	r16,24(sp)
  80c0e8:	dfc00f15 	stw	ra,60(sp)
  80c0ec:	ddc00d15 	stw	r23,52(sp)
  80c0f0:	dd800c15 	stw	r22,48(sp)
  80c0f4:	dd400b15 	stw	r21,44(sp)
  80c0f8:	dcc00915 	stw	r19,36(sp)
  80c0fc:	dc800815 	stw	r18,32(sp)
  80c100:	dc400715 	stw	r17,28(sp)
  80c104:	4021883a 	mov	r16,r8
  80c108:	1039883a 	mov	fp,r2
  80c10c:	2829883a 	mov	r20,r5
  80c110:	38003b1e 	bne	r7,zero,80c200 <__udivdi3+0x130>
  80c114:	2a005c36 	bltu	r5,r8,80c288 <__udivdi3+0x1b8>
  80c118:	4000a626 	beq	r8,zero,80c3b4 <__udivdi3+0x2e4>
  80c11c:	00bfffd4 	movui	r2,65535
  80c120:	14009e36 	bltu	r2,r16,80c39c <__udivdi3+0x2cc>
  80c124:	00803fc4 	movi	r2,255
  80c128:	14013d36 	bltu	r2,r16,80c620 <__udivdi3+0x550>
  80c12c:	000b883a 	mov	r5,zero
  80c130:	0005883a 	mov	r2,zero
  80c134:	8084d83a 	srl	r2,r16,r2
  80c138:	01002074 	movhi	r4,129
  80c13c:	210a2a04 	addi	r4,r4,10408
  80c140:	01800804 	movi	r6,32
  80c144:	1105883a 	add	r2,r2,r4
  80c148:	10c00003 	ldbu	r3,0(r2)
  80c14c:	28c7883a 	add	r3,r5,r3
  80c150:	30edc83a 	sub	r22,r6,r3
  80c154:	b000ee1e 	bne	r22,zero,80c510 <__udivdi3+0x440>
  80c158:	802ad43a 	srli	r21,r16,16
  80c15c:	00800044 	movi	r2,1
  80c160:	a423c83a 	sub	r17,r20,r16
  80c164:	85ffffcc 	andi	r23,r16,65535
  80c168:	d8800315 	stw	r2,12(sp)
  80c16c:	8809883a 	mov	r4,r17
  80c170:	a80b883a 	mov	r5,r21
  80c174:	080dec40 	call	80dec4 <__udivsi3>
  80c178:	8809883a 	mov	r4,r17
  80c17c:	a80b883a 	mov	r5,r21
  80c180:	102d883a 	mov	r22,r2
  80c184:	080decc0 	call	80decc <__umodsi3>
  80c188:	1004943a 	slli	r2,r2,16
  80c18c:	e006d43a 	srli	r3,fp,16
  80c190:	bda3383a 	mul	r17,r23,r22
  80c194:	10c4b03a 	or	r2,r2,r3
  80c198:	1440042e 	bgeu	r2,r17,80c1ac <__udivdi3+0xdc>
  80c19c:	1405883a 	add	r2,r2,r16
  80c1a0:	b5bfffc4 	addi	r22,r22,-1
  80c1a4:	14000136 	bltu	r2,r16,80c1ac <__udivdi3+0xdc>
  80c1a8:	14413d36 	bltu	r2,r17,80c6a0 <__udivdi3+0x5d0>
  80c1ac:	1463c83a 	sub	r17,r2,r17
  80c1b0:	8809883a 	mov	r4,r17
  80c1b4:	a80b883a 	mov	r5,r21
  80c1b8:	080dec40 	call	80dec4 <__udivsi3>
  80c1bc:	8809883a 	mov	r4,r17
  80c1c0:	a80b883a 	mov	r5,r21
  80c1c4:	1029883a 	mov	r20,r2
  80c1c8:	080decc0 	call	80decc <__umodsi3>
  80c1cc:	1004943a 	slli	r2,r2,16
  80c1d0:	bd09383a 	mul	r4,r23,r20
  80c1d4:	e0ffffcc 	andi	r3,fp,65535
  80c1d8:	10c4b03a 	or	r2,r2,r3
  80c1dc:	1100042e 	bgeu	r2,r4,80c1f0 <__udivdi3+0x120>
  80c1e0:	8085883a 	add	r2,r16,r2
  80c1e4:	a53fffc4 	addi	r20,r20,-1
  80c1e8:	14000136 	bltu	r2,r16,80c1f0 <__udivdi3+0x120>
  80c1ec:	11012036 	bltu	r2,r4,80c670 <__udivdi3+0x5a0>
  80c1f0:	b004943a 	slli	r2,r22,16
  80c1f4:	d9000317 	ldw	r4,12(sp)
  80c1f8:	a084b03a 	or	r2,r20,r2
  80c1fc:	00001506 	br	80c254 <__udivdi3+0x184>
  80c200:	380d883a 	mov	r6,r7
  80c204:	29c06236 	bltu	r5,r7,80c390 <__udivdi3+0x2c0>
  80c208:	00bfffd4 	movui	r2,65535
  80c20c:	11c05a36 	bltu	r2,r7,80c378 <__udivdi3+0x2a8>
  80c210:	00803fc4 	movi	r2,255
  80c214:	11c0fc36 	bltu	r2,r7,80c608 <__udivdi3+0x538>
  80c218:	000b883a 	mov	r5,zero
  80c21c:	0005883a 	mov	r2,zero
  80c220:	3084d83a 	srl	r2,r6,r2
  80c224:	01002074 	movhi	r4,129
  80c228:	210a2a04 	addi	r4,r4,10408
  80c22c:	01c00804 	movi	r7,32
  80c230:	1105883a 	add	r2,r2,r4
  80c234:	10c00003 	ldbu	r3,0(r2)
  80c238:	28c7883a 	add	r3,r5,r3
  80c23c:	38efc83a 	sub	r23,r7,r3
  80c240:	b800691e 	bne	r23,zero,80c3e8 <__udivdi3+0x318>
  80c244:	35000136 	bltu	r6,r20,80c24c <__udivdi3+0x17c>
  80c248:	e4005136 	bltu	fp,r16,80c390 <__udivdi3+0x2c0>
  80c24c:	00800044 	movi	r2,1
  80c250:	0009883a 	mov	r4,zero
  80c254:	2007883a 	mov	r3,r4
  80c258:	dfc00f17 	ldw	ra,60(sp)
  80c25c:	df000e17 	ldw	fp,56(sp)
  80c260:	ddc00d17 	ldw	r23,52(sp)
  80c264:	dd800c17 	ldw	r22,48(sp)
  80c268:	dd400b17 	ldw	r21,44(sp)
  80c26c:	dd000a17 	ldw	r20,40(sp)
  80c270:	dcc00917 	ldw	r19,36(sp)
  80c274:	dc800817 	ldw	r18,32(sp)
  80c278:	dc400717 	ldw	r17,28(sp)
  80c27c:	dc000617 	ldw	r16,24(sp)
  80c280:	dec01004 	addi	sp,sp,64
  80c284:	f800283a 	ret
  80c288:	00bfffd4 	movui	r2,65535
  80c28c:	12005036 	bltu	r2,r8,80c3d0 <__udivdi3+0x300>
  80c290:	00803fc4 	movi	r2,255
  80c294:	1200e836 	bltu	r2,r8,80c638 <__udivdi3+0x568>
  80c298:	000b883a 	mov	r5,zero
  80c29c:	0005883a 	mov	r2,zero
  80c2a0:	8084d83a 	srl	r2,r16,r2
  80c2a4:	01002074 	movhi	r4,129
  80c2a8:	210a2a04 	addi	r4,r4,10408
  80c2ac:	01800804 	movi	r6,32
  80c2b0:	1105883a 	add	r2,r2,r4
  80c2b4:	10c00003 	ldbu	r3,0(r2)
  80c2b8:	28c7883a 	add	r3,r5,r3
  80c2bc:	30cbc83a 	sub	r5,r6,r3
  80c2c0:	28000626 	beq	r5,zero,80c2dc <__udivdi3+0x20c>
  80c2c4:	3145c83a 	sub	r2,r6,r5
  80c2c8:	e084d83a 	srl	r2,fp,r2
  80c2cc:	a146983a 	sll	r3,r20,r5
  80c2d0:	e178983a 	sll	fp,fp,r5
  80c2d4:	8160983a 	sll	r16,r16,r5
  80c2d8:	18a8b03a 	or	r20,r3,r2
  80c2dc:	802ad43a 	srli	r21,r16,16
  80c2e0:	a009883a 	mov	r4,r20
  80c2e4:	85ffffcc 	andi	r23,r16,65535
  80c2e8:	a80b883a 	mov	r5,r21
  80c2ec:	080dec40 	call	80dec4 <__udivsi3>
  80c2f0:	a009883a 	mov	r4,r20
  80c2f4:	a80b883a 	mov	r5,r21
  80c2f8:	102d883a 	mov	r22,r2
  80c2fc:	080decc0 	call	80decc <__umodsi3>
  80c300:	1004943a 	slli	r2,r2,16
  80c304:	e006d43a 	srli	r3,fp,16
  80c308:	bda3383a 	mul	r17,r23,r22
  80c30c:	10c4b03a 	or	r2,r2,r3
  80c310:	1440042e 	bgeu	r2,r17,80c324 <__udivdi3+0x254>
  80c314:	1405883a 	add	r2,r2,r16
  80c318:	b5bfffc4 	addi	r22,r22,-1
  80c31c:	14000136 	bltu	r2,r16,80c324 <__udivdi3+0x254>
  80c320:	1440d536 	bltu	r2,r17,80c678 <__udivdi3+0x5a8>
  80c324:	1463c83a 	sub	r17,r2,r17
  80c328:	8809883a 	mov	r4,r17
  80c32c:	a80b883a 	mov	r5,r21
  80c330:	080dec40 	call	80dec4 <__udivsi3>
  80c334:	8809883a 	mov	r4,r17
  80c338:	a80b883a 	mov	r5,r21
  80c33c:	1029883a 	mov	r20,r2
  80c340:	080decc0 	call	80decc <__umodsi3>
  80c344:	1004943a 	slli	r2,r2,16
  80c348:	bd09383a 	mul	r4,r23,r20
  80c34c:	e0ffffcc 	andi	r3,fp,65535
  80c350:	10c4b03a 	or	r2,r2,r3
  80c354:	1100042e 	bgeu	r2,r4,80c368 <__udivdi3+0x298>
  80c358:	8085883a 	add	r2,r16,r2
  80c35c:	a53fffc4 	addi	r20,r20,-1
  80c360:	14000136 	bltu	r2,r16,80c368 <__udivdi3+0x298>
  80c364:	1100c736 	bltu	r2,r4,80c684 <__udivdi3+0x5b4>
  80c368:	b004943a 	slli	r2,r22,16
  80c36c:	0009883a 	mov	r4,zero
  80c370:	a084b03a 	or	r2,r20,r2
  80c374:	003fb706 	br	80c254 <__udivdi3+0x184>
  80c378:	00804034 	movhi	r2,256
  80c37c:	10bfffc4 	addi	r2,r2,-1
  80c380:	11c0a436 	bltu	r2,r7,80c614 <__udivdi3+0x544>
  80c384:	01400404 	movi	r5,16
  80c388:	2805883a 	mov	r2,r5
  80c38c:	003fa406 	br	80c220 <__udivdi3+0x150>
  80c390:	0005883a 	mov	r2,zero
  80c394:	0009883a 	mov	r4,zero
  80c398:	003fae06 	br	80c254 <__udivdi3+0x184>
  80c39c:	00804034 	movhi	r2,256
  80c3a0:	10bfffc4 	addi	r2,r2,-1
  80c3a4:	1400a136 	bltu	r2,r16,80c62c <__udivdi3+0x55c>
  80c3a8:	01400404 	movi	r5,16
  80c3ac:	2805883a 	mov	r2,r5
  80c3b0:	003f6006 	br	80c134 <__udivdi3+0x64>
  80c3b4:	01000044 	movi	r4,1
  80c3b8:	000b883a 	mov	r5,zero
  80c3bc:	080dec40 	call	80dec4 <__udivsi3>
  80c3c0:	1021883a 	mov	r16,r2
  80c3c4:	00bfffd4 	movui	r2,65535
  80c3c8:	143ff436 	bltu	r2,r16,80c39c <__udivdi3+0x2cc>
  80c3cc:	003f5506 	br	80c124 <__udivdi3+0x54>
  80c3d0:	00804034 	movhi	r2,256
  80c3d4:	10bfffc4 	addi	r2,r2,-1
  80c3d8:	12009a36 	bltu	r2,r8,80c644 <__udivdi3+0x574>
  80c3dc:	01400404 	movi	r5,16
  80c3e0:	2805883a 	mov	r2,r5
  80c3e4:	003fae06 	br	80c2a0 <__udivdi3+0x1d0>
  80c3e8:	3dc5c83a 	sub	r2,r7,r23
  80c3ec:	35c8983a 	sll	r4,r6,r23
  80c3f0:	8086d83a 	srl	r3,r16,r2
  80c3f4:	a0a2d83a 	srl	r17,r20,r2
  80c3f8:	e084d83a 	srl	r2,fp,r2
  80c3fc:	20eab03a 	or	r21,r4,r3
  80c400:	a82cd43a 	srli	r22,r21,16
  80c404:	a5c6983a 	sll	r3,r20,r23
  80c408:	8809883a 	mov	r4,r17
  80c40c:	b00b883a 	mov	r5,r22
  80c410:	1886b03a 	or	r3,r3,r2
  80c414:	d8c00215 	stw	r3,8(sp)
  80c418:	080dec40 	call	80dec4 <__udivsi3>
  80c41c:	8809883a 	mov	r4,r17
  80c420:	b00b883a 	mov	r5,r22
  80c424:	1029883a 	mov	r20,r2
  80c428:	080decc0 	call	80decc <__umodsi3>
  80c42c:	a8ffffcc 	andi	r3,r21,65535
  80c430:	d8c00515 	stw	r3,20(sp)
  80c434:	d9000217 	ldw	r4,8(sp)
  80c438:	d9400517 	ldw	r5,20(sp)
  80c43c:	1004943a 	slli	r2,r2,16
  80c440:	2006d43a 	srli	r3,r4,16
  80c444:	85e0983a 	sll	r16,r16,r23
  80c448:	2d23383a 	mul	r17,r5,r20
  80c44c:	10c4b03a 	or	r2,r2,r3
  80c450:	dc000015 	stw	r16,0(sp)
  80c454:	1440032e 	bgeu	r2,r17,80c464 <__udivdi3+0x394>
  80c458:	1545883a 	add	r2,r2,r21
  80c45c:	a53fffc4 	addi	r20,r20,-1
  80c460:	15407f2e 	bgeu	r2,r21,80c660 <__udivdi3+0x590>
  80c464:	1463c83a 	sub	r17,r2,r17
  80c468:	8809883a 	mov	r4,r17
  80c46c:	b00b883a 	mov	r5,r22
  80c470:	080dec40 	call	80dec4 <__udivsi3>
  80c474:	8809883a 	mov	r4,r17
  80c478:	b00b883a 	mov	r5,r22
  80c47c:	1021883a 	mov	r16,r2
  80c480:	080decc0 	call	80decc <__umodsi3>
  80c484:	d8c00517 	ldw	r3,20(sp)
  80c488:	d9000217 	ldw	r4,8(sp)
  80c48c:	1004943a 	slli	r2,r2,16
  80c490:	1c0f383a 	mul	r7,r3,r16
  80c494:	20ffffcc 	andi	r3,r4,65535
  80c498:	10e2b03a 	or	r17,r2,r3
  80c49c:	89c0032e 	bgeu	r17,r7,80c4ac <__udivdi3+0x3dc>
  80c4a0:	8d63883a 	add	r17,r17,r21
  80c4a4:	843fffc4 	addi	r16,r16,-1
  80c4a8:	8d40692e 	bgeu	r17,r21,80c650 <__udivdi3+0x580>
  80c4ac:	a008943a 	slli	r4,r20,16
  80c4b0:	d9400017 	ldw	r5,0(sp)
  80c4b4:	89e3c83a 	sub	r17,r17,r7
  80c4b8:	8110b03a 	or	r8,r16,r4
  80c4bc:	280cd43a 	srli	r6,r5,16
  80c4c0:	28ffffcc 	andi	r3,r5,65535
  80c4c4:	40bfffcc 	andi	r2,r8,65535
  80c4c8:	400ad43a 	srli	r5,r8,16
  80c4cc:	10d3383a 	mul	r9,r2,r3
  80c4d0:	1185383a 	mul	r2,r2,r6
  80c4d4:	28c7383a 	mul	r3,r5,r3
  80c4d8:	4808d43a 	srli	r4,r9,16
  80c4dc:	298b383a 	mul	r5,r5,r6
  80c4e0:	10c5883a 	add	r2,r2,r3
  80c4e4:	2089883a 	add	r4,r4,r2
  80c4e8:	20c0022e 	bgeu	r4,r3,80c4f4 <__udivdi3+0x424>
  80c4ec:	00800074 	movhi	r2,1
  80c4f0:	288b883a 	add	r5,r5,r2
  80c4f4:	2004d43a 	srli	r2,r4,16
  80c4f8:	288b883a 	add	r5,r5,r2
  80c4fc:	89403f36 	bltu	r17,r5,80c5fc <__udivdi3+0x52c>
  80c500:	89403926 	beq	r17,r5,80c5e8 <__udivdi3+0x518>
  80c504:	4005883a 	mov	r2,r8
  80c508:	0009883a 	mov	r4,zero
  80c50c:	003f5106 	br	80c254 <__udivdi3+0x184>
  80c510:	85a0983a 	sll	r16,r16,r22
  80c514:	3585c83a 	sub	r2,r6,r22
  80c518:	a0a2d83a 	srl	r17,r20,r2
  80c51c:	802ad43a 	srli	r21,r16,16
  80c520:	e084d83a 	srl	r2,fp,r2
  80c524:	a586983a 	sll	r3,r20,r22
  80c528:	8809883a 	mov	r4,r17
  80c52c:	a80b883a 	mov	r5,r21
  80c530:	1886b03a 	or	r3,r3,r2
  80c534:	d8c00115 	stw	r3,4(sp)
  80c538:	080dec40 	call	80dec4 <__udivsi3>
  80c53c:	8809883a 	mov	r4,r17
  80c540:	a80b883a 	mov	r5,r21
  80c544:	d8800415 	stw	r2,16(sp)
  80c548:	080decc0 	call	80decc <__umodsi3>
  80c54c:	d9000117 	ldw	r4,4(sp)
  80c550:	d9400417 	ldw	r5,16(sp)
  80c554:	1004943a 	slli	r2,r2,16
  80c558:	85ffffcc 	andi	r23,r16,65535
  80c55c:	2006d43a 	srli	r3,r4,16
  80c560:	b963383a 	mul	r17,r23,r5
  80c564:	10c4b03a 	or	r2,r2,r3
  80c568:	1440042e 	bgeu	r2,r17,80c57c <__udivdi3+0x4ac>
  80c56c:	297fffc4 	addi	r5,r5,-1
  80c570:	1405883a 	add	r2,r2,r16
  80c574:	d9400415 	stw	r5,16(sp)
  80c578:	1400442e 	bgeu	r2,r16,80c68c <__udivdi3+0x5bc>
  80c57c:	1463c83a 	sub	r17,r2,r17
  80c580:	8809883a 	mov	r4,r17
  80c584:	a80b883a 	mov	r5,r21
  80c588:	080dec40 	call	80dec4 <__udivsi3>
  80c58c:	8809883a 	mov	r4,r17
  80c590:	a80b883a 	mov	r5,r21
  80c594:	1029883a 	mov	r20,r2
  80c598:	080decc0 	call	80decc <__umodsi3>
  80c59c:	d9400117 	ldw	r5,4(sp)
  80c5a0:	1004943a 	slli	r2,r2,16
  80c5a4:	bd09383a 	mul	r4,r23,r20
  80c5a8:	28ffffcc 	andi	r3,r5,65535
  80c5ac:	10c6b03a 	or	r3,r2,r3
  80c5b0:	1900062e 	bgeu	r3,r4,80c5cc <__udivdi3+0x4fc>
  80c5b4:	1c07883a 	add	r3,r3,r16
  80c5b8:	a53fffc4 	addi	r20,r20,-1
  80c5bc:	1c000336 	bltu	r3,r16,80c5cc <__udivdi3+0x4fc>
  80c5c0:	1900022e 	bgeu	r3,r4,80c5cc <__udivdi3+0x4fc>
  80c5c4:	a53fffc4 	addi	r20,r20,-1
  80c5c8:	1c07883a 	add	r3,r3,r16
  80c5cc:	d9400417 	ldw	r5,16(sp)
  80c5d0:	e5b8983a 	sll	fp,fp,r22
  80c5d4:	1923c83a 	sub	r17,r3,r4
  80c5d8:	2804943a 	slli	r2,r5,16
  80c5dc:	a0a8b03a 	or	r20,r20,r2
  80c5e0:	dd000315 	stw	r20,12(sp)
  80c5e4:	003ee106 	br	80c16c <__udivdi3+0x9c>
  80c5e8:	2004943a 	slli	r2,r4,16
  80c5ec:	e5c8983a 	sll	r4,fp,r23
  80c5f0:	48ffffcc 	andi	r3,r9,65535
  80c5f4:	10c5883a 	add	r2,r2,r3
  80c5f8:	20bfc22e 	bgeu	r4,r2,80c504 <__udivdi3+0x434>
  80c5fc:	40bfffc4 	addi	r2,r8,-1
  80c600:	0009883a 	mov	r4,zero
  80c604:	003f1306 	br	80c254 <__udivdi3+0x184>
  80c608:	01400204 	movi	r5,8
  80c60c:	2805883a 	mov	r2,r5
  80c610:	003f0306 	br	80c220 <__udivdi3+0x150>
  80c614:	01400604 	movi	r5,24
  80c618:	2805883a 	mov	r2,r5
  80c61c:	003f0006 	br	80c220 <__udivdi3+0x150>
  80c620:	01400204 	movi	r5,8
  80c624:	2805883a 	mov	r2,r5
  80c628:	003ec206 	br	80c134 <__udivdi3+0x64>
  80c62c:	01400604 	movi	r5,24
  80c630:	2805883a 	mov	r2,r5
  80c634:	003ebf06 	br	80c134 <__udivdi3+0x64>
  80c638:	01400204 	movi	r5,8
  80c63c:	2805883a 	mov	r2,r5
  80c640:	003f1706 	br	80c2a0 <__udivdi3+0x1d0>
  80c644:	01400604 	movi	r5,24
  80c648:	2805883a 	mov	r2,r5
  80c64c:	003f1406 	br	80c2a0 <__udivdi3+0x1d0>
  80c650:	89ff962e 	bgeu	r17,r7,80c4ac <__udivdi3+0x3dc>
  80c654:	8d63883a 	add	r17,r17,r21
  80c658:	843fffc4 	addi	r16,r16,-1
  80c65c:	003f9306 	br	80c4ac <__udivdi3+0x3dc>
  80c660:	147f802e 	bgeu	r2,r17,80c464 <__udivdi3+0x394>
  80c664:	a53fffc4 	addi	r20,r20,-1
  80c668:	1545883a 	add	r2,r2,r21
  80c66c:	003f7d06 	br	80c464 <__udivdi3+0x394>
  80c670:	a53fffc4 	addi	r20,r20,-1
  80c674:	003ede06 	br	80c1f0 <__udivdi3+0x120>
  80c678:	b5bfffc4 	addi	r22,r22,-1
  80c67c:	1405883a 	add	r2,r2,r16
  80c680:	003f2806 	br	80c324 <__udivdi3+0x254>
  80c684:	a53fffc4 	addi	r20,r20,-1
  80c688:	003f3706 	br	80c368 <__udivdi3+0x298>
  80c68c:	147fbb2e 	bgeu	r2,r17,80c57c <__udivdi3+0x4ac>
  80c690:	297fffc4 	addi	r5,r5,-1
  80c694:	1405883a 	add	r2,r2,r16
  80c698:	d9400415 	stw	r5,16(sp)
  80c69c:	003fb706 	br	80c57c <__udivdi3+0x4ac>
  80c6a0:	b5bfffc4 	addi	r22,r22,-1
  80c6a4:	1405883a 	add	r2,r2,r16
  80c6a8:	003ec006 	br	80c1ac <__udivdi3+0xdc>

0080c6ac <__umoddi3>:
  80c6ac:	defff104 	addi	sp,sp,-60
  80c6b0:	dd800b15 	stw	r22,44(sp)
  80c6b4:	dd000915 	stw	r20,36(sp)
  80c6b8:	dc000515 	stw	r16,20(sp)
  80c6bc:	dfc00e15 	stw	ra,56(sp)
  80c6c0:	df000d15 	stw	fp,52(sp)
  80c6c4:	ddc00c15 	stw	r23,48(sp)
  80c6c8:	dd400a15 	stw	r21,40(sp)
  80c6cc:	dcc00815 	stw	r19,32(sp)
  80c6d0:	dc800715 	stw	r18,28(sp)
  80c6d4:	dc400615 	stw	r17,24(sp)
  80c6d8:	3021883a 	mov	r16,r6
  80c6dc:	202d883a 	mov	r22,r4
  80c6e0:	2829883a 	mov	r20,r5
  80c6e4:	38002b1e 	bne	r7,zero,80c794 <__umoddi3+0xe8>
  80c6e8:	29805036 	bltu	r5,r6,80c82c <__umoddi3+0x180>
  80c6ec:	30008a26 	beq	r6,zero,80c918 <__umoddi3+0x26c>
  80c6f0:	00bfffd4 	movui	r2,65535
  80c6f4:	14008236 	bltu	r2,r16,80c900 <__umoddi3+0x254>
  80c6f8:	00803fc4 	movi	r2,255
  80c6fc:	14013636 	bltu	r2,r16,80cbd8 <__umoddi3+0x52c>
  80c700:	000b883a 	mov	r5,zero
  80c704:	0005883a 	mov	r2,zero
  80c708:	8084d83a 	srl	r2,r16,r2
  80c70c:	01002074 	movhi	r4,129
  80c710:	210a2a04 	addi	r4,r4,10408
  80c714:	01800804 	movi	r6,32
  80c718:	1105883a 	add	r2,r2,r4
  80c71c:	10c00003 	ldbu	r3,0(r2)
  80c720:	28c7883a 	add	r3,r5,r3
  80c724:	30efc83a 	sub	r23,r6,r3
  80c728:	b800941e 	bne	r23,zero,80c97c <__umoddi3+0x2d0>
  80c72c:	802ad43a 	srli	r21,r16,16
  80c730:	a423c83a 	sub	r17,r20,r16
  80c734:	0039883a 	mov	fp,zero
  80c738:	853fffcc 	andi	r20,r16,65535
  80c73c:	8809883a 	mov	r4,r17
  80c740:	a80b883a 	mov	r5,r21
  80c744:	080dec40 	call	80dec4 <__udivsi3>
  80c748:	8809883a 	mov	r4,r17
  80c74c:	a80b883a 	mov	r5,r21
  80c750:	a0a3383a 	mul	r17,r20,r2
  80c754:	080decc0 	call	80decc <__umodsi3>
  80c758:	1004943a 	slli	r2,r2,16
  80c75c:	b006d43a 	srli	r3,r22,16
  80c760:	10c4b03a 	or	r2,r2,r3
  80c764:	1440032e 	bgeu	r2,r17,80c774 <__umoddi3+0xc8>
  80c768:	1405883a 	add	r2,r2,r16
  80c76c:	14000136 	bltu	r2,r16,80c774 <__umoddi3+0xc8>
  80c770:	14413536 	bltu	r2,r17,80cc48 <__umoddi3+0x59c>
  80c774:	1463c83a 	sub	r17,r2,r17
  80c778:	8809883a 	mov	r4,r17
  80c77c:	a80b883a 	mov	r5,r21
  80c780:	080dec40 	call	80dec4 <__udivsi3>
  80c784:	8809883a 	mov	r4,r17
  80c788:	a0a3383a 	mul	r17,r20,r2
  80c78c:	a80b883a 	mov	r5,r21
  80c790:	00004d06 	br	80c8c8 <__umoddi3+0x21c>
  80c794:	380d883a 	mov	r6,r7
  80c798:	29c0102e 	bgeu	r5,r7,80c7dc <__umoddi3+0x130>
  80c79c:	2011883a 	mov	r8,r4
  80c7a0:	2813883a 	mov	r9,r5
  80c7a4:	4005883a 	mov	r2,r8
  80c7a8:	4807883a 	mov	r3,r9
  80c7ac:	dfc00e17 	ldw	ra,56(sp)
  80c7b0:	df000d17 	ldw	fp,52(sp)
  80c7b4:	ddc00c17 	ldw	r23,48(sp)
  80c7b8:	dd800b17 	ldw	r22,44(sp)
  80c7bc:	dd400a17 	ldw	r21,40(sp)
  80c7c0:	dd000917 	ldw	r20,36(sp)
  80c7c4:	dcc00817 	ldw	r19,32(sp)
  80c7c8:	dc800717 	ldw	r18,28(sp)
  80c7cc:	dc400617 	ldw	r17,24(sp)
  80c7d0:	dc000517 	ldw	r16,20(sp)
  80c7d4:	dec00f04 	addi	sp,sp,60
  80c7d8:	f800283a 	ret
  80c7dc:	00bfffd4 	movui	r2,65535
  80c7e0:	11c05a36 	bltu	r2,r7,80c94c <__umoddi3+0x2a0>
  80c7e4:	00803fc4 	movi	r2,255
  80c7e8:	11c0fe36 	bltu	r2,r7,80cbe4 <__umoddi3+0x538>
  80c7ec:	000b883a 	mov	r5,zero
  80c7f0:	0005883a 	mov	r2,zero
  80c7f4:	3084d83a 	srl	r2,r6,r2
  80c7f8:	01002074 	movhi	r4,129
  80c7fc:	210a2a04 	addi	r4,r4,10408
  80c800:	01c00804 	movi	r7,32
  80c804:	1105883a 	add	r2,r2,r4
  80c808:	10c00003 	ldbu	r3,0(r2)
  80c80c:	28c7883a 	add	r3,r5,r3
  80c810:	38ebc83a 	sub	r21,r7,r3
  80c814:	a800851e 	bne	r21,zero,80ca2c <__umoddi3+0x380>
  80c818:	35005236 	bltu	r6,r20,80c964 <__umoddi3+0x2b8>
  80c81c:	b400512e 	bgeu	r22,r16,80c964 <__umoddi3+0x2b8>
  80c820:	b011883a 	mov	r8,r22
  80c824:	a013883a 	mov	r9,r20
  80c828:	003fde06 	br	80c7a4 <__umoddi3+0xf8>
  80c82c:	00bfffd4 	movui	r2,65535
  80c830:	11804036 	bltu	r2,r6,80c934 <__umoddi3+0x288>
  80c834:	00803fc4 	movi	r2,255
  80c838:	1180ed36 	bltu	r2,r6,80cbf0 <__umoddi3+0x544>
  80c83c:	000b883a 	mov	r5,zero
  80c840:	0005883a 	mov	r2,zero
  80c844:	8084d83a 	srl	r2,r16,r2
  80c848:	01002074 	movhi	r4,129
  80c84c:	210a2a04 	addi	r4,r4,10408
  80c850:	01800804 	movi	r6,32
  80c854:	1105883a 	add	r2,r2,r4
  80c858:	10c00003 	ldbu	r3,0(r2)
  80c85c:	28c7883a 	add	r3,r5,r3
  80c860:	30c7c83a 	sub	r3,r6,r3
  80c864:	1800bf1e 	bne	r3,zero,80cb64 <__umoddi3+0x4b8>
  80c868:	0039883a 	mov	fp,zero
  80c86c:	802ad43a 	srli	r21,r16,16
  80c870:	a009883a 	mov	r4,r20
  80c874:	85ffffcc 	andi	r23,r16,65535
  80c878:	a80b883a 	mov	r5,r21
  80c87c:	080dec40 	call	80dec4 <__udivsi3>
  80c880:	a009883a 	mov	r4,r20
  80c884:	a80b883a 	mov	r5,r21
  80c888:	b8a3383a 	mul	r17,r23,r2
  80c88c:	080decc0 	call	80decc <__umodsi3>
  80c890:	1004943a 	slli	r2,r2,16
  80c894:	b006d43a 	srli	r3,r22,16
  80c898:	10c4b03a 	or	r2,r2,r3
  80c89c:	1440032e 	bgeu	r2,r17,80c8ac <__umoddi3+0x200>
  80c8a0:	1405883a 	add	r2,r2,r16
  80c8a4:	14000136 	bltu	r2,r16,80c8ac <__umoddi3+0x200>
  80c8a8:	1440e536 	bltu	r2,r17,80cc40 <__umoddi3+0x594>
  80c8ac:	1463c83a 	sub	r17,r2,r17
  80c8b0:	8809883a 	mov	r4,r17
  80c8b4:	a80b883a 	mov	r5,r21
  80c8b8:	080dec40 	call	80dec4 <__udivsi3>
  80c8bc:	8809883a 	mov	r4,r17
  80c8c0:	b8a3383a 	mul	r17,r23,r2
  80c8c4:	a80b883a 	mov	r5,r21
  80c8c8:	080decc0 	call	80decc <__umodsi3>
  80c8cc:	1004943a 	slli	r2,r2,16
  80c8d0:	b0ffffcc 	andi	r3,r22,65535
  80c8d4:	10c4b03a 	or	r2,r2,r3
  80c8d8:	1440042e 	bgeu	r2,r17,80c8ec <__umoddi3+0x240>
  80c8dc:	1405883a 	add	r2,r2,r16
  80c8e0:	14000236 	bltu	r2,r16,80c8ec <__umoddi3+0x240>
  80c8e4:	1440012e 	bgeu	r2,r17,80c8ec <__umoddi3+0x240>
  80c8e8:	1405883a 	add	r2,r2,r16
  80c8ec:	1445c83a 	sub	r2,r2,r17
  80c8f0:	1724d83a 	srl	r18,r2,fp
  80c8f4:	0013883a 	mov	r9,zero
  80c8f8:	9011883a 	mov	r8,r18
  80c8fc:	003fa906 	br	80c7a4 <__umoddi3+0xf8>
  80c900:	00804034 	movhi	r2,256
  80c904:	10bfffc4 	addi	r2,r2,-1
  80c908:	1400b036 	bltu	r2,r16,80cbcc <__umoddi3+0x520>
  80c90c:	01400404 	movi	r5,16
  80c910:	2805883a 	mov	r2,r5
  80c914:	003f7c06 	br	80c708 <__umoddi3+0x5c>
  80c918:	01000044 	movi	r4,1
  80c91c:	000b883a 	mov	r5,zero
  80c920:	080dec40 	call	80dec4 <__udivsi3>
  80c924:	1021883a 	mov	r16,r2
  80c928:	00bfffd4 	movui	r2,65535
  80c92c:	143ff436 	bltu	r2,r16,80c900 <__umoddi3+0x254>
  80c930:	003f7106 	br	80c6f8 <__umoddi3+0x4c>
  80c934:	00804034 	movhi	r2,256
  80c938:	10bfffc4 	addi	r2,r2,-1
  80c93c:	1180af36 	bltu	r2,r6,80cbfc <__umoddi3+0x550>
  80c940:	01400404 	movi	r5,16
  80c944:	2805883a 	mov	r2,r5
  80c948:	003fbe06 	br	80c844 <__umoddi3+0x198>
  80c94c:	00804034 	movhi	r2,256
  80c950:	10bfffc4 	addi	r2,r2,-1
  80c954:	11c0ac36 	bltu	r2,r7,80cc08 <__umoddi3+0x55c>
  80c958:	01400404 	movi	r5,16
  80c95c:	2805883a 	mov	r2,r5
  80c960:	003fa406 	br	80c7f4 <__umoddi3+0x148>
  80c964:	b409c83a 	sub	r4,r22,r16
  80c968:	b105803a 	cmpltu	r2,r22,r4
  80c96c:	a187c83a 	sub	r3,r20,r6
  80c970:	18a9c83a 	sub	r20,r3,r2
  80c974:	202d883a 	mov	r22,r4
  80c978:	003fa906 	br	80c820 <__umoddi3+0x174>
  80c97c:	85e0983a 	sll	r16,r16,r23
  80c980:	35c5c83a 	sub	r2,r6,r23
  80c984:	a0a2d83a 	srl	r17,r20,r2
  80c988:	802ad43a 	srli	r21,r16,16
  80c98c:	b084d83a 	srl	r2,r22,r2
  80c990:	a5c6983a 	sll	r3,r20,r23
  80c994:	8809883a 	mov	r4,r17
  80c998:	a80b883a 	mov	r5,r21
  80c99c:	1886b03a 	or	r3,r3,r2
  80c9a0:	d8c00115 	stw	r3,4(sp)
  80c9a4:	853fffcc 	andi	r20,r16,65535
  80c9a8:	080dec40 	call	80dec4 <__udivsi3>
  80c9ac:	8809883a 	mov	r4,r17
  80c9b0:	a80b883a 	mov	r5,r21
  80c9b4:	a0a3383a 	mul	r17,r20,r2
  80c9b8:	080decc0 	call	80decc <__umodsi3>
  80c9bc:	d9000117 	ldw	r4,4(sp)
  80c9c0:	1004943a 	slli	r2,r2,16
  80c9c4:	b839883a 	mov	fp,r23
  80c9c8:	2006d43a 	srli	r3,r4,16
  80c9cc:	10c4b03a 	or	r2,r2,r3
  80c9d0:	1440022e 	bgeu	r2,r17,80c9dc <__umoddi3+0x330>
  80c9d4:	1405883a 	add	r2,r2,r16
  80c9d8:	1400962e 	bgeu	r2,r16,80cc34 <__umoddi3+0x588>
  80c9dc:	1463c83a 	sub	r17,r2,r17
  80c9e0:	8809883a 	mov	r4,r17
  80c9e4:	a80b883a 	mov	r5,r21
  80c9e8:	080dec40 	call	80dec4 <__udivsi3>
  80c9ec:	8809883a 	mov	r4,r17
  80c9f0:	a80b883a 	mov	r5,r21
  80c9f4:	a0a3383a 	mul	r17,r20,r2
  80c9f8:	080decc0 	call	80decc <__umodsi3>
  80c9fc:	d9400117 	ldw	r5,4(sp)
  80ca00:	1004943a 	slli	r2,r2,16
  80ca04:	28ffffcc 	andi	r3,r5,65535
  80ca08:	10c4b03a 	or	r2,r2,r3
  80ca0c:	1440042e 	bgeu	r2,r17,80ca20 <__umoddi3+0x374>
  80ca10:	1405883a 	add	r2,r2,r16
  80ca14:	14000236 	bltu	r2,r16,80ca20 <__umoddi3+0x374>
  80ca18:	1440012e 	bgeu	r2,r17,80ca20 <__umoddi3+0x374>
  80ca1c:	1405883a 	add	r2,r2,r16
  80ca20:	b5ec983a 	sll	r22,r22,r23
  80ca24:	1463c83a 	sub	r17,r2,r17
  80ca28:	003f4406 	br	80c73c <__umoddi3+0x90>
  80ca2c:	3d4fc83a 	sub	r7,r7,r21
  80ca30:	3546983a 	sll	r3,r6,r21
  80ca34:	81c4d83a 	srl	r2,r16,r7
  80ca38:	a1e2d83a 	srl	r17,r20,r7
  80ca3c:	a54c983a 	sll	r6,r20,r21
  80ca40:	18aeb03a 	or	r23,r3,r2
  80ca44:	b828d43a 	srli	r20,r23,16
  80ca48:	b1c4d83a 	srl	r2,r22,r7
  80ca4c:	8809883a 	mov	r4,r17
  80ca50:	a00b883a 	mov	r5,r20
  80ca54:	308cb03a 	or	r6,r6,r2
  80ca58:	d9c00315 	stw	r7,12(sp)
  80ca5c:	d9800215 	stw	r6,8(sp)
  80ca60:	080dec40 	call	80dec4 <__udivsi3>
  80ca64:	8809883a 	mov	r4,r17
  80ca68:	a00b883a 	mov	r5,r20
  80ca6c:	1039883a 	mov	fp,r2
  80ca70:	080decc0 	call	80decc <__umodsi3>
  80ca74:	b8ffffcc 	andi	r3,r23,65535
  80ca78:	d8c00415 	stw	r3,16(sp)
  80ca7c:	d9000217 	ldw	r4,8(sp)
  80ca80:	d9400417 	ldw	r5,16(sp)
  80ca84:	1004943a 	slli	r2,r2,16
  80ca88:	2006d43a 	srli	r3,r4,16
  80ca8c:	8560983a 	sll	r16,r16,r21
  80ca90:	2f23383a 	mul	r17,r5,fp
  80ca94:	10c4b03a 	or	r2,r2,r3
  80ca98:	dc000015 	stw	r16,0(sp)
  80ca9c:	b56c983a 	sll	r22,r22,r21
  80caa0:	1440032e 	bgeu	r2,r17,80cab0 <__umoddi3+0x404>
  80caa4:	15c5883a 	add	r2,r2,r23
  80caa8:	e73fffc4 	addi	fp,fp,-1
  80caac:	15c05d2e 	bgeu	r2,r23,80cc24 <__umoddi3+0x578>
  80cab0:	1463c83a 	sub	r17,r2,r17
  80cab4:	8809883a 	mov	r4,r17
  80cab8:	a00b883a 	mov	r5,r20
  80cabc:	080dec40 	call	80dec4 <__udivsi3>
  80cac0:	8809883a 	mov	r4,r17
  80cac4:	a00b883a 	mov	r5,r20
  80cac8:	1021883a 	mov	r16,r2
  80cacc:	080decc0 	call	80decc <__umodsi3>
  80cad0:	d8c00417 	ldw	r3,16(sp)
  80cad4:	d9000217 	ldw	r4,8(sp)
  80cad8:	1004943a 	slli	r2,r2,16
  80cadc:	1c23383a 	mul	r17,r3,r16
  80cae0:	20ffffcc 	andi	r3,r4,65535
  80cae4:	10ceb03a 	or	r7,r2,r3
  80cae8:	3c40032e 	bgeu	r7,r17,80caf8 <__umoddi3+0x44c>
  80caec:	3dcf883a 	add	r7,r7,r23
  80caf0:	843fffc4 	addi	r16,r16,-1
  80caf4:	3dc0472e 	bgeu	r7,r23,80cc14 <__umoddi3+0x568>
  80caf8:	e004943a 	slli	r2,fp,16
  80cafc:	d9400017 	ldw	r5,0(sp)
  80cb00:	3c4fc83a 	sub	r7,r7,r17
  80cb04:	8084b03a 	or	r2,r16,r2
  80cb08:	28ffffcc 	andi	r3,r5,65535
  80cb0c:	280cd43a 	srli	r6,r5,16
  80cb10:	100ad43a 	srli	r5,r2,16
  80cb14:	10bfffcc 	andi	r2,r2,65535
  80cb18:	10d1383a 	mul	r8,r2,r3
  80cb1c:	28c7383a 	mul	r3,r5,r3
  80cb20:	1185383a 	mul	r2,r2,r6
  80cb24:	4008d43a 	srli	r4,r8,16
  80cb28:	298b383a 	mul	r5,r5,r6
  80cb2c:	10c5883a 	add	r2,r2,r3
  80cb30:	2089883a 	add	r4,r4,r2
  80cb34:	20c0022e 	bgeu	r4,r3,80cb40 <__umoddi3+0x494>
  80cb38:	00800074 	movhi	r2,1
  80cb3c:	288b883a 	add	r5,r5,r2
  80cb40:	2004d43a 	srli	r2,r4,16
  80cb44:	2008943a 	slli	r4,r4,16
  80cb48:	40ffffcc 	andi	r3,r8,65535
  80cb4c:	288b883a 	add	r5,r5,r2
  80cb50:	20c9883a 	add	r4,r4,r3
  80cb54:	39400b36 	bltu	r7,r5,80cb84 <__umoddi3+0x4d8>
  80cb58:	39403d26 	beq	r7,r5,80cc50 <__umoddi3+0x5a4>
  80cb5c:	394bc83a 	sub	r5,r7,r5
  80cb60:	00000f06 	br	80cba0 <__umoddi3+0x4f4>
  80cb64:	30c5c83a 	sub	r2,r6,r3
  80cb68:	1839883a 	mov	fp,r3
  80cb6c:	b084d83a 	srl	r2,r22,r2
  80cb70:	a0c6983a 	sll	r3,r20,r3
  80cb74:	8720983a 	sll	r16,r16,fp
  80cb78:	b72c983a 	sll	r22,r22,fp
  80cb7c:	18a8b03a 	or	r20,r3,r2
  80cb80:	003f3a06 	br	80c86c <__umoddi3+0x1c0>
  80cb84:	d8c00017 	ldw	r3,0(sp)
  80cb88:	20c5c83a 	sub	r2,r4,r3
  80cb8c:	2089803a 	cmpltu	r4,r4,r2
  80cb90:	2dc7c83a 	sub	r3,r5,r23
  80cb94:	1907c83a 	sub	r3,r3,r4
  80cb98:	38cbc83a 	sub	r5,r7,r3
  80cb9c:	1009883a 	mov	r4,r2
  80cba0:	b105c83a 	sub	r2,r22,r4
  80cba4:	b087803a 	cmpltu	r3,r22,r2
  80cba8:	28c7c83a 	sub	r3,r5,r3
  80cbac:	d9400317 	ldw	r5,12(sp)
  80cbb0:	1544d83a 	srl	r2,r2,r21
  80cbb4:	1948983a 	sll	r4,r3,r5
  80cbb8:	1d46d83a 	srl	r3,r3,r21
  80cbbc:	20a4b03a 	or	r18,r4,r2
  80cbc0:	9011883a 	mov	r8,r18
  80cbc4:	1813883a 	mov	r9,r3
  80cbc8:	003ef606 	br	80c7a4 <__umoddi3+0xf8>
  80cbcc:	01400604 	movi	r5,24
  80cbd0:	2805883a 	mov	r2,r5
  80cbd4:	003ecc06 	br	80c708 <__umoddi3+0x5c>
  80cbd8:	01400204 	movi	r5,8
  80cbdc:	2805883a 	mov	r2,r5
  80cbe0:	003ec906 	br	80c708 <__umoddi3+0x5c>
  80cbe4:	01400204 	movi	r5,8
  80cbe8:	2805883a 	mov	r2,r5
  80cbec:	003f0106 	br	80c7f4 <__umoddi3+0x148>
  80cbf0:	01400204 	movi	r5,8
  80cbf4:	2805883a 	mov	r2,r5
  80cbf8:	003f1206 	br	80c844 <__umoddi3+0x198>
  80cbfc:	01400604 	movi	r5,24
  80cc00:	2805883a 	mov	r2,r5
  80cc04:	003f0f06 	br	80c844 <__umoddi3+0x198>
  80cc08:	01400604 	movi	r5,24
  80cc0c:	2805883a 	mov	r2,r5
  80cc10:	003ef806 	br	80c7f4 <__umoddi3+0x148>
  80cc14:	3c7fb82e 	bgeu	r7,r17,80caf8 <__umoddi3+0x44c>
  80cc18:	843fffc4 	addi	r16,r16,-1
  80cc1c:	3dcf883a 	add	r7,r7,r23
  80cc20:	003fb506 	br	80caf8 <__umoddi3+0x44c>
  80cc24:	147fa22e 	bgeu	r2,r17,80cab0 <__umoddi3+0x404>
  80cc28:	e73fffc4 	addi	fp,fp,-1
  80cc2c:	15c5883a 	add	r2,r2,r23
  80cc30:	003f9f06 	br	80cab0 <__umoddi3+0x404>
  80cc34:	147f692e 	bgeu	r2,r17,80c9dc <__umoddi3+0x330>
  80cc38:	1405883a 	add	r2,r2,r16
  80cc3c:	003f6706 	br	80c9dc <__umoddi3+0x330>
  80cc40:	1405883a 	add	r2,r2,r16
  80cc44:	003f1906 	br	80c8ac <__umoddi3+0x200>
  80cc48:	1405883a 	add	r2,r2,r16
  80cc4c:	003ec906 	br	80c774 <__umoddi3+0xc8>
  80cc50:	b13fcc36 	bltu	r22,r4,80cb84 <__umoddi3+0x4d8>
  80cc54:	000b883a 	mov	r5,zero
  80cc58:	003fd106 	br	80cba0 <__umoddi3+0x4f4>

0080cc5c <_fpadd_parts>:
  80cc5c:	defff804 	addi	sp,sp,-32
  80cc60:	dcc00315 	stw	r19,12(sp)
  80cc64:	2027883a 	mov	r19,r4
  80cc68:	21000017 	ldw	r4,0(r4)
  80cc6c:	00c00044 	movi	r3,1
  80cc70:	dd400515 	stw	r21,20(sp)
  80cc74:	dd000415 	stw	r20,16(sp)
  80cc78:	ddc00715 	stw	r23,28(sp)
  80cc7c:	dd800615 	stw	r22,24(sp)
  80cc80:	dc800215 	stw	r18,8(sp)
  80cc84:	dc400115 	stw	r17,4(sp)
  80cc88:	dc000015 	stw	r16,0(sp)
  80cc8c:	282b883a 	mov	r21,r5
  80cc90:	3029883a 	mov	r20,r6
  80cc94:	1900632e 	bgeu	r3,r4,80ce24 <_fpadd_parts+0x1c8>
  80cc98:	28800017 	ldw	r2,0(r5)
  80cc9c:	1880812e 	bgeu	r3,r2,80cea4 <_fpadd_parts+0x248>
  80cca0:	00c00104 	movi	r3,4
  80cca4:	20c0dc26 	beq	r4,r3,80d018 <_fpadd_parts+0x3bc>
  80cca8:	10c07e26 	beq	r2,r3,80cea4 <_fpadd_parts+0x248>
  80ccac:	00c00084 	movi	r3,2
  80ccb0:	10c06726 	beq	r2,r3,80ce50 <_fpadd_parts+0x1f4>
  80ccb4:	20c07b26 	beq	r4,r3,80cea4 <_fpadd_parts+0x248>
  80ccb8:	9dc00217 	ldw	r23,8(r19)
  80ccbc:	28c00217 	ldw	r3,8(r5)
  80ccc0:	9c400317 	ldw	r17,12(r19)
  80ccc4:	2bc00317 	ldw	r15,12(r5)
  80ccc8:	b8cdc83a 	sub	r6,r23,r3
  80cccc:	9c800417 	ldw	r18,16(r19)
  80ccd0:	2c000417 	ldw	r16,16(r5)
  80ccd4:	3009883a 	mov	r4,r6
  80ccd8:	30009716 	blt	r6,zero,80cf38 <_fpadd_parts+0x2dc>
  80ccdc:	00800fc4 	movi	r2,63
  80cce0:	11806b16 	blt	r2,r6,80ce90 <_fpadd_parts+0x234>
  80cce4:	0100a40e 	bge	zero,r4,80cf78 <_fpadd_parts+0x31c>
  80cce8:	35bff804 	addi	r22,r6,-32
  80ccec:	b000bc16 	blt	r22,zero,80cfe0 <_fpadd_parts+0x384>
  80ccf0:	8596d83a 	srl	r11,r16,r22
  80ccf4:	0019883a 	mov	r12,zero
  80ccf8:	0013883a 	mov	r9,zero
  80ccfc:	01000044 	movi	r4,1
  80cd00:	0015883a 	mov	r10,zero
  80cd04:	b000be16 	blt	r22,zero,80d000 <_fpadd_parts+0x3a4>
  80cd08:	2590983a 	sll	r8,r4,r22
  80cd0c:	000f883a 	mov	r7,zero
  80cd10:	00bfffc4 	movi	r2,-1
  80cd14:	3889883a 	add	r4,r7,r2
  80cd18:	408b883a 	add	r5,r8,r2
  80cd1c:	21cd803a 	cmpltu	r6,r4,r7
  80cd20:	314b883a 	add	r5,r6,r5
  80cd24:	7904703a 	and	r2,r15,r4
  80cd28:	8146703a 	and	r3,r16,r5
  80cd2c:	10c4b03a 	or	r2,r2,r3
  80cd30:	10000226 	beq	r2,zero,80cd3c <_fpadd_parts+0xe0>
  80cd34:	02400044 	movi	r9,1
  80cd38:	0015883a 	mov	r10,zero
  80cd3c:	5a5eb03a 	or	r15,r11,r9
  80cd40:	62a0b03a 	or	r16,r12,r10
  80cd44:	99400117 	ldw	r5,4(r19)
  80cd48:	a8800117 	ldw	r2,4(r21)
  80cd4c:	28806e26 	beq	r5,r2,80cf08 <_fpadd_parts+0x2ac>
  80cd50:	28006626 	beq	r5,zero,80ceec <_fpadd_parts+0x290>
  80cd54:	7c45c83a 	sub	r2,r15,r17
  80cd58:	7889803a 	cmpltu	r4,r15,r2
  80cd5c:	8487c83a 	sub	r3,r16,r18
  80cd60:	1909c83a 	sub	r4,r3,r4
  80cd64:	100d883a 	mov	r6,r2
  80cd68:	200f883a 	mov	r7,r4
  80cd6c:	38007716 	blt	r7,zero,80cf4c <_fpadd_parts+0x2f0>
  80cd70:	a5c00215 	stw	r23,8(r20)
  80cd74:	a1c00415 	stw	r7,16(r20)
  80cd78:	a0000115 	stw	zero,4(r20)
  80cd7c:	a1800315 	stw	r6,12(r20)
  80cd80:	a2000317 	ldw	r8,12(r20)
  80cd84:	a2400417 	ldw	r9,16(r20)
  80cd88:	00bfffc4 	movi	r2,-1
  80cd8c:	408b883a 	add	r5,r8,r2
  80cd90:	2a09803a 	cmpltu	r4,r5,r8
  80cd94:	488d883a 	add	r6,r9,r2
  80cd98:	01c40034 	movhi	r7,4096
  80cd9c:	39ffffc4 	addi	r7,r7,-1
  80cda0:	218d883a 	add	r6,r4,r6
  80cda4:	39801736 	bltu	r7,r6,80ce04 <_fpadd_parts+0x1a8>
  80cda8:	31c06526 	beq	r6,r7,80cf40 <_fpadd_parts+0x2e4>
  80cdac:	a3000217 	ldw	r12,8(r20)
  80cdb0:	4209883a 	add	r4,r8,r8
  80cdb4:	00bfffc4 	movi	r2,-1
  80cdb8:	220f803a 	cmpltu	r7,r4,r8
  80cdbc:	4a4b883a 	add	r5,r9,r9
  80cdc0:	394f883a 	add	r7,r7,r5
  80cdc4:	2095883a 	add	r10,r4,r2
  80cdc8:	3897883a 	add	r11,r7,r2
  80cdcc:	510d803a 	cmpltu	r6,r10,r4
  80cdd0:	6099883a 	add	r12,r12,r2
  80cdd4:	32d7883a 	add	r11,r6,r11
  80cdd8:	00840034 	movhi	r2,4096
  80cddc:	10bfffc4 	addi	r2,r2,-1
  80cde0:	2011883a 	mov	r8,r4
  80cde4:	3813883a 	mov	r9,r7
  80cde8:	a1000315 	stw	r4,12(r20)
  80cdec:	a1c00415 	stw	r7,16(r20)
  80cdf0:	a3000215 	stw	r12,8(r20)
  80cdf4:	12c00336 	bltu	r2,r11,80ce04 <_fpadd_parts+0x1a8>
  80cdf8:	58bfed1e 	bne	r11,r2,80cdb0 <_fpadd_parts+0x154>
  80cdfc:	00bfff84 	movi	r2,-2
  80ce00:	12bfeb2e 	bgeu	r2,r10,80cdb0 <_fpadd_parts+0x154>
  80ce04:	a2800417 	ldw	r10,16(r20)
  80ce08:	008000c4 	movi	r2,3
  80ce0c:	00c80034 	movhi	r3,8192
  80ce10:	18ffffc4 	addi	r3,r3,-1
  80ce14:	a2400317 	ldw	r9,12(r20)
  80ce18:	a0800015 	stw	r2,0(r20)
  80ce1c:	1a802336 	bltu	r3,r10,80ceac <_fpadd_parts+0x250>
  80ce20:	a027883a 	mov	r19,r20
  80ce24:	9805883a 	mov	r2,r19
  80ce28:	ddc00717 	ldw	r23,28(sp)
  80ce2c:	dd800617 	ldw	r22,24(sp)
  80ce30:	dd400517 	ldw	r21,20(sp)
  80ce34:	dd000417 	ldw	r20,16(sp)
  80ce38:	dcc00317 	ldw	r19,12(sp)
  80ce3c:	dc800217 	ldw	r18,8(sp)
  80ce40:	dc400117 	ldw	r17,4(sp)
  80ce44:	dc000017 	ldw	r16,0(sp)
  80ce48:	dec00804 	addi	sp,sp,32
  80ce4c:	f800283a 	ret
  80ce50:	20fff41e 	bne	r4,r3,80ce24 <_fpadd_parts+0x1c8>
  80ce54:	31000015 	stw	r4,0(r6)
  80ce58:	98800117 	ldw	r2,4(r19)
  80ce5c:	30800115 	stw	r2,4(r6)
  80ce60:	98c00217 	ldw	r3,8(r19)
  80ce64:	30c00215 	stw	r3,8(r6)
  80ce68:	98800317 	ldw	r2,12(r19)
  80ce6c:	30800315 	stw	r2,12(r6)
  80ce70:	98c00417 	ldw	r3,16(r19)
  80ce74:	30c00415 	stw	r3,16(r6)
  80ce78:	98800117 	ldw	r2,4(r19)
  80ce7c:	28c00117 	ldw	r3,4(r5)
  80ce80:	3027883a 	mov	r19,r6
  80ce84:	10c4703a 	and	r2,r2,r3
  80ce88:	30800115 	stw	r2,4(r6)
  80ce8c:	003fe506 	br	80ce24 <_fpadd_parts+0x1c8>
  80ce90:	1dc02616 	blt	r3,r23,80cf2c <_fpadd_parts+0x2d0>
  80ce94:	0023883a 	mov	r17,zero
  80ce98:	182f883a 	mov	r23,r3
  80ce9c:	0025883a 	mov	r18,zero
  80cea0:	003fa806 	br	80cd44 <_fpadd_parts+0xe8>
  80cea4:	a827883a 	mov	r19,r21
  80cea8:	003fde06 	br	80ce24 <_fpadd_parts+0x1c8>
  80ceac:	01800044 	movi	r6,1
  80ceb0:	500497fa 	slli	r2,r10,31
  80ceb4:	4808d07a 	srli	r4,r9,1
  80ceb8:	518ad83a 	srl	r5,r10,r6
  80cebc:	a2000217 	ldw	r8,8(r20)
  80cec0:	1108b03a 	or	r4,r2,r4
  80cec4:	0007883a 	mov	r3,zero
  80cec8:	4984703a 	and	r2,r9,r6
  80cecc:	208cb03a 	or	r6,r4,r2
  80ced0:	28ceb03a 	or	r7,r5,r3
  80ced4:	42000044 	addi	r8,r8,1
  80ced8:	a027883a 	mov	r19,r20
  80cedc:	a1c00415 	stw	r7,16(r20)
  80cee0:	a2000215 	stw	r8,8(r20)
  80cee4:	a1800315 	stw	r6,12(r20)
  80cee8:	003fce06 	br	80ce24 <_fpadd_parts+0x1c8>
  80ceec:	8bc5c83a 	sub	r2,r17,r15
  80cef0:	8889803a 	cmpltu	r4,r17,r2
  80cef4:	9407c83a 	sub	r3,r18,r16
  80cef8:	1909c83a 	sub	r4,r3,r4
  80cefc:	100d883a 	mov	r6,r2
  80cf00:	200f883a 	mov	r7,r4
  80cf04:	003f9906 	br	80cd6c <_fpadd_parts+0x110>
  80cf08:	7c45883a 	add	r2,r15,r17
  80cf0c:	13c9803a 	cmpltu	r4,r2,r15
  80cf10:	8487883a 	add	r3,r16,r18
  80cf14:	20c9883a 	add	r4,r4,r3
  80cf18:	a1400115 	stw	r5,4(r20)
  80cf1c:	a5c00215 	stw	r23,8(r20)
  80cf20:	a0800315 	stw	r2,12(r20)
  80cf24:	a1000415 	stw	r4,16(r20)
  80cf28:	003fb606 	br	80ce04 <_fpadd_parts+0x1a8>
  80cf2c:	001f883a 	mov	r15,zero
  80cf30:	0021883a 	mov	r16,zero
  80cf34:	003f8306 	br	80cd44 <_fpadd_parts+0xe8>
  80cf38:	018dc83a 	sub	r6,zero,r6
  80cf3c:	003f6706 	br	80ccdc <_fpadd_parts+0x80>
  80cf40:	00bfff84 	movi	r2,-2
  80cf44:	117faf36 	bltu	r2,r5,80ce04 <_fpadd_parts+0x1a8>
  80cf48:	003f9806 	br	80cdac <_fpadd_parts+0x150>
  80cf4c:	0005883a 	mov	r2,zero
  80cf50:	1189c83a 	sub	r4,r2,r6
  80cf54:	1105803a 	cmpltu	r2,r2,r4
  80cf58:	01cbc83a 	sub	r5,zero,r7
  80cf5c:	2885c83a 	sub	r2,r5,r2
  80cf60:	01800044 	movi	r6,1
  80cf64:	a1800115 	stw	r6,4(r20)
  80cf68:	a5c00215 	stw	r23,8(r20)
  80cf6c:	a1000315 	stw	r4,12(r20)
  80cf70:	a0800415 	stw	r2,16(r20)
  80cf74:	003f8206 	br	80cd80 <_fpadd_parts+0x124>
  80cf78:	203f7226 	beq	r4,zero,80cd44 <_fpadd_parts+0xe8>
  80cf7c:	35bff804 	addi	r22,r6,-32
  80cf80:	b9af883a 	add	r23,r23,r6
  80cf84:	b0003116 	blt	r22,zero,80d04c <_fpadd_parts+0x3f0>
  80cf88:	959ad83a 	srl	r13,r18,r22
  80cf8c:	001d883a 	mov	r14,zero
  80cf90:	000f883a 	mov	r7,zero
  80cf94:	01000044 	movi	r4,1
  80cf98:	0011883a 	mov	r8,zero
  80cf9c:	b0002516 	blt	r22,zero,80d034 <_fpadd_parts+0x3d8>
  80cfa0:	2594983a 	sll	r10,r4,r22
  80cfa4:	0013883a 	mov	r9,zero
  80cfa8:	00bfffc4 	movi	r2,-1
  80cfac:	4889883a 	add	r4,r9,r2
  80cfb0:	508b883a 	add	r5,r10,r2
  80cfb4:	224d803a 	cmpltu	r6,r4,r9
  80cfb8:	314b883a 	add	r5,r6,r5
  80cfbc:	8904703a 	and	r2,r17,r4
  80cfc0:	9146703a 	and	r3,r18,r5
  80cfc4:	10c4b03a 	or	r2,r2,r3
  80cfc8:	10000226 	beq	r2,zero,80cfd4 <_fpadd_parts+0x378>
  80cfcc:	01c00044 	movi	r7,1
  80cfd0:	0011883a 	mov	r8,zero
  80cfd4:	69e2b03a 	or	r17,r13,r7
  80cfd8:	7224b03a 	or	r18,r14,r8
  80cfdc:	003f5906 	br	80cd44 <_fpadd_parts+0xe8>
  80cfe0:	8407883a 	add	r3,r16,r16
  80cfe4:	008007c4 	movi	r2,31
  80cfe8:	1185c83a 	sub	r2,r2,r6
  80cfec:	1886983a 	sll	r3,r3,r2
  80cff0:	7996d83a 	srl	r11,r15,r6
  80cff4:	8198d83a 	srl	r12,r16,r6
  80cff8:	1ad6b03a 	or	r11,r3,r11
  80cffc:	003f3e06 	br	80ccf8 <_fpadd_parts+0x9c>
  80d000:	2006d07a 	srli	r3,r4,1
  80d004:	008007c4 	movi	r2,31
  80d008:	1185c83a 	sub	r2,r2,r6
  80d00c:	1890d83a 	srl	r8,r3,r2
  80d010:	218e983a 	sll	r7,r4,r6
  80d014:	003f3e06 	br	80cd10 <_fpadd_parts+0xb4>
  80d018:	113f821e 	bne	r2,r4,80ce24 <_fpadd_parts+0x1c8>
  80d01c:	28c00117 	ldw	r3,4(r5)
  80d020:	98800117 	ldw	r2,4(r19)
  80d024:	10ff7f26 	beq	r2,r3,80ce24 <_fpadd_parts+0x1c8>
  80d028:	04c02074 	movhi	r19,129
  80d02c:	9cca2504 	addi	r19,r19,10388
  80d030:	003f7c06 	br	80ce24 <_fpadd_parts+0x1c8>
  80d034:	2006d07a 	srli	r3,r4,1
  80d038:	008007c4 	movi	r2,31
  80d03c:	1185c83a 	sub	r2,r2,r6
  80d040:	1894d83a 	srl	r10,r3,r2
  80d044:	2192983a 	sll	r9,r4,r6
  80d048:	003fd706 	br	80cfa8 <_fpadd_parts+0x34c>
  80d04c:	9487883a 	add	r3,r18,r18
  80d050:	008007c4 	movi	r2,31
  80d054:	1185c83a 	sub	r2,r2,r6
  80d058:	1886983a 	sll	r3,r3,r2
  80d05c:	899ad83a 	srl	r13,r17,r6
  80d060:	919cd83a 	srl	r14,r18,r6
  80d064:	1b5ab03a 	or	r13,r3,r13
  80d068:	003fc906 	br	80cf90 <_fpadd_parts+0x334>

0080d06c <__subdf3>:
  80d06c:	deffea04 	addi	sp,sp,-88
  80d070:	dcc01415 	stw	r19,80(sp)
  80d074:	dcc00404 	addi	r19,sp,16
  80d078:	2011883a 	mov	r8,r4
  80d07c:	2813883a 	mov	r9,r5
  80d080:	dc401315 	stw	r17,76(sp)
  80d084:	d809883a 	mov	r4,sp
  80d088:	980b883a 	mov	r5,r19
  80d08c:	dc400904 	addi	r17,sp,36
  80d090:	dfc01515 	stw	ra,84(sp)
  80d094:	da400115 	stw	r9,4(sp)
  80d098:	d9c00315 	stw	r7,12(sp)
  80d09c:	da000015 	stw	r8,0(sp)
  80d0a0:	d9800215 	stw	r6,8(sp)
  80d0a4:	080e3000 	call	80e300 <__unpack_d>
  80d0a8:	d9000204 	addi	r4,sp,8
  80d0ac:	880b883a 	mov	r5,r17
  80d0b0:	080e3000 	call	80e300 <__unpack_d>
  80d0b4:	d8800a17 	ldw	r2,40(sp)
  80d0b8:	880b883a 	mov	r5,r17
  80d0bc:	9809883a 	mov	r4,r19
  80d0c0:	d9800e04 	addi	r6,sp,56
  80d0c4:	1080005c 	xori	r2,r2,1
  80d0c8:	d8800a15 	stw	r2,40(sp)
  80d0cc:	080cc5c0 	call	80cc5c <_fpadd_parts>
  80d0d0:	1009883a 	mov	r4,r2
  80d0d4:	080dfec0 	call	80dfec <__pack_d>
  80d0d8:	dfc01517 	ldw	ra,84(sp)
  80d0dc:	dcc01417 	ldw	r19,80(sp)
  80d0e0:	dc401317 	ldw	r17,76(sp)
  80d0e4:	dec01604 	addi	sp,sp,88
  80d0e8:	f800283a 	ret

0080d0ec <__adddf3>:
  80d0ec:	deffea04 	addi	sp,sp,-88
  80d0f0:	dcc01415 	stw	r19,80(sp)
  80d0f4:	dcc00404 	addi	r19,sp,16
  80d0f8:	2011883a 	mov	r8,r4
  80d0fc:	2813883a 	mov	r9,r5
  80d100:	dc401315 	stw	r17,76(sp)
  80d104:	d809883a 	mov	r4,sp
  80d108:	980b883a 	mov	r5,r19
  80d10c:	dc400904 	addi	r17,sp,36
  80d110:	dfc01515 	stw	ra,84(sp)
  80d114:	da400115 	stw	r9,4(sp)
  80d118:	d9c00315 	stw	r7,12(sp)
  80d11c:	da000015 	stw	r8,0(sp)
  80d120:	d9800215 	stw	r6,8(sp)
  80d124:	080e3000 	call	80e300 <__unpack_d>
  80d128:	d9000204 	addi	r4,sp,8
  80d12c:	880b883a 	mov	r5,r17
  80d130:	080e3000 	call	80e300 <__unpack_d>
  80d134:	d9800e04 	addi	r6,sp,56
  80d138:	9809883a 	mov	r4,r19
  80d13c:	880b883a 	mov	r5,r17
  80d140:	080cc5c0 	call	80cc5c <_fpadd_parts>
  80d144:	1009883a 	mov	r4,r2
  80d148:	080dfec0 	call	80dfec <__pack_d>
  80d14c:	dfc01517 	ldw	ra,84(sp)
  80d150:	dcc01417 	ldw	r19,80(sp)
  80d154:	dc401317 	ldw	r17,76(sp)
  80d158:	dec01604 	addi	sp,sp,88
  80d15c:	f800283a 	ret

0080d160 <__muldf3>:
  80d160:	deffe004 	addi	sp,sp,-128
  80d164:	dc401815 	stw	r17,96(sp)
  80d168:	dc400404 	addi	r17,sp,16
  80d16c:	2011883a 	mov	r8,r4
  80d170:	2813883a 	mov	r9,r5
  80d174:	dc001715 	stw	r16,92(sp)
  80d178:	d809883a 	mov	r4,sp
  80d17c:	880b883a 	mov	r5,r17
  80d180:	dc000904 	addi	r16,sp,36
  80d184:	dfc01f15 	stw	ra,124(sp)
  80d188:	da400115 	stw	r9,4(sp)
  80d18c:	d9c00315 	stw	r7,12(sp)
  80d190:	da000015 	stw	r8,0(sp)
  80d194:	d9800215 	stw	r6,8(sp)
  80d198:	ddc01e15 	stw	r23,120(sp)
  80d19c:	dd801d15 	stw	r22,116(sp)
  80d1a0:	dd401c15 	stw	r21,112(sp)
  80d1a4:	dd001b15 	stw	r20,108(sp)
  80d1a8:	dcc01a15 	stw	r19,104(sp)
  80d1ac:	dc801915 	stw	r18,100(sp)
  80d1b0:	080e3000 	call	80e300 <__unpack_d>
  80d1b4:	d9000204 	addi	r4,sp,8
  80d1b8:	800b883a 	mov	r5,r16
  80d1bc:	080e3000 	call	80e300 <__unpack_d>
  80d1c0:	d9000417 	ldw	r4,16(sp)
  80d1c4:	00800044 	movi	r2,1
  80d1c8:	1100102e 	bgeu	r2,r4,80d20c <__muldf3+0xac>
  80d1cc:	d8c00917 	ldw	r3,36(sp)
  80d1d0:	10c0062e 	bgeu	r2,r3,80d1ec <__muldf3+0x8c>
  80d1d4:	00800104 	movi	r2,4
  80d1d8:	20800a26 	beq	r4,r2,80d204 <__muldf3+0xa4>
  80d1dc:	1880cc26 	beq	r3,r2,80d510 <__muldf3+0x3b0>
  80d1e0:	00800084 	movi	r2,2
  80d1e4:	20800926 	beq	r4,r2,80d20c <__muldf3+0xac>
  80d1e8:	1880191e 	bne	r3,r2,80d250 <__muldf3+0xf0>
  80d1ec:	d8c00a17 	ldw	r3,40(sp)
  80d1f0:	d8800517 	ldw	r2,20(sp)
  80d1f4:	8009883a 	mov	r4,r16
  80d1f8:	10c4c03a 	cmpne	r2,r2,r3
  80d1fc:	d8800a15 	stw	r2,40(sp)
  80d200:	00000706 	br	80d220 <__muldf3+0xc0>
  80d204:	00800084 	movi	r2,2
  80d208:	1880c326 	beq	r3,r2,80d518 <__muldf3+0x3b8>
  80d20c:	d8800517 	ldw	r2,20(sp)
  80d210:	d8c00a17 	ldw	r3,40(sp)
  80d214:	8809883a 	mov	r4,r17
  80d218:	10c4c03a 	cmpne	r2,r2,r3
  80d21c:	d8800515 	stw	r2,20(sp)
  80d220:	080dfec0 	call	80dfec <__pack_d>
  80d224:	dfc01f17 	ldw	ra,124(sp)
  80d228:	ddc01e17 	ldw	r23,120(sp)
  80d22c:	dd801d17 	ldw	r22,116(sp)
  80d230:	dd401c17 	ldw	r21,112(sp)
  80d234:	dd001b17 	ldw	r20,108(sp)
  80d238:	dcc01a17 	ldw	r19,104(sp)
  80d23c:	dc801917 	ldw	r18,100(sp)
  80d240:	dc401817 	ldw	r17,96(sp)
  80d244:	dc001717 	ldw	r16,92(sp)
  80d248:	dec02004 	addi	sp,sp,128
  80d24c:	f800283a 	ret
  80d250:	dd800717 	ldw	r22,28(sp)
  80d254:	dc800c17 	ldw	r18,48(sp)
  80d258:	002b883a 	mov	r21,zero
  80d25c:	0023883a 	mov	r17,zero
  80d260:	a80b883a 	mov	r5,r21
  80d264:	b00d883a 	mov	r6,r22
  80d268:	880f883a 	mov	r7,r17
  80d26c:	ddc00817 	ldw	r23,32(sp)
  80d270:	dcc00d17 	ldw	r19,52(sp)
  80d274:	9009883a 	mov	r4,r18
  80d278:	080ded40 	call	80ded4 <__muldi3>
  80d27c:	001b883a 	mov	r13,zero
  80d280:	680f883a 	mov	r7,r13
  80d284:	b009883a 	mov	r4,r22
  80d288:	000b883a 	mov	r5,zero
  80d28c:	980d883a 	mov	r6,r19
  80d290:	b82d883a 	mov	r22,r23
  80d294:	002f883a 	mov	r23,zero
  80d298:	db401615 	stw	r13,88(sp)
  80d29c:	d8801315 	stw	r2,76(sp)
  80d2a0:	d8c01415 	stw	r3,80(sp)
  80d2a4:	dcc01515 	stw	r19,84(sp)
  80d2a8:	080ded40 	call	80ded4 <__muldi3>
  80d2ac:	b00d883a 	mov	r6,r22
  80d2b0:	000b883a 	mov	r5,zero
  80d2b4:	9009883a 	mov	r4,r18
  80d2b8:	b80f883a 	mov	r7,r23
  80d2bc:	1021883a 	mov	r16,r2
  80d2c0:	1823883a 	mov	r17,r3
  80d2c4:	080ded40 	call	80ded4 <__muldi3>
  80d2c8:	8085883a 	add	r2,r16,r2
  80d2cc:	140d803a 	cmpltu	r6,r2,r16
  80d2d0:	88c7883a 	add	r3,r17,r3
  80d2d4:	30cd883a 	add	r6,r6,r3
  80d2d8:	1029883a 	mov	r20,r2
  80d2dc:	302b883a 	mov	r21,r6
  80d2e0:	da801317 	ldw	r10,76(sp)
  80d2e4:	dac01417 	ldw	r11,80(sp)
  80d2e8:	db001517 	ldw	r12,84(sp)
  80d2ec:	db401617 	ldw	r13,88(sp)
  80d2f0:	3440612e 	bgeu	r6,r17,80d478 <__muldf3+0x318>
  80d2f4:	0009883a 	mov	r4,zero
  80d2f8:	5105883a 	add	r2,r10,r4
  80d2fc:	128d803a 	cmpltu	r6,r2,r10
  80d300:	5d07883a 	add	r3,r11,r20
  80d304:	30cd883a 	add	r6,r6,r3
  80d308:	0021883a 	mov	r16,zero
  80d30c:	04400044 	movi	r17,1
  80d310:	1025883a 	mov	r18,r2
  80d314:	3027883a 	mov	r19,r6
  80d318:	32c06236 	bltu	r6,r11,80d4a4 <__muldf3+0x344>
  80d31c:	59807a26 	beq	r11,r6,80d508 <__muldf3+0x3a8>
  80d320:	680b883a 	mov	r5,r13
  80d324:	b80f883a 	mov	r7,r23
  80d328:	6009883a 	mov	r4,r12
  80d32c:	b00d883a 	mov	r6,r22
  80d330:	080ded40 	call	80ded4 <__muldi3>
  80d334:	1009883a 	mov	r4,r2
  80d338:	000f883a 	mov	r7,zero
  80d33c:	1545883a 	add	r2,r2,r21
  80d340:	1111803a 	cmpltu	r8,r2,r4
  80d344:	19c7883a 	add	r3,r3,r7
  80d348:	40c7883a 	add	r3,r8,r3
  80d34c:	88cb883a 	add	r5,r17,r3
  80d350:	d8c00617 	ldw	r3,24(sp)
  80d354:	8089883a 	add	r4,r16,r2
  80d358:	d8800b17 	ldw	r2,44(sp)
  80d35c:	18c00104 	addi	r3,r3,4
  80d360:	240d803a 	cmpltu	r6,r4,r16
  80d364:	10c7883a 	add	r3,r2,r3
  80d368:	2013883a 	mov	r9,r4
  80d36c:	d8800a17 	ldw	r2,40(sp)
  80d370:	d9000517 	ldw	r4,20(sp)
  80d374:	314d883a 	add	r6,r6,r5
  80d378:	3015883a 	mov	r10,r6
  80d37c:	2088c03a 	cmpne	r4,r4,r2
  80d380:	00880034 	movhi	r2,8192
  80d384:	10bfffc4 	addi	r2,r2,-1
  80d388:	d9000f15 	stw	r4,60(sp)
  80d38c:	d8c01015 	stw	r3,64(sp)
  80d390:	1180162e 	bgeu	r2,r6,80d3ec <__muldf3+0x28c>
  80d394:	1811883a 	mov	r8,r3
  80d398:	101f883a 	mov	r15,r2
  80d39c:	980497fa 	slli	r2,r19,31
  80d3a0:	9016d07a 	srli	r11,r18,1
  80d3a4:	500697fa 	slli	r3,r10,31
  80d3a8:	480cd07a 	srli	r6,r9,1
  80d3ac:	500ed07a 	srli	r7,r10,1
  80d3b0:	12d6b03a 	or	r11,r2,r11
  80d3b4:	00800044 	movi	r2,1
  80d3b8:	198cb03a 	or	r6,r3,r6
  80d3bc:	4888703a 	and	r4,r9,r2
  80d3c0:	9818d07a 	srli	r12,r19,1
  80d3c4:	001b883a 	mov	r13,zero
  80d3c8:	03a00034 	movhi	r14,32768
  80d3cc:	3013883a 	mov	r9,r6
  80d3d0:	3815883a 	mov	r10,r7
  80d3d4:	4091883a 	add	r8,r8,r2
  80d3d8:	20000226 	beq	r4,zero,80d3e4 <__muldf3+0x284>
  80d3dc:	5b64b03a 	or	r18,r11,r13
  80d3e0:	63a6b03a 	or	r19,r12,r14
  80d3e4:	7abfed36 	bltu	r15,r10,80d39c <__muldf3+0x23c>
  80d3e8:	da001015 	stw	r8,64(sp)
  80d3ec:	00840034 	movhi	r2,4096
  80d3f0:	10bfffc4 	addi	r2,r2,-1
  80d3f4:	12801436 	bltu	r2,r10,80d448 <__muldf3+0x2e8>
  80d3f8:	da001017 	ldw	r8,64(sp)
  80d3fc:	101f883a 	mov	r15,r2
  80d400:	4a45883a 	add	r2,r9,r9
  80d404:	124d803a 	cmpltu	r6,r2,r9
  80d408:	5287883a 	add	r3,r10,r10
  80d40c:	9497883a 	add	r11,r18,r18
  80d410:	5c8f803a 	cmpltu	r7,r11,r18
  80d414:	9cd9883a 	add	r12,r19,r19
  80d418:	01000044 	movi	r4,1
  80d41c:	30cd883a 	add	r6,r6,r3
  80d420:	3b0f883a 	add	r7,r7,r12
  80d424:	423fffc4 	addi	r8,r8,-1
  80d428:	1013883a 	mov	r9,r2
  80d42c:	3015883a 	mov	r10,r6
  80d430:	111ab03a 	or	r13,r2,r4
  80d434:	98003016 	blt	r19,zero,80d4f8 <__muldf3+0x398>
  80d438:	5825883a 	mov	r18,r11
  80d43c:	3827883a 	mov	r19,r7
  80d440:	7abfef2e 	bgeu	r15,r10,80d400 <__muldf3+0x2a0>
  80d444:	da001015 	stw	r8,64(sp)
  80d448:	00803fc4 	movi	r2,255
  80d44c:	488e703a 	and	r7,r9,r2
  80d450:	00802004 	movi	r2,128
  80d454:	0007883a 	mov	r3,zero
  80d458:	0011883a 	mov	r8,zero
  80d45c:	38801826 	beq	r7,r2,80d4c0 <__muldf3+0x360>
  80d460:	008000c4 	movi	r2,3
  80d464:	d9000e04 	addi	r4,sp,56
  80d468:	da801215 	stw	r10,72(sp)
  80d46c:	d8800e15 	stw	r2,56(sp)
  80d470:	da401115 	stw	r9,68(sp)
  80d474:	003f6a06 	br	80d220 <__muldf3+0xc0>
  80d478:	89802126 	beq	r17,r6,80d500 <__muldf3+0x3a0>
  80d47c:	0009883a 	mov	r4,zero
  80d480:	5105883a 	add	r2,r10,r4
  80d484:	128d803a 	cmpltu	r6,r2,r10
  80d488:	5d07883a 	add	r3,r11,r20
  80d48c:	30cd883a 	add	r6,r6,r3
  80d490:	0021883a 	mov	r16,zero
  80d494:	0023883a 	mov	r17,zero
  80d498:	1025883a 	mov	r18,r2
  80d49c:	3027883a 	mov	r19,r6
  80d4a0:	32ff9e2e 	bgeu	r6,r11,80d31c <__muldf3+0x1bc>
  80d4a4:	00800044 	movi	r2,1
  80d4a8:	8089883a 	add	r4,r16,r2
  80d4ac:	240d803a 	cmpltu	r6,r4,r16
  80d4b0:	344d883a 	add	r6,r6,r17
  80d4b4:	2021883a 	mov	r16,r4
  80d4b8:	3023883a 	mov	r17,r6
  80d4bc:	003f9806 	br	80d320 <__muldf3+0x1c0>
  80d4c0:	403fe71e 	bne	r8,zero,80d460 <__muldf3+0x300>
  80d4c4:	01004004 	movi	r4,256
  80d4c8:	4904703a 	and	r2,r9,r4
  80d4cc:	10c4b03a 	or	r2,r2,r3
  80d4d0:	103fe31e 	bne	r2,zero,80d460 <__muldf3+0x300>
  80d4d4:	94c4b03a 	or	r2,r18,r19
  80d4d8:	103fe126 	beq	r2,zero,80d460 <__muldf3+0x300>
  80d4dc:	49c5883a 	add	r2,r9,r7
  80d4e0:	1251803a 	cmpltu	r8,r2,r9
  80d4e4:	4291883a 	add	r8,r8,r10
  80d4e8:	013fc004 	movi	r4,-256
  80d4ec:	1112703a 	and	r9,r2,r4
  80d4f0:	4015883a 	mov	r10,r8
  80d4f4:	003fda06 	br	80d460 <__muldf3+0x300>
  80d4f8:	6813883a 	mov	r9,r13
  80d4fc:	003fce06 	br	80d438 <__muldf3+0x2d8>
  80d500:	143f7c36 	bltu	r2,r16,80d2f4 <__muldf3+0x194>
  80d504:	003fdd06 	br	80d47c <__muldf3+0x31c>
  80d508:	12bf852e 	bgeu	r2,r10,80d320 <__muldf3+0x1c0>
  80d50c:	003fe506 	br	80d4a4 <__muldf3+0x344>
  80d510:	00800084 	movi	r2,2
  80d514:	20bf351e 	bne	r4,r2,80d1ec <__muldf3+0x8c>
  80d518:	01002074 	movhi	r4,129
  80d51c:	210a2504 	addi	r4,r4,10388
  80d520:	003f3f06 	br	80d220 <__muldf3+0xc0>

0080d524 <__divdf3>:
  80d524:	deffed04 	addi	sp,sp,-76
  80d528:	dcc01115 	stw	r19,68(sp)
  80d52c:	dcc00404 	addi	r19,sp,16
  80d530:	2011883a 	mov	r8,r4
  80d534:	2813883a 	mov	r9,r5
  80d538:	dc000e15 	stw	r16,56(sp)
  80d53c:	d809883a 	mov	r4,sp
  80d540:	980b883a 	mov	r5,r19
  80d544:	dc000904 	addi	r16,sp,36
  80d548:	dfc01215 	stw	ra,72(sp)
  80d54c:	da400115 	stw	r9,4(sp)
  80d550:	d9c00315 	stw	r7,12(sp)
  80d554:	da000015 	stw	r8,0(sp)
  80d558:	d9800215 	stw	r6,8(sp)
  80d55c:	dc801015 	stw	r18,64(sp)
  80d560:	dc400f15 	stw	r17,60(sp)
  80d564:	080e3000 	call	80e300 <__unpack_d>
  80d568:	d9000204 	addi	r4,sp,8
  80d56c:	800b883a 	mov	r5,r16
  80d570:	080e3000 	call	80e300 <__unpack_d>
  80d574:	d9000417 	ldw	r4,16(sp)
  80d578:	00800044 	movi	r2,1
  80d57c:	11000b2e 	bgeu	r2,r4,80d5ac <__divdf3+0x88>
  80d580:	d9400917 	ldw	r5,36(sp)
  80d584:	1140762e 	bgeu	r2,r5,80d760 <__divdf3+0x23c>
  80d588:	d8800517 	ldw	r2,20(sp)
  80d58c:	d8c00a17 	ldw	r3,40(sp)
  80d590:	01800104 	movi	r6,4
  80d594:	10c4f03a 	xor	r2,r2,r3
  80d598:	d8800515 	stw	r2,20(sp)
  80d59c:	21800226 	beq	r4,r6,80d5a8 <__divdf3+0x84>
  80d5a0:	00800084 	movi	r2,2
  80d5a4:	2080141e 	bne	r4,r2,80d5f8 <__divdf3+0xd4>
  80d5a8:	29000926 	beq	r5,r4,80d5d0 <__divdf3+0xac>
  80d5ac:	9809883a 	mov	r4,r19
  80d5b0:	080dfec0 	call	80dfec <__pack_d>
  80d5b4:	dfc01217 	ldw	ra,72(sp)
  80d5b8:	dcc01117 	ldw	r19,68(sp)
  80d5bc:	dc801017 	ldw	r18,64(sp)
  80d5c0:	dc400f17 	ldw	r17,60(sp)
  80d5c4:	dc000e17 	ldw	r16,56(sp)
  80d5c8:	dec01304 	addi	sp,sp,76
  80d5cc:	f800283a 	ret
  80d5d0:	01002074 	movhi	r4,129
  80d5d4:	210a2504 	addi	r4,r4,10388
  80d5d8:	080dfec0 	call	80dfec <__pack_d>
  80d5dc:	dfc01217 	ldw	ra,72(sp)
  80d5e0:	dcc01117 	ldw	r19,68(sp)
  80d5e4:	dc801017 	ldw	r18,64(sp)
  80d5e8:	dc400f17 	ldw	r17,60(sp)
  80d5ec:	dc000e17 	ldw	r16,56(sp)
  80d5f0:	dec01304 	addi	sp,sp,76
  80d5f4:	f800283a 	ret
  80d5f8:	29805b26 	beq	r5,r6,80d768 <__divdf3+0x244>
  80d5fc:	28802d26 	beq	r5,r2,80d6b4 <__divdf3+0x190>
  80d600:	d8c00617 	ldw	r3,24(sp)
  80d604:	d8800b17 	ldw	r2,44(sp)
  80d608:	d9c00817 	ldw	r7,32(sp)
  80d60c:	dc400d17 	ldw	r17,52(sp)
  80d610:	188bc83a 	sub	r5,r3,r2
  80d614:	d9800717 	ldw	r6,28(sp)
  80d618:	dc000c17 	ldw	r16,48(sp)
  80d61c:	d9400615 	stw	r5,24(sp)
  80d620:	3c403836 	bltu	r7,r17,80d704 <__divdf3+0x1e0>
  80d624:	89c03626 	beq	r17,r7,80d700 <__divdf3+0x1dc>
  80d628:	0015883a 	mov	r10,zero
  80d62c:	001d883a 	mov	r14,zero
  80d630:	02c40034 	movhi	r11,4096
  80d634:	001f883a 	mov	r15,zero
  80d638:	003f883a 	mov	ra,zero
  80d63c:	04800f44 	movi	r18,61
  80d640:	00000f06 	br	80d680 <__divdf3+0x15c>
  80d644:	601d883a 	mov	r14,r12
  80d648:	681f883a 	mov	r15,r13
  80d64c:	400d883a 	mov	r6,r8
  80d650:	100f883a 	mov	r7,r2
  80d654:	3191883a 	add	r8,r6,r6
  80d658:	5808d07a 	srli	r4,r11,1
  80d65c:	4185803a 	cmpltu	r2,r8,r6
  80d660:	39d3883a 	add	r9,r7,r7
  80d664:	28c6b03a 	or	r3,r5,r3
  80d668:	1245883a 	add	r2,r2,r9
  80d66c:	1815883a 	mov	r10,r3
  80d670:	2017883a 	mov	r11,r4
  80d674:	400d883a 	mov	r6,r8
  80d678:	100f883a 	mov	r7,r2
  80d67c:	fc801726 	beq	ra,r18,80d6dc <__divdf3+0x1b8>
  80d680:	580a97fa 	slli	r5,r11,31
  80d684:	5006d07a 	srli	r3,r10,1
  80d688:	ffc00044 	addi	ra,ra,1
  80d68c:	3c7ff136 	bltu	r7,r17,80d654 <__divdf3+0x130>
  80d690:	3411c83a 	sub	r8,r6,r16
  80d694:	3205803a 	cmpltu	r2,r6,r8
  80d698:	3c53c83a 	sub	r9,r7,r17
  80d69c:	7298b03a 	or	r12,r14,r10
  80d6a0:	7adab03a 	or	r13,r15,r11
  80d6a4:	4885c83a 	sub	r2,r9,r2
  80d6a8:	89ffe61e 	bne	r17,r7,80d644 <__divdf3+0x120>
  80d6ac:	343fe936 	bltu	r6,r16,80d654 <__divdf3+0x130>
  80d6b0:	003fe406 	br	80d644 <__divdf3+0x120>
  80d6b4:	9809883a 	mov	r4,r19
  80d6b8:	d9800415 	stw	r6,16(sp)
  80d6bc:	080dfec0 	call	80dfec <__pack_d>
  80d6c0:	dfc01217 	ldw	ra,72(sp)
  80d6c4:	dcc01117 	ldw	r19,68(sp)
  80d6c8:	dc801017 	ldw	r18,64(sp)
  80d6cc:	dc400f17 	ldw	r17,60(sp)
  80d6d0:	dc000e17 	ldw	r16,56(sp)
  80d6d4:	dec01304 	addi	sp,sp,76
  80d6d8:	f800283a 	ret
  80d6dc:	00803fc4 	movi	r2,255
  80d6e0:	7090703a 	and	r8,r14,r2
  80d6e4:	00802004 	movi	r2,128
  80d6e8:	0007883a 	mov	r3,zero
  80d6ec:	0013883a 	mov	r9,zero
  80d6f0:	40800d26 	beq	r8,r2,80d728 <__divdf3+0x204>
  80d6f4:	dbc00815 	stw	r15,32(sp)
  80d6f8:	db800715 	stw	r14,28(sp)
  80d6fc:	003fab06 	br	80d5ac <__divdf3+0x88>
  80d700:	343fc92e 	bgeu	r6,r16,80d628 <__divdf3+0x104>
  80d704:	3185883a 	add	r2,r6,r6
  80d708:	1189803a 	cmpltu	r4,r2,r6
  80d70c:	39c7883a 	add	r3,r7,r7
  80d710:	20c9883a 	add	r4,r4,r3
  80d714:	297fffc4 	addi	r5,r5,-1
  80d718:	100d883a 	mov	r6,r2
  80d71c:	200f883a 	mov	r7,r4
  80d720:	d9400615 	stw	r5,24(sp)
  80d724:	003fc006 	br	80d628 <__divdf3+0x104>
  80d728:	483ff21e 	bne	r9,zero,80d6f4 <__divdf3+0x1d0>
  80d72c:	01004004 	movi	r4,256
  80d730:	7104703a 	and	r2,r14,r4
  80d734:	10c4b03a 	or	r2,r2,r3
  80d738:	103fee1e 	bne	r2,zero,80d6f4 <__divdf3+0x1d0>
  80d73c:	31c4b03a 	or	r2,r6,r7
  80d740:	103fec26 	beq	r2,zero,80d6f4 <__divdf3+0x1d0>
  80d744:	7205883a 	add	r2,r14,r8
  80d748:	1391803a 	cmpltu	r8,r2,r14
  80d74c:	43d1883a 	add	r8,r8,r15
  80d750:	013fc004 	movi	r4,-256
  80d754:	111c703a 	and	r14,r2,r4
  80d758:	401f883a 	mov	r15,r8
  80d75c:	003fe506 	br	80d6f4 <__divdf3+0x1d0>
  80d760:	8009883a 	mov	r4,r16
  80d764:	003f9206 	br	80d5b0 <__divdf3+0x8c>
  80d768:	9809883a 	mov	r4,r19
  80d76c:	d8000715 	stw	zero,28(sp)
  80d770:	d8000815 	stw	zero,32(sp)
  80d774:	d8000615 	stw	zero,24(sp)
  80d778:	003f8d06 	br	80d5b0 <__divdf3+0x8c>

0080d77c <__eqdf2>:
  80d77c:	deffef04 	addi	sp,sp,-68
  80d780:	dc400f15 	stw	r17,60(sp)
  80d784:	dc400404 	addi	r17,sp,16
  80d788:	2005883a 	mov	r2,r4
  80d78c:	2807883a 	mov	r3,r5
  80d790:	dc000e15 	stw	r16,56(sp)
  80d794:	d809883a 	mov	r4,sp
  80d798:	880b883a 	mov	r5,r17
  80d79c:	dc000904 	addi	r16,sp,36
  80d7a0:	d8c00115 	stw	r3,4(sp)
  80d7a4:	d8800015 	stw	r2,0(sp)
  80d7a8:	d9800215 	stw	r6,8(sp)
  80d7ac:	dfc01015 	stw	ra,64(sp)
  80d7b0:	d9c00315 	stw	r7,12(sp)
  80d7b4:	080e3000 	call	80e300 <__unpack_d>
  80d7b8:	d9000204 	addi	r4,sp,8
  80d7bc:	800b883a 	mov	r5,r16
  80d7c0:	080e3000 	call	80e300 <__unpack_d>
  80d7c4:	d8800417 	ldw	r2,16(sp)
  80d7c8:	00c00044 	movi	r3,1
  80d7cc:	180d883a 	mov	r6,r3
  80d7d0:	1880062e 	bgeu	r3,r2,80d7ec <__eqdf2+0x70>
  80d7d4:	d8800917 	ldw	r2,36(sp)
  80d7d8:	8809883a 	mov	r4,r17
  80d7dc:	800b883a 	mov	r5,r16
  80d7e0:	1880022e 	bgeu	r3,r2,80d7ec <__eqdf2+0x70>
  80d7e4:	080e4380 	call	80e438 <__fpcmp_parts_d>
  80d7e8:	100d883a 	mov	r6,r2
  80d7ec:	3005883a 	mov	r2,r6
  80d7f0:	dfc01017 	ldw	ra,64(sp)
  80d7f4:	dc400f17 	ldw	r17,60(sp)
  80d7f8:	dc000e17 	ldw	r16,56(sp)
  80d7fc:	dec01104 	addi	sp,sp,68
  80d800:	f800283a 	ret

0080d804 <__nedf2>:
  80d804:	deffef04 	addi	sp,sp,-68
  80d808:	dc400f15 	stw	r17,60(sp)
  80d80c:	dc400404 	addi	r17,sp,16
  80d810:	2005883a 	mov	r2,r4
  80d814:	2807883a 	mov	r3,r5
  80d818:	dc000e15 	stw	r16,56(sp)
  80d81c:	d809883a 	mov	r4,sp
  80d820:	880b883a 	mov	r5,r17
  80d824:	dc000904 	addi	r16,sp,36
  80d828:	d8c00115 	stw	r3,4(sp)
  80d82c:	d8800015 	stw	r2,0(sp)
  80d830:	d9800215 	stw	r6,8(sp)
  80d834:	dfc01015 	stw	ra,64(sp)
  80d838:	d9c00315 	stw	r7,12(sp)
  80d83c:	080e3000 	call	80e300 <__unpack_d>
  80d840:	d9000204 	addi	r4,sp,8
  80d844:	800b883a 	mov	r5,r16
  80d848:	080e3000 	call	80e300 <__unpack_d>
  80d84c:	d8800417 	ldw	r2,16(sp)
  80d850:	00c00044 	movi	r3,1
  80d854:	180d883a 	mov	r6,r3
  80d858:	1880062e 	bgeu	r3,r2,80d874 <__nedf2+0x70>
  80d85c:	d8800917 	ldw	r2,36(sp)
  80d860:	8809883a 	mov	r4,r17
  80d864:	800b883a 	mov	r5,r16
  80d868:	1880022e 	bgeu	r3,r2,80d874 <__nedf2+0x70>
  80d86c:	080e4380 	call	80e438 <__fpcmp_parts_d>
  80d870:	100d883a 	mov	r6,r2
  80d874:	3005883a 	mov	r2,r6
  80d878:	dfc01017 	ldw	ra,64(sp)
  80d87c:	dc400f17 	ldw	r17,60(sp)
  80d880:	dc000e17 	ldw	r16,56(sp)
  80d884:	dec01104 	addi	sp,sp,68
  80d888:	f800283a 	ret

0080d88c <__gtdf2>:
  80d88c:	deffef04 	addi	sp,sp,-68
  80d890:	dc400f15 	stw	r17,60(sp)
  80d894:	dc400404 	addi	r17,sp,16
  80d898:	2005883a 	mov	r2,r4
  80d89c:	2807883a 	mov	r3,r5
  80d8a0:	dc000e15 	stw	r16,56(sp)
  80d8a4:	d809883a 	mov	r4,sp
  80d8a8:	880b883a 	mov	r5,r17
  80d8ac:	dc000904 	addi	r16,sp,36
  80d8b0:	d8c00115 	stw	r3,4(sp)
  80d8b4:	d8800015 	stw	r2,0(sp)
  80d8b8:	d9800215 	stw	r6,8(sp)
  80d8bc:	dfc01015 	stw	ra,64(sp)
  80d8c0:	d9c00315 	stw	r7,12(sp)
  80d8c4:	080e3000 	call	80e300 <__unpack_d>
  80d8c8:	d9000204 	addi	r4,sp,8
  80d8cc:	800b883a 	mov	r5,r16
  80d8d0:	080e3000 	call	80e300 <__unpack_d>
  80d8d4:	d8800417 	ldw	r2,16(sp)
  80d8d8:	00c00044 	movi	r3,1
  80d8dc:	01bfffc4 	movi	r6,-1
  80d8e0:	1880062e 	bgeu	r3,r2,80d8fc <__gtdf2+0x70>
  80d8e4:	d8800917 	ldw	r2,36(sp)
  80d8e8:	8809883a 	mov	r4,r17
  80d8ec:	800b883a 	mov	r5,r16
  80d8f0:	1880022e 	bgeu	r3,r2,80d8fc <__gtdf2+0x70>
  80d8f4:	080e4380 	call	80e438 <__fpcmp_parts_d>
  80d8f8:	100d883a 	mov	r6,r2
  80d8fc:	3005883a 	mov	r2,r6
  80d900:	dfc01017 	ldw	ra,64(sp)
  80d904:	dc400f17 	ldw	r17,60(sp)
  80d908:	dc000e17 	ldw	r16,56(sp)
  80d90c:	dec01104 	addi	sp,sp,68
  80d910:	f800283a 	ret

0080d914 <__gedf2>:
  80d914:	deffef04 	addi	sp,sp,-68
  80d918:	dc400f15 	stw	r17,60(sp)
  80d91c:	dc400404 	addi	r17,sp,16
  80d920:	2005883a 	mov	r2,r4
  80d924:	2807883a 	mov	r3,r5
  80d928:	dc000e15 	stw	r16,56(sp)
  80d92c:	d809883a 	mov	r4,sp
  80d930:	880b883a 	mov	r5,r17
  80d934:	dc000904 	addi	r16,sp,36
  80d938:	d8c00115 	stw	r3,4(sp)
  80d93c:	d8800015 	stw	r2,0(sp)
  80d940:	d9800215 	stw	r6,8(sp)
  80d944:	dfc01015 	stw	ra,64(sp)
  80d948:	d9c00315 	stw	r7,12(sp)
  80d94c:	080e3000 	call	80e300 <__unpack_d>
  80d950:	d9000204 	addi	r4,sp,8
  80d954:	800b883a 	mov	r5,r16
  80d958:	080e3000 	call	80e300 <__unpack_d>
  80d95c:	d8800417 	ldw	r2,16(sp)
  80d960:	00c00044 	movi	r3,1
  80d964:	01bfffc4 	movi	r6,-1
  80d968:	1880062e 	bgeu	r3,r2,80d984 <__gedf2+0x70>
  80d96c:	d8800917 	ldw	r2,36(sp)
  80d970:	8809883a 	mov	r4,r17
  80d974:	800b883a 	mov	r5,r16
  80d978:	1880022e 	bgeu	r3,r2,80d984 <__gedf2+0x70>
  80d97c:	080e4380 	call	80e438 <__fpcmp_parts_d>
  80d980:	100d883a 	mov	r6,r2
  80d984:	3005883a 	mov	r2,r6
  80d988:	dfc01017 	ldw	ra,64(sp)
  80d98c:	dc400f17 	ldw	r17,60(sp)
  80d990:	dc000e17 	ldw	r16,56(sp)
  80d994:	dec01104 	addi	sp,sp,68
  80d998:	f800283a 	ret

0080d99c <__ltdf2>:
  80d99c:	deffef04 	addi	sp,sp,-68
  80d9a0:	dc400f15 	stw	r17,60(sp)
  80d9a4:	dc400404 	addi	r17,sp,16
  80d9a8:	2005883a 	mov	r2,r4
  80d9ac:	2807883a 	mov	r3,r5
  80d9b0:	dc000e15 	stw	r16,56(sp)
  80d9b4:	d809883a 	mov	r4,sp
  80d9b8:	880b883a 	mov	r5,r17
  80d9bc:	dc000904 	addi	r16,sp,36
  80d9c0:	d8c00115 	stw	r3,4(sp)
  80d9c4:	d8800015 	stw	r2,0(sp)
  80d9c8:	d9800215 	stw	r6,8(sp)
  80d9cc:	dfc01015 	stw	ra,64(sp)
  80d9d0:	d9c00315 	stw	r7,12(sp)
  80d9d4:	080e3000 	call	80e300 <__unpack_d>
  80d9d8:	d9000204 	addi	r4,sp,8
  80d9dc:	800b883a 	mov	r5,r16
  80d9e0:	080e3000 	call	80e300 <__unpack_d>
  80d9e4:	d8800417 	ldw	r2,16(sp)
  80d9e8:	00c00044 	movi	r3,1
  80d9ec:	180d883a 	mov	r6,r3
  80d9f0:	1880062e 	bgeu	r3,r2,80da0c <__ltdf2+0x70>
  80d9f4:	d8800917 	ldw	r2,36(sp)
  80d9f8:	8809883a 	mov	r4,r17
  80d9fc:	800b883a 	mov	r5,r16
  80da00:	1880022e 	bgeu	r3,r2,80da0c <__ltdf2+0x70>
  80da04:	080e4380 	call	80e438 <__fpcmp_parts_d>
  80da08:	100d883a 	mov	r6,r2
  80da0c:	3005883a 	mov	r2,r6
  80da10:	dfc01017 	ldw	ra,64(sp)
  80da14:	dc400f17 	ldw	r17,60(sp)
  80da18:	dc000e17 	ldw	r16,56(sp)
  80da1c:	dec01104 	addi	sp,sp,68
  80da20:	f800283a 	ret

0080da24 <__floatsidf>:
  80da24:	2006d7fa 	srli	r3,r4,31
  80da28:	defff604 	addi	sp,sp,-40
  80da2c:	008000c4 	movi	r2,3
  80da30:	dfc00915 	stw	ra,36(sp)
  80da34:	dcc00815 	stw	r19,32(sp)
  80da38:	dc800715 	stw	r18,28(sp)
  80da3c:	dc400615 	stw	r17,24(sp)
  80da40:	dc000515 	stw	r16,20(sp)
  80da44:	d8800015 	stw	r2,0(sp)
  80da48:	d8c00115 	stw	r3,4(sp)
  80da4c:	20000f1e 	bne	r4,zero,80da8c <__floatsidf+0x68>
  80da50:	00800084 	movi	r2,2
  80da54:	d8800015 	stw	r2,0(sp)
  80da58:	d809883a 	mov	r4,sp
  80da5c:	080dfec0 	call	80dfec <__pack_d>
  80da60:	1009883a 	mov	r4,r2
  80da64:	180b883a 	mov	r5,r3
  80da68:	2005883a 	mov	r2,r4
  80da6c:	2807883a 	mov	r3,r5
  80da70:	dfc00917 	ldw	ra,36(sp)
  80da74:	dcc00817 	ldw	r19,32(sp)
  80da78:	dc800717 	ldw	r18,28(sp)
  80da7c:	dc400617 	ldw	r17,24(sp)
  80da80:	dc000517 	ldw	r16,20(sp)
  80da84:	dec00a04 	addi	sp,sp,40
  80da88:	f800283a 	ret
  80da8c:	00800f04 	movi	r2,60
  80da90:	1807003a 	cmpeq	r3,r3,zero
  80da94:	d8800215 	stw	r2,8(sp)
  80da98:	18001126 	beq	r3,zero,80dae0 <__floatsidf+0xbc>
  80da9c:	0027883a 	mov	r19,zero
  80daa0:	2025883a 	mov	r18,r4
  80daa4:	d9000315 	stw	r4,12(sp)
  80daa8:	dcc00415 	stw	r19,16(sp)
  80daac:	080df6c0 	call	80df6c <__clzsi2>
  80dab0:	11000744 	addi	r4,r2,29
  80dab4:	013fe80e 	bge	zero,r4,80da58 <__floatsidf+0x34>
  80dab8:	10bfff44 	addi	r2,r2,-3
  80dabc:	10000c16 	blt	r2,zero,80daf0 <__floatsidf+0xcc>
  80dac0:	90a2983a 	sll	r17,r18,r2
  80dac4:	0021883a 	mov	r16,zero
  80dac8:	d8800217 	ldw	r2,8(sp)
  80dacc:	dc400415 	stw	r17,16(sp)
  80dad0:	dc000315 	stw	r16,12(sp)
  80dad4:	1105c83a 	sub	r2,r2,r4
  80dad8:	d8800215 	stw	r2,8(sp)
  80dadc:	003fde06 	br	80da58 <__floatsidf+0x34>
  80dae0:	00a00034 	movhi	r2,32768
  80dae4:	20800a26 	beq	r4,r2,80db10 <__floatsidf+0xec>
  80dae8:	0109c83a 	sub	r4,zero,r4
  80daec:	003feb06 	br	80da9c <__floatsidf+0x78>
  80daf0:	9006d07a 	srli	r3,r18,1
  80daf4:	008007c4 	movi	r2,31
  80daf8:	1105c83a 	sub	r2,r2,r4
  80dafc:	1886d83a 	srl	r3,r3,r2
  80db00:	9922983a 	sll	r17,r19,r4
  80db04:	9120983a 	sll	r16,r18,r4
  80db08:	1c62b03a 	or	r17,r3,r17
  80db0c:	003fee06 	br	80dac8 <__floatsidf+0xa4>
  80db10:	0009883a 	mov	r4,zero
  80db14:	01707834 	movhi	r5,49632
  80db18:	003fd306 	br	80da68 <__floatsidf+0x44>

0080db1c <__fixdfsi>:
  80db1c:	defff804 	addi	sp,sp,-32
  80db20:	2005883a 	mov	r2,r4
  80db24:	2807883a 	mov	r3,r5
  80db28:	d809883a 	mov	r4,sp
  80db2c:	d9400204 	addi	r5,sp,8
  80db30:	d8c00115 	stw	r3,4(sp)
  80db34:	d8800015 	stw	r2,0(sp)
  80db38:	dfc00715 	stw	ra,28(sp)
  80db3c:	080e3000 	call	80e300 <__unpack_d>
  80db40:	d8c00217 	ldw	r3,8(sp)
  80db44:	00800084 	movi	r2,2
  80db48:	1880051e 	bne	r3,r2,80db60 <__fixdfsi+0x44>
  80db4c:	0007883a 	mov	r3,zero
  80db50:	1805883a 	mov	r2,r3
  80db54:	dfc00717 	ldw	ra,28(sp)
  80db58:	dec00804 	addi	sp,sp,32
  80db5c:	f800283a 	ret
  80db60:	00800044 	movi	r2,1
  80db64:	10fff92e 	bgeu	r2,r3,80db4c <__fixdfsi+0x30>
  80db68:	00800104 	movi	r2,4
  80db6c:	18800426 	beq	r3,r2,80db80 <__fixdfsi+0x64>
  80db70:	d8c00417 	ldw	r3,16(sp)
  80db74:	183ff516 	blt	r3,zero,80db4c <__fixdfsi+0x30>
  80db78:	00800784 	movi	r2,30
  80db7c:	10c0080e 	bge	r2,r3,80dba0 <__fixdfsi+0x84>
  80db80:	d8800317 	ldw	r2,12(sp)
  80db84:	1000121e 	bne	r2,zero,80dbd0 <__fixdfsi+0xb4>
  80db88:	00e00034 	movhi	r3,32768
  80db8c:	18ffffc4 	addi	r3,r3,-1
  80db90:	1805883a 	mov	r2,r3
  80db94:	dfc00717 	ldw	ra,28(sp)
  80db98:	dec00804 	addi	sp,sp,32
  80db9c:	f800283a 	ret
  80dba0:	00800f04 	movi	r2,60
  80dba4:	10d1c83a 	sub	r8,r2,r3
  80dba8:	40bff804 	addi	r2,r8,-32
  80dbac:	d9800517 	ldw	r6,20(sp)
  80dbb0:	d9c00617 	ldw	r7,24(sp)
  80dbb4:	10000816 	blt	r2,zero,80dbd8 <__fixdfsi+0xbc>
  80dbb8:	3888d83a 	srl	r4,r7,r2
  80dbbc:	d8800317 	ldw	r2,12(sp)
  80dbc0:	2007883a 	mov	r3,r4
  80dbc4:	103fe226 	beq	r2,zero,80db50 <__fixdfsi+0x34>
  80dbc8:	0107c83a 	sub	r3,zero,r4
  80dbcc:	003fe006 	br	80db50 <__fixdfsi+0x34>
  80dbd0:	00e00034 	movhi	r3,32768
  80dbd4:	003fde06 	br	80db50 <__fixdfsi+0x34>
  80dbd8:	39c7883a 	add	r3,r7,r7
  80dbdc:	008007c4 	movi	r2,31
  80dbe0:	1205c83a 	sub	r2,r2,r8
  80dbe4:	1886983a 	sll	r3,r3,r2
  80dbe8:	3208d83a 	srl	r4,r6,r8
  80dbec:	1908b03a 	or	r4,r3,r4
  80dbf0:	003ff206 	br	80dbbc <__fixdfsi+0xa0>

0080dbf4 <__floatunsidf>:
  80dbf4:	defff204 	addi	sp,sp,-56
  80dbf8:	dfc00d15 	stw	ra,52(sp)
  80dbfc:	ddc00c15 	stw	r23,48(sp)
  80dc00:	dd800b15 	stw	r22,44(sp)
  80dc04:	dd400a15 	stw	r21,40(sp)
  80dc08:	dd000915 	stw	r20,36(sp)
  80dc0c:	dcc00815 	stw	r19,32(sp)
  80dc10:	dc800715 	stw	r18,28(sp)
  80dc14:	dc400615 	stw	r17,24(sp)
  80dc18:	dc000515 	stw	r16,20(sp)
  80dc1c:	d8000115 	stw	zero,4(sp)
  80dc20:	20000f1e 	bne	r4,zero,80dc60 <__floatunsidf+0x6c>
  80dc24:	00800084 	movi	r2,2
  80dc28:	d8800015 	stw	r2,0(sp)
  80dc2c:	d809883a 	mov	r4,sp
  80dc30:	080dfec0 	call	80dfec <__pack_d>
  80dc34:	dfc00d17 	ldw	ra,52(sp)
  80dc38:	ddc00c17 	ldw	r23,48(sp)
  80dc3c:	dd800b17 	ldw	r22,44(sp)
  80dc40:	dd400a17 	ldw	r21,40(sp)
  80dc44:	dd000917 	ldw	r20,36(sp)
  80dc48:	dcc00817 	ldw	r19,32(sp)
  80dc4c:	dc800717 	ldw	r18,28(sp)
  80dc50:	dc400617 	ldw	r17,24(sp)
  80dc54:	dc000517 	ldw	r16,20(sp)
  80dc58:	dec00e04 	addi	sp,sp,56
  80dc5c:	f800283a 	ret
  80dc60:	008000c4 	movi	r2,3
  80dc64:	00c00f04 	movi	r3,60
  80dc68:	002f883a 	mov	r23,zero
  80dc6c:	202d883a 	mov	r22,r4
  80dc70:	d8800015 	stw	r2,0(sp)
  80dc74:	d8c00215 	stw	r3,8(sp)
  80dc78:	d9000315 	stw	r4,12(sp)
  80dc7c:	ddc00415 	stw	r23,16(sp)
  80dc80:	080df6c0 	call	80df6c <__clzsi2>
  80dc84:	12400744 	addi	r9,r2,29
  80dc88:	48000b16 	blt	r9,zero,80dcb8 <__floatunsidf+0xc4>
  80dc8c:	483fe726 	beq	r9,zero,80dc2c <__floatunsidf+0x38>
  80dc90:	10bfff44 	addi	r2,r2,-3
  80dc94:	10002e16 	blt	r2,zero,80dd50 <__floatunsidf+0x15c>
  80dc98:	b0a2983a 	sll	r17,r22,r2
  80dc9c:	0021883a 	mov	r16,zero
  80dca0:	d8800217 	ldw	r2,8(sp)
  80dca4:	dc400415 	stw	r17,16(sp)
  80dca8:	dc000315 	stw	r16,12(sp)
  80dcac:	1245c83a 	sub	r2,r2,r9
  80dcb0:	d8800215 	stw	r2,8(sp)
  80dcb4:	003fdd06 	br	80dc2c <__floatunsidf+0x38>
  80dcb8:	0255c83a 	sub	r10,zero,r9
  80dcbc:	51bff804 	addi	r6,r10,-32
  80dcc0:	30001b16 	blt	r6,zero,80dd30 <__floatunsidf+0x13c>
  80dcc4:	b9a8d83a 	srl	r20,r23,r6
  80dcc8:	002b883a 	mov	r21,zero
  80dccc:	000f883a 	mov	r7,zero
  80dcd0:	01000044 	movi	r4,1
  80dcd4:	0011883a 	mov	r8,zero
  80dcd8:	30002516 	blt	r6,zero,80dd70 <__floatunsidf+0x17c>
  80dcdc:	21a6983a 	sll	r19,r4,r6
  80dce0:	0025883a 	mov	r18,zero
  80dce4:	00bfffc4 	movi	r2,-1
  80dce8:	9089883a 	add	r4,r18,r2
  80dcec:	988b883a 	add	r5,r19,r2
  80dcf0:	248d803a 	cmpltu	r6,r4,r18
  80dcf4:	314b883a 	add	r5,r6,r5
  80dcf8:	b104703a 	and	r2,r22,r4
  80dcfc:	b946703a 	and	r3,r23,r5
  80dd00:	10c4b03a 	or	r2,r2,r3
  80dd04:	10000226 	beq	r2,zero,80dd10 <__floatunsidf+0x11c>
  80dd08:	01c00044 	movi	r7,1
  80dd0c:	0011883a 	mov	r8,zero
  80dd10:	d9000217 	ldw	r4,8(sp)
  80dd14:	a1c4b03a 	or	r2,r20,r7
  80dd18:	aa06b03a 	or	r3,r21,r8
  80dd1c:	2249c83a 	sub	r4,r4,r9
  80dd20:	d8c00415 	stw	r3,16(sp)
  80dd24:	d9000215 	stw	r4,8(sp)
  80dd28:	d8800315 	stw	r2,12(sp)
  80dd2c:	003fbf06 	br	80dc2c <__floatunsidf+0x38>
  80dd30:	bdc7883a 	add	r3,r23,r23
  80dd34:	008007c4 	movi	r2,31
  80dd38:	1285c83a 	sub	r2,r2,r10
  80dd3c:	1886983a 	sll	r3,r3,r2
  80dd40:	b2a8d83a 	srl	r20,r22,r10
  80dd44:	baaad83a 	srl	r21,r23,r10
  80dd48:	1d28b03a 	or	r20,r3,r20
  80dd4c:	003fdf06 	br	80dccc <__floatunsidf+0xd8>
  80dd50:	b006d07a 	srli	r3,r22,1
  80dd54:	008007c4 	movi	r2,31
  80dd58:	1245c83a 	sub	r2,r2,r9
  80dd5c:	1886d83a 	srl	r3,r3,r2
  80dd60:	ba62983a 	sll	r17,r23,r9
  80dd64:	b260983a 	sll	r16,r22,r9
  80dd68:	1c62b03a 	or	r17,r3,r17
  80dd6c:	003fcc06 	br	80dca0 <__floatunsidf+0xac>
  80dd70:	2006d07a 	srli	r3,r4,1
  80dd74:	008007c4 	movi	r2,31
  80dd78:	1285c83a 	sub	r2,r2,r10
  80dd7c:	18a6d83a 	srl	r19,r3,r2
  80dd80:	22a4983a 	sll	r18,r4,r10
  80dd84:	003fd706 	br	80dce4 <__floatunsidf+0xf0>

0080dd88 <udivmodsi4>:
  80dd88:	29001b2e 	bgeu	r5,r4,80ddf8 <udivmodsi4+0x70>
  80dd8c:	28001a16 	blt	r5,zero,80ddf8 <udivmodsi4+0x70>
  80dd90:	00800044 	movi	r2,1
  80dd94:	0007883a 	mov	r3,zero
  80dd98:	01c007c4 	movi	r7,31
  80dd9c:	00000306 	br	80ddac <udivmodsi4+0x24>
  80dda0:	19c01326 	beq	r3,r7,80ddf0 <udivmodsi4+0x68>
  80dda4:	18c00044 	addi	r3,r3,1
  80dda8:	28000416 	blt	r5,zero,80ddbc <udivmodsi4+0x34>
  80ddac:	294b883a 	add	r5,r5,r5
  80ddb0:	1085883a 	add	r2,r2,r2
  80ddb4:	293ffa36 	bltu	r5,r4,80dda0 <udivmodsi4+0x18>
  80ddb8:	10000d26 	beq	r2,zero,80ddf0 <udivmodsi4+0x68>
  80ddbc:	0007883a 	mov	r3,zero
  80ddc0:	21400236 	bltu	r4,r5,80ddcc <udivmodsi4+0x44>
  80ddc4:	2149c83a 	sub	r4,r4,r5
  80ddc8:	1886b03a 	or	r3,r3,r2
  80ddcc:	1004d07a 	srli	r2,r2,1
  80ddd0:	280ad07a 	srli	r5,r5,1
  80ddd4:	103ffa1e 	bne	r2,zero,80ddc0 <udivmodsi4+0x38>
  80ddd8:	30000226 	beq	r6,zero,80dde4 <udivmodsi4+0x5c>
  80dddc:	2005883a 	mov	r2,r4
  80dde0:	f800283a 	ret
  80dde4:	1809883a 	mov	r4,r3
  80dde8:	2005883a 	mov	r2,r4
  80ddec:	f800283a 	ret
  80ddf0:	0007883a 	mov	r3,zero
  80ddf4:	003ff806 	br	80ddd8 <udivmodsi4+0x50>
  80ddf8:	00800044 	movi	r2,1
  80ddfc:	0007883a 	mov	r3,zero
  80de00:	003fef06 	br	80ddc0 <udivmodsi4+0x38>

0080de04 <__divsi3>:
  80de04:	defffe04 	addi	sp,sp,-8
  80de08:	dc000015 	stw	r16,0(sp)
  80de0c:	dfc00115 	stw	ra,4(sp)
  80de10:	0021883a 	mov	r16,zero
  80de14:	20000c16 	blt	r4,zero,80de48 <__divsi3+0x44>
  80de18:	000d883a 	mov	r6,zero
  80de1c:	28000e16 	blt	r5,zero,80de58 <__divsi3+0x54>
  80de20:	080dd880 	call	80dd88 <udivmodsi4>
  80de24:	1007883a 	mov	r3,r2
  80de28:	8005003a 	cmpeq	r2,r16,zero
  80de2c:	1000011e 	bne	r2,zero,80de34 <__divsi3+0x30>
  80de30:	00c7c83a 	sub	r3,zero,r3
  80de34:	1805883a 	mov	r2,r3
  80de38:	dfc00117 	ldw	ra,4(sp)
  80de3c:	dc000017 	ldw	r16,0(sp)
  80de40:	dec00204 	addi	sp,sp,8
  80de44:	f800283a 	ret
  80de48:	0109c83a 	sub	r4,zero,r4
  80de4c:	04000044 	movi	r16,1
  80de50:	000d883a 	mov	r6,zero
  80de54:	283ff20e 	bge	r5,zero,80de20 <__divsi3+0x1c>
  80de58:	014bc83a 	sub	r5,zero,r5
  80de5c:	8021003a 	cmpeq	r16,r16,zero
  80de60:	003fef06 	br	80de20 <__divsi3+0x1c>

0080de64 <__modsi3>:
  80de64:	deffff04 	addi	sp,sp,-4
  80de68:	dfc00015 	stw	ra,0(sp)
  80de6c:	01800044 	movi	r6,1
  80de70:	2807883a 	mov	r3,r5
  80de74:	20000416 	blt	r4,zero,80de88 <__modsi3+0x24>
  80de78:	28000c16 	blt	r5,zero,80deac <__modsi3+0x48>
  80de7c:	dfc00017 	ldw	ra,0(sp)
  80de80:	dec00104 	addi	sp,sp,4
  80de84:	080dd881 	jmpi	80dd88 <udivmodsi4>
  80de88:	0109c83a 	sub	r4,zero,r4
  80de8c:	28000b16 	blt	r5,zero,80debc <__modsi3+0x58>
  80de90:	180b883a 	mov	r5,r3
  80de94:	01800044 	movi	r6,1
  80de98:	080dd880 	call	80dd88 <udivmodsi4>
  80de9c:	0085c83a 	sub	r2,zero,r2
  80dea0:	dfc00017 	ldw	ra,0(sp)
  80dea4:	dec00104 	addi	sp,sp,4
  80dea8:	f800283a 	ret
  80deac:	014bc83a 	sub	r5,zero,r5
  80deb0:	dfc00017 	ldw	ra,0(sp)
  80deb4:	dec00104 	addi	sp,sp,4
  80deb8:	080dd881 	jmpi	80dd88 <udivmodsi4>
  80debc:	0147c83a 	sub	r3,zero,r5
  80dec0:	003ff306 	br	80de90 <__modsi3+0x2c>

0080dec4 <__udivsi3>:
  80dec4:	000d883a 	mov	r6,zero
  80dec8:	080dd881 	jmpi	80dd88 <udivmodsi4>

0080decc <__umodsi3>:
  80decc:	01800044 	movi	r6,1
  80ded0:	080dd881 	jmpi	80dd88 <udivmodsi4>

0080ded4 <__muldi3>:
  80ded4:	2011883a 	mov	r8,r4
  80ded8:	427fffcc 	andi	r9,r8,65535
  80dedc:	4018d43a 	srli	r12,r8,16
  80dee0:	32bfffcc 	andi	r10,r6,65535
  80dee4:	3016d43a 	srli	r11,r6,16
  80dee8:	4a85383a 	mul	r2,r9,r10
  80deec:	6295383a 	mul	r10,r12,r10
  80def0:	4ad3383a 	mul	r9,r9,r11
  80def4:	113fffcc 	andi	r4,r2,65535
  80def8:	1004d43a 	srli	r2,r2,16
  80defc:	4a93883a 	add	r9,r9,r10
  80df00:	3807883a 	mov	r3,r7
  80df04:	1245883a 	add	r2,r2,r9
  80df08:	280f883a 	mov	r7,r5
  80df0c:	180b883a 	mov	r5,r3
  80df10:	1006943a 	slli	r3,r2,16
  80df14:	defffd04 	addi	sp,sp,-12
  80df18:	dc800215 	stw	r18,8(sp)
  80df1c:	1907883a 	add	r3,r3,r4
  80df20:	dc400115 	stw	r17,4(sp)
  80df24:	dc000015 	stw	r16,0(sp)
  80df28:	4165383a 	mul	r18,r8,r5
  80df2c:	31e3383a 	mul	r17,r6,r7
  80df30:	1012d43a 	srli	r9,r2,16
  80df34:	62d9383a 	mul	r12,r12,r11
  80df38:	181f883a 	mov	r15,r3
  80df3c:	1280022e 	bgeu	r2,r10,80df48 <__muldi3+0x74>
  80df40:	00800074 	movhi	r2,1
  80df44:	6099883a 	add	r12,r12,r2
  80df48:	624d883a 	add	r6,r12,r9
  80df4c:	9187883a 	add	r3,r18,r6
  80df50:	88c7883a 	add	r3,r17,r3
  80df54:	7805883a 	mov	r2,r15
  80df58:	dc800217 	ldw	r18,8(sp)
  80df5c:	dc400117 	ldw	r17,4(sp)
  80df60:	dc000017 	ldw	r16,0(sp)
  80df64:	dec00304 	addi	sp,sp,12
  80df68:	f800283a 	ret

0080df6c <__clzsi2>:
  80df6c:	00bfffd4 	movui	r2,65535
  80df70:	11000e36 	bltu	r2,r4,80dfac <__clzsi2+0x40>
  80df74:	00803fc4 	movi	r2,255
  80df78:	01400204 	movi	r5,8
  80df7c:	0007883a 	mov	r3,zero
  80df80:	11001036 	bltu	r2,r4,80dfc4 <__clzsi2+0x58>
  80df84:	000b883a 	mov	r5,zero
  80df88:	20c6d83a 	srl	r3,r4,r3
  80df8c:	00802074 	movhi	r2,129
  80df90:	108a2a04 	addi	r2,r2,10408
  80df94:	1887883a 	add	r3,r3,r2
  80df98:	18800003 	ldbu	r2,0(r3)
  80df9c:	00c00804 	movi	r3,32
  80dfa0:	2885883a 	add	r2,r5,r2
  80dfa4:	1885c83a 	sub	r2,r3,r2
  80dfa8:	f800283a 	ret
  80dfac:	01400404 	movi	r5,16
  80dfb0:	00804034 	movhi	r2,256
  80dfb4:	10bfffc4 	addi	r2,r2,-1
  80dfb8:	2807883a 	mov	r3,r5
  80dfbc:	113ff22e 	bgeu	r2,r4,80df88 <__clzsi2+0x1c>
  80dfc0:	01400604 	movi	r5,24
  80dfc4:	2807883a 	mov	r3,r5
  80dfc8:	20c6d83a 	srl	r3,r4,r3
  80dfcc:	00802074 	movhi	r2,129
  80dfd0:	108a2a04 	addi	r2,r2,10408
  80dfd4:	1887883a 	add	r3,r3,r2
  80dfd8:	18800003 	ldbu	r2,0(r3)
  80dfdc:	00c00804 	movi	r3,32
  80dfe0:	2885883a 	add	r2,r5,r2
  80dfe4:	1885c83a 	sub	r2,r3,r2
  80dfe8:	f800283a 	ret

0080dfec <__pack_d>:
  80dfec:	20c00017 	ldw	r3,0(r4)
  80dff0:	defffd04 	addi	sp,sp,-12
  80dff4:	dc000015 	stw	r16,0(sp)
  80dff8:	dc800215 	stw	r18,8(sp)
  80dffc:	dc400115 	stw	r17,4(sp)
  80e000:	00800044 	movi	r2,1
  80e004:	22000317 	ldw	r8,12(r4)
  80e008:	001f883a 	mov	r15,zero
  80e00c:	22400417 	ldw	r9,16(r4)
  80e010:	24000117 	ldw	r16,4(r4)
  80e014:	10c0552e 	bgeu	r2,r3,80e16c <__pack_d+0x180>
  80e018:	00800104 	movi	r2,4
  80e01c:	18804f26 	beq	r3,r2,80e15c <__pack_d+0x170>
  80e020:	00800084 	movi	r2,2
  80e024:	18800226 	beq	r3,r2,80e030 <__pack_d+0x44>
  80e028:	4244b03a 	or	r2,r8,r9
  80e02c:	10001a1e 	bne	r2,zero,80e098 <__pack_d+0xac>
  80e030:	000d883a 	mov	r6,zero
  80e034:	000f883a 	mov	r7,zero
  80e038:	0011883a 	mov	r8,zero
  80e03c:	00800434 	movhi	r2,16
  80e040:	10bfffc4 	addi	r2,r2,-1
  80e044:	301d883a 	mov	r14,r6
  80e048:	3884703a 	and	r2,r7,r2
  80e04c:	400a953a 	slli	r5,r8,20
  80e050:	79bffc2c 	andhi	r6,r15,65520
  80e054:	308cb03a 	or	r6,r6,r2
  80e058:	00e00434 	movhi	r3,32784
  80e05c:	18ffffc4 	addi	r3,r3,-1
  80e060:	800497fa 	slli	r2,r16,31
  80e064:	30c6703a 	and	r3,r6,r3
  80e068:	1946b03a 	or	r3,r3,r5
  80e06c:	01600034 	movhi	r5,32768
  80e070:	297fffc4 	addi	r5,r5,-1
  80e074:	194a703a 	and	r5,r3,r5
  80e078:	288ab03a 	or	r5,r5,r2
  80e07c:	2807883a 	mov	r3,r5
  80e080:	7005883a 	mov	r2,r14
  80e084:	dc800217 	ldw	r18,8(sp)
  80e088:	dc400117 	ldw	r17,4(sp)
  80e08c:	dc000017 	ldw	r16,0(sp)
  80e090:	dec00304 	addi	sp,sp,12
  80e094:	f800283a 	ret
  80e098:	21000217 	ldw	r4,8(r4)
  80e09c:	00bf0084 	movi	r2,-1022
  80e0a0:	20803f16 	blt	r4,r2,80e1a0 <__pack_d+0x1b4>
  80e0a4:	0080ffc4 	movi	r2,1023
  80e0a8:	11002c16 	blt	r2,r4,80e15c <__pack_d+0x170>
  80e0ac:	00803fc4 	movi	r2,255
  80e0b0:	408c703a 	and	r6,r8,r2
  80e0b4:	00802004 	movi	r2,128
  80e0b8:	0007883a 	mov	r3,zero
  80e0bc:	000f883a 	mov	r7,zero
  80e0c0:	2280ffc4 	addi	r10,r4,1023
  80e0c4:	30801e26 	beq	r6,r2,80e140 <__pack_d+0x154>
  80e0c8:	00801fc4 	movi	r2,127
  80e0cc:	4089883a 	add	r4,r8,r2
  80e0d0:	220d803a 	cmpltu	r6,r4,r8
  80e0d4:	324d883a 	add	r6,r6,r9
  80e0d8:	2011883a 	mov	r8,r4
  80e0dc:	3013883a 	mov	r9,r6
  80e0e0:	00880034 	movhi	r2,8192
  80e0e4:	10bfffc4 	addi	r2,r2,-1
  80e0e8:	12400d36 	bltu	r2,r9,80e120 <__pack_d+0x134>
  80e0ec:	4804963a 	slli	r2,r9,24
  80e0f0:	400cd23a 	srli	r6,r8,8
  80e0f4:	480ed23a 	srli	r7,r9,8
  80e0f8:	013fffc4 	movi	r4,-1
  80e0fc:	118cb03a 	or	r6,r2,r6
  80e100:	01400434 	movhi	r5,16
  80e104:	297fffc4 	addi	r5,r5,-1
  80e108:	3104703a 	and	r2,r6,r4
  80e10c:	3946703a 	and	r3,r7,r5
  80e110:	5201ffcc 	andi	r8,r10,2047
  80e114:	100d883a 	mov	r6,r2
  80e118:	180f883a 	mov	r7,r3
  80e11c:	003fc706 	br	80e03c <__pack_d+0x50>
  80e120:	480897fa 	slli	r4,r9,31
  80e124:	4004d07a 	srli	r2,r8,1
  80e128:	4806d07a 	srli	r3,r9,1
  80e12c:	52800044 	addi	r10,r10,1
  80e130:	2084b03a 	or	r2,r4,r2
  80e134:	1011883a 	mov	r8,r2
  80e138:	1813883a 	mov	r9,r3
  80e13c:	003feb06 	br	80e0ec <__pack_d+0x100>
  80e140:	383fe11e 	bne	r7,zero,80e0c8 <__pack_d+0xdc>
  80e144:	01004004 	movi	r4,256
  80e148:	4104703a 	and	r2,r8,r4
  80e14c:	10c4b03a 	or	r2,r2,r3
  80e150:	103fe326 	beq	r2,zero,80e0e0 <__pack_d+0xf4>
  80e154:	3005883a 	mov	r2,r6
  80e158:	003fdc06 	br	80e0cc <__pack_d+0xe0>
  80e15c:	000d883a 	mov	r6,zero
  80e160:	000f883a 	mov	r7,zero
  80e164:	0201ffc4 	movi	r8,2047
  80e168:	003fb406 	br	80e03c <__pack_d+0x50>
  80e16c:	0005883a 	mov	r2,zero
  80e170:	00c00234 	movhi	r3,8
  80e174:	408cb03a 	or	r6,r8,r2
  80e178:	48ceb03a 	or	r7,r9,r3
  80e17c:	013fffc4 	movi	r4,-1
  80e180:	01400434 	movhi	r5,16
  80e184:	297fffc4 	addi	r5,r5,-1
  80e188:	3104703a 	and	r2,r6,r4
  80e18c:	3946703a 	and	r3,r7,r5
  80e190:	100d883a 	mov	r6,r2
  80e194:	180f883a 	mov	r7,r3
  80e198:	0201ffc4 	movi	r8,2047
  80e19c:	003fa706 	br	80e03c <__pack_d+0x50>
  80e1a0:	1109c83a 	sub	r4,r2,r4
  80e1a4:	00800e04 	movi	r2,56
  80e1a8:	11004316 	blt	r2,r4,80e2b8 <__pack_d+0x2cc>
  80e1ac:	21fff804 	addi	r7,r4,-32
  80e1b0:	38004516 	blt	r7,zero,80e2c8 <__pack_d+0x2dc>
  80e1b4:	49d8d83a 	srl	r12,r9,r7
  80e1b8:	001b883a 	mov	r13,zero
  80e1bc:	0023883a 	mov	r17,zero
  80e1c0:	01400044 	movi	r5,1
  80e1c4:	0025883a 	mov	r18,zero
  80e1c8:	38004716 	blt	r7,zero,80e2e8 <__pack_d+0x2fc>
  80e1cc:	29d6983a 	sll	r11,r5,r7
  80e1d0:	0015883a 	mov	r10,zero
  80e1d4:	00bfffc4 	movi	r2,-1
  80e1d8:	5089883a 	add	r4,r10,r2
  80e1dc:	588b883a 	add	r5,r11,r2
  80e1e0:	228d803a 	cmpltu	r6,r4,r10
  80e1e4:	314b883a 	add	r5,r6,r5
  80e1e8:	4104703a 	and	r2,r8,r4
  80e1ec:	4946703a 	and	r3,r9,r5
  80e1f0:	10c4b03a 	or	r2,r2,r3
  80e1f4:	10000226 	beq	r2,zero,80e200 <__pack_d+0x214>
  80e1f8:	04400044 	movi	r17,1
  80e1fc:	0025883a 	mov	r18,zero
  80e200:	00803fc4 	movi	r2,255
  80e204:	644eb03a 	or	r7,r12,r17
  80e208:	3892703a 	and	r9,r7,r2
  80e20c:	00802004 	movi	r2,128
  80e210:	6c90b03a 	or	r8,r13,r18
  80e214:	0015883a 	mov	r10,zero
  80e218:	48801626 	beq	r9,r2,80e274 <__pack_d+0x288>
  80e21c:	01001fc4 	movi	r4,127
  80e220:	3905883a 	add	r2,r7,r4
  80e224:	11cd803a 	cmpltu	r6,r2,r7
  80e228:	320d883a 	add	r6,r6,r8
  80e22c:	100f883a 	mov	r7,r2
  80e230:	00840034 	movhi	r2,4096
  80e234:	10bfffc4 	addi	r2,r2,-1
  80e238:	3011883a 	mov	r8,r6
  80e23c:	0007883a 	mov	r3,zero
  80e240:	11801b36 	bltu	r2,r6,80e2b0 <__pack_d+0x2c4>
  80e244:	4004963a 	slli	r2,r8,24
  80e248:	3808d23a 	srli	r4,r7,8
  80e24c:	400ad23a 	srli	r5,r8,8
  80e250:	1813883a 	mov	r9,r3
  80e254:	1108b03a 	or	r4,r2,r4
  80e258:	00bfffc4 	movi	r2,-1
  80e25c:	00c00434 	movhi	r3,16
  80e260:	18ffffc4 	addi	r3,r3,-1
  80e264:	208c703a 	and	r6,r4,r2
  80e268:	28ce703a 	and	r7,r5,r3
  80e26c:	4a01ffcc 	andi	r8,r9,2047
  80e270:	003f7206 	br	80e03c <__pack_d+0x50>
  80e274:	503fe91e 	bne	r10,zero,80e21c <__pack_d+0x230>
  80e278:	01004004 	movi	r4,256
  80e27c:	3904703a 	and	r2,r7,r4
  80e280:	0007883a 	mov	r3,zero
  80e284:	10c4b03a 	or	r2,r2,r3
  80e288:	10000626 	beq	r2,zero,80e2a4 <__pack_d+0x2b8>
  80e28c:	3a45883a 	add	r2,r7,r9
  80e290:	11cd803a 	cmpltu	r6,r2,r7
  80e294:	320d883a 	add	r6,r6,r8
  80e298:	100f883a 	mov	r7,r2
  80e29c:	3011883a 	mov	r8,r6
  80e2a0:	0007883a 	mov	r3,zero
  80e2a4:	00840034 	movhi	r2,4096
  80e2a8:	10bfffc4 	addi	r2,r2,-1
  80e2ac:	123fe52e 	bgeu	r2,r8,80e244 <__pack_d+0x258>
  80e2b0:	00c00044 	movi	r3,1
  80e2b4:	003fe306 	br	80e244 <__pack_d+0x258>
  80e2b8:	0009883a 	mov	r4,zero
  80e2bc:	0013883a 	mov	r9,zero
  80e2c0:	000b883a 	mov	r5,zero
  80e2c4:	003fe406 	br	80e258 <__pack_d+0x26c>
  80e2c8:	4a47883a 	add	r3,r9,r9
  80e2cc:	008007c4 	movi	r2,31
  80e2d0:	1105c83a 	sub	r2,r2,r4
  80e2d4:	1886983a 	sll	r3,r3,r2
  80e2d8:	4118d83a 	srl	r12,r8,r4
  80e2dc:	491ad83a 	srl	r13,r9,r4
  80e2e0:	1b18b03a 	or	r12,r3,r12
  80e2e4:	003fb506 	br	80e1bc <__pack_d+0x1d0>
  80e2e8:	2806d07a 	srli	r3,r5,1
  80e2ec:	008007c4 	movi	r2,31
  80e2f0:	1105c83a 	sub	r2,r2,r4
  80e2f4:	1896d83a 	srl	r11,r3,r2
  80e2f8:	2914983a 	sll	r10,r5,r4
  80e2fc:	003fb506 	br	80e1d4 <__pack_d+0x1e8>

0080e300 <__unpack_d>:
  80e300:	20c00117 	ldw	r3,4(r4)
  80e304:	22400017 	ldw	r9,0(r4)
  80e308:	00800434 	movhi	r2,16
  80e30c:	10bfffc4 	addi	r2,r2,-1
  80e310:	1808d53a 	srli	r4,r3,20
  80e314:	180cd7fa 	srli	r6,r3,31
  80e318:	1894703a 	and	r10,r3,r2
  80e31c:	2201ffcc 	andi	r8,r4,2047
  80e320:	281b883a 	mov	r13,r5
  80e324:	4817883a 	mov	r11,r9
  80e328:	29800115 	stw	r6,4(r5)
  80e32c:	5019883a 	mov	r12,r10
  80e330:	40001e1e 	bne	r8,zero,80e3ac <__unpack_d+0xac>
  80e334:	4a84b03a 	or	r2,r9,r10
  80e338:	10001926 	beq	r2,zero,80e3a0 <__unpack_d+0xa0>
  80e33c:	4804d63a 	srli	r2,r9,24
  80e340:	500c923a 	slli	r6,r10,8
  80e344:	013f0084 	movi	r4,-1022
  80e348:	00c40034 	movhi	r3,4096
  80e34c:	18ffffc4 	addi	r3,r3,-1
  80e350:	118cb03a 	or	r6,r2,r6
  80e354:	008000c4 	movi	r2,3
  80e358:	480a923a 	slli	r5,r9,8
  80e35c:	68800015 	stw	r2,0(r13)
  80e360:	69000215 	stw	r4,8(r13)
  80e364:	19800b36 	bltu	r3,r6,80e394 <__unpack_d+0x94>
  80e368:	200f883a 	mov	r7,r4
  80e36c:	1811883a 	mov	r8,r3
  80e370:	2945883a 	add	r2,r5,r5
  80e374:	1149803a 	cmpltu	r4,r2,r5
  80e378:	3187883a 	add	r3,r6,r6
  80e37c:	20c9883a 	add	r4,r4,r3
  80e380:	100b883a 	mov	r5,r2
  80e384:	200d883a 	mov	r6,r4
  80e388:	39ffffc4 	addi	r7,r7,-1
  80e38c:	413ff82e 	bgeu	r8,r4,80e370 <__unpack_d+0x70>
  80e390:	69c00215 	stw	r7,8(r13)
  80e394:	69800415 	stw	r6,16(r13)
  80e398:	69400315 	stw	r5,12(r13)
  80e39c:	f800283a 	ret
  80e3a0:	00800084 	movi	r2,2
  80e3a4:	28800015 	stw	r2,0(r5)
  80e3a8:	f800283a 	ret
  80e3ac:	0081ffc4 	movi	r2,2047
  80e3b0:	40800f26 	beq	r8,r2,80e3f0 <__unpack_d+0xf0>
  80e3b4:	480cd63a 	srli	r6,r9,24
  80e3b8:	5006923a 	slli	r3,r10,8
  80e3bc:	4804923a 	slli	r2,r9,8
  80e3c0:	0009883a 	mov	r4,zero
  80e3c4:	30c6b03a 	or	r3,r6,r3
  80e3c8:	01440034 	movhi	r5,4096
  80e3cc:	110cb03a 	or	r6,r2,r4
  80e3d0:	423f0044 	addi	r8,r8,-1023
  80e3d4:	194eb03a 	or	r7,r3,r5
  80e3d8:	008000c4 	movi	r2,3
  80e3dc:	69c00415 	stw	r7,16(r13)
  80e3e0:	6a000215 	stw	r8,8(r13)
  80e3e4:	68800015 	stw	r2,0(r13)
  80e3e8:	69800315 	stw	r6,12(r13)
  80e3ec:	f800283a 	ret
  80e3f0:	4a84b03a 	or	r2,r9,r10
  80e3f4:	1000031e 	bne	r2,zero,80e404 <__unpack_d+0x104>
  80e3f8:	00800104 	movi	r2,4
  80e3fc:	28800015 	stw	r2,0(r5)
  80e400:	f800283a 	ret
  80e404:	0009883a 	mov	r4,zero
  80e408:	01400234 	movhi	r5,8
  80e40c:	4904703a 	and	r2,r9,r4
  80e410:	5146703a 	and	r3,r10,r5
  80e414:	10c4b03a 	or	r2,r2,r3
  80e418:	10000526 	beq	r2,zero,80e430 <__unpack_d+0x130>
  80e41c:	00800044 	movi	r2,1
  80e420:	68800015 	stw	r2,0(r13)
  80e424:	6b000415 	stw	r12,16(r13)
  80e428:	6ac00315 	stw	r11,12(r13)
  80e42c:	f800283a 	ret
  80e430:	68000015 	stw	zero,0(r13)
  80e434:	003ffb06 	br	80e424 <__unpack_d+0x124>

0080e438 <__fpcmp_parts_d>:
  80e438:	21800017 	ldw	r6,0(r4)
  80e43c:	00c00044 	movi	r3,1
  80e440:	19800a2e 	bgeu	r3,r6,80e46c <__fpcmp_parts_d+0x34>
  80e444:	28800017 	ldw	r2,0(r5)
  80e448:	1880082e 	bgeu	r3,r2,80e46c <__fpcmp_parts_d+0x34>
  80e44c:	00c00104 	movi	r3,4
  80e450:	30c02626 	beq	r6,r3,80e4ec <__fpcmp_parts_d+0xb4>
  80e454:	10c02226 	beq	r2,r3,80e4e0 <__fpcmp_parts_d+0xa8>
  80e458:	00c00084 	movi	r3,2
  80e45c:	30c00526 	beq	r6,r3,80e474 <__fpcmp_parts_d+0x3c>
  80e460:	10c0071e 	bne	r2,r3,80e480 <__fpcmp_parts_d+0x48>
  80e464:	20800117 	ldw	r2,4(r4)
  80e468:	1000091e 	bne	r2,zero,80e490 <__fpcmp_parts_d+0x58>
  80e46c:	00800044 	movi	r2,1
  80e470:	f800283a 	ret
  80e474:	10c01a1e 	bne	r2,r3,80e4e0 <__fpcmp_parts_d+0xa8>
  80e478:	0005883a 	mov	r2,zero
  80e47c:	f800283a 	ret
  80e480:	22000117 	ldw	r8,4(r4)
  80e484:	28800117 	ldw	r2,4(r5)
  80e488:	40800326 	beq	r8,r2,80e498 <__fpcmp_parts_d+0x60>
  80e48c:	403ff726 	beq	r8,zero,80e46c <__fpcmp_parts_d+0x34>
  80e490:	00bfffc4 	movi	r2,-1
  80e494:	f800283a 	ret
  80e498:	20c00217 	ldw	r3,8(r4)
  80e49c:	28800217 	ldw	r2,8(r5)
  80e4a0:	10fffa16 	blt	r2,r3,80e48c <__fpcmp_parts_d+0x54>
  80e4a4:	18800916 	blt	r3,r2,80e4cc <__fpcmp_parts_d+0x94>
  80e4a8:	21c00417 	ldw	r7,16(r4)
  80e4ac:	28c00417 	ldw	r3,16(r5)
  80e4b0:	21800317 	ldw	r6,12(r4)
  80e4b4:	28800317 	ldw	r2,12(r5)
  80e4b8:	19fff436 	bltu	r3,r7,80e48c <__fpcmp_parts_d+0x54>
  80e4bc:	38c00526 	beq	r7,r3,80e4d4 <__fpcmp_parts_d+0x9c>
  80e4c0:	38c00236 	bltu	r7,r3,80e4cc <__fpcmp_parts_d+0x94>
  80e4c4:	19ffec1e 	bne	r3,r7,80e478 <__fpcmp_parts_d+0x40>
  80e4c8:	30bfeb2e 	bgeu	r6,r2,80e478 <__fpcmp_parts_d+0x40>
  80e4cc:	403fe71e 	bne	r8,zero,80e46c <__fpcmp_parts_d+0x34>
  80e4d0:	003fef06 	br	80e490 <__fpcmp_parts_d+0x58>
  80e4d4:	11bffa2e 	bgeu	r2,r6,80e4c0 <__fpcmp_parts_d+0x88>
  80e4d8:	403fe426 	beq	r8,zero,80e46c <__fpcmp_parts_d+0x34>
  80e4dc:	003fec06 	br	80e490 <__fpcmp_parts_d+0x58>
  80e4e0:	28800117 	ldw	r2,4(r5)
  80e4e4:	103fe11e 	bne	r2,zero,80e46c <__fpcmp_parts_d+0x34>
  80e4e8:	003fe906 	br	80e490 <__fpcmp_parts_d+0x58>
  80e4ec:	11bfdd1e 	bne	r2,r6,80e464 <__fpcmp_parts_d+0x2c>
  80e4f0:	28c00117 	ldw	r3,4(r5)
  80e4f4:	20800117 	ldw	r2,4(r4)
  80e4f8:	1885c83a 	sub	r2,r3,r2
  80e4fc:	f800283a 	ret

0080e500 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e500:	defff804 	addi	sp,sp,-32
  80e504:	dfc00715 	stw	ra,28(sp)
  80e508:	df000615 	stw	fp,24(sp)
  80e50c:	df000604 	addi	fp,sp,24
  80e510:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e514:	e0bffc17 	ldw	r2,-16(fp)
  80e518:	1004803a 	cmplt	r2,r2,zero
  80e51c:	1000081e 	bne	r2,zero,80e540 <close+0x40>
  80e520:	e0bffc17 	ldw	r2,-16(fp)
  80e524:	10800324 	muli	r2,r2,12
  80e528:	1007883a 	mov	r3,r2
  80e52c:	00802074 	movhi	r2,129
  80e530:	108c8704 	addi	r2,r2,12828
  80e534:	1887883a 	add	r3,r3,r2
  80e538:	e0ffff15 	stw	r3,-4(fp)
  80e53c:	00000106 	br	80e544 <close+0x44>
  80e540:	e03fff15 	stw	zero,-4(fp)
  80e544:	e0bfff17 	ldw	r2,-4(fp)
  80e548:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80e54c:	e0bffb17 	ldw	r2,-20(fp)
  80e550:	1005003a 	cmpeq	r2,r2,zero
  80e554:	10001d1e 	bne	r2,zero,80e5cc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e558:	e0bffb17 	ldw	r2,-20(fp)
  80e55c:	10800017 	ldw	r2,0(r2)
  80e560:	10800417 	ldw	r2,16(r2)
  80e564:	1005003a 	cmpeq	r2,r2,zero
  80e568:	1000071e 	bne	r2,zero,80e588 <close+0x88>
  80e56c:	e0bffb17 	ldw	r2,-20(fp)
  80e570:	10800017 	ldw	r2,0(r2)
  80e574:	10800417 	ldw	r2,16(r2)
  80e578:	e13ffb17 	ldw	r4,-20(fp)
  80e57c:	103ee83a 	callr	r2
  80e580:	e0bffe15 	stw	r2,-8(fp)
  80e584:	00000106 	br	80e58c <close+0x8c>
  80e588:	e03ffe15 	stw	zero,-8(fp)
  80e58c:	e0bffe17 	ldw	r2,-8(fp)
  80e590:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e594:	e13ffc17 	ldw	r4,-16(fp)
  80e598:	080f1240 	call	80f124 <alt_release_fd>
    if (rval < 0)
  80e59c:	e0bffa17 	ldw	r2,-24(fp)
  80e5a0:	1004403a 	cmpge	r2,r2,zero
  80e5a4:	1000071e 	bne	r2,zero,80e5c4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80e5a8:	080e5fc0 	call	80e5fc <alt_get_errno>
  80e5ac:	e0fffa17 	ldw	r3,-24(fp)
  80e5b0:	00c7c83a 	sub	r3,zero,r3
  80e5b4:	10c00015 	stw	r3,0(r2)
      return -1;
  80e5b8:	00bfffc4 	movi	r2,-1
  80e5bc:	e0bffd15 	stw	r2,-12(fp)
  80e5c0:	00000806 	br	80e5e4 <close+0xe4>
    }
    return 0;
  80e5c4:	e03ffd15 	stw	zero,-12(fp)
  80e5c8:	00000606 	br	80e5e4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e5cc:	080e5fc0 	call	80e5fc <alt_get_errno>
  80e5d0:	1007883a 	mov	r3,r2
  80e5d4:	00801444 	movi	r2,81
  80e5d8:	18800015 	stw	r2,0(r3)
    return -1;
  80e5dc:	00bfffc4 	movi	r2,-1
  80e5e0:	e0bffd15 	stw	r2,-12(fp)
  80e5e4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80e5e8:	e037883a 	mov	sp,fp
  80e5ec:	dfc00117 	ldw	ra,4(sp)
  80e5f0:	df000017 	ldw	fp,0(sp)
  80e5f4:	dec00204 	addi	sp,sp,8
  80e5f8:	f800283a 	ret

0080e5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e5fc:	defffd04 	addi	sp,sp,-12
  80e600:	dfc00215 	stw	ra,8(sp)
  80e604:	df000115 	stw	fp,4(sp)
  80e608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e60c:	00802074 	movhi	r2,129
  80e610:	1091ad04 	addi	r2,r2,18100
  80e614:	10800017 	ldw	r2,0(r2)
  80e618:	1005003a 	cmpeq	r2,r2,zero
  80e61c:	1000061e 	bne	r2,zero,80e638 <alt_get_errno+0x3c>
  80e620:	00802074 	movhi	r2,129
  80e624:	1091ad04 	addi	r2,r2,18100
  80e628:	10800017 	ldw	r2,0(r2)
  80e62c:	103ee83a 	callr	r2
  80e630:	e0bfff15 	stw	r2,-4(fp)
  80e634:	00000306 	br	80e644 <alt_get_errno+0x48>
  80e638:	00802074 	movhi	r2,129
  80e63c:	1098f404 	addi	r2,r2,25552
  80e640:	e0bfff15 	stw	r2,-4(fp)
  80e644:	e0bfff17 	ldw	r2,-4(fp)
}
  80e648:	e037883a 	mov	sp,fp
  80e64c:	dfc00117 	ldw	ra,4(sp)
  80e650:	df000017 	ldw	fp,0(sp)
  80e654:	dec00204 	addi	sp,sp,8
  80e658:	f800283a 	ret

0080e65c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e65c:	defffc04 	addi	sp,sp,-16
  80e660:	df000315 	stw	fp,12(sp)
  80e664:	df000304 	addi	fp,sp,12
  80e668:	e13ffd15 	stw	r4,-12(fp)
  80e66c:	e17ffe15 	stw	r5,-8(fp)
  80e670:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e674:	e0bfff17 	ldw	r2,-4(fp)
}
  80e678:	e037883a 	mov	sp,fp
  80e67c:	df000017 	ldw	fp,0(sp)
  80e680:	dec00104 	addi	sp,sp,4
  80e684:	f800283a 	ret

0080e688 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80e688:	defffd04 	addi	sp,sp,-12
  80e68c:	df000215 	stw	fp,8(sp)
  80e690:	df000204 	addi	fp,sp,8
  80e694:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80e698:	e0bfff17 	ldw	r2,-4(fp)
  80e69c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80e6a0:	e0bffe17 	ldw	r2,-8(fp)
  80e6a4:	1005003a 	cmpeq	r2,r2,zero
  80e6a8:	1000021e 	bne	r2,zero,80e6b4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80e6ac:	002af070 	cmpltui	zero,zero,43969
  80e6b0:	00000106 	br	80e6b8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80e6b4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80e6b8:	e037883a 	mov	sp,fp
  80e6bc:	df000017 	ldw	fp,0(sp)
  80e6c0:	dec00104 	addi	sp,sp,4
  80e6c4:	f800283a 	ret

0080e6c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80e6c8:	defffd04 	addi	sp,sp,-12
  80e6cc:	dfc00215 	stw	ra,8(sp)
  80e6d0:	df000115 	stw	fp,4(sp)
  80e6d4:	df000104 	addi	fp,sp,4
  80e6d8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80e6dc:	e13fff17 	ldw	r4,-4(fp)
  80e6e0:	080e6880 	call	80e688 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80e6e4:	003fff06 	br	80e6e4 <_exit+0x1c>

0080e6e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e6e8:	defff904 	addi	sp,sp,-28
  80e6ec:	dfc00615 	stw	ra,24(sp)
  80e6f0:	df000515 	stw	fp,20(sp)
  80e6f4:	df000504 	addi	fp,sp,20
  80e6f8:	e13ffc15 	stw	r4,-16(fp)
  80e6fc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e700:	e0bffc17 	ldw	r2,-16(fp)
  80e704:	1004803a 	cmplt	r2,r2,zero
  80e708:	1000081e 	bne	r2,zero,80e72c <fstat+0x44>
  80e70c:	e0bffc17 	ldw	r2,-16(fp)
  80e710:	10800324 	muli	r2,r2,12
  80e714:	1007883a 	mov	r3,r2
  80e718:	00802074 	movhi	r2,129
  80e71c:	108c8704 	addi	r2,r2,12828
  80e720:	1887883a 	add	r3,r3,r2
  80e724:	e0ffff15 	stw	r3,-4(fp)
  80e728:	00000106 	br	80e730 <fstat+0x48>
  80e72c:	e03fff15 	stw	zero,-4(fp)
  80e730:	e0bfff17 	ldw	r2,-4(fp)
  80e734:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e738:	e0bffb17 	ldw	r2,-20(fp)
  80e73c:	1005003a 	cmpeq	r2,r2,zero
  80e740:	1000121e 	bne	r2,zero,80e78c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e744:	e0bffb17 	ldw	r2,-20(fp)
  80e748:	10800017 	ldw	r2,0(r2)
  80e74c:	10800817 	ldw	r2,32(r2)
  80e750:	1005003a 	cmpeq	r2,r2,zero
  80e754:	1000081e 	bne	r2,zero,80e778 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80e758:	e0bffb17 	ldw	r2,-20(fp)
  80e75c:	10800017 	ldw	r2,0(r2)
  80e760:	10800817 	ldw	r2,32(r2)
  80e764:	e13ffb17 	ldw	r4,-20(fp)
  80e768:	e17ffd17 	ldw	r5,-12(fp)
  80e76c:	103ee83a 	callr	r2
  80e770:	e0bffe15 	stw	r2,-8(fp)
  80e774:	00000b06 	br	80e7a4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e778:	e0fffd17 	ldw	r3,-12(fp)
  80e77c:	00880004 	movi	r2,8192
  80e780:	18800115 	stw	r2,4(r3)
      return 0;
  80e784:	e03ffe15 	stw	zero,-8(fp)
  80e788:	00000606 	br	80e7a4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e78c:	080e7bc0 	call	80e7bc <alt_get_errno>
  80e790:	1007883a 	mov	r3,r2
  80e794:	00801444 	movi	r2,81
  80e798:	18800015 	stw	r2,0(r3)
    return -1;
  80e79c:	00bfffc4 	movi	r2,-1
  80e7a0:	e0bffe15 	stw	r2,-8(fp)
  80e7a4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e7a8:	e037883a 	mov	sp,fp
  80e7ac:	dfc00117 	ldw	ra,4(sp)
  80e7b0:	df000017 	ldw	fp,0(sp)
  80e7b4:	dec00204 	addi	sp,sp,8
  80e7b8:	f800283a 	ret

0080e7bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e7bc:	defffd04 	addi	sp,sp,-12
  80e7c0:	dfc00215 	stw	ra,8(sp)
  80e7c4:	df000115 	stw	fp,4(sp)
  80e7c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e7cc:	00802074 	movhi	r2,129
  80e7d0:	1091ad04 	addi	r2,r2,18100
  80e7d4:	10800017 	ldw	r2,0(r2)
  80e7d8:	1005003a 	cmpeq	r2,r2,zero
  80e7dc:	1000061e 	bne	r2,zero,80e7f8 <alt_get_errno+0x3c>
  80e7e0:	00802074 	movhi	r2,129
  80e7e4:	1091ad04 	addi	r2,r2,18100
  80e7e8:	10800017 	ldw	r2,0(r2)
  80e7ec:	103ee83a 	callr	r2
  80e7f0:	e0bfff15 	stw	r2,-4(fp)
  80e7f4:	00000306 	br	80e804 <alt_get_errno+0x48>
  80e7f8:	00802074 	movhi	r2,129
  80e7fc:	1098f404 	addi	r2,r2,25552
  80e800:	e0bfff15 	stw	r2,-4(fp)
  80e804:	e0bfff17 	ldw	r2,-4(fp)
}
  80e808:	e037883a 	mov	sp,fp
  80e80c:	dfc00117 	ldw	ra,4(sp)
  80e810:	df000017 	ldw	fp,0(sp)
  80e814:	dec00204 	addi	sp,sp,8
  80e818:	f800283a 	ret

0080e81c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80e81c:	deffff04 	addi	sp,sp,-4
  80e820:	df000015 	stw	fp,0(sp)
  80e824:	d839883a 	mov	fp,sp
  return 0;
  80e828:	0005883a 	mov	r2,zero
}
  80e82c:	e037883a 	mov	sp,fp
  80e830:	df000017 	ldw	fp,0(sp)
  80e834:	dec00104 	addi	sp,sp,4
  80e838:	f800283a 	ret

0080e83c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80e83c:	deffef04 	addi	sp,sp,-68
  80e840:	df001015 	stw	fp,64(sp)
  80e844:	df001004 	addi	fp,sp,64
  80e848:	e13ffc15 	stw	r4,-16(fp)
  80e84c:	e17ffd15 	stw	r5,-12(fp)
  80e850:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80e854:	00bffa84 	movi	r2,-22
  80e858:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e85c:	e0bffc17 	ldw	r2,-16(fp)
  80e860:	10800828 	cmpgeui	r2,r2,32
  80e864:	1000601e 	bne	r2,zero,80e9e8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e868:	0005303a 	rdctl	r2,status
  80e86c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e870:	e0fff917 	ldw	r3,-28(fp)
  80e874:	00bfff84 	movi	r2,-2
  80e878:	1884703a 	and	r2,r3,r2
  80e87c:	1001703a 	wrctl	status,r2
  
  return context;
  80e880:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80e884:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80e888:	e0bffc17 	ldw	r2,-16(fp)
  80e88c:	00c02074 	movhi	r3,129
  80e890:	18db0804 	addi	r3,r3,27680
  80e894:	100490fa 	slli	r2,r2,3
  80e898:	10c7883a 	add	r3,r2,r3
  80e89c:	e0bffe17 	ldw	r2,-8(fp)
  80e8a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80e8a4:	e0bffc17 	ldw	r2,-16(fp)
  80e8a8:	00c02074 	movhi	r3,129
  80e8ac:	18db0804 	addi	r3,r3,27680
  80e8b0:	100490fa 	slli	r2,r2,3
  80e8b4:	10c5883a 	add	r2,r2,r3
  80e8b8:	10c00104 	addi	r3,r2,4
  80e8bc:	e0bffd17 	ldw	r2,-12(fp)
  80e8c0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80e8c4:	e0bffe17 	ldw	r2,-8(fp)
  80e8c8:	1005003a 	cmpeq	r2,r2,zero
  80e8cc:	1000201e 	bne	r2,zero,80e950 <alt_irq_register+0x114>
  80e8d0:	e0bffc17 	ldw	r2,-16(fp)
  80e8d4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e8d8:	0005303a 	rdctl	r2,status
  80e8dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e8e0:	e0fff617 	ldw	r3,-40(fp)
  80e8e4:	00bfff84 	movi	r2,-2
  80e8e8:	1884703a 	and	r2,r3,r2
  80e8ec:	1001703a 	wrctl	status,r2
  
  return context;
  80e8f0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e8f4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80e8f8:	e0fff717 	ldw	r3,-36(fp)
  80e8fc:	00800044 	movi	r2,1
  80e900:	10c4983a 	sll	r2,r2,r3
  80e904:	1007883a 	mov	r3,r2
  80e908:	00802074 	movhi	r2,129
  80e90c:	1098f804 	addi	r2,r2,25568
  80e910:	10800017 	ldw	r2,0(r2)
  80e914:	1886b03a 	or	r3,r3,r2
  80e918:	00802074 	movhi	r2,129
  80e91c:	1098f804 	addi	r2,r2,25568
  80e920:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e924:	00802074 	movhi	r2,129
  80e928:	1098f804 	addi	r2,r2,25568
  80e92c:	10800017 	ldw	r2,0(r2)
  80e930:	100170fa 	wrctl	ienable,r2
  80e934:	e0bff817 	ldw	r2,-32(fp)
  80e938:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e93c:	e0bff517 	ldw	r2,-44(fp)
  80e940:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e944:	0005883a 	mov	r2,zero
  80e948:	e0bfff15 	stw	r2,-4(fp)
  80e94c:	00002006 	br	80e9d0 <alt_irq_register+0x194>
  80e950:	e0bffc17 	ldw	r2,-16(fp)
  80e954:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e958:	0005303a 	rdctl	r2,status
  80e95c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e960:	e0fff217 	ldw	r3,-56(fp)
  80e964:	00bfff84 	movi	r2,-2
  80e968:	1884703a 	and	r2,r3,r2
  80e96c:	1001703a 	wrctl	status,r2
  
  return context;
  80e970:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e974:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80e978:	e0fff317 	ldw	r3,-52(fp)
  80e97c:	00800044 	movi	r2,1
  80e980:	10c4983a 	sll	r2,r2,r3
  80e984:	0084303a 	nor	r2,zero,r2
  80e988:	1007883a 	mov	r3,r2
  80e98c:	00802074 	movhi	r2,129
  80e990:	1098f804 	addi	r2,r2,25568
  80e994:	10800017 	ldw	r2,0(r2)
  80e998:	1886703a 	and	r3,r3,r2
  80e99c:	00802074 	movhi	r2,129
  80e9a0:	1098f804 	addi	r2,r2,25568
  80e9a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e9a8:	00802074 	movhi	r2,129
  80e9ac:	1098f804 	addi	r2,r2,25568
  80e9b0:	10800017 	ldw	r2,0(r2)
  80e9b4:	100170fa 	wrctl	ienable,r2
  80e9b8:	e0bff417 	ldw	r2,-48(fp)
  80e9bc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e9c0:	e0bff117 	ldw	r2,-60(fp)
  80e9c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e9c8:	0005883a 	mov	r2,zero
  80e9cc:	e0bfff15 	stw	r2,-4(fp)
  80e9d0:	e0bfff17 	ldw	r2,-4(fp)
  80e9d4:	e0bffb15 	stw	r2,-20(fp)
  80e9d8:	e0bffa17 	ldw	r2,-24(fp)
  80e9dc:	e0bff015 	stw	r2,-64(fp)
  80e9e0:	e0bff017 	ldw	r2,-64(fp)
  80e9e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80e9e8:	e0bffb17 	ldw	r2,-20(fp)
}
  80e9ec:	e037883a 	mov	sp,fp
  80e9f0:	df000017 	ldw	fp,0(sp)
  80e9f4:	dec00104 	addi	sp,sp,4
  80e9f8:	f800283a 	ret

0080e9fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e9fc:	deffeb04 	addi	sp,sp,-84
  80ea00:	dfc01415 	stw	ra,80(sp)
  80ea04:	df001315 	stw	fp,76(sp)
  80ea08:	df001304 	addi	fp,sp,76
  80ea0c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ea10:	e0bffd17 	ldw	r2,-12(fp)
  80ea14:	1004803a 	cmplt	r2,r2,zero
  80ea18:	1000081e 	bne	r2,zero,80ea3c <isatty+0x40>
  80ea1c:	e0bffd17 	ldw	r2,-12(fp)
  80ea20:	10800324 	muli	r2,r2,12
  80ea24:	1007883a 	mov	r3,r2
  80ea28:	00802074 	movhi	r2,129
  80ea2c:	108c8704 	addi	r2,r2,12828
  80ea30:	1887883a 	add	r3,r3,r2
  80ea34:	e0ffff15 	stw	r3,-4(fp)
  80ea38:	00000106 	br	80ea40 <isatty+0x44>
  80ea3c:	e03fff15 	stw	zero,-4(fp)
  80ea40:	e0bfff17 	ldw	r2,-4(fp)
  80ea44:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80ea48:	e0bfed17 	ldw	r2,-76(fp)
  80ea4c:	1005003a 	cmpeq	r2,r2,zero
  80ea50:	10000f1e 	bne	r2,zero,80ea90 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80ea54:	e0bfed17 	ldw	r2,-76(fp)
  80ea58:	10800017 	ldw	r2,0(r2)
  80ea5c:	10800817 	ldw	r2,32(r2)
  80ea60:	1004c03a 	cmpne	r2,r2,zero
  80ea64:	1000031e 	bne	r2,zero,80ea74 <isatty+0x78>
    {
      return 1;
  80ea68:	00800044 	movi	r2,1
  80ea6c:	e0bffe15 	stw	r2,-8(fp)
  80ea70:	00000c06 	br	80eaa4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ea74:	e17fee04 	addi	r5,fp,-72
  80ea78:	e13ffd17 	ldw	r4,-12(fp)
  80ea7c:	080e6e80 	call	80e6e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ea80:	e0bfef17 	ldw	r2,-68(fp)
  80ea84:	10880020 	cmpeqi	r2,r2,8192
  80ea88:	e0bffe15 	stw	r2,-8(fp)
  80ea8c:	00000506 	br	80eaa4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ea90:	080eabc0 	call	80eabc <alt_get_errno>
  80ea94:	1007883a 	mov	r3,r2
  80ea98:	00801444 	movi	r2,81
  80ea9c:	18800015 	stw	r2,0(r3)
    return 0;
  80eaa0:	e03ffe15 	stw	zero,-8(fp)
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80eaa8:	e037883a 	mov	sp,fp
  80eaac:	dfc00117 	ldw	ra,4(sp)
  80eab0:	df000017 	ldw	fp,0(sp)
  80eab4:	dec00204 	addi	sp,sp,8
  80eab8:	f800283a 	ret

0080eabc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eabc:	defffd04 	addi	sp,sp,-12
  80eac0:	dfc00215 	stw	ra,8(sp)
  80eac4:	df000115 	stw	fp,4(sp)
  80eac8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80eacc:	00802074 	movhi	r2,129
  80ead0:	1091ad04 	addi	r2,r2,18100
  80ead4:	10800017 	ldw	r2,0(r2)
  80ead8:	1005003a 	cmpeq	r2,r2,zero
  80eadc:	1000061e 	bne	r2,zero,80eaf8 <alt_get_errno+0x3c>
  80eae0:	00802074 	movhi	r2,129
  80eae4:	1091ad04 	addi	r2,r2,18100
  80eae8:	10800017 	ldw	r2,0(r2)
  80eaec:	103ee83a 	callr	r2
  80eaf0:	e0bfff15 	stw	r2,-4(fp)
  80eaf4:	00000306 	br	80eb04 <alt_get_errno+0x48>
  80eaf8:	00802074 	movhi	r2,129
  80eafc:	1098f404 	addi	r2,r2,25552
  80eb00:	e0bfff15 	stw	r2,-4(fp)
  80eb04:	e0bfff17 	ldw	r2,-4(fp)
}
  80eb08:	e037883a 	mov	sp,fp
  80eb0c:	dfc00117 	ldw	ra,4(sp)
  80eb10:	df000017 	ldw	fp,0(sp)
  80eb14:	dec00204 	addi	sp,sp,8
  80eb18:	f800283a 	ret

0080eb1c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80eb1c:	defffa04 	addi	sp,sp,-24
  80eb20:	dfc00515 	stw	ra,20(sp)
  80eb24:	df000415 	stw	fp,16(sp)
  80eb28:	df000404 	addi	fp,sp,16
  80eb2c:	e13ffd15 	stw	r4,-12(fp)
  80eb30:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
  80eb34:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
  80eb38:	e0bffd17 	ldw	r2,-12(fp)
  80eb3c:	10800048 	cmpgei	r2,r2,1
  80eb40:	1000301e 	bne	r2,zero,80ec04 <kill+0xe8>
  {
    switch (sig)
  80eb44:	e0bffe17 	ldw	r2,-8(fp)
  80eb48:	10800828 	cmpgeui	r2,r2,32
  80eb4c:	10002a1e 	bne	r2,zero,80ebf8 <kill+0xdc>
  80eb50:	e0bffe17 	ldw	r2,-8(fp)
  80eb54:	1085883a 	add	r2,r2,r2
  80eb58:	1087883a 	add	r3,r2,r2
  80eb5c:	00802074 	movhi	r2,129
  80eb60:	10badc04 	addi	r2,r2,-5264
  80eb64:	1885883a 	add	r2,r3,r2
  80eb68:	10800017 	ldw	r2,0(r2)
  80eb6c:	1000683a 	jmp	r2
  80eb70:	0080ec18 	cmpnei	r2,zero,944
  80eb74:	0080ebf8 	rdprs	r2,zero,943
  80eb78:	0080ebf8 	rdprs	r2,zero,943
  80eb7c:	0080ebf0 	cmpltui	r2,zero,943
  80eb80:	0080ebf0 	cmpltui	r2,zero,943
  80eb84:	0080ebf0 	cmpltui	r2,zero,943
  80eb88:	0080ebf0 	cmpltui	r2,zero,943
  80eb8c:	0080ebf8 	rdprs	r2,zero,943
  80eb90:	0080ebf0 	cmpltui	r2,zero,943
  80eb94:	0080ebf0 	cmpltui	r2,zero,943
  80eb98:	0080ebf0 	cmpltui	r2,zero,943
  80eb9c:	0080ebf0 	cmpltui	r2,zero,943
  80eba0:	0080ebf0 	cmpltui	r2,zero,943
  80eba4:	0080ebf0 	cmpltui	r2,zero,943
  80eba8:	0080ebf0 	cmpltui	r2,zero,943
  80ebac:	0080ebf0 	cmpltui	r2,zero,943
  80ebb0:	0080ec18 	cmpnei	r2,zero,944
  80ebb4:	0080ebf8 	rdprs	r2,zero,943
  80ebb8:	0080ebf8 	rdprs	r2,zero,943
  80ebbc:	0080ebf8 	rdprs	r2,zero,943
  80ebc0:	0080ec18 	cmpnei	r2,zero,944
  80ebc4:	0080ebf8 	rdprs	r2,zero,943
  80ebc8:	0080ebf8 	rdprs	r2,zero,943
  80ebcc:	0080ebf0 	cmpltui	r2,zero,943
  80ebd0:	0080ebf0 	cmpltui	r2,zero,943
  80ebd4:	0080ebf0 	cmpltui	r2,zero,943
  80ebd8:	0080ebf0 	cmpltui	r2,zero,943
  80ebdc:	0080ebf0 	cmpltui	r2,zero,943
  80ebe0:	0080ebf8 	rdprs	r2,zero,943
  80ebe4:	0080ebf8 	rdprs	r2,zero,943
  80ebe8:	0080ebf0 	cmpltui	r2,zero,943
  80ebec:	0080ebf0 	cmpltui	r2,zero,943
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80ebf0:	0009883a 	mov	r4,zero
  80ebf4:	080e6c80 	call	80e6c8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80ebf8:	00800584 	movi	r2,22
  80ebfc:	e0bffc15 	stw	r2,-16(fp)
  80ec00:	00000506 	br	80ec18 <kill+0xfc>
    }
  }

  else if (pid > 0)
  80ec04:	e0bffd17 	ldw	r2,-12(fp)
  80ec08:	10800050 	cmplti	r2,r2,1
  80ec0c:	1000021e 	bne	r2,zero,80ec18 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80ec10:	008000c4 	movi	r2,3
  80ec14:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
  80ec18:	e0bffc17 	ldw	r2,-16(fp)
  80ec1c:	1005003a 	cmpeq	r2,r2,zero
  80ec20:	1000071e 	bne	r2,zero,80ec40 <kill+0x124>
  {
    ALT_ERRNO = status;
  80ec24:	080ec5c0 	call	80ec5c <alt_get_errno>
  80ec28:	1007883a 	mov	r3,r2
  80ec2c:	e0bffc17 	ldw	r2,-16(fp)
  80ec30:	18800015 	stw	r2,0(r3)
    return -1;
  80ec34:	00bfffc4 	movi	r2,-1
  80ec38:	e0bfff15 	stw	r2,-4(fp)
  80ec3c:	00000106 	br	80ec44 <kill+0x128>
  }

  return 0;
  80ec40:	e03fff15 	stw	zero,-4(fp)
  80ec44:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec48:	e037883a 	mov	sp,fp
  80ec4c:	dfc00117 	ldw	ra,4(sp)
  80ec50:	df000017 	ldw	fp,0(sp)
  80ec54:	dec00204 	addi	sp,sp,8
  80ec58:	f800283a 	ret

0080ec5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec5c:	defffd04 	addi	sp,sp,-12
  80ec60:	dfc00215 	stw	ra,8(sp)
  80ec64:	df000115 	stw	fp,4(sp)
  80ec68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ec6c:	00802074 	movhi	r2,129
  80ec70:	1091ad04 	addi	r2,r2,18100
  80ec74:	10800017 	ldw	r2,0(r2)
  80ec78:	1005003a 	cmpeq	r2,r2,zero
  80ec7c:	1000061e 	bne	r2,zero,80ec98 <alt_get_errno+0x3c>
  80ec80:	00802074 	movhi	r2,129
  80ec84:	1091ad04 	addi	r2,r2,18100
  80ec88:	10800017 	ldw	r2,0(r2)
  80ec8c:	103ee83a 	callr	r2
  80ec90:	e0bfff15 	stw	r2,-4(fp)
  80ec94:	00000306 	br	80eca4 <alt_get_errno+0x48>
  80ec98:	00802074 	movhi	r2,129
  80ec9c:	1098f404 	addi	r2,r2,25552
  80eca0:	e0bfff15 	stw	r2,-4(fp)
  80eca4:	e0bfff17 	ldw	r2,-4(fp)
}
  80eca8:	e037883a 	mov	sp,fp
  80ecac:	dfc00117 	ldw	ra,4(sp)
  80ecb0:	df000017 	ldw	fp,0(sp)
  80ecb4:	dec00204 	addi	sp,sp,8
  80ecb8:	f800283a 	ret

0080ecbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ecbc:	defffe04 	addi	sp,sp,-8
  80ecc0:	dfc00115 	stw	ra,4(sp)
  80ecc4:	df000015 	stw	fp,0(sp)
  80ecc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80eccc:	01002074 	movhi	r4,129
  80ecd0:	2111b204 	addi	r4,r4,18120
  80ecd4:	01402074 	movhi	r5,129
  80ecd8:	294a7804 	addi	r5,r5,10720
  80ecdc:	01802074 	movhi	r6,129
  80ece0:	3191b204 	addi	r6,r6,18120
  80ece4:	080ed3c0 	call	80ed3c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ece8:	01002034 	movhi	r4,128
  80ecec:	21000004 	addi	r4,r4,0
  80ecf0:	01404034 	movhi	r5,256
  80ecf4:	29500804 	addi	r5,r5,16416
  80ecf8:	01804034 	movhi	r6,256
  80ecfc:	31906d04 	addi	r6,r6,16820
  80ed00:	080ed3c0 	call	80ed3c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ed04:	01002074 	movhi	r4,129
  80ed08:	21080e04 	addi	r4,r4,8248
  80ed0c:	01402074 	movhi	r5,129
  80ed10:	29480e04 	addi	r5,r5,8248
  80ed14:	01802074 	movhi	r6,129
  80ed18:	318a7804 	addi	r6,r6,10720
  80ed1c:	080ed3c0 	call	80ed3c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ed20:	0810df40 	call	810df4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ed24:	08110140 	call	811014 <alt_icache_flush_all>
}
  80ed28:	e037883a 	mov	sp,fp
  80ed2c:	dfc00117 	ldw	ra,4(sp)
  80ed30:	df000017 	ldw	fp,0(sp)
  80ed34:	dec00204 	addi	sp,sp,8
  80ed38:	f800283a 	ret

0080ed3c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ed3c:	defffc04 	addi	sp,sp,-16
  80ed40:	df000315 	stw	fp,12(sp)
  80ed44:	df000304 	addi	fp,sp,12
  80ed48:	e13ffd15 	stw	r4,-12(fp)
  80ed4c:	e17ffe15 	stw	r5,-8(fp)
  80ed50:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ed54:	e0fffe17 	ldw	r3,-8(fp)
  80ed58:	e0bffd17 	ldw	r2,-12(fp)
  80ed5c:	18800e26 	beq	r3,r2,80ed98 <alt_load_section+0x5c>
  {
    while( to != end )
  80ed60:	00000a06 	br	80ed8c <alt_load_section+0x50>
    {
      *to++ = *from++;
  80ed64:	e0bffd17 	ldw	r2,-12(fp)
  80ed68:	10c00017 	ldw	r3,0(r2)
  80ed6c:	e0bffe17 	ldw	r2,-8(fp)
  80ed70:	10c00015 	stw	r3,0(r2)
  80ed74:	e0bffe17 	ldw	r2,-8(fp)
  80ed78:	10800104 	addi	r2,r2,4
  80ed7c:	e0bffe15 	stw	r2,-8(fp)
  80ed80:	e0bffd17 	ldw	r2,-12(fp)
  80ed84:	10800104 	addi	r2,r2,4
  80ed88:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ed8c:	e0fffe17 	ldw	r3,-8(fp)
  80ed90:	e0bfff17 	ldw	r2,-4(fp)
  80ed94:	18bff31e 	bne	r3,r2,80ed64 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80ed98:	e037883a 	mov	sp,fp
  80ed9c:	df000017 	ldw	fp,0(sp)
  80eda0:	dec00104 	addi	sp,sp,4
  80eda4:	f800283a 	ret

0080eda8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80eda8:	defff804 	addi	sp,sp,-32
  80edac:	dfc00715 	stw	ra,28(sp)
  80edb0:	df000615 	stw	fp,24(sp)
  80edb4:	df000604 	addi	fp,sp,24
  80edb8:	e13ffc15 	stw	r4,-16(fp)
  80edbc:	e17ffd15 	stw	r5,-12(fp)
  80edc0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80edc4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80edc8:	e0bffc17 	ldw	r2,-16(fp)
  80edcc:	1004803a 	cmplt	r2,r2,zero
  80edd0:	1000081e 	bne	r2,zero,80edf4 <lseek+0x4c>
  80edd4:	e0bffc17 	ldw	r2,-16(fp)
  80edd8:	10800324 	muli	r2,r2,12
  80eddc:	1007883a 	mov	r3,r2
  80ede0:	00802074 	movhi	r2,129
  80ede4:	108c8704 	addi	r2,r2,12828
  80ede8:	1887883a 	add	r3,r3,r2
  80edec:	e0ffff15 	stw	r3,-4(fp)
  80edf0:	00000106 	br	80edf8 <lseek+0x50>
  80edf4:	e03fff15 	stw	zero,-4(fp)
  80edf8:	e0bfff17 	ldw	r2,-4(fp)
  80edfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ee00:	e0bffb17 	ldw	r2,-20(fp)
  80ee04:	1005003a 	cmpeq	r2,r2,zero
  80ee08:	1000111e 	bne	r2,zero,80ee50 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ee0c:	e0bffb17 	ldw	r2,-20(fp)
  80ee10:	10800017 	ldw	r2,0(r2)
  80ee14:	10800717 	ldw	r2,28(r2)
  80ee18:	1005003a 	cmpeq	r2,r2,zero
  80ee1c:	1000091e 	bne	r2,zero,80ee44 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ee20:	e0bffb17 	ldw	r2,-20(fp)
  80ee24:	10800017 	ldw	r2,0(r2)
  80ee28:	10800717 	ldw	r2,28(r2)
  80ee2c:	e13ffb17 	ldw	r4,-20(fp)
  80ee30:	e17ffd17 	ldw	r5,-12(fp)
  80ee34:	e1bffe17 	ldw	r6,-8(fp)
  80ee38:	103ee83a 	callr	r2
  80ee3c:	e0bffa15 	stw	r2,-24(fp)
  80ee40:	00000506 	br	80ee58 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ee44:	00bfde84 	movi	r2,-134
  80ee48:	e0bffa15 	stw	r2,-24(fp)
  80ee4c:	00000206 	br	80ee58 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ee50:	00bfebc4 	movi	r2,-81
  80ee54:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80ee58:	e0bffa17 	ldw	r2,-24(fp)
  80ee5c:	1004403a 	cmpge	r2,r2,zero
  80ee60:	1000071e 	bne	r2,zero,80ee80 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ee64:	080ee980 	call	80ee98 <alt_get_errno>
  80ee68:	1007883a 	mov	r3,r2
  80ee6c:	e0bffa17 	ldw	r2,-24(fp)
  80ee70:	0085c83a 	sub	r2,zero,r2
  80ee74:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ee78:	00bfffc4 	movi	r2,-1
  80ee7c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ee80:	e0bffa17 	ldw	r2,-24(fp)
}
  80ee84:	e037883a 	mov	sp,fp
  80ee88:	dfc00117 	ldw	ra,4(sp)
  80ee8c:	df000017 	ldw	fp,0(sp)
  80ee90:	dec00204 	addi	sp,sp,8
  80ee94:	f800283a 	ret

0080ee98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee98:	defffd04 	addi	sp,sp,-12
  80ee9c:	dfc00215 	stw	ra,8(sp)
  80eea0:	df000115 	stw	fp,4(sp)
  80eea4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80eea8:	00802074 	movhi	r2,129
  80eeac:	1091ad04 	addi	r2,r2,18100
  80eeb0:	10800017 	ldw	r2,0(r2)
  80eeb4:	1005003a 	cmpeq	r2,r2,zero
  80eeb8:	1000061e 	bne	r2,zero,80eed4 <alt_get_errno+0x3c>
  80eebc:	00802074 	movhi	r2,129
  80eec0:	1091ad04 	addi	r2,r2,18100
  80eec4:	10800017 	ldw	r2,0(r2)
  80eec8:	103ee83a 	callr	r2
  80eecc:	e0bfff15 	stw	r2,-4(fp)
  80eed0:	00000306 	br	80eee0 <alt_get_errno+0x48>
  80eed4:	00802074 	movhi	r2,129
  80eed8:	1098f404 	addi	r2,r2,25552
  80eedc:	e0bfff15 	stw	r2,-4(fp)
  80eee0:	e0bfff17 	ldw	r2,-4(fp)
}
  80eee4:	e037883a 	mov	sp,fp
  80eee8:	dfc00117 	ldw	ra,4(sp)
  80eeec:	df000017 	ldw	fp,0(sp)
  80eef0:	dec00204 	addi	sp,sp,8
  80eef4:	f800283a 	ret

0080eef8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80eef8:	defffd04 	addi	sp,sp,-12
  80eefc:	dfc00215 	stw	ra,8(sp)
  80ef00:	df000115 	stw	fp,4(sp)
  80ef04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ef08:	0009883a 	mov	r4,zero
  80ef0c:	080f3f00 	call	80f3f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ef10:	080f4240 	call	80f424 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ef14:	01002074 	movhi	r4,129
  80ef18:	210a6d04 	addi	r4,r4,10676
  80ef1c:	01402074 	movhi	r5,129
  80ef20:	294a6d04 	addi	r5,r5,10676
  80ef24:	01802074 	movhi	r6,129
  80ef28:	318a6d04 	addi	r6,r6,10676
  80ef2c:	08113d40 	call	8113d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ef30:	0810f4c0 	call	810f4c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ef34:	01002074 	movhi	r4,129
  80ef38:	2103ec04 	addi	r4,r4,4016
  80ef3c:	0811bd00 	call	811bd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ef40:	d127c917 	ldw	r4,-24796(gp)
  80ef44:	d167ca17 	ldw	r5,-24792(gp)
  80ef48:	d1a7cb17 	ldw	r6,-24788(gp)
  80ef4c:	08028540 	call	802854 <main>
  80ef50:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ef54:	01000044 	movi	r4,1
  80ef58:	080e5000 	call	80e500 <close>
  exit (result);
  80ef5c:	e13fff17 	ldw	r4,-4(fp)
  80ef60:	0811be40 	call	811be4 <exit>

0080ef64 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ef64:	defffe04 	addi	sp,sp,-8
  80ef68:	df000115 	stw	fp,4(sp)
  80ef6c:	df000104 	addi	fp,sp,4
  80ef70:	e13fff15 	stw	r4,-4(fp)
}
  80ef74:	e037883a 	mov	sp,fp
  80ef78:	df000017 	ldw	fp,0(sp)
  80ef7c:	dec00104 	addi	sp,sp,4
  80ef80:	f800283a 	ret

0080ef84 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ef84:	defffe04 	addi	sp,sp,-8
  80ef88:	df000115 	stw	fp,4(sp)
  80ef8c:	df000104 	addi	fp,sp,4
  80ef90:	e13fff15 	stw	r4,-4(fp)
}
  80ef94:	e037883a 	mov	sp,fp
  80ef98:	df000017 	ldw	fp,0(sp)
  80ef9c:	dec00104 	addi	sp,sp,4
  80efa0:	f800283a 	ret

0080efa4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80efa4:	defff704 	addi	sp,sp,-36
  80efa8:	dfc00815 	stw	ra,32(sp)
  80efac:	df000715 	stw	fp,28(sp)
  80efb0:	df000704 	addi	fp,sp,28
  80efb4:	e13ffb15 	stw	r4,-20(fp)
  80efb8:	e17ffc15 	stw	r5,-16(fp)
  80efbc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80efc0:	e0bffb17 	ldw	r2,-20(fp)
  80efc4:	1004803a 	cmplt	r2,r2,zero
  80efc8:	1000081e 	bne	r2,zero,80efec <read+0x48>
  80efcc:	e0bffb17 	ldw	r2,-20(fp)
  80efd0:	10800324 	muli	r2,r2,12
  80efd4:	1007883a 	mov	r3,r2
  80efd8:	00802074 	movhi	r2,129
  80efdc:	108c8704 	addi	r2,r2,12828
  80efe0:	1887883a 	add	r3,r3,r2
  80efe4:	e0ffff15 	stw	r3,-4(fp)
  80efe8:	00000106 	br	80eff0 <read+0x4c>
  80efec:	e03fff15 	stw	zero,-4(fp)
  80eff0:	e0bfff17 	ldw	r2,-4(fp)
  80eff4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80eff8:	e0bffa17 	ldw	r2,-24(fp)
  80effc:	1005003a 	cmpeq	r2,r2,zero
  80f000:	1000241e 	bne	r2,zero,80f094 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f004:	e0bffa17 	ldw	r2,-24(fp)
  80f008:	10800217 	ldw	r2,8(r2)
  80f00c:	108000cc 	andi	r2,r2,3
  80f010:	10800060 	cmpeqi	r2,r2,1
  80f014:	10001a1e 	bne	r2,zero,80f080 <read+0xdc>
  80f018:	e0bffa17 	ldw	r2,-24(fp)
  80f01c:	10800017 	ldw	r2,0(r2)
  80f020:	10800517 	ldw	r2,20(r2)
  80f024:	1005003a 	cmpeq	r2,r2,zero
  80f028:	1000151e 	bne	r2,zero,80f080 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f02c:	e0bffa17 	ldw	r2,-24(fp)
  80f030:	10800017 	ldw	r2,0(r2)
  80f034:	10800517 	ldw	r2,20(r2)
  80f038:	e17ffc17 	ldw	r5,-16(fp)
  80f03c:	e1bffd17 	ldw	r6,-12(fp)
  80f040:	e13ffa17 	ldw	r4,-24(fp)
  80f044:	103ee83a 	callr	r2
  80f048:	e0bff915 	stw	r2,-28(fp)
  80f04c:	e0bff917 	ldw	r2,-28(fp)
  80f050:	1004403a 	cmpge	r2,r2,zero
  80f054:	1000071e 	bne	r2,zero,80f074 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80f058:	080f0c40 	call	80f0c4 <alt_get_errno>
  80f05c:	e0fff917 	ldw	r3,-28(fp)
  80f060:	00c7c83a 	sub	r3,zero,r3
  80f064:	10c00015 	stw	r3,0(r2)
          return -1;
  80f068:	00bfffc4 	movi	r2,-1
  80f06c:	e0bffe15 	stw	r2,-8(fp)
  80f070:	00000e06 	br	80f0ac <read+0x108>
        }
        return rval;
  80f074:	e0bff917 	ldw	r2,-28(fp)
  80f078:	e0bffe15 	stw	r2,-8(fp)
  80f07c:	00000b06 	br	80f0ac <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f080:	080f0c40 	call	80f0c4 <alt_get_errno>
  80f084:	1007883a 	mov	r3,r2
  80f088:	00800344 	movi	r2,13
  80f08c:	18800015 	stw	r2,0(r3)
  80f090:	00000406 	br	80f0a4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f094:	080f0c40 	call	80f0c4 <alt_get_errno>
  80f098:	1007883a 	mov	r3,r2
  80f09c:	00801444 	movi	r2,81
  80f0a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f0a4:	00bfffc4 	movi	r2,-1
  80f0a8:	e0bffe15 	stw	r2,-8(fp)
  80f0ac:	e0bffe17 	ldw	r2,-8(fp)
}
  80f0b0:	e037883a 	mov	sp,fp
  80f0b4:	dfc00117 	ldw	ra,4(sp)
  80f0b8:	df000017 	ldw	fp,0(sp)
  80f0bc:	dec00204 	addi	sp,sp,8
  80f0c0:	f800283a 	ret

0080f0c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f0c4:	defffd04 	addi	sp,sp,-12
  80f0c8:	dfc00215 	stw	ra,8(sp)
  80f0cc:	df000115 	stw	fp,4(sp)
  80f0d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f0d4:	00802074 	movhi	r2,129
  80f0d8:	1091ad04 	addi	r2,r2,18100
  80f0dc:	10800017 	ldw	r2,0(r2)
  80f0e0:	1005003a 	cmpeq	r2,r2,zero
  80f0e4:	1000061e 	bne	r2,zero,80f100 <alt_get_errno+0x3c>
  80f0e8:	00802074 	movhi	r2,129
  80f0ec:	1091ad04 	addi	r2,r2,18100
  80f0f0:	10800017 	ldw	r2,0(r2)
  80f0f4:	103ee83a 	callr	r2
  80f0f8:	e0bfff15 	stw	r2,-4(fp)
  80f0fc:	00000306 	br	80f10c <alt_get_errno+0x48>
  80f100:	00802074 	movhi	r2,129
  80f104:	1098f404 	addi	r2,r2,25552
  80f108:	e0bfff15 	stw	r2,-4(fp)
  80f10c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f110:	e037883a 	mov	sp,fp
  80f114:	dfc00117 	ldw	ra,4(sp)
  80f118:	df000017 	ldw	fp,0(sp)
  80f11c:	dec00204 	addi	sp,sp,8
  80f120:	f800283a 	ret

0080f124 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f124:	defffe04 	addi	sp,sp,-8
  80f128:	df000115 	stw	fp,4(sp)
  80f12c:	df000104 	addi	fp,sp,4
  80f130:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f134:	e0bfff17 	ldw	r2,-4(fp)
  80f138:	108000d0 	cmplti	r2,r2,3
  80f13c:	10000d1e 	bne	r2,zero,80f174 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f140:	e0bfff17 	ldw	r2,-4(fp)
  80f144:	00c02074 	movhi	r3,129
  80f148:	18cc8704 	addi	r3,r3,12828
  80f14c:	10800324 	muli	r2,r2,12
  80f150:	10c5883a 	add	r2,r2,r3
  80f154:	10800204 	addi	r2,r2,8
  80f158:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f15c:	e0bfff17 	ldw	r2,-4(fp)
  80f160:	00c02074 	movhi	r3,129
  80f164:	18cc8704 	addi	r3,r3,12828
  80f168:	10800324 	muli	r2,r2,12
  80f16c:	10c5883a 	add	r2,r2,r3
  80f170:	10000015 	stw	zero,0(r2)
  }
}
  80f174:	e037883a 	mov	sp,fp
  80f178:	df000017 	ldw	fp,0(sp)
  80f17c:	dec00104 	addi	sp,sp,4
  80f180:	f800283a 	ret

0080f184 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f184:	defff804 	addi	sp,sp,-32
  80f188:	df000715 	stw	fp,28(sp)
  80f18c:	df000704 	addi	fp,sp,28
  80f190:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f194:	0005303a 	rdctl	r2,status
  80f198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f19c:	e0fffb17 	ldw	r3,-20(fp)
  80f1a0:	00bfff84 	movi	r2,-2
  80f1a4:	1884703a 	and	r2,r3,r2
  80f1a8:	1001703a 	wrctl	status,r2
  
  return context;
  80f1ac:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f1b0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f1b4:	d0a07f17 	ldw	r2,-32260(gp)
  80f1b8:	10c000c4 	addi	r3,r2,3
  80f1bc:	00bfff04 	movi	r2,-4
  80f1c0:	1884703a 	and	r2,r3,r2
  80f1c4:	d0a07f15 	stw	r2,-32260(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f1c8:	d0e07f17 	ldw	r3,-32260(gp)
  80f1cc:	e0bffe17 	ldw	r2,-8(fp)
  80f1d0:	1887883a 	add	r3,r3,r2
  80f1d4:	00804034 	movhi	r2,256
  80f1d8:	10800004 	addi	r2,r2,0
  80f1dc:	10c0072e 	bgeu	r2,r3,80f1fc <sbrk+0x78>
  80f1e0:	e0bffd17 	ldw	r2,-12(fp)
  80f1e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1e8:	e0bffa17 	ldw	r2,-24(fp)
  80f1ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f1f0:	00bfffc4 	movi	r2,-1
  80f1f4:	e0bfff15 	stw	r2,-4(fp)
  80f1f8:	00000c06 	br	80f22c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80f1fc:	d0a07f17 	ldw	r2,-32260(gp)
  80f200:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80f204:	d0e07f17 	ldw	r3,-32260(gp)
  80f208:	e0bffe17 	ldw	r2,-8(fp)
  80f20c:	1885883a 	add	r2,r3,r2
  80f210:	d0a07f15 	stw	r2,-32260(gp)
  80f214:	e0bffd17 	ldw	r2,-12(fp)
  80f218:	e0bff915 	stw	r2,-28(fp)
  80f21c:	e0bff917 	ldw	r2,-28(fp)
  80f220:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f224:	e0bffc17 	ldw	r2,-16(fp)
  80f228:	e0bfff15 	stw	r2,-4(fp)
  80f22c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80f230:	e037883a 	mov	sp,fp
  80f234:	df000017 	ldw	fp,0(sp)
  80f238:	dec00104 	addi	sp,sp,4
  80f23c:	f800283a 	ret

0080f240 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80f240:	defffd04 	addi	sp,sp,-12
  80f244:	dfc00215 	stw	ra,8(sp)
  80f248:	df000115 	stw	fp,4(sp)
  80f24c:	df000104 	addi	fp,sp,4
  80f250:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80f254:	e13fff17 	ldw	r4,-4(fp)
  80f258:	0810ca80 	call	810ca8 <alt_busy_sleep>
}
  80f25c:	e037883a 	mov	sp,fp
  80f260:	dfc00117 	ldw	ra,4(sp)
  80f264:	df000017 	ldw	fp,0(sp)
  80f268:	dec00204 	addi	sp,sp,8
  80f26c:	f800283a 	ret

0080f270 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f270:	defff704 	addi	sp,sp,-36
  80f274:	dfc00815 	stw	ra,32(sp)
  80f278:	df000715 	stw	fp,28(sp)
  80f27c:	df000704 	addi	fp,sp,28
  80f280:	e13ffb15 	stw	r4,-20(fp)
  80f284:	e17ffc15 	stw	r5,-16(fp)
  80f288:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f28c:	e0bffb17 	ldw	r2,-20(fp)
  80f290:	1004803a 	cmplt	r2,r2,zero
  80f294:	1000081e 	bne	r2,zero,80f2b8 <write+0x48>
  80f298:	e0bffb17 	ldw	r2,-20(fp)
  80f29c:	10800324 	muli	r2,r2,12
  80f2a0:	1007883a 	mov	r3,r2
  80f2a4:	00802074 	movhi	r2,129
  80f2a8:	108c8704 	addi	r2,r2,12828
  80f2ac:	1887883a 	add	r3,r3,r2
  80f2b0:	e0ffff15 	stw	r3,-4(fp)
  80f2b4:	00000106 	br	80f2bc <write+0x4c>
  80f2b8:	e03fff15 	stw	zero,-4(fp)
  80f2bc:	e0bfff17 	ldw	r2,-4(fp)
  80f2c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80f2c4:	e0bffa17 	ldw	r2,-24(fp)
  80f2c8:	1005003a 	cmpeq	r2,r2,zero
  80f2cc:	1000241e 	bne	r2,zero,80f360 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f2d0:	e0bffa17 	ldw	r2,-24(fp)
  80f2d4:	10800217 	ldw	r2,8(r2)
  80f2d8:	108000cc 	andi	r2,r2,3
  80f2dc:	1005003a 	cmpeq	r2,r2,zero
  80f2e0:	10001a1e 	bne	r2,zero,80f34c <write+0xdc>
  80f2e4:	e0bffa17 	ldw	r2,-24(fp)
  80f2e8:	10800017 	ldw	r2,0(r2)
  80f2ec:	10800617 	ldw	r2,24(r2)
  80f2f0:	1005003a 	cmpeq	r2,r2,zero
  80f2f4:	1000151e 	bne	r2,zero,80f34c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f2f8:	e0bffa17 	ldw	r2,-24(fp)
  80f2fc:	10800017 	ldw	r2,0(r2)
  80f300:	10800617 	ldw	r2,24(r2)
  80f304:	e17ffc17 	ldw	r5,-16(fp)
  80f308:	e1bffd17 	ldw	r6,-12(fp)
  80f30c:	e13ffa17 	ldw	r4,-24(fp)
  80f310:	103ee83a 	callr	r2
  80f314:	e0bff915 	stw	r2,-28(fp)
  80f318:	e0bff917 	ldw	r2,-28(fp)
  80f31c:	1004403a 	cmpge	r2,r2,zero
  80f320:	1000071e 	bne	r2,zero,80f340 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80f324:	080f3900 	call	80f390 <alt_get_errno>
  80f328:	e0fff917 	ldw	r3,-28(fp)
  80f32c:	00c7c83a 	sub	r3,zero,r3
  80f330:	10c00015 	stw	r3,0(r2)
        return -1;
  80f334:	00bfffc4 	movi	r2,-1
  80f338:	e0bffe15 	stw	r2,-8(fp)
  80f33c:	00000e06 	br	80f378 <write+0x108>
      }
      return rval;
  80f340:	e0bff917 	ldw	r2,-28(fp)
  80f344:	e0bffe15 	stw	r2,-8(fp)
  80f348:	00000b06 	br	80f378 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f34c:	080f3900 	call	80f390 <alt_get_errno>
  80f350:	1007883a 	mov	r3,r2
  80f354:	00800344 	movi	r2,13
  80f358:	18800015 	stw	r2,0(r3)
  80f35c:	00000406 	br	80f370 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f360:	080f3900 	call	80f390 <alt_get_errno>
  80f364:	1007883a 	mov	r3,r2
  80f368:	00801444 	movi	r2,81
  80f36c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f370:	00bfffc4 	movi	r2,-1
  80f374:	e0bffe15 	stw	r2,-8(fp)
  80f378:	e0bffe17 	ldw	r2,-8(fp)
}
  80f37c:	e037883a 	mov	sp,fp
  80f380:	dfc00117 	ldw	ra,4(sp)
  80f384:	df000017 	ldw	fp,0(sp)
  80f388:	dec00204 	addi	sp,sp,8
  80f38c:	f800283a 	ret

0080f390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f390:	defffd04 	addi	sp,sp,-12
  80f394:	dfc00215 	stw	ra,8(sp)
  80f398:	df000115 	stw	fp,4(sp)
  80f39c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f3a0:	00802074 	movhi	r2,129
  80f3a4:	1091ad04 	addi	r2,r2,18100
  80f3a8:	10800017 	ldw	r2,0(r2)
  80f3ac:	1005003a 	cmpeq	r2,r2,zero
  80f3b0:	1000061e 	bne	r2,zero,80f3cc <alt_get_errno+0x3c>
  80f3b4:	00802074 	movhi	r2,129
  80f3b8:	1091ad04 	addi	r2,r2,18100
  80f3bc:	10800017 	ldw	r2,0(r2)
  80f3c0:	103ee83a 	callr	r2
  80f3c4:	e0bfff15 	stw	r2,-4(fp)
  80f3c8:	00000306 	br	80f3d8 <alt_get_errno+0x48>
  80f3cc:	00802074 	movhi	r2,129
  80f3d0:	1098f404 	addi	r2,r2,25552
  80f3d4:	e0bfff15 	stw	r2,-4(fp)
  80f3d8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f3dc:	e037883a 	mov	sp,fp
  80f3e0:	dfc00117 	ldw	ra,4(sp)
  80f3e4:	df000017 	ldw	fp,0(sp)
  80f3e8:	dec00204 	addi	sp,sp,8
  80f3ec:	f800283a 	ret

0080f3f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f3f0:	defffd04 	addi	sp,sp,-12
  80f3f4:	dfc00215 	stw	ra,8(sp)
  80f3f8:	df000115 	stw	fp,4(sp)
  80f3fc:	df000104 	addi	fp,sp,4
  80f400:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  80f404:	08118b40 	call	8118b4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80f408:	00800044 	movi	r2,1
  80f40c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80f410:	e037883a 	mov	sp,fp
  80f414:	dfc00117 	ldw	ra,4(sp)
  80f418:	df000017 	ldw	fp,0(sp)
  80f41c:	dec00204 	addi	sp,sp,8
  80f420:	f800283a 	ret

0080f424 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80f424:	defffe04 	addi	sp,sp,-8
  80f428:	dfc00115 	stw	ra,4(sp)
  80f42c:	df000015 	stw	fp,0(sp)
  80f430:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80f434:	01002074 	movhi	r4,129
  80f438:	210cf104 	addi	r4,r4,13252
  80f43c:	000b883a 	mov	r5,zero
  80f440:	000d883a 	mov	r6,zero
  80f444:	080f6080 	call	80f608 <altera_avalon_jtag_uart_init>
  80f448:	01002074 	movhi	r4,129
  80f44c:	210ce704 	addi	r4,r4,13212
  80f450:	080f4880 	call	80f488 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80f454:	01002074 	movhi	r4,129
  80f458:	21110904 	addi	r4,r4,17444
  80f45c:	000b883a 	mov	r5,zero
  80f460:	01800044 	movi	r6,1
  80f464:	081029c0 	call	81029c <altera_avalon_uart_init>
  80f468:	01002074 	movhi	r4,129
  80f46c:	2110ff04 	addi	r4,r4,17404
  80f470:	080f4880 	call	80f488 <alt_dev_reg>
}
  80f474:	e037883a 	mov	sp,fp
  80f478:	dfc00117 	ldw	ra,4(sp)
  80f47c:	df000017 	ldw	fp,0(sp)
  80f480:	dec00204 	addi	sp,sp,8
  80f484:	f800283a 	ret

0080f488 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f488:	defffd04 	addi	sp,sp,-12
  80f48c:	dfc00215 	stw	ra,8(sp)
  80f490:	df000115 	stw	fp,4(sp)
  80f494:	df000104 	addi	fp,sp,4
  80f498:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f49c:	e13fff17 	ldw	r4,-4(fp)
  80f4a0:	01402074 	movhi	r5,129
  80f4a4:	2951aa04 	addi	r5,r5,18088
  80f4a8:	0810e380 	call	810e38 <alt_dev_llist_insert>
}
  80f4ac:	e037883a 	mov	sp,fp
  80f4b0:	dfc00117 	ldw	ra,4(sp)
  80f4b4:	df000017 	ldw	fp,0(sp)
  80f4b8:	dec00204 	addi	sp,sp,8
  80f4bc:	f800283a 	ret

0080f4c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f4c0:	defffa04 	addi	sp,sp,-24
  80f4c4:	dfc00515 	stw	ra,20(sp)
  80f4c8:	df000415 	stw	fp,16(sp)
  80f4cc:	df000404 	addi	fp,sp,16
  80f4d0:	e13ffd15 	stw	r4,-12(fp)
  80f4d4:	e17ffe15 	stw	r5,-8(fp)
  80f4d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f4dc:	e0bffd17 	ldw	r2,-12(fp)
  80f4e0:	10800017 	ldw	r2,0(r2)
  80f4e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80f4e8:	e0bffc17 	ldw	r2,-16(fp)
  80f4ec:	11000a04 	addi	r4,r2,40
  80f4f0:	e0bffd17 	ldw	r2,-12(fp)
  80f4f4:	11c00217 	ldw	r7,8(r2)
  80f4f8:	e17ffe17 	ldw	r5,-8(fp)
  80f4fc:	e1bfff17 	ldw	r6,-4(fp)
  80f500:	080fb080 	call	80fb08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80f504:	e037883a 	mov	sp,fp
  80f508:	dfc00117 	ldw	ra,4(sp)
  80f50c:	df000017 	ldw	fp,0(sp)
  80f510:	dec00204 	addi	sp,sp,8
  80f514:	f800283a 	ret

0080f518 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f518:	defffa04 	addi	sp,sp,-24
  80f51c:	dfc00515 	stw	ra,20(sp)
  80f520:	df000415 	stw	fp,16(sp)
  80f524:	df000404 	addi	fp,sp,16
  80f528:	e13ffd15 	stw	r4,-12(fp)
  80f52c:	e17ffe15 	stw	r5,-8(fp)
  80f530:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f534:	e0bffd17 	ldw	r2,-12(fp)
  80f538:	10800017 	ldw	r2,0(r2)
  80f53c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80f540:	e0bffc17 	ldw	r2,-16(fp)
  80f544:	11000a04 	addi	r4,r2,40
  80f548:	e0bffd17 	ldw	r2,-12(fp)
  80f54c:	11c00217 	ldw	r7,8(r2)
  80f550:	e17ffe17 	ldw	r5,-8(fp)
  80f554:	e1bfff17 	ldw	r6,-4(fp)
  80f558:	080fd2c0 	call	80fd2c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80f55c:	e037883a 	mov	sp,fp
  80f560:	dfc00117 	ldw	ra,4(sp)
  80f564:	df000017 	ldw	fp,0(sp)
  80f568:	dec00204 	addi	sp,sp,8
  80f56c:	f800283a 	ret

0080f570 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80f570:	defffc04 	addi	sp,sp,-16
  80f574:	dfc00315 	stw	ra,12(sp)
  80f578:	df000215 	stw	fp,8(sp)
  80f57c:	df000204 	addi	fp,sp,8
  80f580:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f584:	e0bfff17 	ldw	r2,-4(fp)
  80f588:	10800017 	ldw	r2,0(r2)
  80f58c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80f590:	e0bffe17 	ldw	r2,-8(fp)
  80f594:	11000a04 	addi	r4,r2,40
  80f598:	e0bfff17 	ldw	r2,-4(fp)
  80f59c:	11400217 	ldw	r5,8(r2)
  80f5a0:	080f9a00 	call	80f9a0 <altera_avalon_jtag_uart_close>
}
  80f5a4:	e037883a 	mov	sp,fp
  80f5a8:	dfc00117 	ldw	ra,4(sp)
  80f5ac:	df000017 	ldw	fp,0(sp)
  80f5b0:	dec00204 	addi	sp,sp,8
  80f5b4:	f800283a 	ret

0080f5b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f5b8:	defffa04 	addi	sp,sp,-24
  80f5bc:	dfc00515 	stw	ra,20(sp)
  80f5c0:	df000415 	stw	fp,16(sp)
  80f5c4:	df000404 	addi	fp,sp,16
  80f5c8:	e13ffd15 	stw	r4,-12(fp)
  80f5cc:	e17ffe15 	stw	r5,-8(fp)
  80f5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f5d4:	e0bffd17 	ldw	r2,-12(fp)
  80f5d8:	10800017 	ldw	r2,0(r2)
  80f5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f5e0:	e0bffc17 	ldw	r2,-16(fp)
  80f5e4:	11000a04 	addi	r4,r2,40
  80f5e8:	e17ffe17 	ldw	r5,-8(fp)
  80f5ec:	e1bfff17 	ldw	r6,-4(fp)
  80f5f0:	080fa140 	call	80fa14 <altera_avalon_jtag_uart_ioctl>
}
  80f5f4:	e037883a 	mov	sp,fp
  80f5f8:	dfc00117 	ldw	ra,4(sp)
  80f5fc:	df000017 	ldw	fp,0(sp)
  80f600:	dec00204 	addi	sp,sp,8
  80f604:	f800283a 	ret

0080f608 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f608:	defffa04 	addi	sp,sp,-24
  80f60c:	dfc00515 	stw	ra,20(sp)
  80f610:	df000415 	stw	fp,16(sp)
  80f614:	df000404 	addi	fp,sp,16
  80f618:	e13ffd15 	stw	r4,-12(fp)
  80f61c:	e17ffe15 	stw	r5,-8(fp)
  80f620:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f624:	e0fffd17 	ldw	r3,-12(fp)
  80f628:	00800044 	movi	r2,1
  80f62c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f630:	e0bffd17 	ldw	r2,-12(fp)
  80f634:	10800017 	ldw	r2,0(r2)
  80f638:	11000104 	addi	r4,r2,4
  80f63c:	e0bffd17 	ldw	r2,-12(fp)
  80f640:	10800817 	ldw	r2,32(r2)
  80f644:	1007883a 	mov	r3,r2
  80f648:	2005883a 	mov	r2,r4
  80f64c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f650:	e13ffe17 	ldw	r4,-8(fp)
  80f654:	e17fff17 	ldw	r5,-4(fp)
  80f658:	d8000015 	stw	zero,0(sp)
  80f65c:	01802074 	movhi	r6,129
  80f660:	31bdb204 	addi	r6,r6,-2360
  80f664:	e1fffd17 	ldw	r7,-12(fp)
  80f668:	08110440 	call	811044 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f66c:	e0bffd17 	ldw	r2,-12(fp)
  80f670:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f674:	e0bffd17 	ldw	r2,-12(fp)
  80f678:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f67c:	00802074 	movhi	r2,129
  80f680:	1098fc04 	addi	r2,r2,25584
  80f684:	10800017 	ldw	r2,0(r2)
  80f688:	100b883a 	mov	r5,r2
  80f68c:	01802074 	movhi	r6,129
  80f690:	31be3c04 	addi	r6,r6,-1808
  80f694:	e1fffd17 	ldw	r7,-12(fp)
  80f698:	0810b540 	call	810b54 <alt_alarm_start>
  80f69c:	1004403a 	cmpge	r2,r2,zero
  80f6a0:	1000041e 	bne	r2,zero,80f6b4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f6a4:	e0fffd17 	ldw	r3,-12(fp)
  80f6a8:	00a00034 	movhi	r2,32768
  80f6ac:	10bfffc4 	addi	r2,r2,-1
  80f6b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f6b4:	e037883a 	mov	sp,fp
  80f6b8:	dfc00117 	ldw	ra,4(sp)
  80f6bc:	df000017 	ldw	fp,0(sp)
  80f6c0:	dec00204 	addi	sp,sp,8
  80f6c4:	f800283a 	ret

0080f6c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f6c8:	defff804 	addi	sp,sp,-32
  80f6cc:	df000715 	stw	fp,28(sp)
  80f6d0:	df000704 	addi	fp,sp,28
  80f6d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f6d8:	e0bfff17 	ldw	r2,-4(fp)
  80f6dc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80f6e0:	e0bffe17 	ldw	r2,-8(fp)
  80f6e4:	10800017 	ldw	r2,0(r2)
  80f6e8:	e0bffd15 	stw	r2,-12(fp)
  80f6ec:	00000006 	br	80f6f0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f6f0:	e0bffd17 	ldw	r2,-12(fp)
  80f6f4:	10800104 	addi	r2,r2,4
  80f6f8:	10800037 	ldwio	r2,0(r2)
  80f6fc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f700:	e0bffc17 	ldw	r2,-16(fp)
  80f704:	1080c00c 	andi	r2,r2,768
  80f708:	1005003a 	cmpeq	r2,r2,zero
  80f70c:	1000741e 	bne	r2,zero,80f8e0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f710:	e0bffc17 	ldw	r2,-16(fp)
  80f714:	1080400c 	andi	r2,r2,256
  80f718:	1005003a 	cmpeq	r2,r2,zero
  80f71c:	1000351e 	bne	r2,zero,80f7f4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f720:	00800074 	movhi	r2,1
  80f724:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f728:	e0bffe17 	ldw	r2,-8(fp)
  80f72c:	10800a17 	ldw	r2,40(r2)
  80f730:	10800044 	addi	r2,r2,1
  80f734:	1081ffcc 	andi	r2,r2,2047
  80f738:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80f73c:	e0bffe17 	ldw	r2,-8(fp)
  80f740:	10c00b17 	ldw	r3,44(r2)
  80f744:	e0bffa17 	ldw	r2,-24(fp)
  80f748:	18801626 	beq	r3,r2,80f7a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f74c:	e0bffd17 	ldw	r2,-12(fp)
  80f750:	10800037 	ldwio	r2,0(r2)
  80f754:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f758:	e0bffb17 	ldw	r2,-20(fp)
  80f75c:	10a0000c 	andi	r2,r2,32768
  80f760:	1005003a 	cmpeq	r2,r2,zero
  80f764:	10000f1e 	bne	r2,zero,80f7a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f768:	e0bffe17 	ldw	r2,-8(fp)
  80f76c:	10c00a17 	ldw	r3,40(r2)
  80f770:	e0bffb17 	ldw	r2,-20(fp)
  80f774:	1009883a 	mov	r4,r2
  80f778:	e0bffe17 	ldw	r2,-8(fp)
  80f77c:	1885883a 	add	r2,r3,r2
  80f780:	10800e04 	addi	r2,r2,56
  80f784:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f788:	e0bffe17 	ldw	r2,-8(fp)
  80f78c:	10800a17 	ldw	r2,40(r2)
  80f790:	10800044 	addi	r2,r2,1
  80f794:	10c1ffcc 	andi	r3,r2,2047
  80f798:	e0bffe17 	ldw	r2,-8(fp)
  80f79c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f7a0:	003fe106 	br	80f728 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80f7a4:	e0bffb17 	ldw	r2,-20(fp)
  80f7a8:	10bfffec 	andhi	r2,r2,65535
  80f7ac:	1005003a 	cmpeq	r2,r2,zero
  80f7b0:	1000101e 	bne	r2,zero,80f7f4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f7b4:	e0bffe17 	ldw	r2,-8(fp)
  80f7b8:	10c00817 	ldw	r3,32(r2)
  80f7bc:	00bfff84 	movi	r2,-2
  80f7c0:	1886703a 	and	r3,r3,r2
  80f7c4:	e0bffe17 	ldw	r2,-8(fp)
  80f7c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80f7cc:	e0bffd17 	ldw	r2,-12(fp)
  80f7d0:	11000104 	addi	r4,r2,4
  80f7d4:	e0bffe17 	ldw	r2,-8(fp)
  80f7d8:	10800817 	ldw	r2,32(r2)
  80f7dc:	1007883a 	mov	r3,r2
  80f7e0:	2005883a 	mov	r2,r4
  80f7e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f7e8:	e0bffd17 	ldw	r2,-12(fp)
  80f7ec:	10800104 	addi	r2,r2,4
  80f7f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f7f4:	e0bffc17 	ldw	r2,-16(fp)
  80f7f8:	1080800c 	andi	r2,r2,512
  80f7fc:	1005003a 	cmpeq	r2,r2,zero
  80f800:	103fbb1e 	bne	r2,zero,80f6f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f804:	e0bffc17 	ldw	r2,-16(fp)
  80f808:	10bfffec 	andhi	r2,r2,65535
  80f80c:	1004d43a 	srli	r2,r2,16
  80f810:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f814:	00001506 	br	80f86c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f818:	e13ffd17 	ldw	r4,-12(fp)
  80f81c:	e0bffe17 	ldw	r2,-8(fp)
  80f820:	10c00d17 	ldw	r3,52(r2)
  80f824:	e0bffe17 	ldw	r2,-8(fp)
  80f828:	1885883a 	add	r2,r3,r2
  80f82c:	10820e04 	addi	r2,r2,2104
  80f830:	10800003 	ldbu	r2,0(r2)
  80f834:	10c03fcc 	andi	r3,r2,255
  80f838:	18c0201c 	xori	r3,r3,128
  80f83c:	18ffe004 	addi	r3,r3,-128
  80f840:	2005883a 	mov	r2,r4
  80f844:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f848:	e0bffe17 	ldw	r2,-8(fp)
  80f84c:	10800d17 	ldw	r2,52(r2)
  80f850:	10800044 	addi	r2,r2,1
  80f854:	10c1ffcc 	andi	r3,r2,2047
  80f858:	e0bffe17 	ldw	r2,-8(fp)
  80f85c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f860:	e0bff917 	ldw	r2,-28(fp)
  80f864:	10bfffc4 	addi	r2,r2,-1
  80f868:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f86c:	e0bff917 	ldw	r2,-28(fp)
  80f870:	1005003a 	cmpeq	r2,r2,zero
  80f874:	1000051e 	bne	r2,zero,80f88c <altera_avalon_jtag_uart_irq+0x1c4>
  80f878:	e0bffe17 	ldw	r2,-8(fp)
  80f87c:	10c00d17 	ldw	r3,52(r2)
  80f880:	e0bffe17 	ldw	r2,-8(fp)
  80f884:	10800c17 	ldw	r2,48(r2)
  80f888:	18bfe31e 	bne	r3,r2,80f818 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f88c:	e0bff917 	ldw	r2,-28(fp)
  80f890:	1005003a 	cmpeq	r2,r2,zero
  80f894:	103f961e 	bne	r2,zero,80f6f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f898:	e0bffe17 	ldw	r2,-8(fp)
  80f89c:	10c00817 	ldw	r3,32(r2)
  80f8a0:	00bfff44 	movi	r2,-3
  80f8a4:	1886703a 	and	r3,r3,r2
  80f8a8:	e0bffe17 	ldw	r2,-8(fp)
  80f8ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f8b0:	e0bffe17 	ldw	r2,-8(fp)
  80f8b4:	10800017 	ldw	r2,0(r2)
  80f8b8:	11000104 	addi	r4,r2,4
  80f8bc:	e0bffe17 	ldw	r2,-8(fp)
  80f8c0:	10800817 	ldw	r2,32(r2)
  80f8c4:	1007883a 	mov	r3,r2
  80f8c8:	2005883a 	mov	r2,r4
  80f8cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f8d0:	e0bffd17 	ldw	r2,-12(fp)
  80f8d4:	10800104 	addi	r2,r2,4
  80f8d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f8dc:	003f8406 	br	80f6f0 <altera_avalon_jtag_uart_irq+0x28>
}
  80f8e0:	e037883a 	mov	sp,fp
  80f8e4:	df000017 	ldw	fp,0(sp)
  80f8e8:	dec00104 	addi	sp,sp,4
  80f8ec:	f800283a 	ret

0080f8f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f8f0:	defffc04 	addi	sp,sp,-16
  80f8f4:	df000315 	stw	fp,12(sp)
  80f8f8:	df000304 	addi	fp,sp,12
  80f8fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f900:	e0bfff17 	ldw	r2,-4(fp)
  80f904:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f908:	e0bffe17 	ldw	r2,-8(fp)
  80f90c:	10800017 	ldw	r2,0(r2)
  80f910:	10800104 	addi	r2,r2,4
  80f914:	10800037 	ldwio	r2,0(r2)
  80f918:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f91c:	e0bffd17 	ldw	r2,-12(fp)
  80f920:	1081000c 	andi	r2,r2,1024
  80f924:	1005003a 	cmpeq	r2,r2,zero
  80f928:	10000c1e 	bne	r2,zero,80f95c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f92c:	e0bffe17 	ldw	r2,-8(fp)
  80f930:	10800017 	ldw	r2,0(r2)
  80f934:	11000104 	addi	r4,r2,4
  80f938:	e0bffe17 	ldw	r2,-8(fp)
  80f93c:	10800817 	ldw	r2,32(r2)
  80f940:	10810014 	ori	r2,r2,1024
  80f944:	1007883a 	mov	r3,r2
  80f948:	2005883a 	mov	r2,r4
  80f94c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80f950:	e0bffe17 	ldw	r2,-8(fp)
  80f954:	10000915 	stw	zero,36(r2)
  80f958:	00000a06 	br	80f984 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f95c:	e0bffe17 	ldw	r2,-8(fp)
  80f960:	10c00917 	ldw	r3,36(r2)
  80f964:	00a00034 	movhi	r2,32768
  80f968:	10bfff04 	addi	r2,r2,-4
  80f96c:	10c00536 	bltu	r2,r3,80f984 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80f970:	e0bffe17 	ldw	r2,-8(fp)
  80f974:	10800917 	ldw	r2,36(r2)
  80f978:	10c00044 	addi	r3,r2,1
  80f97c:	e0bffe17 	ldw	r2,-8(fp)
  80f980:	10c00915 	stw	r3,36(r2)
  80f984:	00802074 	movhi	r2,129
  80f988:	1098fc04 	addi	r2,r2,25584
  80f98c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f990:	e037883a 	mov	sp,fp
  80f994:	df000017 	ldw	fp,0(sp)
  80f998:	dec00104 	addi	sp,sp,4
  80f99c:	f800283a 	ret

0080f9a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f9a0:	defffc04 	addi	sp,sp,-16
  80f9a4:	df000315 	stw	fp,12(sp)
  80f9a8:	df000304 	addi	fp,sp,12
  80f9ac:	e13ffd15 	stw	r4,-12(fp)
  80f9b0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f9b4:	00000706 	br	80f9d4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80f9b8:	e0bffe17 	ldw	r2,-8(fp)
  80f9bc:	1090000c 	andi	r2,r2,16384
  80f9c0:	1005003a 	cmpeq	r2,r2,zero
  80f9c4:	1000031e 	bne	r2,zero,80f9d4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80f9c8:	00bffd44 	movi	r2,-11
  80f9cc:	e0bfff15 	stw	r2,-4(fp)
  80f9d0:	00000b06 	br	80fa00 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f9d4:	e0bffd17 	ldw	r2,-12(fp)
  80f9d8:	10c00d17 	ldw	r3,52(r2)
  80f9dc:	e0bffd17 	ldw	r2,-12(fp)
  80f9e0:	10800c17 	ldw	r2,48(r2)
  80f9e4:	18800526 	beq	r3,r2,80f9fc <altera_avalon_jtag_uart_close+0x5c>
  80f9e8:	e0bffd17 	ldw	r2,-12(fp)
  80f9ec:	10c00917 	ldw	r3,36(r2)
  80f9f0:	e0bffd17 	ldw	r2,-12(fp)
  80f9f4:	10800117 	ldw	r2,4(r2)
  80f9f8:	18bfef36 	bltu	r3,r2,80f9b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f9fc:	e03fff15 	stw	zero,-4(fp)
  80fa00:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa04:	e037883a 	mov	sp,fp
  80fa08:	df000017 	ldw	fp,0(sp)
  80fa0c:	dec00104 	addi	sp,sp,4
  80fa10:	f800283a 	ret

0080fa14 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80fa14:	defff804 	addi	sp,sp,-32
  80fa18:	df000715 	stw	fp,28(sp)
  80fa1c:	df000704 	addi	fp,sp,28
  80fa20:	e13ffb15 	stw	r4,-20(fp)
  80fa24:	e17ffc15 	stw	r5,-16(fp)
  80fa28:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80fa2c:	00bff9c4 	movi	r2,-25
  80fa30:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80fa34:	e0bffc17 	ldw	r2,-16(fp)
  80fa38:	e0bfff15 	stw	r2,-4(fp)
  80fa3c:	e0ffff17 	ldw	r3,-4(fp)
  80fa40:	189a8060 	cmpeqi	r2,r3,27137
  80fa44:	1000041e 	bne	r2,zero,80fa58 <altera_avalon_jtag_uart_ioctl+0x44>
  80fa48:	e0ffff17 	ldw	r3,-4(fp)
  80fa4c:	189a80a0 	cmpeqi	r2,r3,27138
  80fa50:	10001b1e 	bne	r2,zero,80fac0 <altera_avalon_jtag_uart_ioctl+0xac>
  80fa54:	00002706 	br	80faf4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80fa58:	e0bffb17 	ldw	r2,-20(fp)
  80fa5c:	10c00117 	ldw	r3,4(r2)
  80fa60:	00a00034 	movhi	r2,32768
  80fa64:	10bfffc4 	addi	r2,r2,-1
  80fa68:	18802226 	beq	r3,r2,80faf4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80fa6c:	e0bffd17 	ldw	r2,-12(fp)
  80fa70:	10800017 	ldw	r2,0(r2)
  80fa74:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80fa78:	e0bff917 	ldw	r2,-28(fp)
  80fa7c:	10800090 	cmplti	r2,r2,2
  80fa80:	1000071e 	bne	r2,zero,80faa0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80fa84:	e0fff917 	ldw	r3,-28(fp)
  80fa88:	00a00034 	movhi	r2,32768
  80fa8c:	10bfffc4 	addi	r2,r2,-1
  80fa90:	18800326 	beq	r3,r2,80faa0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80fa94:	e0bff917 	ldw	r2,-28(fp)
  80fa98:	e0bffe15 	stw	r2,-8(fp)
  80fa9c:	00000306 	br	80faac <altera_avalon_jtag_uart_ioctl+0x98>
  80faa0:	00e00034 	movhi	r3,32768
  80faa4:	18ffff84 	addi	r3,r3,-2
  80faa8:	e0fffe15 	stw	r3,-8(fp)
  80faac:	e0bffb17 	ldw	r2,-20(fp)
  80fab0:	e0fffe17 	ldw	r3,-8(fp)
  80fab4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80fab8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80fabc:	00000d06 	br	80faf4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80fac0:	e0bffb17 	ldw	r2,-20(fp)
  80fac4:	10c00117 	ldw	r3,4(r2)
  80fac8:	00a00034 	movhi	r2,32768
  80facc:	10bfffc4 	addi	r2,r2,-1
  80fad0:	18800826 	beq	r3,r2,80faf4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80fad4:	e13ffd17 	ldw	r4,-12(fp)
  80fad8:	e0bffb17 	ldw	r2,-20(fp)
  80fadc:	10c00917 	ldw	r3,36(r2)
  80fae0:	e0bffb17 	ldw	r2,-20(fp)
  80fae4:	10800117 	ldw	r2,4(r2)
  80fae8:	1885803a 	cmpltu	r2,r3,r2
  80faec:	20800015 	stw	r2,0(r4)
      rc = 0;
  80faf0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80faf4:	e0bffa17 	ldw	r2,-24(fp)
}
  80faf8:	e037883a 	mov	sp,fp
  80fafc:	df000017 	ldw	fp,0(sp)
  80fb00:	dec00104 	addi	sp,sp,4
  80fb04:	f800283a 	ret

0080fb08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80fb08:	defff204 	addi	sp,sp,-56
  80fb0c:	dfc00d15 	stw	ra,52(sp)
  80fb10:	df000c15 	stw	fp,48(sp)
  80fb14:	df000c04 	addi	fp,sp,48
  80fb18:	e13ffb15 	stw	r4,-20(fp)
  80fb1c:	e17ffc15 	stw	r5,-16(fp)
  80fb20:	e1bffd15 	stw	r6,-12(fp)
  80fb24:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80fb28:	e0bffc17 	ldw	r2,-16(fp)
  80fb2c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80fb30:	00004806 	br	80fc54 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80fb34:	e0bffb17 	ldw	r2,-20(fp)
  80fb38:	10800a17 	ldw	r2,40(r2)
  80fb3c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80fb40:	e0bffb17 	ldw	r2,-20(fp)
  80fb44:	10800b17 	ldw	r2,44(r2)
  80fb48:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80fb4c:	e0fff717 	ldw	r3,-36(fp)
  80fb50:	e0bff617 	ldw	r2,-40(fp)
  80fb54:	18800536 	bltu	r3,r2,80fb6c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80fb58:	e0bff717 	ldw	r2,-36(fp)
  80fb5c:	e0fff617 	ldw	r3,-40(fp)
  80fb60:	10c5c83a 	sub	r2,r2,r3
  80fb64:	e0bff815 	stw	r2,-32(fp)
  80fb68:	00000406 	br	80fb7c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80fb6c:	00820004 	movi	r2,2048
  80fb70:	e0fff617 	ldw	r3,-40(fp)
  80fb74:	10c5c83a 	sub	r2,r2,r3
  80fb78:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80fb7c:	e0bff817 	ldw	r2,-32(fp)
  80fb80:	1005003a 	cmpeq	r2,r2,zero
  80fb84:	10001f1e 	bne	r2,zero,80fc04 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80fb88:	e0fffd17 	ldw	r3,-12(fp)
  80fb8c:	e0bff817 	ldw	r2,-32(fp)
  80fb90:	1880022e 	bgeu	r3,r2,80fb9c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80fb94:	e0bffd17 	ldw	r2,-12(fp)
  80fb98:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80fb9c:	e0bffb17 	ldw	r2,-20(fp)
  80fba0:	10c00e04 	addi	r3,r2,56
  80fba4:	e0bff617 	ldw	r2,-40(fp)
  80fba8:	1887883a 	add	r3,r3,r2
  80fbac:	e0bffa17 	ldw	r2,-24(fp)
  80fbb0:	1009883a 	mov	r4,r2
  80fbb4:	180b883a 	mov	r5,r3
  80fbb8:	e1bff817 	ldw	r6,-32(fp)
  80fbbc:	080a25c0 	call	80a25c <memcpy>
      ptr   += n;
  80fbc0:	e0fff817 	ldw	r3,-32(fp)
  80fbc4:	e0bffa17 	ldw	r2,-24(fp)
  80fbc8:	10c5883a 	add	r2,r2,r3
  80fbcc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80fbd0:	e0fffd17 	ldw	r3,-12(fp)
  80fbd4:	e0bff817 	ldw	r2,-32(fp)
  80fbd8:	1885c83a 	sub	r2,r3,r2
  80fbdc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fbe0:	e0fff617 	ldw	r3,-40(fp)
  80fbe4:	e0bff817 	ldw	r2,-32(fp)
  80fbe8:	1885883a 	add	r2,r3,r2
  80fbec:	10c1ffcc 	andi	r3,r2,2047
  80fbf0:	e0bffb17 	ldw	r2,-20(fp)
  80fbf4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80fbf8:	e0bffd17 	ldw	r2,-12(fp)
  80fbfc:	10800048 	cmpgei	r2,r2,1
  80fc00:	103fcc1e 	bne	r2,zero,80fb34 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80fc04:	e0fffa17 	ldw	r3,-24(fp)
  80fc08:	e0bffc17 	ldw	r2,-16(fp)
  80fc0c:	1880141e 	bne	r3,r2,80fc60 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80fc10:	e0bffe17 	ldw	r2,-8(fp)
  80fc14:	1090000c 	andi	r2,r2,16384
  80fc18:	1004c03a 	cmpne	r2,r2,zero
  80fc1c:	1000101e 	bne	r2,zero,80fc60 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80fc20:	e0bffb17 	ldw	r2,-20(fp)
  80fc24:	10c00a17 	ldw	r3,40(r2)
  80fc28:	e0bff717 	ldw	r2,-36(fp)
  80fc2c:	1880051e 	bne	r3,r2,80fc44 <altera_avalon_jtag_uart_read+0x13c>
  80fc30:	e0bffb17 	ldw	r2,-20(fp)
  80fc34:	10c00917 	ldw	r3,36(r2)
  80fc38:	e0bffb17 	ldw	r2,-20(fp)
  80fc3c:	10800117 	ldw	r2,4(r2)
  80fc40:	18bff736 	bltu	r3,r2,80fc20 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80fc44:	e0bffb17 	ldw	r2,-20(fp)
  80fc48:	10c00a17 	ldw	r3,40(r2)
  80fc4c:	e0bff717 	ldw	r2,-36(fp)
  80fc50:	18800326 	beq	r3,r2,80fc60 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80fc54:	e0bffd17 	ldw	r2,-12(fp)
  80fc58:	10800048 	cmpgei	r2,r2,1
  80fc5c:	103fb51e 	bne	r2,zero,80fb34 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80fc60:	e0fffa17 	ldw	r3,-24(fp)
  80fc64:	e0bffc17 	ldw	r2,-16(fp)
  80fc68:	18801926 	beq	r3,r2,80fcd0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc6c:	0005303a 	rdctl	r2,status
  80fc70:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc74:	e0fff517 	ldw	r3,-44(fp)
  80fc78:	00bfff84 	movi	r2,-2
  80fc7c:	1884703a 	and	r2,r3,r2
  80fc80:	1001703a 	wrctl	status,r2
  
  return context;
  80fc84:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80fc88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fc8c:	e0bffb17 	ldw	r2,-20(fp)
  80fc90:	10800817 	ldw	r2,32(r2)
  80fc94:	10c00054 	ori	r3,r2,1
  80fc98:	e0bffb17 	ldw	r2,-20(fp)
  80fc9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80fca0:	e0bffb17 	ldw	r2,-20(fp)
  80fca4:	10800017 	ldw	r2,0(r2)
  80fca8:	11000104 	addi	r4,r2,4
  80fcac:	e0bffb17 	ldw	r2,-20(fp)
  80fcb0:	10800817 	ldw	r2,32(r2)
  80fcb4:	1007883a 	mov	r3,r2
  80fcb8:	2005883a 	mov	r2,r4
  80fcbc:	10c00035 	stwio	r3,0(r2)
  80fcc0:	e0bff917 	ldw	r2,-28(fp)
  80fcc4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fcc8:	e0bff417 	ldw	r2,-48(fp)
  80fccc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80fcd0:	e0fffa17 	ldw	r3,-24(fp)
  80fcd4:	e0bffc17 	ldw	r2,-16(fp)
  80fcd8:	18800526 	beq	r3,r2,80fcf0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80fcdc:	e0fffa17 	ldw	r3,-24(fp)
  80fce0:	e0bffc17 	ldw	r2,-16(fp)
  80fce4:	1887c83a 	sub	r3,r3,r2
  80fce8:	e0ffff15 	stw	r3,-4(fp)
  80fcec:	00000906 	br	80fd14 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80fcf0:	e0bffe17 	ldw	r2,-8(fp)
  80fcf4:	1090000c 	andi	r2,r2,16384
  80fcf8:	1005003a 	cmpeq	r2,r2,zero
  80fcfc:	1000031e 	bne	r2,zero,80fd0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80fd00:	00bffd44 	movi	r2,-11
  80fd04:	e0bfff15 	stw	r2,-4(fp)
  80fd08:	00000206 	br	80fd14 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80fd0c:	00bffec4 	movi	r2,-5
  80fd10:	e0bfff15 	stw	r2,-4(fp)
  80fd14:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd18:	e037883a 	mov	sp,fp
  80fd1c:	dfc00117 	ldw	ra,4(sp)
  80fd20:	df000017 	ldw	fp,0(sp)
  80fd24:	dec00204 	addi	sp,sp,8
  80fd28:	f800283a 	ret

0080fd2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80fd2c:	defff204 	addi	sp,sp,-56
  80fd30:	dfc00d15 	stw	ra,52(sp)
  80fd34:	df000c15 	stw	fp,48(sp)
  80fd38:	df000c04 	addi	fp,sp,48
  80fd3c:	e13ffb15 	stw	r4,-20(fp)
  80fd40:	e17ffc15 	stw	r5,-16(fp)
  80fd44:	e1bffd15 	stw	r6,-12(fp)
  80fd48:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80fd4c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80fd50:	e0bffc17 	ldw	r2,-16(fp)
  80fd54:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80fd58:	00003a06 	br	80fe44 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80fd5c:	e0bffb17 	ldw	r2,-20(fp)
  80fd60:	10800c17 	ldw	r2,48(r2)
  80fd64:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80fd68:	e0bffb17 	ldw	r2,-20(fp)
  80fd6c:	10800d17 	ldw	r2,52(r2)
  80fd70:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80fd74:	e0fffa17 	ldw	r3,-24(fp)
  80fd78:	e0bff917 	ldw	r2,-28(fp)
  80fd7c:	1880062e 	bgeu	r3,r2,80fd98 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80fd80:	e0fff917 	ldw	r3,-28(fp)
  80fd84:	e0bffa17 	ldw	r2,-24(fp)
  80fd88:	1885c83a 	sub	r2,r3,r2
  80fd8c:	10bfffc4 	addi	r2,r2,-1
  80fd90:	e0bff815 	stw	r2,-32(fp)
  80fd94:	00000c06 	br	80fdc8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80fd98:	e0bff917 	ldw	r2,-28(fp)
  80fd9c:	1005003a 	cmpeq	r2,r2,zero
  80fda0:	1000051e 	bne	r2,zero,80fdb8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80fda4:	00820004 	movi	r2,2048
  80fda8:	e0fffa17 	ldw	r3,-24(fp)
  80fdac:	10c5c83a 	sub	r2,r2,r3
  80fdb0:	e0bff815 	stw	r2,-32(fp)
  80fdb4:	00000406 	br	80fdc8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80fdb8:	0081ffc4 	movi	r2,2047
  80fdbc:	e0fffa17 	ldw	r3,-24(fp)
  80fdc0:	10c5c83a 	sub	r2,r2,r3
  80fdc4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80fdc8:	e0bff817 	ldw	r2,-32(fp)
  80fdcc:	1005003a 	cmpeq	r2,r2,zero
  80fdd0:	10001f1e 	bne	r2,zero,80fe50 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80fdd4:	e0fffd17 	ldw	r3,-12(fp)
  80fdd8:	e0bff817 	ldw	r2,-32(fp)
  80fddc:	1880022e 	bgeu	r3,r2,80fde8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80fde0:	e0bffd17 	ldw	r2,-12(fp)
  80fde4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80fde8:	e0bffb17 	ldw	r2,-20(fp)
  80fdec:	10c20e04 	addi	r3,r2,2104
  80fdf0:	e0bffa17 	ldw	r2,-24(fp)
  80fdf4:	1885883a 	add	r2,r3,r2
  80fdf8:	e0fffc17 	ldw	r3,-16(fp)
  80fdfc:	1009883a 	mov	r4,r2
  80fe00:	180b883a 	mov	r5,r3
  80fe04:	e1bff817 	ldw	r6,-32(fp)
  80fe08:	080a25c0 	call	80a25c <memcpy>
      ptr   += n;
  80fe0c:	e0fff817 	ldw	r3,-32(fp)
  80fe10:	e0bffc17 	ldw	r2,-16(fp)
  80fe14:	10c5883a 	add	r2,r2,r3
  80fe18:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80fe1c:	e0fffd17 	ldw	r3,-12(fp)
  80fe20:	e0bff817 	ldw	r2,-32(fp)
  80fe24:	1885c83a 	sub	r2,r3,r2
  80fe28:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fe2c:	e0fffa17 	ldw	r3,-24(fp)
  80fe30:	e0bff817 	ldw	r2,-32(fp)
  80fe34:	1885883a 	add	r2,r3,r2
  80fe38:	10c1ffcc 	andi	r3,r2,2047
  80fe3c:	e0bffb17 	ldw	r2,-20(fp)
  80fe40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80fe44:	e0bffd17 	ldw	r2,-12(fp)
  80fe48:	10800048 	cmpgei	r2,r2,1
  80fe4c:	103fc31e 	bne	r2,zero,80fd5c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe50:	0005303a 	rdctl	r2,status
  80fe54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe58:	e0fff517 	ldw	r3,-44(fp)
  80fe5c:	00bfff84 	movi	r2,-2
  80fe60:	1884703a 	and	r2,r3,r2
  80fe64:	1001703a 	wrctl	status,r2
  
  return context;
  80fe68:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80fe6c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80fe70:	e0bffb17 	ldw	r2,-20(fp)
  80fe74:	10800817 	ldw	r2,32(r2)
  80fe78:	10c00094 	ori	r3,r2,2
  80fe7c:	e0bffb17 	ldw	r2,-20(fp)
  80fe80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80fe84:	e0bffb17 	ldw	r2,-20(fp)
  80fe88:	10800017 	ldw	r2,0(r2)
  80fe8c:	11000104 	addi	r4,r2,4
  80fe90:	e0bffb17 	ldw	r2,-20(fp)
  80fe94:	10800817 	ldw	r2,32(r2)
  80fe98:	1007883a 	mov	r3,r2
  80fe9c:	2005883a 	mov	r2,r4
  80fea0:	10c00035 	stwio	r3,0(r2)
  80fea4:	e0bff717 	ldw	r2,-36(fp)
  80fea8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80feac:	e0bff417 	ldw	r2,-48(fp)
  80feb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80feb4:	e0bffd17 	ldw	r2,-12(fp)
  80feb8:	10800050 	cmplti	r2,r2,1
  80febc:	1000111e 	bne	r2,zero,80ff04 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80fec0:	e0bffe17 	ldw	r2,-8(fp)
  80fec4:	1090000c 	andi	r2,r2,16384
  80fec8:	1004c03a 	cmpne	r2,r2,zero
  80fecc:	1000101e 	bne	r2,zero,80ff10 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80fed0:	e0bffb17 	ldw	r2,-20(fp)
  80fed4:	10c00d17 	ldw	r3,52(r2)
  80fed8:	e0bff917 	ldw	r2,-28(fp)
  80fedc:	1880051e 	bne	r3,r2,80fef4 <altera_avalon_jtag_uart_write+0x1c8>
  80fee0:	e0bffb17 	ldw	r2,-20(fp)
  80fee4:	10c00917 	ldw	r3,36(r2)
  80fee8:	e0bffb17 	ldw	r2,-20(fp)
  80feec:	10800117 	ldw	r2,4(r2)
  80fef0:	18bff736 	bltu	r3,r2,80fed0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80fef4:	e0bffb17 	ldw	r2,-20(fp)
  80fef8:	10c00d17 	ldw	r3,52(r2)
  80fefc:	e0bff917 	ldw	r2,-28(fp)
  80ff00:	18800326 	beq	r3,r2,80ff10 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80ff04:	e0bffd17 	ldw	r2,-12(fp)
  80ff08:	10800048 	cmpgei	r2,r2,1
  80ff0c:	103fcd1e 	bne	r2,zero,80fe44 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ff10:	e0fffc17 	ldw	r3,-16(fp)
  80ff14:	e0bff617 	ldw	r2,-40(fp)
  80ff18:	18800526 	beq	r3,r2,80ff30 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80ff1c:	e0fffc17 	ldw	r3,-16(fp)
  80ff20:	e0bff617 	ldw	r2,-40(fp)
  80ff24:	1887c83a 	sub	r3,r3,r2
  80ff28:	e0ffff15 	stw	r3,-4(fp)
  80ff2c:	00000906 	br	80ff54 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80ff30:	e0bffe17 	ldw	r2,-8(fp)
  80ff34:	1090000c 	andi	r2,r2,16384
  80ff38:	1005003a 	cmpeq	r2,r2,zero
  80ff3c:	1000031e 	bne	r2,zero,80ff4c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80ff40:	00bffd44 	movi	r2,-11
  80ff44:	e0bfff15 	stw	r2,-4(fp)
  80ff48:	00000206 	br	80ff54 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80ff4c:	00bffec4 	movi	r2,-5
  80ff50:	e0bfff15 	stw	r2,-4(fp)
  80ff54:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff58:	e037883a 	mov	sp,fp
  80ff5c:	dfc00117 	ldw	ra,4(sp)
  80ff60:	df000017 	ldw	fp,0(sp)
  80ff64:	dec00204 	addi	sp,sp,8
  80ff68:	f800283a 	ret

0080ff6c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80ff6c:	defff404 	addi	sp,sp,-48
  80ff70:	df000b15 	stw	fp,44(sp)
  80ff74:	df000b04 	addi	fp,sp,44
  80ff78:	e13ffc15 	stw	r4,-16(fp)
  80ff7c:	e17ffd15 	stw	r5,-12(fp)
  80ff80:	e1bffe15 	stw	r6,-8(fp)
  80ff84:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80ff88:	e0fffe17 	ldw	r3,-8(fp)
  80ff8c:	e0bfff17 	ldw	r2,-4(fp)
  80ff90:	10c5883a 	add	r2,r2,r3
  80ff94:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
  80ff98:	e0c00117 	ldw	r3,4(fp)
  80ff9c:	e0800217 	ldw	r2,8(fp)
  80ffa0:	10c5883a 	add	r2,r2,r3
  80ffa4:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
  80ffa8:	e0800117 	ldw	r2,4(fp)
  80ffac:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
  80ffb0:	e0bffe17 	ldw	r2,-8(fp)
  80ffb4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80ffb8:	00800044 	movi	r2,1
  80ffbc:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80ffc0:	e0bffc17 	ldw	r2,-16(fp)
  80ffc4:	11000504 	addi	r4,r2,20
  80ffc8:	e0fffd17 	ldw	r3,-12(fp)
  80ffcc:	00800044 	movi	r2,1
  80ffd0:	10c6983a 	sll	r3,r2,r3
  80ffd4:	2005883a 	mov	r2,r4
  80ffd8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80ffdc:	e0800317 	ldw	r2,12(fp)
  80ffe0:	1080008c 	andi	r2,r2,2
  80ffe4:	1004c03a 	cmpne	r2,r2,zero
  80ffe8:	1000051e 	bne	r2,zero,810000 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80ffec:	e0bffc17 	ldw	r2,-16(fp)
  80fff0:	10800304 	addi	r2,r2,12
  80fff4:	1007883a 	mov	r3,r2
  80fff8:	00810004 	movi	r2,1024
  80fffc:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  810000:	e0bffc17 	ldw	r2,-16(fp)
  810004:	10800037 	ldwio	r2,0(r2)
  810008:	00000006 	br	81000c <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  81000c:	e0bffc17 	ldw	r2,-16(fp)
  810010:	10800204 	addi	r2,r2,8
  810014:	10800037 	ldwio	r2,0(r2)
  810018:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  81001c:	e0bff717 	ldw	r2,-36(fp)
  810020:	1080100c 	andi	r2,r2,64
  810024:	1005003a 	cmpeq	r2,r2,zero
  810028:	1000031e 	bne	r2,zero,810038 <alt_avalon_spi_command+0xcc>
  81002c:	e0bff617 	ldw	r2,-40(fp)
  810030:	1004c03a 	cmpne	r2,r2,zero
  810034:	1000041e 	bne	r2,zero,810048 <alt_avalon_spi_command+0xdc>
  810038:	e0bff717 	ldw	r2,-36(fp)
  81003c:	1080200c 	andi	r2,r2,128
  810040:	1005003a 	cmpeq	r2,r2,zero
  810044:	103ff11e 	bne	r2,zero,81000c <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  810048:	e0bff717 	ldw	r2,-36(fp)
  81004c:	1080100c 	andi	r2,r2,64
  810050:	1005003a 	cmpeq	r2,r2,zero
  810054:	1000201e 	bne	r2,zero,8100d8 <alt_avalon_spi_command+0x16c>
  810058:	e0bff617 	ldw	r2,-40(fp)
  81005c:	10800050 	cmplti	r2,r2,1
  810060:	10001d1e 	bne	r2,zero,8100d8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
  810064:	e0bff617 	ldw	r2,-40(fp)
  810068:	10bfffc4 	addi	r2,r2,-1
  81006c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
  810070:	e0ffff17 	ldw	r3,-4(fp)
  810074:	e0bffb17 	ldw	r2,-20(fp)
  810078:	18800b2e 	bgeu	r3,r2,8100a8 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  81007c:	e0bffc17 	ldw	r2,-16(fp)
  810080:	11000104 	addi	r4,r2,4
  810084:	e0bfff17 	ldw	r2,-4(fp)
  810088:	10800003 	ldbu	r2,0(r2)
  81008c:	10c03fcc 	andi	r3,r2,255
  810090:	e0bfff17 	ldw	r2,-4(fp)
  810094:	10800044 	addi	r2,r2,1
  810098:	e0bfff15 	stw	r2,-4(fp)
  81009c:	2005883a 	mov	r2,r4
  8100a0:	10c00035 	stwio	r3,0(r2)
  8100a4:	00000c06 	br	8100d8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
  8100a8:	e0bff917 	ldw	r2,-28(fp)
  8100ac:	1005003a 	cmpeq	r2,r2,zero
  8100b0:	1000071e 	bne	r2,zero,8100d0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
  8100b4:	e0bff917 	ldw	r2,-28(fp)
  8100b8:	10bfffc4 	addi	r2,r2,-1
  8100bc:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  8100c0:	e0bffc17 	ldw	r2,-16(fp)
  8100c4:	10800104 	addi	r2,r2,4
  8100c8:	10000035 	stwio	zero,0(r2)
  8100cc:	00000206 	br	8100d8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
  8100d0:	00bf0004 	movi	r2,-1024
  8100d4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  8100d8:	e0bff717 	ldw	r2,-36(fp)
  8100dc:	1080200c 	andi	r2,r2,128
  8100e0:	1005003a 	cmpeq	r2,r2,zero
  8100e4:	103fc91e 	bne	r2,zero,81000c <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  8100e8:	e0bffc17 	ldw	r2,-16(fp)
  8100ec:	10800037 	ldwio	r2,0(r2)
  8100f0:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
  8100f4:	e0bff817 	ldw	r2,-32(fp)
  8100f8:	1005003a 	cmpeq	r2,r2,zero
  8100fc:	1000041e 	bne	r2,zero,810110 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
  810100:	e0bff817 	ldw	r2,-32(fp)
  810104:	10bfffc4 	addi	r2,r2,-1
  810108:	e0bff815 	stw	r2,-32(fp)
  81010c:	00000706 	br	81012c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
  810110:	e0bff517 	ldw	r2,-44(fp)
  810114:	1007883a 	mov	r3,r2
  810118:	e0800217 	ldw	r2,8(fp)
  81011c:	10c00005 	stb	r3,0(r2)
  810120:	e0800217 	ldw	r2,8(fp)
  810124:	10800044 	addi	r2,r2,1
  810128:	e0800215 	stw	r2,8(fp)
      credits++;
  81012c:	e0bff617 	ldw	r2,-40(fp)
  810130:	10800044 	addi	r2,r2,1
  810134:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
  810138:	e0bff817 	ldw	r2,-32(fp)
  81013c:	1004c03a 	cmpne	r2,r2,zero
  810140:	103fb21e 	bne	r2,zero,81000c <alt_avalon_spi_command+0xa0>
  810144:	e0c00217 	ldw	r3,8(fp)
  810148:	e0bffa17 	ldw	r2,-24(fp)
  81014c:	18800126 	beq	r3,r2,810154 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
  810150:	003fae06 	br	81000c <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  810154:	e0bffc17 	ldw	r2,-16(fp)
  810158:	10800204 	addi	r2,r2,8
  81015c:	10800037 	ldwio	r2,0(r2)
  810160:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  810164:	e0bff717 	ldw	r2,-36(fp)
  810168:	1080080c 	andi	r2,r2,32
  81016c:	1005003a 	cmpeq	r2,r2,zero
  810170:	103ff81e 	bne	r2,zero,810154 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  810174:	e0800317 	ldw	r2,12(fp)
  810178:	1080004c 	andi	r2,r2,1
  81017c:	1004c03a 	cmpne	r2,r2,zero
  810180:	1000031e 	bne	r2,zero,810190 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  810184:	e0bffc17 	ldw	r2,-16(fp)
  810188:	10800304 	addi	r2,r2,12
  81018c:	10000035 	stwio	zero,0(r2)

  return read_length;
  810190:	e0800117 	ldw	r2,4(fp)
}
  810194:	e037883a 	mov	sp,fp
  810198:	df000017 	ldw	fp,0(sp)
  81019c:	dec00104 	addi	sp,sp,4
  8101a0:	f800283a 	ret

008101a4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8101a4:	defffa04 	addi	sp,sp,-24
  8101a8:	dfc00515 	stw	ra,20(sp)
  8101ac:	df000415 	stw	fp,16(sp)
  8101b0:	df000404 	addi	fp,sp,16
  8101b4:	e13ffd15 	stw	r4,-12(fp)
  8101b8:	e17ffe15 	stw	r5,-8(fp)
  8101bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8101c0:	e0bffd17 	ldw	r2,-12(fp)
  8101c4:	10800017 	ldw	r2,0(r2)
  8101c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8101cc:	e0bffc17 	ldw	r2,-16(fp)
  8101d0:	11000a04 	addi	r4,r2,40
  8101d4:	e0bffd17 	ldw	r2,-12(fp)
  8101d8:	11c00217 	ldw	r7,8(r2)
  8101dc:	e17ffe17 	ldw	r5,-8(fp)
  8101e0:	e1bfff17 	ldw	r6,-4(fp)
  8101e4:	081069c0 	call	81069c <altera_avalon_uart_read>
      fd->fd_flags);
}
  8101e8:	e037883a 	mov	sp,fp
  8101ec:	dfc00117 	ldw	ra,4(sp)
  8101f0:	df000017 	ldw	fp,0(sp)
  8101f4:	dec00204 	addi	sp,sp,8
  8101f8:	f800283a 	ret

008101fc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8101fc:	defffa04 	addi	sp,sp,-24
  810200:	dfc00515 	stw	ra,20(sp)
  810204:	df000415 	stw	fp,16(sp)
  810208:	df000404 	addi	fp,sp,16
  81020c:	e13ffd15 	stw	r4,-12(fp)
  810210:	e17ffe15 	stw	r5,-8(fp)
  810214:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810218:	e0bffd17 	ldw	r2,-12(fp)
  81021c:	10800017 	ldw	r2,0(r2)
  810220:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  810224:	e0bffc17 	ldw	r2,-16(fp)
  810228:	11000a04 	addi	r4,r2,40
  81022c:	e0bffd17 	ldw	r2,-12(fp)
  810230:	11c00217 	ldw	r7,8(r2)
  810234:	e17ffe17 	ldw	r5,-8(fp)
  810238:	e1bfff17 	ldw	r6,-4(fp)
  81023c:	081092c0 	call	81092c <altera_avalon_uart_write>
      fd->fd_flags);
}
  810240:	e037883a 	mov	sp,fp
  810244:	dfc00117 	ldw	ra,4(sp)
  810248:	df000017 	ldw	fp,0(sp)
  81024c:	dec00204 	addi	sp,sp,8
  810250:	f800283a 	ret

00810254 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  810254:	defffc04 	addi	sp,sp,-16
  810258:	dfc00315 	stw	ra,12(sp)
  81025c:	df000215 	stw	fp,8(sp)
  810260:	df000204 	addi	fp,sp,8
  810264:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810268:	e0bfff17 	ldw	r2,-4(fp)
  81026c:	10800017 	ldw	r2,0(r2)
  810270:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810274:	e0bffe17 	ldw	r2,-8(fp)
  810278:	11000a04 	addi	r4,r2,40
  81027c:	e0bfff17 	ldw	r2,-4(fp)
  810280:	11400217 	ldw	r5,8(r2)
  810284:	081063c0 	call	81063c <altera_avalon_uart_close>
}
  810288:	e037883a 	mov	sp,fp
  81028c:	dfc00117 	ldw	ra,4(sp)
  810290:	df000017 	ldw	fp,0(sp)
  810294:	dec00204 	addi	sp,sp,8
  810298:	f800283a 	ret

0081029c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  81029c:	defff704 	addi	sp,sp,-36
  8102a0:	dfc00815 	stw	ra,32(sp)
  8102a4:	df000715 	stw	fp,28(sp)
  8102a8:	df000704 	addi	fp,sp,28
  8102ac:	e13ffc15 	stw	r4,-16(fp)
  8102b0:	e17ffd15 	stw	r5,-12(fp)
  8102b4:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  8102b8:	e0bffc17 	ldw	r2,-16(fp)
  8102bc:	10800017 	ldw	r2,0(r2)
  8102c0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8102c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8102c8:	1004c03a 	cmpne	r2,r2,zero
  8102cc:	1000061e 	bne	r2,zero,8102e8 <altera_avalon_uart_init+0x4c>
  8102d0:	0005883a 	mov	r2,zero
  8102d4:	1004c03a 	cmpne	r2,r2,zero
  8102d8:	1000031e 	bne	r2,zero,8102e8 <altera_avalon_uart_init+0x4c>
  8102dc:	0005883a 	mov	r2,zero
  8102e0:	1005003a 	cmpeq	r2,r2,zero
  8102e4:	1000031e 	bne	r2,zero,8102f4 <altera_avalon_uart_init+0x58>
  8102e8:	00800044 	movi	r2,1
  8102ec:	e0bfff15 	stw	r2,-4(fp)
  8102f0:	00000106 	br	8102f8 <altera_avalon_uart_init+0x5c>
  8102f4:	e03fff15 	stw	zero,-4(fp)
  8102f8:	e0bfff17 	ldw	r2,-4(fp)
  8102fc:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  810300:	e0bffa17 	ldw	r2,-24(fp)
  810304:	1004c03a 	cmpne	r2,r2,zero
  810308:	1000111e 	bne	r2,zero,810350 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81030c:	e0fffc17 	ldw	r3,-16(fp)
  810310:	00832004 	movi	r2,3200
  810314:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  810318:	e0bffb17 	ldw	r2,-20(fp)
  81031c:	11000304 	addi	r4,r2,12
  810320:	e0bffc17 	ldw	r2,-16(fp)
  810324:	10800117 	ldw	r2,4(r2)
  810328:	1007883a 	mov	r3,r2
  81032c:	2005883a 	mov	r2,r4
  810330:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  810334:	d8000015 	stw	zero,0(sp)
  810338:	e13ffd17 	ldw	r4,-12(fp)
  81033c:	e17ffe17 	ldw	r5,-8(fp)
  810340:	01802074 	movhi	r6,129
  810344:	3180d904 	addi	r6,r6,868
  810348:	e1fffc17 	ldw	r7,-16(fp)
  81034c:	08110440 	call	811044 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  810350:	e037883a 	mov	sp,fp
  810354:	dfc00117 	ldw	ra,4(sp)
  810358:	df000017 	ldw	fp,0(sp)
  81035c:	dec00204 	addi	sp,sp,8
  810360:	f800283a 	ret

00810364 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  810364:	defffa04 	addi	sp,sp,-24
  810368:	dfc00515 	stw	ra,20(sp)
  81036c:	df000415 	stw	fp,16(sp)
  810370:	df000404 	addi	fp,sp,16
  810374:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  810378:	e0bfff17 	ldw	r2,-4(fp)
  81037c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  810380:	e0bffd17 	ldw	r2,-12(fp)
  810384:	10800017 	ldw	r2,0(r2)
  810388:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  81038c:	e0bffc17 	ldw	r2,-16(fp)
  810390:	10800204 	addi	r2,r2,8
  810394:	10800037 	ldwio	r2,0(r2)
  810398:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  81039c:	e0bffc17 	ldw	r2,-16(fp)
  8103a0:	10800204 	addi	r2,r2,8
  8103a4:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8103a8:	e0bffc17 	ldw	r2,-16(fp)
  8103ac:	10800204 	addi	r2,r2,8
  8103b0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8103b4:	e0bffe17 	ldw	r2,-8(fp)
  8103b8:	1080200c 	andi	r2,r2,128
  8103bc:	1005003a 	cmpeq	r2,r2,zero
  8103c0:	1000031e 	bne	r2,zero,8103d0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8103c4:	e13ffd17 	ldw	r4,-12(fp)
  8103c8:	e17ffe17 	ldw	r5,-8(fp)
  8103cc:	08104000 	call	810400 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8103d0:	e0bffe17 	ldw	r2,-8(fp)
  8103d4:	1081100c 	andi	r2,r2,1088
  8103d8:	1005003a 	cmpeq	r2,r2,zero
  8103dc:	1000031e 	bne	r2,zero,8103ec <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8103e0:	e13ffd17 	ldw	r4,-12(fp)
  8103e4:	e17ffe17 	ldw	r5,-8(fp)
  8103e8:	08104e00 	call	8104e0 <altera_avalon_uart_txirq>
  }
  

}
  8103ec:	e037883a 	mov	sp,fp
  8103f0:	dfc00117 	ldw	ra,4(sp)
  8103f4:	df000017 	ldw	fp,0(sp)
  8103f8:	dec00204 	addi	sp,sp,8
  8103fc:	f800283a 	ret

00810400 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810400:	defffc04 	addi	sp,sp,-16
  810404:	df000315 	stw	fp,12(sp)
  810408:	df000304 	addi	fp,sp,12
  81040c:	e13ffe15 	stw	r4,-8(fp)
  810410:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810414:	e0bfff17 	ldw	r2,-4(fp)
  810418:	108000cc 	andi	r2,r2,3
  81041c:	1004c03a 	cmpne	r2,r2,zero
  810420:	10002b1e 	bne	r2,zero,8104d0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810424:	e0bffe17 	ldw	r2,-8(fp)
  810428:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81042c:	e0bffe17 	ldw	r2,-8(fp)
  810430:	10800317 	ldw	r2,12(r2)
  810434:	10800044 	addi	r2,r2,1
  810438:	10800fcc 	andi	r2,r2,63
  81043c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  810440:	e0bffe17 	ldw	r2,-8(fp)
  810444:	11000317 	ldw	r4,12(r2)
  810448:	e0bffe17 	ldw	r2,-8(fp)
  81044c:	10800017 	ldw	r2,0(r2)
  810450:	10800037 	ldwio	r2,0(r2)
  810454:	1007883a 	mov	r3,r2
  810458:	e0bffe17 	ldw	r2,-8(fp)
  81045c:	2085883a 	add	r2,r4,r2
  810460:	10800704 	addi	r2,r2,28
  810464:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  810468:	e0fffe17 	ldw	r3,-8(fp)
  81046c:	e0bffd17 	ldw	r2,-12(fp)
  810470:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810474:	e0bffe17 	ldw	r2,-8(fp)
  810478:	10800317 	ldw	r2,12(r2)
  81047c:	10800044 	addi	r2,r2,1
  810480:	10800fcc 	andi	r2,r2,63
  810484:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810488:	e0bffe17 	ldw	r2,-8(fp)
  81048c:	10c00217 	ldw	r3,8(r2)
  810490:	e0bffd17 	ldw	r2,-12(fp)
  810494:	18800e1e 	bne	r3,r2,8104d0 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810498:	e0bffe17 	ldw	r2,-8(fp)
  81049c:	10c00117 	ldw	r3,4(r2)
  8104a0:	00bfdfc4 	movi	r2,-129
  8104a4:	1886703a 	and	r3,r3,r2
  8104a8:	e0bffe17 	ldw	r2,-8(fp)
  8104ac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8104b0:	e0bffe17 	ldw	r2,-8(fp)
  8104b4:	10800017 	ldw	r2,0(r2)
  8104b8:	11000304 	addi	r4,r2,12
  8104bc:	e0bffe17 	ldw	r2,-8(fp)
  8104c0:	10800117 	ldw	r2,4(r2)
  8104c4:	1007883a 	mov	r3,r2
  8104c8:	2005883a 	mov	r2,r4
  8104cc:	10c00035 	stwio	r3,0(r2)
  }   
}
  8104d0:	e037883a 	mov	sp,fp
  8104d4:	df000017 	ldw	fp,0(sp)
  8104d8:	dec00104 	addi	sp,sp,4
  8104dc:	f800283a 	ret

008104e0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8104e0:	defffd04 	addi	sp,sp,-12
  8104e4:	df000215 	stw	fp,8(sp)
  8104e8:	df000204 	addi	fp,sp,8
  8104ec:	e13ffe15 	stw	r4,-8(fp)
  8104f0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8104f4:	e0bffe17 	ldw	r2,-8(fp)
  8104f8:	10c00417 	ldw	r3,16(r2)
  8104fc:	e0bffe17 	ldw	r2,-8(fp)
  810500:	10800517 	ldw	r2,20(r2)
  810504:	18803626 	beq	r3,r2,8105e0 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810508:	e0bffe17 	ldw	r2,-8(fp)
  81050c:	10800617 	ldw	r2,24(r2)
  810510:	1080008c 	andi	r2,r2,2
  810514:	1005003a 	cmpeq	r2,r2,zero
  810518:	1000041e 	bne	r2,zero,81052c <altera_avalon_uart_txirq+0x4c>
  81051c:	e0bfff17 	ldw	r2,-4(fp)
  810520:	1082000c 	andi	r2,r2,2048
  810524:	1005003a 	cmpeq	r2,r2,zero
  810528:	10001e1e 	bne	r2,zero,8105a4 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  81052c:	e0bffe17 	ldw	r2,-8(fp)
  810530:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  810534:	e0bffe17 	ldw	r2,-8(fp)
  810538:	10800017 	ldw	r2,0(r2)
  81053c:	11000104 	addi	r4,r2,4
  810540:	e0bffe17 	ldw	r2,-8(fp)
  810544:	10c00417 	ldw	r3,16(r2)
  810548:	e0bffe17 	ldw	r2,-8(fp)
  81054c:	1885883a 	add	r2,r3,r2
  810550:	10801704 	addi	r2,r2,92
  810554:	10800003 	ldbu	r2,0(r2)
  810558:	10c03fcc 	andi	r3,r2,255
  81055c:	2005883a 	mov	r2,r4
  810560:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  810564:	e0bffe17 	ldw	r2,-8(fp)
  810568:	10800417 	ldw	r2,16(r2)
  81056c:	10c00044 	addi	r3,r2,1
  810570:	e0bffe17 	ldw	r2,-8(fp)
  810574:	10c00415 	stw	r3,16(r2)
  810578:	e0bffe17 	ldw	r2,-8(fp)
  81057c:	10800417 	ldw	r2,16(r2)
  810580:	10c00fcc 	andi	r3,r2,63
  810584:	e0bffe17 	ldw	r2,-8(fp)
  810588:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81058c:	e0bffe17 	ldw	r2,-8(fp)
  810590:	10800117 	ldw	r2,4(r2)
  810594:	10c01014 	ori	r3,r2,64
  810598:	e0bffe17 	ldw	r2,-8(fp)
  81059c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8105a0:	00000f06 	br	8105e0 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8105a4:	e0bffe17 	ldw	r2,-8(fp)
  8105a8:	10800017 	ldw	r2,0(r2)
  8105ac:	10800204 	addi	r2,r2,8
  8105b0:	10800037 	ldwio	r2,0(r2)
  8105b4:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8105b8:	e0bfff17 	ldw	r2,-4(fp)
  8105bc:	1082000c 	andi	r2,r2,2048
  8105c0:	1004c03a 	cmpne	r2,r2,zero
  8105c4:	1000061e 	bne	r2,zero,8105e0 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8105c8:	e0bffe17 	ldw	r2,-8(fp)
  8105cc:	10c00117 	ldw	r3,4(r2)
  8105d0:	00bfefc4 	movi	r2,-65
  8105d4:	1886703a 	and	r3,r3,r2
  8105d8:	e0bffe17 	ldw	r2,-8(fp)
  8105dc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8105e0:	e0bffe17 	ldw	r2,-8(fp)
  8105e4:	10c00417 	ldw	r3,16(r2)
  8105e8:	e0bffe17 	ldw	r2,-8(fp)
  8105ec:	10800517 	ldw	r2,20(r2)
  8105f0:	1880061e 	bne	r3,r2,81060c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8105f4:	e0bffe17 	ldw	r2,-8(fp)
  8105f8:	10c00117 	ldw	r3,4(r2)
  8105fc:	00beefc4 	movi	r2,-1089
  810600:	1886703a 	and	r3,r3,r2
  810604:	e0bffe17 	ldw	r2,-8(fp)
  810608:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81060c:	e0bffe17 	ldw	r2,-8(fp)
  810610:	10800017 	ldw	r2,0(r2)
  810614:	11000304 	addi	r4,r2,12
  810618:	e0bffe17 	ldw	r2,-8(fp)
  81061c:	10800117 	ldw	r2,4(r2)
  810620:	1007883a 	mov	r3,r2
  810624:	2005883a 	mov	r2,r4
  810628:	10c00035 	stwio	r3,0(r2)
}
  81062c:	e037883a 	mov	sp,fp
  810630:	df000017 	ldw	fp,0(sp)
  810634:	dec00104 	addi	sp,sp,4
  810638:	f800283a 	ret

0081063c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81063c:	defffc04 	addi	sp,sp,-16
  810640:	df000315 	stw	fp,12(sp)
  810644:	df000304 	addi	fp,sp,12
  810648:	e13ffd15 	stw	r4,-12(fp)
  81064c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810650:	00000706 	br	810670 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  810654:	e0bffe17 	ldw	r2,-8(fp)
  810658:	1090000c 	andi	r2,r2,16384
  81065c:	1005003a 	cmpeq	r2,r2,zero
  810660:	1000031e 	bne	r2,zero,810670 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  810664:	00bffd44 	movi	r2,-11
  810668:	e0bfff15 	stw	r2,-4(fp)
  81066c:	00000606 	br	810688 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810670:	e0bffd17 	ldw	r2,-12(fp)
  810674:	10c00417 	ldw	r3,16(r2)
  810678:	e0bffd17 	ldw	r2,-12(fp)
  81067c:	10800517 	ldw	r2,20(r2)
  810680:	18bff41e 	bne	r3,r2,810654 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810684:	e03fff15 	stw	zero,-4(fp)
  810688:	e0bfff17 	ldw	r2,-4(fp)
}
  81068c:	e037883a 	mov	sp,fp
  810690:	df000017 	ldw	fp,0(sp)
  810694:	dec00104 	addi	sp,sp,4
  810698:	f800283a 	ret

0081069c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81069c:	defff004 	addi	sp,sp,-64
  8106a0:	dfc00f15 	stw	ra,60(sp)
  8106a4:	df000e15 	stw	fp,56(sp)
  8106a8:	df000e04 	addi	fp,sp,56
  8106ac:	e13ffb15 	stw	r4,-20(fp)
  8106b0:	e17ffc15 	stw	r5,-16(fp)
  8106b4:	e1bffd15 	stw	r6,-12(fp)
  8106b8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  8106bc:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  8106c0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8106c4:	e0bffe17 	ldw	r2,-8(fp)
  8106c8:	1090000c 	andi	r2,r2,16384
  8106cc:	1005003a 	cmpeq	r2,r2,zero
  8106d0:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  8106d4:	e0bffb17 	ldw	r2,-20(fp)
  8106d8:	10800217 	ldw	r2,8(r2)
  8106dc:	10800044 	addi	r2,r2,1
  8106e0:	10800fcc 	andi	r2,r2,63
  8106e4:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8106e8:	00001906 	br	810750 <altera_avalon_uart_read+0xb4>
    {
      count++;
  8106ec:	e0bff617 	ldw	r2,-40(fp)
  8106f0:	10800044 	addi	r2,r2,1
  8106f4:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8106f8:	e0bffb17 	ldw	r2,-20(fp)
  8106fc:	10c00217 	ldw	r3,8(r2)
  810700:	e0bffb17 	ldw	r2,-20(fp)
  810704:	1885883a 	add	r2,r3,r2
  810708:	10800704 	addi	r2,r2,28
  81070c:	10800003 	ldbu	r2,0(r2)
  810710:	1007883a 	mov	r3,r2
  810714:	e0bffc17 	ldw	r2,-16(fp)
  810718:	10c00005 	stb	r3,0(r2)
  81071c:	e0bffc17 	ldw	r2,-16(fp)
  810720:	10800044 	addi	r2,r2,1
  810724:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  810728:	e0bffb17 	ldw	r2,-20(fp)
  81072c:	10800217 	ldw	r2,8(r2)
  810730:	10c00044 	addi	r3,r2,1
  810734:	e0bffb17 	ldw	r2,-20(fp)
  810738:	10c00215 	stw	r3,8(r2)
  81073c:	e0bffb17 	ldw	r2,-20(fp)
  810740:	10800217 	ldw	r2,8(r2)
  810744:	10c00fcc 	andi	r3,r2,63
  810748:	e0bffb17 	ldw	r2,-20(fp)
  81074c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810750:	e0fff617 	ldw	r3,-40(fp)
  810754:	e0bffd17 	ldw	r2,-12(fp)
  810758:	1880050e 	bge	r3,r2,810770 <altera_avalon_uart_read+0xd4>
  81075c:	e0bffb17 	ldw	r2,-20(fp)
  810760:	10c00217 	ldw	r3,8(r2)
  810764:	e0bffb17 	ldw	r2,-20(fp)
  810768:	10800317 	ldw	r2,12(r2)
  81076c:	18bfdf1e 	bne	r3,r2,8106ec <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  810770:	e0bff617 	ldw	r2,-40(fp)
  810774:	1004c03a 	cmpne	r2,r2,zero
  810778:	1000271e 	bne	r2,zero,810818 <altera_avalon_uart_read+0x17c>
  81077c:	e0bffb17 	ldw	r2,-20(fp)
  810780:	10c00217 	ldw	r3,8(r2)
  810784:	e0bffb17 	ldw	r2,-20(fp)
  810788:	10800317 	ldw	r2,12(r2)
  81078c:	1880221e 	bne	r3,r2,810818 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  810790:	e0bff917 	ldw	r2,-28(fp)
  810794:	1004c03a 	cmpne	r2,r2,zero
  810798:	1000061e 	bne	r2,zero,8107b4 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81079c:	08108cc0 	call	8108cc <alt_get_errno>
  8107a0:	00c002c4 	movi	r3,11
  8107a4:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8107a8:	00800044 	movi	r2,1
  8107ac:	e0bff705 	stb	r2,-36(fp)
        break;
  8107b0:	00001f06 	br	810830 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107b4:	0005303a 	rdctl	r2,status
  8107b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107bc:	e0fff517 	ldw	r3,-44(fp)
  8107c0:	00bfff84 	movi	r2,-2
  8107c4:	1884703a 	and	r2,r3,r2
  8107c8:	1001703a 	wrctl	status,r2
  
  return context;
  8107cc:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8107d0:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8107d4:	e0bffb17 	ldw	r2,-20(fp)
  8107d8:	10800117 	ldw	r2,4(r2)
  8107dc:	10c02014 	ori	r3,r2,128
  8107e0:	e0bffb17 	ldw	r2,-20(fp)
  8107e4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8107e8:	e0bffb17 	ldw	r2,-20(fp)
  8107ec:	10800017 	ldw	r2,0(r2)
  8107f0:	11000304 	addi	r4,r2,12
  8107f4:	e0bffb17 	ldw	r2,-20(fp)
  8107f8:	10800117 	ldw	r2,4(r2)
  8107fc:	1007883a 	mov	r3,r2
  810800:	2005883a 	mov	r2,r4
  810804:	10c00035 	stwio	r3,0(r2)
  810808:	e0bffa17 	ldw	r2,-24(fp)
  81080c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810810:	e0bff417 	ldw	r2,-48(fp)
  810814:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  810818:	e0bff617 	ldw	r2,-40(fp)
  81081c:	1004c03a 	cmpne	r2,r2,zero
  810820:	1000031e 	bne	r2,zero,810830 <altera_avalon_uart_read+0x194>
  810824:	e0bffd17 	ldw	r2,-12(fp)
  810828:	1004c03a 	cmpne	r2,r2,zero
  81082c:	103fc81e 	bne	r2,zero,810750 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810830:	0005303a 	rdctl	r2,status
  810834:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810838:	e0fff317 	ldw	r3,-52(fp)
  81083c:	00bfff84 	movi	r2,-2
  810840:	1884703a 	and	r2,r3,r2
  810844:	1001703a 	wrctl	status,r2
  
  return context;
  810848:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  81084c:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810850:	e0bffb17 	ldw	r2,-20(fp)
  810854:	10800117 	ldw	r2,4(r2)
  810858:	10c02014 	ori	r3,r2,128
  81085c:	e0bffb17 	ldw	r2,-20(fp)
  810860:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810864:	e0bffb17 	ldw	r2,-20(fp)
  810868:	10800017 	ldw	r2,0(r2)
  81086c:	11000304 	addi	r4,r2,12
  810870:	e0bffb17 	ldw	r2,-20(fp)
  810874:	10800117 	ldw	r2,4(r2)
  810878:	1007883a 	mov	r3,r2
  81087c:	2005883a 	mov	r2,r4
  810880:	10c00035 	stwio	r3,0(r2)
  810884:	e0bffa17 	ldw	r2,-24(fp)
  810888:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81088c:	e0bff217 	ldw	r2,-56(fp)
  810890:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  810894:	e0bff703 	ldbu	r2,-36(fp)
  810898:	1005003a 	cmpeq	r2,r2,zero
  81089c:	1000031e 	bne	r2,zero,8108ac <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  8108a0:	00bffd04 	movi	r2,-12
  8108a4:	e0bfff15 	stw	r2,-4(fp)
  8108a8:	00000206 	br	8108b4 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  8108ac:	e0bff617 	ldw	r2,-40(fp)
  8108b0:	e0bfff15 	stw	r2,-4(fp)
  8108b4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8108b8:	e037883a 	mov	sp,fp
  8108bc:	dfc00117 	ldw	ra,4(sp)
  8108c0:	df000017 	ldw	fp,0(sp)
  8108c4:	dec00204 	addi	sp,sp,8
  8108c8:	f800283a 	ret

008108cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8108cc:	defffd04 	addi	sp,sp,-12
  8108d0:	dfc00215 	stw	ra,8(sp)
  8108d4:	df000115 	stw	fp,4(sp)
  8108d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8108dc:	00802074 	movhi	r2,129
  8108e0:	1091ad04 	addi	r2,r2,18100
  8108e4:	10800017 	ldw	r2,0(r2)
  8108e8:	1005003a 	cmpeq	r2,r2,zero
  8108ec:	1000061e 	bne	r2,zero,810908 <alt_get_errno+0x3c>
  8108f0:	00802074 	movhi	r2,129
  8108f4:	1091ad04 	addi	r2,r2,18100
  8108f8:	10800017 	ldw	r2,0(r2)
  8108fc:	103ee83a 	callr	r2
  810900:	e0bfff15 	stw	r2,-4(fp)
  810904:	00000306 	br	810914 <alt_get_errno+0x48>
  810908:	00802074 	movhi	r2,129
  81090c:	1098f404 	addi	r2,r2,25552
  810910:	e0bfff15 	stw	r2,-4(fp)
  810914:	e0bfff17 	ldw	r2,-4(fp)
}
  810918:	e037883a 	mov	sp,fp
  81091c:	dfc00117 	ldw	ra,4(sp)
  810920:	df000017 	ldw	fp,0(sp)
  810924:	dec00204 	addi	sp,sp,8
  810928:	f800283a 	ret

0081092c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  81092c:	defff204 	addi	sp,sp,-56
  810930:	dfc00d15 	stw	ra,52(sp)
  810934:	df000c15 	stw	fp,48(sp)
  810938:	df000c04 	addi	fp,sp,48
  81093c:	e13ffc15 	stw	r4,-16(fp)
  810940:	e17ffd15 	stw	r5,-12(fp)
  810944:	e1bffe15 	stw	r6,-8(fp)
  810948:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  81094c:	e0bffe17 	ldw	r2,-8(fp)
  810950:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  810954:	e0bfff17 	ldw	r2,-4(fp)
  810958:	1090000c 	andi	r2,r2,16384
  81095c:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810960:	00004006 	br	810a64 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810964:	e0bffc17 	ldw	r2,-16(fp)
  810968:	10800517 	ldw	r2,20(r2)
  81096c:	10800044 	addi	r2,r2,1
  810970:	10800fcc 	andi	r2,r2,63
  810974:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  810978:	e0bffc17 	ldw	r2,-16(fp)
  81097c:	10c00417 	ldw	r3,16(r2)
  810980:	e0bff917 	ldw	r2,-28(fp)
  810984:	1880251e 	bne	r3,r2,810a1c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  810988:	e0bffa17 	ldw	r2,-24(fp)
  81098c:	1005003a 	cmpeq	r2,r2,zero
  810990:	1000051e 	bne	r2,zero,8109a8 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  810994:	0810af40 	call	810af4 <alt_get_errno>
  810998:	1007883a 	mov	r3,r2
  81099c:	008002c4 	movi	r2,11
  8109a0:	18800015 	stw	r2,0(r3)
        break;
  8109a4:	00003206 	br	810a70 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109a8:	0005303a 	rdctl	r2,status
  8109ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109b0:	e0fff717 	ldw	r3,-36(fp)
  8109b4:	00bfff84 	movi	r2,-2
  8109b8:	1884703a 	and	r2,r3,r2
  8109bc:	1001703a 	wrctl	status,r2
  
  return context;
  8109c0:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8109c4:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8109c8:	e0bffc17 	ldw	r2,-16(fp)
  8109cc:	10800117 	ldw	r2,4(r2)
  8109d0:	10c11014 	ori	r3,r2,1088
  8109d4:	e0bffc17 	ldw	r2,-16(fp)
  8109d8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8109dc:	e0bffc17 	ldw	r2,-16(fp)
  8109e0:	10800017 	ldw	r2,0(r2)
  8109e4:	11000304 	addi	r4,r2,12
  8109e8:	e0bffc17 	ldw	r2,-16(fp)
  8109ec:	10800117 	ldw	r2,4(r2)
  8109f0:	1007883a 	mov	r3,r2
  8109f4:	2005883a 	mov	r2,r4
  8109f8:	10c00035 	stwio	r3,0(r2)
  8109fc:	e0bffb17 	ldw	r2,-20(fp)
  810a00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a04:	e0bff617 	ldw	r2,-40(fp)
  810a08:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  810a0c:	e0bffc17 	ldw	r2,-16(fp)
  810a10:	10c00417 	ldw	r3,16(r2)
  810a14:	e0bff917 	ldw	r2,-28(fp)
  810a18:	18bffc26 	beq	r3,r2,810a0c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  810a1c:	e0bff817 	ldw	r2,-32(fp)
  810a20:	10bfffc4 	addi	r2,r2,-1
  810a24:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  810a28:	e0bffc17 	ldw	r2,-16(fp)
  810a2c:	10c00517 	ldw	r3,20(r2)
  810a30:	e0bffd17 	ldw	r2,-12(fp)
  810a34:	10800003 	ldbu	r2,0(r2)
  810a38:	1009883a 	mov	r4,r2
  810a3c:	e0bffc17 	ldw	r2,-16(fp)
  810a40:	1885883a 	add	r2,r3,r2
  810a44:	10801704 	addi	r2,r2,92
  810a48:	11000005 	stb	r4,0(r2)
  810a4c:	e0bffd17 	ldw	r2,-12(fp)
  810a50:	10800044 	addi	r2,r2,1
  810a54:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  810a58:	e0fffc17 	ldw	r3,-16(fp)
  810a5c:	e0bff917 	ldw	r2,-28(fp)
  810a60:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810a64:	e0bff817 	ldw	r2,-32(fp)
  810a68:	1004c03a 	cmpne	r2,r2,zero
  810a6c:	103fbd1e 	bne	r2,zero,810964 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a70:	0005303a 	rdctl	r2,status
  810a74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a78:	e0fff517 	ldw	r3,-44(fp)
  810a7c:	00bfff84 	movi	r2,-2
  810a80:	1884703a 	and	r2,r3,r2
  810a84:	1001703a 	wrctl	status,r2
  
  return context;
  810a88:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  810a8c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810a90:	e0bffc17 	ldw	r2,-16(fp)
  810a94:	10800117 	ldw	r2,4(r2)
  810a98:	10c11014 	ori	r3,r2,1088
  810a9c:	e0bffc17 	ldw	r2,-16(fp)
  810aa0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810aa4:	e0bffc17 	ldw	r2,-16(fp)
  810aa8:	10800017 	ldw	r2,0(r2)
  810aac:	11000304 	addi	r4,r2,12
  810ab0:	e0bffc17 	ldw	r2,-16(fp)
  810ab4:	10800117 	ldw	r2,4(r2)
  810ab8:	1007883a 	mov	r3,r2
  810abc:	2005883a 	mov	r2,r4
  810ac0:	10c00035 	stwio	r3,0(r2)
  810ac4:	e0bffb17 	ldw	r2,-20(fp)
  810ac8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810acc:	e0bff417 	ldw	r2,-48(fp)
  810ad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  810ad4:	e0fffe17 	ldw	r3,-8(fp)
  810ad8:	e0bff817 	ldw	r2,-32(fp)
  810adc:	1885c83a 	sub	r2,r3,r2
}
  810ae0:	e037883a 	mov	sp,fp
  810ae4:	dfc00117 	ldw	ra,4(sp)
  810ae8:	df000017 	ldw	fp,0(sp)
  810aec:	dec00204 	addi	sp,sp,8
  810af0:	f800283a 	ret

00810af4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810af4:	defffd04 	addi	sp,sp,-12
  810af8:	dfc00215 	stw	ra,8(sp)
  810afc:	df000115 	stw	fp,4(sp)
  810b00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810b04:	00802074 	movhi	r2,129
  810b08:	1091ad04 	addi	r2,r2,18100
  810b0c:	10800017 	ldw	r2,0(r2)
  810b10:	1005003a 	cmpeq	r2,r2,zero
  810b14:	1000061e 	bne	r2,zero,810b30 <alt_get_errno+0x3c>
  810b18:	00802074 	movhi	r2,129
  810b1c:	1091ad04 	addi	r2,r2,18100
  810b20:	10800017 	ldw	r2,0(r2)
  810b24:	103ee83a 	callr	r2
  810b28:	e0bfff15 	stw	r2,-4(fp)
  810b2c:	00000306 	br	810b3c <alt_get_errno+0x48>
  810b30:	00802074 	movhi	r2,129
  810b34:	1098f404 	addi	r2,r2,25552
  810b38:	e0bfff15 	stw	r2,-4(fp)
  810b3c:	e0bfff17 	ldw	r2,-4(fp)
}
  810b40:	e037883a 	mov	sp,fp
  810b44:	dfc00117 	ldw	ra,4(sp)
  810b48:	df000017 	ldw	fp,0(sp)
  810b4c:	dec00204 	addi	sp,sp,8
  810b50:	f800283a 	ret

00810b54 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810b54:	defff404 	addi	sp,sp,-48
  810b58:	df000b15 	stw	fp,44(sp)
  810b5c:	df000b04 	addi	fp,sp,44
  810b60:	e13ffb15 	stw	r4,-20(fp)
  810b64:	e17ffc15 	stw	r5,-16(fp)
  810b68:	e1bffd15 	stw	r6,-12(fp)
  810b6c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810b70:	e03ff915 	stw	zero,-28(fp)
  810b74:	00802074 	movhi	r2,129
  810b78:	1098fc04 	addi	r2,r2,25584
  810b7c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810b80:	1005003a 	cmpeq	r2,r2,zero
  810b84:	1000411e 	bne	r2,zero,810c8c <alt_alarm_start+0x138>
  {
    if (alarm)
  810b88:	e0bffb17 	ldw	r2,-20(fp)
  810b8c:	1005003a 	cmpeq	r2,r2,zero
  810b90:	10003b1e 	bne	r2,zero,810c80 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810b94:	e0fffb17 	ldw	r3,-20(fp)
  810b98:	e0bffd17 	ldw	r2,-12(fp)
  810b9c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810ba0:	e0fffb17 	ldw	r3,-20(fp)
  810ba4:	e0bffe17 	ldw	r2,-8(fp)
  810ba8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810bac:	0005303a 	rdctl	r2,status
  810bb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810bb4:	e0fff817 	ldw	r3,-32(fp)
  810bb8:	00bfff84 	movi	r2,-2
  810bbc:	1884703a 	and	r2,r3,r2
  810bc0:	1001703a 	wrctl	status,r2
  
  return context;
  810bc4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810bc8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810bcc:	00802074 	movhi	r2,129
  810bd0:	1098fd04 	addi	r2,r2,25588
  810bd4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810bd8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810bdc:	e0fffc17 	ldw	r3,-16(fp)
  810be0:	e0bff917 	ldw	r2,-28(fp)
  810be4:	1885883a 	add	r2,r3,r2
  810be8:	10c00044 	addi	r3,r2,1
  810bec:	e0bffb17 	ldw	r2,-20(fp)
  810bf0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810bf4:	e0bffb17 	ldw	r2,-20(fp)
  810bf8:	10c00217 	ldw	r3,8(r2)
  810bfc:	e0bff917 	ldw	r2,-28(fp)
  810c00:	1880042e 	bgeu	r3,r2,810c14 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810c04:	e0fffb17 	ldw	r3,-20(fp)
  810c08:	00800044 	movi	r2,1
  810c0c:	18800405 	stb	r2,16(r3)
  810c10:	00000206 	br	810c1c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810c14:	e0bffb17 	ldw	r2,-20(fp)
  810c18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810c1c:	e0fffb17 	ldw	r3,-20(fp)
  810c20:	00802074 	movhi	r2,129
  810c24:	1091b004 	addi	r2,r2,18112
  810c28:	e0bff615 	stw	r2,-40(fp)
  810c2c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810c30:	e0fff717 	ldw	r3,-36(fp)
  810c34:	e0bff617 	ldw	r2,-40(fp)
  810c38:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810c3c:	e0bff617 	ldw	r2,-40(fp)
  810c40:	10c00017 	ldw	r3,0(r2)
  810c44:	e0bff717 	ldw	r2,-36(fp)
  810c48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810c4c:	e0bff617 	ldw	r2,-40(fp)
  810c50:	10c00017 	ldw	r3,0(r2)
  810c54:	e0bff717 	ldw	r2,-36(fp)
  810c58:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810c5c:	e0fff617 	ldw	r3,-40(fp)
  810c60:	e0bff717 	ldw	r2,-36(fp)
  810c64:	18800015 	stw	r2,0(r3)
  810c68:	e0bffa17 	ldw	r2,-24(fp)
  810c6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c70:	e0bff517 	ldw	r2,-44(fp)
  810c74:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810c78:	e03fff15 	stw	zero,-4(fp)
  810c7c:	00000506 	br	810c94 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810c80:	00bffa84 	movi	r2,-22
  810c84:	e0bfff15 	stw	r2,-4(fp)
  810c88:	00000206 	br	810c94 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810c8c:	00bfde84 	movi	r2,-134
  810c90:	e0bfff15 	stw	r2,-4(fp)
  810c94:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  810c98:	e037883a 	mov	sp,fp
  810c9c:	df000017 	ldw	fp,0(sp)
  810ca0:	dec00104 	addi	sp,sp,4
  810ca4:	f800283a 	ret

00810ca8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  810ca8:	defffa04 	addi	sp,sp,-24
  810cac:	dfc00515 	stw	ra,20(sp)
  810cb0:	df000415 	stw	fp,16(sp)
  810cb4:	df000404 	addi	fp,sp,16
  810cb8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  810cbc:	008000c4 	movi	r2,3
  810cc0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  810cc4:	e0fffc17 	ldw	r3,-16(fp)
  810cc8:	008003f4 	movhi	r2,15
  810ccc:	10909004 	addi	r2,r2,16960
  810cd0:	188b383a 	mul	r5,r3,r2
  810cd4:	0100bef4 	movhi	r4,763
  810cd8:	213c2004 	addi	r4,r4,-3968
  810cdc:	080dec40 	call	80dec4 <__udivsi3>
  810ce0:	100b883a 	mov	r5,r2
  810ce4:	01200034 	movhi	r4,32768
  810ce8:	213fffc4 	addi	r4,r4,-1
  810cec:	080dec40 	call	80dec4 <__udivsi3>
  810cf0:	100b883a 	mov	r5,r2
  810cf4:	e13fff17 	ldw	r4,-4(fp)
  810cf8:	080dec40 	call	80dec4 <__udivsi3>
  810cfc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  810d00:	e0bffd17 	ldw	r2,-12(fp)
  810d04:	1005003a 	cmpeq	r2,r2,zero
  810d08:	1000281e 	bne	r2,zero,810dac <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  810d0c:	e03ffe15 	stw	zero,-8(fp)
  810d10:	00001606 	br	810d6c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  810d14:	00a00034 	movhi	r2,32768
  810d18:	10bfffc4 	addi	r2,r2,-1
  810d1c:	10bfffc4 	addi	r2,r2,-1
  810d20:	103ffe1e 	bne	r2,zero,810d1c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  810d24:	e0fffc17 	ldw	r3,-16(fp)
  810d28:	008003f4 	movhi	r2,15
  810d2c:	10909004 	addi	r2,r2,16960
  810d30:	188b383a 	mul	r5,r3,r2
  810d34:	0100bef4 	movhi	r4,763
  810d38:	213c2004 	addi	r4,r4,-3968
  810d3c:	080dec40 	call	80dec4 <__udivsi3>
  810d40:	100b883a 	mov	r5,r2
  810d44:	01200034 	movhi	r4,32768
  810d48:	213fffc4 	addi	r4,r4,-1
  810d4c:	080dec40 	call	80dec4 <__udivsi3>
  810d50:	1007883a 	mov	r3,r2
  810d54:	e0bfff17 	ldw	r2,-4(fp)
  810d58:	10c5c83a 	sub	r2,r2,r3
  810d5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  810d60:	e0bffe17 	ldw	r2,-8(fp)
  810d64:	10800044 	addi	r2,r2,1
  810d68:	e0bffe15 	stw	r2,-8(fp)
  810d6c:	e0fffe17 	ldw	r3,-8(fp)
  810d70:	e0bffd17 	ldw	r2,-12(fp)
  810d74:	18bfe716 	blt	r3,r2,810d14 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  810d78:	e0fffc17 	ldw	r3,-16(fp)
  810d7c:	008003f4 	movhi	r2,15
  810d80:	10909004 	addi	r2,r2,16960
  810d84:	188b383a 	mul	r5,r3,r2
  810d88:	0100bef4 	movhi	r4,763
  810d8c:	213c2004 	addi	r4,r4,-3968
  810d90:	080dec40 	call	80dec4 <__udivsi3>
  810d94:	1007883a 	mov	r3,r2
  810d98:	e0bfff17 	ldw	r2,-4(fp)
  810d9c:	1885383a 	mul	r2,r3,r2
  810da0:	10bfffc4 	addi	r2,r2,-1
  810da4:	103ffe1e 	bne	r2,zero,810da0 <alt_busy_sleep+0xf8>
  810da8:	00000c06 	br	810ddc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  810dac:	e0fffc17 	ldw	r3,-16(fp)
  810db0:	008003f4 	movhi	r2,15
  810db4:	10909004 	addi	r2,r2,16960
  810db8:	188b383a 	mul	r5,r3,r2
  810dbc:	0100bef4 	movhi	r4,763
  810dc0:	213c2004 	addi	r4,r4,-3968
  810dc4:	080dec40 	call	80dec4 <__udivsi3>
  810dc8:	1007883a 	mov	r3,r2
  810dcc:	e0bfff17 	ldw	r2,-4(fp)
  810dd0:	1885383a 	mul	r2,r3,r2
  810dd4:	10bfffc4 	addi	r2,r2,-1
  810dd8:	00bffe16 	blt	zero,r2,810dd4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  810ddc:	0005883a 	mov	r2,zero
}
  810de0:	e037883a 	mov	sp,fp
  810de4:	dfc00117 	ldw	ra,4(sp)
  810de8:	df000017 	ldw	fp,0(sp)
  810dec:	dec00204 	addi	sp,sp,8
  810df0:	f800283a 	ret

00810df4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  810df4:	defffe04 	addi	sp,sp,-8
  810df8:	df000115 	stw	fp,4(sp)
  810dfc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810e00:	e03fff15 	stw	zero,-4(fp)
  810e04:	00000506 	br	810e1c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  810e08:	e0bfff17 	ldw	r2,-4(fp)
  810e0c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  810e10:	e0bfff17 	ldw	r2,-4(fp)
  810e14:	10800804 	addi	r2,r2,32
  810e18:	e0bfff15 	stw	r2,-4(fp)
  810e1c:	e0bfff17 	ldw	r2,-4(fp)
  810e20:	10820030 	cmpltui	r2,r2,2048
  810e24:	103ff81e 	bne	r2,zero,810e08 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  810e28:	e037883a 	mov	sp,fp
  810e2c:	df000017 	ldw	fp,0(sp)
  810e30:	dec00104 	addi	sp,sp,4
  810e34:	f800283a 	ret

00810e38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810e38:	defff904 	addi	sp,sp,-28
  810e3c:	dfc00615 	stw	ra,24(sp)
  810e40:	df000515 	stw	fp,20(sp)
  810e44:	df000504 	addi	fp,sp,20
  810e48:	e13ffd15 	stw	r4,-12(fp)
  810e4c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810e50:	e0bffd17 	ldw	r2,-12(fp)
  810e54:	1005003a 	cmpeq	r2,r2,zero
  810e58:	1000041e 	bne	r2,zero,810e6c <alt_dev_llist_insert+0x34>
  810e5c:	e0bffd17 	ldw	r2,-12(fp)
  810e60:	10800217 	ldw	r2,8(r2)
  810e64:	1004c03a 	cmpne	r2,r2,zero
  810e68:	1000071e 	bne	r2,zero,810e88 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  810e6c:	0810eec0 	call	810eec <alt_get_errno>
  810e70:	1007883a 	mov	r3,r2
  810e74:	00800584 	movi	r2,22
  810e78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810e7c:	00bffa84 	movi	r2,-22
  810e80:	e0bfff15 	stw	r2,-4(fp)
  810e84:	00001306 	br	810ed4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810e88:	e0fffd17 	ldw	r3,-12(fp)
  810e8c:	e0bffe17 	ldw	r2,-8(fp)
  810e90:	e0bffb15 	stw	r2,-20(fp)
  810e94:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810e98:	e0fffc17 	ldw	r3,-16(fp)
  810e9c:	e0bffb17 	ldw	r2,-20(fp)
  810ea0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810ea4:	e0bffb17 	ldw	r2,-20(fp)
  810ea8:	10c00017 	ldw	r3,0(r2)
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810eb4:	e0bffb17 	ldw	r2,-20(fp)
  810eb8:	10c00017 	ldw	r3,0(r2)
  810ebc:	e0bffc17 	ldw	r2,-16(fp)
  810ec0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810ec4:	e0fffb17 	ldw	r3,-20(fp)
  810ec8:	e0bffc17 	ldw	r2,-16(fp)
  810ecc:	18800015 	stw	r2,0(r3)

  return 0;  
  810ed0:	e03fff15 	stw	zero,-4(fp)
  810ed4:	e0bfff17 	ldw	r2,-4(fp)
}
  810ed8:	e037883a 	mov	sp,fp
  810edc:	dfc00117 	ldw	ra,4(sp)
  810ee0:	df000017 	ldw	fp,0(sp)
  810ee4:	dec00204 	addi	sp,sp,8
  810ee8:	f800283a 	ret

00810eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810eec:	defffd04 	addi	sp,sp,-12
  810ef0:	dfc00215 	stw	ra,8(sp)
  810ef4:	df000115 	stw	fp,4(sp)
  810ef8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810efc:	00802074 	movhi	r2,129
  810f00:	1091ad04 	addi	r2,r2,18100
  810f04:	10800017 	ldw	r2,0(r2)
  810f08:	1005003a 	cmpeq	r2,r2,zero
  810f0c:	1000061e 	bne	r2,zero,810f28 <alt_get_errno+0x3c>
  810f10:	00802074 	movhi	r2,129
  810f14:	1091ad04 	addi	r2,r2,18100
  810f18:	10800017 	ldw	r2,0(r2)
  810f1c:	103ee83a 	callr	r2
  810f20:	e0bfff15 	stw	r2,-4(fp)
  810f24:	00000306 	br	810f34 <alt_get_errno+0x48>
  810f28:	00802074 	movhi	r2,129
  810f2c:	1098f404 	addi	r2,r2,25552
  810f30:	e0bfff15 	stw	r2,-4(fp)
  810f34:	e0bfff17 	ldw	r2,-4(fp)
}
  810f38:	e037883a 	mov	sp,fp
  810f3c:	dfc00117 	ldw	ra,4(sp)
  810f40:	df000017 	ldw	fp,0(sp)
  810f44:	dec00204 	addi	sp,sp,8
  810f48:	f800283a 	ret

00810f4c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810f4c:	defffd04 	addi	sp,sp,-12
  810f50:	dfc00215 	stw	ra,8(sp)
  810f54:	df000115 	stw	fp,4(sp)
  810f58:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810f5c:	00bfff04 	movi	r2,-4
  810f60:	00c02074 	movhi	r3,129
  810f64:	18c80e04 	addi	r3,r3,8248
  810f68:	1885883a 	add	r2,r3,r2
  810f6c:	e0bfff15 	stw	r2,-4(fp)
  810f70:	00000606 	br	810f8c <_do_ctors+0x40>
        (*ctor) (); 
  810f74:	e0bfff17 	ldw	r2,-4(fp)
  810f78:	10800017 	ldw	r2,0(r2)
  810f7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810f80:	e0bfff17 	ldw	r2,-4(fp)
  810f84:	10bfff04 	addi	r2,r2,-4
  810f88:	e0bfff15 	stw	r2,-4(fp)
  810f8c:	e0ffff17 	ldw	r3,-4(fp)
  810f90:	00802074 	movhi	r2,129
  810f94:	10880d04 	addi	r2,r2,8244
  810f98:	18bff62e 	bgeu	r3,r2,810f74 <_do_ctors+0x28>
        (*ctor) (); 
}
  810f9c:	e037883a 	mov	sp,fp
  810fa0:	dfc00117 	ldw	ra,4(sp)
  810fa4:	df000017 	ldw	fp,0(sp)
  810fa8:	dec00204 	addi	sp,sp,8
  810fac:	f800283a 	ret

00810fb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  810fb0:	defffd04 	addi	sp,sp,-12
  810fb4:	dfc00215 	stw	ra,8(sp)
  810fb8:	df000115 	stw	fp,4(sp)
  810fbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810fc0:	00bfff04 	movi	r2,-4
  810fc4:	00c02074 	movhi	r3,129
  810fc8:	18c80e04 	addi	r3,r3,8248
  810fcc:	1885883a 	add	r2,r3,r2
  810fd0:	e0bfff15 	stw	r2,-4(fp)
  810fd4:	00000606 	br	810ff0 <_do_dtors+0x40>
        (*dtor) (); 
  810fd8:	e0bfff17 	ldw	r2,-4(fp)
  810fdc:	10800017 	ldw	r2,0(r2)
  810fe0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810fe4:	e0bfff17 	ldw	r2,-4(fp)
  810fe8:	10bfff04 	addi	r2,r2,-4
  810fec:	e0bfff15 	stw	r2,-4(fp)
  810ff0:	e0ffff17 	ldw	r3,-4(fp)
  810ff4:	00802074 	movhi	r2,129
  810ff8:	10880e04 	addi	r2,r2,8248
  810ffc:	18bff62e 	bgeu	r3,r2,810fd8 <_do_dtors+0x28>
        (*dtor) (); 
}
  811000:	e037883a 	mov	sp,fp
  811004:	dfc00117 	ldw	ra,4(sp)
  811008:	df000017 	ldw	fp,0(sp)
  81100c:	dec00204 	addi	sp,sp,8
  811010:	f800283a 	ret

00811014 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811014:	defffe04 	addi	sp,sp,-8
  811018:	dfc00115 	stw	ra,4(sp)
  81101c:	df000015 	stw	fp,0(sp)
  811020:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811024:	0009883a 	mov	r4,zero
  811028:	01440004 	movi	r5,4096
  81102c:	0811b400 	call	811b40 <alt_icache_flush>
#endif
}
  811030:	e037883a 	mov	sp,fp
  811034:	dfc00117 	ldw	ra,4(sp)
  811038:	df000017 	ldw	fp,0(sp)
  81103c:	dec00204 	addi	sp,sp,8
  811040:	f800283a 	ret

00811044 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811044:	defff904 	addi	sp,sp,-28
  811048:	dfc00615 	stw	ra,24(sp)
  81104c:	df000515 	stw	fp,20(sp)
  811050:	df000504 	addi	fp,sp,20
  811054:	e13ffc15 	stw	r4,-16(fp)
  811058:	e17ffd15 	stw	r5,-12(fp)
  81105c:	e1bffe15 	stw	r6,-8(fp)
  811060:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811064:	e0800217 	ldw	r2,8(fp)
  811068:	d8800015 	stw	r2,0(sp)
  81106c:	e13ffc17 	ldw	r4,-16(fp)
  811070:	e17ffd17 	ldw	r5,-12(fp)
  811074:	e1bffe17 	ldw	r6,-8(fp)
  811078:	e1ffff17 	ldw	r7,-4(fp)
  81107c:	08112180 	call	811218 <alt_iic_isr_register>
}  
  811080:	e037883a 	mov	sp,fp
  811084:	dfc00117 	ldw	ra,4(sp)
  811088:	df000017 	ldw	fp,0(sp)
  81108c:	dec00204 	addi	sp,sp,8
  811090:	f800283a 	ret

00811094 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  811094:	defff904 	addi	sp,sp,-28
  811098:	df000615 	stw	fp,24(sp)
  81109c:	df000604 	addi	fp,sp,24
  8110a0:	e13ffe15 	stw	r4,-8(fp)
  8110a4:	e17fff15 	stw	r5,-4(fp)
  8110a8:	e0bfff17 	ldw	r2,-4(fp)
  8110ac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8110b0:	0005303a 	rdctl	r2,status
  8110b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110b8:	e0fffb17 	ldw	r3,-20(fp)
  8110bc:	00bfff84 	movi	r2,-2
  8110c0:	1884703a 	and	r2,r3,r2
  8110c4:	1001703a 	wrctl	status,r2
  
  return context;
  8110c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8110cc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8110d0:	e0fffc17 	ldw	r3,-16(fp)
  8110d4:	00800044 	movi	r2,1
  8110d8:	10c4983a 	sll	r2,r2,r3
  8110dc:	1007883a 	mov	r3,r2
  8110e0:	00802074 	movhi	r2,129
  8110e4:	1098f804 	addi	r2,r2,25568
  8110e8:	10800017 	ldw	r2,0(r2)
  8110ec:	1886b03a 	or	r3,r3,r2
  8110f0:	00802074 	movhi	r2,129
  8110f4:	1098f804 	addi	r2,r2,25568
  8110f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8110fc:	00802074 	movhi	r2,129
  811100:	1098f804 	addi	r2,r2,25568
  811104:	10800017 	ldw	r2,0(r2)
  811108:	100170fa 	wrctl	ienable,r2
  81110c:	e0bffd17 	ldw	r2,-12(fp)
  811110:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811114:	e0bffa17 	ldw	r2,-24(fp)
  811118:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81111c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811120:	e037883a 	mov	sp,fp
  811124:	df000017 	ldw	fp,0(sp)
  811128:	dec00104 	addi	sp,sp,4
  81112c:	f800283a 	ret

00811130 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811130:	defff904 	addi	sp,sp,-28
  811134:	df000615 	stw	fp,24(sp)
  811138:	df000604 	addi	fp,sp,24
  81113c:	e13ffe15 	stw	r4,-8(fp)
  811140:	e17fff15 	stw	r5,-4(fp)
  811144:	e0bfff17 	ldw	r2,-4(fp)
  811148:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81114c:	0005303a 	rdctl	r2,status
  811150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811154:	e0fffb17 	ldw	r3,-20(fp)
  811158:	00bfff84 	movi	r2,-2
  81115c:	1884703a 	and	r2,r3,r2
  811160:	1001703a 	wrctl	status,r2
  
  return context;
  811164:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811168:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  81116c:	e0fffc17 	ldw	r3,-16(fp)
  811170:	00800044 	movi	r2,1
  811174:	10c4983a 	sll	r2,r2,r3
  811178:	0084303a 	nor	r2,zero,r2
  81117c:	1007883a 	mov	r3,r2
  811180:	00802074 	movhi	r2,129
  811184:	1098f804 	addi	r2,r2,25568
  811188:	10800017 	ldw	r2,0(r2)
  81118c:	1886703a 	and	r3,r3,r2
  811190:	00802074 	movhi	r2,129
  811194:	1098f804 	addi	r2,r2,25568
  811198:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81119c:	00802074 	movhi	r2,129
  8111a0:	1098f804 	addi	r2,r2,25568
  8111a4:	10800017 	ldw	r2,0(r2)
  8111a8:	100170fa 	wrctl	ienable,r2
  8111ac:	e0bffd17 	ldw	r2,-12(fp)
  8111b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111b4:	e0bffa17 	ldw	r2,-24(fp)
  8111b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8111bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8111c0:	e037883a 	mov	sp,fp
  8111c4:	df000017 	ldw	fp,0(sp)
  8111c8:	dec00104 	addi	sp,sp,4
  8111cc:	f800283a 	ret

008111d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8111d0:	defffc04 	addi	sp,sp,-16
  8111d4:	df000315 	stw	fp,12(sp)
  8111d8:	df000304 	addi	fp,sp,12
  8111dc:	e13ffe15 	stw	r4,-8(fp)
  8111e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8111e4:	000530fa 	rdctl	r2,ienable
  8111e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8111ec:	e0ffff17 	ldw	r3,-4(fp)
  8111f0:	00800044 	movi	r2,1
  8111f4:	10c4983a 	sll	r2,r2,r3
  8111f8:	1007883a 	mov	r3,r2
  8111fc:	e0bffd17 	ldw	r2,-12(fp)
  811200:	1884703a 	and	r2,r3,r2
  811204:	1004c03a 	cmpne	r2,r2,zero
}
  811208:	e037883a 	mov	sp,fp
  81120c:	df000017 	ldw	fp,0(sp)
  811210:	dec00104 	addi	sp,sp,4
  811214:	f800283a 	ret

00811218 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811218:	defff404 	addi	sp,sp,-48
  81121c:	dfc00b15 	stw	ra,44(sp)
  811220:	df000a15 	stw	fp,40(sp)
  811224:	df000a04 	addi	fp,sp,40
  811228:	e13ffb15 	stw	r4,-20(fp)
  81122c:	e17ffc15 	stw	r5,-16(fp)
  811230:	e1bffd15 	stw	r6,-12(fp)
  811234:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  811238:	00bffa84 	movi	r2,-22
  81123c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811240:	e0bffc17 	ldw	r2,-16(fp)
  811244:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811248:	e0bff917 	ldw	r2,-28(fp)
  81124c:	10800808 	cmpgei	r2,r2,32
  811250:	1000291e 	bne	r2,zero,8112f8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811254:	0005303a 	rdctl	r2,status
  811258:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81125c:	e0fff717 	ldw	r3,-36(fp)
  811260:	00bfff84 	movi	r2,-2
  811264:	1884703a 	and	r2,r3,r2
  811268:	1001703a 	wrctl	status,r2
  
  return context;
  81126c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811270:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  811274:	e0bff917 	ldw	r2,-28(fp)
  811278:	00c02074 	movhi	r3,129
  81127c:	18db0804 	addi	r3,r3,27680
  811280:	100490fa 	slli	r2,r2,3
  811284:	10c7883a 	add	r3,r2,r3
  811288:	e0bffd17 	ldw	r2,-12(fp)
  81128c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  811290:	e0bff917 	ldw	r2,-28(fp)
  811294:	00c02074 	movhi	r3,129
  811298:	18db0804 	addi	r3,r3,27680
  81129c:	100490fa 	slli	r2,r2,3
  8112a0:	10c5883a 	add	r2,r2,r3
  8112a4:	10c00104 	addi	r3,r2,4
  8112a8:	e0bffe17 	ldw	r2,-8(fp)
  8112ac:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8112b0:	e0bffd17 	ldw	r2,-12(fp)
  8112b4:	1005003a 	cmpeq	r2,r2,zero
  8112b8:	1000051e 	bne	r2,zero,8112d0 <alt_iic_isr_register+0xb8>
  8112bc:	e17ff917 	ldw	r5,-28(fp)
  8112c0:	e13ffb17 	ldw	r4,-20(fp)
  8112c4:	08110940 	call	811094 <alt_ic_irq_enable>
  8112c8:	e0bfff15 	stw	r2,-4(fp)
  8112cc:	00000406 	br	8112e0 <alt_iic_isr_register+0xc8>
  8112d0:	e17ff917 	ldw	r5,-28(fp)
  8112d4:	e13ffb17 	ldw	r4,-20(fp)
  8112d8:	08111300 	call	811130 <alt_ic_irq_disable>
  8112dc:	e0bfff15 	stw	r2,-4(fp)
  8112e0:	e0bfff17 	ldw	r2,-4(fp)
  8112e4:	e0bffa15 	stw	r2,-24(fp)
  8112e8:	e0bff817 	ldw	r2,-32(fp)
  8112ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112f0:	e0bff617 	ldw	r2,-40(fp)
  8112f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8112f8:	e0bffa17 	ldw	r2,-24(fp)
}
  8112fc:	e037883a 	mov	sp,fp
  811300:	dfc00117 	ldw	ra,4(sp)
  811304:	df000017 	ldw	fp,0(sp)
  811308:	dec00204 	addi	sp,sp,8
  81130c:	f800283a 	ret

00811310 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811310:	defff904 	addi	sp,sp,-28
  811314:	dfc00615 	stw	ra,24(sp)
  811318:	df000515 	stw	fp,20(sp)
  81131c:	df000504 	addi	fp,sp,20
  811320:	e13ffc15 	stw	r4,-16(fp)
  811324:	e17ffd15 	stw	r5,-12(fp)
  811328:	e1bffe15 	stw	r6,-8(fp)
  81132c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811330:	e13ffd17 	ldw	r4,-12(fp)
  811334:	e17ffe17 	ldw	r5,-8(fp)
  811338:	e1bfff17 	ldw	r6,-4(fp)
  81133c:	08115280 	call	811528 <open>
  811340:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811344:	e0bffb17 	ldw	r2,-20(fp)
  811348:	1004803a 	cmplt	r2,r2,zero
  81134c:	10001c1e 	bne	r2,zero,8113c0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  811350:	e0bffb17 	ldw	r2,-20(fp)
  811354:	00c02074 	movhi	r3,129
  811358:	18cc8704 	addi	r3,r3,12828
  81135c:	10800324 	muli	r2,r2,12
  811360:	10c5883a 	add	r2,r2,r3
  811364:	10c00017 	ldw	r3,0(r2)
  811368:	e0bffc17 	ldw	r2,-16(fp)
  81136c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811370:	e0bffb17 	ldw	r2,-20(fp)
  811374:	00c02074 	movhi	r3,129
  811378:	18cc8704 	addi	r3,r3,12828
  81137c:	10800324 	muli	r2,r2,12
  811380:	10c5883a 	add	r2,r2,r3
  811384:	10800104 	addi	r2,r2,4
  811388:	10c00017 	ldw	r3,0(r2)
  81138c:	e0bffc17 	ldw	r2,-16(fp)
  811390:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811394:	e0bffb17 	ldw	r2,-20(fp)
  811398:	00c02074 	movhi	r3,129
  81139c:	18cc8704 	addi	r3,r3,12828
  8113a0:	10800324 	muli	r2,r2,12
  8113a4:	10c5883a 	add	r2,r2,r3
  8113a8:	10800204 	addi	r2,r2,8
  8113ac:	10c00017 	ldw	r3,0(r2)
  8113b0:	e0bffc17 	ldw	r2,-16(fp)
  8113b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8113b8:	e13ffb17 	ldw	r4,-20(fp)
  8113bc:	080f1240 	call	80f124 <alt_release_fd>
  }
} 
  8113c0:	e037883a 	mov	sp,fp
  8113c4:	dfc00117 	ldw	ra,4(sp)
  8113c8:	df000017 	ldw	fp,0(sp)
  8113cc:	dec00204 	addi	sp,sp,8
  8113d0:	f800283a 	ret

008113d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8113d4:	defffb04 	addi	sp,sp,-20
  8113d8:	dfc00415 	stw	ra,16(sp)
  8113dc:	df000315 	stw	fp,12(sp)
  8113e0:	df000304 	addi	fp,sp,12
  8113e4:	e13ffd15 	stw	r4,-12(fp)
  8113e8:	e17ffe15 	stw	r5,-8(fp)
  8113ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8113f0:	01002074 	movhi	r4,129
  8113f4:	210c8a04 	addi	r4,r4,12840
  8113f8:	e17ffd17 	ldw	r5,-12(fp)
  8113fc:	01800044 	movi	r6,1
  811400:	01c07fc4 	movi	r7,511
  811404:	08113100 	call	811310 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811408:	01002074 	movhi	r4,129
  81140c:	210c8704 	addi	r4,r4,12828
  811410:	e17ffe17 	ldw	r5,-8(fp)
  811414:	000d883a 	mov	r6,zero
  811418:	01c07fc4 	movi	r7,511
  81141c:	08113100 	call	811310 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811420:	01002074 	movhi	r4,129
  811424:	210c8d04 	addi	r4,r4,12852
  811428:	e17fff17 	ldw	r5,-4(fp)
  81142c:	01800044 	movi	r6,1
  811430:	01c07fc4 	movi	r7,511
  811434:	08113100 	call	811310 <alt_open_fd>
}  
  811438:	e037883a 	mov	sp,fp
  81143c:	dfc00117 	ldw	ra,4(sp)
  811440:	df000017 	ldw	fp,0(sp)
  811444:	dec00204 	addi	sp,sp,8
  811448:	f800283a 	ret

0081144c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81144c:	defffc04 	addi	sp,sp,-16
  811450:	df000315 	stw	fp,12(sp)
  811454:	df000304 	addi	fp,sp,12
  811458:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81145c:	e0bffe17 	ldw	r2,-8(fp)
  811460:	10800217 	ldw	r2,8(r2)
  811464:	10d00034 	orhi	r3,r2,16384
  811468:	e0bffe17 	ldw	r2,-8(fp)
  81146c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811470:	e03ffd15 	stw	zero,-12(fp)
  811474:	00002006 	br	8114f8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811478:	e0bffd17 	ldw	r2,-12(fp)
  81147c:	00c02074 	movhi	r3,129
  811480:	18cc8704 	addi	r3,r3,12828
  811484:	10800324 	muli	r2,r2,12
  811488:	10c5883a 	add	r2,r2,r3
  81148c:	10c00017 	ldw	r3,0(r2)
  811490:	e0bffe17 	ldw	r2,-8(fp)
  811494:	10800017 	ldw	r2,0(r2)
  811498:	1880141e 	bne	r3,r2,8114ec <alt_file_locked+0xa0>
  81149c:	e0bffd17 	ldw	r2,-12(fp)
  8114a0:	00c02074 	movhi	r3,129
  8114a4:	18cc8704 	addi	r3,r3,12828
  8114a8:	10800324 	muli	r2,r2,12
  8114ac:	10c5883a 	add	r2,r2,r3
  8114b0:	10800204 	addi	r2,r2,8
  8114b4:	10800017 	ldw	r2,0(r2)
  8114b8:	1004403a 	cmpge	r2,r2,zero
  8114bc:	10000b1e 	bne	r2,zero,8114ec <alt_file_locked+0xa0>
  8114c0:	e0bffd17 	ldw	r2,-12(fp)
  8114c4:	10800324 	muli	r2,r2,12
  8114c8:	1007883a 	mov	r3,r2
  8114cc:	00802074 	movhi	r2,129
  8114d0:	108c8704 	addi	r2,r2,12828
  8114d4:	1887883a 	add	r3,r3,r2
  8114d8:	e0bffe17 	ldw	r2,-8(fp)
  8114dc:	18800326 	beq	r3,r2,8114ec <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8114e0:	00bffcc4 	movi	r2,-13
  8114e4:	e0bfff15 	stw	r2,-4(fp)
  8114e8:	00000a06 	br	811514 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8114ec:	e0bffd17 	ldw	r2,-12(fp)
  8114f0:	10800044 	addi	r2,r2,1
  8114f4:	e0bffd15 	stw	r2,-12(fp)
  8114f8:	00802074 	movhi	r2,129
  8114fc:	1091ac04 	addi	r2,r2,18096
  811500:	10800017 	ldw	r2,0(r2)
  811504:	1007883a 	mov	r3,r2
  811508:	e0bffd17 	ldw	r2,-12(fp)
  81150c:	18bfda2e 	bgeu	r3,r2,811478 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811510:	e03fff15 	stw	zero,-4(fp)
  811514:	e0bfff17 	ldw	r2,-4(fp)
}
  811518:	e037883a 	mov	sp,fp
  81151c:	df000017 	ldw	fp,0(sp)
  811520:	dec00104 	addi	sp,sp,4
  811524:	f800283a 	ret

00811528 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811528:	defff404 	addi	sp,sp,-48
  81152c:	dfc00b15 	stw	ra,44(sp)
  811530:	df000a15 	stw	fp,40(sp)
  811534:	df000a04 	addi	fp,sp,40
  811538:	e13ffb15 	stw	r4,-20(fp)
  81153c:	e17ffc15 	stw	r5,-16(fp)
  811540:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811544:	00bfffc4 	movi	r2,-1
  811548:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  81154c:	00bffb44 	movi	r2,-19
  811550:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  811554:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811558:	e13ffb17 	ldw	r4,-20(fp)
  81155c:	01402074 	movhi	r5,129
  811560:	2951aa04 	addi	r5,r5,18088
  811564:	08118d40 	call	8118d4 <alt_find_dev>
  811568:	e0bffa15 	stw	r2,-24(fp)
  81156c:	e0bffa17 	ldw	r2,-24(fp)
  811570:	1004c03a 	cmpne	r2,r2,zero
  811574:	1000051e 	bne	r2,zero,81158c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811578:	e13ffb17 	ldw	r4,-20(fp)
  81157c:	08119680 	call	811968 <alt_find_file>
  811580:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811584:	00800044 	movi	r2,1
  811588:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81158c:	e0bffa17 	ldw	r2,-24(fp)
  811590:	1005003a 	cmpeq	r2,r2,zero
  811594:	1000301e 	bne	r2,zero,811658 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811598:	e13ffa17 	ldw	r4,-24(fp)
  81159c:	0811a880 	call	811a88 <alt_get_fd>
  8115a0:	e0bff815 	stw	r2,-32(fp)
  8115a4:	e0bff817 	ldw	r2,-32(fp)
  8115a8:	1004403a 	cmpge	r2,r2,zero
  8115ac:	1000031e 	bne	r2,zero,8115bc <open+0x94>
    {
      status = index;
  8115b0:	e0bff817 	ldw	r2,-32(fp)
  8115b4:	e0bff715 	stw	r2,-36(fp)
  8115b8:	00002906 	br	811660 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  8115bc:	e0bff817 	ldw	r2,-32(fp)
  8115c0:	10800324 	muli	r2,r2,12
  8115c4:	1007883a 	mov	r3,r2
  8115c8:	00802074 	movhi	r2,129
  8115cc:	108c8704 	addi	r2,r2,12828
  8115d0:	1885883a 	add	r2,r3,r2
  8115d4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8115d8:	e0fffc17 	ldw	r3,-16(fp)
  8115dc:	00900034 	movhi	r2,16384
  8115e0:	10bfffc4 	addi	r2,r2,-1
  8115e4:	1886703a 	and	r3,r3,r2
  8115e8:	e0bff917 	ldw	r2,-28(fp)
  8115ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8115f0:	e0bff617 	ldw	r2,-40(fp)
  8115f4:	1004c03a 	cmpne	r2,r2,zero
  8115f8:	1000061e 	bne	r2,zero,811614 <open+0xec>
  8115fc:	e13ff917 	ldw	r4,-28(fp)
  811600:	081144c0 	call	81144c <alt_file_locked>
  811604:	e0bff715 	stw	r2,-36(fp)
  811608:	e0bff717 	ldw	r2,-36(fp)
  81160c:	1004803a 	cmplt	r2,r2,zero
  811610:	1000131e 	bne	r2,zero,811660 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811614:	e0bffa17 	ldw	r2,-24(fp)
  811618:	10800317 	ldw	r2,12(r2)
  81161c:	1005003a 	cmpeq	r2,r2,zero
  811620:	1000091e 	bne	r2,zero,811648 <open+0x120>
  811624:	e0bffa17 	ldw	r2,-24(fp)
  811628:	10800317 	ldw	r2,12(r2)
  81162c:	e13ff917 	ldw	r4,-28(fp)
  811630:	e17ffb17 	ldw	r5,-20(fp)
  811634:	e1bffc17 	ldw	r6,-16(fp)
  811638:	e1fffd17 	ldw	r7,-12(fp)
  81163c:	103ee83a 	callr	r2
  811640:	e0bfff15 	stw	r2,-4(fp)
  811644:	00000106 	br	81164c <open+0x124>
  811648:	e03fff15 	stw	zero,-4(fp)
  81164c:	e0bfff17 	ldw	r2,-4(fp)
  811650:	e0bff715 	stw	r2,-36(fp)
  811654:	00000206 	br	811660 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811658:	00bffb44 	movi	r2,-19
  81165c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811660:	e0bff717 	ldw	r2,-36(fp)
  811664:	1004403a 	cmpge	r2,r2,zero
  811668:	1000091e 	bne	r2,zero,811690 <open+0x168>
  {
    alt_release_fd (index);  
  81166c:	e13ff817 	ldw	r4,-32(fp)
  811670:	080f1240 	call	80f124 <alt_release_fd>
    ALT_ERRNO = -status;
  811674:	08116b00 	call	8116b0 <alt_get_errno>
  811678:	e0fff717 	ldw	r3,-36(fp)
  81167c:	00c7c83a 	sub	r3,zero,r3
  811680:	10c00015 	stw	r3,0(r2)
    return -1;
  811684:	00bfffc4 	movi	r2,-1
  811688:	e0bffe15 	stw	r2,-8(fp)
  81168c:	00000206 	br	811698 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  811690:	e0bff817 	ldw	r2,-32(fp)
  811694:	e0bffe15 	stw	r2,-8(fp)
  811698:	e0bffe17 	ldw	r2,-8(fp)
}
  81169c:	e037883a 	mov	sp,fp
  8116a0:	dfc00117 	ldw	ra,4(sp)
  8116a4:	df000017 	ldw	fp,0(sp)
  8116a8:	dec00204 	addi	sp,sp,8
  8116ac:	f800283a 	ret

008116b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8116b0:	defffd04 	addi	sp,sp,-12
  8116b4:	dfc00215 	stw	ra,8(sp)
  8116b8:	df000115 	stw	fp,4(sp)
  8116bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8116c0:	00802074 	movhi	r2,129
  8116c4:	1091ad04 	addi	r2,r2,18100
  8116c8:	10800017 	ldw	r2,0(r2)
  8116cc:	1005003a 	cmpeq	r2,r2,zero
  8116d0:	1000061e 	bne	r2,zero,8116ec <alt_get_errno+0x3c>
  8116d4:	00802074 	movhi	r2,129
  8116d8:	1091ad04 	addi	r2,r2,18100
  8116dc:	10800017 	ldw	r2,0(r2)
  8116e0:	103ee83a 	callr	r2
  8116e4:	e0bfff15 	stw	r2,-4(fp)
  8116e8:	00000306 	br	8116f8 <alt_get_errno+0x48>
  8116ec:	00802074 	movhi	r2,129
  8116f0:	1098f404 	addi	r2,r2,25552
  8116f4:	e0bfff15 	stw	r2,-4(fp)
  8116f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8116fc:	e037883a 	mov	sp,fp
  811700:	dfc00117 	ldw	ra,4(sp)
  811704:	df000017 	ldw	fp,0(sp)
  811708:	dec00204 	addi	sp,sp,8
  81170c:	f800283a 	ret

00811710 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811710:	defffa04 	addi	sp,sp,-24
  811714:	df000515 	stw	fp,20(sp)
  811718:	df000504 	addi	fp,sp,20
  81171c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811720:	0005303a 	rdctl	r2,status
  811724:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811728:	e0fffd17 	ldw	r3,-12(fp)
  81172c:	00bfff84 	movi	r2,-2
  811730:	1884703a 	and	r2,r3,r2
  811734:	1001703a 	wrctl	status,r2
  
  return context;
  811738:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81173c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  811740:	e0bfff17 	ldw	r2,-4(fp)
  811744:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811748:	e0bffc17 	ldw	r2,-16(fp)
  81174c:	10c00017 	ldw	r3,0(r2)
  811750:	e0bffc17 	ldw	r2,-16(fp)
  811754:	10800117 	ldw	r2,4(r2)
  811758:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81175c:	e0bffc17 	ldw	r2,-16(fp)
  811760:	10c00117 	ldw	r3,4(r2)
  811764:	e0bffc17 	ldw	r2,-16(fp)
  811768:	10800017 	ldw	r2,0(r2)
  81176c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811770:	e0fffc17 	ldw	r3,-16(fp)
  811774:	e0bffc17 	ldw	r2,-16(fp)
  811778:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81177c:	e0fffc17 	ldw	r3,-16(fp)
  811780:	e0bffc17 	ldw	r2,-16(fp)
  811784:	18800015 	stw	r2,0(r3)
  811788:	e0bffe17 	ldw	r2,-8(fp)
  81178c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811790:	e0bffb17 	ldw	r2,-20(fp)
  811794:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811798:	e037883a 	mov	sp,fp
  81179c:	df000017 	ldw	fp,0(sp)
  8117a0:	dec00104 	addi	sp,sp,4
  8117a4:	f800283a 	ret

008117a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8117a8:	defffb04 	addi	sp,sp,-20
  8117ac:	dfc00415 	stw	ra,16(sp)
  8117b0:	df000315 	stw	fp,12(sp)
  8117b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8117b8:	d0a08017 	ldw	r2,-32256(gp)
  8117bc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8117c0:	d0a7cd17 	ldw	r2,-24780(gp)
  8117c4:	10800044 	addi	r2,r2,1
  8117c8:	d0a7cd15 	stw	r2,-24780(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8117cc:	00003106 	br	811894 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8117d0:	e0bffe17 	ldw	r2,-8(fp)
  8117d4:	10800017 	ldw	r2,0(r2)
  8117d8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8117dc:	e0bffe17 	ldw	r2,-8(fp)
  8117e0:	10800403 	ldbu	r2,16(r2)
  8117e4:	10803fcc 	andi	r2,r2,255
  8117e8:	1005003a 	cmpeq	r2,r2,zero
  8117ec:	1000051e 	bne	r2,zero,811804 <alt_tick+0x5c>
  8117f0:	d0a7cd17 	ldw	r2,-24780(gp)
  8117f4:	1004c03a 	cmpne	r2,r2,zero
  8117f8:	1000021e 	bne	r2,zero,811804 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8117fc:	e0bffe17 	ldw	r2,-8(fp)
  811800:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811804:	e0bffe17 	ldw	r2,-8(fp)
  811808:	10c00217 	ldw	r3,8(r2)
  81180c:	d0a7cd17 	ldw	r2,-24780(gp)
  811810:	10c01e36 	bltu	r2,r3,81188c <alt_tick+0xe4>
  811814:	e0bffe17 	ldw	r2,-8(fp)
  811818:	10800403 	ldbu	r2,16(r2)
  81181c:	10803fcc 	andi	r2,r2,255
  811820:	1004c03a 	cmpne	r2,r2,zero
  811824:	1000191e 	bne	r2,zero,81188c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  811828:	e0bffe17 	ldw	r2,-8(fp)
  81182c:	10c00317 	ldw	r3,12(r2)
  811830:	e0bffe17 	ldw	r2,-8(fp)
  811834:	11000517 	ldw	r4,20(r2)
  811838:	183ee83a 	callr	r3
  81183c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811840:	e0bffd17 	ldw	r2,-12(fp)
  811844:	1004c03a 	cmpne	r2,r2,zero
  811848:	1000031e 	bne	r2,zero,811858 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81184c:	e13ffe17 	ldw	r4,-8(fp)
  811850:	08117100 	call	811710 <alt_alarm_stop>
  811854:	00000d06 	br	81188c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  811858:	e0bffe17 	ldw	r2,-8(fp)
  81185c:	10c00217 	ldw	r3,8(r2)
  811860:	e0bffd17 	ldw	r2,-12(fp)
  811864:	1887883a 	add	r3,r3,r2
  811868:	e0bffe17 	ldw	r2,-8(fp)
  81186c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811870:	e0bffe17 	ldw	r2,-8(fp)
  811874:	10c00217 	ldw	r3,8(r2)
  811878:	d0a7cd17 	ldw	r2,-24780(gp)
  81187c:	1880032e 	bgeu	r3,r2,81188c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  811880:	e0fffe17 	ldw	r3,-8(fp)
  811884:	00800044 	movi	r2,1
  811888:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81188c:	e0bfff17 	ldw	r2,-4(fp)
  811890:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811894:	d0e08004 	addi	r3,gp,-32256
  811898:	e0bffe17 	ldw	r2,-8(fp)
  81189c:	10ffcc1e 	bne	r2,r3,8117d0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8118a0:	e037883a 	mov	sp,fp
  8118a4:	dfc00117 	ldw	ra,4(sp)
  8118a8:	df000017 	ldw	fp,0(sp)
  8118ac:	dec00204 	addi	sp,sp,8
  8118b0:	f800283a 	ret

008118b4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8118b4:	deffff04 	addi	sp,sp,-4
  8118b8:	df000015 	stw	fp,0(sp)
  8118bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8118c0:	000170fa 	wrctl	ienable,zero
}
  8118c4:	e037883a 	mov	sp,fp
  8118c8:	df000017 	ldw	fp,0(sp)
  8118cc:	dec00104 	addi	sp,sp,4
  8118d0:	f800283a 	ret

008118d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8118d4:	defff904 	addi	sp,sp,-28
  8118d8:	dfc00615 	stw	ra,24(sp)
  8118dc:	df000515 	stw	fp,20(sp)
  8118e0:	df000504 	addi	fp,sp,20
  8118e4:	e13ffd15 	stw	r4,-12(fp)
  8118e8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8118ec:	e0bffe17 	ldw	r2,-8(fp)
  8118f0:	10800017 	ldw	r2,0(r2)
  8118f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8118f8:	e13ffd17 	ldw	r4,-12(fp)
  8118fc:	080563c0 	call	80563c <strlen>
  811900:	10800044 	addi	r2,r2,1
  811904:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811908:	00000d06 	br	811940 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81190c:	e0bffc17 	ldw	r2,-16(fp)
  811910:	11000217 	ldw	r4,8(r2)
  811914:	e1bffb17 	ldw	r6,-20(fp)
  811918:	e17ffd17 	ldw	r5,-12(fp)
  81191c:	0811c1c0 	call	811c1c <memcmp>
  811920:	1004c03a 	cmpne	r2,r2,zero
  811924:	1000031e 	bne	r2,zero,811934 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811928:	e0bffc17 	ldw	r2,-16(fp)
  81192c:	e0bfff15 	stw	r2,-4(fp)
  811930:	00000706 	br	811950 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811934:	e0bffc17 	ldw	r2,-16(fp)
  811938:	10800017 	ldw	r2,0(r2)
  81193c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811940:	e0fffe17 	ldw	r3,-8(fp)
  811944:	e0bffc17 	ldw	r2,-16(fp)
  811948:	10fff01e 	bne	r2,r3,81190c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81194c:	e03fff15 	stw	zero,-4(fp)
  811950:	e0bfff17 	ldw	r2,-4(fp)
}
  811954:	e037883a 	mov	sp,fp
  811958:	dfc00117 	ldw	ra,4(sp)
  81195c:	df000017 	ldw	fp,0(sp)
  811960:	dec00204 	addi	sp,sp,8
  811964:	f800283a 	ret

00811968 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811968:	defffa04 	addi	sp,sp,-24
  81196c:	dfc00515 	stw	ra,20(sp)
  811970:	df000415 	stw	fp,16(sp)
  811974:	df000404 	addi	fp,sp,16
  811978:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81197c:	00802074 	movhi	r2,129
  811980:	1091a804 	addi	r2,r2,18080
  811984:	10800017 	ldw	r2,0(r2)
  811988:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81198c:	00003306 	br	811a5c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  811990:	e0bffd17 	ldw	r2,-12(fp)
  811994:	11000217 	ldw	r4,8(r2)
  811998:	080563c0 	call	80563c <strlen>
  81199c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8119a0:	e0bffd17 	ldw	r2,-12(fp)
  8119a4:	10c00217 	ldw	r3,8(r2)
  8119a8:	e0bffc17 	ldw	r2,-16(fp)
  8119ac:	1885883a 	add	r2,r3,r2
  8119b0:	10bfffc4 	addi	r2,r2,-1
  8119b4:	10800003 	ldbu	r2,0(r2)
  8119b8:	10803fcc 	andi	r2,r2,255
  8119bc:	1080201c 	xori	r2,r2,128
  8119c0:	10bfe004 	addi	r2,r2,-128
  8119c4:	10800bd8 	cmpnei	r2,r2,47
  8119c8:	1000031e 	bne	r2,zero,8119d8 <alt_find_file+0x70>
    {
      len -= 1;
  8119cc:	e0bffc17 	ldw	r2,-16(fp)
  8119d0:	10bfffc4 	addi	r2,r2,-1
  8119d4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8119d8:	e0bffc17 	ldw	r2,-16(fp)
  8119dc:	1007883a 	mov	r3,r2
  8119e0:	e0bffe17 	ldw	r2,-8(fp)
  8119e4:	1885883a 	add	r2,r3,r2
  8119e8:	10800003 	ldbu	r2,0(r2)
  8119ec:	10803fcc 	andi	r2,r2,255
  8119f0:	1080201c 	xori	r2,r2,128
  8119f4:	10bfe004 	addi	r2,r2,-128
  8119f8:	10800be0 	cmpeqi	r2,r2,47
  8119fc:	10000a1e 	bne	r2,zero,811a28 <alt_find_file+0xc0>
  811a00:	e0bffc17 	ldw	r2,-16(fp)
  811a04:	1007883a 	mov	r3,r2
  811a08:	e0bffe17 	ldw	r2,-8(fp)
  811a0c:	1885883a 	add	r2,r3,r2
  811a10:	10800003 	ldbu	r2,0(r2)
  811a14:	10803fcc 	andi	r2,r2,255
  811a18:	1080201c 	xori	r2,r2,128
  811a1c:	10bfe004 	addi	r2,r2,-128
  811a20:	1004c03a 	cmpne	r2,r2,zero
  811a24:	10000a1e 	bne	r2,zero,811a50 <alt_find_file+0xe8>
  811a28:	e0bffd17 	ldw	r2,-12(fp)
  811a2c:	11000217 	ldw	r4,8(r2)
  811a30:	e1bffc17 	ldw	r6,-16(fp)
  811a34:	e17ffe17 	ldw	r5,-8(fp)
  811a38:	0811c1c0 	call	811c1c <memcmp>
  811a3c:	1004c03a 	cmpne	r2,r2,zero
  811a40:	1000031e 	bne	r2,zero,811a50 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811a44:	e0bffd17 	ldw	r2,-12(fp)
  811a48:	e0bfff15 	stw	r2,-4(fp)
  811a4c:	00000806 	br	811a70 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811a50:	e0bffd17 	ldw	r2,-12(fp)
  811a54:	10800017 	ldw	r2,0(r2)
  811a58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811a5c:	00c02074 	movhi	r3,129
  811a60:	18d1a804 	addi	r3,r3,18080
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	10ffc91e 	bne	r2,r3,811990 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811a6c:	e03fff15 	stw	zero,-4(fp)
  811a70:	e0bfff17 	ldw	r2,-4(fp)
}
  811a74:	e037883a 	mov	sp,fp
  811a78:	dfc00117 	ldw	ra,4(sp)
  811a7c:	df000017 	ldw	fp,0(sp)
  811a80:	dec00204 	addi	sp,sp,8
  811a84:	f800283a 	ret

00811a88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811a88:	defffc04 	addi	sp,sp,-16
  811a8c:	df000315 	stw	fp,12(sp)
  811a90:	df000304 	addi	fp,sp,12
  811a94:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811a98:	00bffa04 	movi	r2,-24
  811a9c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811aa0:	e03ffe15 	stw	zero,-8(fp)
  811aa4:	00001e06 	br	811b20 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  811aa8:	e0bffe17 	ldw	r2,-8(fp)
  811aac:	00c02074 	movhi	r3,129
  811ab0:	18cc8704 	addi	r3,r3,12828
  811ab4:	10800324 	muli	r2,r2,12
  811ab8:	10c5883a 	add	r2,r2,r3
  811abc:	10800017 	ldw	r2,0(r2)
  811ac0:	1004c03a 	cmpne	r2,r2,zero
  811ac4:	1000131e 	bne	r2,zero,811b14 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  811ac8:	e0bffe17 	ldw	r2,-8(fp)
  811acc:	00c02074 	movhi	r3,129
  811ad0:	18cc8704 	addi	r3,r3,12828
  811ad4:	10800324 	muli	r2,r2,12
  811ad8:	10c7883a 	add	r3,r2,r3
  811adc:	e0bfff17 	ldw	r2,-4(fp)
  811ae0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  811ae4:	00802074 	movhi	r2,129
  811ae8:	1091ac04 	addi	r2,r2,18096
  811aec:	10c00017 	ldw	r3,0(r2)
  811af0:	e0bffe17 	ldw	r2,-8(fp)
  811af4:	1880040e 	bge	r3,r2,811b08 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  811af8:	00c02074 	movhi	r3,129
  811afc:	18d1ac04 	addi	r3,r3,18096
  811b00:	e0bffe17 	ldw	r2,-8(fp)
  811b04:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  811b08:	e0bffe17 	ldw	r2,-8(fp)
  811b0c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  811b10:	00000606 	br	811b2c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811b14:	e0bffe17 	ldw	r2,-8(fp)
  811b18:	10800044 	addi	r2,r2,1
  811b1c:	e0bffe15 	stw	r2,-8(fp)
  811b20:	e0bffe17 	ldw	r2,-8(fp)
  811b24:	10800810 	cmplti	r2,r2,32
  811b28:	103fdf1e 	bne	r2,zero,811aa8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811b2c:	e0bffd17 	ldw	r2,-12(fp)
}
  811b30:	e037883a 	mov	sp,fp
  811b34:	df000017 	ldw	fp,0(sp)
  811b38:	dec00104 	addi	sp,sp,4
  811b3c:	f800283a 	ret

00811b40 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811b40:	defffb04 	addi	sp,sp,-20
  811b44:	df000415 	stw	fp,16(sp)
  811b48:	df000404 	addi	fp,sp,16
  811b4c:	e13ffe15 	stw	r4,-8(fp)
  811b50:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811b54:	e0bfff17 	ldw	r2,-4(fp)
  811b58:	10840070 	cmpltui	r2,r2,4097
  811b5c:	1000021e 	bne	r2,zero,811b68 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811b60:	00840004 	movi	r2,4096
  811b64:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811b68:	e0fffe17 	ldw	r3,-8(fp)
  811b6c:	e0bfff17 	ldw	r2,-4(fp)
  811b70:	1885883a 	add	r2,r3,r2
  811b74:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811b78:	e0bffe17 	ldw	r2,-8(fp)
  811b7c:	e0bffd15 	stw	r2,-12(fp)
  811b80:	00000506 	br	811b98 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811b84:	e0bffd17 	ldw	r2,-12(fp)
  811b88:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811b8c:	e0bffd17 	ldw	r2,-12(fp)
  811b90:	10800804 	addi	r2,r2,32
  811b94:	e0bffd15 	stw	r2,-12(fp)
  811b98:	e0fffd17 	ldw	r3,-12(fp)
  811b9c:	e0bffc17 	ldw	r2,-16(fp)
  811ba0:	18bff836 	bltu	r3,r2,811b84 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	108007cc 	andi	r2,r2,31
  811bac:	1005003a 	cmpeq	r2,r2,zero
  811bb0:	1000021e 	bne	r2,zero,811bbc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811bb4:	e0bffd17 	ldw	r2,-12(fp)
  811bb8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811bbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811bc0:	e037883a 	mov	sp,fp
  811bc4:	df000017 	ldw	fp,0(sp)
  811bc8:	dec00104 	addi	sp,sp,4
  811bcc:	f800283a 	ret

00811bd0 <atexit>:
  811bd0:	200b883a 	mov	r5,r4
  811bd4:	000d883a 	mov	r6,zero
  811bd8:	0009883a 	mov	r4,zero
  811bdc:	000f883a 	mov	r7,zero
  811be0:	0811c901 	jmpi	811c90 <__register_exitproc>

00811be4 <exit>:
  811be4:	defffe04 	addi	sp,sp,-8
  811be8:	000b883a 	mov	r5,zero
  811bec:	dc000015 	stw	r16,0(sp)
  811bf0:	dfc00115 	stw	ra,4(sp)
  811bf4:	2021883a 	mov	r16,r4
  811bf8:	0811dc80 	call	811dc8 <__call_exitprocs>
  811bfc:	00802074 	movhi	r2,129
  811c00:	1091a504 	addi	r2,r2,18068
  811c04:	11000017 	ldw	r4,0(r2)
  811c08:	20800f17 	ldw	r2,60(r4)
  811c0c:	10000126 	beq	r2,zero,811c14 <exit+0x30>
  811c10:	103ee83a 	callr	r2
  811c14:	8009883a 	mov	r4,r16
  811c18:	080e6c80 	call	80e6c8 <_exit>

00811c1c <memcmp>:
  811c1c:	00c000c4 	movi	r3,3
  811c20:	1980032e 	bgeu	r3,r6,811c30 <memcmp+0x14>
  811c24:	2144b03a 	or	r2,r4,r5
  811c28:	10c4703a 	and	r2,r2,r3
  811c2c:	10000f26 	beq	r2,zero,811c6c <memcmp+0x50>
  811c30:	31ffffc4 	addi	r7,r6,-1
  811c34:	3000061e 	bne	r6,zero,811c50 <memcmp+0x34>
  811c38:	00000a06 	br	811c64 <memcmp+0x48>
  811c3c:	39ffffc4 	addi	r7,r7,-1
  811c40:	00bfffc4 	movi	r2,-1
  811c44:	21000044 	addi	r4,r4,1
  811c48:	29400044 	addi	r5,r5,1
  811c4c:	38800526 	beq	r7,r2,811c64 <memcmp+0x48>
  811c50:	20c00003 	ldbu	r3,0(r4)
  811c54:	28800003 	ldbu	r2,0(r5)
  811c58:	18bff826 	beq	r3,r2,811c3c <memcmp+0x20>
  811c5c:	1885c83a 	sub	r2,r3,r2
  811c60:	f800283a 	ret
  811c64:	0005883a 	mov	r2,zero
  811c68:	f800283a 	ret
  811c6c:	180f883a 	mov	r7,r3
  811c70:	20c00017 	ldw	r3,0(r4)
  811c74:	28800017 	ldw	r2,0(r5)
  811c78:	18bfed1e 	bne	r3,r2,811c30 <memcmp+0x14>
  811c7c:	31bfff04 	addi	r6,r6,-4
  811c80:	21000104 	addi	r4,r4,4
  811c84:	29400104 	addi	r5,r5,4
  811c88:	39bff936 	bltu	r7,r6,811c70 <memcmp+0x54>
  811c8c:	003fe806 	br	811c30 <memcmp+0x14>

00811c90 <__register_exitproc>:
  811c90:	defffa04 	addi	sp,sp,-24
  811c94:	00802074 	movhi	r2,129
  811c98:	1091a504 	addi	r2,r2,18068
  811c9c:	dc000015 	stw	r16,0(sp)
  811ca0:	14000017 	ldw	r16,0(r2)
  811ca4:	dd000415 	stw	r20,16(sp)
  811ca8:	2829883a 	mov	r20,r5
  811cac:	81405217 	ldw	r5,328(r16)
  811cb0:	dcc00315 	stw	r19,12(sp)
  811cb4:	dc800215 	stw	r18,8(sp)
  811cb8:	dc400115 	stw	r17,4(sp)
  811cbc:	dfc00515 	stw	ra,20(sp)
  811cc0:	2023883a 	mov	r17,r4
  811cc4:	3027883a 	mov	r19,r6
  811cc8:	3825883a 	mov	r18,r7
  811ccc:	28002526 	beq	r5,zero,811d64 <__register_exitproc+0xd4>
  811cd0:	29000117 	ldw	r4,4(r5)
  811cd4:	008007c4 	movi	r2,31
  811cd8:	11002716 	blt	r2,r4,811d78 <__register_exitproc+0xe8>
  811cdc:	8800101e 	bne	r17,zero,811d20 <__register_exitproc+0x90>
  811ce0:	2105883a 	add	r2,r4,r4
  811ce4:	1085883a 	add	r2,r2,r2
  811ce8:	20c00044 	addi	r3,r4,1
  811cec:	1145883a 	add	r2,r2,r5
  811cf0:	0009883a 	mov	r4,zero
  811cf4:	15000215 	stw	r20,8(r2)
  811cf8:	28c00115 	stw	r3,4(r5)
  811cfc:	2005883a 	mov	r2,r4
  811d00:	dfc00517 	ldw	ra,20(sp)
  811d04:	dd000417 	ldw	r20,16(sp)
  811d08:	dcc00317 	ldw	r19,12(sp)
  811d0c:	dc800217 	ldw	r18,8(sp)
  811d10:	dc400117 	ldw	r17,4(sp)
  811d14:	dc000017 	ldw	r16,0(sp)
  811d18:	dec00604 	addi	sp,sp,24
  811d1c:	f800283a 	ret
  811d20:	29802204 	addi	r6,r5,136
  811d24:	00800044 	movi	r2,1
  811d28:	110e983a 	sll	r7,r2,r4
  811d2c:	30c04017 	ldw	r3,256(r6)
  811d30:	2105883a 	add	r2,r4,r4
  811d34:	1085883a 	add	r2,r2,r2
  811d38:	1185883a 	add	r2,r2,r6
  811d3c:	19c6b03a 	or	r3,r3,r7
  811d40:	14802015 	stw	r18,128(r2)
  811d44:	14c00015 	stw	r19,0(r2)
  811d48:	00800084 	movi	r2,2
  811d4c:	30c04015 	stw	r3,256(r6)
  811d50:	88bfe31e 	bne	r17,r2,811ce0 <__register_exitproc+0x50>
  811d54:	30804117 	ldw	r2,260(r6)
  811d58:	11c4b03a 	or	r2,r2,r7
  811d5c:	30804115 	stw	r2,260(r6)
  811d60:	003fdf06 	br	811ce0 <__register_exitproc+0x50>
  811d64:	00802074 	movhi	r2,129
  811d68:	109b4804 	addi	r2,r2,27936
  811d6c:	100b883a 	mov	r5,r2
  811d70:	80805215 	stw	r2,328(r16)
  811d74:	003fd606 	br	811cd0 <__register_exitproc+0x40>
  811d78:	00802034 	movhi	r2,128
  811d7c:	10928604 	addi	r2,r2,18968
  811d80:	1000021e 	bne	r2,zero,811d8c <__register_exitproc+0xfc>
  811d84:	013fffc4 	movi	r4,-1
  811d88:	003fdc06 	br	811cfc <__register_exitproc+0x6c>
  811d8c:	01006404 	movi	r4,400
  811d90:	103ee83a 	callr	r2
  811d94:	1007883a 	mov	r3,r2
  811d98:	103ffa26 	beq	r2,zero,811d84 <__register_exitproc+0xf4>
  811d9c:	80805217 	ldw	r2,328(r16)
  811da0:	180b883a 	mov	r5,r3
  811da4:	18000115 	stw	zero,4(r3)
  811da8:	18800015 	stw	r2,0(r3)
  811dac:	80c05215 	stw	r3,328(r16)
  811db0:	18006215 	stw	zero,392(r3)
  811db4:	18006315 	stw	zero,396(r3)
  811db8:	0009883a 	mov	r4,zero
  811dbc:	883fc826 	beq	r17,zero,811ce0 <__register_exitproc+0x50>
  811dc0:	003fd706 	br	811d20 <__register_exitproc+0x90>

00811dc4 <register_fini>:
  811dc4:	f800283a 	ret

00811dc8 <__call_exitprocs>:
  811dc8:	00802074 	movhi	r2,129
  811dcc:	1091a504 	addi	r2,r2,18068
  811dd0:	10800017 	ldw	r2,0(r2)
  811dd4:	defff304 	addi	sp,sp,-52
  811dd8:	df000b15 	stw	fp,44(sp)
  811ddc:	d8800115 	stw	r2,4(sp)
  811de0:	00802034 	movhi	r2,128
  811de4:	10928104 	addi	r2,r2,18948
  811de8:	1005003a 	cmpeq	r2,r2,zero
  811dec:	d8800215 	stw	r2,8(sp)
  811df0:	d8800117 	ldw	r2,4(sp)
  811df4:	dd400815 	stw	r21,32(sp)
  811df8:	dd000715 	stw	r20,28(sp)
  811dfc:	10805204 	addi	r2,r2,328
  811e00:	dfc00c15 	stw	ra,48(sp)
  811e04:	ddc00a15 	stw	r23,40(sp)
  811e08:	dd800915 	stw	r22,36(sp)
  811e0c:	dcc00615 	stw	r19,24(sp)
  811e10:	dc800515 	stw	r18,20(sp)
  811e14:	dc400415 	stw	r17,16(sp)
  811e18:	dc000315 	stw	r16,12(sp)
  811e1c:	282b883a 	mov	r21,r5
  811e20:	2039883a 	mov	fp,r4
  811e24:	d8800015 	stw	r2,0(sp)
  811e28:	2829003a 	cmpeq	r20,r5,zero
  811e2c:	d8800117 	ldw	r2,4(sp)
  811e30:	14405217 	ldw	r17,328(r2)
  811e34:	88001026 	beq	r17,zero,811e78 <__call_exitprocs+0xb0>
  811e38:	ddc00017 	ldw	r23,0(sp)
  811e3c:	88800117 	ldw	r2,4(r17)
  811e40:	8c802204 	addi	r18,r17,136
  811e44:	143fffc4 	addi	r16,r2,-1
  811e48:	80000916 	blt	r16,zero,811e70 <__call_exitprocs+0xa8>
  811e4c:	05bfffc4 	movi	r22,-1
  811e50:	a000151e 	bne	r20,zero,811ea8 <__call_exitprocs+0xe0>
  811e54:	8409883a 	add	r4,r16,r16
  811e58:	2105883a 	add	r2,r4,r4
  811e5c:	1485883a 	add	r2,r2,r18
  811e60:	10c02017 	ldw	r3,128(r2)
  811e64:	a8c01126 	beq	r21,r3,811eac <__call_exitprocs+0xe4>
  811e68:	843fffc4 	addi	r16,r16,-1
  811e6c:	85bff81e 	bne	r16,r22,811e50 <__call_exitprocs+0x88>
  811e70:	d8800217 	ldw	r2,8(sp)
  811e74:	10003126 	beq	r2,zero,811f3c <__call_exitprocs+0x174>
  811e78:	dfc00c17 	ldw	ra,48(sp)
  811e7c:	df000b17 	ldw	fp,44(sp)
  811e80:	ddc00a17 	ldw	r23,40(sp)
  811e84:	dd800917 	ldw	r22,36(sp)
  811e88:	dd400817 	ldw	r21,32(sp)
  811e8c:	dd000717 	ldw	r20,28(sp)
  811e90:	dcc00617 	ldw	r19,24(sp)
  811e94:	dc800517 	ldw	r18,20(sp)
  811e98:	dc400417 	ldw	r17,16(sp)
  811e9c:	dc000317 	ldw	r16,12(sp)
  811ea0:	dec00d04 	addi	sp,sp,52
  811ea4:	f800283a 	ret
  811ea8:	8409883a 	add	r4,r16,r16
  811eac:	88c00117 	ldw	r3,4(r17)
  811eb0:	2105883a 	add	r2,r4,r4
  811eb4:	1445883a 	add	r2,r2,r17
  811eb8:	18ffffc4 	addi	r3,r3,-1
  811ebc:	11800217 	ldw	r6,8(r2)
  811ec0:	1c001526 	beq	r3,r16,811f18 <__call_exitprocs+0x150>
  811ec4:	10000215 	stw	zero,8(r2)
  811ec8:	303fe726 	beq	r6,zero,811e68 <__call_exitprocs+0xa0>
  811ecc:	00c00044 	movi	r3,1
  811ed0:	1c06983a 	sll	r3,r3,r16
  811ed4:	90804017 	ldw	r2,256(r18)
  811ed8:	8cc00117 	ldw	r19,4(r17)
  811edc:	1884703a 	and	r2,r3,r2
  811ee0:	10001426 	beq	r2,zero,811f34 <__call_exitprocs+0x16c>
  811ee4:	90804117 	ldw	r2,260(r18)
  811ee8:	1884703a 	and	r2,r3,r2
  811eec:	10000c1e 	bne	r2,zero,811f20 <__call_exitprocs+0x158>
  811ef0:	2105883a 	add	r2,r4,r4
  811ef4:	1485883a 	add	r2,r2,r18
  811ef8:	11400017 	ldw	r5,0(r2)
  811efc:	e009883a 	mov	r4,fp
  811f00:	303ee83a 	callr	r6
  811f04:	88800117 	ldw	r2,4(r17)
  811f08:	98bfc81e 	bne	r19,r2,811e2c <__call_exitprocs+0x64>
  811f0c:	b8800017 	ldw	r2,0(r23)
  811f10:	147fd526 	beq	r2,r17,811e68 <__call_exitprocs+0xa0>
  811f14:	003fc506 	br	811e2c <__call_exitprocs+0x64>
  811f18:	8c000115 	stw	r16,4(r17)
  811f1c:	003fea06 	br	811ec8 <__call_exitprocs+0x100>
  811f20:	2105883a 	add	r2,r4,r4
  811f24:	1485883a 	add	r2,r2,r18
  811f28:	11000017 	ldw	r4,0(r2)
  811f2c:	303ee83a 	callr	r6
  811f30:	003ff406 	br	811f04 <__call_exitprocs+0x13c>
  811f34:	303ee83a 	callr	r6
  811f38:	003ff206 	br	811f04 <__call_exitprocs+0x13c>
  811f3c:	88800117 	ldw	r2,4(r17)
  811f40:	1000081e 	bne	r2,zero,811f64 <__call_exitprocs+0x19c>
  811f44:	89000017 	ldw	r4,0(r17)
  811f48:	20000726 	beq	r4,zero,811f68 <__call_exitprocs+0x1a0>
  811f4c:	b9000015 	stw	r4,0(r23)
  811f50:	8809883a 	mov	r4,r17
  811f54:	0804a040 	call	804a04 <free>
  811f58:	bc400017 	ldw	r17,0(r23)
  811f5c:	883fb71e 	bne	r17,zero,811e3c <__call_exitprocs+0x74>
  811f60:	003fc506 	br	811e78 <__call_exitprocs+0xb0>
  811f64:	89000017 	ldw	r4,0(r17)
  811f68:	882f883a 	mov	r23,r17
  811f6c:	2023883a 	mov	r17,r4
  811f70:	883fb21e 	bne	r17,zero,811e3c <__call_exitprocs+0x74>
  811f74:	003fc006 	br	811e78 <__call_exitprocs+0xb0>
  811f78:	1601ffff 	0x1601ffff
  811f7c:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  811f80:	00030002 	0x30002
  811f84:	00050004 	movi	zero,5120
  811f88:	00070006 	br	813b8c <jtag_uart+0x7f0>
  811f8c:	00090008 	cmpgei	zero,zero,9216
  811f90:	ffff000a 	0xffff000a
  811f94:	00000201 	jmpi	20 <__alt_mem_sdram_controller-0x7fffe0>
  811f98:	0401ffff 	0x401ffff
  811f9c:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  811fa0:	0401ffff 	0x401ffff
  811fa4:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  811fa8:	01110bff 	0x1110bff
  811fac:	01000006 	br	811fb0 <__call_exitprocs+0x1e8>
  811fb0:	01000201 	jmpi	100020 <__alt_mem_sdram_controller-0x6fffe0>
  811fb4:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811fb8:	008124e0 	cmpeqi	r2,zero,1171
  811fbc:	010d0bff 	0x10d0bff
  811fc0:	7f010002 	0x7f010002
  811fc4:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811fc8:	008125b8 	rdprs	r2,zero,1174
  811fcc:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  811fd0:	01090bff 	0x1090bff
  811fd4:	7f010002 	0x7f010002
	...
  811fe0:	010d0bff 	0x10d0bff
  811fe4:	01000004 	movi	r4,0
  811fe8:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  811fec:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811ff0:	010d0bff 	0x10d0bff
  811ff4:	01000004 	movi	r4,0
  811ff8:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  811ffc:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  812000:	010d0bff 	0x10d0bff
  812004:	01000004 	movi	r4,0
  812008:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  81200c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  812010:	010d0bff 	0x10d0bff
  812014:	7f010002 	0x7f010002
  812018:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  81201c:	008125b8 	rdprs	r2,zero,1174
  812020:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  812024:	01090bff 	0x1090bff
  812028:	7f010002 	0x7f010002
	...
  812034:	00811dc4 	movi	r2,1143
