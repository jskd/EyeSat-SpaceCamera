
cmv_controller.elf:     file format elf32-littlenios2
cmv_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01004020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x000118f8 memsz 0x000118f8 flags r-x
    LOAD off    0x00013a8c vaddr 0x00811a8c paddr 0x00813764 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x0001643c vaddr 0x0081543c paddr 0x0081543c align 2**12
         filesz 0x00000000 memsz 0x00000b00 flags rw-
    LOAD off    0x00016000 vaddr 0x01004000 paddr 0x01004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01004000  01004000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01004020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011034  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008c4  008111c8  008111c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00811a8c  00813764  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b00  0081543c  0081543c  0001643c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00016020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001118  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002769  00000000  00000000  00017160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00032fe2  00000000  00000000  000198c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c71b  00000000  00000000  0004c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b90a  00000000  00000000  00058fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b14  00000000  00000000  000748d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000410e  00000000  00000000  000773e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000efd6  00000000  00000000  0007b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008a4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c08  00000000  00000000  0008a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000912bd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000912c0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000912c3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000912c4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000912c5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000912c9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000912cd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000912d1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000912da  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000912e3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  000912ec  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  000912f0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004c3f7  00000000  00000000  00091343  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01004000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
008111c8 l    d  .rodata	00000000 .rodata
00811a8c l    d  .rwdata	00000000 .rwdata
0081543c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FSM.cpp
00000000 l    df *ABS*	00000000 PIO.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 UART.cpp
008011a8 l     F .text	00000060 _Z23_UART_receive_interruptPv
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_throw.cc
00801e5c l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_opv.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00802150 l     F .text	00000030 _Z12read_uleb128PKhPj
00802180 l     F .text	00000054 _Z12read_sleb128PKhPi
008021d4 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00802270 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
00802444 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
008024d4 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
008025d4 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
00802658 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0081543c l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00815484 l     O .bss	00000800 emergency_buffer
00815448 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0081544c l     O .bss	00000004 fc_static
00803904 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00803a1c l     F .text	000000cc _Unwind_RaiseException_Phase2
00803ae8 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00811e94 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 vfprintf.c
00804f0c l     F .text	00000058 __sprint_r
008117ba l     O .rodata	00000010 blanks.3452
008117aa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00806f70 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080896c l     F .text	00000058 std
00808a78 l     F .text	00000008 __fp_lock
00808a80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00813738 l     O .rwdata	00000004 charset
008117ec l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00811934 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080bf84 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080d0b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d924 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d984 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080d9b0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080dae4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dde4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080df84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e064 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e1c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e3ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00813758 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080e688 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00812448 l     O .rwdata	00001060 jtag_uart
008134a8 l     O .rwdata	000000c4 uart
0080e780 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080e9c0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080ebe8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080f65c l     F .text	0000009c altera_avalon_uart_irq
0080f6f8 l     F .text	000000e0 altera_avalon_uart_rxirq
0080f7d8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080fbc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080fdec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008104bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008105f8 l     F .text	000000dc alt_file_locked
0081085c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00810f70 l     F .text	00000004 register_fini
00803468 g     F .text	00000040 __cxa_free_exception
008035e4 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00809b10 g     F .text	00000094 _mprec_log10
008031c4 g     F .text	00000018 _ZSt10unexpectedv
00813634  w    O .rwdata	00000008 _ZTIw
00809bfc g     F .text	00000088 __any_on
0080b298 g     F .text	00000070 _isatty_r
0081190c g     O .rodata	00000028 __mprec_tinytens
0081362c  w    O .rwdata	00000008 _ZTIc
0080e220 g     F .text	0000006c alt_main
008003ec g     F .text	00000020 _ZN3FSM10_spi_writeEv
00815cac g     O .bss	00000100 alt_irq
00813624  w    O .rwdata	00000008 _ZTIa
0080b308 g     F .text	00000078 _lseek_r
00800858 g     F .text	00000020 _ZN3PIO8init_irqEv
008038b4 g     F .text	00000014 _Unwind_GetIPInfo
00813764 g       *ABS*	00000000 __flash_rwdata_start
0080caa4 g     F .text	00000088 __eqdf2
0081145c  w    O .rodata	00000010 _ZTIPy
008136e4  w    O .rwdata	00000002 _ZTSa
00801d74 g     F .text	00000074 __cxa_rethrow
00803854 g     F .text	0000000c _Unwind_SjLj_Unregister
008030e4 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
008019a4  w    F .text	00000088 _ZN4FIFOIcE4pushEc
008114ec  w    O .rodata	00000010 _ZTIPKi
008038a4 g     F .text	00000010 _Unwind_GetIP
00800464 g     F .text	00000058 _ZN3FSMD1Ev
00815f3c g       *ABS*	00000000 __alt_heap_start
008136a4  w    O .rwdata	00000003 _ZTSPj
008048f0 g     F .text	00000074 _kill_r
00803458 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00802fc4 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00804830 g     F .text	000000a0 _signal_r
00813680  w    O .rwdata	00000003 _ZTSPx
0080ad64 g     F .text	00000068 __sseek
008089d4 g     F .text	000000a4 __sinit
0081368c  w    O .rwdata	00000003 _ZTSPm
00801a2c  w    F .text	00000040 _ZN4FIFOIcE22_triggerEmptyConditionEv
0081359c  w    O .rwdata	00000006 _ZTS4UART
00802fb4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0080926c g     F .text	00000084 _setlocale_r
00811340  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00808ad4 g     F .text	00000068 __sfmoreglue
0080e2ac g     F .text	00000020 __malloc_unlock
00811224  w    O .rodata	00000014 _ZTV3PIO
0080036c g     F .text	00000020 _ZN3FSM12_select_modeEv
00801f64 g     F .text	00000020 _ZSt18uncaught_exceptionv
00809624 g     F .text	000000e0 memmove
008136a8  w    O .rwdata	00000002 _ZTSj
00803350 g     F .text	00000010 _ZNSt9exceptionD2Ev
00808ac4 g     F .text	00000010 _cleanup
00801944  w    F .text	00000020 _ZN4FIFOIcE6unlockEv
00809c84 g     F .text	000000bc _Balloc
008116c4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
008036f0 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
0080cbb4 g     F .text	00000088 __gtdf2
00811374  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00813708  w    O .rwdata	00000002 _ZTSb
01004000 g     F .entry	0000001c __reset
008009ac g     F .text	0000007c _ZN3PIOC2EmhNS_4ModeE
008007c0 g     F .text	00000098 _ZN3FSM6actionEv
008136e8  w    O .rwdata	00000004 _ZTSPKc
008038e4 g     F .text	00000008 _Unwind_GetRegionStart
00813700  w    O .rwdata	00000004 _ZTSPKb
00813670  w    O .rwdata	00000004 _ZTSPKy
00800000 g       *ABS*	00000000 __flash_exceptions_start
0080b224 g     F .text	00000074 _fstat_r
0081150c  w    O .rodata	00000010 _ZTIPKt
008136e0  w    O .rwdata	00000003 _ZTSPa
008031dc g     F .text	00000100 _Znwm
0081545c g     O .bss	00000004 errno
0081370c  w    O .rwdata	00000004 _ZTSPKv
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00803cb4 g     F .text	00000080 _Unwind_Backtrace
008115cc  w    O .rodata	00000010 _ZTIPKb
00815474 g     O .bss	00000004 alt_argv
0081b56c g       *ABS*	00000000 _gp
00800db0 g     F .text	00000038 _ZN4UART16inBuffer_isEmptyEv
008033e8 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
0080db44 g     F .text	00000020 getpid
0080115c g     F .text	0000004c _ZN4UART7sendAllEv
008026dc g     F .text	00000180 __cxa_call_unexpected
00801f5c g     F .text	00000008 __cxa_get_exception_ptr
00813694  w    O .rwdata	00000004 _ZTSPKl
008122c8 g     O .rwdata	00000180 alt_fd_list
00801a6c  w    F .text	00000084 _ZN4FIFOIcE4pullEv
008037c0 g     F .text	00000034 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00800a28 g     F .text	00000050 _ZN3PIOD0Ev
00811294  w    O .rodata	00000018 _ZTV4FIFOIcE
008114bc  w    O .rodata	00000010 _ZTIPl
00803c64 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
00803878 g     F .text	00000014 _Unwind_GetCFA
0081360c  w    O .rwdata	00000008 _ZTIt
008030d0 g     F .text	00000014 _ZSt13set_terminatePFvvE
00810a80 g     F .text	00000094 alt_find_dev
00809584 g     F .text	000000a0 memcpy
00813710  w    O .rwdata	00000003 _ZTSPv
00808ab8 g     F .text	0000000c _cleanup_r
0080cd4c g     F .text	000000f8 __floatsidf
00810580 g     F .text	00000078 alt_io_redirect
0080ccc4 g     F .text	00000088 __ltdf2
008111c8 g       *ABS*	00000000 __DTOR_END__
008115fc  w    O .rodata	00000010 _ZTIPv
00802dfc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0081173c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
0081363c  w    O .rwdata	00000008 _ZTIb
008001e0 g     F .text	00000038 _ZN3FSMC2Ev
008114ac  w    O .rodata	00000010 _ZTIPKl
00809a60 g     F .text	000000b0 __ratio
008036bc g     F .text	00000034 _ZN10__cxxabiv119__pointer_type_infoD0Ev
0080ee00 g     F .text	00000224 altera_avalon_jtag_uart_read
00803db8 g     F .text	00000014 malloc
0080d1ec g     F .text	00000008 __udivsi3
0080dd24 g     F .text	000000c0 isatty
00804614 g     F .text	000000cc _raise_r
008136bc  w    O .rwdata	00000003 _ZTSPt
0081181c g     O .rodata	000000c8 __mprec_tens
008033b4 g     F .text	00000034 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
00809248 g     F .text	00000008 __locale_charset
00804a8c g     F .text	00000040 vsnprintf
00810cec g     F .text	00000090 alt_icache_flush
00815450 g     O .bss	00000004 __malloc_top_pad
008048ec g     F .text	00000004 _getpid_r
00813734 g     O .rwdata	00000004 __mb_cur_max
00809250 g     F .text	0000000c _localeconv_r
0080a37c g     F .text	0000003c __i2b
00808c2c g     F .text	0000049c __sfvwrite_r
00802e1c g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00813658  w    O .rwdata	00000004 _ZTSPKd
00804768 g     F .text	000000b4 __sigtramp_r
008045a4 g     F .text	00000070 _sbrk_r
00811670  w    O .rodata	00000020 _ZTVSt9type_info
00800d28 g     F .text	00000050 _ZN3SPID2Ev
00813574  w    O .rwdata	00000008 _ZTI3FSM
008037f4 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0080b380 g     F .text	00000078 _read_r
00803320 g     F .text	00000010 _ZNKSt9exception4whatEv
00813688  w    O .rwdata	00000004 _ZTSPKm
00812294 g     O .rwdata	0000000c __lc_ctype
0081374c g     O .rwdata	00000004 alt_max_fd
0080d628 g     F .text	00000138 __unpack_d
0080b100 g     F .text	00000110 _fclose_r
00811664  w    O .rodata	0000000c _ZTISt9bad_alloc
00808938 g     F .text	00000034 fflush
0081143c  w    O .rodata	00000010 _ZTIPf
00815454 g     O .bss	00000004 __malloc_max_sbrked_mem
0080db64 g     F .text	000001c0 alt_irq_register
00800250 g     F .text	00000094 _ZN3FSM10transitionEv
008116a0  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
0080c414 g     F .text	00000074 __adddf3
00811314  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
008010a8 g     F .text	000000b4 _ZN4UART4sendEv
00809940 g     F .text	00000120 __b2d
0080b9d4 g     F .text	000005b0 __umoddi3
0080e0d0 g     F .text	000000f0 lseek
00802e7c g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00802140 g     F .text	0000000c _ZdlPv
00813730 g     O .rwdata	00000004 _global_impure_ptr
0080a6f8 g     F .text	000005f4 _realloc_r
00815f3c g       *ABS*	00000000 __bss_end
00813674  w    O .rwdata	00000003 _ZTSPy
008103c4 g     F .text	000000f8 alt_iic_isr_register
008136ac  w    O .rwdata	00000004 _ZTSPKi
008115dc  w    O .rodata	00000010 _ZTIPb
00810954 g     F .text	0000010c alt_tick
00803844 g     F .text	00000010 _Unwind_SjLj_Register
0080b3f8 g     F .text	000005dc __udivdi3
008118e4 g     O .rodata	00000028 __mprec_bigtens
0080a5d8 g     F .text	00000120 __s2b
00803d8c g     F .text	00000018 abort
0080cf1c g     F .text	00000194 __floatunsidf
00809860 g     F .text	00000060 __mcmp
0080f594 g     F .text	000000c8 altera_avalon_uart_init
008135dc  w    O .rwdata	00000008 _ZTIy
00801f84 g     F .text	000000a4 __cxa_end_catch
00808aa0 g     F .text	00000018 __fp_lock_all
0081037c g     F .text	00000048 alt_ic_irq_enabled
008033a4 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
0081142c  w    O .rodata	00000010 _ZTIPKf
008108bc g     F .text	00000098 alt_alarm_stop
008018b0  w    F .text	00000074 _ZN4FIFOIcE6isFullEv
0081141c  w    O .rodata	00000010 _ZTIPd
0081546c g     O .bss	00000004 alt_irq_active
0080319c g     F .text	00000018 _ZSt9terminatev
008136cc  w    O .rwdata	00000002 _ZTSs
008116f4  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
010040ec g     F .exceptions	000000c8 alt_irq_handler
00813584  w    O .rwdata	00000008 _ZTI3PIO
008122a0 g     O .rwdata	00000028 alt_dev_null
0080165c g     F .text	00000220 _ZN4UARTC2Emmjj
008136b0  w    O .rwdata	00000003 _ZTSPi
00813668  w    O .rwdata	00000003 _ZTSPf
008115ac  w    O .rodata	00000010 _ZTIPKw
0081365c  w    O .rwdata	00000003 _ZTSPd
00800ac8 g     F .text	00000050 _ZN3PIOD2Ev
008112e4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0080ffa0 g     F .text	00000044 alt_dcache_flush_all
0080972c g     F .text	00000070 __hi0bits
008135e4  w    O .rwdata	00000008 _ZTIx
008136f8  w    O .rwdata	00000003 _ZTSPw
008135bc  w    O .rwdata	00000008 _ZTISt9exception
0080ce44 g     F .text	000000d8 __fixdfsi
00800a78 g     F .text	00000050 _ZN3PIOD1Ev
00813690  w    O .rwdata	00000002 _ZTSm
00800b18 g     F .text	00000040 _ZN3SPIC2Em
00813764 g       *ABS*	00000000 __ram_rwdata_end
008114fc  w    O .rodata	00000010 _ZTIPi
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory
008003ac g     F .text	00000020 _ZN3FSM9_spi_menuEv
00803614 g     F .text	00000010 _ZNSt9type_infoD1Ev
00813744 g     O .rwdata	00000008 alt_dev_list
00815444 g     O .bss	00000004 __new_handler
0080e568 g     F .text	00000120 write
00803604 g     F .text	00000010 _ZNSt9type_infoD0Ev
00811a8c g       *ABS*	00000000 __ram_rodata_end
0080da10 g     F .text	000000d4 fstat
008135d4  w    O .rwdata	00000008 _ZTIf
0080de44 g     F .text	00000140 kill
00813698  w    O .rwdata	00000003 _ZTSPl
0081153c  w    O .rodata	00000010 _ZTIPs
0080a4b8 g     F .text	00000120 __pow5mult
00815460 g     O .bss	00000004 __nlocale_changed
0080d1f4 g     F .text	00000008 __umodsi3
008035fc g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0081367c  w    O .rwdata	00000004 _ZTSPKx
0080040c g     F .text	00000058 _ZN3FSMD0Ev
00815f3c g       *ABS*	00000000 end
00800514 g     F .text	000002ac _ZN3FSM5_initEv
008136f0  w    O .rwdata	00000002 _ZTSc
0080fc24 g     F .text	000001c8 altera_avalon_uart_write
00803a04 g     F .text	00000018 _Unwind_DeleteException
008136a0  w    O .rwdata	00000004 _ZTSPKj
0080e900 g     F .text	000000c0 altera_avalon_jtag_uart_init
008111c4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081149c  w    O .rodata	00000010 _ZTIPm
0080f4f4 g     F .text	00000058 altera_avalon_uart_write_fd
0080d294 g     F .text	00000080 __clzsi2
0080f54c g     F .text	00000048 altera_avalon_uart_close_fd
00802d3c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0080f024 g     F .text	00000240 altera_avalon_jtag_uart_write
008089c4 g     F .text	00000004 __sfp_lock_acquire
0081139c  w    O .rodata	00000012 _ZTSSt13bad_exception
008094a0 g     F .text	000000e4 memchr
00804f64 g     F .text	00001eac ___vfprintf_internal_r
008136d8  w    O .rwdata	00000002 _ZTSh
00800de8 g     F .text	00000084 _ZN4UART13buffer_putstrEPKc
00804bf8 g     F .text	00000314 _free_r
00801208 g     F .text	000000bc _ZN4UARTD0Ev
00810f74 g     F .text	000001b0 __call_exitprocs
008112ac  w    O .rodata	00000009 _ZTS4FIFOIcE
00815464 g     O .bss	00000004 __mlocale_changed
00813728 g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000004c _start
0081547c g     O .bss	00000004 _alt_tick_rate
00803804 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00811690  w    O .rodata	0000000d _ZTSSt9type_info
00801bb0  w    F .text	0000006c _ZN4FIFOIcED0Ev
0080a048 g     F .text	0000014c __lshift
0080f264 g     F .text	00000238 alt_avalon_spi_command
00811640  w    O .rodata	00000014 _ZTVSt9bad_alloc
00815480 g     O .bss	00000004 _alt_nticks
008048d0 g     F .text	0000001c signal
0080e2cc g     F .text	00000120 read
0080e71c g     F .text	00000064 alt_sys_init
00813704  w    O .rwdata	00000003 _ZTSPb
0081155c  w    O .rodata	00000010 _ZTIPh
008115bc  w    O .rodata	00000010 _ZTIPw
00810e3c g     F .text	00000134 __register_exitproc
00811654  w    O .rodata	0000000d _ZTSSt9bad_alloc
0081361c  w    O .rwdata	00000008 _ZTIh
00800ea8 g     F .text	00000040 _ZN4UART14buffer_getcharEv
00801964  w    F .text	00000040 _ZN4FIFOIcE21_triggerFullConditionEv
0081146c  w    O .rodata	00000010 _ZTIPKx
0080a194 g     F .text	000001e8 __multiply
0080ec98 g     F .text	00000074 altera_avalon_jtag_uart_close
00811a8c g       *ABS*	00000000 __ram_rwdata_start
00803b6c g     F .text	000000f8 _Unwind_SjLj_RaiseException
008111c8 g       *ABS*	00000000 __ram_rodata_start
00815c84 g     O .bss	00000028 __malloc_current_mallinfo
00803b10 g     F .text	0000005c _Unwind_SjLj_Resume
00809d40 g     F .text	0000017c __d2b
008012c4 g     F .text	000000bc _ZN4UARTD1Ev
008135fc  w    O .rwdata	00000008 _ZTIj
008135cc  w    O .rwdata	00000008 _ZTId
00803624 g     F .text	00000010 _ZNSt9type_infoD2Ev
008008a4 g     F .text	0000008c _ZN3PIO8setValueEj
00802ef8 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
008114cc  w    O .rodata	00000010 _ZTIPKj
0081357c  w    O .rwdata	00000005 _ZTS3PIO
00803634 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00811634  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
0080e7b8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080038c g     F .text	00000020 _ZN3FSM13_wait_requestEv
00810c34 g     F .text	000000b8 alt_get_fd
0080187c  w    F .text	00000034 _ZN4FIFOIcE7isEmptyEv
0080d760 g     F .text	000000c8 __fpcmp_parts_d
0080b090 g     F .text	00000070 _close_r
00813664  w    O .rwdata	00000004 _ZTSPKf
008136dc  w    O .rwdata	00000004 _ZTSPKa
00810dc8 g     F .text	00000074 memcmp
0080e868 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00815f3c g       *ABS*	00000000 __alt_stack_base
0080e8b0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803414 g     F .text	00000034 _ZNSt9bad_allocD0Ev
00800878 g     F .text	0000002c _ZN3PIO8getValueEv
00802fa4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
008033f8 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
00806e34 g     F .text	0000013c __swsetup_r
00803d34 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0080c84c g     F .text	00000258 __divdf3
00800930 g     F .text	0000007c _ZN3PIOC1EmhNS_4ModeE
00808b3c g     F .text	000000f0 __sfp
00809ba4 g     F .text	00000058 __copybits
008035dc g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00803700 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
00811a8c g     O .rwdata	00000408 __malloc_av_
008089d0 g     F .text	00000004 __sinit_lock_release
008049d8 g     F .text	000000b4 _vsnprintf_r
0080c488 g     F .text	000003c4 __muldf3
0080ae48 g     F .text	00000060 __sread
00811388  w    O .rodata	00000014 _ZTVSt9exception
00810b14 g     F .text	00000120 alt_find_file
00802da8 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0080ffe4 g     F .text	000000b4 alt_dev_llist_insert
0080e28c g     F .text	00000020 __malloc_lock
0080e4ac g     F .text	000000bc sbrk
00811284  w    O .rodata	00000010 _ZTV4UART
008112b8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00801de8 g     F .text	00000074 __cxa_throw
0080873c g     F .text	000001fc _fflush_r
008038c8 g     F .text	00000010 _Unwind_SetIP
0080afdc g     F .text	000000b4 _calloc_r
00813604  w    O .rwdata	00000008 _ZTIi
0081144c  w    O .rodata	00000010 _ZTIPKy
0081543c g       *ABS*	00000000 __bss_start
0080450c g     F .text	00000098 memset
00801c88 g     F .text	000000ec main
00813654  w    O .rwdata	00000002 _ZTSe
00815478 g     O .bss	00000004 alt_envp
00801af0  w    F .text	000000c0 _ZN4FIFOIcEC1Ej
00815458 g     O .bss	00000004 __malloc_max_total_mem
0080e810 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008135c4  w    O .rwdata	00000008 _ZTIe
008030c0 g     F .text	00000008 __cxa_get_globals_fast
0080ad5c g     F .text	00000008 __sclose
0080214c g     F .text	00000004 _ZdaPv
01000000 g       *ABS*	00000000 __alt_heap_limit
0081366c  w    O .rwdata	00000002 _ZTSf
0080b210 g     F .text	00000014 fclose
00815dac g     O .bss	00000190 _atexit0
0081158c  w    O .rodata	00000010 _ZTIPKc
00807188 g     F .text	000015b4 _dtoa_r
00803dcc g     F .text	00000740 _malloc_r
0081148c  w    O .rodata	00000010 _ZTIPKm
00813750 g     O .rwdata	00000004 alt_errno
00804758 g     F .text	00000010 _init_signal
00811308  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
008002e4 g     F .text	00000088 _ZN3FSM6_unsetEv
00800b58 g     F .text	00000040 _ZN3SPIC1Em
00809190 g     F .text	000000b8 _fwalk
00803394 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0080d12c g     F .text	00000060 __divsi3
00811940 g     O .rodata	00000014 __thenan_df
008113ec  w    O .rodata	00000010 _ZTIPKe
00804acc g     F .text	0000012c _malloc_trim_r
008111c8 g       *ABS*	00000000 __CTOR_END__
0080aea8 g     F .text	000000bc strcmp
0081152c  w    O .rodata	00000010 _ZTIPKs
0081159c  w    O .rodata	00000010 _ZTIPc
008111c8 g       *ABS*	00000000 __flash_rodata_start
0081358c  w    O .rwdata	00000005 _ZTS3SPI
008111c8 g       *ABS*	00000000 __DTOR_LIST__
00800c88 g     F .text	00000050 _ZN3SPID0Ev
0080cb2c g     F .text	00000088 __nedf2
008136fc  w    O .rwdata	00000002 _ZTSw
00813650  w    O .rwdata	00000003 _ZTSPe
0080e6e8 g     F .text	00000034 alt_irq_init
008136ec  w    O .rwdata	00000003 _ZTSPc
0080e44c g     F .text	00000060 alt_release_fd
00803710 g     F .text	000000b0 _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
00802f70 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0080143c g     F .text	00000220 _ZN4UARTC1Emmjj
00811954 g     O .rodata	00000100 __clz_tab
00815468 g     O .bss	00000004 _PathLocale
00800d78 g     F .text	00000038 _ZN4UART17outBuffer_isEmptyEv
00810d7c g     F .text	00000014 atexit
0080af64 g     F .text	00000078 _write_r
00801380 g     F .text	000000bc _ZN4UARTD2Ev
008092f0 g     F .text	0000001c setlocale
00801c1c  w    F .text	0000006c _ZN4FIFOIcED1Ev
008038fc g     F .text	00000008 _Unwind_GetTextRelBase
00800ee8 g     F .text	000001c0 _ZN4UART13buffer_printfEPKcz
008032dc g     F .text	00000044 __cxa_call_terminate
008135ec  w    O .rwdata	00000008 _ZTIm
0081372c g     O .rwdata	00000004 _impure_ptr
00815470 g     O .bss	00000004 alt_argc
008113cc  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
0081015c g     F .text	00000064 _do_dtors
008004bc g     F .text	00000058 _ZN3FSMD2Ev
01004020 g       .exceptions	00000000 alt_irq_entry
008098c0 g     F .text	00000080 __ulp
0080acec g     F .text	00000040 __isinfd
008038ec g     F .text	00000008 _Unwind_FindEnclosingFunction
00808a88 g     F .text	00000018 __fp_unlock_all
0081156c  w    O .rodata	00000010 _ZTIPKa
00801ebc g     F .text	000000a0 _Znam
0081373c g     O .rwdata	00000008 alt_fs_list
008114dc  w    O .rodata	00000010 _ZTIPj
008038d8 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00802028 g     F .text	00000118 __cxa_begin_catch
008136d0  w    O .rwdata	00000004 _ZTSPKh
00802e0c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
008031b4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
008115ec  w    O .rodata	00000010 _ZTIPKv
0081364c  w    O .rwdata	00000004 _ZTSPKe
01004020 g       *ABS*	00000000 __ram_exceptions_start
0080925c g     F .text	00000010 localeconv
00813714  w    O .rwdata	00000002 _ZTSv
00803360 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
008135b4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00800e6c g     F .text	0000003c _ZN4UART14buffer_putcharEc
008136c0  w    O .rwdata	00000002 _ZTSt
0080363c g     F .text	00000080 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
0081151c  w    O .rodata	00000010 _ZTIPt
008101f0 g     F .text	00000050 alt_ic_isr_register
008034a8 g     F .text	00000134 __cxa_allocate_exception
0081140c  w    O .rodata	00000010 _ZTIPKd
00811368  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0081154c  w    O .rodata	00000010 _ZTIPKh
00803408 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
00813764 g       *ABS*	00000000 _edata
0080f49c g     F .text	00000058 altera_avalon_uart_read_fd
00815f3c g       *ABS*	00000000 _end
00813718 g     O .rwdata	00000001 _ZSt7nothrow
008135a4  w    O .rwdata	00000008 _ZTI4UART
0080285c g     F .text	000004e0 __gxx_personality_sj0
010041b4 g       *ABS*	00000000 __ram_exceptions_end
008136b4  w    O .rwdata	00000002 _ZTSi
0080ed0c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00813678  w    O .rwdata	00000002 _ZTSy
00802eac g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00803340 g     F .text	00000010 _ZNSt9exceptionD1Ev
00811718  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
008102dc g     F .text	000000a0 alt_ic_irq_disable
00811204  w    O .rodata	00000010 _ZTV3FSM
0081356c  w    O .rwdata	00000005 _ZTS3FSM
0081369c  w    O .rwdata	00000002 _ZTSl
0080adcc g     F .text	0000007c __swrite
00813644  w    O .rwdata	00000008 _ZTIv
00813724 g     O .rwdata	00000004 __malloc_trim_threshold
008136c8  w    O .rwdata	00000003 _ZTSPs
00810a60 g     F .text	00000020 altera_nios2_qsys_irq_init
00810d90 g     F .text	00000038 exit
0080388c g     F .text	00000018 _Unwind_SetGR
008090c8 g     F .text	000000c8 _fwalk_reent
00809ebc g     F .text	0000018c __mdiff
008030f8 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0080d18c g     F .text	00000060 __modsi3
00803448 g     F .text	00000010 _ZNSt9bad_allocD1Ev
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
008089c8 g     F .text	00000004 __sfp_lock_release
00813660  w    O .rwdata	00000002 _ZTSd
008135f4  w    O .rwdata	00000008 _ZTIl
00802ff8 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
008113b0  w    O .rodata	0000000c _ZTISt13bad_exception
00803814  w    F .text	00000030 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
0080f934 g     F .text	00000060 altera_avalon_uart_close
0081147c  w    O .rodata	00000010 _ZTIPx
0080ad2c g     F .text	00000030 __isnand
0080d9f0 g     F .text	00000020 _exit
0080fe4c g     F .text	00000154 alt_alarm_start
00800218 g     F .text	00000038 _ZN3FSMC1Ev
0080d1fc g     F .text	00000098 __muldi3
00803860 g     F .text	00000018 _Unwind_GetGR
008030c8 g     F .text	00000008 __cxa_get_globals
0080930c g     F .text	00000194 __smakebuf_r
008135b8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00804964 g     F .text	00000074 strlen
008046f4 g     F .text	00000064 _init_signal_r
0081371c  w    O .rwdata	00000008 _ZTISt9type_info
008106d4 g     F .text	00000188 open
008113fc  w    O .rodata	00000010 _ZTIPe
0080cc3c g     F .text	00000088 __gedf2
008113bc  w    O .rodata	0000000d _ZTSSt9exception
00813594  w    O .rwdata	00000008 _ZTI3SPI
00803330 g     F .text	00000010 _ZNSt9exceptionD0Ev
008101c0 g     F .text	00000030 alt_icache_flush_all
00813684  w    O .rwdata	00000002 _ZTSx
008038f4 g     F .text	00000008 _Unwind_GetDataRelBase
00813754 g     O .rwdata	00000004 alt_priority_mask
00800b98 g     F .text	0000006c _ZN3SPI15readCMVRegisterEh
00810240 g     F .text	0000009c alt_ic_irq_enable
00813614  w    O .rwdata	00000008 _ZTIs
00806e10 g     F .text	00000024 __vfprintf_internal
0080f994 g     F .text	00000230 altera_avalon_uart_read
0081157c  w    O .rodata	00000010 _ZTIPa
008136f4  w    O .rwdata	00000004 _ZTSPKw
0080c394 g     F .text	00000080 __subdf3
00800cd8 g     F .text	00000050 _ZN3SPID1Ev
00800c04 g     F .text	00000084 _ZN3SPI16writeCMVRegisterEhh
0080979c g     F .text	000000c4 __lo0bits
0081375c g     O .rwdata	00000008 alt_alarm_list
0081160c  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00801924  w    F .text	00000020 _ZN4FIFOIcE4lockEv
008100f8 g     F .text	00000064 _do_ctors
0080481c g     F .text	00000014 __sigtramp
008135ac  w    O .rwdata	00000008 _ZTI4FIFOIcE
008116e8  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
0080d828 g     F .text	000000fc close
008136d4  w    O .rwdata	00000003 _ZTSPh
00811238  w    O .rodata	00000010 _ZTV3SPI
0080dfe4 g     F .text	00000080 alt_load
0080d314 g     F .text	00000314 __pack_d
008035ec g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
008136c4  w    O .rwdata	00000004 _ZTSPKs
008046e0 g     F .text	00000014 raise
008136b8  w    O .rwdata	00000004 _ZTSPKt
008003cc g     F .text	00000020 _ZN3FSM9_spi_readEv
00803da4 g     F .text	00000014 free
008089cc g     F .text	00000004 __sinit_lock_acquire
0080a3b8 g     F .text	00000100 __multadd
00802dc8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00809704 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1004000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100400c:	00bffd16 	blt	zero,r2,1004004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1004010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1004014:	08406514 	ori	at,at,404
    jmp r1
 1004018:	0800683a 	jmp	at
 100401c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

01004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040ec0 	call	10040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000306 	br	1004098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1004094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040e8:	ef80083a 	eret

010040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040ec:	defff904 	addi	sp,sp,-28
 10040f0:	dfc00615 	stw	ra,24(sp)
 10040f4:	df000515 	stw	fp,20(sp)
 10040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10040fc:	0005313a 	rdctl	r2,ipending
 1004100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1004104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1004108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004110:	00800044 	movi	r2,1
 1004114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1004118:	e0ffff17 	ldw	r3,-4(fp)
 100411c:	e0bffe17 	ldw	r2,-8(fp)
 1004120:	1884703a 	and	r2,r3,r2
 1004124:	1005003a 	cmpeq	r2,r2,zero
 1004128:	1000161e 	bne	r2,zero,1004184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100412c:	e0bffd17 	ldw	r2,-12(fp)
 1004130:	00c02074 	movhi	r3,129
 1004134:	18d72b04 	addi	r3,r3,23724
 1004138:	100490fa 	slli	r2,r2,3
 100413c:	10c5883a 	add	r2,r2,r3
 1004140:	11400017 	ldw	r5,0(r2)
 1004144:	e0bffd17 	ldw	r2,-12(fp)
 1004148:	00c02074 	movhi	r3,129
 100414c:	18d72b04 	addi	r3,r3,23724
 1004150:	100490fa 	slli	r2,r2,3
 1004154:	10c5883a 	add	r2,r2,r3
 1004158:	10800104 	addi	r2,r2,4
 100415c:	11000017 	ldw	r4,0(r2)
 1004160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004164:	0005313a 	rdctl	r2,ipending
 1004168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1004170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1004174:	e0bfff17 	ldw	r2,-4(fp)
 1004178:	1004c03a 	cmpne	r2,r2,zero
 100417c:	103fe31e 	bne	r2,zero,100410c <alt_irq_handler+0x20>
 1004180:	00000706 	br	10041a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1004184:	e0bffe17 	ldw	r2,-8(fp)
 1004188:	1085883a 	add	r2,r2,r2
 100418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1004190:	e0bffd17 	ldw	r2,-12(fp)
 1004194:	10800044 	addi	r2,r2,1
 1004198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100419c:	003fde06 	br	1004118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10041a0:	e037883a 	mov	sp,fp
 10041a4:	dfc00117 	ldw	ra,4(sp)
 10041a8:	df000017 	ldw	fp,0(sp)
 10041ac:	dec00204 	addi	sp,sp,8
 10041b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a0:	00bffd16 	blt	zero,r2,800198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001ac:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b0:	d6ad5b14 	ori	gp,gp,46444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b8:	10950f14 	ori	r2,r2,21564

    movhi r3, %hi(__bss_end)
  8001bc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c0:	18d7cf14 	ori	r3,r3,24380

    beq r2, r3, 1f
  8001c4:	10c00326 	beq	r2,r3,8001d4 <_start+0x40>

0:
    stw zero, (r2)
  8001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d0:	10fffd36 	bltu	r2,r3,8001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d4:	080dfe40 	call	80dfe4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d8:	080e2200 	call	80e220 <alt_main>

008001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001dc:	003fff06 	br	8001dc <alt_after_alt_main>

008001e0 <_ZN3FSMC2Ev>:
#include "system.h"
#include "controller/UART.h"
#include "controller/SPI.h"
#include "controller/PIO.h"

FSM::FSM() {
  8001e0:	defffe04 	addi	sp,sp,-8
  8001e4:	df000115 	stw	fp,4(sp)
  8001e8:	df000104 	addi	fp,sp,4
  8001ec:	e13fff15 	stw	r4,-4(fp)
  8001f0:	00802074 	movhi	r2,129
  8001f4:	10848304 	addi	r2,r2,4620
  8001f8:	e0ffff17 	ldw	r3,-4(fp)
  8001fc:	18800015 	stw	r2,0(r3)
	_current_state = init;
  800200:	e0bfff17 	ldw	r2,-4(fp)
  800204:	10000115 	stw	zero,4(r2)
}
  800208:	e037883a 	mov	sp,fp
  80020c:	df000017 	ldw	fp,0(sp)
  800210:	dec00104 	addi	sp,sp,4
  800214:	f800283a 	ret

00800218 <_ZN3FSMC1Ev>:
#include "system.h"
#include "controller/UART.h"
#include "controller/SPI.h"
#include "controller/PIO.h"

FSM::FSM() {
  800218:	defffe04 	addi	sp,sp,-8
  80021c:	df000115 	stw	fp,4(sp)
  800220:	df000104 	addi	fp,sp,4
  800224:	e13fff15 	stw	r4,-4(fp)
  800228:	00802074 	movhi	r2,129
  80022c:	10848304 	addi	r2,r2,4620
  800230:	e0ffff17 	ldw	r3,-4(fp)
  800234:	18800015 	stw	r2,0(r3)
	_current_state = init;
  800238:	e0bfff17 	ldw	r2,-4(fp)
  80023c:	10000115 	stw	zero,4(r2)
}
  800240:	e037883a 	mov	sp,fp
  800244:	df000017 	ldw	fp,0(sp)
  800248:	dec00104 	addi	sp,sp,4
  80024c:	f800283a 	ret

00800250 <_ZN3FSM10transitionEv>:
			_unset();
			break;
	}
}

void FSM::transition(void) {
  800250:	defffd04 	addi	sp,sp,-12
  800254:	df000215 	stw	fp,8(sp)
  800258:	df000204 	addi	fp,sp,8
  80025c:	e13ffe15 	stw	r4,-8(fp)

	switch (_current_state)
  800260:	e0bffe17 	ldw	r2,-8(fp)
  800264:	10800117 	ldw	r2,4(r2)
  800268:	e0bfff15 	stw	r2,-4(fp)
  80026c:	e0ffff17 	ldw	r3,-4(fp)
  800270:	18800228 	cmpgeui	r2,r3,8
  800274:	1000171e 	bne	r2,zero,8002d4 <_ZN3FSM10transitionEv+0x84>
  800278:	e13fff17 	ldw	r4,-4(fp)
  80027c:	e13fff17 	ldw	r4,-4(fp)
  800280:	2105883a 	add	r2,r4,r4
  800284:	1087883a 	add	r3,r2,r2
  800288:	00802034 	movhi	r2,128
  80028c:	1080a704 	addi	r2,r2,668
  800290:	1885883a 	add	r2,r3,r2
  800294:	10800017 	ldw	r2,0(r2)
  800298:	1000683a 	jmp	r2
  80029c:	008002bc 	xorhi	r2,zero,10
  8002a0:	008002cc 	andi	r2,zero,11
  8002a4:	008002d4 	movui	r2,11
  8002a8:	008002d4 	movui	r2,11
  8002ac:	008002d4 	movui	r2,11
  8002b0:	008002d4 	movui	r2,11
  8002b4:	008002d4 	movui	r2,11
  8002b8:	008002d4 	movui	r2,11
	{
		case init:
			_current_state= select_mode;
  8002bc:	e0fffe17 	ldw	r3,-8(fp)
  8002c0:	00800084 	movi	r2,2
  8002c4:	18800115 	stw	r2,4(r3)
			break;
  8002c8:	00000206 	br	8002d4 <_ZN3FSM10transitionEv+0x84>
			break;
		case spi_read_all:

			break;
		case unset:
			_current_state= init;
  8002cc:	e0bffe17 	ldw	r2,-8(fp)
  8002d0:	10000115 	stw	zero,4(r2)
			break;
	}
}
  8002d4:	e037883a 	mov	sp,fp
  8002d8:	df000017 	ldw	fp,0(sp)
  8002dc:	dec00104 	addi	sp,sp,4
  8002e0:	f800283a 	ret

008002e4 <_ZN3FSM6_unsetEv>:
	_uart->buffer_printf("pio = %8x\r\n", test->getValue());

	_uart->sendAll();
}

void FSM::_unset(void) {
  8002e4:	defffd04 	addi	sp,sp,-12
  8002e8:	dfc00215 	stw	ra,8(sp)
  8002ec:	df000115 	stw	fp,4(sp)
  8002f0:	df000104 	addi	fp,sp,4
  8002f4:	e13fff15 	stw	r4,-4(fp)
	delete this->_uart;
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	10800217 	ldw	r2,8(r2)
  800300:	1005003a 	cmpeq	r2,r2,zero
  800304:	1000081e 	bne	r2,zero,800328 <_ZN3FSM6_unsetEv+0x44>
  800308:	e0bfff17 	ldw	r2,-4(fp)
  80030c:	10800217 	ldw	r2,8(r2)
  800310:	10800017 	ldw	r2,0(r2)
  800314:	10800104 	addi	r2,r2,4
  800318:	10c00017 	ldw	r3,0(r2)
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	11000217 	ldw	r4,8(r2)
  800324:	183ee83a 	callr	r3
	delete this->_spi;
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	10800317 	ldw	r2,12(r2)
  800330:	1005003a 	cmpeq	r2,r2,zero
  800334:	1000081e 	bne	r2,zero,800358 <_ZN3FSM6_unsetEv+0x74>
  800338:	e0bfff17 	ldw	r2,-4(fp)
  80033c:	10800317 	ldw	r2,12(r2)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	10800104 	addi	r2,r2,4
  800348:	10c00017 	ldw	r3,0(r2)
  80034c:	e0bfff17 	ldw	r2,-4(fp)
  800350:	11000317 	ldw	r4,12(r2)
  800354:	183ee83a 	callr	r3
}
  800358:	e037883a 	mov	sp,fp
  80035c:	dfc00117 	ldw	ra,4(sp)
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00204 	addi	sp,sp,8
  800368:	f800283a 	ret

0080036c <_ZN3FSM12_select_modeEv>:


void FSM::_select_mode(void) {
  80036c:	defffe04 	addi	sp,sp,-8
  800370:	df000115 	stw	fp,4(sp)
  800374:	df000104 	addi	fp,sp,4
  800378:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
  80037c:	e037883a 	mov	sp,fp
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00104 	addi	sp,sp,4
  800388:	f800283a 	ret

0080038c <_ZN3FSM13_wait_requestEv>:

void FSM::_wait_request(void) {
  80038c:	defffe04 	addi	sp,sp,-8
  800390:	df000115 	stw	fp,4(sp)
  800394:	df000104 	addi	fp,sp,4
  800398:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00104 	addi	sp,sp,4
  8003a8:	f800283a 	ret

008003ac <_ZN3FSM9_spi_menuEv>:

void FSM::_spi_menu(void) {
  8003ac:	defffe04 	addi	sp,sp,-8
  8003b0:	df000115 	stw	fp,4(sp)
  8003b4:	df000104 	addi	fp,sp,4
  8003b8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003bc:	e037883a 	mov	sp,fp
  8003c0:	df000017 	ldw	fp,0(sp)
  8003c4:	dec00104 	addi	sp,sp,4
  8003c8:	f800283a 	ret

008003cc <_ZN3FSM9_spi_readEv>:

void FSM::_spi_read(void) {
  8003cc:	defffe04 	addi	sp,sp,-8
  8003d0:	df000115 	stw	fp,4(sp)
  8003d4:	df000104 	addi	fp,sp,4
  8003d8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00104 	addi	sp,sp,4
  8003e8:	f800283a 	ret

008003ec <_ZN3FSM10_spi_writeEv>:

void FSM::_spi_write(void) {
  8003ec:	defffe04 	addi	sp,sp,-8
  8003f0:	df000115 	stw	fp,4(sp)
  8003f4:	df000104 	addi	fp,sp,4
  8003f8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated
}
  8003fc:	e037883a 	mov	sp,fp
  800400:	df000017 	ldw	fp,0(sp)
  800404:	dec00104 	addi	sp,sp,4
  800408:	f800283a 	ret

0080040c <_ZN3FSMD0Ev>:

FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  80040c:	defffd04 	addi	sp,sp,-12
  800410:	dfc00215 	stw	ra,8(sp)
  800414:	df000115 	stw	fp,4(sp)
  800418:	df000104 	addi	fp,sp,4
  80041c:	e13fff15 	stw	r4,-4(fp)
  800420:	00c02074 	movhi	r3,129
  800424:	18c48304 	addi	r3,r3,4620
  800428:	e0bfff17 	ldw	r2,-4(fp)
  80042c:	10c00015 	stw	r3,0(r2)
	_unset();
  800430:	e13fff17 	ldw	r4,-4(fp)
  800434:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  800438:	00800044 	movi	r2,1
  80043c:	10803fcc 	andi	r2,r2,255
  800440:	1005003a 	cmpeq	r2,r2,zero
  800444:	1000021e 	bne	r2,zero,800450 <_ZN3FSMD0Ev+0x44>
  800448:	e13fff17 	ldw	r4,-4(fp)
  80044c:	08021400 	call	802140 <_ZdlPv>
  800450:	e037883a 	mov	sp,fp
  800454:	dfc00117 	ldw	ra,4(sp)
  800458:	df000017 	ldw	fp,0(sp)
  80045c:	dec00204 	addi	sp,sp,8
  800460:	f800283a 	ret

00800464 <_ZN3FSMD1Ev>:

FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  800464:	defffd04 	addi	sp,sp,-12
  800468:	dfc00215 	stw	ra,8(sp)
  80046c:	df000115 	stw	fp,4(sp)
  800470:	df000104 	addi	fp,sp,4
  800474:	e13fff15 	stw	r4,-4(fp)
  800478:	00c02074 	movhi	r3,129
  80047c:	18c48304 	addi	r3,r3,4620
  800480:	e0bfff17 	ldw	r2,-4(fp)
  800484:	10c00015 	stw	r3,0(r2)
	_unset();
  800488:	e13fff17 	ldw	r4,-4(fp)
  80048c:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  800490:	0005883a 	mov	r2,zero
  800494:	10803fcc 	andi	r2,r2,255
  800498:	1005003a 	cmpeq	r2,r2,zero
  80049c:	1000021e 	bne	r2,zero,8004a8 <_ZN3FSMD1Ev+0x44>
  8004a0:	e13fff17 	ldw	r4,-4(fp)
  8004a4:	08021400 	call	802140 <_ZdlPv>
  8004a8:	e037883a 	mov	sp,fp
  8004ac:	dfc00117 	ldw	ra,4(sp)
  8004b0:	df000017 	ldw	fp,0(sp)
  8004b4:	dec00204 	addi	sp,sp,8
  8004b8:	f800283a 	ret

008004bc <_ZN3FSMD2Ev>:

FSM::FSM() {
	_current_state = init;
}

FSM::~FSM() {
  8004bc:	defffd04 	addi	sp,sp,-12
  8004c0:	dfc00215 	stw	ra,8(sp)
  8004c4:	df000115 	stw	fp,4(sp)
  8004c8:	df000104 	addi	fp,sp,4
  8004cc:	e13fff15 	stw	r4,-4(fp)
  8004d0:	00c02074 	movhi	r3,129
  8004d4:	18c48304 	addi	r3,r3,4620
  8004d8:	e0bfff17 	ldw	r2,-4(fp)
  8004dc:	10c00015 	stw	r3,0(r2)
	_unset();
  8004e0:	e13fff17 	ldw	r4,-4(fp)
  8004e4:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
}
  8004e8:	0005883a 	mov	r2,zero
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	1005003a 	cmpeq	r2,r2,zero
  8004f4:	1000021e 	bne	r2,zero,800500 <_ZN3FSMD2Ev+0x44>
  8004f8:	e13fff17 	ldw	r4,-4(fp)
  8004fc:	08021400 	call	802140 <_ZdlPv>
  800500:	e037883a 	mov	sp,fp
  800504:	dfc00117 	ldw	ra,4(sp)
  800508:	df000017 	ldw	fp,0(sp)
  80050c:	dec00204 	addi	sp,sp,8
  800510:	f800283a 	ret

00800514 <_ZN3FSM5_initEv>:
			_current_state= init;
			break;
	}
}

void FSM::_init(void) {
  800514:	deffdc04 	addi	sp,sp,-144
  800518:	dfc02315 	stw	ra,140(sp)
  80051c:	df002215 	stw	fp,136(sp)
  800520:	ddc02115 	stw	r23,132(sp)
  800524:	dd802015 	stw	r22,128(sp)
  800528:	dd401f15 	stw	r21,124(sp)
  80052c:	dd001e15 	stw	r20,120(sp)
  800530:	dcc01d15 	stw	r19,116(sp)
  800534:	dc801c15 	stw	r18,112(sp)
  800538:	dc401b15 	stw	r17,108(sp)
  80053c:	dc001a15 	stw	r16,104(sp)
  800540:	df001a04 	addi	fp,sp,104
  800544:	e13fe815 	stw	r4,-96(fp)
  800548:	00802034 	movhi	r2,128
  80054c:	108a1704 	addi	r2,r2,10332
  800550:	e0bfef15 	stw	r2,-68(fp)
  800554:	00802074 	movhi	r2,129
  800558:	10844904 	addi	r2,r2,4388
  80055c:	e0bff015 	stw	r2,-64(fp)
  800560:	e0bff104 	addi	r2,fp,-60
  800564:	e0ffe704 	addi	r3,fp,-100
  800568:	10c00015 	stw	r3,0(r2)
  80056c:	00c02034 	movhi	r3,128
  800570:	18c1cc04 	addi	r3,r3,1840
  800574:	10c00115 	stw	r3,4(r2)
  800578:	16c00215 	stw	sp,8(r2)
  80057c:	e13fe904 	addi	r4,fp,-92
  800580:	08038440 	call	803844 <_Unwind_SjLj_Register>
	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  800584:	00bfffc4 	movi	r2,-1
  800588:	e0bfea15 	stw	r2,-88(fp)
  80058c:	01000704 	movi	r4,28
  800590:	08031dc0 	call	8031dc <_Znwm>
  800594:	e0bffd15 	stw	r2,-12(fp)
  800598:	00801004 	movi	r2,64
  80059c:	d8800015 	stw	r2,0(sp)
  8005a0:	008000c4 	movi	r2,3
  8005a4:	e0bfea15 	stw	r2,-88(fp)
  8005a8:	e13ffd17 	ldw	r4,-12(fp)
  8005ac:	01404074 	movhi	r5,257
  8005b0:	29641004 	addi	r5,r5,-28608
  8005b4:	01800044 	movi	r6,1
  8005b8:	01c01004 	movi	r7,64
  8005bc:	080143c0 	call	80143c <_ZN4UARTC1Emmjj>
  8005c0:	e0bfe817 	ldw	r2,-96(fp)
  8005c4:	e0fffd17 	ldw	r3,-12(fp)
  8005c8:	10c00215 	stw	r3,8(r2)
	_uart->buffer_printf("Init UART ok\r\n");
  8005cc:	e0bfe817 	ldw	r2,-96(fp)
  8005d0:	11000217 	ldw	r4,8(r2)
  8005d4:	00bfffc4 	movi	r2,-1
  8005d8:	e0bfea15 	stw	r2,-88(fp)
  8005dc:	01402074 	movhi	r5,129
  8005e0:	29447204 	addi	r5,r5,4552
  8005e4:	0800ee80 	call	800ee8 <_ZN4UART13buffer_printfEPKcz>
	this->_spi = new SPI(SPI_BASE);
  8005e8:	01000204 	movi	r4,8
  8005ec:	08031dc0 	call	8031dc <_Znwm>
  8005f0:	e0bffc15 	stw	r2,-16(fp)
  8005f4:	00800084 	movi	r2,2
  8005f8:	e0bfea15 	stw	r2,-88(fp)
  8005fc:	e13ffc17 	ldw	r4,-16(fp)
  800600:	01404074 	movhi	r5,257
  800604:	29641804 	addi	r5,r5,-28576
  800608:	0800b580 	call	800b58 <_ZN3SPIC1Em>
  80060c:	00000a06 	br	800638 <_ZN3FSM5_initEv+0x124>
  800610:	e0bffe17 	ldw	r2,-8(fp)
  800614:	e0bff815 	stw	r2,-32(fp)
			break;
	}
}

void FSM::_init(void) {
	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  800618:	e13ffd17 	ldw	r4,-12(fp)
  80061c:	08021400 	call	802140 <_ZdlPv>
  800620:	e0fff817 	ldw	r3,-32(fp)
  800624:	e0fffe15 	stw	r3,-8(fp)
  800628:	00bfffc4 	movi	r2,-1
  80062c:	e0bfea15 	stw	r2,-88(fp)
  800630:	e13ffe17 	ldw	r4,-8(fp)
  800634:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
	_uart->buffer_printf("Init UART ok\r\n");
	this->_spi = new SPI(SPI_BASE);
  800638:	e0bfe817 	ldw	r2,-96(fp)
  80063c:	e0fffc17 	ldw	r3,-16(fp)
  800640:	10c00315 	stw	r3,12(r2)
	_uart->buffer_printf("Init SPI ok\r\n");
  800644:	e0bfe817 	ldw	r2,-96(fp)
  800648:	11000217 	ldw	r4,8(r2)
  80064c:	00bfffc4 	movi	r2,-1
  800650:	e0bfea15 	stw	r2,-88(fp)
  800654:	01402074 	movhi	r5,129
  800658:	29447604 	addi	r5,r5,4568
  80065c:	0800ee80 	call	800ee8 <_ZN4UART13buffer_printfEPKcz>
	_uart->buffer_printf("reg(78)=%d\r\n", _spi->readCMVRegister(78));
  800660:	e0bfe817 	ldw	r2,-96(fp)
  800664:	10800217 	ldw	r2,8(r2)
  800668:	e0bffb15 	stw	r2,-20(fp)
  80066c:	e0bfe817 	ldw	r2,-96(fp)
  800670:	11000317 	ldw	r4,12(r2)
  800674:	01401384 	movi	r5,78
  800678:	0800b980 	call	800b98 <_ZN3SPI15readCMVRegisterEh>
  80067c:	11803fcc 	andi	r6,r2,255
  800680:	e13ffb17 	ldw	r4,-20(fp)
  800684:	01402074 	movhi	r5,129
  800688:	29447a04 	addi	r5,r5,4584
  80068c:	0800ee80 	call	800ee8 <_ZN4UART13buffer_printfEPKcz>

	PIO* test= new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  800690:	01000504 	movi	r4,20
  800694:	08031dc0 	call	8031dc <_Znwm>
  800698:	e0bffa15 	stw	r2,-24(fp)
  80069c:	00800044 	movi	r2,1
  8006a0:	e0bfea15 	stw	r2,-88(fp)
  8006a4:	e13ffa17 	ldw	r4,-24(fp)
  8006a8:	01404074 	movhi	r5,257
  8006ac:	29642404 	addi	r5,r5,-28528
  8006b0:	01800804 	movi	r6,32
  8006b4:	000f883a 	mov	r7,zero
  8006b8:	08009300 	call	800930 <_ZN3PIOC1EmhNS_4ModeE>
  8006bc:	00000a06 	br	8006e8 <_ZN3FSM5_initEv+0x1d4>
  8006c0:	e0bffe17 	ldw	r2,-8(fp)
  8006c4:	e0bff715 	stw	r2,-36(fp)
}

void FSM::_init(void) {
	this->_uart = new UART(UART_BASE, UART_IRQ, 64, 64);
	_uart->buffer_printf("Init UART ok\r\n");
	this->_spi = new SPI(SPI_BASE);
  8006c8:	e13ffc17 	ldw	r4,-16(fp)
  8006cc:	08021400 	call	802140 <_ZdlPv>
  8006d0:	e0fff717 	ldw	r3,-36(fp)
  8006d4:	e0fffe15 	stw	r3,-8(fp)
  8006d8:	00bfffc4 	movi	r2,-1
  8006dc:	e0bfea15 	stw	r2,-88(fp)
  8006e0:	e13ffe17 	ldw	r4,-8(fp)
  8006e4:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->buffer_printf("reg(78)=%d\r\n", _spi->readCMVRegister(78));

	PIO* test= new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  8006e8:	e0bffa17 	ldw	r2,-24(fp)
  8006ec:	e0bfe715 	stw	r2,-100(fp)

	;
	_uart->buffer_printf("pio = %8x\r\n", test->getValue());
  8006f0:	e0bfe817 	ldw	r2,-96(fp)
  8006f4:	10800217 	ldw	r2,8(r2)
  8006f8:	e0bff915 	stw	r2,-28(fp)
  8006fc:	00bfffc4 	movi	r2,-1
  800700:	e0bfea15 	stw	r2,-88(fp)
  800704:	e13fe717 	ldw	r4,-100(fp)
  800708:	08008780 	call	800878 <_ZN3PIO8getValueEv>
  80070c:	100d883a 	mov	r6,r2
  800710:	e13ff917 	ldw	r4,-28(fp)
  800714:	01402074 	movhi	r5,129
  800718:	29447e04 	addi	r5,r5,4600
  80071c:	0800ee80 	call	800ee8 <_ZN4UART13buffer_printfEPKcz>

	_uart->sendAll();
  800720:	e0bfe817 	ldw	r2,-96(fp)
  800724:	11000217 	ldw	r4,8(r2)
  800728:	080115c0 	call	80115c <_ZN4UART7sendAllEv>
}
  80072c:	00001506 	br	800784 <_ZN3FSM5_initEv+0x270>
  800730:	e7001904 	addi	fp,fp,100
  800734:	e0ffea17 	ldw	r3,-88(fp)
  800738:	e0ffff15 	stw	r3,-4(fp)
  80073c:	e0bfeb17 	ldw	r2,-84(fp)
  800740:	e0bffe15 	stw	r2,-8(fp)
  800744:	e0ffff17 	ldw	r3,-4(fp)
  800748:	18800060 	cmpeqi	r2,r3,1
  80074c:	103fdc1e 	bne	r2,zero,8006c0 <_ZN3FSM5_initEv+0x1ac>
  800750:	e0ffff17 	ldw	r3,-4(fp)
  800754:	188000a0 	cmpeqi	r2,r3,2
  800758:	103fad1e 	bne	r2,zero,800610 <_ZN3FSM5_initEv+0xfc>
  80075c:	e0bffe17 	ldw	r2,-8(fp)
  800760:	e0bff615 	stw	r2,-40(fp)
	_uart->buffer_printf("Init UART ok\r\n");
	this->_spi = new SPI(SPI_BASE);
	_uart->buffer_printf("Init SPI ok\r\n");
	_uart->buffer_printf("reg(78)=%d\r\n", _spi->readCMVRegister(78));

	PIO* test= new PIO(DATA_LVDS_IN_BASE, DATA_LVDS_IN_DATA_WIDTH, PIO::INPUT);
  800764:	e13ffa17 	ldw	r4,-24(fp)
  800768:	08021400 	call	802140 <_ZdlPv>
  80076c:	e0fff617 	ldw	r3,-40(fp)
  800770:	e0fffe15 	stw	r3,-8(fp)
  800774:	00bfffc4 	movi	r2,-1
  800778:	e0bfea15 	stw	r2,-88(fp)
  80077c:	e13ffe17 	ldw	r4,-8(fp)
  800780:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  800784:	e13fe904 	addi	r4,fp,-92
  800788:	08038540 	call	803854 <_Unwind_SjLj_Unregister>

	;
	_uart->buffer_printf("pio = %8x\r\n", test->getValue());

	_uart->sendAll();
}
  80078c:	e037883a 	mov	sp,fp
  800790:	dfc00917 	ldw	ra,36(sp)
  800794:	df000817 	ldw	fp,32(sp)
  800798:	ddc00717 	ldw	r23,28(sp)
  80079c:	dd800617 	ldw	r22,24(sp)
  8007a0:	dd400517 	ldw	r21,20(sp)
  8007a4:	dd000417 	ldw	r20,16(sp)
  8007a8:	dcc00317 	ldw	r19,12(sp)
  8007ac:	dc800217 	ldw	r18,8(sp)
  8007b0:	dc400117 	ldw	r17,4(sp)
  8007b4:	dc000017 	ldw	r16,0(sp)
  8007b8:	dec00a04 	addi	sp,sp,40
  8007bc:	f800283a 	ret

008007c0 <_ZN3FSM6actionEv>:

FSM::~FSM() {
	_unset();
}

void FSM::action(void) {
  8007c0:	defffc04 	addi	sp,sp,-16
  8007c4:	dfc00315 	stw	ra,12(sp)
  8007c8:	df000215 	stw	fp,8(sp)
  8007cc:	df000204 	addi	fp,sp,8
  8007d0:	e13ffe15 	stw	r4,-8(fp)

	switch (_current_state) {
  8007d4:	e0bffe17 	ldw	r2,-8(fp)
  8007d8:	10800117 	ldw	r2,4(r2)
  8007dc:	e0bfff15 	stw	r2,-4(fp)
  8007e0:	e0ffff17 	ldw	r3,-4(fp)
  8007e4:	18800228 	cmpgeui	r2,r3,8
  8007e8:	1000161e 	bne	r2,zero,800844 <_ZN3FSM6actionEv+0x84>
  8007ec:	e13fff17 	ldw	r4,-4(fp)
  8007f0:	e13fff17 	ldw	r4,-4(fp)
  8007f4:	2105883a 	add	r2,r4,r4
  8007f8:	1087883a 	add	r3,r2,r2
  8007fc:	00802034 	movhi	r2,128
  800800:	10820404 	addi	r2,r2,2064
  800804:	1885883a 	add	r2,r3,r2
  800808:	10800017 	ldw	r2,0(r2)
  80080c:	1000683a 	jmp	r2
  800810:	00800830 	cmpltui	r2,zero,32
  800814:	0080083c 	xorhi	r2,zero,32
  800818:	00800844 	movi	r2,33
  80081c:	00800844 	movi	r2,33
  800820:	00800844 	movi	r2,33
  800824:	00800844 	movi	r2,33
  800828:	00800844 	movi	r2,33
  80082c:	00800844 	movi	r2,33

		case init:
			_init();
  800830:	e13ffe17 	ldw	r4,-8(fp)
  800834:	08005140 	call	800514 <_ZN3FSM5_initEv>
			break;
  800838:	00000206 	br	800844 <_ZN3FSM6actionEv+0x84>
			break;
		case spi_read_all:

			break;
		case unset:
			_unset();
  80083c:	e13ffe17 	ldw	r4,-8(fp)
  800840:	08002e40 	call	8002e4 <_ZN3FSM6_unsetEv>
			break;
	}
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <_ZN3PIO8init_irqEv>:

PIO::~PIO() {
	// TODO Auto-generated destructor stub
}

void PIO::init_irq( void ) { }
  800858:	defffe04 	addi	sp,sp,-8
  80085c:	df000115 	stw	fp,4(sp)
  800860:	df000104 	addi	fp,sp,4
  800864:	e13fff15 	stw	r4,-4(fp)
  800868:	e037883a 	mov	sp,fp
  80086c:	df000017 	ldw	fp,0(sp)
  800870:	dec00104 	addi	sp,sp,4
  800874:	f800283a 	ret

00800878 <_ZN3PIO8getValueEv>:

unsigned int PIO::getValue() {
  800878:	defffe04 	addi	sp,sp,-8
  80087c:	df000115 	stw	fp,4(sp)
  800880:	df000104 	addi	fp,sp,4
  800884:	e13fff15 	stw	r4,-4(fp)
	return IORD_ALTERA_AVALON_PIO_DATA(_base_address);
  800888:	e0bfff17 	ldw	r2,-4(fp)
  80088c:	10800217 	ldw	r2,8(r2)
  800890:	10800037 	ldwio	r2,0(r2)
}
  800894:	e037883a 	mov	sp,fp
  800898:	df000017 	ldw	fp,0(sp)
  80089c:	dec00104 	addi	sp,sp,4
  8008a0:	f800283a 	ret

008008a4 <_ZN3PIO8setValueEj>:

void PIO::setValue(unsigned int val) {
  8008a4:	defffc04 	addi	sp,sp,-16
  8008a8:	dfc00315 	stw	ra,12(sp)
  8008ac:	df000215 	stw	fp,8(sp)
  8008b0:	df000204 	addi	fp,sp,8
  8008b4:	e13ffe15 	stw	r4,-8(fp)
  8008b8:	e17fff15 	stw	r5,-4(fp)
	if (_mode == PIO::INPUT) throw("PIO is input");
  8008bc:	e0bffe17 	ldw	r2,-8(fp)
  8008c0:	10800317 	ldw	r2,12(r2)
  8008c4:	1004c03a 	cmpne	r2,r2,zero
  8008c8:	10000b1e 	bne	r2,zero,8008f8 <_ZN3PIO8setValueEj+0x54>
  8008cc:	01000104 	movi	r4,4
  8008d0:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  8008d4:	1009883a 	mov	r4,r2
  8008d8:	2007883a 	mov	r3,r4
  8008dc:	00802074 	movhi	r2,129
  8008e0:	10848504 	addi	r2,r2,4628
  8008e4:	18800015 	stw	r2,0(r3)
  8008e8:	01402074 	movhi	r5,129
  8008ec:	29456304 	addi	r5,r5,5516
  8008f0:	000d883a 	mov	r6,zero
  8008f4:	0801de80 	call	801de8 <__cxa_throw>
	IOWR_ALTERA_AVALON_PIO_DATA(_base_address, val);
  8008f8:	e0bffe17 	ldw	r2,-8(fp)
  8008fc:	10800217 	ldw	r2,8(r2)
  800900:	e0ffff17 	ldw	r3,-4(fp)
  800904:	10c00035 	stwio	r3,0(r2)
	_value= this->getValue();
  800908:	e13ffe17 	ldw	r4,-8(fp)
  80090c:	08008780 	call	800878 <_ZN3PIO8getValueEv>
  800910:	1007883a 	mov	r3,r2
  800914:	e0bffe17 	ldw	r2,-8(fp)
  800918:	10c00415 	stw	r3,16(r2)
}
  80091c:	e037883a 	mov	sp,fp
  800920:	dfc00117 	ldw	ra,4(sp)
  800924:	df000017 	ldw	fp,0(sp)
  800928:	dec00204 	addi	sp,sp,8
  80092c:	f800283a 	ret

00800930 <_ZN3PIOC1EmhNS_4ModeE>:

#include "PIO.h"
#include "altera_avalon_pio_regs.h"


PIO::PIO(const unsigned long base_address, const unsigned char width, Mode mode )
  800930:	defffa04 	addi	sp,sp,-24
  800934:	dfc00515 	stw	ra,20(sp)
  800938:	df000415 	stw	fp,16(sp)
  80093c:	df000404 	addi	fp,sp,16
  800940:	e13ffc15 	stw	r4,-16(fp)
  800944:	e17ffd15 	stw	r5,-12(fp)
  800948:	e1ffff15 	stw	r7,-4(fp)
  80094c:	e1bffe05 	stb	r6,-8(fp)
	:  _base_address( base_address ), _width( width ), _mode(mode)
  800950:	00c02074 	movhi	r3,129
  800954:	18c48b04 	addi	r3,r3,4652
  800958:	e0bffc17 	ldw	r2,-16(fp)
  80095c:	10c00015 	stw	r3,0(r2)
  800960:	e0fffc17 	ldw	r3,-16(fp)
  800964:	e0bffe03 	ldbu	r2,-8(fp)
  800968:	18800105 	stb	r2,4(r3)
  80096c:	e0fffc17 	ldw	r3,-16(fp)
  800970:	e0bffd17 	ldw	r2,-12(fp)
  800974:	18800215 	stw	r2,8(r3)
  800978:	e0fffc17 	ldw	r3,-16(fp)
  80097c:	e0bfff17 	ldw	r2,-4(fp)
  800980:	18800315 	stw	r2,12(r3)
{
	_value= this->getValue();
  800984:	e13ffc17 	ldw	r4,-16(fp)
  800988:	08008780 	call	800878 <_ZN3PIO8getValueEv>
  80098c:	1007883a 	mov	r3,r2
  800990:	e0bffc17 	ldw	r2,-16(fp)
  800994:	10c00415 	stw	r3,16(r2)
}
  800998:	e037883a 	mov	sp,fp
  80099c:	dfc00117 	ldw	ra,4(sp)
  8009a0:	df000017 	ldw	fp,0(sp)
  8009a4:	dec00204 	addi	sp,sp,8
  8009a8:	f800283a 	ret

008009ac <_ZN3PIOC2EmhNS_4ModeE>:

#include "PIO.h"
#include "altera_avalon_pio_regs.h"


PIO::PIO(const unsigned long base_address, const unsigned char width, Mode mode )
  8009ac:	defffa04 	addi	sp,sp,-24
  8009b0:	dfc00515 	stw	ra,20(sp)
  8009b4:	df000415 	stw	fp,16(sp)
  8009b8:	df000404 	addi	fp,sp,16
  8009bc:	e13ffc15 	stw	r4,-16(fp)
  8009c0:	e17ffd15 	stw	r5,-12(fp)
  8009c4:	e1ffff15 	stw	r7,-4(fp)
  8009c8:	e1bffe05 	stb	r6,-8(fp)
	:  _base_address( base_address ), _width( width ), _mode(mode)
  8009cc:	00c02074 	movhi	r3,129
  8009d0:	18c48b04 	addi	r3,r3,4652
  8009d4:	e0bffc17 	ldw	r2,-16(fp)
  8009d8:	10c00015 	stw	r3,0(r2)
  8009dc:	e0fffc17 	ldw	r3,-16(fp)
  8009e0:	e0bffe03 	ldbu	r2,-8(fp)
  8009e4:	18800105 	stb	r2,4(r3)
  8009e8:	e0fffc17 	ldw	r3,-16(fp)
  8009ec:	e0bffd17 	ldw	r2,-12(fp)
  8009f0:	18800215 	stw	r2,8(r3)
  8009f4:	e0fffc17 	ldw	r3,-16(fp)
  8009f8:	e0bfff17 	ldw	r2,-4(fp)
  8009fc:	18800315 	stw	r2,12(r3)
{
	_value= this->getValue();
  800a00:	e13ffc17 	ldw	r4,-16(fp)
  800a04:	08008780 	call	800878 <_ZN3PIO8getValueEv>
  800a08:	1007883a 	mov	r3,r2
  800a0c:	e0bffc17 	ldw	r2,-16(fp)
  800a10:	10c00415 	stw	r3,16(r2)
}
  800a14:	e037883a 	mov	sp,fp
  800a18:	dfc00117 	ldw	ra,4(sp)
  800a1c:	df000017 	ldw	fp,0(sp)
  800a20:	dec00204 	addi	sp,sp,8
  800a24:	f800283a 	ret

00800a28 <_ZN3PIOD0Ev>:

PIO::~PIO() {
  800a28:	defffd04 	addi	sp,sp,-12
  800a2c:	dfc00215 	stw	ra,8(sp)
  800a30:	df000115 	stw	fp,4(sp)
  800a34:	df000104 	addi	fp,sp,4
  800a38:	e13fff15 	stw	r4,-4(fp)
  800a3c:	00c02074 	movhi	r3,129
  800a40:	18c48b04 	addi	r3,r3,4652
  800a44:	e0bfff17 	ldw	r2,-4(fp)
  800a48:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
  800a4c:	00800044 	movi	r2,1
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1005003a 	cmpeq	r2,r2,zero
  800a58:	1000021e 	bne	r2,zero,800a64 <_ZN3PIOD0Ev+0x3c>
  800a5c:	e13fff17 	ldw	r4,-4(fp)
  800a60:	08021400 	call	802140 <_ZdlPv>
  800a64:	e037883a 	mov	sp,fp
  800a68:	dfc00117 	ldw	ra,4(sp)
  800a6c:	df000017 	ldw	fp,0(sp)
  800a70:	dec00204 	addi	sp,sp,8
  800a74:	f800283a 	ret

00800a78 <_ZN3PIOD1Ev>:
	:  _base_address( base_address ), _width( width ), _mode(mode)
{
	_value= this->getValue();
}

PIO::~PIO() {
  800a78:	defffd04 	addi	sp,sp,-12
  800a7c:	dfc00215 	stw	ra,8(sp)
  800a80:	df000115 	stw	fp,4(sp)
  800a84:	df000104 	addi	fp,sp,4
  800a88:	e13fff15 	stw	r4,-4(fp)
  800a8c:	00c02074 	movhi	r3,129
  800a90:	18c48b04 	addi	r3,r3,4652
  800a94:	e0bfff17 	ldw	r2,-4(fp)
  800a98:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
  800a9c:	0005883a 	mov	r2,zero
  800aa0:	10803fcc 	andi	r2,r2,255
  800aa4:	1005003a 	cmpeq	r2,r2,zero
  800aa8:	1000021e 	bne	r2,zero,800ab4 <_ZN3PIOD1Ev+0x3c>
  800aac:	e13fff17 	ldw	r4,-4(fp)
  800ab0:	08021400 	call	802140 <_ZdlPv>
  800ab4:	e037883a 	mov	sp,fp
  800ab8:	dfc00117 	ldw	ra,4(sp)
  800abc:	df000017 	ldw	fp,0(sp)
  800ac0:	dec00204 	addi	sp,sp,8
  800ac4:	f800283a 	ret

00800ac8 <_ZN3PIOD2Ev>:
	:  _base_address( base_address ), _width( width ), _mode(mode)
{
	_value= this->getValue();
}

PIO::~PIO() {
  800ac8:	defffd04 	addi	sp,sp,-12
  800acc:	dfc00215 	stw	ra,8(sp)
  800ad0:	df000115 	stw	fp,4(sp)
  800ad4:	df000104 	addi	fp,sp,4
  800ad8:	e13fff15 	stw	r4,-4(fp)
  800adc:	00c02074 	movhi	r3,129
  800ae0:	18c48b04 	addi	r3,r3,4652
  800ae4:	e0bfff17 	ldw	r2,-4(fp)
  800ae8:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
  800aec:	0005883a 	mov	r2,zero
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	1005003a 	cmpeq	r2,r2,zero
  800af8:	1000021e 	bne	r2,zero,800b04 <_ZN3PIOD2Ev+0x3c>
  800afc:	e13fff17 	ldw	r4,-4(fp)
  800b00:	08021400 	call	802140 <_ZdlPv>
  800b04:	e037883a 	mov	sp,fp
  800b08:	dfc00117 	ldw	ra,4(sp)
  800b0c:	df000017 	ldw	fp,0(sp)
  800b10:	dec00204 	addi	sp,sp,8
  800b14:	f800283a 	ret

00800b18 <_ZN3SPIC2Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  800b18:	defffd04 	addi	sp,sp,-12
  800b1c:	df000215 	stw	fp,8(sp)
  800b20:	df000204 	addi	fp,sp,8
  800b24:	e13ffe15 	stw	r4,-8(fp)
  800b28:	e17fff15 	stw	r5,-4(fp)
  800b2c:	00c02074 	movhi	r3,129
  800b30:	18c49004 	addi	r3,r3,4672
  800b34:	e0bffe17 	ldw	r2,-8(fp)
  800b38:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  800b3c:	e0fffe17 	ldw	r3,-8(fp)
  800b40:	e0bfff17 	ldw	r2,-4(fp)
  800b44:	18800115 	stw	r2,4(r3)
}
  800b48:	e037883a 	mov	sp,fp
  800b4c:	df000017 	ldw	fp,0(sp)
  800b50:	dec00104 	addi	sp,sp,4
  800b54:	f800283a 	ret

00800b58 <_ZN3SPIC1Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  800b58:	defffd04 	addi	sp,sp,-12
  800b5c:	df000215 	stw	fp,8(sp)
  800b60:	df000204 	addi	fp,sp,8
  800b64:	e13ffe15 	stw	r4,-8(fp)
  800b68:	e17fff15 	stw	r5,-4(fp)
  800b6c:	00c02074 	movhi	r3,129
  800b70:	18c49004 	addi	r3,r3,4672
  800b74:	e0bffe17 	ldw	r2,-8(fp)
  800b78:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  800b7c:	e0fffe17 	ldw	r3,-8(fp)
  800b80:	e0bfff17 	ldw	r2,-4(fp)
  800b84:	18800115 	stw	r2,4(r3)
}
  800b88:	e037883a 	mov	sp,fp
  800b8c:	df000017 	ldw	fp,0(sp)
  800b90:	dec00104 	addi	sp,sp,4
  800b94:	f800283a 	ret

00800b98 <_ZN3SPI15readCMVRegisterEh>:

SPI::~SPI(){}


unsigned char SPI::readCMVRegister(unsigned char address) {
  800b98:	defff804 	addi	sp,sp,-32
  800b9c:	dfc00715 	stw	ra,28(sp)
  800ba0:	df000615 	stw	fp,24(sp)
  800ba4:	df000604 	addi	fp,sp,24
  800ba8:	e13ffe15 	stw	r4,-8(fp)
  800bac:	e17fff05 	stb	r5,-4(fp)

  unsigned char write_data[1];
  unsigned char read_data[1];

  write_data[0]= address & 0x7F;
  800bb0:	e0bfff03 	ldbu	r2,-4(fp)
  800bb4:	10801fcc 	andi	r2,r2,127
  800bb8:	e0bffd05 	stb	r2,-12(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 1, write_data, 1, read_data, 0x00);
  800bbc:	e0bffe17 	ldw	r2,-8(fp)
  800bc0:	11000117 	ldw	r4,4(r2)
  800bc4:	00800044 	movi	r2,1
  800bc8:	d8800015 	stw	r2,0(sp)
  800bcc:	e0bffd44 	addi	r2,fp,-11
  800bd0:	d8800115 	stw	r2,4(sp)
  800bd4:	d8000215 	stw	zero,8(sp)
  800bd8:	000b883a 	mov	r5,zero
  800bdc:	01800044 	movi	r6,1
  800be0:	e1fffd04 	addi	r7,fp,-12
  800be4:	080f2640 	call	80f264 <alt_avalon_spi_command>

	return read_data[0];
  800be8:	e0bffd43 	ldbu	r2,-11(fp)
  800bec:	10803fcc 	andi	r2,r2,255
}
  800bf0:	e037883a 	mov	sp,fp
  800bf4:	dfc00117 	ldw	ra,4(sp)
  800bf8:	df000017 	ldw	fp,0(sp)
  800bfc:	dec00204 	addi	sp,sp,8
  800c00:	f800283a 	ret

00800c04 <_ZN3SPI16writeCMVRegisterEhh>:

bool SPI::writeCMVRegister(unsigned char address, unsigned char value)
  800c04:	defff704 	addi	sp,sp,-36
  800c08:	dfc00815 	stw	ra,32(sp)
  800c0c:	df000715 	stw	fp,28(sp)
  800c10:	df000704 	addi	fp,sp,28
  800c14:	e13ffd15 	stw	r4,-12(fp)
  800c18:	e17ffe05 	stb	r5,-8(fp)
  800c1c:	e1bfff05 	stb	r6,-4(fp)
{
  unsigned char write_data[2];
  write_data[0]= address | 0x80;
  800c20:	e0fffe03 	ldbu	r3,-8(fp)
  800c24:	00bfe004 	movi	r2,-128
  800c28:	1884b03a 	or	r2,r3,r2
  800c2c:	e0bffc05 	stb	r2,-16(fp)
  write_data[1]= value;
  800c30:	e0bfff03 	ldbu	r2,-4(fp)
  800c34:	e0bffc45 	stb	r2,-15(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 2, write_data, 0, 0x00, 0x00);
  800c38:	e0bffd17 	ldw	r2,-12(fp)
  800c3c:	11000117 	ldw	r4,4(r2)
  800c40:	d8000015 	stw	zero,0(sp)
  800c44:	d8000115 	stw	zero,4(sp)
  800c48:	d8000215 	stw	zero,8(sp)
  800c4c:	000b883a 	mov	r5,zero
  800c50:	01800084 	movi	r6,2
  800c54:	e1fffc04 	addi	r7,fp,-16
  800c58:	080f2640 	call	80f264 <alt_avalon_spi_command>

	return (value == this->readCMVRegister(address));
  800c5c:	e17ffe03 	ldbu	r5,-8(fp)
  800c60:	e13ffd17 	ldw	r4,-12(fp)
  800c64:	0800b980 	call	800b98 <_ZN3SPI15readCMVRegisterEh>
  800c68:	10c03fcc 	andi	r3,r2,255
  800c6c:	e0bfff03 	ldbu	r2,-4(fp)
  800c70:	1885003a 	cmpeq	r2,r3,r2
}
  800c74:	e037883a 	mov	sp,fp
  800c78:	dfc00117 	ldw	ra,4(sp)
  800c7c:	df000017 	ldw	fp,0(sp)
  800c80:	dec00204 	addi	sp,sp,8
  800c84:	f800283a 	ret

00800c88 <_ZN3SPID0Ev>:

SPI::SPI(unsigned long base_address){
	_base_address= base_address;
}

SPI::~SPI(){}
  800c88:	defffd04 	addi	sp,sp,-12
  800c8c:	dfc00215 	stw	ra,8(sp)
  800c90:	df000115 	stw	fp,4(sp)
  800c94:	df000104 	addi	fp,sp,4
  800c98:	e13fff15 	stw	r4,-4(fp)
  800c9c:	00c02074 	movhi	r3,129
  800ca0:	18c49004 	addi	r3,r3,4672
  800ca4:	e0bfff17 	ldw	r2,-4(fp)
  800ca8:	10c00015 	stw	r3,0(r2)
  800cac:	00800044 	movi	r2,1
  800cb0:	10803fcc 	andi	r2,r2,255
  800cb4:	1005003a 	cmpeq	r2,r2,zero
  800cb8:	1000021e 	bne	r2,zero,800cc4 <_ZN3SPID0Ev+0x3c>
  800cbc:	e13fff17 	ldw	r4,-4(fp)
  800cc0:	08021400 	call	802140 <_ZdlPv>
  800cc4:	e037883a 	mov	sp,fp
  800cc8:	dfc00117 	ldw	ra,4(sp)
  800ccc:	df000017 	ldw	fp,0(sp)
  800cd0:	dec00204 	addi	sp,sp,8
  800cd4:	f800283a 	ret

00800cd8 <_ZN3SPID1Ev>:
  800cd8:	defffd04 	addi	sp,sp,-12
  800cdc:	dfc00215 	stw	ra,8(sp)
  800ce0:	df000115 	stw	fp,4(sp)
  800ce4:	df000104 	addi	fp,sp,4
  800ce8:	e13fff15 	stw	r4,-4(fp)
  800cec:	00c02074 	movhi	r3,129
  800cf0:	18c49004 	addi	r3,r3,4672
  800cf4:	e0bfff17 	ldw	r2,-4(fp)
  800cf8:	10c00015 	stw	r3,0(r2)
  800cfc:	0005883a 	mov	r2,zero
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1005003a 	cmpeq	r2,r2,zero
  800d08:	1000021e 	bne	r2,zero,800d14 <_ZN3SPID1Ev+0x3c>
  800d0c:	e13fff17 	ldw	r4,-4(fp)
  800d10:	08021400 	call	802140 <_ZdlPv>
  800d14:	e037883a 	mov	sp,fp
  800d18:	dfc00117 	ldw	ra,4(sp)
  800d1c:	df000017 	ldw	fp,0(sp)
  800d20:	dec00204 	addi	sp,sp,8
  800d24:	f800283a 	ret

00800d28 <_ZN3SPID2Ev>:
  800d28:	defffd04 	addi	sp,sp,-12
  800d2c:	dfc00215 	stw	ra,8(sp)
  800d30:	df000115 	stw	fp,4(sp)
  800d34:	df000104 	addi	fp,sp,4
  800d38:	e13fff15 	stw	r4,-4(fp)
  800d3c:	00c02074 	movhi	r3,129
  800d40:	18c49004 	addi	r3,r3,4672
  800d44:	e0bfff17 	ldw	r2,-4(fp)
  800d48:	10c00015 	stw	r3,0(r2)
  800d4c:	0005883a 	mov	r2,zero
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1005003a 	cmpeq	r2,r2,zero
  800d58:	1000021e 	bne	r2,zero,800d64 <_ZN3SPID2Ev+0x3c>
  800d5c:	e13fff17 	ldw	r4,-4(fp)
  800d60:	08021400 	call	802140 <_ZdlPv>
  800d64:	e037883a 	mov	sp,fp
  800d68:	dfc00117 	ldw	ra,4(sp)
  800d6c:	df000017 	ldw	fp,0(sp)
  800d70:	dec00204 	addi	sp,sp,8
  800d74:	f800283a 	ret

00800d78 <_ZN4UART17outBuffer_isEmptyEv>:

bool UART::inBuffer_isEmpty(void) {
	return _in_buffer->isEmpty();
}

bool UART::outBuffer_isEmpty(void) {
  800d78:	defffd04 	addi	sp,sp,-12
  800d7c:	dfc00215 	stw	ra,8(sp)
  800d80:	df000115 	stw	fp,4(sp)
  800d84:	df000104 	addi	fp,sp,4
  800d88:	e13fff15 	stw	r4,-4(fp)
	return _out_buffer->isEmpty();
  800d8c:	e0bfff17 	ldw	r2,-4(fp)
  800d90:	11000217 	ldw	r4,8(r2)
  800d94:	080187c0 	call	80187c <_ZN4FIFOIcE7isEmptyEv>
  800d98:	10803fcc 	andi	r2,r2,255
}
  800d9c:	e037883a 	mov	sp,fp
  800da0:	dfc00117 	ldw	ra,4(sp)
  800da4:	df000017 	ldw	fp,0(sp)
  800da8:	dec00204 	addi	sp,sp,8
  800dac:	f800283a 	ret

00800db0 <_ZN4UART16inBuffer_isEmptyEv>:
	delete _in_buffer;
	delete _out_buffer;
	free(irq_context);
}

bool UART::inBuffer_isEmpty(void) {
  800db0:	defffd04 	addi	sp,sp,-12
  800db4:	dfc00215 	stw	ra,8(sp)
  800db8:	df000115 	stw	fp,4(sp)
  800dbc:	df000104 	addi	fp,sp,4
  800dc0:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->isEmpty();
  800dc4:	e0bfff17 	ldw	r2,-4(fp)
  800dc8:	11000117 	ldw	r4,4(r2)
  800dcc:	080187c0 	call	80187c <_ZN4FIFOIcE7isEmptyEv>
  800dd0:	10803fcc 	andi	r2,r2,255
}
  800dd4:	e037883a 	mov	sp,fp
  800dd8:	dfc00117 	ldw	ra,4(sp)
  800ddc:	df000017 	ldw	fp,0(sp)
  800de0:	dec00204 	addi	sp,sp,8
  800de4:	f800283a 	ret

00800de8 <_ZN4UART13buffer_putstrEPKc>:

void UART::buffer_putchar(const char character) {
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
  800de8:	defffa04 	addi	sp,sp,-24
  800dec:	dfc00515 	stw	ra,20(sp)
  800df0:	df000415 	stw	fp,16(sp)
  800df4:	df000404 	addi	fp,sp,16
  800df8:	e13ffe15 	stw	r4,-8(fp)
  800dfc:	e17fff15 	stw	r5,-4(fp)
	int len = strlen(str);
  800e00:	e13fff17 	ldw	r4,-4(fp)
  800e04:	08049640 	call	804964 <strlen>
  800e08:	e0bffd15 	stw	r2,-12(fp)
	for (int i = 0; i < len; i++)
  800e0c:	e03ffc15 	stw	zero,-16(fp)
  800e10:	00000e06 	br	800e4c <_ZN4UART13buffer_putstrEPKc+0x64>
		_out_buffer->push(str[i]);
  800e14:	e0bffe17 	ldw	r2,-8(fp)
  800e18:	11000217 	ldw	r4,8(r2)
  800e1c:	e0bffc17 	ldw	r2,-16(fp)
  800e20:	1007883a 	mov	r3,r2
  800e24:	e0bfff17 	ldw	r2,-4(fp)
  800e28:	1885883a 	add	r2,r3,r2
  800e2c:	10800003 	ldbu	r2,0(r2)
  800e30:	11403fcc 	andi	r5,r2,255
  800e34:	2940201c 	xori	r5,r5,128
  800e38:	297fe004 	addi	r5,r5,-128
  800e3c:	08019a40 	call	8019a4 <_ZN4FIFOIcE4pushEc>
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
	int len = strlen(str);
	for (int i = 0; i < len; i++)
  800e40:	e0bffc17 	ldw	r2,-16(fp)
  800e44:	10800044 	addi	r2,r2,1
  800e48:	e0bffc15 	stw	r2,-16(fp)
  800e4c:	e0fffc17 	ldw	r3,-16(fp)
  800e50:	e0bffd17 	ldw	r2,-12(fp)
  800e54:	18bfef16 	blt	r3,r2,800e14 <_ZN4UART13buffer_putstrEPKc+0x2c>
		_out_buffer->push(str[i]);
}
  800e58:	e037883a 	mov	sp,fp
  800e5c:	dfc00117 	ldw	ra,4(sp)
  800e60:	df000017 	ldw	fp,0(sp)
  800e64:	dec00204 	addi	sp,sp,8
  800e68:	f800283a 	ret

00800e6c <_ZN4UART14buffer_putcharEc>:

	for (int i = 0; i < len; i++)
		_out_buffer->push(buffer[i]);
}

void UART::buffer_putchar(const char character) {
  800e6c:	defffc04 	addi	sp,sp,-16
  800e70:	dfc00315 	stw	ra,12(sp)
  800e74:	df000215 	stw	fp,8(sp)
  800e78:	df000204 	addi	fp,sp,8
  800e7c:	e13ffe15 	stw	r4,-8(fp)
  800e80:	e17fff05 	stb	r5,-4(fp)
	_out_buffer->push(character);
  800e84:	e0bffe17 	ldw	r2,-8(fp)
  800e88:	11000217 	ldw	r4,8(r2)
  800e8c:	e17fff07 	ldb	r5,-4(fp)
  800e90:	08019a40 	call	8019a4 <_ZN4FIFOIcE4pushEc>
}
  800e94:	e037883a 	mov	sp,fp
  800e98:	dfc00117 	ldw	ra,4(sp)
  800e9c:	df000017 	ldw	fp,0(sp)
  800ea0:	dec00204 	addi	sp,sp,8
  800ea4:	f800283a 	ret

00800ea8 <_ZN4UART14buffer_getcharEv>:

bool UART::outBuffer_isEmpty(void) {
	return _out_buffer->isEmpty();
}

char UART::buffer_getchar(void) {
  800ea8:	defffd04 	addi	sp,sp,-12
  800eac:	dfc00215 	stw	ra,8(sp)
  800eb0:	df000115 	stw	fp,4(sp)
  800eb4:	df000104 	addi	fp,sp,4
  800eb8:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->pull();
  800ebc:	e0bfff17 	ldw	r2,-4(fp)
  800ec0:	11000117 	ldw	r4,4(r2)
  800ec4:	0801a6c0 	call	801a6c <_ZN4FIFOIcE4pullEv>
  800ec8:	10803fcc 	andi	r2,r2,255
  800ecc:	1080201c 	xori	r2,r2,128
  800ed0:	10bfe004 	addi	r2,r2,-128
}
  800ed4:	e037883a 	mov	sp,fp
  800ed8:	dfc00117 	ldw	ra,4(sp)
  800edc:	df000017 	ldw	fp,0(sp)
  800ee0:	dec00204 	addi	sp,sp,8
  800ee4:	f800283a 	ret

00800ee8 <_ZN4UART13buffer_printfEPKcz>:
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
	}
}

void UART::buffer_printf( const char* format, ... ) {
  800ee8:	deffdd04 	addi	sp,sp,-140
  800eec:	dfc02015 	stw	ra,128(sp)
  800ef0:	df001f15 	stw	fp,124(sp)
  800ef4:	ddc01e15 	stw	r23,120(sp)
  800ef8:	dd801d15 	stw	r22,116(sp)
  800efc:	dd401c15 	stw	r21,112(sp)
  800f00:	dd001b15 	stw	r20,108(sp)
  800f04:	dcc01a15 	stw	r19,104(sp)
  800f08:	dc801915 	stw	r18,100(sp)
  800f0c:	dc401815 	stw	r17,96(sp)
  800f10:	dc001715 	stw	r16,92(sp)
  800f14:	df001704 	addi	fp,sp,92
  800f18:	e13fed15 	stw	r4,-76(fp)
  800f1c:	e1800a15 	stw	r6,40(fp)
  800f20:	e1c00b15 	stw	r7,44(fp)
  800f24:	e17fee15 	stw	r5,-72(fp)
  800f28:	00802034 	movhi	r2,128
  800f2c:	108a1704 	addi	r2,r2,10332
  800f30:	e0bff515 	stw	r2,-44(fp)
  800f34:	00802074 	movhi	r2,129
  800f38:	10844b84 	addi	r2,r2,4398
  800f3c:	e0bff615 	stw	r2,-40(fp)
  800f40:	e0bff704 	addi	r2,fp,-36
  800f44:	e0ffe904 	addi	r3,fp,-92
  800f48:	10c00015 	stw	r3,0(r2)
  800f4c:	00c02034 	movhi	r3,128
  800f50:	18c41004 	addi	r3,r3,4160
  800f54:	10c00115 	stw	r3,4(r2)
  800f58:	16c00215 	stw	sp,8(r2)
  800f5c:	e13fef04 	addi	r4,fp,-68
  800f60:	08038440 	call	803844 <_Unwind_SjLj_Register>
  800f64:	e6ffff15 	stw	sp,-4(fp)
  800f68:	d805883a 	mov	r2,sp
  800f6c:	e0bffc15 	stw	r2,-16(fp)

  char buffer[_size_out];
  800f70:	e0bfed17 	ldw	r2,-76(fp)
  800f74:	10800517 	ldw	r2,20(r2)
  800f78:	10bfffc4 	addi	r2,r2,-1
  800f7c:	10800044 	addi	r2,r2,1
  800f80:	108000c4 	addi	r2,r2,3
  800f84:	108000c4 	addi	r2,r2,3
  800f88:	1004d0ba 	srli	r2,r2,2
  800f8c:	1085883a 	add	r2,r2,r2
  800f90:	1085883a 	add	r2,r2,r2
  800f94:	d8b7c83a 	sub	sp,sp,r2
  800f98:	e6fffd15 	stw	sp,-12(fp)
  800f9c:	e0fffd17 	ldw	r3,-12(fp)
  800fa0:	188000c4 	addi	r2,r3,3
  800fa4:	1004d0ba 	srli	r2,r2,2
  800fa8:	1085883a 	add	r2,r2,r2
  800fac:	1085883a 	add	r2,r2,r2
  800fb0:	e0bffd15 	stw	r2,-12(fp)
  800fb4:	e0bffd17 	ldw	r2,-12(fp)
  800fb8:	e0bfeb15 	stw	r2,-84(fp)
  int len;

  va_list args;
  va_start (args, format);
  800fbc:	e0800a04 	addi	r2,fp,40
  800fc0:	e0bfec15 	stw	r2,-80(fp)
  len= vsnprintf(buffer, _size_out, format, args );
  800fc4:	e13feb17 	ldw	r4,-84(fp)
  800fc8:	e0bfed17 	ldw	r2,-76(fp)
  800fcc:	11400517 	ldw	r5,20(r2)
  800fd0:	e1ffec17 	ldw	r7,-80(fp)
  800fd4:	00800044 	movi	r2,1
  800fd8:	e0bff015 	stw	r2,-64(fp)
  800fdc:	e1bfee17 	ldw	r6,-72(fp)
  800fe0:	0804a8c0 	call	804a8c <vsnprintf>
  800fe4:	e0bfea15 	stw	r2,-88(fp)
  va_end (args);

	for (int i = 0; i < len; i++)
  800fe8:	e03fe915 	stw	zero,-92(fp)
  800fec:	00000f06 	br	80102c <_ZN4UART13buffer_printfEPKcz+0x144>
		_out_buffer->push(buffer[i]);
  800ff0:	e0bfed17 	ldw	r2,-76(fp)
  800ff4:	11000217 	ldw	r4,8(r2)
  800ff8:	e0ffe917 	ldw	r3,-92(fp)
  800ffc:	e0bfeb17 	ldw	r2,-84(fp)
  801000:	10c5883a 	add	r2,r2,r3
  801004:	10800003 	ldbu	r2,0(r2)
  801008:	11403fcc 	andi	r5,r2,255
  80100c:	2940201c 	xori	r5,r5,128
  801010:	297fe004 	addi	r5,r5,-128
  801014:	00800044 	movi	r2,1
  801018:	e0bff015 	stw	r2,-64(fp)
  80101c:	08019a40 	call	8019a4 <_ZN4FIFOIcE4pushEc>
  va_list args;
  va_start (args, format);
  len= vsnprintf(buffer, _size_out, format, args );
  va_end (args);

	for (int i = 0; i < len; i++)
  801020:	e0bfe917 	ldw	r2,-92(fp)
  801024:	10800044 	addi	r2,r2,1
  801028:	e0bfe915 	stw	r2,-92(fp)
  80102c:	e0ffe917 	ldw	r3,-92(fp)
  801030:	e0bfea17 	ldw	r2,-88(fp)
  801034:	18bfee16 	blt	r3,r2,800ff0 <_ZN4UART13buffer_printfEPKcz+0x108>
  801038:	e6fffc17 	ldw	sp,-16(fp)
		_out_buffer->push(buffer[i]);
}
  80103c:	00000a06 	br	801068 <_ZN4UART13buffer_printfEPKcz+0x180>
  801040:	e7001704 	addi	fp,fp,92
  801044:	e0fff117 	ldw	r3,-60(fp)
  801048:	e0fffe15 	stw	r3,-8(fp)
  80104c:	e0bffe17 	ldw	r2,-8(fp)
  801050:	e6fffc17 	ldw	sp,-16(fp)
  801054:	e0bffe15 	stw	r2,-8(fp)
  801058:	00bfffc4 	movi	r2,-1
  80105c:	e0bff015 	stw	r2,-64(fp)
  801060:	e13ffe17 	ldw	r4,-8(fp)
  801064:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  801068:	e6ffff17 	ldw	sp,-4(fp)
  80106c:	e13fef04 	addi	r4,fp,-68
  801070:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  801074:	e037883a 	mov	sp,fp
  801078:	dfc00917 	ldw	ra,36(sp)
  80107c:	df000817 	ldw	fp,32(sp)
  801080:	ddc00717 	ldw	r23,28(sp)
  801084:	dd800617 	ldw	r22,24(sp)
  801088:	dd400517 	ldw	r21,20(sp)
  80108c:	dd000417 	ldw	r20,16(sp)
  801090:	dcc00317 	ldw	r19,12(sp)
  801094:	dc800217 	ldw	r18,8(sp)
  801098:	dc400117 	ldw	r17,4(sp)
  80109c:	dc000017 	ldw	r16,0(sp)
  8010a0:	dec00c04 	addi	sp,sp,48
  8010a4:	f800283a 	ret

008010a8 <_ZN4UART4sendEv>:
	while (!outBuffer_isEmpty()) {
		send();
	}
}

void UART::send() {
  8010a8:	defffb04 	addi	sp,sp,-20
  8010ac:	dfc00415 	stw	ra,16(sp)
  8010b0:	df000315 	stw	fp,12(sp)
  8010b4:	dc000215 	stw	r16,8(sp)
  8010b8:	df000204 	addi	fp,sp,8
  8010bc:	e13ffe15 	stw	r4,-8(fp)
	if (!outBuffer_isEmpty()
  8010c0:	e13ffe17 	ldw	r4,-8(fp)
  8010c4:	0800d780 	call	800d78 <_ZN4UART17outBuffer_isEmptyEv>
  8010c8:	1080005c 	xori	r2,r2,1
  8010cc:	1080005c 	xori	r2,r2,1
  8010d0:	10803fcc 	andi	r2,r2,255
  8010d4:	1004c03a 	cmpne	r2,r2,zero
  8010d8:	10000a1e 	bne	r2,zero,801104 <_ZN4UART4sendEv+0x5c>
  8010dc:	e0bffe17 	ldw	r2,-8(fp)
  8010e0:	10800317 	ldw	r2,12(r2)
  8010e4:	10800204 	addi	r2,r2,8
  8010e8:	10800037 	ldwio	r2,0(r2)
  8010ec:	1080100c 	andi	r2,r2,64
  8010f0:	1005003a 	cmpeq	r2,r2,zero
  8010f4:	1000031e 	bne	r2,zero,801104 <_ZN4UART4sendEv+0x5c>
  8010f8:	00800044 	movi	r2,1
  8010fc:	e0bfff05 	stb	r2,-4(fp)
  801100:	00000106 	br	801108 <_ZN4UART4sendEv+0x60>
  801104:	e03fff05 	stb	zero,-4(fp)
  801108:	e0bfff03 	ldbu	r2,-4(fp)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	1005003a 	cmpeq	r2,r2,zero
  801114:	10000b1e 	bne	r2,zero,801144 <_ZN4UART4sendEv+0x9c>
	    && (IORD_ALTERA_AVALON_UART_STATUS( _base_adress )
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
  801118:	e0bffe17 	ldw	r2,-8(fp)
  80111c:	10800317 	ldw	r2,12(r2)
  801120:	14000104 	addi	r16,r2,4
  801124:	e0bffe17 	ldw	r2,-8(fp)
  801128:	11000217 	ldw	r4,8(r2)
  80112c:	0801a6c0 	call	801a6c <_ZN4FIFOIcE4pullEv>
  801130:	10c03fcc 	andi	r3,r2,255
  801134:	18c0201c 	xori	r3,r3,128
  801138:	18ffe004 	addi	r3,r3,-128
  80113c:	8005883a 	mov	r2,r16
  801140:	10c00035 	stwio	r3,0(r2)
	}
}
  801144:	e037883a 	mov	sp,fp
  801148:	dfc00217 	ldw	ra,8(sp)
  80114c:	df000117 	ldw	fp,4(sp)
  801150:	dc000017 	ldw	r16,0(sp)
  801154:	dec00304 	addi	sp,sp,12
  801158:	f800283a 	ret

0080115c <_ZN4UART7sendAllEv>:

char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
  80115c:	defffd04 	addi	sp,sp,-12
  801160:	dfc00215 	stw	ra,8(sp)
  801164:	df000115 	stw	fp,4(sp)
  801168:	df000104 	addi	fp,sp,4
  80116c:	e13fff15 	stw	r4,-4(fp)
	while (!outBuffer_isEmpty()) {
  801170:	00000206 	br	80117c <_ZN4UART7sendAllEv+0x20>
		send();
  801174:	e13fff17 	ldw	r4,-4(fp)
  801178:	08010a80 	call	8010a8 <_ZN4UART4sendEv>
char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
	while (!outBuffer_isEmpty()) {
  80117c:	e13fff17 	ldw	r4,-4(fp)
  801180:	0800d780 	call	800d78 <_ZN4UART17outBuffer_isEmptyEv>
  801184:	1080005c 	xori	r2,r2,1
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	1004c03a 	cmpne	r2,r2,zero
  801190:	103ff81e 	bne	r2,zero,801174 <_ZN4UART7sendAllEv+0x18>
		send();
	}
}
  801194:	e037883a 	mov	sp,fp
  801198:	dfc00117 	ldw	ra,4(sp)
  80119c:	df000017 	ldw	fp,0(sp)
  8011a0:	dec00204 	addi	sp,sp,8
  8011a4:	f800283a 	ret

008011a8 <_Z23_UART_receive_interruptPv>:

#include "malloc.h"
#include "string.h"
#include "stdarg.h"

static void _UART_receive_interrupt(void* context) {
  8011a8:	defffc04 	addi	sp,sp,-16
  8011ac:	dfc00315 	stw	ra,12(sp)
  8011b0:	df000215 	stw	fp,8(sp)
  8011b4:	df000204 	addi	fp,sp,8
  8011b8:	e13fff15 	stw	r4,-4(fp)
	UART_interrupt_context* interrupt_context = (UART_interrupt_context*) context;
  8011bc:	e0bfff17 	ldw	r2,-4(fp)
  8011c0:	e0bffe15 	stw	r2,-8(fp)
	interrupt_context->_in_buffer->push(
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
  8011c4:	e0bffe17 	ldw	r2,-8(fp)
  8011c8:	11000017 	ldw	r4,0(r2)
  8011cc:	e0bffe17 	ldw	r2,-8(fp)
  8011d0:	10800117 	ldw	r2,4(r2)
  8011d4:	10800037 	ldwio	r2,0(r2)
  8011d8:	11403fcc 	andi	r5,r2,255
  8011dc:	2940201c 	xori	r5,r5,128
  8011e0:	297fe004 	addi	r5,r5,-128
  8011e4:	08019a40 	call	8019a4 <_ZN4FIFOIcE4pushEc>
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10800117 	ldw	r2,4(r2)
  8011f0:	10000035 	stwio	zero,0(r2)
}
  8011f4:	e037883a 	mov	sp,fp
  8011f8:	dfc00117 	ldw	ra,4(sp)
  8011fc:	df000017 	ldw	fp,0(sp)
  801200:	dec00204 	addi	sp,sp,8
  801204:	f800283a 	ret

00801208 <_ZN4UARTD0Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  801208:	defffd04 	addi	sp,sp,-12
  80120c:	dfc00215 	stw	ra,8(sp)
  801210:	df000115 	stw	fp,4(sp)
  801214:	df000104 	addi	fp,sp,4
  801218:	e13fff15 	stw	r4,-4(fp)
  80121c:	00c02074 	movhi	r3,129
  801220:	18c4a304 	addi	r3,r3,4748
  801224:	e0bfff17 	ldw	r2,-4(fp)
  801228:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  80122c:	e0bfff17 	ldw	r2,-4(fp)
  801230:	10800117 	ldw	r2,4(r2)
  801234:	1005003a 	cmpeq	r2,r2,zero
  801238:	1000081e 	bne	r2,zero,80125c <_ZN4UARTD0Ev+0x54>
  80123c:	e0bfff17 	ldw	r2,-4(fp)
  801240:	10800117 	ldw	r2,4(r2)
  801244:	10800017 	ldw	r2,0(r2)
  801248:	10800104 	addi	r2,r2,4
  80124c:	10c00017 	ldw	r3,0(r2)
  801250:	e0bfff17 	ldw	r2,-4(fp)
  801254:	11000117 	ldw	r4,4(r2)
  801258:	183ee83a 	callr	r3
	delete _out_buffer;
  80125c:	e0bfff17 	ldw	r2,-4(fp)
  801260:	10800217 	ldw	r2,8(r2)
  801264:	1005003a 	cmpeq	r2,r2,zero
  801268:	1000081e 	bne	r2,zero,80128c <_ZN4UARTD0Ev+0x84>
  80126c:	e0bfff17 	ldw	r2,-4(fp)
  801270:	10800217 	ldw	r2,8(r2)
  801274:	10800017 	ldw	r2,0(r2)
  801278:	10800104 	addi	r2,r2,4
  80127c:	10c00017 	ldw	r3,0(r2)
  801280:	e0bfff17 	ldw	r2,-4(fp)
  801284:	11000217 	ldw	r4,8(r2)
  801288:	183ee83a 	callr	r3
	free(irq_context);
  80128c:	e0bfff17 	ldw	r2,-4(fp)
  801290:	11000617 	ldw	r4,24(r2)
  801294:	0803da40 	call	803da4 <free>
}
  801298:	00800044 	movi	r2,1
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1005003a 	cmpeq	r2,r2,zero
  8012a4:	1000021e 	bne	r2,zero,8012b0 <_ZN4UARTD0Ev+0xa8>
  8012a8:	e13fff17 	ldw	r4,-4(fp)
  8012ac:	08021400 	call	802140 <_ZdlPv>
  8012b0:	e037883a 	mov	sp,fp
  8012b4:	dfc00117 	ldw	ra,4(sp)
  8012b8:	df000017 	ldw	fp,0(sp)
  8012bc:	dec00204 	addi	sp,sp,8
  8012c0:	f800283a 	ret

008012c4 <_ZN4UARTD1Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  8012c4:	defffd04 	addi	sp,sp,-12
  8012c8:	dfc00215 	stw	ra,8(sp)
  8012cc:	df000115 	stw	fp,4(sp)
  8012d0:	df000104 	addi	fp,sp,4
  8012d4:	e13fff15 	stw	r4,-4(fp)
  8012d8:	00c02074 	movhi	r3,129
  8012dc:	18c4a304 	addi	r3,r3,4748
  8012e0:	e0bfff17 	ldw	r2,-4(fp)
  8012e4:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  8012e8:	e0bfff17 	ldw	r2,-4(fp)
  8012ec:	10800117 	ldw	r2,4(r2)
  8012f0:	1005003a 	cmpeq	r2,r2,zero
  8012f4:	1000081e 	bne	r2,zero,801318 <_ZN4UARTD1Ev+0x54>
  8012f8:	e0bfff17 	ldw	r2,-4(fp)
  8012fc:	10800117 	ldw	r2,4(r2)
  801300:	10800017 	ldw	r2,0(r2)
  801304:	10800104 	addi	r2,r2,4
  801308:	10c00017 	ldw	r3,0(r2)
  80130c:	e0bfff17 	ldw	r2,-4(fp)
  801310:	11000117 	ldw	r4,4(r2)
  801314:	183ee83a 	callr	r3
	delete _out_buffer;
  801318:	e0bfff17 	ldw	r2,-4(fp)
  80131c:	10800217 	ldw	r2,8(r2)
  801320:	1005003a 	cmpeq	r2,r2,zero
  801324:	1000081e 	bne	r2,zero,801348 <_ZN4UARTD1Ev+0x84>
  801328:	e0bfff17 	ldw	r2,-4(fp)
  80132c:	10800217 	ldw	r2,8(r2)
  801330:	10800017 	ldw	r2,0(r2)
  801334:	10800104 	addi	r2,r2,4
  801338:	10c00017 	ldw	r3,0(r2)
  80133c:	e0bfff17 	ldw	r2,-4(fp)
  801340:	11000217 	ldw	r4,8(r2)
  801344:	183ee83a 	callr	r3
	free(irq_context);
  801348:	e0bfff17 	ldw	r2,-4(fp)
  80134c:	11000617 	ldw	r4,24(r2)
  801350:	0803da40 	call	803da4 <free>
}
  801354:	0005883a 	mov	r2,zero
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1005003a 	cmpeq	r2,r2,zero
  801360:	1000021e 	bne	r2,zero,80136c <_ZN4UARTD1Ev+0xa8>
  801364:	e13fff17 	ldw	r4,-4(fp)
  801368:	08021400 	call	802140 <_ZdlPv>
  80136c:	e037883a 	mov	sp,fp
  801370:	dfc00117 	ldw	ra,4(sp)
  801374:	df000017 	ldw	fp,0(sp)
  801378:	dec00204 	addi	sp,sp,8
  80137c:	f800283a 	ret

00801380 <_ZN4UARTD2Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  801380:	defffd04 	addi	sp,sp,-12
  801384:	dfc00215 	stw	ra,8(sp)
  801388:	df000115 	stw	fp,4(sp)
  80138c:	df000104 	addi	fp,sp,4
  801390:	e13fff15 	stw	r4,-4(fp)
  801394:	00c02074 	movhi	r3,129
  801398:	18c4a304 	addi	r3,r3,4748
  80139c:	e0bfff17 	ldw	r2,-4(fp)
  8013a0:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  8013a4:	e0bfff17 	ldw	r2,-4(fp)
  8013a8:	10800117 	ldw	r2,4(r2)
  8013ac:	1005003a 	cmpeq	r2,r2,zero
  8013b0:	1000081e 	bne	r2,zero,8013d4 <_ZN4UARTD2Ev+0x54>
  8013b4:	e0bfff17 	ldw	r2,-4(fp)
  8013b8:	10800117 	ldw	r2,4(r2)
  8013bc:	10800017 	ldw	r2,0(r2)
  8013c0:	10800104 	addi	r2,r2,4
  8013c4:	10c00017 	ldw	r3,0(r2)
  8013c8:	e0bfff17 	ldw	r2,-4(fp)
  8013cc:	11000117 	ldw	r4,4(r2)
  8013d0:	183ee83a 	callr	r3
	delete _out_buffer;
  8013d4:	e0bfff17 	ldw	r2,-4(fp)
  8013d8:	10800217 	ldw	r2,8(r2)
  8013dc:	1005003a 	cmpeq	r2,r2,zero
  8013e0:	1000081e 	bne	r2,zero,801404 <_ZN4UARTD2Ev+0x84>
  8013e4:	e0bfff17 	ldw	r2,-4(fp)
  8013e8:	10800217 	ldw	r2,8(r2)
  8013ec:	10800017 	ldw	r2,0(r2)
  8013f0:	10800104 	addi	r2,r2,4
  8013f4:	10c00017 	ldw	r3,0(r2)
  8013f8:	e0bfff17 	ldw	r2,-4(fp)
  8013fc:	11000217 	ldw	r4,8(r2)
  801400:	183ee83a 	callr	r3
	free(irq_context);
  801404:	e0bfff17 	ldw	r2,-4(fp)
  801408:	11000617 	ldw	r4,24(r2)
  80140c:	0803da40 	call	803da4 <free>
}
  801410:	0005883a 	mov	r2,zero
  801414:	10803fcc 	andi	r2,r2,255
  801418:	1005003a 	cmpeq	r2,r2,zero
  80141c:	1000021e 	bne	r2,zero,801428 <_ZN4UARTD2Ev+0xa8>
  801420:	e13fff17 	ldw	r4,-4(fp)
  801424:	08021400 	call	802140 <_ZdlPv>
  801428:	e037883a 	mov	sp,fp
  80142c:	dfc00117 	ldw	ra,4(sp)
  801430:	df000017 	ldw	fp,0(sp)
  801434:	dec00204 	addi	sp,sp,8
  801438:	f800283a 	ret

0080143c <_ZN4UARTC1Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  80143c:	deffe004 	addi	sp,sp,-128
  801440:	dfc01f15 	stw	ra,124(sp)
  801444:	df001e15 	stw	fp,120(sp)
  801448:	ddc01d15 	stw	r23,116(sp)
  80144c:	dd801c15 	stw	r22,112(sp)
  801450:	dd401b15 	stw	r21,108(sp)
  801454:	dd001a15 	stw	r20,104(sp)
  801458:	dcc01915 	stw	r19,100(sp)
  80145c:	dc801815 	stw	r18,96(sp)
  801460:	dc401715 	stw	r17,92(sp)
  801464:	dc001615 	stw	r16,88(sp)
  801468:	df001604 	addi	fp,sp,88
  80146c:	e13fea15 	stw	r4,-88(fp)
  801470:	e17feb15 	stw	r5,-84(fp)
  801474:	e1bfec15 	stw	r6,-80(fp)
  801478:	e1ffed15 	stw	r7,-76(fp)
  80147c:	00802034 	movhi	r2,128
  801480:	108a1704 	addi	r2,r2,10332
  801484:	e0bff415 	stw	r2,-48(fp)
  801488:	00802074 	movhi	r2,129
  80148c:	10844d04 	addi	r2,r2,4404
  801490:	e0bff515 	stw	r2,-44(fp)
  801494:	e0bff604 	addi	r2,fp,-40
  801498:	e0ffea04 	addi	r3,fp,-88
  80149c:	10c00015 	stw	r3,0(r2)
  8014a0:	00c02034 	movhi	r3,128
  8014a4:	18c57804 	addi	r3,r3,5600
  8014a8:	10c00115 	stw	r3,4(r2)
  8014ac:	16c00215 	stw	sp,8(r2)
  8014b0:	e13fee04 	addi	r4,fp,-72
  8014b4:	08038440 	call	803844 <_Unwind_SjLj_Register>
  8014b8:	00c02074 	movhi	r3,129
  8014bc:	18c4a304 	addi	r3,r3,4748
  8014c0:	e0bfea17 	ldw	r2,-88(fp)
  8014c4:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  8014c8:	e0ffea17 	ldw	r3,-88(fp)
  8014cc:	e0bfeb17 	ldw	r2,-84(fp)
  8014d0:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  8014d4:	e0ffea17 	ldw	r3,-88(fp)
  8014d8:	e0800a17 	ldw	r2,40(fp)
  8014dc:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  8014e0:	e0ffea17 	ldw	r3,-88(fp)
  8014e4:	e0bfed17 	ldw	r2,-76(fp)
  8014e8:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  8014ec:	00bfffc4 	movi	r2,-1
  8014f0:	e0bfef15 	stw	r2,-68(fp)
  8014f4:	01000504 	movi	r4,20
  8014f8:	08031dc0 	call	8031dc <_Znwm>
  8014fc:	e0bffe15 	stw	r2,-8(fp)
  801500:	00800084 	movi	r2,2
  801504:	e0bfef15 	stw	r2,-68(fp)
  801508:	e13ffe17 	ldw	r4,-8(fp)
  80150c:	e17fed17 	ldw	r5,-76(fp)
  801510:	0801af00 	call	801af0 <_ZN4FIFOIcEC1Ej>
  801514:	e0bfea17 	ldw	r2,-88(fp)
  801518:	e0fffe17 	ldw	r3,-8(fp)
  80151c:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  801520:	00bfffc4 	movi	r2,-1
  801524:	e0bfef15 	stw	r2,-68(fp)
  801528:	01000504 	movi	r4,20
  80152c:	08031dc0 	call	8031dc <_Znwm>
  801530:	e0bffd15 	stw	r2,-12(fp)
  801534:	00800044 	movi	r2,1
  801538:	e0bfef15 	stw	r2,-68(fp)
  80153c:	e13ffd17 	ldw	r4,-12(fp)
  801540:	e1400a17 	ldw	r5,40(fp)
  801544:	0801af00 	call	801af0 <_ZN4FIFOIcEC1Ej>
  801548:	00000a06 	br	801574 <_ZN4UARTC1Emmjj+0x138>
  80154c:	e0bfff17 	ldw	r2,-4(fp)
  801550:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  801554:	e13ffe17 	ldw	r4,-8(fp)
  801558:	08021400 	call	802140 <_ZdlPv>
  80155c:	e0fffc17 	ldw	r3,-16(fp)
  801560:	e0ffff15 	stw	r3,-4(fp)
  801564:	00bfffc4 	movi	r2,-1
  801568:	e0bfef15 	stw	r2,-68(fp)
  80156c:	e13fff17 	ldw	r4,-4(fp)
  801570:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  801574:	e0bfea17 	ldw	r2,-88(fp)
  801578:	e0fffd17 	ldw	r3,-12(fp)
  80157c:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  801580:	01000204 	movi	r4,8
  801584:	0803db80 	call	803db8 <malloc>
  801588:	1007883a 	mov	r3,r2
  80158c:	e0bfea17 	ldw	r2,-88(fp)
  801590:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  801594:	e0bfea17 	ldw	r2,-88(fp)
  801598:	10c00617 	ldw	r3,24(r2)
  80159c:	e0bfea17 	ldw	r2,-88(fp)
  8015a0:	10800317 	ldw	r2,12(r2)
  8015a4:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  8015a8:	e0bfea17 	ldw	r2,-88(fp)
  8015ac:	10c00617 	ldw	r3,24(r2)
  8015b0:	e0bfea17 	ldw	r2,-88(fp)
  8015b4:	10800117 	ldw	r2,4(r2)
  8015b8:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  8015bc:	e0bfea17 	ldw	r2,-88(fp)
  8015c0:	11400617 	ldw	r5,24(r2)
  8015c4:	00bfffc4 	movi	r2,-1
  8015c8:	e0bfef15 	stw	r2,-68(fp)
  8015cc:	e13fec17 	ldw	r4,-80(fp)
  8015d0:	01802034 	movhi	r6,128
  8015d4:	31846a04 	addi	r6,r6,4520
  8015d8:	080db640 	call	80db64 <alt_irq_register>
}
  8015dc:	00001006 	br	801620 <_ZN4UARTC1Emmjj+0x1e4>
  8015e0:	e7001604 	addi	fp,fp,88
  8015e4:	e0bfef17 	ldw	r2,-68(fp)
  8015e8:	e0fff017 	ldw	r3,-64(fp)
  8015ec:	e0ffff15 	stw	r3,-4(fp)
  8015f0:	10800060 	cmpeqi	r2,r2,1
  8015f4:	103fd51e 	bne	r2,zero,80154c <_ZN4UARTC1Emmjj+0x110>
  8015f8:	e0bfff17 	ldw	r2,-4(fp)
  8015fc:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  801600:	e13ffd17 	ldw	r4,-12(fp)
  801604:	08021400 	call	802140 <_ZdlPv>
  801608:	e0fffb17 	ldw	r3,-20(fp)
  80160c:	e0ffff15 	stw	r3,-4(fp)
  801610:	00bfffc4 	movi	r2,-1
  801614:	e0bfef15 	stw	r2,-68(fp)
  801618:	e13fff17 	ldw	r4,-4(fp)
  80161c:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  801620:	e13fee04 	addi	r4,fp,-72
  801624:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  801628:	e037883a 	mov	sp,fp
  80162c:	dfc00917 	ldw	ra,36(sp)
  801630:	df000817 	ldw	fp,32(sp)
  801634:	ddc00717 	ldw	r23,28(sp)
  801638:	dd800617 	ldw	r22,24(sp)
  80163c:	dd400517 	ldw	r21,20(sp)
  801640:	dd000417 	ldw	r20,16(sp)
  801644:	dcc00317 	ldw	r19,12(sp)
  801648:	dc800217 	ldw	r18,8(sp)
  80164c:	dc400117 	ldw	r17,4(sp)
  801650:	dc000017 	ldw	r16,0(sp)
  801654:	dec00a04 	addi	sp,sp,40
  801658:	f800283a 	ret

0080165c <_ZN4UARTC2Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  80165c:	deffe004 	addi	sp,sp,-128
  801660:	dfc01f15 	stw	ra,124(sp)
  801664:	df001e15 	stw	fp,120(sp)
  801668:	ddc01d15 	stw	r23,116(sp)
  80166c:	dd801c15 	stw	r22,112(sp)
  801670:	dd401b15 	stw	r21,108(sp)
  801674:	dd001a15 	stw	r20,104(sp)
  801678:	dcc01915 	stw	r19,100(sp)
  80167c:	dc801815 	stw	r18,96(sp)
  801680:	dc401715 	stw	r17,92(sp)
  801684:	dc001615 	stw	r16,88(sp)
  801688:	df001604 	addi	fp,sp,88
  80168c:	e13fea15 	stw	r4,-88(fp)
  801690:	e17feb15 	stw	r5,-84(fp)
  801694:	e1bfec15 	stw	r6,-80(fp)
  801698:	e1ffed15 	stw	r7,-76(fp)
  80169c:	00802034 	movhi	r2,128
  8016a0:	108a1704 	addi	r2,r2,10332
  8016a4:	e0bff415 	stw	r2,-48(fp)
  8016a8:	00802074 	movhi	r2,129
  8016ac:	10844f04 	addi	r2,r2,4412
  8016b0:	e0bff515 	stw	r2,-44(fp)
  8016b4:	e0bff604 	addi	r2,fp,-40
  8016b8:	e0ffea04 	addi	r3,fp,-88
  8016bc:	10c00015 	stw	r3,0(r2)
  8016c0:	00c02034 	movhi	r3,128
  8016c4:	18c60004 	addi	r3,r3,6144
  8016c8:	10c00115 	stw	r3,4(r2)
  8016cc:	16c00215 	stw	sp,8(r2)
  8016d0:	e13fee04 	addi	r4,fp,-72
  8016d4:	08038440 	call	803844 <_Unwind_SjLj_Register>
  8016d8:	00c02074 	movhi	r3,129
  8016dc:	18c4a304 	addi	r3,r3,4748
  8016e0:	e0bfea17 	ldw	r2,-88(fp)
  8016e4:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  8016e8:	e0ffea17 	ldw	r3,-88(fp)
  8016ec:	e0bfeb17 	ldw	r2,-84(fp)
  8016f0:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  8016f4:	e0ffea17 	ldw	r3,-88(fp)
  8016f8:	e0800a17 	ldw	r2,40(fp)
  8016fc:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  801700:	e0ffea17 	ldw	r3,-88(fp)
  801704:	e0bfed17 	ldw	r2,-76(fp)
  801708:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  80170c:	00bfffc4 	movi	r2,-1
  801710:	e0bfef15 	stw	r2,-68(fp)
  801714:	01000504 	movi	r4,20
  801718:	08031dc0 	call	8031dc <_Znwm>
  80171c:	e0bffe15 	stw	r2,-8(fp)
  801720:	00800084 	movi	r2,2
  801724:	e0bfef15 	stw	r2,-68(fp)
  801728:	e13ffe17 	ldw	r4,-8(fp)
  80172c:	e17fed17 	ldw	r5,-76(fp)
  801730:	0801af00 	call	801af0 <_ZN4FIFOIcEC1Ej>
  801734:	e0bfea17 	ldw	r2,-88(fp)
  801738:	e0fffe17 	ldw	r3,-8(fp)
  80173c:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  801740:	00bfffc4 	movi	r2,-1
  801744:	e0bfef15 	stw	r2,-68(fp)
  801748:	01000504 	movi	r4,20
  80174c:	08031dc0 	call	8031dc <_Znwm>
  801750:	e0bffd15 	stw	r2,-12(fp)
  801754:	00800044 	movi	r2,1
  801758:	e0bfef15 	stw	r2,-68(fp)
  80175c:	e13ffd17 	ldw	r4,-12(fp)
  801760:	e1400a17 	ldw	r5,40(fp)
  801764:	0801af00 	call	801af0 <_ZN4FIFOIcEC1Ej>
  801768:	00000a06 	br	801794 <_ZN4UARTC2Emmjj+0x138>
  80176c:	e0bfff17 	ldw	r2,-4(fp)
  801770:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  801774:	e13ffe17 	ldw	r4,-8(fp)
  801778:	08021400 	call	802140 <_ZdlPv>
  80177c:	e0fffc17 	ldw	r3,-16(fp)
  801780:	e0ffff15 	stw	r3,-4(fp)
  801784:	00bfffc4 	movi	r2,-1
  801788:	e0bfef15 	stw	r2,-68(fp)
  80178c:	e13fff17 	ldw	r4,-4(fp)
  801790:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  801794:	e0bfea17 	ldw	r2,-88(fp)
  801798:	e0fffd17 	ldw	r3,-12(fp)
  80179c:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  8017a0:	01000204 	movi	r4,8
  8017a4:	0803db80 	call	803db8 <malloc>
  8017a8:	1007883a 	mov	r3,r2
  8017ac:	e0bfea17 	ldw	r2,-88(fp)
  8017b0:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  8017b4:	e0bfea17 	ldw	r2,-88(fp)
  8017b8:	10c00617 	ldw	r3,24(r2)
  8017bc:	e0bfea17 	ldw	r2,-88(fp)
  8017c0:	10800317 	ldw	r2,12(r2)
  8017c4:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  8017c8:	e0bfea17 	ldw	r2,-88(fp)
  8017cc:	10c00617 	ldw	r3,24(r2)
  8017d0:	e0bfea17 	ldw	r2,-88(fp)
  8017d4:	10800117 	ldw	r2,4(r2)
  8017d8:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  8017dc:	e0bfea17 	ldw	r2,-88(fp)
  8017e0:	11400617 	ldw	r5,24(r2)
  8017e4:	00bfffc4 	movi	r2,-1
  8017e8:	e0bfef15 	stw	r2,-68(fp)
  8017ec:	e13fec17 	ldw	r4,-80(fp)
  8017f0:	01802034 	movhi	r6,128
  8017f4:	31846a04 	addi	r6,r6,4520
  8017f8:	080db640 	call	80db64 <alt_irq_register>
}
  8017fc:	00001006 	br	801840 <_ZN4UARTC2Emmjj+0x1e4>
  801800:	e7001604 	addi	fp,fp,88
  801804:	e0bfef17 	ldw	r2,-68(fp)
  801808:	e0fff017 	ldw	r3,-64(fp)
  80180c:	e0ffff15 	stw	r3,-4(fp)
  801810:	10800060 	cmpeqi	r2,r2,1
  801814:	103fd51e 	bne	r2,zero,80176c <_ZN4UARTC2Emmjj+0x110>
  801818:	e0bfff17 	ldw	r2,-4(fp)
  80181c:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  801820:	e13ffd17 	ldw	r4,-12(fp)
  801824:	08021400 	call	802140 <_ZdlPv>
  801828:	e0fffb17 	ldw	r3,-20(fp)
  80182c:	e0ffff15 	stw	r3,-4(fp)
  801830:	00bfffc4 	movi	r2,-1
  801834:	e0bfef15 	stw	r2,-68(fp)
  801838:	e13fff17 	ldw	r4,-4(fp)
  80183c:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  801840:	e13fee04 	addi	r4,fp,-72
  801844:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  801848:	e037883a 	mov	sp,fp
  80184c:	dfc00917 	ldw	ra,36(sp)
  801850:	df000817 	ldw	fp,32(sp)
  801854:	ddc00717 	ldw	r23,28(sp)
  801858:	dd800617 	ldw	r22,24(sp)
  80185c:	dd400517 	ldw	r21,20(sp)
  801860:	dd000417 	ldw	r20,16(sp)
  801864:	dcc00317 	ldw	r19,12(sp)
  801868:	dc800217 	ldw	r18,8(sp)
  80186c:	dc400117 	ldw	r17,4(sp)
  801870:	dc000017 	ldw	r16,0(sp)
  801874:	dec00a04 	addi	sp,sp,40
  801878:	f800283a 	ret

0080187c <_ZN4FIFOIcE7isEmptyEv>:

		virtual ~FIFO<T>() {
			delete[] _x;
		}

		bool isEmpty(void) {
  80187c:	defffe04 	addi	sp,sp,-8
  801880:	df000115 	stw	fp,4(sp)
  801884:	df000104 	addi	fp,sp,4
  801888:	e13fff15 	stw	r4,-4(fp)
			return (_r == _w);
  80188c:	e0bfff17 	ldw	r2,-4(fp)
  801890:	10c00217 	ldw	r3,8(r2)
  801894:	e0bfff17 	ldw	r2,-4(fp)
  801898:	10800317 	ldw	r2,12(r2)
  80189c:	1885003a 	cmpeq	r2,r3,r2
  8018a0:	e037883a 	mov	sp,fp
  8018a4:	df000017 	ldw	fp,0(sp)
  8018a8:	dec00104 	addi	sp,sp,4
  8018ac:	f800283a 	ret

008018b0 <_ZN4FIFOIcE6isFullEv>:
		}

		bool isFull(void) {
  8018b0:	defffd04 	addi	sp,sp,-12
  8018b4:	df000215 	stw	fp,8(sp)
  8018b8:	df000204 	addi	fp,sp,8
  8018bc:	e13ffe15 	stw	r4,-8(fp)
			return (((_r & _m) == (_w & _m)) && (_r != _w));
  8018c0:	e0bffe17 	ldw	r2,-8(fp)
  8018c4:	10c00217 	ldw	r3,8(r2)
  8018c8:	e0bffe17 	ldw	r2,-8(fp)
  8018cc:	10800117 	ldw	r2,4(r2)
  8018d0:	1888703a 	and	r4,r3,r2
  8018d4:	e0bffe17 	ldw	r2,-8(fp)
  8018d8:	10c00317 	ldw	r3,12(r2)
  8018dc:	e0bffe17 	ldw	r2,-8(fp)
  8018e0:	10800117 	ldw	r2,4(r2)
  8018e4:	1884703a 	and	r2,r3,r2
  8018e8:	2080081e 	bne	r4,r2,80190c <_ZN4FIFOIcE6isFullEv+0x5c>
  8018ec:	e0bffe17 	ldw	r2,-8(fp)
  8018f0:	10c00217 	ldw	r3,8(r2)
  8018f4:	e0bffe17 	ldw	r2,-8(fp)
  8018f8:	10800317 	ldw	r2,12(r2)
  8018fc:	18800326 	beq	r3,r2,80190c <_ZN4FIFOIcE6isFullEv+0x5c>
  801900:	00800044 	movi	r2,1
  801904:	e0bfff05 	stb	r2,-4(fp)
  801908:	00000106 	br	801910 <_ZN4FIFOIcE6isFullEv+0x60>
  80190c:	e03fff05 	stb	zero,-4(fp)
  801910:	e0bfff03 	ldbu	r2,-4(fp)
  801914:	e037883a 	mov	sp,fp
  801918:	df000017 	ldw	fp,0(sp)
  80191c:	dec00104 	addi	sp,sp,4
  801920:	f800283a 	ret

00801924 <_ZN4FIFOIcE4lockEv>:
		FIFO<T>& flush(void) {
			_r = _w = 0;
			return *this;
		}

		virtual void lock(void) {
  801924:	defffe04 	addi	sp,sp,-8
  801928:	df000115 	stw	fp,4(sp)
  80192c:	df000104 	addi	fp,sp,4
  801930:	e13fff15 	stw	r4,-4(fp)
			;
  801934:	e037883a 	mov	sp,fp
  801938:	df000017 	ldw	fp,0(sp)
  80193c:	dec00104 	addi	sp,sp,4
  801940:	f800283a 	ret

00801944 <_ZN4FIFOIcE6unlockEv>:
		}

		virtual void unlock(void) {
  801944:	defffe04 	addi	sp,sp,-8
  801948:	df000115 	stw	fp,4(sp)
  80194c:	df000104 	addi	fp,sp,4
  801950:	e13fff15 	stw	r4,-4(fp)
			;
  801954:	e037883a 	mov	sp,fp
  801958:	df000017 	ldw	fp,0(sp)
  80195c:	dec00104 	addi	sp,sp,4
  801960:	f800283a 	ret

00801964 <_ZN4FIFOIcE21_triggerFullConditionEv>:
		unsigned _m; /* counter mask (= depth - 1) */
		unsigned _r; /* read offset in units of T  */
		unsigned _w; /* write offset in units of T */
		T* _x;

		void _triggerFullCondition(void) {
  801964:	defffd04 	addi	sp,sp,-12
  801968:	dfc00215 	stw	ra,8(sp)
  80196c:	df000115 	stw	fp,4(sp)
  801970:	df000104 	addi	fp,sp,4
  801974:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is full"; /* XXX FullFIFOException */
  801978:	01000104 	movi	r4,4
  80197c:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  801980:	1009883a 	mov	r4,r2
  801984:	2007883a 	mov	r3,r4
  801988:	00802074 	movhi	r2,129
  80198c:	10849204 	addi	r2,r2,4680
  801990:	18800015 	stw	r2,0(r3)
  801994:	01402074 	movhi	r5,129
  801998:	29456304 	addi	r5,r5,5516
  80199c:	000d883a 	mov	r6,zero
  8019a0:	0801de80 	call	801de8 <__cxa_throw>

008019a4 <_ZN4FIFOIcE4pushEc>:

		bool isFull(void) {
			return (((_r & _m) == (_w & _m)) && (_r != _w));
		}

		FIFO<T>& push(T val) {
  8019a4:	defffc04 	addi	sp,sp,-16
  8019a8:	dfc00315 	stw	ra,12(sp)
  8019ac:	df000215 	stw	fp,8(sp)
  8019b0:	df000204 	addi	fp,sp,8
  8019b4:	e13ffe15 	stw	r4,-8(fp)
  8019b8:	e17fff05 	stb	r5,-4(fp)
			if (isFull())
  8019bc:	e13ffe17 	ldw	r4,-8(fp)
  8019c0:	08018b00 	call	8018b0 <_ZN4FIFOIcE6isFullEv>
  8019c4:	10803fcc 	andi	r2,r2,255
  8019c8:	1005003a 	cmpeq	r2,r2,zero
  8019cc:	1000021e 	bne	r2,zero,8019d8 <_ZN4FIFOIcE4pushEc+0x34>
				_triggerFullCondition();
  8019d0:	e13ffe17 	ldw	r4,-8(fp)
  8019d4:	08019640 	call	801964 <_ZN4FIFOIcE21_triggerFullConditionEv>

			_x[_w & _m] = val;
  8019d8:	e0bffe17 	ldw	r2,-8(fp)
  8019dc:	11000417 	ldw	r4,16(r2)
  8019e0:	e0bffe17 	ldw	r2,-8(fp)
  8019e4:	10c00317 	ldw	r3,12(r2)
  8019e8:	e0bffe17 	ldw	r2,-8(fp)
  8019ec:	10800117 	ldw	r2,4(r2)
  8019f0:	1884703a 	and	r2,r3,r2
  8019f4:	2087883a 	add	r3,r4,r2
  8019f8:	e0bfff03 	ldbu	r2,-4(fp)
  8019fc:	18800005 	stb	r2,0(r3)
			_w++;
  801a00:	e0bffe17 	ldw	r2,-8(fp)
  801a04:	10800317 	ldw	r2,12(r2)
  801a08:	10c00044 	addi	r3,r2,1
  801a0c:	e0bffe17 	ldw	r2,-8(fp)
  801a10:	10c00315 	stw	r3,12(r2)

			return *this;
  801a14:	e0bffe17 	ldw	r2,-8(fp)
  801a18:	e037883a 	mov	sp,fp
  801a1c:	dfc00117 	ldw	ra,4(sp)
  801a20:	df000017 	ldw	fp,0(sp)
  801a24:	dec00204 	addi	sp,sp,8
  801a28:	f800283a 	ret

00801a2c <_ZN4FIFOIcE22_triggerEmptyConditionEv>:

		void _triggerFullCondition(void) {
			throw "FIFO is full"; /* XXX FullFIFOException */
		}

		void _triggerEmptyCondition(void) {
  801a2c:	defffd04 	addi	sp,sp,-12
  801a30:	dfc00215 	stw	ra,8(sp)
  801a34:	df000115 	stw	fp,4(sp)
  801a38:	df000104 	addi	fp,sp,4
  801a3c:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is empty"; /*XXX EmptyFIFOException */
  801a40:	01000104 	movi	r4,4
  801a44:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  801a48:	1009883a 	mov	r4,r2
  801a4c:	2007883a 	mov	r3,r4
  801a50:	00802074 	movhi	r2,129
  801a54:	10849604 	addi	r2,r2,4696
  801a58:	18800015 	stw	r2,0(r3)
  801a5c:	01402074 	movhi	r5,129
  801a60:	29456304 	addi	r5,r5,5516
  801a64:	000d883a 	mov	r6,zero
  801a68:	0801de80 	call	801de8 <__cxa_throw>

00801a6c <_ZN4FIFOIcE4pullEv>:
			_w++;

			return *this;
		}

		T pull(void) {
  801a6c:	defffc04 	addi	sp,sp,-16
  801a70:	dfc00315 	stw	ra,12(sp)
  801a74:	df000215 	stw	fp,8(sp)
  801a78:	df000204 	addi	fp,sp,8
  801a7c:	e13fff15 	stw	r4,-4(fp)
			if (isEmpty())
  801a80:	e13fff17 	ldw	r4,-4(fp)
  801a84:	080187c0 	call	80187c <_ZN4FIFOIcE7isEmptyEv>
  801a88:	10803fcc 	andi	r2,r2,255
  801a8c:	1005003a 	cmpeq	r2,r2,zero
  801a90:	1000021e 	bne	r2,zero,801a9c <_ZN4FIFOIcE4pullEv+0x30>
				_triggerEmptyCondition();
  801a94:	e13fff17 	ldw	r4,-4(fp)
  801a98:	0801a2c0 	call	801a2c <_ZN4FIFOIcE22_triggerEmptyConditionEv>

			T rv = _x[_r & _m];
  801a9c:	e0bfff17 	ldw	r2,-4(fp)
  801aa0:	11000417 	ldw	r4,16(r2)
  801aa4:	e0bfff17 	ldw	r2,-4(fp)
  801aa8:	10c00217 	ldw	r3,8(r2)
  801aac:	e0bfff17 	ldw	r2,-4(fp)
  801ab0:	10800117 	ldw	r2,4(r2)
  801ab4:	1884703a 	and	r2,r3,r2
  801ab8:	2085883a 	add	r2,r4,r2
  801abc:	10800003 	ldbu	r2,0(r2)
  801ac0:	e0bffe05 	stb	r2,-8(fp)
			_r++;
  801ac4:	e0bfff17 	ldw	r2,-4(fp)
  801ac8:	10800217 	ldw	r2,8(r2)
  801acc:	10c00044 	addi	r3,r2,1
  801ad0:	e0bfff17 	ldw	r2,-4(fp)
  801ad4:	10c00215 	stw	r3,8(r2)

			return rv;
  801ad8:	e0bffe07 	ldb	r2,-8(fp)
  801adc:	e037883a 	mov	sp,fp
  801ae0:	dfc00117 	ldw	ra,4(sp)
  801ae4:	df000017 	ldw	fp,0(sp)
  801ae8:	dec00204 	addi	sp,sp,8
  801aec:	f800283a 	ret

00801af0 <_ZN4FIFOIcEC1Ej>:
template<class T>
class FIFO {

	public:

		FIFO<T>(unsigned depth = 1024) :
  801af0:	defffc04 	addi	sp,sp,-16
  801af4:	dfc00315 	stw	ra,12(sp)
  801af8:	df000215 	stw	fp,8(sp)
  801afc:	df000204 	addi	fp,sp,8
  801b00:	e13ffe15 	stw	r4,-8(fp)
  801b04:	e17fff15 	stw	r5,-4(fp)
				_m(depth - 1) {
  801b08:	00c02074 	movhi	r3,129
  801b0c:	18c4a704 	addi	r3,r3,4764
  801b10:	e0bffe17 	ldw	r2,-8(fp)
  801b14:	10c00015 	stw	r3,0(r2)
  801b18:	e0bfff17 	ldw	r2,-4(fp)
  801b1c:	10ffffc4 	addi	r3,r2,-1
  801b20:	e0bffe17 	ldw	r2,-8(fp)
  801b24:	10c00115 	stw	r3,4(r2)
			if ((depth < 2) || (depth & _m))
  801b28:	e0bfff17 	ldw	r2,-4(fp)
  801b2c:	108000b0 	cmpltui	r2,r2,2
  801b30:	1000061e 	bne	r2,zero,801b4c <_ZN4FIFOIcEC1Ej+0x5c>
  801b34:	e0bffe17 	ldw	r2,-8(fp)
  801b38:	10c00117 	ldw	r3,4(r2)
  801b3c:	e0bfff17 	ldw	r2,-4(fp)
  801b40:	1884703a 	and	r2,r3,r2
  801b44:	1005003a 	cmpeq	r2,r2,zero
  801b48:	10000b1e 	bne	r2,zero,801b78 <_ZN4FIFOIcEC1Ej+0x88>
				throw("depth must be a power of 2"); /* XXX InvalidFIFODepthException */
  801b4c:	01000104 	movi	r4,4
  801b50:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  801b54:	1009883a 	mov	r4,r2
  801b58:	2007883a 	mov	r3,r4
  801b5c:	00802074 	movhi	r2,129
  801b60:	10849a04 	addi	r2,r2,4712
  801b64:	18800015 	stw	r2,0(r3)
  801b68:	01402074 	movhi	r5,129
  801b6c:	29456304 	addi	r5,r5,5516
  801b70:	000d883a 	mov	r6,zero
  801b74:	0801de80 	call	801de8 <__cxa_throw>

			_x = new T[depth];
  801b78:	e13fff17 	ldw	r4,-4(fp)
  801b7c:	0801ebc0 	call	801ebc <_Znam>
  801b80:	1007883a 	mov	r3,r2
  801b84:	e0bffe17 	ldw	r2,-8(fp)
  801b88:	10c00415 	stw	r3,16(r2)
			_r = 0;
  801b8c:	e0bffe17 	ldw	r2,-8(fp)
  801b90:	10000215 	stw	zero,8(r2)
			_w = 0;
  801b94:	e0bffe17 	ldw	r2,-8(fp)
  801b98:	10000315 	stw	zero,12(r2)
  801b9c:	e037883a 	mov	sp,fp
  801ba0:	dfc00117 	ldw	ra,4(sp)
  801ba4:	df000017 	ldw	fp,0(sp)
  801ba8:	dec00204 	addi	sp,sp,8
  801bac:	f800283a 	ret

00801bb0 <_ZN4FIFOIcED0Ev>:
		}

		virtual ~FIFO<T>() {
  801bb0:	defffd04 	addi	sp,sp,-12
  801bb4:	dfc00215 	stw	ra,8(sp)
  801bb8:	df000115 	stw	fp,4(sp)
  801bbc:	df000104 	addi	fp,sp,4
  801bc0:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  801bc4:	00c02074 	movhi	r3,129
  801bc8:	18c4a704 	addi	r3,r3,4764
  801bcc:	e0bfff17 	ldw	r2,-4(fp)
  801bd0:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  801bd4:	e0bfff17 	ldw	r2,-4(fp)
  801bd8:	10800417 	ldw	r2,16(r2)
  801bdc:	1005003a 	cmpeq	r2,r2,zero
  801be0:	1000031e 	bne	r2,zero,801bf0 <_ZN4FIFOIcED0Ev+0x40>
  801be4:	e0bfff17 	ldw	r2,-4(fp)
  801be8:	11000417 	ldw	r4,16(r2)
  801bec:	080214c0 	call	80214c <_ZdaPv>
  801bf0:	00800044 	movi	r2,1
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	1005003a 	cmpeq	r2,r2,zero
  801bfc:	1000021e 	bne	r2,zero,801c08 <_ZN4FIFOIcED0Ev+0x58>
  801c00:	e13fff17 	ldw	r4,-4(fp)
  801c04:	08021400 	call	802140 <_ZdlPv>
  801c08:	e037883a 	mov	sp,fp
  801c0c:	dfc00117 	ldw	ra,4(sp)
  801c10:	df000017 	ldw	fp,0(sp)
  801c14:	dec00204 	addi	sp,sp,8
  801c18:	f800283a 	ret

00801c1c <_ZN4FIFOIcED1Ev>:
			_x = new T[depth];
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
  801c1c:	defffd04 	addi	sp,sp,-12
  801c20:	dfc00215 	stw	ra,8(sp)
  801c24:	df000115 	stw	fp,4(sp)
  801c28:	df000104 	addi	fp,sp,4
  801c2c:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  801c30:	00c02074 	movhi	r3,129
  801c34:	18c4a704 	addi	r3,r3,4764
  801c38:	e0bfff17 	ldw	r2,-4(fp)
  801c3c:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  801c40:	e0bfff17 	ldw	r2,-4(fp)
  801c44:	10800417 	ldw	r2,16(r2)
  801c48:	1005003a 	cmpeq	r2,r2,zero
  801c4c:	1000031e 	bne	r2,zero,801c5c <_ZN4FIFOIcED1Ev+0x40>
  801c50:	e0bfff17 	ldw	r2,-4(fp)
  801c54:	11000417 	ldw	r4,16(r2)
  801c58:	080214c0 	call	80214c <_ZdaPv>
  801c5c:	0005883a 	mov	r2,zero
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1005003a 	cmpeq	r2,r2,zero
  801c68:	1000021e 	bne	r2,zero,801c74 <_ZN4FIFOIcED1Ev+0x58>
  801c6c:	e13fff17 	ldw	r4,-4(fp)
  801c70:	08021400 	call	802140 <_ZdlPv>
  801c74:	e037883a 	mov	sp,fp
  801c78:	dfc00117 	ldw	ra,4(sp)
  801c7c:	df000017 	ldw	fp,0(sp)
  801c80:	dec00204 	addi	sp,sp,8
  801c84:	f800283a 	ret

00801c88 <main>:
#include "system.h"
#include "FSM.h"


int main() {
  801c88:	deffe504 	addi	sp,sp,-108
  801c8c:	dfc01a15 	stw	ra,104(sp)
  801c90:	df001915 	stw	fp,100(sp)
  801c94:	ddc01815 	stw	r23,96(sp)
  801c98:	dd801715 	stw	r22,92(sp)
  801c9c:	dd401615 	stw	r21,88(sp)
  801ca0:	dd001515 	stw	r20,84(sp)
  801ca4:	dcc01415 	stw	r19,80(sp)
  801ca8:	dc801315 	stw	r18,76(sp)
  801cac:	dc401215 	stw	r17,72(sp)
  801cb0:	dc001115 	stw	r16,68(sp)
  801cb4:	df001104 	addi	fp,sp,68
  801cb8:	00802034 	movhi	r2,128
  801cbc:	108a1704 	addi	r2,r2,10332
  801cc0:	e0bff615 	stw	r2,-40(fp)
  801cc4:	00802074 	movhi	r2,129
  801cc8:	10845104 	addi	r2,r2,4420
  801ccc:	e0bff715 	stw	r2,-36(fp)
  801cd0:	e0bff804 	addi	r2,fp,-32
  801cd4:	e0ffef04 	addi	r3,fp,-68
  801cd8:	10c00015 	stw	r3,0(r2)
  801cdc:	00c02034 	movhi	r3,128
  801ce0:	18c74904 	addi	r3,r3,7460
  801ce4:	10c00115 	stw	r3,4(r2)
  801ce8:	16c00215 	stw	sp,8(r2)
  801cec:	e13ff004 	addi	r4,fp,-64
  801cf0:	08038440 	call	803844 <_Unwind_SjLj_Register>
	FSM* fsm= new FSM();
  801cf4:	00bfffc4 	movi	r2,-1
  801cf8:	e0bff115 	stw	r2,-60(fp)
  801cfc:	01000504 	movi	r4,20
  801d00:	08031dc0 	call	8031dc <_Znwm>
  801d04:	e0bffe15 	stw	r2,-8(fp)
  801d08:	00800044 	movi	r2,1
  801d0c:	e0bff115 	stw	r2,-60(fp)
  801d10:	e13ffe17 	ldw	r4,-8(fp)
  801d14:	08002180 	call	800218 <_ZN3FSMC1Ev>
  801d18:	e0bffe17 	ldw	r2,-8(fp)
  801d1c:	e0bfef15 	stw	r2,-68(fp)
  801d20:	00000d06 	br	801d58 <main+0xd0>
  801d24:	e7001104 	addi	fp,fp,68
  801d28:	e0fff217 	ldw	r3,-56(fp)
  801d2c:	e0ffff15 	stw	r3,-4(fp)
  801d30:	e0bfff17 	ldw	r2,-4(fp)
  801d34:	e0bffd15 	stw	r2,-12(fp)
  801d38:	e13ffe17 	ldw	r4,-8(fp)
  801d3c:	08021400 	call	802140 <_ZdlPv>
  801d40:	e0fffd17 	ldw	r3,-12(fp)
  801d44:	e0ffff15 	stw	r3,-4(fp)
  801d48:	00bfffc4 	movi	r2,-1
  801d4c:	e0bff115 	stw	r2,-60(fp)
  801d50:	e13fff17 	ldw	r4,-4(fp)
  801d54:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
	while (1) {
		fsm->action();
  801d58:	00bfffc4 	movi	r2,-1
  801d5c:	e0bff115 	stw	r2,-60(fp)
  801d60:	e13fef17 	ldw	r4,-68(fp)
  801d64:	08007c00 	call	8007c0 <_ZN3FSM6actionEv>
		fsm->transition();
  801d68:	e13fef17 	ldw	r4,-68(fp)
  801d6c:	08002500 	call	800250 <_ZN3FSM10transitionEv>
#include "FSM.h"


int main() {
	FSM* fsm= new FSM();
	while (1) {
  801d70:	003ff906 	br	801d58 <main+0xd0>

00801d74 <__cxa_rethrow>:
  801d74:	defffe04 	addi	sp,sp,-8
  801d78:	dc400015 	stw	r17,0(sp)
  801d7c:	dfc00115 	stw	ra,4(sp)
  801d80:	08030c80 	call	8030c8 <__cxa_get_globals>
  801d84:	100b883a 	mov	r5,r2
  801d88:	10800117 	ldw	r2,4(r2)
  801d8c:	2c400017 	ldw	r17,0(r5)
  801d90:	10800044 	addi	r2,r2,1
  801d94:	28800115 	stw	r2,4(r5)
  801d98:	88000b26 	beq	r17,zero,801dc8 <__cxa_rethrow+0x54>
  801d9c:	88c00b17 	ldw	r3,44(r17)
  801da0:	0090caf4 	movhi	r2,17195
  801da4:	108ac004 	addi	r2,r2,11008
  801da8:	89000c17 	ldw	r4,48(r17)
  801dac:	18800726 	beq	r3,r2,801dcc <__cxa_rethrow+0x58>
  801db0:	28000015 	stw	zero,0(r5)
  801db4:	8c400b04 	addi	r17,r17,44
  801db8:	8809883a 	mov	r4,r17
  801dbc:	0803d340 	call	803d34 <_Unwind_SjLj_Resume_or_Rethrow>
  801dc0:	8809883a 	mov	r4,r17
  801dc4:	08020280 	call	802028 <__cxa_begin_catch>
  801dc8:	080319c0 	call	80319c <_ZSt9terminatev>
  801dcc:	0091d3b4 	movhi	r2,18254
  801dd0:	109550c4 	addi	r2,r2,21827
  801dd4:	20bff61e 	bne	r4,r2,801db0 <__cxa_rethrow+0x3c>
  801dd8:	88800517 	ldw	r2,20(r17)
  801ddc:	0085c83a 	sub	r2,zero,r2
  801de0:	88800515 	stw	r2,20(r17)
  801de4:	003ff306 	br	801db4 <__cxa_rethrow+0x40>

00801de8 <__cxa_throw>:
  801de8:	00802074 	movhi	r2,129
  801dec:	108d6e04 	addi	r2,r2,13752
  801df0:	00c02074 	movhi	r3,129
  801df4:	18cd6d04 	addi	r3,r3,13748
  801df8:	12000017 	ldw	r8,0(r2)
  801dfc:	19c00017 	ldw	r7,0(r3)
  801e00:	defffe04 	addi	sp,sp,-8
  801e04:	213ff004 	addi	r4,r4,-64
  801e08:	dfc00115 	stw	ra,4(sp)
  801e0c:	dc400015 	stw	r17,0(sp)
  801e10:	0090caf4 	movhi	r2,17195
  801e14:	108ac004 	addi	r2,r2,11008
  801e18:	20800b15 	stw	r2,44(r4)
  801e1c:	00d1d3b4 	movhi	r3,18254
  801e20:	18d550c4 	addi	r3,r3,21827
  801e24:	24400b04 	addi	r17,r4,44
  801e28:	00802034 	movhi	r2,128
  801e2c:	10879704 	addi	r2,r2,7772
  801e30:	21400015 	stw	r5,0(r4)
  801e34:	21800115 	stw	r6,4(r4)
  801e38:	22000215 	stw	r8,8(r4)
  801e3c:	21c00315 	stw	r7,12(r4)
  801e40:	20c00c15 	stw	r3,48(r4)
  801e44:	20800d15 	stw	r2,52(r4)
  801e48:	8809883a 	mov	r4,r17
  801e4c:	0803b6c0 	call	803b6c <_Unwind_SjLj_RaiseException>
  801e50:	8809883a 	mov	r4,r17
  801e54:	08020280 	call	802028 <__cxa_begin_catch>
  801e58:	080319c0 	call	80319c <_ZSt9terminatev>

00801e5c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
  801e5c:	defffe04 	addi	sp,sp,-8
  801e60:	00800044 	movi	r2,1
  801e64:	dfc00115 	stw	ra,4(sp)
  801e68:	dc000015 	stw	r16,0(sp)
  801e6c:	28fff504 	addi	r3,r5,-44
  801e70:	11001036 	bltu	r2,r4,801eb4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  801e74:	18800117 	ldw	r2,4(r3)
  801e78:	10000826 	beq	r2,zero,801e9c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  801e7c:	2c000504 	addi	r16,r5,20
  801e80:	8009883a 	mov	r4,r16
  801e84:	103ee83a 	callr	r2
  801e88:	8009883a 	mov	r4,r16
  801e8c:	dfc00117 	ldw	ra,4(sp)
  801e90:	dc000017 	ldw	r16,0(sp)
  801e94:	dec00204 	addi	sp,sp,8
  801e98:	08034681 	jmpi	803468 <__cxa_free_exception>
  801e9c:	2c000504 	addi	r16,r5,20
  801ea0:	8009883a 	mov	r4,r16
  801ea4:	dfc00117 	ldw	ra,4(sp)
  801ea8:	dc000017 	ldw	r16,0(sp)
  801eac:	dec00204 	addi	sp,sp,8
  801eb0:	08034681 	jmpi	803468 <__cxa_free_exception>
  801eb4:	19000317 	ldw	r4,12(r3)
  801eb8:	08030f80 	call	8030f8 <_ZN10__cxxabiv111__terminateEPFvvE>

00801ebc <_Znam>:
  801ebc:	deffee04 	addi	sp,sp,-72
  801ec0:	00802034 	movhi	r2,128
  801ec4:	108a1704 	addi	r2,r2,10332
  801ec8:	d8800615 	stw	r2,24(sp)
  801ecc:	00c02074 	movhi	r3,129
  801ed0:	18c45304 	addi	r3,r3,4428
  801ed4:	00802034 	movhi	r2,128
  801ed8:	1087ce04 	addi	r2,r2,7992
  801edc:	d9000e15 	stw	r4,56(sp)
  801ee0:	d809883a 	mov	r4,sp
  801ee4:	d8800915 	stw	r2,36(sp)
  801ee8:	dfc01115 	stw	ra,68(sp)
  801eec:	df001015 	stw	fp,64(sp)
  801ef0:	ddc00f15 	stw	r23,60(sp)
  801ef4:	d8c00715 	stw	r3,28(sp)
  801ef8:	dec00815 	stw	sp,32(sp)
  801efc:	dec00a15 	stw	sp,40(sp)
  801f00:	08038440 	call	803844 <_Unwind_SjLj_Register>
  801f04:	00800044 	movi	r2,1
  801f08:	d8800115 	stw	r2,4(sp)
  801f0c:	d9000e17 	ldw	r4,56(sp)
  801f10:	08031dc0 	call	8031dc <_Znwm>
  801f14:	d809883a 	mov	r4,sp
  801f18:	d8800d15 	stw	r2,52(sp)
  801f1c:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  801f20:	d8800d17 	ldw	r2,52(sp)
  801f24:	dfc01117 	ldw	ra,68(sp)
  801f28:	df001017 	ldw	fp,64(sp)
  801f2c:	ddc00f17 	ldw	r23,60(sp)
  801f30:	dec01204 	addi	sp,sp,72
  801f34:	f800283a 	ret
  801f38:	d8800317 	ldw	r2,12(sp)
  801f3c:	00ffffc4 	movi	r3,-1
  801f40:	d9000217 	ldw	r4,8(sp)
  801f44:	10c00226 	beq	r2,r3,801f50 <_Znam+0x94>
  801f48:	d8c00115 	stw	r3,4(sp)
  801f4c:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  801f50:	00bfffc4 	movi	r2,-1
  801f54:	d8800115 	stw	r2,4(sp)
  801f58:	08026dc0 	call	8026dc <__cxa_call_unexpected>

00801f5c <__cxa_get_exception_ptr>:
  801f5c:	20bfff17 	ldw	r2,-4(r4)
  801f60:	f800283a 	ret

00801f64 <_ZSt18uncaught_exceptionv>:
  801f64:	deffff04 	addi	sp,sp,-4
  801f68:	dfc00015 	stw	ra,0(sp)
  801f6c:	08030c80 	call	8030c8 <__cxa_get_globals>
  801f70:	10800117 	ldw	r2,4(r2)
  801f74:	1004c03a 	cmpne	r2,r2,zero
  801f78:	dfc00017 	ldw	ra,0(sp)
  801f7c:	dec00104 	addi	sp,sp,4
  801f80:	f800283a 	ret

00801f84 <__cxa_end_catch>:
  801f84:	deffff04 	addi	sp,sp,-4
  801f88:	dfc00015 	stw	ra,0(sp)
  801f8c:	08030c00 	call	8030c0 <__cxa_get_globals_fast>
  801f90:	11000017 	ldw	r4,0(r2)
  801f94:	1007883a 	mov	r3,r2
  801f98:	20001326 	beq	r4,zero,801fe8 <__cxa_end_catch+0x64>
  801f9c:	21400b17 	ldw	r5,44(r4)
  801fa0:	0090caf4 	movhi	r2,17195
  801fa4:	108ac004 	addi	r2,r2,11008
  801fa8:	21800c17 	ldw	r6,48(r4)
  801fac:	28800526 	beq	r5,r2,801fc4 <__cxa_end_catch+0x40>
  801fb0:	21000b04 	addi	r4,r4,44
  801fb4:	18000015 	stw	zero,0(r3)
  801fb8:	dfc00017 	ldw	ra,0(sp)
  801fbc:	dec00104 	addi	sp,sp,4
  801fc0:	0803a041 	jmpi	803a04 <_Unwind_DeleteException>
  801fc4:	0091d3b4 	movhi	r2,18254
  801fc8:	109550c4 	addi	r2,r2,21827
  801fcc:	30bff81e 	bne	r6,r2,801fb0 <__cxa_end_catch+0x2c>
  801fd0:	20800517 	ldw	r2,20(r4)
  801fd4:	10000e16 	blt	r2,zero,802010 <__cxa_end_catch+0x8c>
  801fd8:	117fffc4 	addi	r5,r2,-1
  801fdc:	28000526 	beq	r5,zero,801ff4 <__cxa_end_catch+0x70>
  801fe0:	28000a16 	blt	r5,zero,80200c <__cxa_end_catch+0x88>
  801fe4:	21400515 	stw	r5,20(r4)
  801fe8:	dfc00017 	ldw	ra,0(sp)
  801fec:	dec00104 	addi	sp,sp,4
  801ff0:	f800283a 	ret
  801ff4:	20800417 	ldw	r2,16(r4)
  801ff8:	21000b04 	addi	r4,r4,44
  801ffc:	18800015 	stw	r2,0(r3)
  802000:	dfc00017 	ldw	ra,0(sp)
  802004:	dec00104 	addi	sp,sp,4
  802008:	0803a041 	jmpi	803a04 <_Unwind_DeleteException>
  80200c:	080319c0 	call	80319c <_ZSt9terminatev>
  802010:	11400044 	addi	r5,r2,1
  802014:	283ff31e 	bne	r5,zero,801fe4 <__cxa_end_catch+0x60>
  802018:	20800417 	ldw	r2,16(r4)
  80201c:	21400515 	stw	r5,20(r4)
  802020:	18800015 	stw	r2,0(r3)
  802024:	003ff006 	br	801fe8 <__cxa_end_catch+0x64>

00802028 <__cxa_begin_catch>:
  802028:	deffee04 	addi	sp,sp,-72
  80202c:	00802034 	movhi	r2,128
  802030:	108a1704 	addi	r2,r2,10332
  802034:	00c02074 	movhi	r3,129
  802038:	18c45804 	addi	r3,r3,4448
  80203c:	d8800615 	stw	r2,24(sp)
  802040:	d9000e15 	stw	r4,56(sp)
  802044:	00802034 	movhi	r2,128
  802048:	10884704 	addi	r2,r2,8476
  80204c:	d809883a 	mov	r4,sp
  802050:	d8c00715 	stw	r3,28(sp)
  802054:	dfc01115 	stw	ra,68(sp)
  802058:	d8800915 	stw	r2,36(sp)
  80205c:	df001015 	stw	fp,64(sp)
  802060:	ddc00f15 	stw	r23,60(sp)
  802064:	dec00815 	stw	sp,32(sp)
  802068:	dec00a15 	stw	sp,40(sp)
  80206c:	08038440 	call	803844 <_Unwind_SjLj_Register>
  802070:	08030c80 	call	8030c8 <__cxa_get_globals>
  802074:	100d883a 	mov	r6,r2
  802078:	d8800e17 	ldw	r2,56(sp)
  80207c:	31c00017 	ldw	r7,0(r6)
  802080:	117ff504 	addi	r5,r2,-44
  802084:	28c00b17 	ldw	r3,44(r5)
  802088:	0090caf4 	movhi	r2,17195
  80208c:	108ac004 	addi	r2,r2,11008
  802090:	29000c17 	ldw	r4,48(r5)
  802094:	18800b26 	beq	r3,r2,8020c4 <__cxa_begin_catch+0x9c>
  802098:	38001d1e 	bne	r7,zero,802110 <__cxa_begin_catch+0xe8>
  80209c:	d8000d15 	stw	zero,52(sp)
  8020a0:	31400015 	stw	r5,0(r6)
  8020a4:	d809883a 	mov	r4,sp
  8020a8:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  8020ac:	d8800d17 	ldw	r2,52(sp)
  8020b0:	dfc01117 	ldw	ra,68(sp)
  8020b4:	df001017 	ldw	fp,64(sp)
  8020b8:	ddc00f17 	ldw	r23,60(sp)
  8020bc:	dec01204 	addi	sp,sp,72
  8020c0:	f800283a 	ret
  8020c4:	0091d3b4 	movhi	r2,18254
  8020c8:	109550c4 	addi	r2,r2,21827
  8020cc:	20bff21e 	bne	r4,r2,802098 <__cxa_begin_catch+0x70>
  8020d0:	28c00517 	ldw	r3,20(r5)
  8020d4:	18000b16 	blt	r3,zero,802104 <__cxa_begin_catch+0xdc>
  8020d8:	18800044 	addi	r2,r3,1
  8020dc:	28800515 	stw	r2,20(r5)
  8020e0:	30800117 	ldw	r2,4(r6)
  8020e4:	10bfffc4 	addi	r2,r2,-1
  8020e8:	30800115 	stw	r2,4(r6)
  8020ec:	39400226 	beq	r7,r5,8020f8 <__cxa_begin_catch+0xd0>
  8020f0:	29c00415 	stw	r7,16(r5)
  8020f4:	31400015 	stw	r5,0(r6)
  8020f8:	29400a17 	ldw	r5,40(r5)
  8020fc:	d9400d15 	stw	r5,52(sp)
  802100:	003fe806 	br	8020a4 <__cxa_begin_catch+0x7c>
  802104:	00800044 	movi	r2,1
  802108:	10c5c83a 	sub	r2,r2,r3
  80210c:	003ff306 	br	8020dc <__cxa_begin_catch+0xb4>
  802110:	00800044 	movi	r2,1
  802114:	d8800115 	stw	r2,4(sp)
  802118:	080319c0 	call	80319c <_ZSt9terminatev>
  80211c:	d8800317 	ldw	r2,12(sp)
  802120:	00ffffc4 	movi	r3,-1
  802124:	d9000217 	ldw	r4,8(sp)
  802128:	10c00226 	beq	r2,r3,802134 <__cxa_begin_catch+0x10c>
  80212c:	d8c00115 	stw	r3,4(sp)
  802130:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  802134:	00bfffc4 	movi	r2,-1
  802138:	d8800115 	stw	r2,4(sp)
  80213c:	08026dc0 	call	8026dc <__cxa_call_unexpected>

00802140 <_ZdlPv>:
  802140:	20000126 	beq	r4,zero,802148 <_ZdlPv+0x8>
  802144:	0803da41 	jmpi	803da4 <free>
  802148:	f800283a 	ret

0080214c <_ZdaPv>:
  80214c:	08021401 	jmpi	802140 <_ZdlPv>

00802150 <_Z12read_uleb128PKhPj>:
  802150:	000d883a 	mov	r6,zero
  802154:	000f883a 	mov	r7,zero
  802158:	20c00007 	ldb	r3,0(r4)
  80215c:	21000044 	addi	r4,r4,1
  802160:	18801fcc 	andi	r2,r3,127
  802164:	1184983a 	sll	r2,r2,r6
  802168:	318001c4 	addi	r6,r6,7
  80216c:	388eb03a 	or	r7,r7,r2
  802170:	183ff916 	blt	r3,zero,802158 <_Z12read_uleb128PKhPj+0x8>
  802174:	2005883a 	mov	r2,r4
  802178:	29c00015 	stw	r7,0(r5)
  80217c:	f800283a 	ret

00802180 <_Z12read_sleb128PKhPi>:
  802180:	000f883a 	mov	r7,zero
  802184:	0011883a 	mov	r8,zero
  802188:	20c00007 	ldb	r3,0(r4)
  80218c:	21000044 	addi	r4,r4,1
  802190:	19803fcc 	andi	r6,r3,255
  802194:	30801fcc 	andi	r2,r6,127
  802198:	11c4983a 	sll	r2,r2,r7
  80219c:	39c001c4 	addi	r7,r7,7
  8021a0:	4090b03a 	or	r8,r8,r2
  8021a4:	183ff816 	blt	r3,zero,802188 <_Z12read_sleb128PKhPi+0x8>
  8021a8:	008007c4 	movi	r2,31
  8021ac:	11c00636 	bltu	r2,r7,8021c8 <_Z12read_sleb128PKhPi+0x48>
  8021b0:	3080100c 	andi	r2,r6,64
  8021b4:	10000426 	beq	r2,zero,8021c8 <_Z12read_sleb128PKhPi+0x48>
  8021b8:	00800044 	movi	r2,1
  8021bc:	11c4983a 	sll	r2,r2,r7
  8021c0:	0085c83a 	sub	r2,zero,r2
  8021c4:	4090b03a 	or	r8,r8,r2
  8021c8:	2005883a 	mov	r2,r4
  8021cc:	2a000015 	stw	r8,0(r5)
  8021d0:	f800283a 	ret

008021d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
  8021d4:	28800017 	ldw	r2,0(r5)
  8021d8:	defffb04 	addi	sp,sp,-20
  8021dc:	30c00017 	ldw	r3,0(r6)
  8021e0:	dc400215 	stw	r17,8(sp)
  8021e4:	2823883a 	mov	r17,r5
  8021e8:	11400217 	ldw	r5,8(r2)
  8021ec:	dc800315 	stw	r18,12(sp)
  8021f0:	dc000115 	stw	r16,4(sp)
  8021f4:	dfc00415 	stw	ra,16(sp)
  8021f8:	2021883a 	mov	r16,r4
  8021fc:	d8c00015 	stw	r3,0(sp)
  802200:	8809883a 	mov	r4,r17
  802204:	3025883a 	mov	r18,r6
  802208:	283ee83a 	callr	r5
  80220c:	10803fcc 	andi	r2,r2,255
  802210:	880b883a 	mov	r5,r17
  802214:	8009883a 	mov	r4,r16
  802218:	d80d883a 	mov	r6,sp
  80221c:	01c00044 	movi	r7,1
  802220:	10000326 	beq	r2,zero,802230 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
  802224:	d8800017 	ldw	r2,0(sp)
  802228:	10c00017 	ldw	r3,0(r2)
  80222c:	d8c00015 	stw	r3,0(sp)
  802230:	80800017 	ldw	r2,0(r16)
  802234:	10c00417 	ldw	r3,16(r2)
  802238:	183ee83a 	callr	r3
  80223c:	10803fcc 	andi	r2,r2,255
  802240:	0007883a 	mov	r3,zero
  802244:	10000326 	beq	r2,zero,802254 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
  802248:	d8800017 	ldw	r2,0(sp)
  80224c:	00c00044 	movi	r3,1
  802250:	90800015 	stw	r2,0(r18)
  802254:	1805883a 	mov	r2,r3
  802258:	dfc00417 	ldw	ra,16(sp)
  80225c:	dc800317 	ldw	r18,12(sp)
  802260:	dc400217 	ldw	r17,8(sp)
  802264:	dc000117 	ldw	r16,4(sp)
  802268:	dec00504 	addi	sp,sp,20
  80226c:	f800283a 	ret

00802270 <_Z28read_encoded_value_with_basehjPKhPj>:
  802270:	defff904 	addi	sp,sp,-28
  802274:	dc400215 	stw	r17,8(sp)
  802278:	00801404 	movi	r2,80
  80227c:	24403fcc 	andi	r17,r4,255
  802280:	dd000515 	stw	r20,20(sp)
  802284:	dcc00415 	stw	r19,16(sp)
  802288:	dc800315 	stw	r18,12(sp)
  80228c:	dc000115 	stw	r16,4(sp)
  802290:	dfc00615 	stw	ra,24(sp)
  802294:	2025883a 	mov	r18,r4
  802298:	2829883a 	mov	r20,r5
  80229c:	3021883a 	mov	r16,r6
  8022a0:	3827883a 	mov	r19,r7
  8022a4:	88801826 	beq	r17,r2,802308 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
  8022a8:	88c003cc 	andi	r3,r17,15
  8022ac:	00800304 	movi	r2,12
  8022b0:	10c0012e 	bgeu	r2,r3,8022b8 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
  8022b4:	0803d8c0 	call	803d8c <abort>
  8022b8:	18c5883a 	add	r2,r3,r3
  8022bc:	1085883a 	add	r2,r2,r2
  8022c0:	00c02034 	movhi	r3,128
  8022c4:	18c8b504 	addi	r3,r3,8916
  8022c8:	10c5883a 	add	r2,r2,r3
  8022cc:	11000017 	ldw	r4,0(r2)
  8022d0:	2000683a 	jmp	r4
  8022d4:	00802344 	movi	r2,141
  8022d8:	0080242c 	andhi	r2,zero,144
  8022dc:	008023d8 	cmpnei	r2,zero,143
  8022e0:	00802344 	movi	r2,141
  8022e4:	0080239c 	xori	r2,zero,142
  8022e8:	008022b4 	movhi	r2,138
  8022ec:	008022b4 	movhi	r2,138
  8022f0:	008022b4 	movhi	r2,138
  8022f4:	008022b4 	movhi	r2,138
  8022f8:	00802414 	movui	r2,144
  8022fc:	008023f0 	cmpltui	r2,zero,143
  802300:	00802344 	movi	r2,141
  802304:	0080239c 	xori	r2,zero,142
  802308:	308000c4 	addi	r2,r6,3
  80230c:	00ffff04 	movi	r3,-4
  802310:	10c4703a 	and	r2,r2,r3
  802314:	11000017 	ldw	r4,0(r2)
  802318:	11400104 	addi	r5,r2,4
  80231c:	2805883a 	mov	r2,r5
  802320:	99000015 	stw	r4,0(r19)
  802324:	dfc00617 	ldw	ra,24(sp)
  802328:	dd000517 	ldw	r20,20(sp)
  80232c:	dcc00417 	ldw	r19,16(sp)
  802330:	dc800317 	ldw	r18,12(sp)
  802334:	dc400217 	ldw	r17,8(sp)
  802338:	dc000117 	ldw	r16,4(sp)
  80233c:	dec00704 	addi	sp,sp,28
  802340:	f800283a 	ret
  802344:	30800043 	ldbu	r2,1(r6)
  802348:	30c00083 	ldbu	r3,2(r6)
  80234c:	310000c3 	ldbu	r4,3(r6)
  802350:	31400003 	ldbu	r5,0(r6)
  802354:	1004923a 	slli	r2,r2,8
  802358:	1806943a 	slli	r3,r3,16
  80235c:	2008963a 	slli	r4,r4,24
  802360:	1144b03a 	or	r2,r2,r5
  802364:	1886b03a 	or	r3,r3,r2
  802368:	20c8b03a 	or	r4,r4,r3
  80236c:	31400104 	addi	r5,r6,4
  802370:	203fea26 	beq	r4,zero,80231c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  802374:	88c01c0c 	andi	r3,r17,112
  802378:	00800404 	movi	r2,16
  80237c:	18801426 	beq	r3,r2,8023d0 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
  802380:	90803fcc 	andi	r2,r18,255
  802384:	1080201c 	xori	r2,r2,128
  802388:	10bfe004 	addi	r2,r2,-128
  80238c:	2509883a 	add	r4,r4,r20
  802390:	103fe20e 	bge	r2,zero,80231c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  802394:	21000017 	ldw	r4,0(r4)
  802398:	003fe006 	br	80231c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  80239c:	30800043 	ldbu	r2,1(r6)
  8023a0:	31800083 	ldbu	r6,2(r6)
  8023a4:	820000c3 	ldbu	r8,3(r16)
  8023a8:	1004923a 	slli	r2,r2,8
  8023ac:	82400003 	ldbu	r9,0(r16)
  8023b0:	300c943a 	slli	r6,r6,16
  8023b4:	4010963a 	slli	r8,r8,24
  8023b8:	1244b03a 	or	r2,r2,r9
  8023bc:	308cb03a 	or	r6,r6,r2
  8023c0:	4184b03a 	or	r2,r8,r6
  8023c4:	1009883a 	mov	r4,r2
  8023c8:	81400204 	addi	r5,r16,8
  8023cc:	003fe806 	br	802370 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  8023d0:	8029883a 	mov	r20,r16
  8023d4:	003fea06 	br	802380 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
  8023d8:	30800043 	ldbu	r2,1(r6)
  8023dc:	30c00003 	ldbu	r3,0(r6)
  8023e0:	31400084 	addi	r5,r6,2
  8023e4:	1004923a 	slli	r2,r2,8
  8023e8:	10c8b03a 	or	r4,r2,r3
  8023ec:	003fe006 	br	802370 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  8023f0:	30800043 	ldbu	r2,1(r6)
  8023f4:	30c00003 	ldbu	r3,0(r6)
  8023f8:	31400084 	addi	r5,r6,2
  8023fc:	1004923a 	slli	r2,r2,8
  802400:	10c4b03a 	or	r2,r2,r3
  802404:	113fffcc 	andi	r4,r2,65535
  802408:	2120001c 	xori	r4,r4,32768
  80240c:	21200004 	addi	r4,r4,-32768
  802410:	003fd706 	br	802370 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  802414:	3009883a 	mov	r4,r6
  802418:	d80b883a 	mov	r5,sp
  80241c:	08021800 	call	802180 <_Z12read_sleb128PKhPi>
  802420:	d9000017 	ldw	r4,0(sp)
  802424:	100b883a 	mov	r5,r2
  802428:	003fd106 	br	802370 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  80242c:	3009883a 	mov	r4,r6
  802430:	d80b883a 	mov	r5,sp
  802434:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802438:	d9000017 	ldw	r4,0(sp)
  80243c:	100b883a 	mov	r5,r2
  802440:	003fcb06 	br	802370 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

00802444 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
  802444:	deffff04 	addi	sp,sp,-4
  802448:	21003fcc 	andi	r4,r4,255
  80244c:	00803fc4 	movi	r2,255
  802450:	dfc00015 	stw	ra,0(sp)
  802454:	20800c26 	beq	r4,r2,802488 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  802458:	21001c0c 	andi	r4,r4,112
  80245c:	00800804 	movi	r2,32
  802460:	20800d26 	beq	r4,r2,802498 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
  802464:	1100070e 	bge	r2,r4,802484 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
  802468:	00801004 	movi	r2,64
  80246c:	20801126 	beq	r4,r2,8024b4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
  802470:	00801404 	movi	r2,80
  802474:	20800426 	beq	r4,r2,802488 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  802478:	00800c04 	movi	r2,48
  80247c:	20801126 	beq	r4,r2,8024c4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
  802480:	0803d8c0 	call	803d8c <abort>
  802484:	2000081e 	bne	r4,zero,8024a8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
  802488:	0005883a 	mov	r2,zero
  80248c:	dfc00017 	ldw	ra,0(sp)
  802490:	dec00104 	addi	sp,sp,4
  802494:	f800283a 	ret
  802498:	2809883a 	mov	r4,r5
  80249c:	dfc00017 	ldw	ra,0(sp)
  8024a0:	dec00104 	addi	sp,sp,4
  8024a4:	08038fc1 	jmpi	8038fc <_Unwind_GetTextRelBase>
  8024a8:	00800404 	movi	r2,16
  8024ac:	20bff626 	beq	r4,r2,802488 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  8024b0:	0803d8c0 	call	803d8c <abort>
  8024b4:	2809883a 	mov	r4,r5
  8024b8:	dfc00017 	ldw	ra,0(sp)
  8024bc:	dec00104 	addi	sp,sp,4
  8024c0:	08038e41 	jmpi	8038e4 <_Unwind_GetRegionStart>
  8024c4:	2809883a 	mov	r4,r5
  8024c8:	dfc00017 	ldw	ra,0(sp)
  8024cc:	dec00104 	addi	sp,sp,4
  8024d0:	08038f41 	jmpi	8038f4 <_Unwind_GetDataRelBase>

008024d4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  8024d4:	defffa04 	addi	sp,sp,-24
  8024d8:	dc800415 	stw	r18,16(sp)
  8024dc:	dc400315 	stw	r17,12(sp)
  8024e0:	dc000215 	stw	r16,8(sp)
  8024e4:	dfc00515 	stw	ra,20(sp)
  8024e8:	2021883a 	mov	r16,r4
  8024ec:	000f883a 	mov	r7,zero
  8024f0:	3023883a 	mov	r17,r6
  8024f4:	2825883a 	mov	r18,r5
  8024f8:	20000226 	beq	r4,zero,802504 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
  8024fc:	08038e40 	call	8038e4 <_Unwind_GetRegionStart>
  802500:	100f883a 	mov	r7,r2
  802504:	89c00015 	stw	r7,0(r17)
  802508:	90c00003 	ldbu	r3,0(r18)
  80250c:	800b883a 	mov	r5,r16
  802510:	00803fc4 	movi	r2,255
  802514:	1c003fcc 	andi	r16,r3,255
  802518:	91800044 	addi	r6,r18,1
  80251c:	8009883a 	mov	r4,r16
  802520:	18802226 	beq	r3,r2,8025ac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
  802524:	d9800115 	stw	r6,4(sp)
  802528:	08024440 	call	802444 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  80252c:	d9800117 	ldw	r6,4(sp)
  802530:	8009883a 	mov	r4,r16
  802534:	100b883a 	mov	r5,r2
  802538:	89c00104 	addi	r7,r17,4
  80253c:	08022700 	call	802270 <_Z28read_encoded_value_with_basehjPKhPj>
  802540:	100d883a 	mov	r6,r2
  802544:	30800003 	ldbu	r2,0(r6)
  802548:	31c00044 	addi	r7,r6,1
  80254c:	00c03fc4 	movi	r3,255
  802550:	d80b883a 	mov	r5,sp
  802554:	3809883a 	mov	r4,r7
  802558:	88800505 	stb	r2,20(r17)
  80255c:	10c01b26 	beq	r2,r3,8025cc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
  802560:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802564:	100f883a 	mov	r7,r2
  802568:	d8800017 	ldw	r2,0(sp)
  80256c:	3885883a 	add	r2,r7,r2
  802570:	88800315 	stw	r2,12(r17)
  802574:	38800003 	ldbu	r2,0(r7)
  802578:	39000044 	addi	r4,r7,1
  80257c:	d80b883a 	mov	r5,sp
  802580:	88800545 	stb	r2,21(r17)
  802584:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802588:	d8c00017 	ldw	r3,0(sp)
  80258c:	10c9883a 	add	r4,r2,r3
  802590:	89000415 	stw	r4,16(r17)
  802594:	dfc00517 	ldw	ra,20(sp)
  802598:	dc800417 	ldw	r18,16(sp)
  80259c:	dc400317 	ldw	r17,12(sp)
  8025a0:	dc000217 	ldw	r16,8(sp)
  8025a4:	dec00604 	addi	sp,sp,24
  8025a8:	f800283a 	ret
  8025ac:	89c00115 	stw	r7,4(r17)
  8025b0:	30800003 	ldbu	r2,0(r6)
  8025b4:	31c00044 	addi	r7,r6,1
  8025b8:	00c03fc4 	movi	r3,255
  8025bc:	d80b883a 	mov	r5,sp
  8025c0:	3809883a 	mov	r4,r7
  8025c4:	88800505 	stb	r2,20(r17)
  8025c8:	10ffe51e 	bne	r2,r3,802560 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
  8025cc:	88000315 	stw	zero,12(r17)
  8025d0:	003fe806 	br	802574 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

008025d4 <_Z15get_ttype_entryP16lsda_header_infoj>:
  8025d4:	defffe04 	addi	sp,sp,-8
  8025d8:	dfc00115 	stw	ra,4(sp)
  8025dc:	21c00503 	ldbu	r7,20(r4)
  8025e0:	00803fc4 	movi	r2,255
  8025e4:	38801a26 	beq	r7,r2,802650 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
  8025e8:	38c001cc 	andi	r3,r7,7
  8025ec:	00800084 	movi	r2,2
  8025f0:	18801326 	beq	r3,r2,802640 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
  8025f4:	10c0050e 	bge	r2,r3,80260c <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
  8025f8:	008000c4 	movi	r2,3
  8025fc:	18800426 	beq	r3,r2,802610 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
  802600:	00800104 	movi	r2,4
  802604:	18801026 	beq	r3,r2,802648 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
  802608:	0803d8c0 	call	803d8c <abort>
  80260c:	183ffe1e 	bne	r3,zero,802608 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
  802610:	2945883a 	add	r2,r5,r5
  802614:	1085883a 	add	r2,r2,r2
  802618:	21800317 	ldw	r6,12(r4)
  80261c:	21400217 	ldw	r5,8(r4)
  802620:	3809883a 	mov	r4,r7
  802624:	308dc83a 	sub	r6,r6,r2
  802628:	d80f883a 	mov	r7,sp
  80262c:	08022700 	call	802270 <_Z28read_encoded_value_with_basehjPKhPj>
  802630:	d8800017 	ldw	r2,0(sp)
  802634:	dfc00117 	ldw	ra,4(sp)
  802638:	dec00204 	addi	sp,sp,8
  80263c:	f800283a 	ret
  802640:	2945883a 	add	r2,r5,r5
  802644:	003ff406 	br	802618 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  802648:	280490fa 	slli	r2,r5,3
  80264c:	003ff206 	br	802618 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  802650:	0005883a 	mov	r2,zero
  802654:	003ff006 	br	802618 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

00802658 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
  802658:	20800317 	ldw	r2,12(r4)
  80265c:	defffa04 	addi	sp,sp,-24
  802660:	dc800415 	stw	r18,16(sp)
  802664:	11c5c83a 	sub	r2,r2,r7
  802668:	dc400315 	stw	r17,12(sp)
  80266c:	dc000215 	stw	r16,8(sp)
  802670:	dfc00515 	stw	ra,20(sp)
  802674:	2023883a 	mov	r17,r4
  802678:	d9800115 	stw	r6,4(sp)
  80267c:	2825883a 	mov	r18,r5
  802680:	143fffc4 	addi	r16,r2,-1
  802684:	8009883a 	mov	r4,r16
  802688:	d80b883a 	mov	r5,sp
  80268c:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802690:	1021883a 	mov	r16,r2
  802694:	d8800017 	ldw	r2,0(sp)
  802698:	8809883a 	mov	r4,r17
  80269c:	100b883a 	mov	r5,r2
  8026a0:	10000826 	beq	r2,zero,8026c4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
  8026a4:	08025d40 	call	8025d4 <_Z15get_ttype_entryP16lsda_header_infoj>
  8026a8:	1009883a 	mov	r4,r2
  8026ac:	900b883a 	mov	r5,r18
  8026b0:	d9800104 	addi	r6,sp,4
  8026b4:	08021d40 	call	8021d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  8026b8:	10803fcc 	andi	r2,r2,255
  8026bc:	103ff126 	beq	r2,zero,802684 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
  8026c0:	00800044 	movi	r2,1
  8026c4:	dfc00517 	ldw	ra,20(sp)
  8026c8:	dc800417 	ldw	r18,16(sp)
  8026cc:	dc400317 	ldw	r17,12(sp)
  8026d0:	dc000217 	ldw	r16,8(sp)
  8026d4:	dec00604 	addi	sp,sp,24
  8026d8:	f800283a 	ret

008026dc <__cxa_call_unexpected>:
  8026dc:	deffe204 	addi	sp,sp,-120
  8026e0:	00802034 	movhi	r2,128
  8026e4:	108a1704 	addi	r2,r2,10332
  8026e8:	00c02074 	movhi	r3,129
  8026ec:	18c45c04 	addi	r3,r3,4464
  8026f0:	d8800c15 	stw	r2,48(sp)
  8026f4:	d9001815 	stw	r4,96(sp)
  8026f8:	00802034 	movhi	r2,128
  8026fc:	1089d904 	addi	r2,r2,10084
  802700:	d9000604 	addi	r4,sp,24
  802704:	d8c00d15 	stw	r3,52(sp)
  802708:	dfc01d15 	stw	ra,116(sp)
  80270c:	d8800f15 	stw	r2,60(sp)
  802710:	df001c15 	stw	fp,112(sp)
  802714:	ddc01b15 	stw	r23,108(sp)
  802718:	dec00e15 	stw	sp,56(sp)
  80271c:	dec01015 	stw	sp,64(sp)
  802720:	08038440 	call	803844 <_Unwind_SjLj_Register>
  802724:	d9001817 	ldw	r4,96(sp)
  802728:	08020280 	call	802028 <__cxa_begin_catch>
  80272c:	d8801817 	ldw	r2,96(sp)
  802730:	10fff504 	addi	r3,r2,-44
  802734:	18800917 	ldw	r2,36(r3)
  802738:	19400617 	ldw	r5,24(r3)
  80273c:	19000217 	ldw	r4,8(r3)
  802740:	d8800215 	stw	r2,8(sp)
  802744:	18800817 	ldw	r2,32(r3)
  802748:	18c00317 	ldw	r3,12(r3)
  80274c:	d9401615 	stw	r5,88(sp)
  802750:	d8801715 	stw	r2,92(sp)
  802754:	00800084 	movi	r2,2
  802758:	d8c01515 	stw	r3,84(sp)
  80275c:	d8800715 	stw	r2,28(sp)
  802760:	08031b40 	call	8031b4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  802764:	d8800717 	ldw	r2,28(sp)
  802768:	d8c00817 	ldw	r3,32(sp)
  80276c:	d8801a15 	stw	r2,104(sp)
  802770:	d9401a17 	ldw	r5,104(sp)
  802774:	00800044 	movi	r2,1
  802778:	d8c01915 	stw	r3,100(sp)
  80277c:	28800826 	beq	r5,r2,8027a0 <__cxa_call_unexpected+0xc4>
  802780:	d8000715 	stw	zero,28(sp)
  802784:	0801f840 	call	801f84 <__cxa_end_catch>
  802788:	d8000715 	stw	zero,28(sp)
  80278c:	0801f840 	call	801f84 <__cxa_end_catch>
  802790:	d9001917 	ldw	r4,100(sp)
  802794:	00bfffc4 	movi	r2,-1
  802798:	d8800715 	stw	r2,28(sp)
  80279c:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  8027a0:	d9001917 	ldw	r4,100(sp)
  8027a4:	08020280 	call	802028 <__cxa_begin_catch>
  8027a8:	08030c00 	call	8030c0 <__cxa_get_globals_fast>
  8027ac:	10800017 	ldw	r2,0(r2)
  8027b0:	d8c01a17 	ldw	r3,104(sp)
  8027b4:	0009883a 	mov	r4,zero
  8027b8:	11401004 	addi	r5,r2,64
  8027bc:	d9401315 	stw	r5,76(sp)
  8027c0:	d8801415 	stw	r2,80(sp)
  8027c4:	d8c00715 	stw	r3,28(sp)
  8027c8:	d9401717 	ldw	r5,92(sp)
  8027cc:	d80d883a 	mov	r6,sp
  8027d0:	08024d40 	call	8024d4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  8027d4:	d8801417 	ldw	r2,80(sp)
  8027d8:	d809883a 	mov	r4,sp
  8027dc:	d9801317 	ldw	r6,76(sp)
  8027e0:	11400017 	ldw	r5,0(r2)
  8027e4:	d9c01617 	ldw	r7,88(sp)
  8027e8:	08026580 	call	802658 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  8027ec:	10803fcc 	andi	r2,r2,255
  8027f0:	1000151e 	bne	r2,zero,802848 <__cxa_call_unexpected+0x16c>
  8027f4:	d8c01a17 	ldw	r3,104(sp)
  8027f8:	d809883a 	mov	r4,sp
  8027fc:	01402074 	movhi	r5,129
  802800:	2944ec04 	addi	r5,r5,5040
  802804:	d8c00715 	stw	r3,28(sp)
  802808:	000d883a 	mov	r6,zero
  80280c:	d9c01617 	ldw	r7,88(sp)
  802810:	08026580 	call	802658 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  802814:	10803fcc 	andi	r2,r2,255
  802818:	10000c26 	beq	r2,zero,80284c <__cxa_call_unexpected+0x170>
  80281c:	01000104 	movi	r4,4
  802820:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  802824:	1009883a 	mov	r4,r2
  802828:	00802074 	movhi	r2,129
  80282c:	1084df04 	addi	r2,r2,4988
  802830:	20800015 	stw	r2,0(r4)
  802834:	01402074 	movhi	r5,129
  802838:	2944ec04 	addi	r5,r5,5040
  80283c:	01802034 	movhi	r6,128
  802840:	318ce504 	addi	r6,r6,13204
  802844:	0801de80 	call	801de8 <__cxa_throw>
  802848:	0801d740 	call	801d74 <__cxa_rethrow>
  80284c:	d9401a17 	ldw	r5,104(sp)
  802850:	d9001517 	ldw	r4,84(sp)
  802854:	d9400715 	stw	r5,28(sp)
  802858:	08030f80 	call	8030f8 <_ZN10__cxxabiv111__terminateEPFvvE>

0080285c <__gxx_personality_sj0>:
  80285c:	deffd304 	addi	sp,sp,-180
  802860:	00802034 	movhi	r2,128
  802864:	108b3e04 	addi	r2,r2,11512
  802868:	00c02074 	movhi	r3,129
  80286c:	18c46004 	addi	r3,r3,4480
  802870:	d8801315 	stw	r2,76(sp)
  802874:	d9002315 	stw	r4,140(sp)
  802878:	00802034 	movhi	r2,128
  80287c:	108a1704 	addi	r2,r2,10332
  802880:	d9000a04 	addi	r4,sp,40
  802884:	d8801015 	stw	r2,64(sp)
  802888:	d8c01115 	stw	r3,68(sp)
  80288c:	dfc02c15 	stw	ra,176(sp)
  802890:	df002b15 	stw	fp,172(sp)
  802894:	ddc02a15 	stw	r23,168(sp)
  802898:	dec01215 	stw	sp,72(sp)
  80289c:	dec01415 	stw	sp,80(sp)
  8028a0:	d9802515 	stw	r6,148(sp)
  8028a4:	d9402415 	stw	r5,144(sp)
  8028a8:	d9c02615 	stw	r7,152(sp)
  8028ac:	08038440 	call	803844 <_Unwind_SjLj_Register>
  8028b0:	d8c02317 	ldw	r3,140(sp)
  8028b4:	00800044 	movi	r2,1
  8028b8:	18800a26 	beq	r3,r2,8028e4 <__gxx_personality_sj0+0x88>
  8028bc:	010000c4 	movi	r4,3
  8028c0:	d9002215 	stw	r4,136(sp)
  8028c4:	d9000a04 	addi	r4,sp,40
  8028c8:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  8028cc:	d8802217 	ldw	r2,136(sp)
  8028d0:	dfc02c17 	ldw	ra,176(sp)
  8028d4:	df002b17 	ldw	fp,172(sp)
  8028d8:	ddc02a17 	ldw	r23,168(sp)
  8028dc:	dec02d04 	addi	sp,sp,180
  8028e0:	f800283a 	ret
  8028e4:	d9402d17 	ldw	r5,180(sp)
  8028e8:	d9002517 	ldw	r4,148(sp)
  8028ec:	0007883a 	mov	r3,zero
  8028f0:	28800504 	addi	r2,r5,20
  8028f4:	d8800015 	stw	r2,0(sp)
  8028f8:	28bff504 	addi	r2,r5,-44
  8028fc:	d8801a15 	stw	r2,104(sp)
  802900:	0090caf4 	movhi	r2,17195
  802904:	108ac004 	addi	r2,r2,11008
  802908:	2080ad26 	beq	r4,r2,802bc0 <__gxx_personality_sj0+0x364>
  80290c:	d8c02105 	stb	r3,132(sp)
  802910:	d8c02417 	ldw	r3,144(sp)
  802914:	00800184 	movi	r2,6
  802918:	1880281e 	bne	r3,r2,8029bc <__gxx_personality_sj0+0x160>
  80291c:	d8802103 	ldbu	r2,132(sp)
  802920:	10002626 	beq	r2,zero,8029bc <__gxx_personality_sj0+0x160>
  802924:	d9001a17 	ldw	r4,104(sp)
  802928:	d9401a17 	ldw	r5,104(sp)
  80292c:	d8801a17 	ldw	r2,104(sp)
  802930:	21000917 	ldw	r4,36(r4)
  802934:	29400617 	ldw	r5,24(r5)
  802938:	10800817 	ldw	r2,32(r2)
  80293c:	d9001d15 	stw	r4,116(sp)
  802940:	d9401b15 	stw	r5,108(sp)
  802944:	d8802015 	stw	r2,128(sp)
  802948:	2000ad1e 	bne	r4,zero,802c00 <__gxx_personality_sj0+0x3a4>
  80294c:	01000044 	movi	r4,1
  802950:	00800044 	movi	r2,1
  802954:	2080e126 	beq	r4,r2,802cdc <__gxx_personality_sj0+0x480>
  802958:	d8801b17 	ldw	r2,108(sp)
  80295c:	1000d316 	blt	r2,zero,802cac <__gxx_personality_sj0+0x450>
  802960:	d9802d17 	ldw	r6,180(sp)
  802964:	d9002e17 	ldw	r4,184(sp)
  802968:	00bfffc4 	movi	r2,-1
  80296c:	000b883a 	mov	r5,zero
  802970:	d8800b15 	stw	r2,44(sp)
  802974:	080388c0 	call	80388c <_Unwind_SetGR>
  802978:	d9801b17 	ldw	r6,108(sp)
  80297c:	d9002e17 	ldw	r4,184(sp)
  802980:	01400044 	movi	r5,1
  802984:	080388c0 	call	80388c <_Unwind_SetGR>
  802988:	d9002e17 	ldw	r4,184(sp)
  80298c:	d9401d17 	ldw	r5,116(sp)
  802990:	08038c80 	call	8038c8 <_Unwind_SetIP>
  802994:	010001c4 	movi	r4,7
  802998:	d9002215 	stw	r4,136(sp)
  80299c:	d9000a04 	addi	r4,sp,40
  8029a0:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  8029a4:	d8802217 	ldw	r2,136(sp)
  8029a8:	dfc02c17 	ldw	ra,176(sp)
  8029ac:	df002b17 	ldw	fp,172(sp)
  8029b0:	ddc02a17 	ldw	r23,168(sp)
  8029b4:	dec02d04 	addi	sp,sp,180
  8029b8:	f800283a 	ret
  8029bc:	d9002e17 	ldw	r4,184(sp)
  8029c0:	00ffffc4 	movi	r3,-1
  8029c4:	d8c00b15 	stw	r3,44(sp)
  8029c8:	08038d80 	call	8038d8 <_Unwind_GetLanguageSpecificData>
  8029cc:	10007226 	beq	r2,zero,802b98 <__gxx_personality_sj0+0x33c>
  8029d0:	d9002e17 	ldw	r4,184(sp)
  8029d4:	d9800404 	addi	r6,sp,16
  8029d8:	100b883a 	mov	r5,r2
  8029dc:	d8802015 	stw	r2,128(sp)
  8029e0:	08024d40 	call	8024d4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  8029e4:	d9000903 	ldbu	r4,36(sp)
  8029e8:	d9402e17 	ldw	r5,184(sp)
  8029ec:	d8801e15 	stw	r2,120(sp)
  8029f0:	08024440 	call	802444 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  8029f4:	d9002e17 	ldw	r4,184(sp)
  8029f8:	d8800615 	stw	r2,24(sp)
  8029fc:	08038a40 	call	8038a4 <_Unwind_GetIP>
  802a00:	10bfffc4 	addi	r2,r2,-1
  802a04:	d8801c15 	stw	r2,112(sp)
  802a08:	10006316 	blt	r2,zero,802b98 <__gxx_personality_sj0+0x33c>
  802a0c:	10001b1e 	bne	r2,zero,802a7c <__gxx_personality_sj0+0x220>
  802a10:	01000044 	movi	r4,1
  802a14:	d8001f15 	stw	zero,124(sp)
  802a18:	d8001d15 	stw	zero,116(sp)
  802a1c:	d8001b15 	stw	zero,108(sp)
  802a20:	d9402417 	ldw	r5,144(sp)
  802a24:	00c00044 	movi	r3,1
  802a28:	28c4703a 	and	r2,r5,r3
  802a2c:	1005003a 	cmpeq	r2,r2,zero
  802a30:	10006a1e 	bne	r2,zero,802bdc <__gxx_personality_sj0+0x380>
  802a34:	00800084 	movi	r2,2
  802a38:	20805726 	beq	r4,r2,802b98 <__gxx_personality_sj0+0x33c>
  802a3c:	d8802103 	ldbu	r2,132(sp)
  802a40:	10008626 	beq	r2,zero,802c5c <__gxx_personality_sj0+0x400>
  802a44:	d9001a17 	ldw	r4,104(sp)
  802a48:	d9401d17 	ldw	r5,116(sp)
  802a4c:	d8801b17 	ldw	r2,108(sp)
  802a50:	00c00184 	movi	r3,6
  802a54:	d8c02215 	stw	r3,136(sp)
  802a58:	21400915 	stw	r5,36(r4)
  802a5c:	20800615 	stw	r2,24(r4)
  802a60:	d8c01f17 	ldw	r3,124(sp)
  802a64:	d9402017 	ldw	r5,128(sp)
  802a68:	d8800017 	ldw	r2,0(sp)
  802a6c:	20c00715 	stw	r3,28(r4)
  802a70:	21400815 	stw	r5,32(r4)
  802a74:	20800a15 	stw	r2,40(r4)
  802a78:	003f9206 	br	8028c4 <__gxx_personality_sj0+0x68>
  802a7c:	d9001e17 	ldw	r4,120(sp)
  802a80:	d9400204 	addi	r5,sp,8
  802a84:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802a88:	d9401c17 	ldw	r5,112(sp)
  802a8c:	1009883a 	mov	r4,r2
  802a90:	297fffc4 	addi	r5,r5,-1
  802a94:	d9401c15 	stw	r5,112(sp)
  802a98:	d9400104 	addi	r5,sp,4
  802a9c:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802aa0:	d8801e15 	stw	r2,120(sp)
  802aa4:	d8801c17 	ldw	r2,112(sp)
  802aa8:	103ff41e 	bne	r2,zero,802a7c <__gxx_personality_sj0+0x220>
  802aac:	d8800217 	ldw	r2,8(sp)
  802ab0:	d8c00117 	ldw	r3,4(sp)
  802ab4:	01000044 	movi	r4,1
  802ab8:	1105883a 	add	r2,r2,r4
  802abc:	d8801d15 	stw	r2,116(sp)
  802ac0:	1800541e 	bne	r3,zero,802c14 <__gxx_personality_sj0+0x3b8>
  802ac4:	d8001f15 	stw	zero,124(sp)
  802ac8:	d8c01d17 	ldw	r3,116(sp)
  802acc:	18003226 	beq	r3,zero,802b98 <__gxx_personality_sj0+0x33c>
  802ad0:	d9001f17 	ldw	r4,124(sp)
  802ad4:	20007226 	beq	r4,zero,802ca0 <__gxx_personality_sj0+0x444>
  802ad8:	d9402417 	ldw	r5,144(sp)
  802adc:	2880020c 	andi	r2,r5,8
  802ae0:	10006a1e 	bne	r2,zero,802c8c <__gxx_personality_sj0+0x430>
  802ae4:	d8802103 	ldbu	r2,132(sp)
  802ae8:	10006826 	beq	r2,zero,802c8c <__gxx_personality_sj0+0x430>
  802aec:	d8801a17 	ldw	r2,104(sp)
  802af0:	10800017 	ldw	r2,0(r2)
  802af4:	d8801915 	stw	r2,100(sp)
  802af8:	d8c01917 	ldw	r3,100(sp)
  802afc:	d8001805 	stb	zero,96(sp)
  802b00:	1807003a 	cmpeq	r3,r3,zero
  802b04:	d8c02715 	stw	r3,156(sp)
  802b08:	00000706 	br	802b28 <__gxx_personality_sj0+0x2cc>
  802b0c:	01000044 	movi	r4,1
  802b10:	d9001805 	stb	r4,96(sp)
  802b14:	d8800217 	ldw	r2,8(sp)
  802b18:	10005e26 	beq	r2,zero,802c94 <__gxx_personality_sj0+0x438>
  802b1c:	d8c01717 	ldw	r3,92(sp)
  802b20:	1885883a 	add	r2,r3,r2
  802b24:	d8801f15 	stw	r2,124(sp)
  802b28:	d9001f17 	ldw	r4,124(sp)
  802b2c:	d9400104 	addi	r5,sp,4
  802b30:	08021800 	call	802180 <_Z12read_sleb128PKhPi>
  802b34:	1009883a 	mov	r4,r2
  802b38:	d9400204 	addi	r5,sp,8
  802b3c:	d8801715 	stw	r2,92(sp)
  802b40:	08021800 	call	802180 <_Z12read_sleb128PKhPi>
  802b44:	d8800117 	ldw	r2,4(sp)
  802b48:	103ff026 	beq	r2,zero,802b0c <__gxx_personality_sj0+0x2b0>
  802b4c:	0080360e 	bge	zero,r2,802c28 <__gxx_personality_sj0+0x3cc>
  802b50:	017fffc4 	movi	r5,-1
  802b54:	d9400b15 	stw	r5,44(sp)
  802b58:	d9000404 	addi	r4,sp,16
  802b5c:	100b883a 	mov	r5,r2
  802b60:	08025d40 	call	8025d4 <_Z15get_ttype_entryP16lsda_header_infoj>
  802b64:	10000826 	beq	r2,zero,802b88 <__gxx_personality_sj0+0x32c>
  802b68:	d8c02717 	ldw	r3,156(sp)
  802b6c:	183fe91e 	bne	r3,zero,802b14 <__gxx_personality_sj0+0x2b8>
  802b70:	d9401917 	ldw	r5,100(sp)
  802b74:	1009883a 	mov	r4,r2
  802b78:	d80d883a 	mov	r6,sp
  802b7c:	08021d40 	call	8021d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  802b80:	10803fcc 	andi	r2,r2,255
  802b84:	103fe326 	beq	r2,zero,802b14 <__gxx_personality_sj0+0x2b8>
  802b88:	d9000117 	ldw	r4,4(sp)
  802b8c:	d9001b15 	stw	r4,108(sp)
  802b90:	010000c4 	movi	r4,3
  802b94:	003fa206 	br	802a20 <__gxx_personality_sj0+0x1c4>
  802b98:	01400204 	movi	r5,8
  802b9c:	d9000a04 	addi	r4,sp,40
  802ba0:	d9402215 	stw	r5,136(sp)
  802ba4:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  802ba8:	d8802217 	ldw	r2,136(sp)
  802bac:	dfc02c17 	ldw	ra,176(sp)
  802bb0:	df002b17 	ldw	fp,172(sp)
  802bb4:	ddc02a17 	ldw	r23,168(sp)
  802bb8:	dec02d04 	addi	sp,sp,180
  802bbc:	f800283a 	ret
  802bc0:	d9402617 	ldw	r5,152(sp)
  802bc4:	0091d3b4 	movhi	r2,18254
  802bc8:	109550c4 	addi	r2,r2,21827
  802bcc:	28bf4f1e 	bne	r5,r2,80290c <__gxx_personality_sj0+0xb0>
  802bd0:	d8802317 	ldw	r2,140(sp)
  802bd4:	1007883a 	mov	r3,r2
  802bd8:	003f4c06 	br	80290c <__gxx_personality_sj0+0xb0>
  802bdc:	d9402417 	ldw	r5,144(sp)
  802be0:	2880020c 	andi	r2,r5,8
  802be4:	10000826 	beq	r2,zero,802c08 <__gxx_personality_sj0+0x3ac>
  802be8:	20c04026 	beq	r4,r3,802cec <__gxx_personality_sj0+0x490>
  802bec:	d8801b17 	ldw	r2,108(sp)
  802bf0:	103f5b0e 	bge	r2,zero,802960 <__gxx_personality_sj0+0x104>
  802bf4:	00800084 	movi	r2,2
  802bf8:	d8800b15 	stw	r2,44(sp)
  802bfc:	08031c40 	call	8031c4 <_ZSt10unexpectedv>
  802c00:	010000c4 	movi	r4,3
  802c04:	003f5206 	br	802950 <__gxx_personality_sj0+0xf4>
  802c08:	d8802103 	ldbu	r2,132(sp)
  802c0c:	103f501e 	bne	r2,zero,802950 <__gxx_personality_sj0+0xf4>
  802c10:	003ff506 	br	802be8 <__gxx_personality_sj0+0x38c>
  802c14:	d8800817 	ldw	r2,32(sp)
  802c18:	1885883a 	add	r2,r3,r2
  802c1c:	1105c83a 	sub	r2,r2,r4
  802c20:	d8801f15 	stw	r2,124(sp)
  802c24:	003fa806 	br	802ac8 <__gxx_personality_sj0+0x26c>
  802c28:	d9002717 	ldw	r4,156(sp)
  802c2c:	20000e1e 	bne	r4,zero,802c68 <__gxx_personality_sj0+0x40c>
  802c30:	017fffc4 	movi	r5,-1
  802c34:	d9400b15 	stw	r5,44(sp)
  802c38:	d9800017 	ldw	r6,0(sp)
  802c3c:	d9401917 	ldw	r5,100(sp)
  802c40:	100f883a 	mov	r7,r2
  802c44:	d9000404 	addi	r4,sp,16
  802c48:	08026580 	call	802658 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  802c4c:	1080005c 	xori	r2,r2,1
  802c50:	10803fcc 	andi	r2,r2,255
  802c54:	103faf26 	beq	r2,zero,802b14 <__gxx_personality_sj0+0x2b8>
  802c58:	003fcb06 	br	802b88 <__gxx_personality_sj0+0x32c>
  802c5c:	00800184 	movi	r2,6
  802c60:	d8802215 	stw	r2,136(sp)
  802c64:	003f1706 	br	8028c4 <__gxx_personality_sj0+0x68>
  802c68:	d9000717 	ldw	r4,28(sp)
  802c6c:	d9400304 	addi	r5,sp,12
  802c70:	2089c83a 	sub	r4,r4,r2
  802c74:	213fffc4 	addi	r4,r4,-1
  802c78:	08021500 	call	802150 <_Z12read_uleb128PKhPj>
  802c7c:	d8c00317 	ldw	r3,12(sp)
  802c80:	1807003a 	cmpeq	r3,r3,zero
  802c84:	1805883a 	mov	r2,r3
  802c88:	003ff106 	br	802c50 <__gxx_personality_sj0+0x3f4>
  802c8c:	d8001915 	stw	zero,100(sp)
  802c90:	003f9906 	br	802af8 <__gxx_personality_sj0+0x29c>
  802c94:	d8801803 	ldbu	r2,96(sp)
  802c98:	1004c03a 	cmpne	r2,r2,zero
  802c9c:	103fbe26 	beq	r2,zero,802b98 <__gxx_personality_sj0+0x33c>
  802ca0:	01000084 	movi	r4,2
  802ca4:	d8001b15 	stw	zero,108(sp)
  802ca8:	003f5d06 	br	802a20 <__gxx_personality_sj0+0x1c4>
  802cac:	d9402017 	ldw	r5,128(sp)
  802cb0:	d9002e17 	ldw	r4,184(sp)
  802cb4:	00bfffc4 	movi	r2,-1
  802cb8:	d9800404 	addi	r6,sp,16
  802cbc:	d8800b15 	stw	r2,44(sp)
  802cc0:	08024d40 	call	8024d4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  802cc4:	d9000903 	ldbu	r4,36(sp)
  802cc8:	d9402e17 	ldw	r5,184(sp)
  802ccc:	08024440 	call	802444 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  802cd0:	d8c01a17 	ldw	r3,104(sp)
  802cd4:	18800915 	stw	r2,36(r3)
  802cd8:	003f2106 	br	802960 <__gxx_personality_sj0+0x104>
  802cdc:	d9002d17 	ldw	r4,180(sp)
  802ce0:	00bfffc4 	movi	r2,-1
  802ce4:	d8800b15 	stw	r2,44(sp)
  802ce8:	08032dc0 	call	8032dc <__cxa_call_terminate>
  802cec:	00bfffc4 	movi	r2,-1
  802cf0:	d8800b15 	stw	r2,44(sp)
  802cf4:	080319c0 	call	80319c <_ZSt9terminatev>
  802cf8:	d9000b17 	ldw	r4,44(sp)
  802cfc:	d9400c17 	ldw	r5,48(sp)
  802d00:	00800044 	movi	r2,1
  802d04:	d9002915 	stw	r4,164(sp)
  802d08:	d9402815 	stw	r5,160(sp)
  802d0c:	20800626 	beq	r4,r2,802d28 <__gxx_personality_sj0+0x4cc>
  802d10:	d8000b15 	stw	zero,44(sp)
  802d14:	0801f840 	call	801f84 <__cxa_end_catch>
  802d18:	d9002817 	ldw	r4,160(sp)
  802d1c:	00bfffc4 	movi	r2,-1
  802d20:	d8800b15 	stw	r2,44(sp)
  802d24:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  802d28:	d9002817 	ldw	r4,160(sp)
  802d2c:	08020280 	call	802028 <__cxa_begin_catch>
  802d30:	d8c02917 	ldw	r3,164(sp)
  802d34:	d8c00b15 	stw	r3,44(sp)
  802d38:	080319c0 	call	80319c <_ZSt9terminatev>

00802d3c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  802d3c:	20c00017 	ldw	r3,0(r4)
  802d40:	defffa04 	addi	sp,sp,-24
  802d44:	dc000415 	stw	r16,16(sp)
  802d48:	1a000617 	ldw	r8,24(r3)
  802d4c:	3021883a 	mov	r16,r6
  802d50:	31800017 	ldw	r6,0(r6)
  802d54:	00800404 	movi	r2,16
  802d58:	dfc00515 	stw	ra,20(sp)
  802d5c:	d8800215 	stw	r2,8(sp)
  802d60:	d8000015 	stw	zero,0(sp)
  802d64:	d8000115 	stw	zero,4(sp)
  802d68:	d8000315 	stw	zero,12(sp)
  802d6c:	d80f883a 	mov	r7,sp
  802d70:	403ee83a 	callr	r8
  802d74:	d8800117 	ldw	r2,4(sp)
  802d78:	00c00184 	movi	r3,6
  802d7c:	0009883a 	mov	r4,zero
  802d80:	1080018c 	andi	r2,r2,6
  802d84:	10c0031e 	bne	r2,r3,802d94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
  802d88:	d8800017 	ldw	r2,0(sp)
  802d8c:	01000044 	movi	r4,1
  802d90:	80800015 	stw	r2,0(r16)
  802d94:	2005883a 	mov	r2,r4
  802d98:	dfc00517 	ldw	ra,20(sp)
  802d9c:	dc000417 	ldw	r16,16(sp)
  802da0:	dec00604 	addi	sp,sp,24
  802da4:	f800283a 	ret

00802da8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
  802da8:	d8800017 	ldw	r2,0(sp)
  802dac:	00c00184 	movi	r3,6
  802db0:	1180021e 	bne	r2,r6,802dbc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
  802db4:	1805883a 	mov	r2,r3
  802db8:	f800283a 	ret
  802dbc:	00c00044 	movi	r3,1
  802dc0:	1805883a 	mov	r2,r3
  802dc4:	f800283a 	ret

00802dc8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  802dc8:	defffe04 	addi	sp,sp,-8
  802dcc:	00802074 	movhi	r2,129
  802dd0:	1084b004 	addi	r2,r2,4800
  802dd4:	dc400015 	stw	r17,0(sp)
  802dd8:	20800015 	stw	r2,0(r4)
  802ddc:	2023883a 	mov	r17,r4
  802de0:	dfc00115 	stw	ra,4(sp)
  802de4:	08036240 	call	803624 <_ZNSt9type_infoD2Ev>
  802de8:	8809883a 	mov	r4,r17
  802dec:	dfc00117 	ldw	ra,4(sp)
  802df0:	dc400017 	ldw	r17,0(sp)
  802df4:	dec00204 	addi	sp,sp,8
  802df8:	08021401 	jmpi	802140 <_ZdlPv>

00802dfc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  802dfc:	00802074 	movhi	r2,129
  802e00:	1084b004 	addi	r2,r2,4800
  802e04:	20800015 	stw	r2,0(r4)
  802e08:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

00802e0c <_ZN10__cxxabiv117__class_type_infoD2Ev>:
  802e0c:	00802074 	movhi	r2,129
  802e10:	1084b004 	addi	r2,r2,4800
  802e14:	20800015 	stw	r2,0(r4)
  802e18:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

00802e1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  802e1c:	2811883a 	mov	r8,r5
  802e20:	20c00117 	ldw	r3,4(r4)
  802e24:	40800117 	ldw	r2,4(r8)
  802e28:	deffff04 	addi	sp,sp,-4
  802e2c:	dfc00015 	stw	ra,0(sp)
  802e30:	200b883a 	mov	r5,r4
  802e34:	02400044 	movi	r9,1
  802e38:	18800426 	beq	r3,r2,802e4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
  802e3c:	008000c4 	movi	r2,3
  802e40:	4009883a 	mov	r4,r8
  802e44:	0013883a 	mov	r9,zero
  802e48:	11c0042e 	bgeu	r2,r7,802e5c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
  802e4c:	4805883a 	mov	r2,r9
  802e50:	dfc00017 	ldw	ra,0(sp)
  802e54:	dec00104 	addi	sp,sp,4
  802e58:	f800283a 	ret
  802e5c:	40800017 	ldw	r2,0(r8)
  802e60:	10c00517 	ldw	r3,20(r2)
  802e64:	183ee83a 	callr	r3
  802e68:	12403fcc 	andi	r9,r2,255
  802e6c:	4805883a 	mov	r2,r9
  802e70:	dfc00017 	ldw	ra,0(sp)
  802e74:	dec00104 	addi	sp,sp,4
  802e78:	f800283a 	ret

00802e7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  802e7c:	20c00117 	ldw	r3,4(r4)
  802e80:	28800117 	ldw	r2,4(r5)
  802e84:	0009883a 	mov	r4,zero
  802e88:	1880061e 	bne	r3,r2,802ea4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
  802e8c:	00800184 	movi	r2,6
  802e90:	38800115 	stw	r2,4(r7)
  802e94:	00800204 	movi	r2,8
  802e98:	39800015 	stw	r6,0(r7)
  802e9c:	38800315 	stw	r2,12(r7)
  802ea0:	01000044 	movi	r4,1
  802ea4:	2005883a 	mov	r2,r4
  802ea8:	f800283a 	ret

00802eac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  802eac:	da000017 	ldw	r8,0(sp)
  802eb0:	d8800217 	ldw	r2,8(sp)
  802eb4:	d9400317 	ldw	r5,12(sp)
  802eb8:	40800926 	beq	r8,r2,802ee0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
  802ebc:	21000117 	ldw	r4,4(r4)
  802ec0:	38800117 	ldw	r2,4(r7)
  802ec4:	2080041e 	bne	r4,r2,802ed8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
  802ec8:	00800044 	movi	r2,1
  802ecc:	28800315 	stw	r2,12(r5)
  802ed0:	2a000015 	stw	r8,0(r5)
  802ed4:	29800115 	stw	r6,4(r5)
  802ed8:	0005883a 	mov	r2,zero
  802edc:	f800283a 	ret
  802ee0:	d8800117 	ldw	r2,4(sp)
  802ee4:	21000117 	ldw	r4,4(r4)
  802ee8:	10c00117 	ldw	r3,4(r2)
  802eec:	20fff41e 	bne	r4,r3,802ec0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
  802ef0:	29800215 	stw	r6,8(r5)
  802ef4:	003ff806 	br	802ed8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

00802ef8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  802ef8:	defffb04 	addi	sp,sp,-20
  802efc:	dd400315 	stw	r21,12(sp)
  802f00:	dcc00215 	stw	r19,8(sp)
  802f04:	dc400115 	stw	r17,4(sp)
  802f08:	dc000015 	stw	r16,0(sp)
  802f0c:	2823883a 	mov	r17,r5
  802f10:	3027883a 	mov	r19,r6
  802f14:	382b883a 	mov	r21,r7
  802f18:	dfc00415 	stw	ra,16(sp)
  802f1c:	2021883a 	mov	r16,r4
  802f20:	0802e7c0 	call	802e7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  802f24:	10803fcc 	andi	r2,r2,255
  802f28:	880b883a 	mov	r5,r17
  802f2c:	980d883a 	mov	r6,r19
  802f30:	a80f883a 	mov	r7,r21
  802f34:	00c00044 	movi	r3,1
  802f38:	1000051e 	bne	r2,zero,802f50 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
  802f3c:	81000217 	ldw	r4,8(r16)
  802f40:	20800017 	ldw	r2,0(r4)
  802f44:	10c00617 	ldw	r3,24(r2)
  802f48:	183ee83a 	callr	r3
  802f4c:	10c03fcc 	andi	r3,r2,255
  802f50:	1805883a 	mov	r2,r3
  802f54:	dfc00417 	ldw	ra,16(sp)
  802f58:	dd400317 	ldw	r21,12(sp)
  802f5c:	dcc00217 	ldw	r19,8(sp)
  802f60:	dc400117 	ldw	r17,4(sp)
  802f64:	dc000017 	ldw	r16,0(sp)
  802f68:	dec00504 	addi	sp,sp,20
  802f6c:	f800283a 	ret

00802f70 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  802f70:	defffe04 	addi	sp,sp,-8
  802f74:	00802074 	movhi	r2,129
  802f78:	1084c704 	addi	r2,r2,4892
  802f7c:	dc400015 	stw	r17,0(sp)
  802f80:	20800015 	stw	r2,0(r4)
  802f84:	2023883a 	mov	r17,r4
  802f88:	dfc00115 	stw	ra,4(sp)
  802f8c:	0802e0c0 	call	802e0c <_ZN10__cxxabiv117__class_type_infoD2Ev>
  802f90:	8809883a 	mov	r4,r17
  802f94:	dfc00117 	ldw	ra,4(sp)
  802f98:	dc400017 	ldw	r17,0(sp)
  802f9c:	dec00204 	addi	sp,sp,8
  802fa0:	08021401 	jmpi	802140 <_ZdlPv>

00802fa4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  802fa4:	00802074 	movhi	r2,129
  802fa8:	1084c704 	addi	r2,r2,4892
  802fac:	20800015 	stw	r2,0(r4)
  802fb0:	0802e0c1 	jmpi	802e0c <_ZN10__cxxabiv117__class_type_infoD2Ev>

00802fb4 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
  802fb4:	00802074 	movhi	r2,129
  802fb8:	1084c704 	addi	r2,r2,4892
  802fbc:	20800015 	stw	r2,0(r4)
  802fc0:	0802e0c1 	jmpi	802e0c <_ZN10__cxxabiv117__class_type_infoD2Ev>

00802fc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
  802fc4:	da400017 	ldw	r9,0(sp)
  802fc8:	2011883a 	mov	r8,r4
  802fcc:	49800526 	beq	r9,r6,802fe4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
  802fd0:	41000217 	ldw	r4,8(r8)
  802fd4:	20800017 	ldw	r2,0(r4)
  802fd8:	da400015 	stw	r9,0(sp)
  802fdc:	10c00817 	ldw	r3,32(r2)
  802fe0:	1800683a 	jmp	r3
  802fe4:	39000117 	ldw	r4,4(r7)
  802fe8:	40c00117 	ldw	r3,4(r8)
  802fec:	00800184 	movi	r2,6
  802ff0:	193ff71e 	bne	r3,r4,802fd0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
  802ff4:	f800283a 	ret

00802ff8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  802ff8:	20c00117 	ldw	r3,4(r4)
  802ffc:	38800117 	ldw	r2,4(r7)
  803000:	defffb04 	addi	sp,sp,-20
  803004:	dfc00415 	stw	ra,16(sp)
  803008:	da000517 	ldw	r8,20(sp)
  80300c:	dac00617 	ldw	r11,24(sp)
  803010:	da400717 	ldw	r9,28(sp)
  803014:	da800817 	ldw	r10,32(sp)
  803018:	18800c1e 	bne	r3,r2,80304c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
  80301c:	51800115 	stw	r6,4(r10)
  803020:	52000015 	stw	r8,0(r10)
  803024:	28001c16 	blt	r5,zero,803098 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
  803028:	4145883a 	add	r2,r8,r5
  80302c:	48801e26 	beq	r9,r2,8030a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
  803030:	00800044 	movi	r2,1
  803034:	0007883a 	mov	r3,zero
  803038:	50800315 	stw	r2,12(r10)
  80303c:	1805883a 	mov	r2,r3
  803040:	dfc00417 	ldw	ra,16(sp)
  803044:	dec00504 	addi	sp,sp,20
  803048:	f800283a 	ret
  80304c:	42400d26 	beq	r8,r9,803084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
  803050:	21000217 	ldw	r4,8(r4)
  803054:	20800017 	ldw	r2,0(r4)
  803058:	da000015 	stw	r8,0(sp)
  80305c:	dac00115 	stw	r11,4(sp)
  803060:	da400215 	stw	r9,8(sp)
  803064:	da800315 	stw	r10,12(sp)
  803068:	10c00717 	ldw	r3,28(r2)
  80306c:	183ee83a 	callr	r3
  803070:	10c03fcc 	andi	r3,r2,255
  803074:	1805883a 	mov	r2,r3
  803078:	dfc00417 	ldw	ra,16(sp)
  80307c:	dec00504 	addi	sp,sp,20
  803080:	f800283a 	ret
  803084:	58800117 	ldw	r2,4(r11)
  803088:	18bff11e 	bne	r3,r2,803050 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
  80308c:	0007883a 	mov	r3,zero
  803090:	51800215 	stw	r6,8(r10)
  803094:	003fe906 	br	80303c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  803098:	00bfff84 	movi	r2,-2
  80309c:	28800426 	beq	r5,r2,8030b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
  8030a0:	0007883a 	mov	r3,zero
  8030a4:	003fe506 	br	80303c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  8030a8:	00800184 	movi	r2,6
  8030ac:	003fe106 	br	803034 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
  8030b0:	00800044 	movi	r2,1
  8030b4:	0007883a 	mov	r3,zero
  8030b8:	50800315 	stw	r2,12(r10)
  8030bc:	003fdf06 	br	80303c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

008030c0 <__cxa_get_globals_fast>:
  8030c0:	d0a7b404 	addi	r2,gp,-24880
  8030c4:	f800283a 	ret

008030c8 <__cxa_get_globals>:
  8030c8:	d0a7b404 	addi	r2,gp,-24880
  8030cc:	f800283a 	ret

008030d0 <_ZSt13set_terminatePFvvE>:
  8030d0:	00c02074 	movhi	r3,129
  8030d4:	18cd6d04 	addi	r3,r3,13748
  8030d8:	18800017 	ldw	r2,0(r3)
  8030dc:	19000015 	stw	r4,0(r3)
  8030e0:	f800283a 	ret

008030e4 <_ZSt14set_unexpectedPFvvE>:
  8030e4:	00c02074 	movhi	r3,129
  8030e8:	18cd6e04 	addi	r3,r3,13752
  8030ec:	18800017 	ldw	r2,0(r3)
  8030f0:	19000015 	stw	r4,0(r3)
  8030f4:	f800283a 	ret

008030f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
  8030f8:	deffed04 	addi	sp,sp,-76
  8030fc:	00802034 	movhi	r2,128
  803100:	108a1704 	addi	r2,r2,10332
  803104:	d8800615 	stw	r2,24(sp)
  803108:	00c02074 	movhi	r3,129
  80310c:	18c46404 	addi	r3,r3,4496
  803110:	00802034 	movhi	r2,128
  803114:	108c5504 	addi	r2,r2,12628
  803118:	d9000d15 	stw	r4,52(sp)
  80311c:	d809883a 	mov	r4,sp
  803120:	d8800915 	stw	r2,36(sp)
  803124:	dfc01215 	stw	ra,72(sp)
  803128:	df001115 	stw	fp,68(sp)
  80312c:	ddc01015 	stw	r23,64(sp)
  803130:	d8c00715 	stw	r3,28(sp)
  803134:	dec00815 	stw	sp,32(sp)
  803138:	dec00a15 	stw	sp,40(sp)
  80313c:	08038440 	call	803844 <_Unwind_SjLj_Register>
  803140:	00800084 	movi	r2,2
  803144:	d8800115 	stw	r2,4(sp)
  803148:	d8800d17 	ldw	r2,52(sp)
  80314c:	103ee83a 	callr	r2
  803150:	0803d8c0 	call	803d8c <abort>
  803154:	d8800117 	ldw	r2,4(sp)
  803158:	d8c00217 	ldw	r3,8(sp)
  80315c:	d8800f15 	stw	r2,60(sp)
  803160:	d8c00e15 	stw	r3,56(sp)
  803164:	d8c00f17 	ldw	r3,60(sp)
  803168:	00800044 	movi	r2,1
  80316c:	18800626 	beq	r3,r2,803188 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
  803170:	d8000115 	stw	zero,4(sp)
  803174:	0801f840 	call	801f84 <__cxa_end_catch>
  803178:	d9000e17 	ldw	r4,56(sp)
  80317c:	00bfffc4 	movi	r2,-1
  803180:	d8800115 	stw	r2,4(sp)
  803184:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  803188:	d9000e17 	ldw	r4,56(sp)
  80318c:	08020280 	call	802028 <__cxa_begin_catch>
  803190:	d8c00f17 	ldw	r3,60(sp)
  803194:	d8c00115 	stw	r3,4(sp)
  803198:	0803d8c0 	call	803d8c <abort>

0080319c <_ZSt9terminatev>:
  80319c:	00802074 	movhi	r2,129
  8031a0:	108d6d04 	addi	r2,r2,13748
  8031a4:	11000017 	ldw	r4,0(r2)
  8031a8:	deffff04 	addi	sp,sp,-4
  8031ac:	dfc00015 	stw	ra,0(sp)
  8031b0:	08030f80 	call	8030f8 <_ZN10__cxxabiv111__terminateEPFvvE>

008031b4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  8031b4:	deffff04 	addi	sp,sp,-4
  8031b8:	dfc00015 	stw	ra,0(sp)
  8031bc:	203ee83a 	callr	r4
  8031c0:	080319c0 	call	80319c <_ZSt9terminatev>

008031c4 <_ZSt10unexpectedv>:
  8031c4:	00802074 	movhi	r2,129
  8031c8:	108d6e04 	addi	r2,r2,13752
  8031cc:	11000017 	ldw	r4,0(r2)
  8031d0:	deffff04 	addi	sp,sp,-4
  8031d4:	dfc00015 	stw	ra,0(sp)
  8031d8:	08031b40 	call	8031b4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

008031dc <_Znwm>:
  8031dc:	deffee04 	addi	sp,sp,-72
  8031e0:	00802034 	movhi	r2,128
  8031e4:	108a1704 	addi	r2,r2,10332
  8031e8:	d8800615 	stw	r2,24(sp)
  8031ec:	00c02074 	movhi	r3,129
  8031f0:	18c46804 	addi	r3,r3,4512
  8031f4:	00802034 	movhi	r2,128
  8031f8:	108cae04 	addi	r2,r2,12984
  8031fc:	d9000e15 	stw	r4,56(sp)
  803200:	d809883a 	mov	r4,sp
  803204:	d8800915 	stw	r2,36(sp)
  803208:	dfc01115 	stw	ra,68(sp)
  80320c:	df001015 	stw	fp,64(sp)
  803210:	ddc00f15 	stw	r23,60(sp)
  803214:	d8c00715 	stw	r3,28(sp)
  803218:	dec00815 	stw	sp,32(sp)
  80321c:	dec00a15 	stw	sp,40(sp)
  803220:	08038440 	call	803844 <_Unwind_SjLj_Register>
  803224:	d8800e17 	ldw	r2,56(sp)
  803228:	10000a1e 	bne	r2,zero,803254 <_Znwm+0x78>
  80322c:	00800044 	movi	r2,1
  803230:	d8800e15 	stw	r2,56(sp)
  803234:	00000706 	br	803254 <_Znwm+0x78>
  803238:	00802074 	movhi	r2,129
  80323c:	10951104 	addi	r2,r2,21572
  803240:	10c00017 	ldw	r3,0(r2)
  803244:	18000f26 	beq	r3,zero,803284 <_Znwm+0xa8>
  803248:	00800044 	movi	r2,1
  80324c:	d8800115 	stw	r2,4(sp)
  803250:	183ee83a 	callr	r3
  803254:	d9000e17 	ldw	r4,56(sp)
  803258:	0803db80 	call	803db8 <malloc>
  80325c:	d8800d15 	stw	r2,52(sp)
  803260:	103ff526 	beq	r2,zero,803238 <_Znwm+0x5c>
  803264:	d809883a 	mov	r4,sp
  803268:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  80326c:	d8800d17 	ldw	r2,52(sp)
  803270:	dfc01117 	ldw	ra,68(sp)
  803274:	df001017 	ldw	fp,64(sp)
  803278:	ddc00f17 	ldw	r23,60(sp)
  80327c:	dec01204 	addi	sp,sp,72
  803280:	f800283a 	ret
  803284:	01000104 	movi	r4,4
  803288:	08034a80 	call	8034a8 <__cxa_allocate_exception>
  80328c:	1009883a 	mov	r4,r2
  803290:	00802074 	movhi	r2,129
  803294:	10859204 	addi	r2,r2,5704
  803298:	20800015 	stw	r2,0(r4)
  80329c:	00c00044 	movi	r3,1
  8032a0:	d8c00115 	stw	r3,4(sp)
  8032a4:	01402074 	movhi	r5,129
  8032a8:	29459904 	addi	r5,r5,5732
  8032ac:	01802034 	movhi	r6,128
  8032b0:	318d1204 	addi	r6,r6,13384
  8032b4:	0801de80 	call	801de8 <__cxa_throw>
  8032b8:	d8800317 	ldw	r2,12(sp)
  8032bc:	00ffffc4 	movi	r3,-1
  8032c0:	d9000217 	ldw	r4,8(sp)
  8032c4:	10c00226 	beq	r2,r3,8032d0 <_Znwm+0xf4>
  8032c8:	d8c00115 	stw	r3,4(sp)
  8032cc:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  8032d0:	00bfffc4 	movi	r2,-1
  8032d4:	d8800115 	stw	r2,4(sp)
  8032d8:	08026dc0 	call	8026dc <__cxa_call_unexpected>

008032dc <__cxa_call_terminate>:
  8032dc:	defffe04 	addi	sp,sp,-8
  8032e0:	dc000015 	stw	r16,0(sp)
  8032e4:	dfc00115 	stw	ra,4(sp)
  8032e8:	2021883a 	mov	r16,r4
  8032ec:	20000626 	beq	r4,zero,803308 <__cxa_call_terminate+0x2c>
  8032f0:	08020280 	call	802028 <__cxa_begin_catch>
  8032f4:	80c00017 	ldw	r3,0(r16)
  8032f8:	0090caf4 	movhi	r2,17195
  8032fc:	108ac004 	addi	r2,r2,11008
  803300:	81000117 	ldw	r4,4(r16)
  803304:	18800126 	beq	r3,r2,80330c <__cxa_call_terminate+0x30>
  803308:	080319c0 	call	80319c <_ZSt9terminatev>
  80330c:	0091d3b4 	movhi	r2,18254
  803310:	109550c4 	addi	r2,r2,21827
  803314:	20bffc1e 	bne	r4,r2,803308 <__cxa_call_terminate+0x2c>
  803318:	813ff817 	ldw	r4,-32(r16)
  80331c:	08030f80 	call	8030f8 <_ZN10__cxxabiv111__terminateEPFvvE>

00803320 <_ZNKSt9exception4whatEv>:
  803320:	20800017 	ldw	r2,0(r4)
  803324:	10ffff17 	ldw	r3,-4(r2)
  803328:	18800117 	ldw	r2,4(r3)
  80332c:	f800283a 	ret

00803330 <_ZNSt9exceptionD0Ev>:
  803330:	00802074 	movhi	r2,129
  803334:	1084e404 	addi	r2,r2,5008
  803338:	20800015 	stw	r2,0(r4)
  80333c:	08021401 	jmpi	802140 <_ZdlPv>

00803340 <_ZNSt9exceptionD1Ev>:
  803340:	00802074 	movhi	r2,129
  803344:	1084e404 	addi	r2,r2,5008
  803348:	20800015 	stw	r2,0(r4)
  80334c:	f800283a 	ret

00803350 <_ZNSt9exceptionD2Ev>:
  803350:	00802074 	movhi	r2,129
  803354:	1084e404 	addi	r2,r2,5008
  803358:	20800015 	stw	r2,0(r4)
  80335c:	f800283a 	ret

00803360 <_ZNSt13bad_exceptionD0Ev>:
  803360:	defffe04 	addi	sp,sp,-8
  803364:	00802074 	movhi	r2,129
  803368:	1084df04 	addi	r2,r2,4988
  80336c:	dc400015 	stw	r17,0(sp)
  803370:	20800015 	stw	r2,0(r4)
  803374:	2023883a 	mov	r17,r4
  803378:	dfc00115 	stw	ra,4(sp)
  80337c:	08033500 	call	803350 <_ZNSt9exceptionD2Ev>
  803380:	8809883a 	mov	r4,r17
  803384:	dfc00117 	ldw	ra,4(sp)
  803388:	dc400017 	ldw	r17,0(sp)
  80338c:	dec00204 	addi	sp,sp,8
  803390:	08021401 	jmpi	802140 <_ZdlPv>

00803394 <_ZNSt13bad_exceptionD1Ev>:
  803394:	00802074 	movhi	r2,129
  803398:	1084df04 	addi	r2,r2,4988
  80339c:	20800015 	stw	r2,0(r4)
  8033a0:	08033501 	jmpi	803350 <_ZNSt9exceptionD2Ev>

008033a4 <_ZNSt13bad_exceptionD2Ev>:
  8033a4:	00802074 	movhi	r2,129
  8033a8:	1084df04 	addi	r2,r2,4988
  8033ac:	20800015 	stw	r2,0(r4)
  8033b0:	08033501 	jmpi	803350 <_ZNSt9exceptionD2Ev>

008033b4 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
  8033b4:	defffe04 	addi	sp,sp,-8
  8033b8:	00802074 	movhi	r2,129
  8033bc:	1084f504 	addi	r2,r2,5076
  8033c0:	dc400015 	stw	r17,0(sp)
  8033c4:	20800015 	stw	r2,0(r4)
  8033c8:	2023883a 	mov	r17,r4
  8033cc:	dfc00115 	stw	ra,4(sp)
  8033d0:	08036240 	call	803624 <_ZNSt9type_infoD2Ev>
  8033d4:	8809883a 	mov	r4,r17
  8033d8:	dfc00117 	ldw	ra,4(sp)
  8033dc:	dc400017 	ldw	r17,0(sp)
  8033e0:	dec00204 	addi	sp,sp,8
  8033e4:	08021401 	jmpi	802140 <_ZdlPv>

008033e8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
  8033e8:	00802074 	movhi	r2,129
  8033ec:	1084f504 	addi	r2,r2,5076
  8033f0:	20800015 	stw	r2,0(r4)
  8033f4:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

008033f8 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
  8033f8:	00802074 	movhi	r2,129
  8033fc:	1084f504 	addi	r2,r2,5076
  803400:	20800015 	stw	r2,0(r4)
  803404:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

00803408 <_ZSt15set_new_handlerPFvvE>:
  803408:	d0a7b617 	ldw	r2,-24872(gp)
  80340c:	d127b615 	stw	r4,-24872(gp)
  803410:	f800283a 	ret

00803414 <_ZNSt9bad_allocD0Ev>:
  803414:	defffe04 	addi	sp,sp,-8
  803418:	00802074 	movhi	r2,129
  80341c:	10859204 	addi	r2,r2,5704
  803420:	dc400015 	stw	r17,0(sp)
  803424:	20800015 	stw	r2,0(r4)
  803428:	2023883a 	mov	r17,r4
  80342c:	dfc00115 	stw	ra,4(sp)
  803430:	08033500 	call	803350 <_ZNSt9exceptionD2Ev>
  803434:	8809883a 	mov	r4,r17
  803438:	dfc00117 	ldw	ra,4(sp)
  80343c:	dc400017 	ldw	r17,0(sp)
  803440:	dec00204 	addi	sp,sp,8
  803444:	08021401 	jmpi	802140 <_ZdlPv>

00803448 <_ZNSt9bad_allocD1Ev>:
  803448:	00802074 	movhi	r2,129
  80344c:	10859204 	addi	r2,r2,5704
  803450:	20800015 	stw	r2,0(r4)
  803454:	08033501 	jmpi	803350 <_ZNSt9exceptionD2Ev>

00803458 <_ZNSt9bad_allocD2Ev>:
  803458:	00802074 	movhi	r2,129
  80345c:	10859204 	addi	r2,r2,5704
  803460:	20800015 	stw	r2,0(r4)
  803464:	08033501 	jmpi	803350 <_ZNSt9exceptionD2Ev>

00803468 <__cxa_free_exception>:
  803468:	2007883a 	mov	r3,r4
  80346c:	00802074 	movhi	r2,129
  803470:	10952104 	addi	r2,r2,21636
  803474:	213ff004 	addi	r4,r4,-64
  803478:	11420004 	addi	r5,r2,2048
  80347c:	18800336 	bltu	r3,r2,80348c <__cxa_free_exception+0x24>
  803480:	1885c83a 	sub	r2,r3,r2
  803484:	1004d27a 	srli	r2,r2,9
  803488:	19400136 	bltu	r3,r5,803490 <__cxa_free_exception+0x28>
  80348c:	0803da41 	jmpi	803da4 <free>
  803490:	00ffff84 	movi	r3,-2
  803494:	1886183a 	rol	r3,r3,r2
  803498:	d0a7b717 	ldw	r2,-24868(gp)
  80349c:	10c4703a 	and	r2,r2,r3
  8034a0:	d0a7b715 	stw	r2,-24868(gp)
  8034a4:	f800283a 	ret

008034a8 <__cxa_allocate_exception>:
  8034a8:	deffed04 	addi	sp,sp,-76
  8034ac:	00802034 	movhi	r2,128
  8034b0:	108a1704 	addi	r2,r2,10332
  8034b4:	21001004 	addi	r4,r4,64
  8034b8:	00c02074 	movhi	r3,129
  8034bc:	18c46d04 	addi	r3,r3,4532
  8034c0:	d8800615 	stw	r2,24(sp)
  8034c4:	d9000d15 	stw	r4,52(sp)
  8034c8:	00802034 	movhi	r2,128
  8034cc:	108d6e04 	addi	r2,r2,13752
  8034d0:	d809883a 	mov	r4,sp
  8034d4:	dfc01215 	stw	ra,72(sp)
  8034d8:	d8c00715 	stw	r3,28(sp)
  8034dc:	d8800915 	stw	r2,36(sp)
  8034e0:	df001115 	stw	fp,68(sp)
  8034e4:	ddc01015 	stw	r23,64(sp)
  8034e8:	dec00815 	stw	sp,32(sp)
  8034ec:	dec00a15 	stw	sp,40(sp)
  8034f0:	08038440 	call	803844 <_Unwind_SjLj_Register>
  8034f4:	d9000d17 	ldw	r4,52(sp)
  8034f8:	0803db80 	call	803db8 <malloc>
  8034fc:	d8800e15 	stw	r2,56(sp)
  803500:	1000171e 	bne	r2,zero,803560 <__cxa_allocate_exception+0xb8>
  803504:	d8c00d17 	ldw	r3,52(sp)
  803508:	00808004 	movi	r2,512
  80350c:	d1e7b717 	ldw	r7,-24868(gp)
  803510:	10c02636 	bltu	r2,r3,8035ac <__cxa_allocate_exception+0x104>
  803514:	3807883a 	mov	r3,r7
  803518:	01400044 	movi	r5,1
  80351c:	1944703a 	and	r2,r3,r5
  803520:	0009883a 	mov	r4,zero
  803524:	01800104 	movi	r6,4
  803528:	10000526 	beq	r2,zero,803540 <__cxa_allocate_exception+0x98>
  80352c:	2149883a 	add	r4,r4,r5
  803530:	21801e26 	beq	r4,r6,8035ac <__cxa_allocate_exception+0x104>
  803534:	1806d07a 	srli	r3,r3,1
  803538:	1944703a 	and	r2,r3,r5
  80353c:	103ffb1e 	bne	r2,zero,80352c <__cxa_allocate_exception+0x84>
  803540:	2904983a 	sll	r2,r5,r4
  803544:	2008927a 	slli	r4,r4,9
  803548:	00c02074 	movhi	r3,129
  80354c:	18d52104 	addi	r3,r3,21636
  803550:	3884b03a 	or	r2,r7,r2
  803554:	20c9883a 	add	r4,r4,r3
  803558:	d9000e15 	stw	r4,56(sp)
  80355c:	d0a7b715 	stw	r2,-24868(gp)
  803560:	08030c80 	call	8030c8 <__cxa_get_globals>
  803564:	10c00117 	ldw	r3,4(r2)
  803568:	d9000e17 	ldw	r4,56(sp)
  80356c:	000b883a 	mov	r5,zero
  803570:	18c00044 	addi	r3,r3,1
  803574:	10c00115 	stw	r3,4(r2)
  803578:	01801004 	movi	r6,64
  80357c:	080450c0 	call	80450c <memset>
  803580:	d8800e17 	ldw	r2,56(sp)
  803584:	d809883a 	mov	r4,sp
  803588:	10801004 	addi	r2,r2,64
  80358c:	d8800f15 	stw	r2,60(sp)
  803590:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  803594:	d8800f17 	ldw	r2,60(sp)
  803598:	dfc01217 	ldw	ra,72(sp)
  80359c:	df001117 	ldw	fp,68(sp)
  8035a0:	ddc01017 	ldw	r23,64(sp)
  8035a4:	dec01304 	addi	sp,sp,76
  8035a8:	f800283a 	ret
  8035ac:	00800044 	movi	r2,1
  8035b0:	d8800115 	stw	r2,4(sp)
  8035b4:	080319c0 	call	80319c <_ZSt9terminatev>
  8035b8:	d8800317 	ldw	r2,12(sp)
  8035bc:	00ffffc4 	movi	r3,-1
  8035c0:	d9000217 	ldw	r4,8(sp)
  8035c4:	10c00226 	beq	r2,r3,8035d0 <__cxa_allocate_exception+0x128>
  8035c8:	d8c00115 	stw	r3,4(sp)
  8035cc:	0803b100 	call	803b10 <_Unwind_SjLj_Resume>
  8035d0:	00bfffc4 	movi	r2,-1
  8035d4:	d8800115 	stw	r2,4(sp)
  8035d8:	08026dc0 	call	8026dc <__cxa_call_unexpected>

008035dc <_ZNKSt9type_info14__is_pointer_pEv>:
  8035dc:	0005883a 	mov	r2,zero
  8035e0:	f800283a 	ret

008035e4 <_ZNKSt9type_info15__is_function_pEv>:
  8035e4:	0005883a 	mov	r2,zero
  8035e8:	f800283a 	ret

008035ec <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
  8035ec:	20c00117 	ldw	r3,4(r4)
  8035f0:	28800117 	ldw	r2,4(r5)
  8035f4:	1885003a 	cmpeq	r2,r3,r2
  8035f8:	f800283a 	ret

008035fc <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
  8035fc:	0005883a 	mov	r2,zero
  803600:	f800283a 	ret

00803604 <_ZNSt9type_infoD0Ev>:
  803604:	00802074 	movhi	r2,129
  803608:	10859e04 	addi	r2,r2,5752
  80360c:	20800015 	stw	r2,0(r4)
  803610:	08021401 	jmpi	802140 <_ZdlPv>

00803614 <_ZNSt9type_infoD1Ev>:
  803614:	00802074 	movhi	r2,129
  803618:	10859e04 	addi	r2,r2,5752
  80361c:	20800015 	stw	r2,0(r4)
  803620:	f800283a 	ret

00803624 <_ZNSt9type_infoD2Ev>:
  803624:	00802074 	movhi	r2,129
  803628:	10859e04 	addi	r2,r2,5752
  80362c:	20800015 	stw	r2,0(r4)
  803630:	f800283a 	ret

00803634 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
  803634:	00800044 	movi	r2,1
  803638:	f800283a 	ret

0080363c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
  80363c:	deffff04 	addi	sp,sp,-4
  803640:	3807883a 	mov	r3,r7
  803644:	2005883a 	mov	r2,r4
  803648:	01000044 	movi	r4,1
  80364c:	dfc00015 	stw	ra,0(sp)
  803650:	39c00084 	addi	r7,r7,2
  803654:	20c00a2e 	bgeu	r4,r3,803680 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>
  803658:	12000317 	ldw	r8,12(r2)
  80365c:	40800017 	ldw	r2,0(r8)
  803660:	29400317 	ldw	r5,12(r5)
  803664:	4009883a 	mov	r4,r8
  803668:	10c00417 	ldw	r3,16(r2)
  80366c:	183ee83a 	callr	r3
  803670:	10803fcc 	andi	r2,r2,255
  803674:	dfc00017 	ldw	ra,0(sp)
  803678:	dec00104 	addi	sp,sp,4
  80367c:	f800283a 	ret
  803680:	12000317 	ldw	r8,12(r2)
  803684:	00802074 	movhi	r2,129
  803688:	108d9104 	addi	r2,r2,13892
  80368c:	11000117 	ldw	r4,4(r2)
  803690:	40c00117 	ldw	r3,4(r8)
  803694:	193ff11e 	bne	r3,r4,80365c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
  803698:	29000317 	ldw	r4,12(r5)
  80369c:	20800017 	ldw	r2,0(r4)
  8036a0:	10c00317 	ldw	r3,12(r2)
  8036a4:	183ee83a 	callr	r3
  8036a8:	1080005c 	xori	r2,r2,1
  8036ac:	10803fcc 	andi	r2,r2,255
  8036b0:	dfc00017 	ldw	ra,0(sp)
  8036b4:	dec00104 	addi	sp,sp,4
  8036b8:	f800283a 	ret

008036bc <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
  8036bc:	defffe04 	addi	sp,sp,-8
  8036c0:	00802074 	movhi	r2,129
  8036c4:	1085aa04 	addi	r2,r2,5800
  8036c8:	dc400015 	stw	r17,0(sp)
  8036cc:	20800015 	stw	r2,0(r4)
  8036d0:	2023883a 	mov	r17,r4
  8036d4:	dfc00115 	stw	ra,4(sp)
  8036d8:	08038040 	call	803804 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  8036dc:	8809883a 	mov	r4,r17
  8036e0:	dfc00117 	ldw	ra,4(sp)
  8036e4:	dc400017 	ldw	r17,0(sp)
  8036e8:	dec00204 	addi	sp,sp,8
  8036ec:	08021401 	jmpi	802140 <_ZdlPv>

008036f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
  8036f0:	00802074 	movhi	r2,129
  8036f4:	1085aa04 	addi	r2,r2,5800
  8036f8:	20800015 	stw	r2,0(r4)
  8036fc:	08038041 	jmpi	803804 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00803700 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
  803700:	00802074 	movhi	r2,129
  803704:	1085aa04 	addi	r2,r2,5800
  803708:	20800015 	stw	r2,0(r4)
  80370c:	08038041 	jmpi	803804 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00803710 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
  803710:	20c00117 	ldw	r3,4(r4)
  803714:	28800117 	ldw	r2,4(r5)
  803718:	deffff04 	addi	sp,sp,-4
  80371c:	dfc00015 	stw	ra,0(sp)
  803720:	02000044 	movi	r8,1
  803724:	3819883a 	mov	r12,r7
  803728:	18801526 	beq	r3,r2,803780 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
  80372c:	28800017 	ldw	r2,0(r5)
  803730:	23400017 	ldw	r13,0(r4)
  803734:	39c0004c 	andi	r7,r7,1
  803738:	127fff17 	ldw	r9,-4(r2)
  80373c:	68ffff17 	ldw	r3,-4(r13)
  803740:	380f003a 	cmpeq	r7,r7,zero
  803744:	48800117 	ldw	r2,4(r9)
  803748:	1a000117 	ldw	r8,4(r3)
  80374c:	4080101e 	bne	r8,r2,803790 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  803750:	38000f1e 	bne	r7,zero,803790 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  803754:	21c00217 	ldw	r7,8(r4)
  803758:	28c00217 	ldw	r3,8(r5)
  80375c:	01c4303a 	nor	r2,zero,r7
  803760:	10c4703a 	and	r2,r2,r3
  803764:	39c0004c 	andi	r7,r7,1
  803768:	1000091e 	bne	r2,zero,803790 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  80376c:	38000d26 	beq	r7,zero,8037a4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
  803770:	68c00617 	ldw	r3,24(r13)
  803774:	600f883a 	mov	r7,r12
  803778:	183ee83a 	callr	r3
  80377c:	12003fcc 	andi	r8,r2,255
  803780:	4005883a 	mov	r2,r8
  803784:	dfc00017 	ldw	ra,0(sp)
  803788:	dec00104 	addi	sp,sp,4
  80378c:	f800283a 	ret
  803790:	0011883a 	mov	r8,zero
  803794:	4005883a 	mov	r2,r8
  803798:	dfc00017 	ldw	ra,0(sp)
  80379c:	dec00104 	addi	sp,sp,4
  8037a0:	f800283a 	ret
  8037a4:	00bfff84 	movi	r2,-2
  8037a8:	68c00617 	ldw	r3,24(r13)
  8037ac:	6098703a 	and	r12,r12,r2
  8037b0:	600f883a 	mov	r7,r12
  8037b4:	183ee83a 	callr	r3
  8037b8:	12003fcc 	andi	r8,r2,255
  8037bc:	003ff006 	br	803780 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

008037c0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
  8037c0:	defffe04 	addi	sp,sp,-8
  8037c4:	00802074 	movhi	r2,129
  8037c8:	1085bf04 	addi	r2,r2,5884
  8037cc:	dc400015 	stw	r17,0(sp)
  8037d0:	20800015 	stw	r2,0(r4)
  8037d4:	2023883a 	mov	r17,r4
  8037d8:	dfc00115 	stw	ra,4(sp)
  8037dc:	08036240 	call	803624 <_ZNSt9type_infoD2Ev>
  8037e0:	8809883a 	mov	r4,r17
  8037e4:	dfc00117 	ldw	ra,4(sp)
  8037e8:	dc400017 	ldw	r17,0(sp)
  8037ec:	dec00204 	addi	sp,sp,8
  8037f0:	08021401 	jmpi	802140 <_ZdlPv>

008037f4 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
  8037f4:	00802074 	movhi	r2,129
  8037f8:	1085bf04 	addi	r2,r2,5884
  8037fc:	20800015 	stw	r2,0(r4)
  803800:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

00803804 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
  803804:	00802074 	movhi	r2,129
  803808:	1085bf04 	addi	r2,r2,5884
  80380c:	20800015 	stw	r2,0(r4)
  803810:	08036241 	jmpi	803624 <_ZNSt9type_infoD2Ev>

00803814 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
  803814:	21000317 	ldw	r4,12(r4)
  803818:	29400317 	ldw	r5,12(r5)
  80381c:	deffff04 	addi	sp,sp,-4
  803820:	20800017 	ldw	r2,0(r4)
  803824:	dfc00015 	stw	ra,0(sp)
  803828:	39c00084 	addi	r7,r7,2
  80382c:	10c00417 	ldw	r3,16(r2)
  803830:	183ee83a 	callr	r3
  803834:	10803fcc 	andi	r2,r2,255
  803838:	dfc00017 	ldw	ra,0(sp)
  80383c:	dec00104 	addi	sp,sp,4
  803840:	f800283a 	ret

00803844 <_Unwind_SjLj_Register>:
  803844:	d0a7b817 	ldw	r2,-24864(gp)
  803848:	20800015 	stw	r2,0(r4)
  80384c:	d127b815 	stw	r4,-24864(gp)
  803850:	f800283a 	ret

00803854 <_Unwind_SjLj_Unregister>:
  803854:	20800017 	ldw	r2,0(r4)
  803858:	d0a7b815 	stw	r2,-24864(gp)
  80385c:	f800283a 	ret

00803860 <_Unwind_GetGR>:
  803860:	20800017 	ldw	r2,0(r4)
  803864:	294b883a 	add	r5,r5,r5
  803868:	294b883a 	add	r5,r5,r5
  80386c:	288b883a 	add	r5,r5,r2
  803870:	28800217 	ldw	r2,8(r5)
  803874:	f800283a 	ret

00803878 <_Unwind_GetCFA>:
  803878:	21000017 	ldw	r4,0(r4)
  80387c:	0005883a 	mov	r2,zero
  803880:	20000126 	beq	r4,zero,803888 <_Unwind_GetCFA+0x10>
  803884:	20800a17 	ldw	r2,40(r4)
  803888:	f800283a 	ret

0080388c <_Unwind_SetGR>:
  80388c:	20800017 	ldw	r2,0(r4)
  803890:	294b883a 	add	r5,r5,r5
  803894:	294b883a 	add	r5,r5,r5
  803898:	288b883a 	add	r5,r5,r2
  80389c:	29800215 	stw	r6,8(r5)
  8038a0:	f800283a 	ret

008038a4 <_Unwind_GetIP>:
  8038a4:	20c00017 	ldw	r3,0(r4)
  8038a8:	18800117 	ldw	r2,4(r3)
  8038ac:	10800044 	addi	r2,r2,1
  8038b0:	f800283a 	ret

008038b4 <_Unwind_GetIPInfo>:
  8038b4:	20c00017 	ldw	r3,0(r4)
  8038b8:	28000015 	stw	zero,0(r5)
  8038bc:	18800117 	ldw	r2,4(r3)
  8038c0:	10800044 	addi	r2,r2,1
  8038c4:	f800283a 	ret

008038c8 <_Unwind_SetIP>:
  8038c8:	20800017 	ldw	r2,0(r4)
  8038cc:	297fffc4 	addi	r5,r5,-1
  8038d0:	11400115 	stw	r5,4(r2)
  8038d4:	f800283a 	ret

008038d8 <_Unwind_GetLanguageSpecificData>:
  8038d8:	20c00017 	ldw	r3,0(r4)
  8038dc:	18800717 	ldw	r2,28(r3)
  8038e0:	f800283a 	ret

008038e4 <_Unwind_GetRegionStart>:
  8038e4:	0005883a 	mov	r2,zero
  8038e8:	f800283a 	ret

008038ec <_Unwind_FindEnclosingFunction>:
  8038ec:	0005883a 	mov	r2,zero
  8038f0:	f800283a 	ret

008038f4 <_Unwind_GetDataRelBase>:
  8038f4:	0005883a 	mov	r2,zero
  8038f8:	f800283a 	ret

008038fc <_Unwind_GetTextRelBase>:
  8038fc:	0005883a 	mov	r2,zero
  803900:	f800283a 	ret

00803904 <_Unwind_ForcedUnwind_Phase2>:
  803904:	defff604 	addi	sp,sp,-40
  803908:	dd400815 	stw	r21,32(sp)
  80390c:	dd000715 	stw	r20,28(sp)
  803910:	25400317 	ldw	r21,12(r4)
  803914:	25000417 	ldw	r20,16(r4)
  803918:	28800017 	ldw	r2,0(r5)
  80391c:	dc800515 	stw	r18,20(sp)
  803920:	dc000315 	stw	r16,12(sp)
  803924:	2825883a 	mov	r18,r5
  803928:	2021883a 	mov	r16,r4
  80392c:	dfc00915 	stw	ra,36(sp)
  803930:	dcc00615 	stw	r19,24(sp)
  803934:	dc400415 	stw	r17,16(sp)
  803938:	00001406 	br	80398c <_Unwind_ForcedUnwind_Phase2+0x88>
  80393c:	00800144 	movi	r2,5
  803940:	88802626 	beq	r17,r2,8039dc <_Unwind_ForcedUnwind_Phase2+0xd8>
  803944:	98000c26 	beq	r19,zero,803978 <_Unwind_ForcedUnwind_Phase2+0x74>
  803948:	82000017 	ldw	r8,0(r16)
  80394c:	dc000015 	stw	r16,0(sp)
  803950:	dc800115 	stw	r18,4(sp)
  803954:	82400117 	ldw	r9,4(r16)
  803958:	400d883a 	mov	r6,r8
  80395c:	480f883a 	mov	r7,r9
  803960:	983ee83a 	callr	r19
  803964:	1023883a 	mov	r17,r2
  803968:	008001c4 	movi	r2,7
  80396c:	88801b26 	beq	r17,r2,8039dc <_Unwind_ForcedUnwind_Phase2+0xd8>
  803970:	00800204 	movi	r2,8
  803974:	8880181e 	bne	r17,r2,8039d8 <_Unwind_ForcedUnwind_Phase2+0xd4>
  803978:	91000017 	ldw	r4,0(r18)
  80397c:	08038540 	call	803854 <_Unwind_SjLj_Unregister>
  803980:	90800017 	ldw	r2,0(r18)
  803984:	10800017 	ldw	r2,0(r2)
  803988:	90800015 	stw	r2,0(r18)
  80398c:	01400684 	movi	r5,26
  803990:	04400144 	movi	r17,5
  803994:	0027883a 	mov	r19,zero
  803998:	10000326 	beq	r2,zero,8039a8 <_Unwind_ForcedUnwind_Phase2+0xa4>
  80399c:	14c00617 	ldw	r19,24(r2)
  8039a0:	0023883a 	mov	r17,zero
  8039a4:	01400284 	movi	r5,10
  8039a8:	dc000015 	stw	r16,0(sp)
  8039ac:	dc800115 	stw	r18,4(sp)
  8039b0:	80800017 	ldw	r2,0(r16)
  8039b4:	dd000215 	stw	r20,8(sp)
  8039b8:	80c00117 	ldw	r3,4(r16)
  8039bc:	01000044 	movi	r4,1
  8039c0:	100d883a 	mov	r6,r2
  8039c4:	180f883a 	mov	r7,r3
  8039c8:	a83ee83a 	callr	r21
  8039cc:	01400284 	movi	r5,10
  8039d0:	01000044 	movi	r4,1
  8039d4:	103fd926 	beq	r2,zero,80393c <_Unwind_ForcedUnwind_Phase2+0x38>
  8039d8:	04400084 	movi	r17,2
  8039dc:	8805883a 	mov	r2,r17
  8039e0:	dfc00917 	ldw	ra,36(sp)
  8039e4:	dd400817 	ldw	r21,32(sp)
  8039e8:	dd000717 	ldw	r20,28(sp)
  8039ec:	dcc00617 	ldw	r19,24(sp)
  8039f0:	dc800517 	ldw	r18,20(sp)
  8039f4:	dc400417 	ldw	r17,16(sp)
  8039f8:	dc000317 	ldw	r16,12(sp)
  8039fc:	dec00a04 	addi	sp,sp,40
  803a00:	f800283a 	ret

00803a04 <_Unwind_DeleteException>:
  803a04:	20800217 	ldw	r2,8(r4)
  803a08:	200b883a 	mov	r5,r4
  803a0c:	01000044 	movi	r4,1
  803a10:	10000126 	beq	r2,zero,803a18 <_Unwind_DeleteException+0x14>
  803a14:	1000683a 	jmp	r2
  803a18:	f800283a 	ret

00803a1c <_Unwind_RaiseException_Phase2>:
  803a1c:	defffa04 	addi	sp,sp,-24
  803a20:	dc800415 	stw	r18,16(sp)
  803a24:	2825883a 	mov	r18,r5
  803a28:	29400017 	ldw	r5,0(r5)
  803a2c:	dc400315 	stw	r17,12(sp)
  803a30:	dfc00515 	stw	ra,20(sp)
  803a34:	dc000215 	stw	r16,8(sp)
  803a38:	2023883a 	mov	r17,r4
  803a3c:	28001b26 	beq	r5,zero,803aac <_Unwind_RaiseException_Phase2+0x90>
  803a40:	88800417 	ldw	r2,16(r17)
  803a44:	0007883a 	mov	r3,zero
  803a48:	2a000617 	ldw	r8,24(r5)
  803a4c:	28a1003a 	cmpeq	r16,r5,r2
  803a50:	802090ba 	slli	r16,r16,2
  803a54:	18001b1e 	bne	r3,zero,803ac4 <_Unwind_RaiseException_Phase2+0xa8>
  803a58:	40000e26 	beq	r8,zero,803a94 <_Unwind_RaiseException_Phase2+0x78>
  803a5c:	88800017 	ldw	r2,0(r17)
  803a60:	dc400015 	stw	r17,0(sp)
  803a64:	dc800115 	stw	r18,4(sp)
  803a68:	88c00117 	ldw	r3,4(r17)
  803a6c:	01000044 	movi	r4,1
  803a70:	81400094 	ori	r5,r16,2
  803a74:	180f883a 	mov	r7,r3
  803a78:	100d883a 	mov	r6,r2
  803a7c:	403ee83a 	callr	r8
  803a80:	1007883a 	mov	r3,r2
  803a84:	008001c4 	movi	r2,7
  803a88:	18800f26 	beq	r3,r2,803ac8 <_Unwind_RaiseException_Phase2+0xac>
  803a8c:	00800204 	movi	r2,8
  803a90:	18800c1e 	bne	r3,r2,803ac4 <_Unwind_RaiseException_Phase2+0xa8>
  803a94:	8000131e 	bne	r16,zero,803ae4 <_Unwind_RaiseException_Phase2+0xc8>
  803a98:	91400017 	ldw	r5,0(r18)
  803a9c:	28800017 	ldw	r2,0(r5)
  803aa0:	100b883a 	mov	r5,r2
  803aa4:	90800015 	stw	r2,0(r18)
  803aa8:	283fe51e 	bne	r5,zero,803a40 <_Unwind_RaiseException_Phase2+0x24>
  803aac:	88800417 	ldw	r2,16(r17)
  803ab0:	00c00144 	movi	r3,5
  803ab4:	0011883a 	mov	r8,zero
  803ab8:	28a1003a 	cmpeq	r16,r5,r2
  803abc:	802090ba 	slli	r16,r16,2
  803ac0:	183fe526 	beq	r3,zero,803a58 <_Unwind_RaiseException_Phase2+0x3c>
  803ac4:	00c00084 	movi	r3,2
  803ac8:	1805883a 	mov	r2,r3
  803acc:	dfc00517 	ldw	ra,20(sp)
  803ad0:	dc800417 	ldw	r18,16(sp)
  803ad4:	dc400317 	ldw	r17,12(sp)
  803ad8:	dc000217 	ldw	r16,8(sp)
  803adc:	dec00604 	addi	sp,sp,24
  803ae0:	f800283a 	ret
  803ae4:	0803d8c0 	call	803d8c <abort>

00803ae8 <uw_install_context>:
  803ae8:	28800017 	ldw	r2,0(r5)
  803aec:	deffff04 	addi	sp,sp,-4
  803af0:	df000015 	stw	fp,0(sp)
  803af4:	10c00804 	addi	r3,r2,32
  803af8:	d839883a 	mov	fp,sp
  803afc:	d0a7b815 	stw	r2,-24864(gp)
  803b00:	19000117 	ldw	r4,4(r3)
  803b04:	1f000017 	ldw	fp,0(r3)
  803b08:	1ec00217 	ldw	sp,8(r3)
  803b0c:	2000683a 	jmp	r4

00803b10 <_Unwind_SjLj_Resume>:
  803b10:	d0e7b817 	ldw	r3,-24864(gp)
  803b14:	20800317 	ldw	r2,12(r4)
  803b18:	defffc04 	addi	sp,sp,-16
  803b1c:	dfc00315 	stw	ra,12(sp)
  803b20:	dc000215 	stw	r16,8(sp)
  803b24:	d8c00015 	stw	r3,0(sp)
  803b28:	d8c00115 	stw	r3,4(sp)
  803b2c:	1000071e 	bne	r2,zero,803b4c <_Unwind_SjLj_Resume+0x3c>
  803b30:	dc000104 	addi	r16,sp,4
  803b34:	800b883a 	mov	r5,r16
  803b38:	0803a1c0 	call	803a1c <_Unwind_RaiseException_Phase2>
  803b3c:	1007883a 	mov	r3,r2
  803b40:	008001c4 	movi	r2,7
  803b44:	18800626 	beq	r3,r2,803b60 <_Unwind_SjLj_Resume+0x50>
  803b48:	0803d8c0 	call	803d8c <abort>
  803b4c:	dc000104 	addi	r16,sp,4
  803b50:	800b883a 	mov	r5,r16
  803b54:	08039040 	call	803904 <_Unwind_ForcedUnwind_Phase2>
  803b58:	1007883a 	mov	r3,r2
  803b5c:	003ff806 	br	803b40 <_Unwind_SjLj_Resume+0x30>
  803b60:	800b883a 	mov	r5,r16
  803b64:	d809883a 	mov	r4,sp
  803b68:	0803ae80 	call	803ae8 <uw_install_context>

00803b6c <_Unwind_SjLj_RaiseException>:
  803b6c:	d0a7b817 	ldw	r2,-24864(gp)
  803b70:	defff804 	addi	sp,sp,-32
  803b74:	dc000415 	stw	r16,16(sp)
  803b78:	dfc00715 	stw	ra,28(sp)
  803b7c:	dc800615 	stw	r18,24(sp)
  803b80:	dc400515 	stw	r17,20(sp)
  803b84:	2021883a 	mov	r16,r4
  803b88:	d8800215 	stw	r2,8(sp)
  803b8c:	d8800315 	stw	r2,12(sp)
  803b90:	10001626 	beq	r2,zero,803bec <_Unwind_SjLj_RaiseException+0x80>
  803b94:	dc400304 	addi	r17,sp,12
  803b98:	04800184 	movi	r18,6
  803b9c:	00000106 	br	803ba4 <_Unwind_SjLj_RaiseException+0x38>
  803ba0:	d8800315 	stw	r2,12(sp)
  803ba4:	12000617 	ldw	r8,24(r2)
  803ba8:	40000d26 	beq	r8,zero,803be0 <_Unwind_SjLj_RaiseException+0x74>
  803bac:	80800017 	ldw	r2,0(r16)
  803bb0:	dc000015 	stw	r16,0(sp)
  803bb4:	80c00117 	ldw	r3,4(r16)
  803bb8:	01000044 	movi	r4,1
  803bbc:	dc400115 	stw	r17,4(sp)
  803bc0:	180f883a 	mov	r7,r3
  803bc4:	200b883a 	mov	r5,r4
  803bc8:	100d883a 	mov	r6,r2
  803bcc:	403ee83a 	callr	r8
  803bd0:	1007883a 	mov	r3,r2
  803bd4:	14800d26 	beq	r2,r18,803c0c <_Unwind_SjLj_RaiseException+0xa0>
  803bd8:	00800204 	movi	r2,8
  803bdc:	1880191e 	bne	r3,r2,803c44 <_Unwind_SjLj_RaiseException+0xd8>
  803be0:	d8800317 	ldw	r2,12(sp)
  803be4:	10800017 	ldw	r2,0(r2)
  803be8:	103fed1e 	bne	r2,zero,803ba0 <_Unwind_SjLj_RaiseException+0x34>
  803bec:	00c00144 	movi	r3,5
  803bf0:	1805883a 	mov	r2,r3
  803bf4:	dfc00717 	ldw	ra,28(sp)
  803bf8:	dc800617 	ldw	r18,24(sp)
  803bfc:	dc400517 	ldw	r17,20(sp)
  803c00:	dc000417 	ldw	r16,16(sp)
  803c04:	dec00804 	addi	sp,sp,32
  803c08:	f800283a 	ret
  803c0c:	d8800317 	ldw	r2,12(sp)
  803c10:	80000315 	stw	zero,12(r16)
  803c14:	8009883a 	mov	r4,r16
  803c18:	80800415 	stw	r2,16(r16)
  803c1c:	d8800217 	ldw	r2,8(sp)
  803c20:	880b883a 	mov	r5,r17
  803c24:	d8800315 	stw	r2,12(sp)
  803c28:	0803a1c0 	call	803a1c <_Unwind_RaiseException_Phase2>
  803c2c:	1007883a 	mov	r3,r2
  803c30:	008001c4 	movi	r2,7
  803c34:	18bfee1e 	bne	r3,r2,803bf0 <_Unwind_SjLj_RaiseException+0x84>
  803c38:	880b883a 	mov	r5,r17
  803c3c:	d9000204 	addi	r4,sp,8
  803c40:	0803ae80 	call	803ae8 <uw_install_context>
  803c44:	00c000c4 	movi	r3,3
  803c48:	1805883a 	mov	r2,r3
  803c4c:	dfc00717 	ldw	ra,28(sp)
  803c50:	dc800617 	ldw	r18,24(sp)
  803c54:	dc400517 	ldw	r17,20(sp)
  803c58:	dc000417 	ldw	r16,16(sp)
  803c5c:	dec00804 	addi	sp,sp,32
  803c60:	f800283a 	ret

00803c64 <_Unwind_SjLj_ForcedUnwind>:
  803c64:	defffc04 	addi	sp,sp,-16
  803c68:	d0a7b817 	ldw	r2,-24864(gp)
  803c6c:	dc000215 	stw	r16,8(sp)
  803c70:	dc000104 	addi	r16,sp,4
  803c74:	21400315 	stw	r5,12(r4)
  803c78:	21800415 	stw	r6,16(r4)
  803c7c:	800b883a 	mov	r5,r16
  803c80:	dfc00315 	stw	ra,12(sp)
  803c84:	d8800015 	stw	r2,0(sp)
  803c88:	d8800115 	stw	r2,4(sp)
  803c8c:	08039040 	call	803904 <_Unwind_ForcedUnwind_Phase2>
  803c90:	00c001c4 	movi	r3,7
  803c94:	10c00426 	beq	r2,r3,803ca8 <_Unwind_SjLj_ForcedUnwind+0x44>
  803c98:	dfc00317 	ldw	ra,12(sp)
  803c9c:	dc000217 	ldw	r16,8(sp)
  803ca0:	dec00404 	addi	sp,sp,16
  803ca4:	f800283a 	ret
  803ca8:	800b883a 	mov	r5,r16
  803cac:	d809883a 	mov	r4,sp
  803cb0:	0803ae80 	call	803ae8 <uw_install_context>

00803cb4 <_Unwind_Backtrace>:
  803cb4:	d0a7b817 	ldw	r2,-24864(gp)
  803cb8:	defffa04 	addi	sp,sp,-24
  803cbc:	dcc00415 	stw	r19,16(sp)
  803cc0:	dc800315 	stw	r18,12(sp)
  803cc4:	dc400215 	stw	r17,8(sp)
  803cc8:	2025883a 	mov	r18,r4
  803ccc:	2823883a 	mov	r17,r5
  803cd0:	04c00144 	movi	r19,5
  803cd4:	dfc00515 	stw	ra,20(sp)
  803cd8:	dc000115 	stw	r16,4(sp)
  803cdc:	d8800015 	stw	r2,0(sp)
  803ce0:	00000406 	br	803cf4 <_Unwind_Backtrace+0x40>
  803ce4:	84c00b26 	beq	r16,r19,803d14 <_Unwind_Backtrace+0x60>
  803ce8:	d8800017 	ldw	r2,0(sp)
  803cec:	10800017 	ldw	r2,0(r2)
  803cf0:	d8800015 	stw	r2,0(sp)
  803cf4:	04000144 	movi	r16,5
  803cf8:	10000126 	beq	r2,zero,803d00 <_Unwind_Backtrace+0x4c>
  803cfc:	0021883a 	mov	r16,zero
  803d00:	d809883a 	mov	r4,sp
  803d04:	880b883a 	mov	r5,r17
  803d08:	903ee83a 	callr	r18
  803d0c:	103ff526 	beq	r2,zero,803ce4 <_Unwind_Backtrace+0x30>
  803d10:	040000c4 	movi	r16,3
  803d14:	8005883a 	mov	r2,r16
  803d18:	dfc00517 	ldw	ra,20(sp)
  803d1c:	dcc00417 	ldw	r19,16(sp)
  803d20:	dc800317 	ldw	r18,12(sp)
  803d24:	dc400217 	ldw	r17,8(sp)
  803d28:	dc000117 	ldw	r16,4(sp)
  803d2c:	dec00604 	addi	sp,sp,24
  803d30:	f800283a 	ret

00803d34 <_Unwind_SjLj_Resume_or_Rethrow>:
  803d34:	20800317 	ldw	r2,12(r4)
  803d38:	defffc04 	addi	sp,sp,-16
  803d3c:	dfc00315 	stw	ra,12(sp)
  803d40:	dc000215 	stw	r16,8(sp)
  803d44:	10000926 	beq	r2,zero,803d6c <_Unwind_SjLj_Resume_or_Rethrow+0x38>
  803d48:	d0a7b817 	ldw	r2,-24864(gp)
  803d4c:	dc000104 	addi	r16,sp,4
  803d50:	800b883a 	mov	r5,r16
  803d54:	d8800015 	stw	r2,0(sp)
  803d58:	d8800115 	stw	r2,4(sp)
  803d5c:	08039040 	call	803904 <_Unwind_ForcedUnwind_Phase2>
  803d60:	00c001c4 	movi	r3,7
  803d64:	10c00626 	beq	r2,r3,803d80 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
  803d68:	0803d8c0 	call	803d8c <abort>
  803d6c:	0803b6c0 	call	803b6c <_Unwind_SjLj_RaiseException>
  803d70:	dfc00317 	ldw	ra,12(sp)
  803d74:	dc000217 	ldw	r16,8(sp)
  803d78:	dec00404 	addi	sp,sp,16
  803d7c:	f800283a 	ret
  803d80:	800b883a 	mov	r5,r16
  803d84:	d809883a 	mov	r4,sp
  803d88:	0803ae80 	call	803ae8 <uw_install_context>

00803d8c <abort>:
  803d8c:	deffff04 	addi	sp,sp,-4
  803d90:	01000184 	movi	r4,6
  803d94:	dfc00015 	stw	ra,0(sp)
  803d98:	08046e00 	call	8046e0 <raise>
  803d9c:	01000044 	movi	r4,1
  803da0:	080d9f00 	call	80d9f0 <_exit>

00803da4 <free>:
  803da4:	00802074 	movhi	r2,129
  803da8:	108dcb04 	addi	r2,r2,14124
  803dac:	200b883a 	mov	r5,r4
  803db0:	11000017 	ldw	r4,0(r2)
  803db4:	0804bf81 	jmpi	804bf8 <_free_r>

00803db8 <malloc>:
  803db8:	00802074 	movhi	r2,129
  803dbc:	108dcb04 	addi	r2,r2,14124
  803dc0:	200b883a 	mov	r5,r4
  803dc4:	11000017 	ldw	r4,0(r2)
  803dc8:	0803dcc1 	jmpi	803dcc <_malloc_r>

00803dcc <_malloc_r>:
  803dcc:	defff604 	addi	sp,sp,-40
  803dd0:	28c002c4 	addi	r3,r5,11
  803dd4:	00800584 	movi	r2,22
  803dd8:	dc800215 	stw	r18,8(sp)
  803ddc:	dfc00915 	stw	ra,36(sp)
  803de0:	df000815 	stw	fp,32(sp)
  803de4:	ddc00715 	stw	r23,28(sp)
  803de8:	dd800615 	stw	r22,24(sp)
  803dec:	dd400515 	stw	r21,20(sp)
  803df0:	dd000415 	stw	r20,16(sp)
  803df4:	dcc00315 	stw	r19,12(sp)
  803df8:	dc400115 	stw	r17,4(sp)
  803dfc:	dc000015 	stw	r16,0(sp)
  803e00:	2025883a 	mov	r18,r4
  803e04:	10c01236 	bltu	r2,r3,803e50 <_malloc_r+0x84>
  803e08:	04400404 	movi	r17,16
  803e0c:	8940142e 	bgeu	r17,r5,803e60 <_malloc_r+0x94>
  803e10:	00800304 	movi	r2,12
  803e14:	0007883a 	mov	r3,zero
  803e18:	90800015 	stw	r2,0(r18)
  803e1c:	1805883a 	mov	r2,r3
  803e20:	dfc00917 	ldw	ra,36(sp)
  803e24:	df000817 	ldw	fp,32(sp)
  803e28:	ddc00717 	ldw	r23,28(sp)
  803e2c:	dd800617 	ldw	r22,24(sp)
  803e30:	dd400517 	ldw	r21,20(sp)
  803e34:	dd000417 	ldw	r20,16(sp)
  803e38:	dcc00317 	ldw	r19,12(sp)
  803e3c:	dc800217 	ldw	r18,8(sp)
  803e40:	dc400117 	ldw	r17,4(sp)
  803e44:	dc000017 	ldw	r16,0(sp)
  803e48:	dec00a04 	addi	sp,sp,40
  803e4c:	f800283a 	ret
  803e50:	00bffe04 	movi	r2,-8
  803e54:	18a2703a 	and	r17,r3,r2
  803e58:	883fed16 	blt	r17,zero,803e10 <_malloc_r+0x44>
  803e5c:	897fec36 	bltu	r17,r5,803e10 <_malloc_r+0x44>
  803e60:	9009883a 	mov	r4,r18
  803e64:	080e28c0 	call	80e28c <__malloc_lock>
  803e68:	00807dc4 	movi	r2,503
  803e6c:	14402b2e 	bgeu	r2,r17,803f1c <_malloc_r+0x150>
  803e70:	8806d27a 	srli	r3,r17,9
  803e74:	18003f1e 	bne	r3,zero,803f74 <_malloc_r+0x1a8>
  803e78:	880cd0fa 	srli	r6,r17,3
  803e7c:	300490fa 	slli	r2,r6,3
  803e80:	02c02074 	movhi	r11,129
  803e84:	5ac6a304 	addi	r11,r11,6796
  803e88:	12cb883a 	add	r5,r2,r11
  803e8c:	2c000317 	ldw	r16,12(r5)
  803e90:	580f883a 	mov	r7,r11
  803e94:	2c00041e 	bne	r5,r16,803ea8 <_malloc_r+0xdc>
  803e98:	00000a06 	br	803ec4 <_malloc_r+0xf8>
  803e9c:	1800860e 	bge	r3,zero,8040b8 <_malloc_r+0x2ec>
  803ea0:	84000317 	ldw	r16,12(r16)
  803ea4:	2c000726 	beq	r5,r16,803ec4 <_malloc_r+0xf8>
  803ea8:	80800117 	ldw	r2,4(r16)
  803eac:	00ffff04 	movi	r3,-4
  803eb0:	10c8703a 	and	r4,r2,r3
  803eb4:	2447c83a 	sub	r3,r4,r17
  803eb8:	008003c4 	movi	r2,15
  803ebc:	10fff70e 	bge	r2,r3,803e9c <_malloc_r+0xd0>
  803ec0:	31bfffc4 	addi	r6,r6,-1
  803ec4:	32400044 	addi	r9,r6,1
  803ec8:	02802074 	movhi	r10,129
  803ecc:	5286a504 	addi	r10,r10,6804
  803ed0:	54000217 	ldw	r16,8(r10)
  803ed4:	8280a026 	beq	r16,r10,804158 <_malloc_r+0x38c>
  803ed8:	80800117 	ldw	r2,4(r16)
  803edc:	00ffff04 	movi	r3,-4
  803ee0:	10ca703a 	and	r5,r2,r3
  803ee4:	2c4dc83a 	sub	r6,r5,r17
  803ee8:	008003c4 	movi	r2,15
  803eec:	11808316 	blt	r2,r6,8040fc <_malloc_r+0x330>
  803ef0:	52800315 	stw	r10,12(r10)
  803ef4:	52800215 	stw	r10,8(r10)
  803ef8:	30002916 	blt	r6,zero,803fa0 <_malloc_r+0x1d4>
  803efc:	8147883a 	add	r3,r16,r5
  803f00:	18800117 	ldw	r2,4(r3)
  803f04:	9009883a 	mov	r4,r18
  803f08:	10800054 	ori	r2,r2,1
  803f0c:	18800115 	stw	r2,4(r3)
  803f10:	080e2ac0 	call	80e2ac <__malloc_unlock>
  803f14:	80c00204 	addi	r3,r16,8
  803f18:	003fc006 	br	803e1c <_malloc_r+0x50>
  803f1c:	02c02074 	movhi	r11,129
  803f20:	5ac6a304 	addi	r11,r11,6796
  803f24:	8ac5883a 	add	r2,r17,r11
  803f28:	14000317 	ldw	r16,12(r2)
  803f2c:	580f883a 	mov	r7,r11
  803f30:	8806d0fa 	srli	r3,r17,3
  803f34:	14006c26 	beq	r2,r16,8040e8 <_malloc_r+0x31c>
  803f38:	80c00117 	ldw	r3,4(r16)
  803f3c:	00bfff04 	movi	r2,-4
  803f40:	81800317 	ldw	r6,12(r16)
  803f44:	1886703a 	and	r3,r3,r2
  803f48:	80c7883a 	add	r3,r16,r3
  803f4c:	18800117 	ldw	r2,4(r3)
  803f50:	81400217 	ldw	r5,8(r16)
  803f54:	9009883a 	mov	r4,r18
  803f58:	10800054 	ori	r2,r2,1
  803f5c:	18800115 	stw	r2,4(r3)
  803f60:	31400215 	stw	r5,8(r6)
  803f64:	29800315 	stw	r6,12(r5)
  803f68:	080e2ac0 	call	80e2ac <__malloc_unlock>
  803f6c:	80c00204 	addi	r3,r16,8
  803f70:	003faa06 	br	803e1c <_malloc_r+0x50>
  803f74:	00800104 	movi	r2,4
  803f78:	10c0052e 	bgeu	r2,r3,803f90 <_malloc_r+0x1c4>
  803f7c:	00800504 	movi	r2,20
  803f80:	10c07836 	bltu	r2,r3,804164 <_malloc_r+0x398>
  803f84:	198016c4 	addi	r6,r3,91
  803f88:	300490fa 	slli	r2,r6,3
  803f8c:	003fbc06 	br	803e80 <_malloc_r+0xb4>
  803f90:	8804d1ba 	srli	r2,r17,6
  803f94:	11800e04 	addi	r6,r2,56
  803f98:	300490fa 	slli	r2,r6,3
  803f9c:	003fb806 	br	803e80 <_malloc_r+0xb4>
  803fa0:	00807fc4 	movi	r2,511
  803fa4:	1140bb36 	bltu	r2,r5,804294 <_malloc_r+0x4c8>
  803fa8:	2806d0fa 	srli	r3,r5,3
  803fac:	573ffe04 	addi	fp,r10,-8
  803fb0:	00800044 	movi	r2,1
  803fb4:	180890fa 	slli	r4,r3,3
  803fb8:	1807d0ba 	srai	r3,r3,2
  803fbc:	e1c00117 	ldw	r7,4(fp)
  803fc0:	5909883a 	add	r4,r11,r4
  803fc4:	21400217 	ldw	r5,8(r4)
  803fc8:	10c4983a 	sll	r2,r2,r3
  803fcc:	81000315 	stw	r4,12(r16)
  803fd0:	81400215 	stw	r5,8(r16)
  803fd4:	388eb03a 	or	r7,r7,r2
  803fd8:	2c000315 	stw	r16,12(r5)
  803fdc:	24000215 	stw	r16,8(r4)
  803fe0:	e1c00115 	stw	r7,4(fp)
  803fe4:	4807883a 	mov	r3,r9
  803fe8:	4800cd16 	blt	r9,zero,804320 <_malloc_r+0x554>
  803fec:	1807d0ba 	srai	r3,r3,2
  803ff0:	00800044 	movi	r2,1
  803ff4:	10c8983a 	sll	r4,r2,r3
  803ff8:	39004436 	bltu	r7,r4,80410c <_malloc_r+0x340>
  803ffc:	21c4703a 	and	r2,r4,r7
  804000:	10000a1e 	bne	r2,zero,80402c <_malloc_r+0x260>
  804004:	2109883a 	add	r4,r4,r4
  804008:	00bfff04 	movi	r2,-4
  80400c:	4884703a 	and	r2,r9,r2
  804010:	3906703a 	and	r3,r7,r4
  804014:	12400104 	addi	r9,r2,4
  804018:	1800041e 	bne	r3,zero,80402c <_malloc_r+0x260>
  80401c:	2109883a 	add	r4,r4,r4
  804020:	3904703a 	and	r2,r7,r4
  804024:	4a400104 	addi	r9,r9,4
  804028:	103ffc26 	beq	r2,zero,80401c <_malloc_r+0x250>
  80402c:	480490fa 	slli	r2,r9,3
  804030:	4819883a 	mov	r12,r9
  804034:	023fff04 	movi	r8,-4
  804038:	589b883a 	add	r13,r11,r2
  80403c:	6807883a 	mov	r3,r13
  804040:	014003c4 	movi	r5,15
  804044:	1c000317 	ldw	r16,12(r3)
  804048:	1c00041e 	bne	r3,r16,80405c <_malloc_r+0x290>
  80404c:	0000a706 	br	8042ec <_malloc_r+0x520>
  804050:	3000ab0e 	bge	r6,zero,804300 <_malloc_r+0x534>
  804054:	84000317 	ldw	r16,12(r16)
  804058:	1c00a426 	beq	r3,r16,8042ec <_malloc_r+0x520>
  80405c:	80800117 	ldw	r2,4(r16)
  804060:	1204703a 	and	r2,r2,r8
  804064:	144dc83a 	sub	r6,r2,r17
  804068:	29bff90e 	bge	r5,r6,804050 <_malloc_r+0x284>
  80406c:	81000317 	ldw	r4,12(r16)
  804070:	80c00217 	ldw	r3,8(r16)
  804074:	89400054 	ori	r5,r17,1
  804078:	8445883a 	add	r2,r16,r17
  80407c:	20c00215 	stw	r3,8(r4)
  804080:	19000315 	stw	r4,12(r3)
  804084:	81400115 	stw	r5,4(r16)
  804088:	1187883a 	add	r3,r2,r6
  80408c:	31000054 	ori	r4,r6,1
  804090:	50800315 	stw	r2,12(r10)
  804094:	50800215 	stw	r2,8(r10)
  804098:	19800015 	stw	r6,0(r3)
  80409c:	11000115 	stw	r4,4(r2)
  8040a0:	12800215 	stw	r10,8(r2)
  8040a4:	12800315 	stw	r10,12(r2)
  8040a8:	9009883a 	mov	r4,r18
  8040ac:	080e2ac0 	call	80e2ac <__malloc_unlock>
  8040b0:	80c00204 	addi	r3,r16,8
  8040b4:	003f5906 	br	803e1c <_malloc_r+0x50>
  8040b8:	8109883a 	add	r4,r16,r4
  8040bc:	20800117 	ldw	r2,4(r4)
  8040c0:	80c00217 	ldw	r3,8(r16)
  8040c4:	81400317 	ldw	r5,12(r16)
  8040c8:	10800054 	ori	r2,r2,1
  8040cc:	20800115 	stw	r2,4(r4)
  8040d0:	28c00215 	stw	r3,8(r5)
  8040d4:	19400315 	stw	r5,12(r3)
  8040d8:	9009883a 	mov	r4,r18
  8040dc:	080e2ac0 	call	80e2ac <__malloc_unlock>
  8040e0:	80c00204 	addi	r3,r16,8
  8040e4:	003f4d06 	br	803e1c <_malloc_r+0x50>
  8040e8:	80800204 	addi	r2,r16,8
  8040ec:	14000317 	ldw	r16,12(r2)
  8040f0:	143f911e 	bne	r2,r16,803f38 <_malloc_r+0x16c>
  8040f4:	1a400084 	addi	r9,r3,2
  8040f8:	003f7306 	br	803ec8 <_malloc_r+0xfc>
  8040fc:	88c00054 	ori	r3,r17,1
  804100:	8445883a 	add	r2,r16,r17
  804104:	80c00115 	stw	r3,4(r16)
  804108:	003fdf06 	br	804088 <_malloc_r+0x2bc>
  80410c:	e4000217 	ldw	r16,8(fp)
  804110:	00bfff04 	movi	r2,-4
  804114:	80c00117 	ldw	r3,4(r16)
  804118:	802d883a 	mov	r22,r16
  80411c:	18aa703a 	and	r21,r3,r2
  804120:	ac401636 	bltu	r21,r17,80417c <_malloc_r+0x3b0>
  804124:	ac49c83a 	sub	r4,r21,r17
  804128:	008003c4 	movi	r2,15
  80412c:	1100130e 	bge	r2,r4,80417c <_malloc_r+0x3b0>
  804130:	88800054 	ori	r2,r17,1
  804134:	8447883a 	add	r3,r16,r17
  804138:	80800115 	stw	r2,4(r16)
  80413c:	20800054 	ori	r2,r4,1
  804140:	18800115 	stw	r2,4(r3)
  804144:	e0c00215 	stw	r3,8(fp)
  804148:	9009883a 	mov	r4,r18
  80414c:	080e2ac0 	call	80e2ac <__malloc_unlock>
  804150:	80c00204 	addi	r3,r16,8
  804154:	003f3106 	br	803e1c <_malloc_r+0x50>
  804158:	39c00117 	ldw	r7,4(r7)
  80415c:	573ffe04 	addi	fp,r10,-8
  804160:	003fa006 	br	803fe4 <_malloc_r+0x218>
  804164:	00801504 	movi	r2,84
  804168:	10c06736 	bltu	r2,r3,804308 <_malloc_r+0x53c>
  80416c:	8804d33a 	srli	r2,r17,12
  804170:	11801b84 	addi	r6,r2,110
  804174:	300490fa 	slli	r2,r6,3
  804178:	003f4106 	br	803e80 <_malloc_r+0xb4>
  80417c:	d0a7b917 	ldw	r2,-24860(gp)
  804180:	d0e06f17 	ldw	r3,-32324(gp)
  804184:	053fffc4 	movi	r20,-1
  804188:	10800404 	addi	r2,r2,16
  80418c:	88a7883a 	add	r19,r17,r2
  804190:	1d000326 	beq	r3,r20,8041a0 <_malloc_r+0x3d4>
  804194:	98c3ffc4 	addi	r3,r19,4095
  804198:	00bc0004 	movi	r2,-4096
  80419c:	18a6703a 	and	r19,r3,r2
  8041a0:	9009883a 	mov	r4,r18
  8041a4:	980b883a 	mov	r5,r19
  8041a8:	08045a40 	call	8045a4 <_sbrk_r>
  8041ac:	1009883a 	mov	r4,r2
  8041b0:	15000426 	beq	r2,r20,8041c4 <_malloc_r+0x3f8>
  8041b4:	854b883a 	add	r5,r16,r21
  8041b8:	1029883a 	mov	r20,r2
  8041bc:	11405a2e 	bgeu	r2,r5,804328 <_malloc_r+0x55c>
  8041c0:	87000c26 	beq	r16,fp,8041f4 <_malloc_r+0x428>
  8041c4:	e4000217 	ldw	r16,8(fp)
  8041c8:	80c00117 	ldw	r3,4(r16)
  8041cc:	00bfff04 	movi	r2,-4
  8041d0:	1884703a 	and	r2,r3,r2
  8041d4:	14400336 	bltu	r2,r17,8041e4 <_malloc_r+0x418>
  8041d8:	1449c83a 	sub	r4,r2,r17
  8041dc:	008003c4 	movi	r2,15
  8041e0:	113fd316 	blt	r2,r4,804130 <_malloc_r+0x364>
  8041e4:	9009883a 	mov	r4,r18
  8041e8:	080e2ac0 	call	80e2ac <__malloc_unlock>
  8041ec:	0007883a 	mov	r3,zero
  8041f0:	003f0a06 	br	803e1c <_malloc_r+0x50>
  8041f4:	05c02074 	movhi	r23,129
  8041f8:	bdd72104 	addi	r23,r23,23684
  8041fc:	b8800017 	ldw	r2,0(r23)
  804200:	988d883a 	add	r6,r19,r2
  804204:	b9800015 	stw	r6,0(r23)
  804208:	d0e06f17 	ldw	r3,-32324(gp)
  80420c:	00bfffc4 	movi	r2,-1
  804210:	18808e26 	beq	r3,r2,80444c <_malloc_r+0x680>
  804214:	2145c83a 	sub	r2,r4,r5
  804218:	3085883a 	add	r2,r6,r2
  80421c:	b8800015 	stw	r2,0(r23)
  804220:	20c001cc 	andi	r3,r4,7
  804224:	18005f1e 	bne	r3,zero,8043a4 <_malloc_r+0x5d8>
  804228:	000b883a 	mov	r5,zero
  80422c:	a4c5883a 	add	r2,r20,r19
  804230:	1083ffcc 	andi	r2,r2,4095
  804234:	00c40004 	movi	r3,4096
  804238:	1887c83a 	sub	r3,r3,r2
  80423c:	28e7883a 	add	r19,r5,r3
  804240:	9009883a 	mov	r4,r18
  804244:	980b883a 	mov	r5,r19
  804248:	08045a40 	call	8045a4 <_sbrk_r>
  80424c:	1007883a 	mov	r3,r2
  804250:	00bfffc4 	movi	r2,-1
  804254:	18807a26 	beq	r3,r2,804440 <_malloc_r+0x674>
  804258:	1d05c83a 	sub	r2,r3,r20
  80425c:	9885883a 	add	r2,r19,r2
  804260:	10c00054 	ori	r3,r2,1
  804264:	b8800017 	ldw	r2,0(r23)
  804268:	a021883a 	mov	r16,r20
  80426c:	a0c00115 	stw	r3,4(r20)
  804270:	9885883a 	add	r2,r19,r2
  804274:	b8800015 	stw	r2,0(r23)
  804278:	e5000215 	stw	r20,8(fp)
  80427c:	b7003626 	beq	r22,fp,804358 <_malloc_r+0x58c>
  804280:	018003c4 	movi	r6,15
  804284:	35404b36 	bltu	r6,r21,8043b4 <_malloc_r+0x5e8>
  804288:	00800044 	movi	r2,1
  80428c:	a0800115 	stw	r2,4(r20)
  804290:	003fcd06 	br	8041c8 <_malloc_r+0x3fc>
  804294:	2808d27a 	srli	r4,r5,9
  804298:	2000371e 	bne	r4,zero,804378 <_malloc_r+0x5ac>
  80429c:	2808d0fa 	srli	r4,r5,3
  8042a0:	200690fa 	slli	r3,r4,3
  8042a4:	1ad1883a 	add	r8,r3,r11
  8042a8:	41800217 	ldw	r6,8(r8)
  8042ac:	41805b26 	beq	r8,r6,80441c <_malloc_r+0x650>
  8042b0:	30800117 	ldw	r2,4(r6)
  8042b4:	00ffff04 	movi	r3,-4
  8042b8:	10c4703a 	and	r2,r2,r3
  8042bc:	2880022e 	bgeu	r5,r2,8042c8 <_malloc_r+0x4fc>
  8042c0:	31800217 	ldw	r6,8(r6)
  8042c4:	41bffa1e 	bne	r8,r6,8042b0 <_malloc_r+0x4e4>
  8042c8:	32000317 	ldw	r8,12(r6)
  8042cc:	39c00117 	ldw	r7,4(r7)
  8042d0:	82000315 	stw	r8,12(r16)
  8042d4:	81800215 	stw	r6,8(r16)
  8042d8:	07002074 	movhi	fp,129
  8042dc:	e706a304 	addi	fp,fp,6796
  8042e0:	34000315 	stw	r16,12(r6)
  8042e4:	44000215 	stw	r16,8(r8)
  8042e8:	003f3e06 	br	803fe4 <_malloc_r+0x218>
  8042ec:	63000044 	addi	r12,r12,1
  8042f0:	608000cc 	andi	r2,r12,3
  8042f4:	10005d26 	beq	r2,zero,80446c <_malloc_r+0x6a0>
  8042f8:	18c00204 	addi	r3,r3,8
  8042fc:	003f5106 	br	804044 <_malloc_r+0x278>
  804300:	8089883a 	add	r4,r16,r2
  804304:	003f6d06 	br	8040bc <_malloc_r+0x2f0>
  804308:	00805504 	movi	r2,340
  80430c:	10c02036 	bltu	r2,r3,804390 <_malloc_r+0x5c4>
  804310:	8804d3fa 	srli	r2,r17,15
  804314:	11801dc4 	addi	r6,r2,119
  804318:	300490fa 	slli	r2,r6,3
  80431c:	003ed806 	br	803e80 <_malloc_r+0xb4>
  804320:	48c000c4 	addi	r3,r9,3
  804324:	003f3106 	br	803fec <_malloc_r+0x220>
  804328:	05c02074 	movhi	r23,129
  80432c:	bdd72104 	addi	r23,r23,23684
  804330:	b8800017 	ldw	r2,0(r23)
  804334:	988d883a 	add	r6,r19,r2
  804338:	b9800015 	stw	r6,0(r23)
  80433c:	293fb21e 	bne	r5,r4,804208 <_malloc_r+0x43c>
  804340:	2083ffcc 	andi	r2,r4,4095
  804344:	103fb01e 	bne	r2,zero,804208 <_malloc_r+0x43c>
  804348:	e4000217 	ldw	r16,8(fp)
  80434c:	9d45883a 	add	r2,r19,r21
  804350:	10800054 	ori	r2,r2,1
  804354:	80800115 	stw	r2,4(r16)
  804358:	b8c00017 	ldw	r3,0(r23)
  80435c:	d0a7ba17 	ldw	r2,-24856(gp)
  804360:	10c0012e 	bgeu	r2,r3,804368 <_malloc_r+0x59c>
  804364:	d0e7ba15 	stw	r3,-24856(gp)
  804368:	d0a7bb17 	ldw	r2,-24852(gp)
  80436c:	10ff962e 	bgeu	r2,r3,8041c8 <_malloc_r+0x3fc>
  804370:	d0e7bb15 	stw	r3,-24852(gp)
  804374:	003f9406 	br	8041c8 <_malloc_r+0x3fc>
  804378:	00800104 	movi	r2,4
  80437c:	11001e36 	bltu	r2,r4,8043f8 <_malloc_r+0x62c>
  804380:	2804d1ba 	srli	r2,r5,6
  804384:	11000e04 	addi	r4,r2,56
  804388:	200690fa 	slli	r3,r4,3
  80438c:	003fc506 	br	8042a4 <_malloc_r+0x4d8>
  804390:	00815504 	movi	r2,1364
  804394:	10c01d2e 	bgeu	r2,r3,80440c <_malloc_r+0x640>
  804398:	01801f84 	movi	r6,126
  80439c:	0080fc04 	movi	r2,1008
  8043a0:	003eb706 	br	803e80 <_malloc_r+0xb4>
  8043a4:	00800204 	movi	r2,8
  8043a8:	10cbc83a 	sub	r5,r2,r3
  8043ac:	2169883a 	add	r20,r4,r5
  8043b0:	003f9e06 	br	80422c <_malloc_r+0x460>
  8043b4:	00bffe04 	movi	r2,-8
  8043b8:	a93ffd04 	addi	r4,r21,-12
  8043bc:	2088703a 	and	r4,r4,r2
  8043c0:	b10b883a 	add	r5,r22,r4
  8043c4:	00c00144 	movi	r3,5
  8043c8:	28c00215 	stw	r3,8(r5)
  8043cc:	28c00115 	stw	r3,4(r5)
  8043d0:	b0800117 	ldw	r2,4(r22)
  8043d4:	1080004c 	andi	r2,r2,1
  8043d8:	2084b03a 	or	r2,r4,r2
  8043dc:	b0800115 	stw	r2,4(r22)
  8043e0:	313fdd2e 	bgeu	r6,r4,804358 <_malloc_r+0x58c>
  8043e4:	b1400204 	addi	r5,r22,8
  8043e8:	9009883a 	mov	r4,r18
  8043ec:	0804bf80 	call	804bf8 <_free_r>
  8043f0:	e4000217 	ldw	r16,8(fp)
  8043f4:	003fd806 	br	804358 <_malloc_r+0x58c>
  8043f8:	00800504 	movi	r2,20
  8043fc:	11001536 	bltu	r2,r4,804454 <_malloc_r+0x688>
  804400:	210016c4 	addi	r4,r4,91
  804404:	200690fa 	slli	r3,r4,3
  804408:	003fa606 	br	8042a4 <_malloc_r+0x4d8>
  80440c:	8804d4ba 	srli	r2,r17,18
  804410:	11801f04 	addi	r6,r2,124
  804414:	300490fa 	slli	r2,r6,3
  804418:	003e9906 	br	803e80 <_malloc_r+0xb4>
  80441c:	2009d0ba 	srai	r4,r4,2
  804420:	01402074 	movhi	r5,129
  804424:	2946a304 	addi	r5,r5,6796
  804428:	00c00044 	movi	r3,1
  80442c:	28800117 	ldw	r2,4(r5)
  804430:	1906983a 	sll	r3,r3,r4
  804434:	10c4b03a 	or	r2,r2,r3
  804438:	28800115 	stw	r2,4(r5)
  80443c:	003fa306 	br	8042cc <_malloc_r+0x500>
  804440:	0027883a 	mov	r19,zero
  804444:	00c00044 	movi	r3,1
  804448:	003f8606 	br	804264 <_malloc_r+0x498>
  80444c:	d1206f15 	stw	r4,-32324(gp)
  804450:	003f7306 	br	804220 <_malloc_r+0x454>
  804454:	00801504 	movi	r2,84
  804458:	11001936 	bltu	r2,r4,8044c0 <_malloc_r+0x6f4>
  80445c:	2804d33a 	srli	r2,r5,12
  804460:	11001b84 	addi	r4,r2,110
  804464:	200690fa 	slli	r3,r4,3
  804468:	003f8e06 	br	8042a4 <_malloc_r+0x4d8>
  80446c:	480b883a 	mov	r5,r9
  804470:	6807883a 	mov	r3,r13
  804474:	288000cc 	andi	r2,r5,3
  804478:	18fffe04 	addi	r3,r3,-8
  80447c:	297fffc4 	addi	r5,r5,-1
  804480:	10001526 	beq	r2,zero,8044d8 <_malloc_r+0x70c>
  804484:	18800217 	ldw	r2,8(r3)
  804488:	10fffa26 	beq	r2,r3,804474 <_malloc_r+0x6a8>
  80448c:	2109883a 	add	r4,r4,r4
  804490:	393f1e36 	bltu	r7,r4,80410c <_malloc_r+0x340>
  804494:	203f1d26 	beq	r4,zero,80410c <_malloc_r+0x340>
  804498:	21c4703a 	and	r2,r4,r7
  80449c:	10000226 	beq	r2,zero,8044a8 <_malloc_r+0x6dc>
  8044a0:	6013883a 	mov	r9,r12
  8044a4:	003ee106 	br	80402c <_malloc_r+0x260>
  8044a8:	2109883a 	add	r4,r4,r4
  8044ac:	3904703a 	and	r2,r7,r4
  8044b0:	63000104 	addi	r12,r12,4
  8044b4:	103ffc26 	beq	r2,zero,8044a8 <_malloc_r+0x6dc>
  8044b8:	6013883a 	mov	r9,r12
  8044bc:	003edb06 	br	80402c <_malloc_r+0x260>
  8044c0:	00805504 	movi	r2,340
  8044c4:	11000836 	bltu	r2,r4,8044e8 <_malloc_r+0x71c>
  8044c8:	2804d3fa 	srli	r2,r5,15
  8044cc:	11001dc4 	addi	r4,r2,119
  8044d0:	200690fa 	slli	r3,r4,3
  8044d4:	003f7306 	br	8042a4 <_malloc_r+0x4d8>
  8044d8:	0104303a 	nor	r2,zero,r4
  8044dc:	388e703a 	and	r7,r7,r2
  8044e0:	e1c00115 	stw	r7,4(fp)
  8044e4:	003fe906 	br	80448c <_malloc_r+0x6c0>
  8044e8:	00815504 	movi	r2,1364
  8044ec:	1100032e 	bgeu	r2,r4,8044fc <_malloc_r+0x730>
  8044f0:	01001f84 	movi	r4,126
  8044f4:	00c0fc04 	movi	r3,1008
  8044f8:	003f6a06 	br	8042a4 <_malloc_r+0x4d8>
  8044fc:	2804d4ba 	srli	r2,r5,18
  804500:	11001f04 	addi	r4,r2,124
  804504:	200690fa 	slli	r3,r4,3
  804508:	003f6606 	br	8042a4 <_malloc_r+0x4d8>

0080450c <memset>:
  80450c:	008000c4 	movi	r2,3
  804510:	29403fcc 	andi	r5,r5,255
  804514:	2007883a 	mov	r3,r4
  804518:	1180022e 	bgeu	r2,r6,804524 <memset+0x18>
  80451c:	2084703a 	and	r2,r4,r2
  804520:	10000826 	beq	r2,zero,804544 <memset+0x38>
  804524:	30000526 	beq	r6,zero,80453c <memset+0x30>
  804528:	2805883a 	mov	r2,r5
  80452c:	30cd883a 	add	r6,r6,r3
  804530:	18800005 	stb	r2,0(r3)
  804534:	18c00044 	addi	r3,r3,1
  804538:	19bffd1e 	bne	r3,r6,804530 <memset+0x24>
  80453c:	2005883a 	mov	r2,r4
  804540:	f800283a 	ret
  804544:	2804923a 	slli	r2,r5,8
  804548:	020003c4 	movi	r8,15
  80454c:	200f883a 	mov	r7,r4
  804550:	2884b03a 	or	r2,r5,r2
  804554:	1006943a 	slli	r3,r2,16
  804558:	10c6b03a 	or	r3,r2,r3
  80455c:	41800a2e 	bgeu	r8,r6,804588 <memset+0x7c>
  804560:	4005883a 	mov	r2,r8
  804564:	31bffc04 	addi	r6,r6,-16
  804568:	38c00015 	stw	r3,0(r7)
  80456c:	38c00115 	stw	r3,4(r7)
  804570:	38c00215 	stw	r3,8(r7)
  804574:	38c00315 	stw	r3,12(r7)
  804578:	39c00404 	addi	r7,r7,16
  80457c:	11bff936 	bltu	r2,r6,804564 <memset+0x58>
  804580:	008000c4 	movi	r2,3
  804584:	1180052e 	bgeu	r2,r6,80459c <memset+0x90>
  804588:	31bfff04 	addi	r6,r6,-4
  80458c:	008000c4 	movi	r2,3
  804590:	38c00015 	stw	r3,0(r7)
  804594:	39c00104 	addi	r7,r7,4
  804598:	11bffb36 	bltu	r2,r6,804588 <memset+0x7c>
  80459c:	3807883a 	mov	r3,r7
  8045a0:	003fe006 	br	804524 <memset+0x18>

008045a4 <_sbrk_r>:
  8045a4:	defffd04 	addi	sp,sp,-12
  8045a8:	dc000015 	stw	r16,0(sp)
  8045ac:	04002074 	movhi	r16,129
  8045b0:	84151704 	addi	r16,r16,21596
  8045b4:	dc400115 	stw	r17,4(sp)
  8045b8:	80000015 	stw	zero,0(r16)
  8045bc:	2023883a 	mov	r17,r4
  8045c0:	2809883a 	mov	r4,r5
  8045c4:	dfc00215 	stw	ra,8(sp)
  8045c8:	080e4ac0 	call	80e4ac <sbrk>
  8045cc:	1007883a 	mov	r3,r2
  8045d0:	00bfffc4 	movi	r2,-1
  8045d4:	18800626 	beq	r3,r2,8045f0 <_sbrk_r+0x4c>
  8045d8:	1805883a 	mov	r2,r3
  8045dc:	dfc00217 	ldw	ra,8(sp)
  8045e0:	dc400117 	ldw	r17,4(sp)
  8045e4:	dc000017 	ldw	r16,0(sp)
  8045e8:	dec00304 	addi	sp,sp,12
  8045ec:	f800283a 	ret
  8045f0:	80800017 	ldw	r2,0(r16)
  8045f4:	103ff826 	beq	r2,zero,8045d8 <_sbrk_r+0x34>
  8045f8:	88800015 	stw	r2,0(r17)
  8045fc:	1805883a 	mov	r2,r3
  804600:	dfc00217 	ldw	ra,8(sp)
  804604:	dc400117 	ldw	r17,4(sp)
  804608:	dc000017 	ldw	r16,0(sp)
  80460c:	dec00304 	addi	sp,sp,12
  804610:	f800283a 	ret

00804614 <_raise_r>:
  804614:	defffd04 	addi	sp,sp,-12
  804618:	008007c4 	movi	r2,31
  80461c:	dc400115 	stw	r17,4(sp)
  804620:	dc000015 	stw	r16,0(sp)
  804624:	dfc00215 	stw	ra,8(sp)
  804628:	2821883a 	mov	r16,r5
  80462c:	2023883a 	mov	r17,r4
  804630:	11402736 	bltu	r2,r5,8046d0 <_raise_r+0xbc>
  804634:	20c0b717 	ldw	r3,732(r4)
  804638:	18001326 	beq	r3,zero,804688 <_raise_r+0x74>
  80463c:	2945883a 	add	r2,r5,r5
  804640:	1085883a 	add	r2,r2,r2
  804644:	188b883a 	add	r5,r3,r2
  804648:	28c00017 	ldw	r3,0(r5)
  80464c:	18000e26 	beq	r3,zero,804688 <_raise_r+0x74>
  804650:	01000044 	movi	r4,1
  804654:	19000526 	beq	r3,r4,80466c <_raise_r+0x58>
  804658:	00bfffc4 	movi	r2,-1
  80465c:	18801326 	beq	r3,r2,8046ac <_raise_r+0x98>
  804660:	28000015 	stw	zero,0(r5)
  804664:	8009883a 	mov	r4,r16
  804668:	183ee83a 	callr	r3
  80466c:	0007883a 	mov	r3,zero
  804670:	1805883a 	mov	r2,r3
  804674:	dfc00217 	ldw	ra,8(sp)
  804678:	dc400117 	ldw	r17,4(sp)
  80467c:	dc000017 	ldw	r16,0(sp)
  804680:	dec00304 	addi	sp,sp,12
  804684:	f800283a 	ret
  804688:	08048ec0 	call	8048ec <_getpid_r>
  80468c:	100b883a 	mov	r5,r2
  804690:	8809883a 	mov	r4,r17
  804694:	800d883a 	mov	r6,r16
  804698:	dfc00217 	ldw	ra,8(sp)
  80469c:	dc400117 	ldw	r17,4(sp)
  8046a0:	dc000017 	ldw	r16,0(sp)
  8046a4:	dec00304 	addi	sp,sp,12
  8046a8:	08048f01 	jmpi	8048f0 <_kill_r>
  8046ac:	2007883a 	mov	r3,r4
  8046b0:	00800584 	movi	r2,22
  8046b4:	88800015 	stw	r2,0(r17)
  8046b8:	1805883a 	mov	r2,r3
  8046bc:	dfc00217 	ldw	ra,8(sp)
  8046c0:	dc400117 	ldw	r17,4(sp)
  8046c4:	dc000017 	ldw	r16,0(sp)
  8046c8:	dec00304 	addi	sp,sp,12
  8046cc:	f800283a 	ret
  8046d0:	00800584 	movi	r2,22
  8046d4:	00ffffc4 	movi	r3,-1
  8046d8:	20800015 	stw	r2,0(r4)
  8046dc:	003fe406 	br	804670 <_raise_r+0x5c>

008046e0 <raise>:
  8046e0:	00802074 	movhi	r2,129
  8046e4:	108dcb04 	addi	r2,r2,14124
  8046e8:	200b883a 	mov	r5,r4
  8046ec:	11000017 	ldw	r4,0(r2)
  8046f0:	08046141 	jmpi	804614 <_raise_r>

008046f4 <_init_signal_r>:
  8046f4:	2080b717 	ldw	r2,732(r4)
  8046f8:	defffe04 	addi	sp,sp,-8
  8046fc:	dc000015 	stw	r16,0(sp)
  804700:	dfc00115 	stw	ra,4(sp)
  804704:	2021883a 	mov	r16,r4
  804708:	10000526 	beq	r2,zero,804720 <_init_signal_r+0x2c>
  80470c:	0005883a 	mov	r2,zero
  804710:	dfc00117 	ldw	ra,4(sp)
  804714:	dc000017 	ldw	r16,0(sp)
  804718:	dec00204 	addi	sp,sp,8
  80471c:	f800283a 	ret
  804720:	01402004 	movi	r5,128
  804724:	0803dcc0 	call	803dcc <_malloc_r>
  804728:	1009883a 	mov	r4,r2
  80472c:	8080b715 	stw	r2,732(r16)
  804730:	10000726 	beq	r2,zero,804750 <_init_signal_r+0x5c>
  804734:	0007883a 	mov	r3,zero
  804738:	01402004 	movi	r5,128
  80473c:	20c5883a 	add	r2,r4,r3
  804740:	18c00104 	addi	r3,r3,4
  804744:	10000015 	stw	zero,0(r2)
  804748:	197ffc1e 	bne	r3,r5,80473c <_init_signal_r+0x48>
  80474c:	003fef06 	br	80470c <_init_signal_r+0x18>
  804750:	00bfffc4 	movi	r2,-1
  804754:	003fee06 	br	804710 <_init_signal_r+0x1c>

00804758 <_init_signal>:
  804758:	00802074 	movhi	r2,129
  80475c:	108dcb04 	addi	r2,r2,14124
  804760:	11000017 	ldw	r4,0(r2)
  804764:	08046f41 	jmpi	8046f4 <_init_signal_r>

00804768 <__sigtramp_r>:
  804768:	defffd04 	addi	sp,sp,-12
  80476c:	008007c4 	movi	r2,31
  804770:	dc000115 	stw	r16,4(sp)
  804774:	dfc00215 	stw	ra,8(sp)
  804778:	2021883a 	mov	r16,r4
  80477c:	11401336 	bltu	r2,r5,8047cc <__sigtramp_r+0x64>
  804780:	20c0b717 	ldw	r3,732(r4)
  804784:	18001f26 	beq	r3,zero,804804 <__sigtramp_r+0x9c>
  804788:	2945883a 	add	r2,r5,r5
  80478c:	1085883a 	add	r2,r2,r2
  804790:	10c9883a 	add	r4,r2,r3
  804794:	20c00017 	ldw	r3,0(r4)
  804798:	18001626 	beq	r3,zero,8047f4 <__sigtramp_r+0x8c>
  80479c:	00bfffc4 	movi	r2,-1
  8047a0:	18801626 	beq	r3,r2,8047fc <__sigtramp_r+0x94>
  8047a4:	00800044 	movi	r2,1
  8047a8:	18800d26 	beq	r3,r2,8047e0 <__sigtramp_r+0x78>
  8047ac:	20000015 	stw	zero,0(r4)
  8047b0:	2809883a 	mov	r4,r5
  8047b4:	183ee83a 	callr	r3
  8047b8:	0005883a 	mov	r2,zero
  8047bc:	dfc00217 	ldw	ra,8(sp)
  8047c0:	dc000117 	ldw	r16,4(sp)
  8047c4:	dec00304 	addi	sp,sp,12
  8047c8:	f800283a 	ret
  8047cc:	00bfffc4 	movi	r2,-1
  8047d0:	dfc00217 	ldw	ra,8(sp)
  8047d4:	dc000117 	ldw	r16,4(sp)
  8047d8:	dec00304 	addi	sp,sp,12
  8047dc:	f800283a 	ret
  8047e0:	008000c4 	movi	r2,3
  8047e4:	dfc00217 	ldw	ra,8(sp)
  8047e8:	dc000117 	ldw	r16,4(sp)
  8047ec:	dec00304 	addi	sp,sp,12
  8047f0:	f800283a 	ret
  8047f4:	00800044 	movi	r2,1
  8047f8:	003ff006 	br	8047bc <__sigtramp_r+0x54>
  8047fc:	00800084 	movi	r2,2
  804800:	003fee06 	br	8047bc <__sigtramp_r+0x54>
  804804:	d9400015 	stw	r5,0(sp)
  804808:	08046f40 	call	8046f4 <_init_signal_r>
  80480c:	d9400017 	ldw	r5,0(sp)
  804810:	103fee1e 	bne	r2,zero,8047cc <__sigtramp_r+0x64>
  804814:	80c0b717 	ldw	r3,732(r16)
  804818:	003fdb06 	br	804788 <__sigtramp_r+0x20>

0080481c <__sigtramp>:
  80481c:	00802074 	movhi	r2,129
  804820:	108dcb04 	addi	r2,r2,14124
  804824:	200b883a 	mov	r5,r4
  804828:	11000017 	ldw	r4,0(r2)
  80482c:	08047681 	jmpi	804768 <__sigtramp_r>

00804830 <_signal_r>:
  804830:	defffc04 	addi	sp,sp,-16
  804834:	008007c4 	movi	r2,31
  804838:	dc800215 	stw	r18,8(sp)
  80483c:	dc400115 	stw	r17,4(sp)
  804840:	dc000015 	stw	r16,0(sp)
  804844:	dfc00315 	stw	ra,12(sp)
  804848:	2823883a 	mov	r17,r5
  80484c:	00ffffc4 	movi	r3,-1
  804850:	3025883a 	mov	r18,r6
  804854:	2021883a 	mov	r16,r4
  804858:	1140092e 	bgeu	r2,r5,804880 <_signal_r+0x50>
  80485c:	00800584 	movi	r2,22
  804860:	20800015 	stw	r2,0(r4)
  804864:	1805883a 	mov	r2,r3
  804868:	dfc00317 	ldw	ra,12(sp)
  80486c:	dc800217 	ldw	r18,8(sp)
  804870:	dc400117 	ldw	r17,4(sp)
  804874:	dc000017 	ldw	r16,0(sp)
  804878:	dec00404 	addi	sp,sp,16
  80487c:	f800283a 	ret
  804880:	2140b717 	ldw	r5,732(r4)
  804884:	28000c26 	beq	r5,zero,8048b8 <_signal_r+0x88>
  804888:	8c45883a 	add	r2,r17,r17
  80488c:	1085883a 	add	r2,r2,r2
  804890:	1145883a 	add	r2,r2,r5
  804894:	10c00017 	ldw	r3,0(r2)
  804898:	14800015 	stw	r18,0(r2)
  80489c:	1805883a 	mov	r2,r3
  8048a0:	dfc00317 	ldw	ra,12(sp)
  8048a4:	dc800217 	ldw	r18,8(sp)
  8048a8:	dc400117 	ldw	r17,4(sp)
  8048ac:	dc000017 	ldw	r16,0(sp)
  8048b0:	dec00404 	addi	sp,sp,16
  8048b4:	f800283a 	ret
  8048b8:	08046f40 	call	8046f4 <_init_signal_r>
  8048bc:	1000021e 	bne	r2,zero,8048c8 <_signal_r+0x98>
  8048c0:	8140b717 	ldw	r5,732(r16)
  8048c4:	003ff006 	br	804888 <_signal_r+0x58>
  8048c8:	00ffffc4 	movi	r3,-1
  8048cc:	003fe506 	br	804864 <_signal_r+0x34>

008048d0 <signal>:
  8048d0:	01802074 	movhi	r6,129
  8048d4:	318dcb04 	addi	r6,r6,14124
  8048d8:	2007883a 	mov	r3,r4
  8048dc:	31000017 	ldw	r4,0(r6)
  8048e0:	280d883a 	mov	r6,r5
  8048e4:	180b883a 	mov	r5,r3
  8048e8:	08048301 	jmpi	804830 <_signal_r>

008048ec <_getpid_r>:
  8048ec:	080db441 	jmpi	80db44 <getpid>

008048f0 <_kill_r>:
  8048f0:	defffd04 	addi	sp,sp,-12
  8048f4:	dc000015 	stw	r16,0(sp)
  8048f8:	04002074 	movhi	r16,129
  8048fc:	84151704 	addi	r16,r16,21596
  804900:	dc400115 	stw	r17,4(sp)
  804904:	80000015 	stw	zero,0(r16)
  804908:	2023883a 	mov	r17,r4
  80490c:	2809883a 	mov	r4,r5
  804910:	300b883a 	mov	r5,r6
  804914:	dfc00215 	stw	ra,8(sp)
  804918:	080de440 	call	80de44 <kill>
  80491c:	1007883a 	mov	r3,r2
  804920:	00bfffc4 	movi	r2,-1
  804924:	18800626 	beq	r3,r2,804940 <_kill_r+0x50>
  804928:	1805883a 	mov	r2,r3
  80492c:	dfc00217 	ldw	ra,8(sp)
  804930:	dc400117 	ldw	r17,4(sp)
  804934:	dc000017 	ldw	r16,0(sp)
  804938:	dec00304 	addi	sp,sp,12
  80493c:	f800283a 	ret
  804940:	80800017 	ldw	r2,0(r16)
  804944:	103ff826 	beq	r2,zero,804928 <_kill_r+0x38>
  804948:	88800015 	stw	r2,0(r17)
  80494c:	1805883a 	mov	r2,r3
  804950:	dfc00217 	ldw	ra,8(sp)
  804954:	dc400117 	ldw	r17,4(sp)
  804958:	dc000017 	ldw	r16,0(sp)
  80495c:	dec00304 	addi	sp,sp,12
  804960:	f800283a 	ret

00804964 <strlen>:
  804964:	208000cc 	andi	r2,r4,3
  804968:	2011883a 	mov	r8,r4
  80496c:	1000161e 	bne	r2,zero,8049c8 <strlen+0x64>
  804970:	20c00017 	ldw	r3,0(r4)
  804974:	017fbff4 	movhi	r5,65279
  804978:	297fbfc4 	addi	r5,r5,-257
  80497c:	01e02074 	movhi	r7,32897
  804980:	39e02004 	addi	r7,r7,-32640
  804984:	1945883a 	add	r2,r3,r5
  804988:	11c4703a 	and	r2,r2,r7
  80498c:	00c6303a 	nor	r3,zero,r3
  804990:	1886703a 	and	r3,r3,r2
  804994:	18000c1e 	bne	r3,zero,8049c8 <strlen+0x64>
  804998:	280d883a 	mov	r6,r5
  80499c:	380b883a 	mov	r5,r7
  8049a0:	21000104 	addi	r4,r4,4
  8049a4:	20800017 	ldw	r2,0(r4)
  8049a8:	1187883a 	add	r3,r2,r6
  8049ac:	1946703a 	and	r3,r3,r5
  8049b0:	0084303a 	nor	r2,zero,r2
  8049b4:	10c4703a 	and	r2,r2,r3
  8049b8:	103ff926 	beq	r2,zero,8049a0 <strlen+0x3c>
  8049bc:	20800007 	ldb	r2,0(r4)
  8049c0:	10000326 	beq	r2,zero,8049d0 <strlen+0x6c>
  8049c4:	21000044 	addi	r4,r4,1
  8049c8:	20800007 	ldb	r2,0(r4)
  8049cc:	103ffd1e 	bne	r2,zero,8049c4 <strlen+0x60>
  8049d0:	2205c83a 	sub	r2,r4,r8
  8049d4:	f800283a 	ret

008049d8 <_vsnprintf_r>:
  8049d8:	deffe604 	addi	sp,sp,-104
  8049dc:	dc401815 	stw	r17,96(sp)
  8049e0:	dc001715 	stw	r16,92(sp)
  8049e4:	dfc01915 	stw	ra,100(sp)
  8049e8:	3021883a 	mov	r16,r6
  8049ec:	00ffffc4 	movi	r3,-1
  8049f0:	2023883a 	mov	r17,r4
  8049f4:	2811883a 	mov	r8,r5
  8049f8:	30002116 	blt	r6,zero,804a80 <_vsnprintf_r+0xa8>
  8049fc:	0007883a 	mov	r3,zero
  804a00:	30000126 	beq	r6,zero,804a08 <_vsnprintf_r+0x30>
  804a04:	30ffffc4 	addi	r3,r6,-1
  804a08:	00802074 	movhi	r2,129
  804a0c:	108dcb04 	addi	r2,r2,14124
  804a10:	380d883a 	mov	r6,r7
  804a14:	11000017 	ldw	r4,0(r2)
  804a18:	d9c01a17 	ldw	r7,104(sp)
  804a1c:	00808204 	movi	r2,520
  804a20:	d880030d 	sth	r2,12(sp)
  804a24:	d80b883a 	mov	r5,sp
  804a28:	00bfffc4 	movi	r2,-1
  804a2c:	d8c00515 	stw	r3,20(sp)
  804a30:	d8c00215 	stw	r3,8(sp)
  804a34:	da000415 	stw	r8,16(sp)
  804a38:	d880038d 	sth	r2,14(sp)
  804a3c:	da000015 	stw	r8,0(sp)
  804a40:	0804f640 	call	804f64 <___vfprintf_internal_r>
  804a44:	1007883a 	mov	r3,r2
  804a48:	00bfffc4 	movi	r2,-1
  804a4c:	18800916 	blt	r3,r2,804a74 <_vsnprintf_r+0x9c>
  804a50:	80000226 	beq	r16,zero,804a5c <_vsnprintf_r+0x84>
  804a54:	d8800017 	ldw	r2,0(sp)
  804a58:	10000005 	stb	zero,0(r2)
  804a5c:	1805883a 	mov	r2,r3
  804a60:	dfc01917 	ldw	ra,100(sp)
  804a64:	dc401817 	ldw	r17,96(sp)
  804a68:	dc001717 	ldw	r16,92(sp)
  804a6c:	dec01a04 	addi	sp,sp,104
  804a70:	f800283a 	ret
  804a74:	008022c4 	movi	r2,139
  804a78:	88800015 	stw	r2,0(r17)
  804a7c:	003ff406 	br	804a50 <_vsnprintf_r+0x78>
  804a80:	008022c4 	movi	r2,139
  804a84:	20800015 	stw	r2,0(r4)
  804a88:	003ff406 	br	804a5c <_vsnprintf_r+0x84>

00804a8c <vsnprintf>:
  804a8c:	00802074 	movhi	r2,129
  804a90:	108dcb04 	addi	r2,r2,14124
  804a94:	2017883a 	mov	r11,r4
  804a98:	11000017 	ldw	r4,0(r2)
  804a9c:	defffe04 	addi	sp,sp,-8
  804aa0:	3013883a 	mov	r9,r6
  804aa4:	2805883a 	mov	r2,r5
  804aa8:	d9c00015 	stw	r7,0(sp)
  804aac:	580b883a 	mov	r5,r11
  804ab0:	100d883a 	mov	r6,r2
  804ab4:	480f883a 	mov	r7,r9
  804ab8:	dfc00115 	stw	ra,4(sp)
  804abc:	08049d80 	call	8049d8 <_vsnprintf_r>
  804ac0:	dfc00117 	ldw	ra,4(sp)
  804ac4:	dec00204 	addi	sp,sp,8
  804ac8:	f800283a 	ret

00804acc <_malloc_trim_r>:
  804acc:	defffb04 	addi	sp,sp,-20
  804ad0:	dcc00315 	stw	r19,12(sp)
  804ad4:	04c02074 	movhi	r19,129
  804ad8:	9cc6a304 	addi	r19,r19,6796
  804adc:	dc800215 	stw	r18,8(sp)
  804ae0:	dc400115 	stw	r17,4(sp)
  804ae4:	dc000015 	stw	r16,0(sp)
  804ae8:	2823883a 	mov	r17,r5
  804aec:	2025883a 	mov	r18,r4
  804af0:	dfc00415 	stw	ra,16(sp)
  804af4:	080e28c0 	call	80e28c <__malloc_lock>
  804af8:	98800217 	ldw	r2,8(r19)
  804afc:	9009883a 	mov	r4,r18
  804b00:	000b883a 	mov	r5,zero
  804b04:	10c00117 	ldw	r3,4(r2)
  804b08:	00bfff04 	movi	r2,-4
  804b0c:	18a0703a 	and	r16,r3,r2
  804b10:	8463c83a 	sub	r17,r16,r17
  804b14:	8c43fbc4 	addi	r17,r17,4079
  804b18:	8822d33a 	srli	r17,r17,12
  804b1c:	0083ffc4 	movi	r2,4095
  804b20:	8c7fffc4 	addi	r17,r17,-1
  804b24:	8822933a 	slli	r17,r17,12
  804b28:	1440060e 	bge	r2,r17,804b44 <_malloc_trim_r+0x78>
  804b2c:	08045a40 	call	8045a4 <_sbrk_r>
  804b30:	98c00217 	ldw	r3,8(r19)
  804b34:	9009883a 	mov	r4,r18
  804b38:	044bc83a 	sub	r5,zero,r17
  804b3c:	80c7883a 	add	r3,r16,r3
  804b40:	10c00926 	beq	r2,r3,804b68 <_malloc_trim_r+0x9c>
  804b44:	080e2ac0 	call	80e2ac <__malloc_unlock>
  804b48:	0005883a 	mov	r2,zero
  804b4c:	dfc00417 	ldw	ra,16(sp)
  804b50:	dcc00317 	ldw	r19,12(sp)
  804b54:	dc800217 	ldw	r18,8(sp)
  804b58:	dc400117 	ldw	r17,4(sp)
  804b5c:	dc000017 	ldw	r16,0(sp)
  804b60:	dec00504 	addi	sp,sp,20
  804b64:	f800283a 	ret
  804b68:	9009883a 	mov	r4,r18
  804b6c:	08045a40 	call	8045a4 <_sbrk_r>
  804b70:	844dc83a 	sub	r6,r16,r17
  804b74:	00ffffc4 	movi	r3,-1
  804b78:	9009883a 	mov	r4,r18
  804b7c:	000b883a 	mov	r5,zero
  804b80:	01c02074 	movhi	r7,129
  804b84:	39d72104 	addi	r7,r7,23684
  804b88:	31800054 	ori	r6,r6,1
  804b8c:	10c00926 	beq	r2,r3,804bb4 <_malloc_trim_r+0xe8>
  804b90:	38800017 	ldw	r2,0(r7)
  804b94:	98c00217 	ldw	r3,8(r19)
  804b98:	9009883a 	mov	r4,r18
  804b9c:	1445c83a 	sub	r2,r2,r17
  804ba0:	38800015 	stw	r2,0(r7)
  804ba4:	19800115 	stw	r6,4(r3)
  804ba8:	080e2ac0 	call	80e2ac <__malloc_unlock>
  804bac:	00800044 	movi	r2,1
  804bb0:	003fe606 	br	804b4c <_malloc_trim_r+0x80>
  804bb4:	08045a40 	call	8045a4 <_sbrk_r>
  804bb8:	99800217 	ldw	r6,8(r19)
  804bbc:	100f883a 	mov	r7,r2
  804bc0:	9009883a 	mov	r4,r18
  804bc4:	1187c83a 	sub	r3,r2,r6
  804bc8:	008003c4 	movi	r2,15
  804bcc:	19400054 	ori	r5,r3,1
  804bd0:	10ffdc0e 	bge	r2,r3,804b44 <_malloc_trim_r+0x78>
  804bd4:	00802074 	movhi	r2,129
  804bd8:	108dca04 	addi	r2,r2,14120
  804bdc:	10c00017 	ldw	r3,0(r2)
  804be0:	00802074 	movhi	r2,129
  804be4:	10972104 	addi	r2,r2,23684
  804be8:	31400115 	stw	r5,4(r6)
  804bec:	38c7c83a 	sub	r3,r7,r3
  804bf0:	10c00015 	stw	r3,0(r2)
  804bf4:	003fd306 	br	804b44 <_malloc_trim_r+0x78>

00804bf8 <_free_r>:
  804bf8:	defffd04 	addi	sp,sp,-12
  804bfc:	dc400115 	stw	r17,4(sp)
  804c00:	dc000015 	stw	r16,0(sp)
  804c04:	dfc00215 	stw	ra,8(sp)
  804c08:	2821883a 	mov	r16,r5
  804c0c:	2023883a 	mov	r17,r4
  804c10:	28005a26 	beq	r5,zero,804d7c <_free_r+0x184>
  804c14:	080e28c0 	call	80e28c <__malloc_lock>
  804c18:	823ffe04 	addi	r8,r16,-8
  804c1c:	41400117 	ldw	r5,4(r8)
  804c20:	00bfff84 	movi	r2,-2
  804c24:	02802074 	movhi	r10,129
  804c28:	5286a304 	addi	r10,r10,6796
  804c2c:	288e703a 	and	r7,r5,r2
  804c30:	41cd883a 	add	r6,r8,r7
  804c34:	30c00117 	ldw	r3,4(r6)
  804c38:	51000217 	ldw	r4,8(r10)
  804c3c:	00bfff04 	movi	r2,-4
  804c40:	1892703a 	and	r9,r3,r2
  804c44:	5017883a 	mov	r11,r10
  804c48:	31006726 	beq	r6,r4,804de8 <_free_r+0x1f0>
  804c4c:	2880004c 	andi	r2,r5,1
  804c50:	1005003a 	cmpeq	r2,r2,zero
  804c54:	32400115 	stw	r9,4(r6)
  804c58:	10001a1e 	bne	r2,zero,804cc4 <_free_r+0xcc>
  804c5c:	000b883a 	mov	r5,zero
  804c60:	3247883a 	add	r3,r6,r9
  804c64:	18800117 	ldw	r2,4(r3)
  804c68:	1080004c 	andi	r2,r2,1
  804c6c:	1000231e 	bne	r2,zero,804cfc <_free_r+0x104>
  804c70:	280ac03a 	cmpne	r5,r5,zero
  804c74:	3a4f883a 	add	r7,r7,r9
  804c78:	2800451e 	bne	r5,zero,804d90 <_free_r+0x198>
  804c7c:	31000217 	ldw	r4,8(r6)
  804c80:	00802074 	movhi	r2,129
  804c84:	1086a504 	addi	r2,r2,6804
  804c88:	20807b26 	beq	r4,r2,804e78 <_free_r+0x280>
  804c8c:	30800317 	ldw	r2,12(r6)
  804c90:	3a07883a 	add	r3,r7,r8
  804c94:	19c00015 	stw	r7,0(r3)
  804c98:	11000215 	stw	r4,8(r2)
  804c9c:	20800315 	stw	r2,12(r4)
  804ca0:	38800054 	ori	r2,r7,1
  804ca4:	40800115 	stw	r2,4(r8)
  804ca8:	28001a26 	beq	r5,zero,804d14 <_free_r+0x11c>
  804cac:	8809883a 	mov	r4,r17
  804cb0:	dfc00217 	ldw	ra,8(sp)
  804cb4:	dc400117 	ldw	r17,4(sp)
  804cb8:	dc000017 	ldw	r16,0(sp)
  804cbc:	dec00304 	addi	sp,sp,12
  804cc0:	080e2ac1 	jmpi	80e2ac <__malloc_unlock>
  804cc4:	80bffe17 	ldw	r2,-8(r16)
  804cc8:	50c00204 	addi	r3,r10,8
  804ccc:	4091c83a 	sub	r8,r8,r2
  804cd0:	41000217 	ldw	r4,8(r8)
  804cd4:	388f883a 	add	r7,r7,r2
  804cd8:	20c06126 	beq	r4,r3,804e60 <_free_r+0x268>
  804cdc:	40800317 	ldw	r2,12(r8)
  804ce0:	3247883a 	add	r3,r6,r9
  804ce4:	000b883a 	mov	r5,zero
  804ce8:	11000215 	stw	r4,8(r2)
  804cec:	20800315 	stw	r2,12(r4)
  804cf0:	18800117 	ldw	r2,4(r3)
  804cf4:	1080004c 	andi	r2,r2,1
  804cf8:	103fdd26 	beq	r2,zero,804c70 <_free_r+0x78>
  804cfc:	38800054 	ori	r2,r7,1
  804d00:	3a07883a 	add	r3,r7,r8
  804d04:	280ac03a 	cmpne	r5,r5,zero
  804d08:	40800115 	stw	r2,4(r8)
  804d0c:	19c00015 	stw	r7,0(r3)
  804d10:	283fe61e 	bne	r5,zero,804cac <_free_r+0xb4>
  804d14:	00807fc4 	movi	r2,511
  804d18:	11c01f2e 	bgeu	r2,r7,804d98 <_free_r+0x1a0>
  804d1c:	3806d27a 	srli	r3,r7,9
  804d20:	1800481e 	bne	r3,zero,804e44 <_free_r+0x24c>
  804d24:	3804d0fa 	srli	r2,r7,3
  804d28:	100690fa 	slli	r3,r2,3
  804d2c:	1acd883a 	add	r6,r3,r11
  804d30:	31400217 	ldw	r5,8(r6)
  804d34:	31405926 	beq	r6,r5,804e9c <_free_r+0x2a4>
  804d38:	28800117 	ldw	r2,4(r5)
  804d3c:	00ffff04 	movi	r3,-4
  804d40:	10c4703a 	and	r2,r2,r3
  804d44:	3880022e 	bgeu	r7,r2,804d50 <_free_r+0x158>
  804d48:	29400217 	ldw	r5,8(r5)
  804d4c:	317ffa1e 	bne	r6,r5,804d38 <_free_r+0x140>
  804d50:	29800317 	ldw	r6,12(r5)
  804d54:	41800315 	stw	r6,12(r8)
  804d58:	41400215 	stw	r5,8(r8)
  804d5c:	8809883a 	mov	r4,r17
  804d60:	2a000315 	stw	r8,12(r5)
  804d64:	32000215 	stw	r8,8(r6)
  804d68:	dfc00217 	ldw	ra,8(sp)
  804d6c:	dc400117 	ldw	r17,4(sp)
  804d70:	dc000017 	ldw	r16,0(sp)
  804d74:	dec00304 	addi	sp,sp,12
  804d78:	080e2ac1 	jmpi	80e2ac <__malloc_unlock>
  804d7c:	dfc00217 	ldw	ra,8(sp)
  804d80:	dc400117 	ldw	r17,4(sp)
  804d84:	dc000017 	ldw	r16,0(sp)
  804d88:	dec00304 	addi	sp,sp,12
  804d8c:	f800283a 	ret
  804d90:	31000217 	ldw	r4,8(r6)
  804d94:	003fbd06 	br	804c8c <_free_r+0x94>
  804d98:	3806d0fa 	srli	r3,r7,3
  804d9c:	00800044 	movi	r2,1
  804da0:	51400117 	ldw	r5,4(r10)
  804da4:	180890fa 	slli	r4,r3,3
  804da8:	1807d0ba 	srai	r3,r3,2
  804dac:	22c9883a 	add	r4,r4,r11
  804db0:	21800217 	ldw	r6,8(r4)
  804db4:	10c4983a 	sll	r2,r2,r3
  804db8:	41000315 	stw	r4,12(r8)
  804dbc:	41800215 	stw	r6,8(r8)
  804dc0:	288ab03a 	or	r5,r5,r2
  804dc4:	22000215 	stw	r8,8(r4)
  804dc8:	8809883a 	mov	r4,r17
  804dcc:	51400115 	stw	r5,4(r10)
  804dd0:	32000315 	stw	r8,12(r6)
  804dd4:	dfc00217 	ldw	ra,8(sp)
  804dd8:	dc400117 	ldw	r17,4(sp)
  804ddc:	dc000017 	ldw	r16,0(sp)
  804de0:	dec00304 	addi	sp,sp,12
  804de4:	080e2ac1 	jmpi	80e2ac <__malloc_unlock>
  804de8:	2880004c 	andi	r2,r5,1
  804dec:	3a4d883a 	add	r6,r7,r9
  804df0:	1000071e 	bne	r2,zero,804e10 <_free_r+0x218>
  804df4:	80bffe17 	ldw	r2,-8(r16)
  804df8:	4091c83a 	sub	r8,r8,r2
  804dfc:	41000317 	ldw	r4,12(r8)
  804e00:	40c00217 	ldw	r3,8(r8)
  804e04:	308d883a 	add	r6,r6,r2
  804e08:	20c00215 	stw	r3,8(r4)
  804e0c:	19000315 	stw	r4,12(r3)
  804e10:	00802074 	movhi	r2,129
  804e14:	108dc904 	addi	r2,r2,14116
  804e18:	11000017 	ldw	r4,0(r2)
  804e1c:	30c00054 	ori	r3,r6,1
  804e20:	52000215 	stw	r8,8(r10)
  804e24:	40c00115 	stw	r3,4(r8)
  804e28:	313fa036 	bltu	r6,r4,804cac <_free_r+0xb4>
  804e2c:	00802074 	movhi	r2,129
  804e30:	10951404 	addi	r2,r2,21584
  804e34:	11400017 	ldw	r5,0(r2)
  804e38:	8809883a 	mov	r4,r17
  804e3c:	0804acc0 	call	804acc <_malloc_trim_r>
  804e40:	003f9a06 	br	804cac <_free_r+0xb4>
  804e44:	00800104 	movi	r2,4
  804e48:	10c0072e 	bgeu	r2,r3,804e68 <_free_r+0x270>
  804e4c:	00800504 	movi	r2,20
  804e50:	10c01936 	bltu	r2,r3,804eb8 <_free_r+0x2c0>
  804e54:	188016c4 	addi	r2,r3,91
  804e58:	100690fa 	slli	r3,r2,3
  804e5c:	003fb306 	br	804d2c <_free_r+0x134>
  804e60:	01400044 	movi	r5,1
  804e64:	003f7e06 	br	804c60 <_free_r+0x68>
  804e68:	3804d1ba 	srli	r2,r7,6
  804e6c:	10800e04 	addi	r2,r2,56
  804e70:	100690fa 	slli	r3,r2,3
  804e74:	003fad06 	br	804d2c <_free_r+0x134>
  804e78:	22000315 	stw	r8,12(r4)
  804e7c:	22000215 	stw	r8,8(r4)
  804e80:	3a05883a 	add	r2,r7,r8
  804e84:	38c00054 	ori	r3,r7,1
  804e88:	11c00015 	stw	r7,0(r2)
  804e8c:	41000215 	stw	r4,8(r8)
  804e90:	40c00115 	stw	r3,4(r8)
  804e94:	41000315 	stw	r4,12(r8)
  804e98:	003f8406 	br	804cac <_free_r+0xb4>
  804e9c:	1005d0ba 	srai	r2,r2,2
  804ea0:	00c00044 	movi	r3,1
  804ea4:	51000117 	ldw	r4,4(r10)
  804ea8:	1886983a 	sll	r3,r3,r2
  804eac:	20c8b03a 	or	r4,r4,r3
  804eb0:	51000115 	stw	r4,4(r10)
  804eb4:	003fa706 	br	804d54 <_free_r+0x15c>
  804eb8:	00801504 	movi	r2,84
  804ebc:	10c00436 	bltu	r2,r3,804ed0 <_free_r+0x2d8>
  804ec0:	3804d33a 	srli	r2,r7,12
  804ec4:	10801b84 	addi	r2,r2,110
  804ec8:	100690fa 	slli	r3,r2,3
  804ecc:	003f9706 	br	804d2c <_free_r+0x134>
  804ed0:	00805504 	movi	r2,340
  804ed4:	10c00436 	bltu	r2,r3,804ee8 <_free_r+0x2f0>
  804ed8:	3804d3fa 	srli	r2,r7,15
  804edc:	10801dc4 	addi	r2,r2,119
  804ee0:	100690fa 	slli	r3,r2,3
  804ee4:	003f9106 	br	804d2c <_free_r+0x134>
  804ee8:	00815504 	movi	r2,1364
  804eec:	10c0032e 	bgeu	r2,r3,804efc <_free_r+0x304>
  804ef0:	00801f84 	movi	r2,126
  804ef4:	00c0fc04 	movi	r3,1008
  804ef8:	003f8c06 	br	804d2c <_free_r+0x134>
  804efc:	3804d4ba 	srli	r2,r7,18
  804f00:	10801f04 	addi	r2,r2,124
  804f04:	100690fa 	slli	r3,r2,3
  804f08:	003f8806 	br	804d2c <_free_r+0x134>

00804f0c <__sprint_r>:
  804f0c:	30800217 	ldw	r2,8(r6)
  804f10:	defffe04 	addi	sp,sp,-8
  804f14:	dc000015 	stw	r16,0(sp)
  804f18:	dfc00115 	stw	ra,4(sp)
  804f1c:	3021883a 	mov	r16,r6
  804f20:	0007883a 	mov	r3,zero
  804f24:	1000061e 	bne	r2,zero,804f40 <__sprint_r+0x34>
  804f28:	1805883a 	mov	r2,r3
  804f2c:	30000115 	stw	zero,4(r6)
  804f30:	dfc00117 	ldw	ra,4(sp)
  804f34:	dc000017 	ldw	r16,0(sp)
  804f38:	dec00204 	addi	sp,sp,8
  804f3c:	f800283a 	ret
  804f40:	0808c2c0 	call	808c2c <__sfvwrite_r>
  804f44:	1007883a 	mov	r3,r2
  804f48:	1805883a 	mov	r2,r3
  804f4c:	80000115 	stw	zero,4(r16)
  804f50:	80000215 	stw	zero,8(r16)
  804f54:	dfc00117 	ldw	ra,4(sp)
  804f58:	dc000017 	ldw	r16,0(sp)
  804f5c:	dec00204 	addi	sp,sp,8
  804f60:	f800283a 	ret

00804f64 <___vfprintf_internal_r>:
  804f64:	defea404 	addi	sp,sp,-1392
  804f68:	dd815815 	stw	r22,1376(sp)
  804f6c:	dc015215 	stw	r16,1352(sp)
  804f70:	d9c15115 	stw	r7,1348(sp)
  804f74:	dfc15b15 	stw	ra,1388(sp)
  804f78:	df015a15 	stw	fp,1384(sp)
  804f7c:	ddc15915 	stw	r23,1380(sp)
  804f80:	dd415715 	stw	r21,1372(sp)
  804f84:	dd015615 	stw	r20,1368(sp)
  804f88:	dcc15515 	stw	r19,1364(sp)
  804f8c:	dc815415 	stw	r18,1360(sp)
  804f90:	dc415315 	stw	r17,1356(sp)
  804f94:	282d883a 	mov	r22,r5
  804f98:	3021883a 	mov	r16,r6
  804f9c:	d9014f15 	stw	r4,1340(sp)
  804fa0:	08092500 	call	809250 <_localeconv_r>
  804fa4:	10800017 	ldw	r2,0(r2)
  804fa8:	d9c15117 	ldw	r7,1348(sp)
  804fac:	d8814915 	stw	r2,1316(sp)
  804fb0:	d8814f17 	ldw	r2,1340(sp)
  804fb4:	10000226 	beq	r2,zero,804fc0 <___vfprintf_internal_r+0x5c>
  804fb8:	10800e17 	ldw	r2,56(r2)
  804fbc:	10020d26 	beq	r2,zero,8057f4 <___vfprintf_internal_r+0x890>
  804fc0:	b080030b 	ldhu	r2,12(r22)
  804fc4:	1080020c 	andi	r2,r2,8
  804fc8:	10020e26 	beq	r2,zero,805804 <___vfprintf_internal_r+0x8a0>
  804fcc:	b0800417 	ldw	r2,16(r22)
  804fd0:	10020c26 	beq	r2,zero,805804 <___vfprintf_internal_r+0x8a0>
  804fd4:	b200030b 	ldhu	r8,12(r22)
  804fd8:	00800284 	movi	r2,10
  804fdc:	40c0068c 	andi	r3,r8,26
  804fe0:	18802f1e 	bne	r3,r2,8050a0 <___vfprintf_internal_r+0x13c>
  804fe4:	b080038f 	ldh	r2,14(r22)
  804fe8:	10002d16 	blt	r2,zero,8050a0 <___vfprintf_internal_r+0x13c>
  804fec:	b240038b 	ldhu	r9,14(r22)
  804ff0:	b2800717 	ldw	r10,28(r22)
  804ff4:	b2c00917 	ldw	r11,36(r22)
  804ff8:	d9014f17 	ldw	r4,1340(sp)
  804ffc:	dc402904 	addi	r17,sp,164
  805000:	d8804004 	addi	r2,sp,256
  805004:	00c10004 	movi	r3,1024
  805008:	423fff4c 	andi	r8,r8,65533
  80500c:	800d883a 	mov	r6,r16
  805010:	880b883a 	mov	r5,r17
  805014:	da002c0d 	sth	r8,176(sp)
  805018:	da402c8d 	sth	r9,178(sp)
  80501c:	da803015 	stw	r10,192(sp)
  805020:	dac03215 	stw	r11,200(sp)
  805024:	d8802d15 	stw	r2,180(sp)
  805028:	d8c02e15 	stw	r3,184(sp)
  80502c:	d8802915 	stw	r2,164(sp)
  805030:	d8c02b15 	stw	r3,172(sp)
  805034:	d8002f15 	stw	zero,188(sp)
  805038:	0804f640 	call	804f64 <___vfprintf_internal_r>
  80503c:	d8814b15 	stw	r2,1324(sp)
  805040:	10000416 	blt	r2,zero,805054 <___vfprintf_internal_r+0xf0>
  805044:	d9014f17 	ldw	r4,1340(sp)
  805048:	880b883a 	mov	r5,r17
  80504c:	080873c0 	call	80873c <_fflush_r>
  805050:	1002321e 	bne	r2,zero,80591c <___vfprintf_internal_r+0x9b8>
  805054:	d8802c0b 	ldhu	r2,176(sp)
  805058:	1080100c 	andi	r2,r2,64
  80505c:	10000326 	beq	r2,zero,80506c <___vfprintf_internal_r+0x108>
  805060:	b080030b 	ldhu	r2,12(r22)
  805064:	10801014 	ori	r2,r2,64
  805068:	b080030d 	sth	r2,12(r22)
  80506c:	d8814b17 	ldw	r2,1324(sp)
  805070:	dfc15b17 	ldw	ra,1388(sp)
  805074:	df015a17 	ldw	fp,1384(sp)
  805078:	ddc15917 	ldw	r23,1380(sp)
  80507c:	dd815817 	ldw	r22,1376(sp)
  805080:	dd415717 	ldw	r21,1372(sp)
  805084:	dd015617 	ldw	r20,1368(sp)
  805088:	dcc15517 	ldw	r19,1364(sp)
  80508c:	dc815417 	ldw	r18,1360(sp)
  805090:	dc415317 	ldw	r17,1356(sp)
  805094:	dc015217 	ldw	r16,1352(sp)
  805098:	dec15c04 	addi	sp,sp,1392
  80509c:	f800283a 	ret
  8050a0:	0005883a 	mov	r2,zero
  8050a4:	0007883a 	mov	r3,zero
  8050a8:	dd401904 	addi	r21,sp,100
  8050ac:	d8814215 	stw	r2,1288(sp)
  8050b0:	802f883a 	mov	r23,r16
  8050b4:	d8c14315 	stw	r3,1292(sp)
  8050b8:	d8014b15 	stw	zero,1324(sp)
  8050bc:	d8014815 	stw	zero,1312(sp)
  8050c0:	d8014415 	stw	zero,1296(sp)
  8050c4:	d8014715 	stw	zero,1308(sp)
  8050c8:	dd400c15 	stw	r21,48(sp)
  8050cc:	d8000e15 	stw	zero,56(sp)
  8050d0:	d8000d15 	stw	zero,52(sp)
  8050d4:	b8800007 	ldb	r2,0(r23)
  8050d8:	10001926 	beq	r2,zero,805140 <___vfprintf_internal_r+0x1dc>
  8050dc:	00c00944 	movi	r3,37
  8050e0:	10c01726 	beq	r2,r3,805140 <___vfprintf_internal_r+0x1dc>
  8050e4:	b821883a 	mov	r16,r23
  8050e8:	00000106 	br	8050f0 <___vfprintf_internal_r+0x18c>
  8050ec:	10c00326 	beq	r2,r3,8050fc <___vfprintf_internal_r+0x198>
  8050f0:	84000044 	addi	r16,r16,1
  8050f4:	80800007 	ldb	r2,0(r16)
  8050f8:	103ffc1e 	bne	r2,zero,8050ec <___vfprintf_internal_r+0x188>
  8050fc:	85e7c83a 	sub	r19,r16,r23
  805100:	98000e26 	beq	r19,zero,80513c <___vfprintf_internal_r+0x1d8>
  805104:	dc800e17 	ldw	r18,56(sp)
  805108:	dc400d17 	ldw	r17,52(sp)
  80510c:	008001c4 	movi	r2,7
  805110:	94e5883a 	add	r18,r18,r19
  805114:	8c400044 	addi	r17,r17,1
  805118:	adc00015 	stw	r23,0(r21)
  80511c:	dc800e15 	stw	r18,56(sp)
  805120:	acc00115 	stw	r19,4(r21)
  805124:	dc400d15 	stw	r17,52(sp)
  805128:	14428b16 	blt	r2,r17,805b58 <___vfprintf_internal_r+0xbf4>
  80512c:	ad400204 	addi	r21,r21,8
  805130:	d9014b17 	ldw	r4,1324(sp)
  805134:	24c9883a 	add	r4,r4,r19
  805138:	d9014b15 	stw	r4,1324(sp)
  80513c:	802f883a 	mov	r23,r16
  805140:	b8800007 	ldb	r2,0(r23)
  805144:	10013c26 	beq	r2,zero,805638 <___vfprintf_internal_r+0x6d4>
  805148:	bdc00044 	addi	r23,r23,1
  80514c:	d8000405 	stb	zero,16(sp)
  805150:	b8c00007 	ldb	r3,0(r23)
  805154:	04ffffc4 	movi	r19,-1
  805158:	d8014c15 	stw	zero,1328(sp)
  80515c:	d8014a15 	stw	zero,1320(sp)
  805160:	d8c14d15 	stw	r3,1332(sp)
  805164:	bdc00044 	addi	r23,r23,1
  805168:	d9414d17 	ldw	r5,1332(sp)
  80516c:	00801604 	movi	r2,88
  805170:	28fff804 	addi	r3,r5,-32
  805174:	10c06036 	bltu	r2,r3,8052f8 <___vfprintf_internal_r+0x394>
  805178:	18c5883a 	add	r2,r3,r3
  80517c:	1085883a 	add	r2,r2,r2
  805180:	00c02034 	movhi	r3,128
  805184:	18d46504 	addi	r3,r3,20884
  805188:	10c5883a 	add	r2,r2,r3
  80518c:	11000017 	ldw	r4,0(r2)
  805190:	2000683a 	jmp	r4
  805194:	00806108 	cmpgei	r2,zero,388
  805198:	008052f8 	rdprs	r2,zero,331
  80519c:	008052f8 	rdprs	r2,zero,331
  8051a0:	008060f4 	movhi	r2,387
  8051a4:	008052f8 	rdprs	r2,zero,331
  8051a8:	008052f8 	rdprs	r2,zero,331
  8051ac:	008052f8 	rdprs	r2,zero,331
  8051b0:	008052f8 	rdprs	r2,zero,331
  8051b4:	008052f8 	rdprs	r2,zero,331
  8051b8:	008052f8 	rdprs	r2,zero,331
  8051bc:	00805ed4 	movui	r2,379
  8051c0:	008060e4 	muli	r2,zero,387
  8051c4:	008052f8 	rdprs	r2,zero,331
  8051c8:	00805eec 	andhi	r2,zero,379
  8051cc:	00806180 	call	80618 <__alt_mem_sdram_controller-0x77f9e8>
  8051d0:	008052f8 	rdprs	r2,zero,331
  8051d4:	0080616c 	andhi	r2,zero,389
  8051d8:	00806134 	movhi	r2,388
  8051dc:	00806134 	movhi	r2,388
  8051e0:	00806134 	movhi	r2,388
  8051e4:	00806134 	movhi	r2,388
  8051e8:	00806134 	movhi	r2,388
  8051ec:	00806134 	movhi	r2,388
  8051f0:	00806134 	movhi	r2,388
  8051f4:	00806134 	movhi	r2,388
  8051f8:	00806134 	movhi	r2,388
  8051fc:	008052f8 	rdprs	r2,zero,331
  805200:	008052f8 	rdprs	r2,zero,331
  805204:	008052f8 	rdprs	r2,zero,331
  805208:	008052f8 	rdprs	r2,zero,331
  80520c:	008052f8 	rdprs	r2,zero,331
  805210:	008052f8 	rdprs	r2,zero,331
  805214:	008052f8 	rdprs	r2,zero,331
  805218:	008052f8 	rdprs	r2,zero,331
  80521c:	008052f8 	rdprs	r2,zero,331
  805220:	008052f8 	rdprs	r2,zero,331
  805224:	00805950 	cmplti	r2,zero,357
  805228:	00805fbc 	xorhi	r2,zero,382
  80522c:	008052f8 	rdprs	r2,zero,331
  805230:	00805fbc 	xorhi	r2,zero,382
  805234:	008052f8 	rdprs	r2,zero,331
  805238:	008052f8 	rdprs	r2,zero,331
  80523c:	008052f8 	rdprs	r2,zero,331
  805240:	008052f8 	rdprs	r2,zero,331
  805244:	00806120 	cmpeqi	r2,zero,388
  805248:	008052f8 	rdprs	r2,zero,331
  80524c:	008052f8 	rdprs	r2,zero,331
  805250:	00805a04 	movi	r2,360
  805254:	008052f8 	rdprs	r2,zero,331
  805258:	008052f8 	rdprs	r2,zero,331
  80525c:	008052f8 	rdprs	r2,zero,331
  805260:	008052f8 	rdprs	r2,zero,331
  805264:	008052f8 	rdprs	r2,zero,331
  805268:	00805a50 	cmplti	r2,zero,361
  80526c:	008052f8 	rdprs	r2,zero,331
  805270:	008052f8 	rdprs	r2,zero,331
  805274:	00806070 	cmpltui	r2,zero,385
  805278:	008052f8 	rdprs	r2,zero,331
  80527c:	008052f8 	rdprs	r2,zero,331
  805280:	008052f8 	rdprs	r2,zero,331
  805284:	008052f8 	rdprs	r2,zero,331
  805288:	008052f8 	rdprs	r2,zero,331
  80528c:	008052f8 	rdprs	r2,zero,331
  805290:	008052f8 	rdprs	r2,zero,331
  805294:	008052f8 	rdprs	r2,zero,331
  805298:	008052f8 	rdprs	r2,zero,331
  80529c:	008052f8 	rdprs	r2,zero,331
  8052a0:	00806044 	movi	r2,385
  8052a4:	0080595c 	xori	r2,zero,357
  8052a8:	00805fbc 	xorhi	r2,zero,382
  8052ac:	00805fbc 	xorhi	r2,zero,382
  8052b0:	00805fbc 	xorhi	r2,zero,382
  8052b4:	00805fa8 	cmpgeui	r2,zero,382
  8052b8:	0080595c 	xori	r2,zero,357
  8052bc:	008052f8 	rdprs	r2,zero,331
  8052c0:	008052f8 	rdprs	r2,zero,331
  8052c4:	00805f30 	cmpltui	r2,zero,380
  8052c8:	008052f8 	rdprs	r2,zero,331
  8052cc:	00805f00 	call	805f0 <__alt_mem_sdram_controller-0x77fa10>
  8052d0:	00805a10 	cmplti	r2,zero,360
  8052d4:	00805f60 	cmpeqi	r2,zero,381
  8052d8:	00805f4c 	andi	r2,zero,381
  8052dc:	008052f8 	rdprs	r2,zero,331
  8052e0:	008061dc 	xori	r2,zero,391
  8052e4:	008052f8 	rdprs	r2,zero,331
  8052e8:	00805a5c 	xori	r2,zero,361
  8052ec:	008052f8 	rdprs	r2,zero,331
  8052f0:	008052f8 	rdprs	r2,zero,331
  8052f4:	008060d4 	movui	r2,387
  8052f8:	d9014d17 	ldw	r4,1332(sp)
  8052fc:	2000ce26 	beq	r4,zero,805638 <___vfprintf_internal_r+0x6d4>
  805300:	01400044 	movi	r5,1
  805304:	d9800f04 	addi	r6,sp,60
  805308:	d9c14015 	stw	r7,1280(sp)
  80530c:	d9414515 	stw	r5,1300(sp)
  805310:	d9814115 	stw	r6,1284(sp)
  805314:	280f883a 	mov	r7,r5
  805318:	d9000f05 	stb	r4,60(sp)
  80531c:	d8000405 	stb	zero,16(sp)
  805320:	d8014615 	stw	zero,1304(sp)
  805324:	d8c14c17 	ldw	r3,1328(sp)
  805328:	1880008c 	andi	r2,r3,2
  80532c:	1005003a 	cmpeq	r2,r2,zero
  805330:	d8815015 	stw	r2,1344(sp)
  805334:	1000031e 	bne	r2,zero,805344 <___vfprintf_internal_r+0x3e0>
  805338:	d9014517 	ldw	r4,1300(sp)
  80533c:	21000084 	addi	r4,r4,2
  805340:	d9014515 	stw	r4,1300(sp)
  805344:	d9414c17 	ldw	r5,1328(sp)
  805348:	2940210c 	andi	r5,r5,132
  80534c:	d9414e15 	stw	r5,1336(sp)
  805350:	28002d1e 	bne	r5,zero,805408 <___vfprintf_internal_r+0x4a4>
  805354:	d9814a17 	ldw	r6,1320(sp)
  805358:	d8814517 	ldw	r2,1300(sp)
  80535c:	30a1c83a 	sub	r16,r6,r2
  805360:	0400290e 	bge	zero,r16,805408 <___vfprintf_internal_r+0x4a4>
  805364:	00800404 	movi	r2,16
  805368:	1404580e 	bge	r2,r16,8064cc <___vfprintf_internal_r+0x1568>
  80536c:	dc800e17 	ldw	r18,56(sp)
  805370:	dc400d17 	ldw	r17,52(sp)
  805374:	1027883a 	mov	r19,r2
  805378:	07002074 	movhi	fp,129
  80537c:	e705ee84 	addi	fp,fp,6074
  805380:	050001c4 	movi	r20,7
  805384:	00000306 	br	805394 <___vfprintf_internal_r+0x430>
  805388:	843ffc04 	addi	r16,r16,-16
  80538c:	ad400204 	addi	r21,r21,8
  805390:	9c00130e 	bge	r19,r16,8053e0 <___vfprintf_internal_r+0x47c>
  805394:	94800404 	addi	r18,r18,16
  805398:	8c400044 	addi	r17,r17,1
  80539c:	af000015 	stw	fp,0(r21)
  8053a0:	acc00115 	stw	r19,4(r21)
  8053a4:	dc800e15 	stw	r18,56(sp)
  8053a8:	dc400d15 	stw	r17,52(sp)
  8053ac:	a47ff60e 	bge	r20,r17,805388 <___vfprintf_internal_r+0x424>
  8053b0:	d9014f17 	ldw	r4,1340(sp)
  8053b4:	b00b883a 	mov	r5,r22
  8053b8:	d9800c04 	addi	r6,sp,48
  8053bc:	d9c15115 	stw	r7,1348(sp)
  8053c0:	0804f0c0 	call	804f0c <__sprint_r>
  8053c4:	d9c15117 	ldw	r7,1348(sp)
  8053c8:	10009e1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8053cc:	843ffc04 	addi	r16,r16,-16
  8053d0:	dc800e17 	ldw	r18,56(sp)
  8053d4:	dc400d17 	ldw	r17,52(sp)
  8053d8:	dd401904 	addi	r21,sp,100
  8053dc:	9c3fed16 	blt	r19,r16,805394 <___vfprintf_internal_r+0x430>
  8053e0:	9425883a 	add	r18,r18,r16
  8053e4:	8c400044 	addi	r17,r17,1
  8053e8:	008001c4 	movi	r2,7
  8053ec:	af000015 	stw	fp,0(r21)
  8053f0:	ac000115 	stw	r16,4(r21)
  8053f4:	dc800e15 	stw	r18,56(sp)
  8053f8:	dc400d15 	stw	r17,52(sp)
  8053fc:	1441f516 	blt	r2,r17,805bd4 <___vfprintf_internal_r+0xc70>
  805400:	ad400204 	addi	r21,r21,8
  805404:	00000206 	br	805410 <___vfprintf_internal_r+0x4ac>
  805408:	dc800e17 	ldw	r18,56(sp)
  80540c:	dc400d17 	ldw	r17,52(sp)
  805410:	d8800407 	ldb	r2,16(sp)
  805414:	10000b26 	beq	r2,zero,805444 <___vfprintf_internal_r+0x4e0>
  805418:	00800044 	movi	r2,1
  80541c:	94800044 	addi	r18,r18,1
  805420:	8c400044 	addi	r17,r17,1
  805424:	a8800115 	stw	r2,4(r21)
  805428:	d8c00404 	addi	r3,sp,16
  80542c:	008001c4 	movi	r2,7
  805430:	a8c00015 	stw	r3,0(r21)
  805434:	dc800e15 	stw	r18,56(sp)
  805438:	dc400d15 	stw	r17,52(sp)
  80543c:	1441da16 	blt	r2,r17,805ba8 <___vfprintf_internal_r+0xc44>
  805440:	ad400204 	addi	r21,r21,8
  805444:	d9015017 	ldw	r4,1344(sp)
  805448:	20000b1e 	bne	r4,zero,805478 <___vfprintf_internal_r+0x514>
  80544c:	d8800444 	addi	r2,sp,17
  805450:	94800084 	addi	r18,r18,2
  805454:	8c400044 	addi	r17,r17,1
  805458:	a8800015 	stw	r2,0(r21)
  80545c:	00c00084 	movi	r3,2
  805460:	008001c4 	movi	r2,7
  805464:	a8c00115 	stw	r3,4(r21)
  805468:	dc800e15 	stw	r18,56(sp)
  80546c:	dc400d15 	stw	r17,52(sp)
  805470:	1441c216 	blt	r2,r17,805b7c <___vfprintf_internal_r+0xc18>
  805474:	ad400204 	addi	r21,r21,8
  805478:	d9414e17 	ldw	r5,1336(sp)
  80547c:	00802004 	movi	r2,128
  805480:	2880b126 	beq	r5,r2,805748 <___vfprintf_internal_r+0x7e4>
  805484:	d8c14617 	ldw	r3,1304(sp)
  805488:	19e1c83a 	sub	r16,r3,r7
  80548c:	0400260e 	bge	zero,r16,805528 <___vfprintf_internal_r+0x5c4>
  805490:	00800404 	movi	r2,16
  805494:	1403c90e 	bge	r2,r16,8063bc <___vfprintf_internal_r+0x1458>
  805498:	1027883a 	mov	r19,r2
  80549c:	07002074 	movhi	fp,129
  8054a0:	e705ea84 	addi	fp,fp,6058
  8054a4:	050001c4 	movi	r20,7
  8054a8:	00000306 	br	8054b8 <___vfprintf_internal_r+0x554>
  8054ac:	843ffc04 	addi	r16,r16,-16
  8054b0:	ad400204 	addi	r21,r21,8
  8054b4:	9c00130e 	bge	r19,r16,805504 <___vfprintf_internal_r+0x5a0>
  8054b8:	94800404 	addi	r18,r18,16
  8054bc:	8c400044 	addi	r17,r17,1
  8054c0:	af000015 	stw	fp,0(r21)
  8054c4:	acc00115 	stw	r19,4(r21)
  8054c8:	dc800e15 	stw	r18,56(sp)
  8054cc:	dc400d15 	stw	r17,52(sp)
  8054d0:	a47ff60e 	bge	r20,r17,8054ac <___vfprintf_internal_r+0x548>
  8054d4:	d9014f17 	ldw	r4,1340(sp)
  8054d8:	b00b883a 	mov	r5,r22
  8054dc:	d9800c04 	addi	r6,sp,48
  8054e0:	d9c15115 	stw	r7,1348(sp)
  8054e4:	0804f0c0 	call	804f0c <__sprint_r>
  8054e8:	d9c15117 	ldw	r7,1348(sp)
  8054ec:	1000551e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8054f0:	843ffc04 	addi	r16,r16,-16
  8054f4:	dc800e17 	ldw	r18,56(sp)
  8054f8:	dc400d17 	ldw	r17,52(sp)
  8054fc:	dd401904 	addi	r21,sp,100
  805500:	9c3fed16 	blt	r19,r16,8054b8 <___vfprintf_internal_r+0x554>
  805504:	9425883a 	add	r18,r18,r16
  805508:	8c400044 	addi	r17,r17,1
  80550c:	008001c4 	movi	r2,7
  805510:	af000015 	stw	fp,0(r21)
  805514:	ac000115 	stw	r16,4(r21)
  805518:	dc800e15 	stw	r18,56(sp)
  80551c:	dc400d15 	stw	r17,52(sp)
  805520:	14418216 	blt	r2,r17,805b2c <___vfprintf_internal_r+0xbc8>
  805524:	ad400204 	addi	r21,r21,8
  805528:	d9014c17 	ldw	r4,1328(sp)
  80552c:	2080400c 	andi	r2,r4,256
  805530:	10004a1e 	bne	r2,zero,80565c <___vfprintf_internal_r+0x6f8>
  805534:	d9414117 	ldw	r5,1284(sp)
  805538:	91e5883a 	add	r18,r18,r7
  80553c:	8c400044 	addi	r17,r17,1
  805540:	008001c4 	movi	r2,7
  805544:	a9400015 	stw	r5,0(r21)
  805548:	a9c00115 	stw	r7,4(r21)
  80554c:	dc800e15 	stw	r18,56(sp)
  805550:	dc400d15 	stw	r17,52(sp)
  805554:	14416716 	blt	r2,r17,805af4 <___vfprintf_internal_r+0xb90>
  805558:	a8c00204 	addi	r3,r21,8
  80555c:	d9814c17 	ldw	r6,1328(sp)
  805560:	3080010c 	andi	r2,r6,4
  805564:	10002826 	beq	r2,zero,805608 <___vfprintf_internal_r+0x6a4>
  805568:	d8814a17 	ldw	r2,1320(sp)
  80556c:	d9014517 	ldw	r4,1300(sp)
  805570:	1121c83a 	sub	r16,r2,r4
  805574:	0400240e 	bge	zero,r16,805608 <___vfprintf_internal_r+0x6a4>
  805578:	00800404 	movi	r2,16
  80557c:	14044f0e 	bge	r2,r16,8066bc <___vfprintf_internal_r+0x1758>
  805580:	dc400d17 	ldw	r17,52(sp)
  805584:	1027883a 	mov	r19,r2
  805588:	07002074 	movhi	fp,129
  80558c:	e705ee84 	addi	fp,fp,6074
  805590:	050001c4 	movi	r20,7
  805594:	00000306 	br	8055a4 <___vfprintf_internal_r+0x640>
  805598:	843ffc04 	addi	r16,r16,-16
  80559c:	18c00204 	addi	r3,r3,8
  8055a0:	9c00110e 	bge	r19,r16,8055e8 <___vfprintf_internal_r+0x684>
  8055a4:	94800404 	addi	r18,r18,16
  8055a8:	8c400044 	addi	r17,r17,1
  8055ac:	1f000015 	stw	fp,0(r3)
  8055b0:	1cc00115 	stw	r19,4(r3)
  8055b4:	dc800e15 	stw	r18,56(sp)
  8055b8:	dc400d15 	stw	r17,52(sp)
  8055bc:	a47ff60e 	bge	r20,r17,805598 <___vfprintf_internal_r+0x634>
  8055c0:	d9014f17 	ldw	r4,1340(sp)
  8055c4:	b00b883a 	mov	r5,r22
  8055c8:	d9800c04 	addi	r6,sp,48
  8055cc:	0804f0c0 	call	804f0c <__sprint_r>
  8055d0:	10001c1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8055d4:	843ffc04 	addi	r16,r16,-16
  8055d8:	dc800e17 	ldw	r18,56(sp)
  8055dc:	dc400d17 	ldw	r17,52(sp)
  8055e0:	d8c01904 	addi	r3,sp,100
  8055e4:	9c3fef16 	blt	r19,r16,8055a4 <___vfprintf_internal_r+0x640>
  8055e8:	9425883a 	add	r18,r18,r16
  8055ec:	8c400044 	addi	r17,r17,1
  8055f0:	008001c4 	movi	r2,7
  8055f4:	1f000015 	stw	fp,0(r3)
  8055f8:	1c000115 	stw	r16,4(r3)
  8055fc:	dc800e15 	stw	r18,56(sp)
  805600:	dc400d15 	stw	r17,52(sp)
  805604:	1440cb16 	blt	r2,r17,805934 <___vfprintf_internal_r+0x9d0>
  805608:	d8814a17 	ldw	r2,1320(sp)
  80560c:	d9414517 	ldw	r5,1300(sp)
  805610:	1140010e 	bge	r2,r5,805618 <___vfprintf_internal_r+0x6b4>
  805614:	2805883a 	mov	r2,r5
  805618:	d9814b17 	ldw	r6,1324(sp)
  80561c:	308d883a 	add	r6,r6,r2
  805620:	d9814b15 	stw	r6,1324(sp)
  805624:	90013b1e 	bne	r18,zero,805b14 <___vfprintf_internal_r+0xbb0>
  805628:	d9c14017 	ldw	r7,1280(sp)
  80562c:	dd401904 	addi	r21,sp,100
  805630:	d8000d15 	stw	zero,52(sp)
  805634:	003ea706 	br	8050d4 <___vfprintf_internal_r+0x170>
  805638:	d8800e17 	ldw	r2,56(sp)
  80563c:	10053f1e 	bne	r2,zero,806b3c <___vfprintf_internal_r+0x1bd8>
  805640:	d8000d15 	stw	zero,52(sp)
  805644:	b080030b 	ldhu	r2,12(r22)
  805648:	1080100c 	andi	r2,r2,64
  80564c:	103e8726 	beq	r2,zero,80506c <___vfprintf_internal_r+0x108>
  805650:	00bfffc4 	movi	r2,-1
  805654:	d8814b15 	stw	r2,1324(sp)
  805658:	003e8406 	br	80506c <___vfprintf_internal_r+0x108>
  80565c:	d9814d17 	ldw	r6,1332(sp)
  805660:	00801944 	movi	r2,101
  805664:	11806e16 	blt	r2,r6,805820 <___vfprintf_internal_r+0x8bc>
  805668:	d9414717 	ldw	r5,1308(sp)
  80566c:	00c00044 	movi	r3,1
  805670:	1943430e 	bge	r3,r5,806380 <___vfprintf_internal_r+0x141c>
  805674:	d8814117 	ldw	r2,1284(sp)
  805678:	94800044 	addi	r18,r18,1
  80567c:	8c400044 	addi	r17,r17,1
  805680:	a8800015 	stw	r2,0(r21)
  805684:	008001c4 	movi	r2,7
  805688:	a8c00115 	stw	r3,4(r21)
  80568c:	dc800e15 	stw	r18,56(sp)
  805690:	dc400d15 	stw	r17,52(sp)
  805694:	1441ca16 	blt	r2,r17,805dc0 <___vfprintf_internal_r+0xe5c>
  805698:	a8c00204 	addi	r3,r21,8
  80569c:	d9014917 	ldw	r4,1316(sp)
  8056a0:	00800044 	movi	r2,1
  8056a4:	94800044 	addi	r18,r18,1
  8056a8:	8c400044 	addi	r17,r17,1
  8056ac:	18800115 	stw	r2,4(r3)
  8056b0:	008001c4 	movi	r2,7
  8056b4:	19000015 	stw	r4,0(r3)
  8056b8:	dc800e15 	stw	r18,56(sp)
  8056bc:	dc400d15 	stw	r17,52(sp)
  8056c0:	1441b616 	blt	r2,r17,805d9c <___vfprintf_internal_r+0xe38>
  8056c4:	1cc00204 	addi	r19,r3,8
  8056c8:	d9014217 	ldw	r4,1288(sp)
  8056cc:	d9414317 	ldw	r5,1292(sp)
  8056d0:	000d883a 	mov	r6,zero
  8056d4:	000f883a 	mov	r7,zero
  8056d8:	080cb2c0 	call	80cb2c <__nedf2>
  8056dc:	10017426 	beq	r2,zero,805cb0 <___vfprintf_internal_r+0xd4c>
  8056e0:	d9414717 	ldw	r5,1308(sp)
  8056e4:	d9814117 	ldw	r6,1284(sp)
  8056e8:	8c400044 	addi	r17,r17,1
  8056ec:	2c85883a 	add	r2,r5,r18
  8056f0:	14bfffc4 	addi	r18,r2,-1
  8056f4:	28bfffc4 	addi	r2,r5,-1
  8056f8:	30c00044 	addi	r3,r6,1
  8056fc:	98800115 	stw	r2,4(r19)
  805700:	008001c4 	movi	r2,7
  805704:	98c00015 	stw	r3,0(r19)
  805708:	dc800e15 	stw	r18,56(sp)
  80570c:	dc400d15 	stw	r17,52(sp)
  805710:	14418e16 	blt	r2,r17,805d4c <___vfprintf_internal_r+0xde8>
  805714:	9cc00204 	addi	r19,r19,8
  805718:	d9414817 	ldw	r5,1312(sp)
  80571c:	d8800804 	addi	r2,sp,32
  805720:	8c400044 	addi	r17,r17,1
  805724:	9165883a 	add	r18,r18,r5
  805728:	98800015 	stw	r2,0(r19)
  80572c:	008001c4 	movi	r2,7
  805730:	99400115 	stw	r5,4(r19)
  805734:	dc800e15 	stw	r18,56(sp)
  805738:	dc400d15 	stw	r17,52(sp)
  80573c:	1440ed16 	blt	r2,r17,805af4 <___vfprintf_internal_r+0xb90>
  805740:	98c00204 	addi	r3,r19,8
  805744:	003f8506 	br	80555c <___vfprintf_internal_r+0x5f8>
  805748:	d9814a17 	ldw	r6,1320(sp)
  80574c:	d8814517 	ldw	r2,1300(sp)
  805750:	30a1c83a 	sub	r16,r6,r2
  805754:	043f4b0e 	bge	zero,r16,805484 <___vfprintf_internal_r+0x520>
  805758:	00800404 	movi	r2,16
  80575c:	1404340e 	bge	r2,r16,806830 <___vfprintf_internal_r+0x18cc>
  805760:	1027883a 	mov	r19,r2
  805764:	07002074 	movhi	fp,129
  805768:	e705ea84 	addi	fp,fp,6058
  80576c:	050001c4 	movi	r20,7
  805770:	00000306 	br	805780 <___vfprintf_internal_r+0x81c>
  805774:	843ffc04 	addi	r16,r16,-16
  805778:	ad400204 	addi	r21,r21,8
  80577c:	9c00130e 	bge	r19,r16,8057cc <___vfprintf_internal_r+0x868>
  805780:	94800404 	addi	r18,r18,16
  805784:	8c400044 	addi	r17,r17,1
  805788:	af000015 	stw	fp,0(r21)
  80578c:	acc00115 	stw	r19,4(r21)
  805790:	dc800e15 	stw	r18,56(sp)
  805794:	dc400d15 	stw	r17,52(sp)
  805798:	a47ff60e 	bge	r20,r17,805774 <___vfprintf_internal_r+0x810>
  80579c:	d9014f17 	ldw	r4,1340(sp)
  8057a0:	b00b883a 	mov	r5,r22
  8057a4:	d9800c04 	addi	r6,sp,48
  8057a8:	d9c15115 	stw	r7,1348(sp)
  8057ac:	0804f0c0 	call	804f0c <__sprint_r>
  8057b0:	d9c15117 	ldw	r7,1348(sp)
  8057b4:	103fa31e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8057b8:	843ffc04 	addi	r16,r16,-16
  8057bc:	dc800e17 	ldw	r18,56(sp)
  8057c0:	dc400d17 	ldw	r17,52(sp)
  8057c4:	dd401904 	addi	r21,sp,100
  8057c8:	9c3fed16 	blt	r19,r16,805780 <___vfprintf_internal_r+0x81c>
  8057cc:	9425883a 	add	r18,r18,r16
  8057d0:	8c400044 	addi	r17,r17,1
  8057d4:	008001c4 	movi	r2,7
  8057d8:	af000015 	stw	fp,0(r21)
  8057dc:	ac000115 	stw	r16,4(r21)
  8057e0:	dc800e15 	stw	r18,56(sp)
  8057e4:	dc400d15 	stw	r17,52(sp)
  8057e8:	14416116 	blt	r2,r17,805d70 <___vfprintf_internal_r+0xe0c>
  8057ec:	ad400204 	addi	r21,r21,8
  8057f0:	003f2406 	br	805484 <___vfprintf_internal_r+0x520>
  8057f4:	d9014f17 	ldw	r4,1340(sp)
  8057f8:	08089d40 	call	8089d4 <__sinit>
  8057fc:	d9c15117 	ldw	r7,1348(sp)
  805800:	003def06 	br	804fc0 <___vfprintf_internal_r+0x5c>
  805804:	d9014f17 	ldw	r4,1340(sp)
  805808:	b00b883a 	mov	r5,r22
  80580c:	d9c15115 	stw	r7,1348(sp)
  805810:	0806e340 	call	806e34 <__swsetup_r>
  805814:	d9c15117 	ldw	r7,1348(sp)
  805818:	103dee26 	beq	r2,zero,804fd4 <___vfprintf_internal_r+0x70>
  80581c:	003f8c06 	br	805650 <___vfprintf_internal_r+0x6ec>
  805820:	d9014217 	ldw	r4,1288(sp)
  805824:	d9414317 	ldw	r5,1292(sp)
  805828:	000d883a 	mov	r6,zero
  80582c:	000f883a 	mov	r7,zero
  805830:	080caa40 	call	80caa4 <__eqdf2>
  805834:	1000f21e 	bne	r2,zero,805c00 <___vfprintf_internal_r+0xc9c>
  805838:	00802074 	movhi	r2,129
  80583c:	1085ea04 	addi	r2,r2,6056
  805840:	94800044 	addi	r18,r18,1
  805844:	8c400044 	addi	r17,r17,1
  805848:	a8800015 	stw	r2,0(r21)
  80584c:	00c00044 	movi	r3,1
  805850:	008001c4 	movi	r2,7
  805854:	a8c00115 	stw	r3,4(r21)
  805858:	dc800e15 	stw	r18,56(sp)
  80585c:	dc400d15 	stw	r17,52(sp)
  805860:	1442fa16 	blt	r2,r17,80644c <___vfprintf_internal_r+0x14e8>
  805864:	a8c00204 	addi	r3,r21,8
  805868:	d8800517 	ldw	r2,20(sp)
  80586c:	d9014717 	ldw	r4,1308(sp)
  805870:	11015c0e 	bge	r2,r4,805de4 <___vfprintf_internal_r+0xe80>
  805874:	dc400d17 	ldw	r17,52(sp)
  805878:	d9814917 	ldw	r6,1316(sp)
  80587c:	00800044 	movi	r2,1
  805880:	94800044 	addi	r18,r18,1
  805884:	8c400044 	addi	r17,r17,1
  805888:	18800115 	stw	r2,4(r3)
  80588c:	008001c4 	movi	r2,7
  805890:	19800015 	stw	r6,0(r3)
  805894:	dc800e15 	stw	r18,56(sp)
  805898:	dc400d15 	stw	r17,52(sp)
  80589c:	14431016 	blt	r2,r17,8064e0 <___vfprintf_internal_r+0x157c>
  8058a0:	18c00204 	addi	r3,r3,8
  8058a4:	d8814717 	ldw	r2,1308(sp)
  8058a8:	143fffc4 	addi	r16,r2,-1
  8058ac:	043f2b0e 	bge	zero,r16,80555c <___vfprintf_internal_r+0x5f8>
  8058b0:	00800404 	movi	r2,16
  8058b4:	1402a20e 	bge	r2,r16,806340 <___vfprintf_internal_r+0x13dc>
  8058b8:	dc400d17 	ldw	r17,52(sp)
  8058bc:	1027883a 	mov	r19,r2
  8058c0:	07002074 	movhi	fp,129
  8058c4:	e705ea84 	addi	fp,fp,6058
  8058c8:	050001c4 	movi	r20,7
  8058cc:	00000306 	br	8058dc <___vfprintf_internal_r+0x978>
  8058d0:	18c00204 	addi	r3,r3,8
  8058d4:	843ffc04 	addi	r16,r16,-16
  8058d8:	9c029c0e 	bge	r19,r16,80634c <___vfprintf_internal_r+0x13e8>
  8058dc:	94800404 	addi	r18,r18,16
  8058e0:	8c400044 	addi	r17,r17,1
  8058e4:	1f000015 	stw	fp,0(r3)
  8058e8:	1cc00115 	stw	r19,4(r3)
  8058ec:	dc800e15 	stw	r18,56(sp)
  8058f0:	dc400d15 	stw	r17,52(sp)
  8058f4:	a47ff60e 	bge	r20,r17,8058d0 <___vfprintf_internal_r+0x96c>
  8058f8:	d9014f17 	ldw	r4,1340(sp)
  8058fc:	b00b883a 	mov	r5,r22
  805900:	d9800c04 	addi	r6,sp,48
  805904:	0804f0c0 	call	804f0c <__sprint_r>
  805908:	103f4e1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  80590c:	dc800e17 	ldw	r18,56(sp)
  805910:	dc400d17 	ldw	r17,52(sp)
  805914:	d8c01904 	addi	r3,sp,100
  805918:	003fee06 	br	8058d4 <___vfprintf_internal_r+0x970>
  80591c:	d8802c0b 	ldhu	r2,176(sp)
  805920:	00ffffc4 	movi	r3,-1
  805924:	d8c14b15 	stw	r3,1324(sp)
  805928:	1080100c 	andi	r2,r2,64
  80592c:	103dcc1e 	bne	r2,zero,805060 <___vfprintf_internal_r+0xfc>
  805930:	003dce06 	br	80506c <___vfprintf_internal_r+0x108>
  805934:	d9014f17 	ldw	r4,1340(sp)
  805938:	b00b883a 	mov	r5,r22
  80593c:	d9800c04 	addi	r6,sp,48
  805940:	0804f0c0 	call	804f0c <__sprint_r>
  805944:	103f3f1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805948:	dc800e17 	ldw	r18,56(sp)
  80594c:	003f2e06 	br	805608 <___vfprintf_internal_r+0x6a4>
  805950:	d9414c17 	ldw	r5,1328(sp)
  805954:	29400414 	ori	r5,r5,16
  805958:	d9414c15 	stw	r5,1328(sp)
  80595c:	d9814c17 	ldw	r6,1328(sp)
  805960:	3080080c 	andi	r2,r6,32
  805964:	10014f1e 	bne	r2,zero,805ea4 <___vfprintf_internal_r+0xf40>
  805968:	d8c14c17 	ldw	r3,1328(sp)
  80596c:	1880040c 	andi	r2,r3,16
  805970:	1002ea1e 	bne	r2,zero,80651c <___vfprintf_internal_r+0x15b8>
  805974:	d9014c17 	ldw	r4,1328(sp)
  805978:	2080100c 	andi	r2,r4,64
  80597c:	1002e726 	beq	r2,zero,80651c <___vfprintf_internal_r+0x15b8>
  805980:	3880000f 	ldh	r2,0(r7)
  805984:	39c00104 	addi	r7,r7,4
  805988:	d9c14015 	stw	r7,1280(sp)
  80598c:	1023d7fa 	srai	r17,r2,31
  805990:	1021883a 	mov	r16,r2
  805994:	88037216 	blt	r17,zero,806760 <___vfprintf_internal_r+0x17fc>
  805998:	01000044 	movi	r4,1
  80599c:	98000416 	blt	r19,zero,8059b0 <___vfprintf_internal_r+0xa4c>
  8059a0:	d8c14c17 	ldw	r3,1328(sp)
  8059a4:	00bfdfc4 	movi	r2,-129
  8059a8:	1886703a 	and	r3,r3,r2
  8059ac:	d8c14c15 	stw	r3,1328(sp)
  8059b0:	8444b03a 	or	r2,r16,r17
  8059b4:	1002261e 	bne	r2,zero,806250 <___vfprintf_internal_r+0x12ec>
  8059b8:	9802251e 	bne	r19,zero,806250 <___vfprintf_internal_r+0x12ec>
  8059bc:	20803fcc 	andi	r2,r4,255
  8059c0:	10029b26 	beq	r2,zero,806430 <___vfprintf_internal_r+0x14cc>
  8059c4:	d8c01904 	addi	r3,sp,100
  8059c8:	dd000f04 	addi	r20,sp,60
  8059cc:	d8c14115 	stw	r3,1284(sp)
  8059d0:	d8c14117 	ldw	r3,1284(sp)
  8059d4:	dcc14515 	stw	r19,1300(sp)
  8059d8:	a0c5c83a 	sub	r2,r20,r3
  8059dc:	11c00a04 	addi	r7,r2,40
  8059e0:	99c0010e 	bge	r19,r7,8059e8 <___vfprintf_internal_r+0xa84>
  8059e4:	d9c14515 	stw	r7,1300(sp)
  8059e8:	dcc14615 	stw	r19,1304(sp)
  8059ec:	d8800407 	ldb	r2,16(sp)
  8059f0:	103e4c26 	beq	r2,zero,805324 <___vfprintf_internal_r+0x3c0>
  8059f4:	d8814517 	ldw	r2,1300(sp)
  8059f8:	10800044 	addi	r2,r2,1
  8059fc:	d8814515 	stw	r2,1300(sp)
  805a00:	003e4806 	br	805324 <___vfprintf_internal_r+0x3c0>
  805a04:	d9814c17 	ldw	r6,1328(sp)
  805a08:	31800414 	ori	r6,r6,16
  805a0c:	d9814c15 	stw	r6,1328(sp)
  805a10:	d8c14c17 	ldw	r3,1328(sp)
  805a14:	1880080c 	andi	r2,r3,32
  805a18:	1001271e 	bne	r2,zero,805eb8 <___vfprintf_internal_r+0xf54>
  805a1c:	d9414c17 	ldw	r5,1328(sp)
  805a20:	2880040c 	andi	r2,r5,16
  805a24:	1002b61e 	bne	r2,zero,806500 <___vfprintf_internal_r+0x159c>
  805a28:	d9814c17 	ldw	r6,1328(sp)
  805a2c:	3080100c 	andi	r2,r6,64
  805a30:	1002b326 	beq	r2,zero,806500 <___vfprintf_internal_r+0x159c>
  805a34:	3c00000b 	ldhu	r16,0(r7)
  805a38:	0009883a 	mov	r4,zero
  805a3c:	39c00104 	addi	r7,r7,4
  805a40:	0023883a 	mov	r17,zero
  805a44:	d9c14015 	stw	r7,1280(sp)
  805a48:	d8000405 	stb	zero,16(sp)
  805a4c:	003fd306 	br	80599c <___vfprintf_internal_r+0xa38>
  805a50:	d9014c17 	ldw	r4,1328(sp)
  805a54:	21000414 	ori	r4,r4,16
  805a58:	d9014c15 	stw	r4,1328(sp)
  805a5c:	d9414c17 	ldw	r5,1328(sp)
  805a60:	2880080c 	andi	r2,r5,32
  805a64:	1001081e 	bne	r2,zero,805e88 <___vfprintf_internal_r+0xf24>
  805a68:	d8c14c17 	ldw	r3,1328(sp)
  805a6c:	1880040c 	andi	r2,r3,16
  805a70:	1002b01e 	bne	r2,zero,806534 <___vfprintf_internal_r+0x15d0>
  805a74:	d9014c17 	ldw	r4,1328(sp)
  805a78:	2080100c 	andi	r2,r4,64
  805a7c:	1002ad26 	beq	r2,zero,806534 <___vfprintf_internal_r+0x15d0>
  805a80:	3c00000b 	ldhu	r16,0(r7)
  805a84:	01000044 	movi	r4,1
  805a88:	39c00104 	addi	r7,r7,4
  805a8c:	0023883a 	mov	r17,zero
  805a90:	d9c14015 	stw	r7,1280(sp)
  805a94:	d8000405 	stb	zero,16(sp)
  805a98:	003fc006 	br	80599c <___vfprintf_internal_r+0xa38>
  805a9c:	d9014f17 	ldw	r4,1340(sp)
  805aa0:	b00b883a 	mov	r5,r22
  805aa4:	d9800c04 	addi	r6,sp,48
  805aa8:	0804f0c0 	call	804f0c <__sprint_r>
  805aac:	103ee51e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805ab0:	dc800e17 	ldw	r18,56(sp)
  805ab4:	d8c01904 	addi	r3,sp,100
  805ab8:	d9814c17 	ldw	r6,1328(sp)
  805abc:	3080004c 	andi	r2,r6,1
  805ac0:	1005003a 	cmpeq	r2,r2,zero
  805ac4:	103ea51e 	bne	r2,zero,80555c <___vfprintf_internal_r+0x5f8>
  805ac8:	00800044 	movi	r2,1
  805acc:	dc400d17 	ldw	r17,52(sp)
  805ad0:	18800115 	stw	r2,4(r3)
  805ad4:	d8814917 	ldw	r2,1316(sp)
  805ad8:	94800044 	addi	r18,r18,1
  805adc:	8c400044 	addi	r17,r17,1
  805ae0:	18800015 	stw	r2,0(r3)
  805ae4:	008001c4 	movi	r2,7
  805ae8:	dc800e15 	stw	r18,56(sp)
  805aec:	dc400d15 	stw	r17,52(sp)
  805af0:	14421e0e 	bge	r2,r17,80636c <___vfprintf_internal_r+0x1408>
  805af4:	d9014f17 	ldw	r4,1340(sp)
  805af8:	b00b883a 	mov	r5,r22
  805afc:	d9800c04 	addi	r6,sp,48
  805b00:	0804f0c0 	call	804f0c <__sprint_r>
  805b04:	103ecf1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805b08:	dc800e17 	ldw	r18,56(sp)
  805b0c:	d8c01904 	addi	r3,sp,100
  805b10:	003e9206 	br	80555c <___vfprintf_internal_r+0x5f8>
  805b14:	d9014f17 	ldw	r4,1340(sp)
  805b18:	b00b883a 	mov	r5,r22
  805b1c:	d9800c04 	addi	r6,sp,48
  805b20:	0804f0c0 	call	804f0c <__sprint_r>
  805b24:	103ec026 	beq	r2,zero,805628 <___vfprintf_internal_r+0x6c4>
  805b28:	003ec606 	br	805644 <___vfprintf_internal_r+0x6e0>
  805b2c:	d9014f17 	ldw	r4,1340(sp)
  805b30:	b00b883a 	mov	r5,r22
  805b34:	d9800c04 	addi	r6,sp,48
  805b38:	d9c15115 	stw	r7,1348(sp)
  805b3c:	0804f0c0 	call	804f0c <__sprint_r>
  805b40:	d9c15117 	ldw	r7,1348(sp)
  805b44:	103ebf1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805b48:	dc800e17 	ldw	r18,56(sp)
  805b4c:	dc400d17 	ldw	r17,52(sp)
  805b50:	dd401904 	addi	r21,sp,100
  805b54:	003e7406 	br	805528 <___vfprintf_internal_r+0x5c4>
  805b58:	d9014f17 	ldw	r4,1340(sp)
  805b5c:	b00b883a 	mov	r5,r22
  805b60:	d9800c04 	addi	r6,sp,48
  805b64:	d9c15115 	stw	r7,1348(sp)
  805b68:	0804f0c0 	call	804f0c <__sprint_r>
  805b6c:	d9c15117 	ldw	r7,1348(sp)
  805b70:	103eb41e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805b74:	dd401904 	addi	r21,sp,100
  805b78:	003d6d06 	br	805130 <___vfprintf_internal_r+0x1cc>
  805b7c:	d9014f17 	ldw	r4,1340(sp)
  805b80:	b00b883a 	mov	r5,r22
  805b84:	d9800c04 	addi	r6,sp,48
  805b88:	d9c15115 	stw	r7,1348(sp)
  805b8c:	0804f0c0 	call	804f0c <__sprint_r>
  805b90:	d9c15117 	ldw	r7,1348(sp)
  805b94:	103eab1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805b98:	dc800e17 	ldw	r18,56(sp)
  805b9c:	dc400d17 	ldw	r17,52(sp)
  805ba0:	dd401904 	addi	r21,sp,100
  805ba4:	003e3406 	br	805478 <___vfprintf_internal_r+0x514>
  805ba8:	d9014f17 	ldw	r4,1340(sp)
  805bac:	b00b883a 	mov	r5,r22
  805bb0:	d9800c04 	addi	r6,sp,48
  805bb4:	d9c15115 	stw	r7,1348(sp)
  805bb8:	0804f0c0 	call	804f0c <__sprint_r>
  805bbc:	d9c15117 	ldw	r7,1348(sp)
  805bc0:	103ea01e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805bc4:	dc800e17 	ldw	r18,56(sp)
  805bc8:	dc400d17 	ldw	r17,52(sp)
  805bcc:	dd401904 	addi	r21,sp,100
  805bd0:	003e1c06 	br	805444 <___vfprintf_internal_r+0x4e0>
  805bd4:	d9014f17 	ldw	r4,1340(sp)
  805bd8:	b00b883a 	mov	r5,r22
  805bdc:	d9800c04 	addi	r6,sp,48
  805be0:	d9c15115 	stw	r7,1348(sp)
  805be4:	0804f0c0 	call	804f0c <__sprint_r>
  805be8:	d9c15117 	ldw	r7,1348(sp)
  805bec:	103e951e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805bf0:	dc800e17 	ldw	r18,56(sp)
  805bf4:	dc400d17 	ldw	r17,52(sp)
  805bf8:	dd401904 	addi	r21,sp,100
  805bfc:	003e0406 	br	805410 <___vfprintf_internal_r+0x4ac>
  805c00:	d9000517 	ldw	r4,20(sp)
  805c04:	0102520e 	bge	zero,r4,806550 <___vfprintf_internal_r+0x15ec>
  805c08:	d9814717 	ldw	r6,1308(sp)
  805c0c:	21807a16 	blt	r4,r6,805df8 <___vfprintf_internal_r+0xe94>
  805c10:	d8814117 	ldw	r2,1284(sp)
  805c14:	91a5883a 	add	r18,r18,r6
  805c18:	8c400044 	addi	r17,r17,1
  805c1c:	a8800015 	stw	r2,0(r21)
  805c20:	008001c4 	movi	r2,7
  805c24:	a9800115 	stw	r6,4(r21)
  805c28:	dc800e15 	stw	r18,56(sp)
  805c2c:	dc400d15 	stw	r17,52(sp)
  805c30:	1442f616 	blt	r2,r17,80680c <___vfprintf_internal_r+0x18a8>
  805c34:	a8c00204 	addi	r3,r21,8
  805c38:	d9414717 	ldw	r5,1308(sp)
  805c3c:	2161c83a 	sub	r16,r4,r5
  805c40:	043f9d0e 	bge	zero,r16,805ab8 <___vfprintf_internal_r+0xb54>
  805c44:	00800404 	movi	r2,16
  805c48:	1402130e 	bge	r2,r16,806498 <___vfprintf_internal_r+0x1534>
  805c4c:	dc400d17 	ldw	r17,52(sp)
  805c50:	1027883a 	mov	r19,r2
  805c54:	07002074 	movhi	fp,129
  805c58:	e705ea84 	addi	fp,fp,6058
  805c5c:	050001c4 	movi	r20,7
  805c60:	00000306 	br	805c70 <___vfprintf_internal_r+0xd0c>
  805c64:	18c00204 	addi	r3,r3,8
  805c68:	843ffc04 	addi	r16,r16,-16
  805c6c:	9c020d0e 	bge	r19,r16,8064a4 <___vfprintf_internal_r+0x1540>
  805c70:	94800404 	addi	r18,r18,16
  805c74:	8c400044 	addi	r17,r17,1
  805c78:	1f000015 	stw	fp,0(r3)
  805c7c:	1cc00115 	stw	r19,4(r3)
  805c80:	dc800e15 	stw	r18,56(sp)
  805c84:	dc400d15 	stw	r17,52(sp)
  805c88:	a47ff60e 	bge	r20,r17,805c64 <___vfprintf_internal_r+0xd00>
  805c8c:	d9014f17 	ldw	r4,1340(sp)
  805c90:	b00b883a 	mov	r5,r22
  805c94:	d9800c04 	addi	r6,sp,48
  805c98:	0804f0c0 	call	804f0c <__sprint_r>
  805c9c:	103e691e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805ca0:	dc800e17 	ldw	r18,56(sp)
  805ca4:	dc400d17 	ldw	r17,52(sp)
  805ca8:	d8c01904 	addi	r3,sp,100
  805cac:	003fee06 	br	805c68 <___vfprintf_internal_r+0xd04>
  805cb0:	d8814717 	ldw	r2,1308(sp)
  805cb4:	143fffc4 	addi	r16,r2,-1
  805cb8:	043e970e 	bge	zero,r16,805718 <___vfprintf_internal_r+0x7b4>
  805cbc:	00800404 	movi	r2,16
  805cc0:	1400180e 	bge	r2,r16,805d24 <___vfprintf_internal_r+0xdc0>
  805cc4:	1029883a 	mov	r20,r2
  805cc8:	07002074 	movhi	fp,129
  805ccc:	e705ea84 	addi	fp,fp,6058
  805cd0:	054001c4 	movi	r21,7
  805cd4:	00000306 	br	805ce4 <___vfprintf_internal_r+0xd80>
  805cd8:	9cc00204 	addi	r19,r19,8
  805cdc:	843ffc04 	addi	r16,r16,-16
  805ce0:	a400120e 	bge	r20,r16,805d2c <___vfprintf_internal_r+0xdc8>
  805ce4:	94800404 	addi	r18,r18,16
  805ce8:	8c400044 	addi	r17,r17,1
  805cec:	9f000015 	stw	fp,0(r19)
  805cf0:	9d000115 	stw	r20,4(r19)
  805cf4:	dc800e15 	stw	r18,56(sp)
  805cf8:	dc400d15 	stw	r17,52(sp)
  805cfc:	ac7ff60e 	bge	r21,r17,805cd8 <___vfprintf_internal_r+0xd74>
  805d00:	d9014f17 	ldw	r4,1340(sp)
  805d04:	b00b883a 	mov	r5,r22
  805d08:	d9800c04 	addi	r6,sp,48
  805d0c:	0804f0c0 	call	804f0c <__sprint_r>
  805d10:	103e4c1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805d14:	dc800e17 	ldw	r18,56(sp)
  805d18:	dc400d17 	ldw	r17,52(sp)
  805d1c:	dcc01904 	addi	r19,sp,100
  805d20:	003fee06 	br	805cdc <___vfprintf_internal_r+0xd78>
  805d24:	07002074 	movhi	fp,129
  805d28:	e705ea84 	addi	fp,fp,6058
  805d2c:	9425883a 	add	r18,r18,r16
  805d30:	8c400044 	addi	r17,r17,1
  805d34:	008001c4 	movi	r2,7
  805d38:	9f000015 	stw	fp,0(r19)
  805d3c:	9c000115 	stw	r16,4(r19)
  805d40:	dc800e15 	stw	r18,56(sp)
  805d44:	dc400d15 	stw	r17,52(sp)
  805d48:	147e720e 	bge	r2,r17,805714 <___vfprintf_internal_r+0x7b0>
  805d4c:	d9014f17 	ldw	r4,1340(sp)
  805d50:	b00b883a 	mov	r5,r22
  805d54:	d9800c04 	addi	r6,sp,48
  805d58:	0804f0c0 	call	804f0c <__sprint_r>
  805d5c:	103e391e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805d60:	dc800e17 	ldw	r18,56(sp)
  805d64:	dc400d17 	ldw	r17,52(sp)
  805d68:	dcc01904 	addi	r19,sp,100
  805d6c:	003e6a06 	br	805718 <___vfprintf_internal_r+0x7b4>
  805d70:	d9014f17 	ldw	r4,1340(sp)
  805d74:	b00b883a 	mov	r5,r22
  805d78:	d9800c04 	addi	r6,sp,48
  805d7c:	d9c15115 	stw	r7,1348(sp)
  805d80:	0804f0c0 	call	804f0c <__sprint_r>
  805d84:	d9c15117 	ldw	r7,1348(sp)
  805d88:	103e2e1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805d8c:	dc800e17 	ldw	r18,56(sp)
  805d90:	dc400d17 	ldw	r17,52(sp)
  805d94:	dd401904 	addi	r21,sp,100
  805d98:	003dba06 	br	805484 <___vfprintf_internal_r+0x520>
  805d9c:	d9014f17 	ldw	r4,1340(sp)
  805da0:	b00b883a 	mov	r5,r22
  805da4:	d9800c04 	addi	r6,sp,48
  805da8:	0804f0c0 	call	804f0c <__sprint_r>
  805dac:	103e251e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805db0:	dc800e17 	ldw	r18,56(sp)
  805db4:	dc400d17 	ldw	r17,52(sp)
  805db8:	dcc01904 	addi	r19,sp,100
  805dbc:	003e4206 	br	8056c8 <___vfprintf_internal_r+0x764>
  805dc0:	d9014f17 	ldw	r4,1340(sp)
  805dc4:	b00b883a 	mov	r5,r22
  805dc8:	d9800c04 	addi	r6,sp,48
  805dcc:	0804f0c0 	call	804f0c <__sprint_r>
  805dd0:	103e1c1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  805dd4:	dc800e17 	ldw	r18,56(sp)
  805dd8:	dc400d17 	ldw	r17,52(sp)
  805ddc:	d8c01904 	addi	r3,sp,100
  805de0:	003e2e06 	br	80569c <___vfprintf_internal_r+0x738>
  805de4:	d9414c17 	ldw	r5,1328(sp)
  805de8:	2880004c 	andi	r2,r5,1
  805dec:	1005003a 	cmpeq	r2,r2,zero
  805df0:	103dda1e 	bne	r2,zero,80555c <___vfprintf_internal_r+0x5f8>
  805df4:	003e9f06 	br	805874 <___vfprintf_internal_r+0x910>
  805df8:	d8c14117 	ldw	r3,1284(sp)
  805dfc:	9125883a 	add	r18,r18,r4
  805e00:	8c400044 	addi	r17,r17,1
  805e04:	008001c4 	movi	r2,7
  805e08:	a8c00015 	stw	r3,0(r21)
  805e0c:	a9000115 	stw	r4,4(r21)
  805e10:	dc800e15 	stw	r18,56(sp)
  805e14:	dc400d15 	stw	r17,52(sp)
  805e18:	14426616 	blt	r2,r17,8067b4 <___vfprintf_internal_r+0x1850>
  805e1c:	a8c00204 	addi	r3,r21,8
  805e20:	d9414917 	ldw	r5,1316(sp)
  805e24:	00800044 	movi	r2,1
  805e28:	94800044 	addi	r18,r18,1
  805e2c:	8c400044 	addi	r17,r17,1
  805e30:	18800115 	stw	r2,4(r3)
  805e34:	008001c4 	movi	r2,7
  805e38:	19400015 	stw	r5,0(r3)
  805e3c:	dc800e15 	stw	r18,56(sp)
  805e40:	dc400d15 	stw	r17,52(sp)
  805e44:	2021883a 	mov	r16,r4
  805e48:	14425016 	blt	r2,r17,80678c <___vfprintf_internal_r+0x1828>
  805e4c:	19400204 	addi	r5,r3,8
  805e50:	d9814717 	ldw	r6,1308(sp)
  805e54:	8c400044 	addi	r17,r17,1
  805e58:	dc400d15 	stw	r17,52(sp)
  805e5c:	3107c83a 	sub	r3,r6,r4
  805e60:	d9014117 	ldw	r4,1284(sp)
  805e64:	90e5883a 	add	r18,r18,r3
  805e68:	28c00115 	stw	r3,4(r5)
  805e6c:	8105883a 	add	r2,r16,r4
  805e70:	28800015 	stw	r2,0(r5)
  805e74:	008001c4 	movi	r2,7
  805e78:	dc800e15 	stw	r18,56(sp)
  805e7c:	147f1d16 	blt	r2,r17,805af4 <___vfprintf_internal_r+0xb90>
  805e80:	28c00204 	addi	r3,r5,8
  805e84:	003db506 	br	80555c <___vfprintf_internal_r+0x5f8>
  805e88:	3c000017 	ldw	r16,0(r7)
  805e8c:	3c400117 	ldw	r17,4(r7)
  805e90:	39800204 	addi	r6,r7,8
  805e94:	01000044 	movi	r4,1
  805e98:	d9814015 	stw	r6,1280(sp)
  805e9c:	d8000405 	stb	zero,16(sp)
  805ea0:	003ebe06 	br	80599c <___vfprintf_internal_r+0xa38>
  805ea4:	3c000017 	ldw	r16,0(r7)
  805ea8:	3c400117 	ldw	r17,4(r7)
  805eac:	38800204 	addi	r2,r7,8
  805eb0:	d8814015 	stw	r2,1280(sp)
  805eb4:	003eb706 	br	805994 <___vfprintf_internal_r+0xa30>
  805eb8:	3c000017 	ldw	r16,0(r7)
  805ebc:	3c400117 	ldw	r17,4(r7)
  805ec0:	39000204 	addi	r4,r7,8
  805ec4:	d9014015 	stw	r4,1280(sp)
  805ec8:	0009883a 	mov	r4,zero
  805ecc:	d8000405 	stb	zero,16(sp)
  805ed0:	003eb206 	br	80599c <___vfprintf_internal_r+0xa38>
  805ed4:	38c00017 	ldw	r3,0(r7)
  805ed8:	39c00104 	addi	r7,r7,4
  805edc:	d8c14a15 	stw	r3,1320(sp)
  805ee0:	1800d10e 	bge	r3,zero,806228 <___vfprintf_internal_r+0x12c4>
  805ee4:	00c7c83a 	sub	r3,zero,r3
  805ee8:	d8c14a15 	stw	r3,1320(sp)
  805eec:	d9014c17 	ldw	r4,1328(sp)
  805ef0:	b8c00007 	ldb	r3,0(r23)
  805ef4:	21000114 	ori	r4,r4,4
  805ef8:	d9014c15 	stw	r4,1328(sp)
  805efc:	003c9806 	br	805160 <___vfprintf_internal_r+0x1fc>
  805f00:	d9814c17 	ldw	r6,1328(sp)
  805f04:	3080080c 	andi	r2,r6,32
  805f08:	1001f026 	beq	r2,zero,8066cc <___vfprintf_internal_r+0x1768>
  805f0c:	d9014b17 	ldw	r4,1324(sp)
  805f10:	38800017 	ldw	r2,0(r7)
  805f14:	39c00104 	addi	r7,r7,4
  805f18:	d9c14015 	stw	r7,1280(sp)
  805f1c:	2007d7fa 	srai	r3,r4,31
  805f20:	d9c14017 	ldw	r7,1280(sp)
  805f24:	11000015 	stw	r4,0(r2)
  805f28:	10c00115 	stw	r3,4(r2)
  805f2c:	003c6906 	br	8050d4 <___vfprintf_internal_r+0x170>
  805f30:	b8c00007 	ldb	r3,0(r23)
  805f34:	00801b04 	movi	r2,108
  805f38:	18824f26 	beq	r3,r2,806878 <___vfprintf_internal_r+0x1914>
  805f3c:	d9414c17 	ldw	r5,1328(sp)
  805f40:	29400414 	ori	r5,r5,16
  805f44:	d9414c15 	stw	r5,1328(sp)
  805f48:	003c8506 	br	805160 <___vfprintf_internal_r+0x1fc>
  805f4c:	d9814c17 	ldw	r6,1328(sp)
  805f50:	b8c00007 	ldb	r3,0(r23)
  805f54:	31800814 	ori	r6,r6,32
  805f58:	d9814c15 	stw	r6,1328(sp)
  805f5c:	003c8006 	br	805160 <___vfprintf_internal_r+0x1fc>
  805f60:	d8814c17 	ldw	r2,1328(sp)
  805f64:	3c000017 	ldw	r16,0(r7)
  805f68:	00c01e04 	movi	r3,120
  805f6c:	10800094 	ori	r2,r2,2
  805f70:	d8814c15 	stw	r2,1328(sp)
  805f74:	39c00104 	addi	r7,r7,4
  805f78:	01402074 	movhi	r5,129
  805f7c:	2945d304 	addi	r5,r5,5964
  805f80:	00800c04 	movi	r2,48
  805f84:	0023883a 	mov	r17,zero
  805f88:	01000084 	movi	r4,2
  805f8c:	d9c14015 	stw	r7,1280(sp)
  805f90:	d8c14d15 	stw	r3,1332(sp)
  805f94:	d9414415 	stw	r5,1296(sp)
  805f98:	d8800445 	stb	r2,17(sp)
  805f9c:	d8c00485 	stb	r3,18(sp)
  805fa0:	d8000405 	stb	zero,16(sp)
  805fa4:	003e7d06 	br	80599c <___vfprintf_internal_r+0xa38>
  805fa8:	d8814c17 	ldw	r2,1328(sp)
  805fac:	b8c00007 	ldb	r3,0(r23)
  805fb0:	10801014 	ori	r2,r2,64
  805fb4:	d8814c15 	stw	r2,1328(sp)
  805fb8:	003c6906 	br	805160 <___vfprintf_internal_r+0x1fc>
  805fbc:	d9414c17 	ldw	r5,1328(sp)
  805fc0:	2880020c 	andi	r2,r5,8
  805fc4:	1001df26 	beq	r2,zero,806744 <___vfprintf_internal_r+0x17e0>
  805fc8:	39800017 	ldw	r6,0(r7)
  805fcc:	38800204 	addi	r2,r7,8
  805fd0:	d8814015 	stw	r2,1280(sp)
  805fd4:	d9814215 	stw	r6,1288(sp)
  805fd8:	39c00117 	ldw	r7,4(r7)
  805fdc:	d9c14315 	stw	r7,1292(sp)
  805fe0:	d9014217 	ldw	r4,1288(sp)
  805fe4:	d9414317 	ldw	r5,1292(sp)
  805fe8:	080acec0 	call	80acec <__isinfd>
  805fec:	10021726 	beq	r2,zero,80684c <___vfprintf_internal_r+0x18e8>
  805ff0:	d9014217 	ldw	r4,1288(sp)
  805ff4:	d9414317 	ldw	r5,1292(sp)
  805ff8:	000d883a 	mov	r6,zero
  805ffc:	000f883a 	mov	r7,zero
  806000:	080ccc40 	call	80ccc4 <__ltdf2>
  806004:	1002ca16 	blt	r2,zero,806b30 <___vfprintf_internal_r+0x1bcc>
  806008:	d9414d17 	ldw	r5,1332(sp)
  80600c:	008011c4 	movi	r2,71
  806010:	11420a16 	blt	r2,r5,80683c <___vfprintf_internal_r+0x18d8>
  806014:	01802074 	movhi	r6,129
  806018:	3185d804 	addi	r6,r6,5984
  80601c:	d9814115 	stw	r6,1284(sp)
  806020:	d9014c17 	ldw	r4,1328(sp)
  806024:	00c000c4 	movi	r3,3
  806028:	00bfdfc4 	movi	r2,-129
  80602c:	2088703a 	and	r4,r4,r2
  806030:	180f883a 	mov	r7,r3
  806034:	d8c14515 	stw	r3,1300(sp)
  806038:	d9014c15 	stw	r4,1328(sp)
  80603c:	d8014615 	stw	zero,1304(sp)
  806040:	003e6a06 	br	8059ec <___vfprintf_internal_r+0xa88>
  806044:	38800017 	ldw	r2,0(r7)
  806048:	00c00044 	movi	r3,1
  80604c:	39c00104 	addi	r7,r7,4
  806050:	d9c14015 	stw	r7,1280(sp)
  806054:	d9000f04 	addi	r4,sp,60
  806058:	180f883a 	mov	r7,r3
  80605c:	d8c14515 	stw	r3,1300(sp)
  806060:	d9014115 	stw	r4,1284(sp)
  806064:	d8800f05 	stb	r2,60(sp)
  806068:	d8000405 	stb	zero,16(sp)
  80606c:	003cac06 	br	805320 <___vfprintf_internal_r+0x3bc>
  806070:	01402074 	movhi	r5,129
  806074:	2945de04 	addi	r5,r5,6008
  806078:	d9414415 	stw	r5,1296(sp)
  80607c:	d9814c17 	ldw	r6,1328(sp)
  806080:	3080080c 	andi	r2,r6,32
  806084:	1000f926 	beq	r2,zero,80646c <___vfprintf_internal_r+0x1508>
  806088:	3c000017 	ldw	r16,0(r7)
  80608c:	3c400117 	ldw	r17,4(r7)
  806090:	38800204 	addi	r2,r7,8
  806094:	d8814015 	stw	r2,1280(sp)
  806098:	d9414c17 	ldw	r5,1328(sp)
  80609c:	2880004c 	andi	r2,r5,1
  8060a0:	1005003a 	cmpeq	r2,r2,zero
  8060a4:	1000b31e 	bne	r2,zero,806374 <___vfprintf_internal_r+0x1410>
  8060a8:	8444b03a 	or	r2,r16,r17
  8060ac:	1000b126 	beq	r2,zero,806374 <___vfprintf_internal_r+0x1410>
  8060b0:	d9814d17 	ldw	r6,1332(sp)
  8060b4:	29400094 	ori	r5,r5,2
  8060b8:	00800c04 	movi	r2,48
  8060bc:	01000084 	movi	r4,2
  8060c0:	d9414c15 	stw	r5,1328(sp)
  8060c4:	d8800445 	stb	r2,17(sp)
  8060c8:	d9800485 	stb	r6,18(sp)
  8060cc:	d8000405 	stb	zero,16(sp)
  8060d0:	003e3206 	br	80599c <___vfprintf_internal_r+0xa38>
  8060d4:	01802074 	movhi	r6,129
  8060d8:	3185d304 	addi	r6,r6,5964
  8060dc:	d9814415 	stw	r6,1296(sp)
  8060e0:	003fe606 	br	80607c <___vfprintf_internal_r+0x1118>
  8060e4:	00800ac4 	movi	r2,43
  8060e8:	d8800405 	stb	r2,16(sp)
  8060ec:	b8c00007 	ldb	r3,0(r23)
  8060f0:	003c1b06 	br	805160 <___vfprintf_internal_r+0x1fc>
  8060f4:	d8814c17 	ldw	r2,1328(sp)
  8060f8:	b8c00007 	ldb	r3,0(r23)
  8060fc:	10800054 	ori	r2,r2,1
  806100:	d8814c15 	stw	r2,1328(sp)
  806104:	003c1606 	br	805160 <___vfprintf_internal_r+0x1fc>
  806108:	d8800407 	ldb	r2,16(sp)
  80610c:	1000461e 	bne	r2,zero,806228 <___vfprintf_internal_r+0x12c4>
  806110:	00800804 	movi	r2,32
  806114:	d8800405 	stb	r2,16(sp)
  806118:	b8c00007 	ldb	r3,0(r23)
  80611c:	003c1006 	br	805160 <___vfprintf_internal_r+0x1fc>
  806120:	d9814c17 	ldw	r6,1328(sp)
  806124:	b8c00007 	ldb	r3,0(r23)
  806128:	31800214 	ori	r6,r6,8
  80612c:	d9814c15 	stw	r6,1328(sp)
  806130:	003c0b06 	br	805160 <___vfprintf_internal_r+0x1fc>
  806134:	0007883a 	mov	r3,zero
  806138:	01000244 	movi	r4,9
  80613c:	188002a4 	muli	r2,r3,10
  806140:	b8c00007 	ldb	r3,0(r23)
  806144:	d9814d17 	ldw	r6,1332(sp)
  806148:	bdc00044 	addi	r23,r23,1
  80614c:	d8c14d15 	stw	r3,1332(sp)
  806150:	d9414d17 	ldw	r5,1332(sp)
  806154:	3085883a 	add	r2,r6,r2
  806158:	10fff404 	addi	r3,r2,-48
  80615c:	28bff404 	addi	r2,r5,-48
  806160:	20bff62e 	bgeu	r4,r2,80613c <___vfprintf_internal_r+0x11d8>
  806164:	d8c14a15 	stw	r3,1320(sp)
  806168:	003bff06 	br	805168 <___vfprintf_internal_r+0x204>
  80616c:	d9414c17 	ldw	r5,1328(sp)
  806170:	b8c00007 	ldb	r3,0(r23)
  806174:	29402014 	ori	r5,r5,128
  806178:	d9414c15 	stw	r5,1328(sp)
  80617c:	003bf806 	br	805160 <___vfprintf_internal_r+0x1fc>
  806180:	b8c00007 	ldb	r3,0(r23)
  806184:	00800a84 	movi	r2,42
  806188:	bdc00044 	addi	r23,r23,1
  80618c:	18831526 	beq	r3,r2,806de4 <___vfprintf_internal_r+0x1e80>
  806190:	d8c14d15 	stw	r3,1332(sp)
  806194:	18bff404 	addi	r2,r3,-48
  806198:	00c00244 	movi	r3,9
  80619c:	18827836 	bltu	r3,r2,806b80 <___vfprintf_internal_r+0x1c1c>
  8061a0:	000d883a 	mov	r6,zero
  8061a4:	308002a4 	muli	r2,r6,10
  8061a8:	b9800007 	ldb	r6,0(r23)
  8061ac:	d9414d17 	ldw	r5,1332(sp)
  8061b0:	bdc00044 	addi	r23,r23,1
  8061b4:	d9814d15 	stw	r6,1332(sp)
  8061b8:	d9014d17 	ldw	r4,1332(sp)
  8061bc:	1145883a 	add	r2,r2,r5
  8061c0:	11bff404 	addi	r6,r2,-48
  8061c4:	20bff404 	addi	r2,r4,-48
  8061c8:	18bff62e 	bgeu	r3,r2,8061a4 <___vfprintf_internal_r+0x1240>
  8061cc:	3027883a 	mov	r19,r6
  8061d0:	303be50e 	bge	r6,zero,805168 <___vfprintf_internal_r+0x204>
  8061d4:	04ffffc4 	movi	r19,-1
  8061d8:	003be306 	br	805168 <___vfprintf_internal_r+0x204>
  8061dc:	d8000405 	stb	zero,16(sp)
  8061e0:	39800017 	ldw	r6,0(r7)
  8061e4:	39c00104 	addi	r7,r7,4
  8061e8:	d9c14015 	stw	r7,1280(sp)
  8061ec:	d9814115 	stw	r6,1284(sp)
  8061f0:	3001c926 	beq	r6,zero,806918 <___vfprintf_internal_r+0x19b4>
  8061f4:	98000e16 	blt	r19,zero,806230 <___vfprintf_internal_r+0x12cc>
  8061f8:	d9014117 	ldw	r4,1284(sp)
  8061fc:	000b883a 	mov	r5,zero
  806200:	980d883a 	mov	r6,r19
  806204:	08094a00 	call	8094a0 <memchr>
  806208:	10025926 	beq	r2,zero,806b70 <___vfprintf_internal_r+0x1c0c>
  80620c:	d8c14117 	ldw	r3,1284(sp)
  806210:	10cfc83a 	sub	r7,r2,r3
  806214:	99c19e16 	blt	r19,r7,806890 <___vfprintf_internal_r+0x192c>
  806218:	d9c14515 	stw	r7,1300(sp)
  80621c:	38000916 	blt	r7,zero,806244 <___vfprintf_internal_r+0x12e0>
  806220:	d8014615 	stw	zero,1304(sp)
  806224:	003df106 	br	8059ec <___vfprintf_internal_r+0xa88>
  806228:	b8c00007 	ldb	r3,0(r23)
  80622c:	003bcc06 	br	805160 <___vfprintf_internal_r+0x1fc>
  806230:	d9014117 	ldw	r4,1284(sp)
  806234:	08049640 	call	804964 <strlen>
  806238:	d8814515 	stw	r2,1300(sp)
  80623c:	100f883a 	mov	r7,r2
  806240:	103ff70e 	bge	r2,zero,806220 <___vfprintf_internal_r+0x12bc>
  806244:	d8014515 	stw	zero,1300(sp)
  806248:	d8014615 	stw	zero,1304(sp)
  80624c:	003de706 	br	8059ec <___vfprintf_internal_r+0xa88>
  806250:	20c03fcc 	andi	r3,r4,255
  806254:	00800044 	movi	r2,1
  806258:	18802d26 	beq	r3,r2,806310 <___vfprintf_internal_r+0x13ac>
  80625c:	18800e36 	bltu	r3,r2,806298 <___vfprintf_internal_r+0x1334>
  806260:	00800084 	movi	r2,2
  806264:	1880fa26 	beq	r3,r2,806650 <___vfprintf_internal_r+0x16ec>
  806268:	01002074 	movhi	r4,129
  80626c:	2105e304 	addi	r4,r4,6028
  806270:	08049640 	call	804964 <strlen>
  806274:	100f883a 	mov	r7,r2
  806278:	dcc14515 	stw	r19,1300(sp)
  80627c:	9880010e 	bge	r19,r2,806284 <___vfprintf_internal_r+0x1320>
  806280:	d8814515 	stw	r2,1300(sp)
  806284:	00802074 	movhi	r2,129
  806288:	1085e304 	addi	r2,r2,6028
  80628c:	dcc14615 	stw	r19,1304(sp)
  806290:	d8814115 	stw	r2,1284(sp)
  806294:	003dd506 	br	8059ec <___vfprintf_internal_r+0xa88>
  806298:	d9401904 	addi	r5,sp,100
  80629c:	dd000f04 	addi	r20,sp,60
  8062a0:	d9414115 	stw	r5,1284(sp)
  8062a4:	880a977a 	slli	r5,r17,29
  8062a8:	d9814117 	ldw	r6,1284(sp)
  8062ac:	8004d0fa 	srli	r2,r16,3
  8062b0:	8806d0fa 	srli	r3,r17,3
  8062b4:	810001cc 	andi	r4,r16,7
  8062b8:	2884b03a 	or	r2,r5,r2
  8062bc:	31bfffc4 	addi	r6,r6,-1
  8062c0:	21000c04 	addi	r4,r4,48
  8062c4:	d9814115 	stw	r6,1284(sp)
  8062c8:	10cab03a 	or	r5,r2,r3
  8062cc:	31000005 	stb	r4,0(r6)
  8062d0:	1021883a 	mov	r16,r2
  8062d4:	1823883a 	mov	r17,r3
  8062d8:	283ff21e 	bne	r5,zero,8062a4 <___vfprintf_internal_r+0x1340>
  8062dc:	d8c14c17 	ldw	r3,1328(sp)
  8062e0:	1880004c 	andi	r2,r3,1
  8062e4:	1005003a 	cmpeq	r2,r2,zero
  8062e8:	103db91e 	bne	r2,zero,8059d0 <___vfprintf_internal_r+0xa6c>
  8062ec:	20803fcc 	andi	r2,r4,255
  8062f0:	1080201c 	xori	r2,r2,128
  8062f4:	10bfe004 	addi	r2,r2,-128
  8062f8:	00c00c04 	movi	r3,48
  8062fc:	10fdb426 	beq	r2,r3,8059d0 <___vfprintf_internal_r+0xa6c>
  806300:	31bfffc4 	addi	r6,r6,-1
  806304:	d9814115 	stw	r6,1284(sp)
  806308:	30c00005 	stb	r3,0(r6)
  80630c:	003db006 	br	8059d0 <___vfprintf_internal_r+0xa6c>
  806310:	88800068 	cmpgeui	r2,r17,1
  806314:	10002c1e 	bne	r2,zero,8063c8 <___vfprintf_internal_r+0x1464>
  806318:	8800021e 	bne	r17,zero,806324 <___vfprintf_internal_r+0x13c0>
  80631c:	00800244 	movi	r2,9
  806320:	14002936 	bltu	r2,r16,8063c8 <___vfprintf_internal_r+0x1464>
  806324:	d90018c4 	addi	r4,sp,99
  806328:	dd000f04 	addi	r20,sp,60
  80632c:	d9014115 	stw	r4,1284(sp)
  806330:	d9014117 	ldw	r4,1284(sp)
  806334:	80800c04 	addi	r2,r16,48
  806338:	20800005 	stb	r2,0(r4)
  80633c:	003da406 	br	8059d0 <___vfprintf_internal_r+0xa6c>
  806340:	dc400d17 	ldw	r17,52(sp)
  806344:	07002074 	movhi	fp,129
  806348:	e705ea84 	addi	fp,fp,6058
  80634c:	9425883a 	add	r18,r18,r16
  806350:	8c400044 	addi	r17,r17,1
  806354:	008001c4 	movi	r2,7
  806358:	1f000015 	stw	fp,0(r3)
  80635c:	1c000115 	stw	r16,4(r3)
  806360:	dc800e15 	stw	r18,56(sp)
  806364:	dc400d15 	stw	r17,52(sp)
  806368:	147de216 	blt	r2,r17,805af4 <___vfprintf_internal_r+0xb90>
  80636c:	18c00204 	addi	r3,r3,8
  806370:	003c7a06 	br	80555c <___vfprintf_internal_r+0x5f8>
  806374:	01000084 	movi	r4,2
  806378:	d8000405 	stb	zero,16(sp)
  80637c:	003d8706 	br	80599c <___vfprintf_internal_r+0xa38>
  806380:	d9814c17 	ldw	r6,1328(sp)
  806384:	30c4703a 	and	r2,r6,r3
  806388:	1005003a 	cmpeq	r2,r2,zero
  80638c:	103cb926 	beq	r2,zero,805674 <___vfprintf_internal_r+0x710>
  806390:	d9014117 	ldw	r4,1284(sp)
  806394:	94800044 	addi	r18,r18,1
  806398:	8c400044 	addi	r17,r17,1
  80639c:	008001c4 	movi	r2,7
  8063a0:	a9000015 	stw	r4,0(r21)
  8063a4:	a8c00115 	stw	r3,4(r21)
  8063a8:	dc800e15 	stw	r18,56(sp)
  8063ac:	dc400d15 	stw	r17,52(sp)
  8063b0:	147e6616 	blt	r2,r17,805d4c <___vfprintf_internal_r+0xde8>
  8063b4:	acc00204 	addi	r19,r21,8
  8063b8:	003cd706 	br	805718 <___vfprintf_internal_r+0x7b4>
  8063bc:	07002074 	movhi	fp,129
  8063c0:	e705ea84 	addi	fp,fp,6058
  8063c4:	003c4f06 	br	805504 <___vfprintf_internal_r+0x5a0>
  8063c8:	dd000f04 	addi	r20,sp,60
  8063cc:	dc801904 	addi	r18,sp,100
  8063d0:	8009883a 	mov	r4,r16
  8063d4:	880b883a 	mov	r5,r17
  8063d8:	01800284 	movi	r6,10
  8063dc:	000f883a 	mov	r7,zero
  8063e0:	080b9d40 	call	80b9d4 <__umoddi3>
  8063e4:	12000c04 	addi	r8,r2,48
  8063e8:	94bfffc4 	addi	r18,r18,-1
  8063ec:	8009883a 	mov	r4,r16
  8063f0:	880b883a 	mov	r5,r17
  8063f4:	01800284 	movi	r6,10
  8063f8:	000f883a 	mov	r7,zero
  8063fc:	92000005 	stb	r8,0(r18)
  806400:	080b3f80 	call	80b3f8 <__udivdi3>
  806404:	1009883a 	mov	r4,r2
  806408:	1021883a 	mov	r16,r2
  80640c:	18800068 	cmpgeui	r2,r3,1
  806410:	1823883a 	mov	r17,r3
  806414:	103fee1e 	bne	r2,zero,8063d0 <___vfprintf_internal_r+0x146c>
  806418:	1800021e 	bne	r3,zero,806424 <___vfprintf_internal_r+0x14c0>
  80641c:	00800244 	movi	r2,9
  806420:	113feb36 	bltu	r2,r4,8063d0 <___vfprintf_internal_r+0x146c>
  806424:	94bfffc4 	addi	r18,r18,-1
  806428:	dc814115 	stw	r18,1284(sp)
  80642c:	003fc006 	br	806330 <___vfprintf_internal_r+0x13cc>
  806430:	d9014c17 	ldw	r4,1328(sp)
  806434:	2080004c 	andi	r2,r4,1
  806438:	10009a1e 	bne	r2,zero,8066a4 <___vfprintf_internal_r+0x1740>
  80643c:	d9401904 	addi	r5,sp,100
  806440:	dd000f04 	addi	r20,sp,60
  806444:	d9414115 	stw	r5,1284(sp)
  806448:	003d6106 	br	8059d0 <___vfprintf_internal_r+0xa6c>
  80644c:	d9014f17 	ldw	r4,1340(sp)
  806450:	b00b883a 	mov	r5,r22
  806454:	d9800c04 	addi	r6,sp,48
  806458:	0804f0c0 	call	804f0c <__sprint_r>
  80645c:	103c791e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  806460:	dc800e17 	ldw	r18,56(sp)
  806464:	d8c01904 	addi	r3,sp,100
  806468:	003cff06 	br	805868 <___vfprintf_internal_r+0x904>
  80646c:	d8c14c17 	ldw	r3,1328(sp)
  806470:	1880040c 	andi	r2,r3,16
  806474:	1000711e 	bne	r2,zero,80663c <___vfprintf_internal_r+0x16d8>
  806478:	d9014c17 	ldw	r4,1328(sp)
  80647c:	2080100c 	andi	r2,r4,64
  806480:	10006e26 	beq	r2,zero,80663c <___vfprintf_internal_r+0x16d8>
  806484:	3c00000b 	ldhu	r16,0(r7)
  806488:	0023883a 	mov	r17,zero
  80648c:	39c00104 	addi	r7,r7,4
  806490:	d9c14015 	stw	r7,1280(sp)
  806494:	003f0006 	br	806098 <___vfprintf_internal_r+0x1134>
  806498:	dc400d17 	ldw	r17,52(sp)
  80649c:	07002074 	movhi	fp,129
  8064a0:	e705ea84 	addi	fp,fp,6058
  8064a4:	9425883a 	add	r18,r18,r16
  8064a8:	8c400044 	addi	r17,r17,1
  8064ac:	008001c4 	movi	r2,7
  8064b0:	1f000015 	stw	fp,0(r3)
  8064b4:	1c000115 	stw	r16,4(r3)
  8064b8:	dc800e15 	stw	r18,56(sp)
  8064bc:	dc400d15 	stw	r17,52(sp)
  8064c0:	147d7616 	blt	r2,r17,805a9c <___vfprintf_internal_r+0xb38>
  8064c4:	18c00204 	addi	r3,r3,8
  8064c8:	003d7b06 	br	805ab8 <___vfprintf_internal_r+0xb54>
  8064cc:	dc800e17 	ldw	r18,56(sp)
  8064d0:	dc400d17 	ldw	r17,52(sp)
  8064d4:	07002074 	movhi	fp,129
  8064d8:	e705ee84 	addi	fp,fp,6074
  8064dc:	003bc006 	br	8053e0 <___vfprintf_internal_r+0x47c>
  8064e0:	d9014f17 	ldw	r4,1340(sp)
  8064e4:	b00b883a 	mov	r5,r22
  8064e8:	d9800c04 	addi	r6,sp,48
  8064ec:	0804f0c0 	call	804f0c <__sprint_r>
  8064f0:	103c541e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8064f4:	dc800e17 	ldw	r18,56(sp)
  8064f8:	d8c01904 	addi	r3,sp,100
  8064fc:	003ce906 	br	8058a4 <___vfprintf_internal_r+0x940>
  806500:	3c000017 	ldw	r16,0(r7)
  806504:	0009883a 	mov	r4,zero
  806508:	39c00104 	addi	r7,r7,4
  80650c:	0023883a 	mov	r17,zero
  806510:	d9c14015 	stw	r7,1280(sp)
  806514:	d8000405 	stb	zero,16(sp)
  806518:	003d2006 	br	80599c <___vfprintf_internal_r+0xa38>
  80651c:	38800017 	ldw	r2,0(r7)
  806520:	39c00104 	addi	r7,r7,4
  806524:	d9c14015 	stw	r7,1280(sp)
  806528:	1023d7fa 	srai	r17,r2,31
  80652c:	1021883a 	mov	r16,r2
  806530:	003d1806 	br	805994 <___vfprintf_internal_r+0xa30>
  806534:	3c000017 	ldw	r16,0(r7)
  806538:	01000044 	movi	r4,1
  80653c:	39c00104 	addi	r7,r7,4
  806540:	0023883a 	mov	r17,zero
  806544:	d9c14015 	stw	r7,1280(sp)
  806548:	d8000405 	stb	zero,16(sp)
  80654c:	003d1306 	br	80599c <___vfprintf_internal_r+0xa38>
  806550:	00802074 	movhi	r2,129
  806554:	1085ea04 	addi	r2,r2,6056
  806558:	94800044 	addi	r18,r18,1
  80655c:	8c400044 	addi	r17,r17,1
  806560:	a8800015 	stw	r2,0(r21)
  806564:	00c00044 	movi	r3,1
  806568:	008001c4 	movi	r2,7
  80656c:	a8c00115 	stw	r3,4(r21)
  806570:	dc800e15 	stw	r18,56(sp)
  806574:	dc400d15 	stw	r17,52(sp)
  806578:	1440ca16 	blt	r2,r17,8068a4 <___vfprintf_internal_r+0x1940>
  80657c:	a8c00204 	addi	r3,r21,8
  806580:	2000061e 	bne	r4,zero,80659c <___vfprintf_internal_r+0x1638>
  806584:	d9414717 	ldw	r5,1308(sp)
  806588:	2800041e 	bne	r5,zero,80659c <___vfprintf_internal_r+0x1638>
  80658c:	d9814c17 	ldw	r6,1328(sp)
  806590:	3080004c 	andi	r2,r6,1
  806594:	1005003a 	cmpeq	r2,r2,zero
  806598:	103bf01e 	bne	r2,zero,80555c <___vfprintf_internal_r+0x5f8>
  80659c:	00800044 	movi	r2,1
  8065a0:	dc400d17 	ldw	r17,52(sp)
  8065a4:	18800115 	stw	r2,4(r3)
  8065a8:	d8814917 	ldw	r2,1316(sp)
  8065ac:	94800044 	addi	r18,r18,1
  8065b0:	8c400044 	addi	r17,r17,1
  8065b4:	18800015 	stw	r2,0(r3)
  8065b8:	008001c4 	movi	r2,7
  8065bc:	dc800e15 	stw	r18,56(sp)
  8065c0:	dc400d15 	stw	r17,52(sp)
  8065c4:	1440ca16 	blt	r2,r17,8068f0 <___vfprintf_internal_r+0x198c>
  8065c8:	18c00204 	addi	r3,r3,8
  8065cc:	0121c83a 	sub	r16,zero,r4
  8065d0:	0400500e 	bge	zero,r16,806714 <___vfprintf_internal_r+0x17b0>
  8065d4:	00800404 	movi	r2,16
  8065d8:	1400800e 	bge	r2,r16,8067dc <___vfprintf_internal_r+0x1878>
  8065dc:	1027883a 	mov	r19,r2
  8065e0:	07002074 	movhi	fp,129
  8065e4:	e705ea84 	addi	fp,fp,6058
  8065e8:	050001c4 	movi	r20,7
  8065ec:	00000306 	br	8065fc <___vfprintf_internal_r+0x1698>
  8065f0:	18c00204 	addi	r3,r3,8
  8065f4:	843ffc04 	addi	r16,r16,-16
  8065f8:	9c007a0e 	bge	r19,r16,8067e4 <___vfprintf_internal_r+0x1880>
  8065fc:	94800404 	addi	r18,r18,16
  806600:	8c400044 	addi	r17,r17,1
  806604:	1f000015 	stw	fp,0(r3)
  806608:	1cc00115 	stw	r19,4(r3)
  80660c:	dc800e15 	stw	r18,56(sp)
  806610:	dc400d15 	stw	r17,52(sp)
  806614:	a47ff60e 	bge	r20,r17,8065f0 <___vfprintf_internal_r+0x168c>
  806618:	d9014f17 	ldw	r4,1340(sp)
  80661c:	b00b883a 	mov	r5,r22
  806620:	d9800c04 	addi	r6,sp,48
  806624:	0804f0c0 	call	804f0c <__sprint_r>
  806628:	103c061e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  80662c:	dc800e17 	ldw	r18,56(sp)
  806630:	dc400d17 	ldw	r17,52(sp)
  806634:	d8c01904 	addi	r3,sp,100
  806638:	003fee06 	br	8065f4 <___vfprintf_internal_r+0x1690>
  80663c:	3c000017 	ldw	r16,0(r7)
  806640:	0023883a 	mov	r17,zero
  806644:	39c00104 	addi	r7,r7,4
  806648:	d9c14015 	stw	r7,1280(sp)
  80664c:	003e9206 	br	806098 <___vfprintf_internal_r+0x1134>
  806650:	d9401904 	addi	r5,sp,100
  806654:	dd000f04 	addi	r20,sp,60
  806658:	d9414115 	stw	r5,1284(sp)
  80665c:	d9814417 	ldw	r6,1296(sp)
  806660:	880a973a 	slli	r5,r17,28
  806664:	8004d13a 	srli	r2,r16,4
  806668:	810003cc 	andi	r4,r16,15
  80666c:	3109883a 	add	r4,r6,r4
  806670:	2884b03a 	or	r2,r5,r2
  806674:	21400003 	ldbu	r5,0(r4)
  806678:	d9014117 	ldw	r4,1284(sp)
  80667c:	8806d13a 	srli	r3,r17,4
  806680:	1021883a 	mov	r16,r2
  806684:	213fffc4 	addi	r4,r4,-1
  806688:	d9014115 	stw	r4,1284(sp)
  80668c:	d9814117 	ldw	r6,1284(sp)
  806690:	10c8b03a 	or	r4,r2,r3
  806694:	1823883a 	mov	r17,r3
  806698:	31400005 	stb	r5,0(r6)
  80669c:	203fef1e 	bne	r4,zero,80665c <___vfprintf_internal_r+0x16f8>
  8066a0:	003ccb06 	br	8059d0 <___vfprintf_internal_r+0xa6c>
  8066a4:	00800c04 	movi	r2,48
  8066a8:	d98018c4 	addi	r6,sp,99
  8066ac:	dd000f04 	addi	r20,sp,60
  8066b0:	d88018c5 	stb	r2,99(sp)
  8066b4:	d9814115 	stw	r6,1284(sp)
  8066b8:	003cc506 	br	8059d0 <___vfprintf_internal_r+0xa6c>
  8066bc:	dc400d17 	ldw	r17,52(sp)
  8066c0:	07002074 	movhi	fp,129
  8066c4:	e705ee84 	addi	fp,fp,6074
  8066c8:	003bc706 	br	8055e8 <___vfprintf_internal_r+0x684>
  8066cc:	d9414c17 	ldw	r5,1328(sp)
  8066d0:	2880040c 	andi	r2,r5,16
  8066d4:	10007c26 	beq	r2,zero,8068c8 <___vfprintf_internal_r+0x1964>
  8066d8:	38800017 	ldw	r2,0(r7)
  8066dc:	39c00104 	addi	r7,r7,4
  8066e0:	d9c14015 	stw	r7,1280(sp)
  8066e4:	d9814b17 	ldw	r6,1324(sp)
  8066e8:	d9c14017 	ldw	r7,1280(sp)
  8066ec:	11800015 	stw	r6,0(r2)
  8066f0:	003a7806 	br	8050d4 <___vfprintf_internal_r+0x170>
  8066f4:	d9014f17 	ldw	r4,1340(sp)
  8066f8:	b00b883a 	mov	r5,r22
  8066fc:	d9800c04 	addi	r6,sp,48
  806700:	0804f0c0 	call	804f0c <__sprint_r>
  806704:	103bcf1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  806708:	dc800e17 	ldw	r18,56(sp)
  80670c:	dc400d17 	ldw	r17,52(sp)
  806710:	d8c01904 	addi	r3,sp,100
  806714:	d9014717 	ldw	r4,1308(sp)
  806718:	d9414117 	ldw	r5,1284(sp)
  80671c:	8c400044 	addi	r17,r17,1
  806720:	9125883a 	add	r18,r18,r4
  806724:	008001c4 	movi	r2,7
  806728:	19400015 	stw	r5,0(r3)
  80672c:	19000115 	stw	r4,4(r3)
  806730:	dc800e15 	stw	r18,56(sp)
  806734:	dc400d15 	stw	r17,52(sp)
  806738:	147cee16 	blt	r2,r17,805af4 <___vfprintf_internal_r+0xb90>
  80673c:	18c00204 	addi	r3,r3,8
  806740:	003b8606 	br	80555c <___vfprintf_internal_r+0x5f8>
  806744:	38c00017 	ldw	r3,0(r7)
  806748:	39000204 	addi	r4,r7,8
  80674c:	d9014015 	stw	r4,1280(sp)
  806750:	d8c14215 	stw	r3,1288(sp)
  806754:	39c00117 	ldw	r7,4(r7)
  806758:	d9c14315 	stw	r7,1292(sp)
  80675c:	003e2006 	br	805fe0 <___vfprintf_internal_r+0x107c>
  806760:	0005883a 	mov	r2,zero
  806764:	1409c83a 	sub	r4,r2,r16
  806768:	1105803a 	cmpltu	r2,r2,r4
  80676c:	044bc83a 	sub	r5,zero,r17
  806770:	2885c83a 	sub	r2,r5,r2
  806774:	2021883a 	mov	r16,r4
  806778:	1023883a 	mov	r17,r2
  80677c:	01000044 	movi	r4,1
  806780:	00800b44 	movi	r2,45
  806784:	d8800405 	stb	r2,16(sp)
  806788:	003c8406 	br	80599c <___vfprintf_internal_r+0xa38>
  80678c:	d9014f17 	ldw	r4,1340(sp)
  806790:	b00b883a 	mov	r5,r22
  806794:	d9800c04 	addi	r6,sp,48
  806798:	0804f0c0 	call	804f0c <__sprint_r>
  80679c:	103ba91e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8067a0:	dc800e17 	ldw	r18,56(sp)
  8067a4:	dc400d17 	ldw	r17,52(sp)
  8067a8:	d9000517 	ldw	r4,20(sp)
  8067ac:	d9401904 	addi	r5,sp,100
  8067b0:	003da706 	br	805e50 <___vfprintf_internal_r+0xeec>
  8067b4:	d9014f17 	ldw	r4,1340(sp)
  8067b8:	b00b883a 	mov	r5,r22
  8067bc:	d9800c04 	addi	r6,sp,48
  8067c0:	0804f0c0 	call	804f0c <__sprint_r>
  8067c4:	103b9f1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8067c8:	dc800e17 	ldw	r18,56(sp)
  8067cc:	dc400d17 	ldw	r17,52(sp)
  8067d0:	d9000517 	ldw	r4,20(sp)
  8067d4:	d8c01904 	addi	r3,sp,100
  8067d8:	003d9106 	br	805e20 <___vfprintf_internal_r+0xebc>
  8067dc:	07002074 	movhi	fp,129
  8067e0:	e705ea84 	addi	fp,fp,6058
  8067e4:	9425883a 	add	r18,r18,r16
  8067e8:	8c400044 	addi	r17,r17,1
  8067ec:	008001c4 	movi	r2,7
  8067f0:	1f000015 	stw	fp,0(r3)
  8067f4:	1c000115 	stw	r16,4(r3)
  8067f8:	dc800e15 	stw	r18,56(sp)
  8067fc:	dc400d15 	stw	r17,52(sp)
  806800:	147fbc16 	blt	r2,r17,8066f4 <___vfprintf_internal_r+0x1790>
  806804:	18c00204 	addi	r3,r3,8
  806808:	003fc206 	br	806714 <___vfprintf_internal_r+0x17b0>
  80680c:	d9014f17 	ldw	r4,1340(sp)
  806810:	b00b883a 	mov	r5,r22
  806814:	d9800c04 	addi	r6,sp,48
  806818:	0804f0c0 	call	804f0c <__sprint_r>
  80681c:	103b891e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  806820:	dc800e17 	ldw	r18,56(sp)
  806824:	d9000517 	ldw	r4,20(sp)
  806828:	d8c01904 	addi	r3,sp,100
  80682c:	003d0206 	br	805c38 <___vfprintf_internal_r+0xcd4>
  806830:	07002074 	movhi	fp,129
  806834:	e705ea84 	addi	fp,fp,6058
  806838:	003be406 	br	8057cc <___vfprintf_internal_r+0x868>
  80683c:	00802074 	movhi	r2,129
  806840:	1085d904 	addi	r2,r2,5988
  806844:	d8814115 	stw	r2,1284(sp)
  806848:	003df506 	br	806020 <___vfprintf_internal_r+0x10bc>
  80684c:	d9014217 	ldw	r4,1288(sp)
  806850:	d9414317 	ldw	r5,1292(sp)
  806854:	080ad2c0 	call	80ad2c <__isnand>
  806858:	10003926 	beq	r2,zero,806940 <___vfprintf_internal_r+0x19dc>
  80685c:	d9414d17 	ldw	r5,1332(sp)
  806860:	008011c4 	movi	r2,71
  806864:	1140ce16 	blt	r2,r5,806ba0 <___vfprintf_internal_r+0x1c3c>
  806868:	01802074 	movhi	r6,129
  80686c:	3185da04 	addi	r6,r6,5992
  806870:	d9814115 	stw	r6,1284(sp)
  806874:	003dea06 	br	806020 <___vfprintf_internal_r+0x10bc>
  806878:	d9014c17 	ldw	r4,1328(sp)
  80687c:	bdc00044 	addi	r23,r23,1
  806880:	b8c00007 	ldb	r3,0(r23)
  806884:	21000814 	ori	r4,r4,32
  806888:	d9014c15 	stw	r4,1328(sp)
  80688c:	003a3406 	br	805160 <___vfprintf_internal_r+0x1fc>
  806890:	dcc14515 	stw	r19,1300(sp)
  806894:	98011016 	blt	r19,zero,806cd8 <___vfprintf_internal_r+0x1d74>
  806898:	980f883a 	mov	r7,r19
  80689c:	d8014615 	stw	zero,1304(sp)
  8068a0:	003c5206 	br	8059ec <___vfprintf_internal_r+0xa88>
  8068a4:	d9014f17 	ldw	r4,1340(sp)
  8068a8:	b00b883a 	mov	r5,r22
  8068ac:	d9800c04 	addi	r6,sp,48
  8068b0:	0804f0c0 	call	804f0c <__sprint_r>
  8068b4:	103b631e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  8068b8:	dc800e17 	ldw	r18,56(sp)
  8068bc:	d9000517 	ldw	r4,20(sp)
  8068c0:	d8c01904 	addi	r3,sp,100
  8068c4:	003f2e06 	br	806580 <___vfprintf_internal_r+0x161c>
  8068c8:	d8c14c17 	ldw	r3,1328(sp)
  8068cc:	1880100c 	andi	r2,r3,64
  8068d0:	1000a026 	beq	r2,zero,806b54 <___vfprintf_internal_r+0x1bf0>
  8068d4:	38800017 	ldw	r2,0(r7)
  8068d8:	39c00104 	addi	r7,r7,4
  8068dc:	d9c14015 	stw	r7,1280(sp)
  8068e0:	d9014b17 	ldw	r4,1324(sp)
  8068e4:	d9c14017 	ldw	r7,1280(sp)
  8068e8:	1100000d 	sth	r4,0(r2)
  8068ec:	0039f906 	br	8050d4 <___vfprintf_internal_r+0x170>
  8068f0:	d9014f17 	ldw	r4,1340(sp)
  8068f4:	b00b883a 	mov	r5,r22
  8068f8:	d9800c04 	addi	r6,sp,48
  8068fc:	0804f0c0 	call	804f0c <__sprint_r>
  806900:	103b501e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  806904:	dc800e17 	ldw	r18,56(sp)
  806908:	dc400d17 	ldw	r17,52(sp)
  80690c:	d9000517 	ldw	r4,20(sp)
  806910:	d8c01904 	addi	r3,sp,100
  806914:	003f2d06 	br	8065cc <___vfprintf_internal_r+0x1668>
  806918:	00800184 	movi	r2,6
  80691c:	14c09a36 	bltu	r2,r19,806b88 <___vfprintf_internal_r+0x1c24>
  806920:	dcc14515 	stw	r19,1300(sp)
  806924:	9800010e 	bge	r19,zero,80692c <___vfprintf_internal_r+0x19c8>
  806928:	d8014515 	stw	zero,1300(sp)
  80692c:	00802074 	movhi	r2,129
  806930:	1085dc04 	addi	r2,r2,6000
  806934:	980f883a 	mov	r7,r19
  806938:	d8814115 	stw	r2,1284(sp)
  80693c:	003a7806 	br	805320 <___vfprintf_internal_r+0x3bc>
  806940:	00bfffc4 	movi	r2,-1
  806944:	9880e226 	beq	r19,r2,806cd0 <___vfprintf_internal_r+0x1d6c>
  806948:	d9414d17 	ldw	r5,1332(sp)
  80694c:	008019c4 	movi	r2,103
  806950:	2880dc26 	beq	r5,r2,806cc4 <___vfprintf_internal_r+0x1d60>
  806954:	008011c4 	movi	r2,71
  806958:	2880da26 	beq	r5,r2,806cc4 <___vfprintf_internal_r+0x1d60>
  80695c:	d9414c17 	ldw	r5,1328(sp)
  806960:	d9014317 	ldw	r4,1292(sp)
  806964:	d9814217 	ldw	r6,1288(sp)
  806968:	29404014 	ori	r5,r5,256
  80696c:	d9414c15 	stw	r5,1328(sp)
  806970:	2000cc16 	blt	r4,zero,806ca4 <___vfprintf_internal_r+0x1d40>
  806974:	3021883a 	mov	r16,r6
  806978:	2023883a 	mov	r17,r4
  80697c:	0039883a 	mov	fp,zero
  806980:	d9414d17 	ldw	r5,1332(sp)
  806984:	00801984 	movi	r2,102
  806988:	2880b726 	beq	r5,r2,806c68 <___vfprintf_internal_r+0x1d04>
  80698c:	00801184 	movi	r2,70
  806990:	2880b526 	beq	r5,r2,806c68 <___vfprintf_internal_r+0x1d04>
  806994:	00801944 	movi	r2,101
  806998:	2880c826 	beq	r5,r2,806cbc <___vfprintf_internal_r+0x1d58>
  80699c:	00801144 	movi	r2,69
  8069a0:	2880c626 	beq	r5,r2,806cbc <___vfprintf_internal_r+0x1d58>
  8069a4:	9829883a 	mov	r20,r19
  8069a8:	d9014f17 	ldw	r4,1340(sp)
  8069ac:	d8800504 	addi	r2,sp,20
  8069b0:	880d883a 	mov	r6,r17
  8069b4:	d8800115 	stw	r2,4(sp)
  8069b8:	d8c00604 	addi	r3,sp,24
  8069bc:	d8800704 	addi	r2,sp,28
  8069c0:	800b883a 	mov	r5,r16
  8069c4:	01c00084 	movi	r7,2
  8069c8:	d8c00215 	stw	r3,8(sp)
  8069cc:	d8800315 	stw	r2,12(sp)
  8069d0:	dd000015 	stw	r20,0(sp)
  8069d4:	08071880 	call	807188 <_dtoa_r>
  8069d8:	d9814d17 	ldw	r6,1332(sp)
  8069dc:	d8814115 	stw	r2,1284(sp)
  8069e0:	008019c4 	movi	r2,103
  8069e4:	30809526 	beq	r6,r2,806c3c <___vfprintf_internal_r+0x1cd8>
  8069e8:	d8c14d17 	ldw	r3,1332(sp)
  8069ec:	008011c4 	movi	r2,71
  8069f0:	18809226 	beq	r3,r2,806c3c <___vfprintf_internal_r+0x1cd8>
  8069f4:	d9414117 	ldw	r5,1284(sp)
  8069f8:	d9814d17 	ldw	r6,1332(sp)
  8069fc:	00801984 	movi	r2,102
  806a00:	2d25883a 	add	r18,r5,r20
  806a04:	30808626 	beq	r6,r2,806c20 <___vfprintf_internal_r+0x1cbc>
  806a08:	00801184 	movi	r2,70
  806a0c:	30808426 	beq	r6,r2,806c20 <___vfprintf_internal_r+0x1cbc>
  806a10:	000d883a 	mov	r6,zero
  806a14:	000f883a 	mov	r7,zero
  806a18:	880b883a 	mov	r5,r17
  806a1c:	8009883a 	mov	r4,r16
  806a20:	080caa40 	call	80caa4 <__eqdf2>
  806a24:	1000751e 	bne	r2,zero,806bfc <___vfprintf_internal_r+0x1c98>
  806a28:	9005883a 	mov	r2,r18
  806a2c:	dc800715 	stw	r18,28(sp)
  806a30:	d9014117 	ldw	r4,1284(sp)
  806a34:	d9414d17 	ldw	r5,1332(sp)
  806a38:	00c019c4 	movi	r3,103
  806a3c:	1125c83a 	sub	r18,r2,r4
  806a40:	28c06826 	beq	r5,r3,806be4 <___vfprintf_internal_r+0x1c80>
  806a44:	008011c4 	movi	r2,71
  806a48:	28806626 	beq	r5,r2,806be4 <___vfprintf_internal_r+0x1c80>
  806a4c:	d9000517 	ldw	r4,20(sp)
  806a50:	d8c14d17 	ldw	r3,1332(sp)
  806a54:	00801944 	movi	r2,101
  806a58:	10c05516 	blt	r2,r3,806bb0 <___vfprintf_internal_r+0x1c4c>
  806a5c:	213fffc4 	addi	r4,r4,-1
  806a60:	d9000515 	stw	r4,20(sp)
  806a64:	d8c00805 	stb	r3,32(sp)
  806a68:	2021883a 	mov	r16,r4
  806a6c:	2000c116 	blt	r4,zero,806d74 <___vfprintf_internal_r+0x1e10>
  806a70:	00800ac4 	movi	r2,43
  806a74:	d8800845 	stb	r2,33(sp)
  806a78:	00800244 	movi	r2,9
  806a7c:	1400af0e 	bge	r2,r16,806d3c <___vfprintf_internal_r+0x1dd8>
  806a80:	1027883a 	mov	r19,r2
  806a84:	dc400b84 	addi	r17,sp,46
  806a88:	8009883a 	mov	r4,r16
  806a8c:	01400284 	movi	r5,10
  806a90:	080d18c0 	call	80d18c <__modsi3>
  806a94:	10800c04 	addi	r2,r2,48
  806a98:	8c7fffc4 	addi	r17,r17,-1
  806a9c:	8009883a 	mov	r4,r16
  806aa0:	01400284 	movi	r5,10
  806aa4:	88800005 	stb	r2,0(r17)
  806aa8:	080d12c0 	call	80d12c <__divsi3>
  806aac:	1021883a 	mov	r16,r2
  806ab0:	98bff516 	blt	r19,r2,806a88 <___vfprintf_internal_r+0x1b24>
  806ab4:	10c00c04 	addi	r3,r2,48
  806ab8:	d88009c4 	addi	r2,sp,39
  806abc:	108001c4 	addi	r2,r2,7
  806ac0:	897fffc4 	addi	r5,r17,-1
  806ac4:	88ffffc5 	stb	r3,-1(r17)
  806ac8:	2880a72e 	bgeu	r5,r2,806d68 <___vfprintf_internal_r+0x1e04>
  806acc:	1009883a 	mov	r4,r2
  806ad0:	d9800804 	addi	r6,sp,32
  806ad4:	d8c00884 	addi	r3,sp,34
  806ad8:	28800003 	ldbu	r2,0(r5)
  806adc:	29400044 	addi	r5,r5,1
  806ae0:	18800005 	stb	r2,0(r3)
  806ae4:	18c00044 	addi	r3,r3,1
  806ae8:	293ffb36 	bltu	r5,r4,806ad8 <___vfprintf_internal_r+0x1b74>
  806aec:	1987c83a 	sub	r3,r3,r6
  806af0:	00800044 	movi	r2,1
  806af4:	d8c14815 	stw	r3,1312(sp)
  806af8:	90cf883a 	add	r7,r18,r3
  806afc:	1480960e 	bge	r2,r18,806d58 <___vfprintf_internal_r+0x1df4>
  806b00:	39c00044 	addi	r7,r7,1
  806b04:	d9c14515 	stw	r7,1300(sp)
  806b08:	38003416 	blt	r7,zero,806bdc <___vfprintf_internal_r+0x1c78>
  806b0c:	e0803fcc 	andi	r2,fp,255
  806b10:	1080201c 	xori	r2,r2,128
  806b14:	10bfe004 	addi	r2,r2,-128
  806b18:	10004e26 	beq	r2,zero,806c54 <___vfprintf_internal_r+0x1cf0>
  806b1c:	00800b44 	movi	r2,45
  806b20:	dc814715 	stw	r18,1308(sp)
  806b24:	d8014615 	stw	zero,1304(sp)
  806b28:	d8800405 	stb	r2,16(sp)
  806b2c:	003bb106 	br	8059f4 <___vfprintf_internal_r+0xa90>
  806b30:	00800b44 	movi	r2,45
  806b34:	d8800405 	stb	r2,16(sp)
  806b38:	003d3306 	br	806008 <___vfprintf_internal_r+0x10a4>
  806b3c:	d9014f17 	ldw	r4,1340(sp)
  806b40:	b00b883a 	mov	r5,r22
  806b44:	d9800c04 	addi	r6,sp,48
  806b48:	0804f0c0 	call	804f0c <__sprint_r>
  806b4c:	103abd1e 	bne	r2,zero,805644 <___vfprintf_internal_r+0x6e0>
  806b50:	003abb06 	br	805640 <___vfprintf_internal_r+0x6dc>
  806b54:	38800017 	ldw	r2,0(r7)
  806b58:	39c00104 	addi	r7,r7,4
  806b5c:	d9c14015 	stw	r7,1280(sp)
  806b60:	d9414b17 	ldw	r5,1324(sp)
  806b64:	d9c14017 	ldw	r7,1280(sp)
  806b68:	11400015 	stw	r5,0(r2)
  806b6c:	00395906 	br	8050d4 <___vfprintf_internal_r+0x170>
  806b70:	980f883a 	mov	r7,r19
  806b74:	dcc14515 	stw	r19,1300(sp)
  806b78:	d8014615 	stw	zero,1304(sp)
  806b7c:	003b9b06 	br	8059ec <___vfprintf_internal_r+0xa88>
  806b80:	0027883a 	mov	r19,zero
  806b84:	00397806 	br	805168 <___vfprintf_internal_r+0x204>
  806b88:	00c02074 	movhi	r3,129
  806b8c:	18c5dc04 	addi	r3,r3,6000
  806b90:	100f883a 	mov	r7,r2
  806b94:	d8814515 	stw	r2,1300(sp)
  806b98:	d8c14115 	stw	r3,1284(sp)
  806b9c:	0039e006 	br	805320 <___vfprintf_internal_r+0x3bc>
  806ba0:	00802074 	movhi	r2,129
  806ba4:	1085db04 	addi	r2,r2,5996
  806ba8:	d8814115 	stw	r2,1284(sp)
  806bac:	003d1c06 	br	806020 <___vfprintf_internal_r+0x10bc>
  806bb0:	d9414d17 	ldw	r5,1332(sp)
  806bb4:	00801984 	movi	r2,102
  806bb8:	28804926 	beq	r5,r2,806ce0 <___vfprintf_internal_r+0x1d7c>
  806bbc:	200f883a 	mov	r7,r4
  806bc0:	24805716 	blt	r4,r18,806d20 <___vfprintf_internal_r+0x1dbc>
  806bc4:	d9414c17 	ldw	r5,1328(sp)
  806bc8:	2880004c 	andi	r2,r5,1
  806bcc:	10000126 	beq	r2,zero,806bd4 <___vfprintf_internal_r+0x1c70>
  806bd0:	21c00044 	addi	r7,r4,1
  806bd4:	d9c14515 	stw	r7,1300(sp)
  806bd8:	383fcc0e 	bge	r7,zero,806b0c <___vfprintf_internal_r+0x1ba8>
  806bdc:	d8014515 	stw	zero,1300(sp)
  806be0:	003fca06 	br	806b0c <___vfprintf_internal_r+0x1ba8>
  806be4:	d9000517 	ldw	r4,20(sp)
  806be8:	00bfff04 	movi	r2,-4
  806bec:	1100480e 	bge	r2,r4,806d10 <___vfprintf_internal_r+0x1dac>
  806bf0:	99004716 	blt	r19,r4,806d10 <___vfprintf_internal_r+0x1dac>
  806bf4:	d8c14d15 	stw	r3,1332(sp)
  806bf8:	003ff006 	br	806bbc <___vfprintf_internal_r+0x1c58>
  806bfc:	d8800717 	ldw	r2,28(sp)
  806c00:	14bf8b2e 	bgeu	r2,r18,806a30 <___vfprintf_internal_r+0x1acc>
  806c04:	9007883a 	mov	r3,r18
  806c08:	01000c04 	movi	r4,48
  806c0c:	11000005 	stb	r4,0(r2)
  806c10:	10800044 	addi	r2,r2,1
  806c14:	d8800715 	stw	r2,28(sp)
  806c18:	18bffc1e 	bne	r3,r2,806c0c <___vfprintf_internal_r+0x1ca8>
  806c1c:	003f8406 	br	806a30 <___vfprintf_internal_r+0x1acc>
  806c20:	d8814117 	ldw	r2,1284(sp)
  806c24:	10c00007 	ldb	r3,0(r2)
  806c28:	00800c04 	movi	r2,48
  806c2c:	18805b26 	beq	r3,r2,806d9c <___vfprintf_internal_r+0x1e38>
  806c30:	d9000517 	ldw	r4,20(sp)
  806c34:	9125883a 	add	r18,r18,r4
  806c38:	003f7506 	br	806a10 <___vfprintf_internal_r+0x1aac>
  806c3c:	d9014c17 	ldw	r4,1328(sp)
  806c40:	2080004c 	andi	r2,r4,1
  806c44:	1005003a 	cmpeq	r2,r2,zero
  806c48:	103f6a26 	beq	r2,zero,8069f4 <___vfprintf_internal_r+0x1a90>
  806c4c:	d8800717 	ldw	r2,28(sp)
  806c50:	003f7706 	br	806a30 <___vfprintf_internal_r+0x1acc>
  806c54:	d9c14515 	stw	r7,1300(sp)
  806c58:	38004d16 	blt	r7,zero,806d90 <___vfprintf_internal_r+0x1e2c>
  806c5c:	dc814715 	stw	r18,1308(sp)
  806c60:	d8014615 	stw	zero,1304(sp)
  806c64:	003b6106 	br	8059ec <___vfprintf_internal_r+0xa88>
  806c68:	d9014f17 	ldw	r4,1340(sp)
  806c6c:	d8800504 	addi	r2,sp,20
  806c70:	d8800115 	stw	r2,4(sp)
  806c74:	d8c00604 	addi	r3,sp,24
  806c78:	d8800704 	addi	r2,sp,28
  806c7c:	800b883a 	mov	r5,r16
  806c80:	880d883a 	mov	r6,r17
  806c84:	01c000c4 	movi	r7,3
  806c88:	d8c00215 	stw	r3,8(sp)
  806c8c:	d8800315 	stw	r2,12(sp)
  806c90:	dcc00015 	stw	r19,0(sp)
  806c94:	9829883a 	mov	r20,r19
  806c98:	08071880 	call	807188 <_dtoa_r>
  806c9c:	d8814115 	stw	r2,1284(sp)
  806ca0:	003f5106 	br	8069e8 <___vfprintf_internal_r+0x1a84>
  806ca4:	d8c14217 	ldw	r3,1288(sp)
  806ca8:	d9014317 	ldw	r4,1292(sp)
  806cac:	07000b44 	movi	fp,45
  806cb0:	1821883a 	mov	r16,r3
  806cb4:	2460003c 	xorhi	r17,r4,32768
  806cb8:	003f3106 	br	806980 <___vfprintf_internal_r+0x1a1c>
  806cbc:	9d000044 	addi	r20,r19,1
  806cc0:	003f3906 	br	8069a8 <___vfprintf_internal_r+0x1a44>
  806cc4:	983f251e 	bne	r19,zero,80695c <___vfprintf_internal_r+0x19f8>
  806cc8:	04c00044 	movi	r19,1
  806ccc:	003f2306 	br	80695c <___vfprintf_internal_r+0x19f8>
  806cd0:	04c00184 	movi	r19,6
  806cd4:	003f2106 	br	80695c <___vfprintf_internal_r+0x19f8>
  806cd8:	d8014515 	stw	zero,1300(sp)
  806cdc:	003eee06 	br	806898 <___vfprintf_internal_r+0x1934>
  806ce0:	200f883a 	mov	r7,r4
  806ce4:	0100370e 	bge	zero,r4,806dc4 <___vfprintf_internal_r+0x1e60>
  806ce8:	9800031e 	bne	r19,zero,806cf8 <___vfprintf_internal_r+0x1d94>
  806cec:	d9814c17 	ldw	r6,1328(sp)
  806cf0:	3080004c 	andi	r2,r6,1
  806cf4:	103fb726 	beq	r2,zero,806bd4 <___vfprintf_internal_r+0x1c70>
  806cf8:	20800044 	addi	r2,r4,1
  806cfc:	98a7883a 	add	r19,r19,r2
  806d00:	dcc14515 	stw	r19,1300(sp)
  806d04:	980f883a 	mov	r7,r19
  806d08:	983f800e 	bge	r19,zero,806b0c <___vfprintf_internal_r+0x1ba8>
  806d0c:	003fb306 	br	806bdc <___vfprintf_internal_r+0x1c78>
  806d10:	d9814d17 	ldw	r6,1332(sp)
  806d14:	31bfff84 	addi	r6,r6,-2
  806d18:	d9814d15 	stw	r6,1332(sp)
  806d1c:	003f4c06 	br	806a50 <___vfprintf_internal_r+0x1aec>
  806d20:	0100180e 	bge	zero,r4,806d84 <___vfprintf_internal_r+0x1e20>
  806d24:	00800044 	movi	r2,1
  806d28:	1485883a 	add	r2,r2,r18
  806d2c:	d8814515 	stw	r2,1300(sp)
  806d30:	100f883a 	mov	r7,r2
  806d34:	103f750e 	bge	r2,zero,806b0c <___vfprintf_internal_r+0x1ba8>
  806d38:	003fa806 	br	806bdc <___vfprintf_internal_r+0x1c78>
  806d3c:	80c00c04 	addi	r3,r16,48
  806d40:	00800c04 	movi	r2,48
  806d44:	d8c008c5 	stb	r3,35(sp)
  806d48:	d9800804 	addi	r6,sp,32
  806d4c:	d8c00904 	addi	r3,sp,36
  806d50:	d8800885 	stb	r2,34(sp)
  806d54:	003f6506 	br	806aec <___vfprintf_internal_r+0x1b88>
  806d58:	d9014c17 	ldw	r4,1328(sp)
  806d5c:	2084703a 	and	r2,r4,r2
  806d60:	103f9c26 	beq	r2,zero,806bd4 <___vfprintf_internal_r+0x1c70>
  806d64:	003f6606 	br	806b00 <___vfprintf_internal_r+0x1b9c>
  806d68:	d9800804 	addi	r6,sp,32
  806d6c:	d8c00884 	addi	r3,sp,34
  806d70:	003f5e06 	br	806aec <___vfprintf_internal_r+0x1b88>
  806d74:	00800b44 	movi	r2,45
  806d78:	0121c83a 	sub	r16,zero,r4
  806d7c:	d8800845 	stb	r2,33(sp)
  806d80:	003f3d06 	br	806a78 <___vfprintf_internal_r+0x1b14>
  806d84:	00800084 	movi	r2,2
  806d88:	1105c83a 	sub	r2,r2,r4
  806d8c:	003fe606 	br	806d28 <___vfprintf_internal_r+0x1dc4>
  806d90:	d8014515 	stw	zero,1300(sp)
  806d94:	dc814715 	stw	r18,1308(sp)
  806d98:	003fb106 	br	806c60 <___vfprintf_internal_r+0x1cfc>
  806d9c:	000d883a 	mov	r6,zero
  806da0:	000f883a 	mov	r7,zero
  806da4:	8009883a 	mov	r4,r16
  806da8:	880b883a 	mov	r5,r17
  806dac:	080cb2c0 	call	80cb2c <__nedf2>
  806db0:	103f9f26 	beq	r2,zero,806c30 <___vfprintf_internal_r+0x1ccc>
  806db4:	00800044 	movi	r2,1
  806db8:	1509c83a 	sub	r4,r2,r20
  806dbc:	d9000515 	stw	r4,20(sp)
  806dc0:	003f9b06 	br	806c30 <___vfprintf_internal_r+0x1ccc>
  806dc4:	98000d1e 	bne	r19,zero,806dfc <___vfprintf_internal_r+0x1e98>
  806dc8:	d8c14c17 	ldw	r3,1328(sp)
  806dcc:	1880004c 	andi	r2,r3,1
  806dd0:	10000a1e 	bne	r2,zero,806dfc <___vfprintf_internal_r+0x1e98>
  806dd4:	01000044 	movi	r4,1
  806dd8:	200f883a 	mov	r7,r4
  806ddc:	d9014515 	stw	r4,1300(sp)
  806de0:	003f4a06 	br	806b0c <___vfprintf_internal_r+0x1ba8>
  806de4:	3cc00017 	ldw	r19,0(r7)
  806de8:	39c00104 	addi	r7,r7,4
  806dec:	983d0e0e 	bge	r19,zero,806228 <___vfprintf_internal_r+0x12c4>
  806df0:	b8c00007 	ldb	r3,0(r23)
  806df4:	04ffffc4 	movi	r19,-1
  806df8:	0038d906 	br	805160 <___vfprintf_internal_r+0x1fc>
  806dfc:	9cc00084 	addi	r19,r19,2
  806e00:	dcc14515 	stw	r19,1300(sp)
  806e04:	980f883a 	mov	r7,r19
  806e08:	983f400e 	bge	r19,zero,806b0c <___vfprintf_internal_r+0x1ba8>
  806e0c:	003f7306 	br	806bdc <___vfprintf_internal_r+0x1c78>

00806e10 <__vfprintf_internal>:
  806e10:	00802074 	movhi	r2,129
  806e14:	108dcb04 	addi	r2,r2,14124
  806e18:	2013883a 	mov	r9,r4
  806e1c:	11000017 	ldw	r4,0(r2)
  806e20:	2805883a 	mov	r2,r5
  806e24:	300f883a 	mov	r7,r6
  806e28:	480b883a 	mov	r5,r9
  806e2c:	100d883a 	mov	r6,r2
  806e30:	0804f641 	jmpi	804f64 <___vfprintf_internal_r>

00806e34 <__swsetup_r>:
  806e34:	00802074 	movhi	r2,129
  806e38:	108dcb04 	addi	r2,r2,14124
  806e3c:	10c00017 	ldw	r3,0(r2)
  806e40:	defffd04 	addi	sp,sp,-12
  806e44:	dc400115 	stw	r17,4(sp)
  806e48:	dc000015 	stw	r16,0(sp)
  806e4c:	dfc00215 	stw	ra,8(sp)
  806e50:	2023883a 	mov	r17,r4
  806e54:	2821883a 	mov	r16,r5
  806e58:	18000226 	beq	r3,zero,806e64 <__swsetup_r+0x30>
  806e5c:	18800e17 	ldw	r2,56(r3)
  806e60:	10001f26 	beq	r2,zero,806ee0 <__swsetup_r+0xac>
  806e64:	8100030b 	ldhu	r4,12(r16)
  806e68:	2080020c 	andi	r2,r4,8
  806e6c:	10002826 	beq	r2,zero,806f10 <__swsetup_r+0xdc>
  806e70:	81400417 	ldw	r5,16(r16)
  806e74:	28001d26 	beq	r5,zero,806eec <__swsetup_r+0xb8>
  806e78:	2080004c 	andi	r2,r4,1
  806e7c:	1005003a 	cmpeq	r2,r2,zero
  806e80:	10000b26 	beq	r2,zero,806eb0 <__swsetup_r+0x7c>
  806e84:	2080008c 	andi	r2,r4,2
  806e88:	10001226 	beq	r2,zero,806ed4 <__swsetup_r+0xa0>
  806e8c:	0005883a 	mov	r2,zero
  806e90:	80800215 	stw	r2,8(r16)
  806e94:	28000b26 	beq	r5,zero,806ec4 <__swsetup_r+0x90>
  806e98:	0005883a 	mov	r2,zero
  806e9c:	dfc00217 	ldw	ra,8(sp)
  806ea0:	dc400117 	ldw	r17,4(sp)
  806ea4:	dc000017 	ldw	r16,0(sp)
  806ea8:	dec00304 	addi	sp,sp,12
  806eac:	f800283a 	ret
  806eb0:	80800517 	ldw	r2,20(r16)
  806eb4:	80000215 	stw	zero,8(r16)
  806eb8:	0085c83a 	sub	r2,zero,r2
  806ebc:	80800615 	stw	r2,24(r16)
  806ec0:	283ff51e 	bne	r5,zero,806e98 <__swsetup_r+0x64>
  806ec4:	2080200c 	andi	r2,r4,128
  806ec8:	103ff326 	beq	r2,zero,806e98 <__swsetup_r+0x64>
  806ecc:	00bfffc4 	movi	r2,-1
  806ed0:	003ff206 	br	806e9c <__swsetup_r+0x68>
  806ed4:	80800517 	ldw	r2,20(r16)
  806ed8:	80800215 	stw	r2,8(r16)
  806edc:	003fed06 	br	806e94 <__swsetup_r+0x60>
  806ee0:	1809883a 	mov	r4,r3
  806ee4:	08089d40 	call	8089d4 <__sinit>
  806ee8:	003fde06 	br	806e64 <__swsetup_r+0x30>
  806eec:	20c0a00c 	andi	r3,r4,640
  806ef0:	00808004 	movi	r2,512
  806ef4:	18bfe026 	beq	r3,r2,806e78 <__swsetup_r+0x44>
  806ef8:	8809883a 	mov	r4,r17
  806efc:	800b883a 	mov	r5,r16
  806f00:	080930c0 	call	80930c <__smakebuf_r>
  806f04:	8100030b 	ldhu	r4,12(r16)
  806f08:	81400417 	ldw	r5,16(r16)
  806f0c:	003fda06 	br	806e78 <__swsetup_r+0x44>
  806f10:	2080040c 	andi	r2,r4,16
  806f14:	103fed26 	beq	r2,zero,806ecc <__swsetup_r+0x98>
  806f18:	2080010c 	andi	r2,r4,4
  806f1c:	10001226 	beq	r2,zero,806f68 <__swsetup_r+0x134>
  806f20:	81400c17 	ldw	r5,48(r16)
  806f24:	28000526 	beq	r5,zero,806f3c <__swsetup_r+0x108>
  806f28:	80801004 	addi	r2,r16,64
  806f2c:	28800226 	beq	r5,r2,806f38 <__swsetup_r+0x104>
  806f30:	8809883a 	mov	r4,r17
  806f34:	0804bf80 	call	804bf8 <_free_r>
  806f38:	80000c15 	stw	zero,48(r16)
  806f3c:	8080030b 	ldhu	r2,12(r16)
  806f40:	81400417 	ldw	r5,16(r16)
  806f44:	80000115 	stw	zero,4(r16)
  806f48:	10bff6cc 	andi	r2,r2,65499
  806f4c:	8080030d 	sth	r2,12(r16)
  806f50:	81400015 	stw	r5,0(r16)
  806f54:	8080030b 	ldhu	r2,12(r16)
  806f58:	10800214 	ori	r2,r2,8
  806f5c:	113fffcc 	andi	r4,r2,65535
  806f60:	8080030d 	sth	r2,12(r16)
  806f64:	003fc306 	br	806e74 <__swsetup_r+0x40>
  806f68:	81400417 	ldw	r5,16(r16)
  806f6c:	003ff906 	br	806f54 <__swsetup_r+0x120>

00806f70 <quorem>:
  806f70:	28c00417 	ldw	r3,16(r5)
  806f74:	20800417 	ldw	r2,16(r4)
  806f78:	defff604 	addi	sp,sp,-40
  806f7c:	ddc00715 	stw	r23,28(sp)
  806f80:	dd400515 	stw	r21,20(sp)
  806f84:	dfc00915 	stw	ra,36(sp)
  806f88:	df000815 	stw	fp,32(sp)
  806f8c:	dd800615 	stw	r22,24(sp)
  806f90:	dd000415 	stw	r20,16(sp)
  806f94:	dcc00315 	stw	r19,12(sp)
  806f98:	dc800215 	stw	r18,8(sp)
  806f9c:	dc400115 	stw	r17,4(sp)
  806fa0:	dc000015 	stw	r16,0(sp)
  806fa4:	202f883a 	mov	r23,r4
  806fa8:	282b883a 	mov	r21,r5
  806fac:	10c07416 	blt	r2,r3,807180 <quorem+0x210>
  806fb0:	1c7fffc4 	addi	r17,r3,-1
  806fb4:	8c45883a 	add	r2,r17,r17
  806fb8:	1085883a 	add	r2,r2,r2
  806fbc:	2c000504 	addi	r16,r5,20
  806fc0:	24c00504 	addi	r19,r4,20
  806fc4:	14ed883a 	add	r22,r2,r19
  806fc8:	80a5883a 	add	r18,r16,r2
  806fcc:	b7000017 	ldw	fp,0(r22)
  806fd0:	91400017 	ldw	r5,0(r18)
  806fd4:	e009883a 	mov	r4,fp
  806fd8:	29400044 	addi	r5,r5,1
  806fdc:	080d1ec0 	call	80d1ec <__udivsi3>
  806fe0:	1029883a 	mov	r20,r2
  806fe4:	10003c1e 	bne	r2,zero,8070d8 <quorem+0x168>
  806fe8:	a80b883a 	mov	r5,r21
  806fec:	b809883a 	mov	r4,r23
  806ff0:	08098600 	call	809860 <__mcmp>
  806ff4:	10002b16 	blt	r2,zero,8070a4 <quorem+0x134>
  806ff8:	a5000044 	addi	r20,r20,1
  806ffc:	980f883a 	mov	r7,r19
  807000:	0011883a 	mov	r8,zero
  807004:	0009883a 	mov	r4,zero
  807008:	81400017 	ldw	r5,0(r16)
  80700c:	38c00017 	ldw	r3,0(r7)
  807010:	84000104 	addi	r16,r16,4
  807014:	28bfffcc 	andi	r2,r5,65535
  807018:	2085883a 	add	r2,r4,r2
  80701c:	11bfffcc 	andi	r6,r2,65535
  807020:	193fffcc 	andi	r4,r3,65535
  807024:	1004d43a 	srli	r2,r2,16
  807028:	280ad43a 	srli	r5,r5,16
  80702c:	2189c83a 	sub	r4,r4,r6
  807030:	2209883a 	add	r4,r4,r8
  807034:	1806d43a 	srli	r3,r3,16
  807038:	288b883a 	add	r5,r5,r2
  80703c:	200dd43a 	srai	r6,r4,16
  807040:	28bfffcc 	andi	r2,r5,65535
  807044:	1887c83a 	sub	r3,r3,r2
  807048:	1987883a 	add	r3,r3,r6
  80704c:	3900000d 	sth	r4,0(r7)
  807050:	38c0008d 	sth	r3,2(r7)
  807054:	2808d43a 	srli	r4,r5,16
  807058:	39c00104 	addi	r7,r7,4
  80705c:	1811d43a 	srai	r8,r3,16
  807060:	943fe92e 	bgeu	r18,r16,807008 <quorem+0x98>
  807064:	8c45883a 	add	r2,r17,r17
  807068:	1085883a 	add	r2,r2,r2
  80706c:	9885883a 	add	r2,r19,r2
  807070:	10c00017 	ldw	r3,0(r2)
  807074:	18000b1e 	bne	r3,zero,8070a4 <quorem+0x134>
  807078:	113fff04 	addi	r4,r2,-4
  80707c:	9900082e 	bgeu	r19,r4,8070a0 <quorem+0x130>
  807080:	10bfff17 	ldw	r2,-4(r2)
  807084:	10000326 	beq	r2,zero,807094 <quorem+0x124>
  807088:	00000506 	br	8070a0 <quorem+0x130>
  80708c:	20800017 	ldw	r2,0(r4)
  807090:	1000031e 	bne	r2,zero,8070a0 <quorem+0x130>
  807094:	213fff04 	addi	r4,r4,-4
  807098:	8c7fffc4 	addi	r17,r17,-1
  80709c:	993ffb36 	bltu	r19,r4,80708c <quorem+0x11c>
  8070a0:	bc400415 	stw	r17,16(r23)
  8070a4:	a005883a 	mov	r2,r20
  8070a8:	dfc00917 	ldw	ra,36(sp)
  8070ac:	df000817 	ldw	fp,32(sp)
  8070b0:	ddc00717 	ldw	r23,28(sp)
  8070b4:	dd800617 	ldw	r22,24(sp)
  8070b8:	dd400517 	ldw	r21,20(sp)
  8070bc:	dd000417 	ldw	r20,16(sp)
  8070c0:	dcc00317 	ldw	r19,12(sp)
  8070c4:	dc800217 	ldw	r18,8(sp)
  8070c8:	dc400117 	ldw	r17,4(sp)
  8070cc:	dc000017 	ldw	r16,0(sp)
  8070d0:	dec00a04 	addi	sp,sp,40
  8070d4:	f800283a 	ret
  8070d8:	980f883a 	mov	r7,r19
  8070dc:	8011883a 	mov	r8,r16
  8070e0:	0013883a 	mov	r9,zero
  8070e4:	000d883a 	mov	r6,zero
  8070e8:	40c00017 	ldw	r3,0(r8)
  8070ec:	39000017 	ldw	r4,0(r7)
  8070f0:	42000104 	addi	r8,r8,4
  8070f4:	18bfffcc 	andi	r2,r3,65535
  8070f8:	a085383a 	mul	r2,r20,r2
  8070fc:	1806d43a 	srli	r3,r3,16
  807100:	217fffcc 	andi	r5,r4,65535
  807104:	3085883a 	add	r2,r6,r2
  807108:	11bfffcc 	andi	r6,r2,65535
  80710c:	a0c7383a 	mul	r3,r20,r3
  807110:	1004d43a 	srli	r2,r2,16
  807114:	298bc83a 	sub	r5,r5,r6
  807118:	2a4b883a 	add	r5,r5,r9
  80711c:	2008d43a 	srli	r4,r4,16
  807120:	1887883a 	add	r3,r3,r2
  807124:	280dd43a 	srai	r6,r5,16
  807128:	18bfffcc 	andi	r2,r3,65535
  80712c:	2089c83a 	sub	r4,r4,r2
  807130:	2189883a 	add	r4,r4,r6
  807134:	3900008d 	sth	r4,2(r7)
  807138:	3940000d 	sth	r5,0(r7)
  80713c:	180cd43a 	srli	r6,r3,16
  807140:	39c00104 	addi	r7,r7,4
  807144:	2013d43a 	srai	r9,r4,16
  807148:	923fe72e 	bgeu	r18,r8,8070e8 <quorem+0x178>
  80714c:	e03fa61e 	bne	fp,zero,806fe8 <quorem+0x78>
  807150:	b0ffff04 	addi	r3,r22,-4
  807154:	98c0082e 	bgeu	r19,r3,807178 <quorem+0x208>
  807158:	b0bfff17 	ldw	r2,-4(r22)
  80715c:	10000326 	beq	r2,zero,80716c <quorem+0x1fc>
  807160:	00000506 	br	807178 <quorem+0x208>
  807164:	18800017 	ldw	r2,0(r3)
  807168:	1000031e 	bne	r2,zero,807178 <quorem+0x208>
  80716c:	18ffff04 	addi	r3,r3,-4
  807170:	8c7fffc4 	addi	r17,r17,-1
  807174:	98fffb36 	bltu	r19,r3,807164 <quorem+0x1f4>
  807178:	bc400415 	stw	r17,16(r23)
  80717c:	003f9a06 	br	806fe8 <quorem+0x78>
  807180:	0005883a 	mov	r2,zero
  807184:	003fc806 	br	8070a8 <quorem+0x138>

00807188 <_dtoa_r>:
  807188:	22001017 	ldw	r8,64(r4)
  80718c:	deffda04 	addi	sp,sp,-152
  807190:	dd402115 	stw	r21,132(sp)
  807194:	dd002015 	stw	r20,128(sp)
  807198:	dc801e15 	stw	r18,120(sp)
  80719c:	dc401d15 	stw	r17,116(sp)
  8071a0:	dfc02515 	stw	ra,148(sp)
  8071a4:	df002415 	stw	fp,144(sp)
  8071a8:	ddc02315 	stw	r23,140(sp)
  8071ac:	dd802215 	stw	r22,136(sp)
  8071b0:	dcc01f15 	stw	r19,124(sp)
  8071b4:	dc001c15 	stw	r16,112(sp)
  8071b8:	d9001615 	stw	r4,88(sp)
  8071bc:	3023883a 	mov	r17,r6
  8071c0:	2829883a 	mov	r20,r5
  8071c4:	d9c01715 	stw	r7,92(sp)
  8071c8:	dc802817 	ldw	r18,160(sp)
  8071cc:	302b883a 	mov	r21,r6
  8071d0:	40000a26 	beq	r8,zero,8071fc <_dtoa_r+0x74>
  8071d4:	20801117 	ldw	r2,68(r4)
  8071d8:	400b883a 	mov	r5,r8
  8071dc:	40800115 	stw	r2,4(r8)
  8071e0:	20c01117 	ldw	r3,68(r4)
  8071e4:	00800044 	movi	r2,1
  8071e8:	10c4983a 	sll	r2,r2,r3
  8071ec:	40800215 	stw	r2,8(r8)
  8071f0:	08097040 	call	809704 <_Bfree>
  8071f4:	d8c01617 	ldw	r3,88(sp)
  8071f8:	18001015 	stw	zero,64(r3)
  8071fc:	8800a316 	blt	r17,zero,80748c <_dtoa_r+0x304>
  807200:	90000015 	stw	zero,0(r18)
  807204:	a8dffc2c 	andhi	r3,r21,32752
  807208:	009ffc34 	movhi	r2,32752
  80720c:	18809126 	beq	r3,r2,807454 <_dtoa_r+0x2cc>
  807210:	000d883a 	mov	r6,zero
  807214:	000f883a 	mov	r7,zero
  807218:	a009883a 	mov	r4,r20
  80721c:	a80b883a 	mov	r5,r21
  807220:	dd001215 	stw	r20,72(sp)
  807224:	dd401315 	stw	r21,76(sp)
  807228:	080cb2c0 	call	80cb2c <__nedf2>
  80722c:	1000171e 	bne	r2,zero,80728c <_dtoa_r+0x104>
  807230:	d9802717 	ldw	r6,156(sp)
  807234:	00800044 	movi	r2,1
  807238:	30800015 	stw	r2,0(r6)
  80723c:	d8802917 	ldw	r2,164(sp)
  807240:	10029b26 	beq	r2,zero,807cb0 <_dtoa_r+0xb28>
  807244:	d9002917 	ldw	r4,164(sp)
  807248:	00802074 	movhi	r2,129
  80724c:	1085ea44 	addi	r2,r2,6057
  807250:	10ffffc4 	addi	r3,r2,-1
  807254:	20800015 	stw	r2,0(r4)
  807258:	1805883a 	mov	r2,r3
  80725c:	dfc02517 	ldw	ra,148(sp)
  807260:	df002417 	ldw	fp,144(sp)
  807264:	ddc02317 	ldw	r23,140(sp)
  807268:	dd802217 	ldw	r22,136(sp)
  80726c:	dd402117 	ldw	r21,132(sp)
  807270:	dd002017 	ldw	r20,128(sp)
  807274:	dcc01f17 	ldw	r19,124(sp)
  807278:	dc801e17 	ldw	r18,120(sp)
  80727c:	dc401d17 	ldw	r17,116(sp)
  807280:	dc001c17 	ldw	r16,112(sp)
  807284:	dec02604 	addi	sp,sp,152
  807288:	f800283a 	ret
  80728c:	d9001617 	ldw	r4,88(sp)
  807290:	d9401217 	ldw	r5,72(sp)
  807294:	d8800104 	addi	r2,sp,4
  807298:	a80d883a 	mov	r6,r21
  80729c:	d9c00204 	addi	r7,sp,8
  8072a0:	d8800015 	stw	r2,0(sp)
  8072a4:	0809d400 	call	809d40 <__d2b>
  8072a8:	d8800715 	stw	r2,28(sp)
  8072ac:	a804d53a 	srli	r2,r21,20
  8072b0:	1101ffcc 	andi	r4,r2,2047
  8072b4:	20008626 	beq	r4,zero,8074d0 <_dtoa_r+0x348>
  8072b8:	d8c01217 	ldw	r3,72(sp)
  8072bc:	00800434 	movhi	r2,16
  8072c0:	10bfffc4 	addi	r2,r2,-1
  8072c4:	ddc00117 	ldw	r23,4(sp)
  8072c8:	a884703a 	and	r2,r21,r2
  8072cc:	1811883a 	mov	r8,r3
  8072d0:	124ffc34 	orhi	r9,r2,16368
  8072d4:	25bf0044 	addi	r22,r4,-1023
  8072d8:	d8000815 	stw	zero,32(sp)
  8072dc:	0005883a 	mov	r2,zero
  8072e0:	00cffe34 	movhi	r3,16376
  8072e4:	480b883a 	mov	r5,r9
  8072e8:	4009883a 	mov	r4,r8
  8072ec:	180f883a 	mov	r7,r3
  8072f0:	100d883a 	mov	r6,r2
  8072f4:	080c3940 	call	80c394 <__subdf3>
  8072f8:	0218dbf4 	movhi	r8,25455
  8072fc:	4210d844 	addi	r8,r8,17249
  807300:	024ff4f4 	movhi	r9,16339
  807304:	4a61e9c4 	addi	r9,r9,-30809
  807308:	480f883a 	mov	r7,r9
  80730c:	400d883a 	mov	r6,r8
  807310:	180b883a 	mov	r5,r3
  807314:	1009883a 	mov	r4,r2
  807318:	080c4880 	call	80c488 <__muldf3>
  80731c:	0222d874 	movhi	r8,35681
  807320:	42322cc4 	addi	r8,r8,-14157
  807324:	024ff1f4 	movhi	r9,16327
  807328:	4a628a04 	addi	r9,r9,-30168
  80732c:	480f883a 	mov	r7,r9
  807330:	400d883a 	mov	r6,r8
  807334:	180b883a 	mov	r5,r3
  807338:	1009883a 	mov	r4,r2
  80733c:	080c4140 	call	80c414 <__adddf3>
  807340:	b009883a 	mov	r4,r22
  807344:	1021883a 	mov	r16,r2
  807348:	1823883a 	mov	r17,r3
  80734c:	080cd4c0 	call	80cd4c <__floatsidf>
  807350:	021427f4 	movhi	r8,20639
  807354:	421e7ec4 	addi	r8,r8,31227
  807358:	024ff4f4 	movhi	r9,16339
  80735c:	4a5104c4 	addi	r9,r9,17427
  807360:	480f883a 	mov	r7,r9
  807364:	400d883a 	mov	r6,r8
  807368:	180b883a 	mov	r5,r3
  80736c:	1009883a 	mov	r4,r2
  807370:	080c4880 	call	80c488 <__muldf3>
  807374:	180f883a 	mov	r7,r3
  807378:	880b883a 	mov	r5,r17
  80737c:	100d883a 	mov	r6,r2
  807380:	8009883a 	mov	r4,r16
  807384:	080c4140 	call	80c414 <__adddf3>
  807388:	1009883a 	mov	r4,r2
  80738c:	180b883a 	mov	r5,r3
  807390:	1021883a 	mov	r16,r2
  807394:	1823883a 	mov	r17,r3
  807398:	080ce440 	call	80ce44 <__fixdfsi>
  80739c:	000d883a 	mov	r6,zero
  8073a0:	000f883a 	mov	r7,zero
  8073a4:	8009883a 	mov	r4,r16
  8073a8:	880b883a 	mov	r5,r17
  8073ac:	d8800d15 	stw	r2,52(sp)
  8073b0:	080ccc40 	call	80ccc4 <__ltdf2>
  8073b4:	10031716 	blt	r2,zero,808014 <_dtoa_r+0xe8c>
  8073b8:	d8c00d17 	ldw	r3,52(sp)
  8073bc:	00800584 	movi	r2,22
  8073c0:	10c1482e 	bgeu	r2,r3,8078e4 <_dtoa_r+0x75c>
  8073c4:	01000044 	movi	r4,1
  8073c8:	d9000c15 	stw	r4,48(sp)
  8073cc:	bd85c83a 	sub	r2,r23,r22
  8073d0:	11bfffc4 	addi	r6,r2,-1
  8073d4:	30030b16 	blt	r6,zero,808004 <_dtoa_r+0xe7c>
  8073d8:	d9800a15 	stw	r6,40(sp)
  8073dc:	d8001115 	stw	zero,68(sp)
  8073e0:	d8c00d17 	ldw	r3,52(sp)
  8073e4:	1802ff16 	blt	r3,zero,807fe4 <_dtoa_r+0xe5c>
  8073e8:	d9000a17 	ldw	r4,40(sp)
  8073ec:	d8c00915 	stw	r3,36(sp)
  8073f0:	d8001015 	stw	zero,64(sp)
  8073f4:	20c9883a 	add	r4,r4,r3
  8073f8:	d9000a15 	stw	r4,40(sp)
  8073fc:	d9001717 	ldw	r4,92(sp)
  807400:	00800244 	movi	r2,9
  807404:	11004636 	bltu	r2,r4,807520 <_dtoa_r+0x398>
  807408:	00800144 	movi	r2,5
  80740c:	11020416 	blt	r2,r4,807c20 <_dtoa_r+0xa98>
  807410:	04400044 	movi	r17,1
  807414:	d8c01717 	ldw	r3,92(sp)
  807418:	00800144 	movi	r2,5
  80741c:	10c1ed36 	bltu	r2,r3,807bd4 <_dtoa_r+0xa4c>
  807420:	18c5883a 	add	r2,r3,r3
  807424:	1085883a 	add	r2,r2,r2
  807428:	00c02034 	movhi	r3,128
  80742c:	18dd0f04 	addi	r3,r3,29756
  807430:	10c5883a 	add	r2,r2,r3
  807434:	11000017 	ldw	r4,0(r2)
  807438:	2000683a 	jmp	r4
  80743c:	00807528 	cmpgeui	r2,zero,468
  807440:	00807528 	cmpgeui	r2,zero,468
  807444:	00807f28 	cmpgeui	r2,zero,508
  807448:	00807f00 	call	807f0 <__alt_mem_sdram_controller-0x77f810>
  80744c:	00807f44 	movi	r2,509
  807450:	00807f50 	cmplti	r2,zero,509
  807454:	d9002717 	ldw	r4,156(sp)
  807458:	0089c3c4 	movi	r2,9999
  80745c:	20800015 	stw	r2,0(r4)
  807460:	a0001026 	beq	r20,zero,8074a4 <_dtoa_r+0x31c>
  807464:	00c02074 	movhi	r3,129
  807468:	18c5f604 	addi	r3,r3,6104
  80746c:	d9802917 	ldw	r6,164(sp)
  807470:	303f7926 	beq	r6,zero,807258 <_dtoa_r+0xd0>
  807474:	188000c7 	ldb	r2,3(r3)
  807478:	190000c4 	addi	r4,r3,3
  80747c:	1000101e 	bne	r2,zero,8074c0 <_dtoa_r+0x338>
  807480:	d8802917 	ldw	r2,164(sp)
  807484:	11000015 	stw	r4,0(r2)
  807488:	003f7306 	br	807258 <_dtoa_r+0xd0>
  80748c:	00a00034 	movhi	r2,32768
  807490:	10bfffc4 	addi	r2,r2,-1
  807494:	00c00044 	movi	r3,1
  807498:	88aa703a 	and	r21,r17,r2
  80749c:	90c00015 	stw	r3,0(r18)
  8074a0:	003f5806 	br	807204 <_dtoa_r+0x7c>
  8074a4:	00800434 	movhi	r2,16
  8074a8:	10bfffc4 	addi	r2,r2,-1
  8074ac:	a884703a 	and	r2,r21,r2
  8074b0:	103fec1e 	bne	r2,zero,807464 <_dtoa_r+0x2dc>
  8074b4:	00c02074 	movhi	r3,129
  8074b8:	18c5f304 	addi	r3,r3,6092
  8074bc:	003feb06 	br	80746c <_dtoa_r+0x2e4>
  8074c0:	d8802917 	ldw	r2,164(sp)
  8074c4:	19000204 	addi	r4,r3,8
  8074c8:	11000015 	stw	r4,0(r2)
  8074cc:	003f6206 	br	807258 <_dtoa_r+0xd0>
  8074d0:	ddc00117 	ldw	r23,4(sp)
  8074d4:	d8800217 	ldw	r2,8(sp)
  8074d8:	01000804 	movi	r4,32
  8074dc:	b8c10c84 	addi	r3,r23,1074
  8074e0:	18a3883a 	add	r17,r3,r2
  8074e4:	2441b80e 	bge	r4,r17,807bc8 <_dtoa_r+0xa40>
  8074e8:	00c01004 	movi	r3,64
  8074ec:	1c47c83a 	sub	r3,r3,r17
  8074f0:	88bff804 	addi	r2,r17,-32
  8074f4:	a8c6983a 	sll	r3,r21,r3
  8074f8:	a084d83a 	srl	r2,r20,r2
  8074fc:	1888b03a 	or	r4,r3,r2
  807500:	080cf1c0 	call	80cf1c <__floatunsidf>
  807504:	1011883a 	mov	r8,r2
  807508:	00bf8434 	movhi	r2,65040
  80750c:	01000044 	movi	r4,1
  807510:	10d3883a 	add	r9,r2,r3
  807514:	8dbef344 	addi	r22,r17,-1075
  807518:	d9000815 	stw	r4,32(sp)
  80751c:	003f6f06 	br	8072dc <_dtoa_r+0x154>
  807520:	d8001715 	stw	zero,92(sp)
  807524:	04400044 	movi	r17,1
  807528:	00bfffc4 	movi	r2,-1
  80752c:	00c00044 	movi	r3,1
  807530:	d8800e15 	stw	r2,56(sp)
  807534:	d8002615 	stw	zero,152(sp)
  807538:	d8800f15 	stw	r2,60(sp)
  80753c:	d8c00b15 	stw	r3,44(sp)
  807540:	1021883a 	mov	r16,r2
  807544:	d8801617 	ldw	r2,88(sp)
  807548:	10001115 	stw	zero,68(r2)
  80754c:	d8801617 	ldw	r2,88(sp)
  807550:	11401117 	ldw	r5,68(r2)
  807554:	1009883a 	mov	r4,r2
  807558:	0809c840 	call	809c84 <_Balloc>
  80755c:	d8c01617 	ldw	r3,88(sp)
  807560:	d8800515 	stw	r2,20(sp)
  807564:	18801015 	stw	r2,64(r3)
  807568:	00800384 	movi	r2,14
  80756c:	14006836 	bltu	r2,r16,807710 <_dtoa_r+0x588>
  807570:	8805003a 	cmpeq	r2,r17,zero
  807574:	1000661e 	bne	r2,zero,807710 <_dtoa_r+0x588>
  807578:	d9000d17 	ldw	r4,52(sp)
  80757c:	0102300e 	bge	zero,r4,807e40 <_dtoa_r+0xcb8>
  807580:	208003cc 	andi	r2,r4,15
  807584:	100490fa 	slli	r2,r2,3
  807588:	2025d13a 	srai	r18,r4,4
  80758c:	00c02074 	movhi	r3,129
  807590:	18c60704 	addi	r3,r3,6172
  807594:	10c5883a 	add	r2,r2,r3
  807598:	90c0040c 	andi	r3,r18,16
  80759c:	14000017 	ldw	r16,0(r2)
  8075a0:	14400117 	ldw	r17,4(r2)
  8075a4:	18036a1e 	bne	r3,zero,808350 <_dtoa_r+0x11c8>
  8075a8:	05800084 	movi	r22,2
  8075ac:	90001026 	beq	r18,zero,8075f0 <_dtoa_r+0x468>
  8075b0:	04c02074 	movhi	r19,129
  8075b4:	9cc63904 	addi	r19,r19,6372
  8075b8:	9080004c 	andi	r2,r18,1
  8075bc:	1005003a 	cmpeq	r2,r2,zero
  8075c0:	1000081e 	bne	r2,zero,8075e4 <_dtoa_r+0x45c>
  8075c4:	99800017 	ldw	r6,0(r19)
  8075c8:	99c00117 	ldw	r7,4(r19)
  8075cc:	880b883a 	mov	r5,r17
  8075d0:	8009883a 	mov	r4,r16
  8075d4:	080c4880 	call	80c488 <__muldf3>
  8075d8:	1021883a 	mov	r16,r2
  8075dc:	b5800044 	addi	r22,r22,1
  8075e0:	1823883a 	mov	r17,r3
  8075e4:	9025d07a 	srai	r18,r18,1
  8075e8:	9cc00204 	addi	r19,r19,8
  8075ec:	903ff21e 	bne	r18,zero,8075b8 <_dtoa_r+0x430>
  8075f0:	a80b883a 	mov	r5,r21
  8075f4:	a009883a 	mov	r4,r20
  8075f8:	880f883a 	mov	r7,r17
  8075fc:	800d883a 	mov	r6,r16
  807600:	080c84c0 	call	80c84c <__divdf3>
  807604:	1029883a 	mov	r20,r2
  807608:	182b883a 	mov	r21,r3
  80760c:	d8c00c17 	ldw	r3,48(sp)
  807610:	1805003a 	cmpeq	r2,r3,zero
  807614:	1000081e 	bne	r2,zero,807638 <_dtoa_r+0x4b0>
  807618:	0005883a 	mov	r2,zero
  80761c:	00cffc34 	movhi	r3,16368
  807620:	180f883a 	mov	r7,r3
  807624:	a009883a 	mov	r4,r20
  807628:	a80b883a 	mov	r5,r21
  80762c:	100d883a 	mov	r6,r2
  807630:	080ccc40 	call	80ccc4 <__ltdf2>
  807634:	1003fe16 	blt	r2,zero,808630 <_dtoa_r+0x14a8>
  807638:	b009883a 	mov	r4,r22
  80763c:	080cd4c0 	call	80cd4c <__floatsidf>
  807640:	180b883a 	mov	r5,r3
  807644:	1009883a 	mov	r4,r2
  807648:	a00d883a 	mov	r6,r20
  80764c:	a80f883a 	mov	r7,r21
  807650:	080c4880 	call	80c488 <__muldf3>
  807654:	0011883a 	mov	r8,zero
  807658:	02500734 	movhi	r9,16412
  80765c:	1009883a 	mov	r4,r2
  807660:	180b883a 	mov	r5,r3
  807664:	480f883a 	mov	r7,r9
  807668:	400d883a 	mov	r6,r8
  80766c:	080c4140 	call	80c414 <__adddf3>
  807670:	d9000f17 	ldw	r4,60(sp)
  807674:	102d883a 	mov	r22,r2
  807678:	00bf3034 	movhi	r2,64704
  80767c:	18b9883a 	add	fp,r3,r2
  807680:	e02f883a 	mov	r23,fp
  807684:	20028f1e 	bne	r4,zero,8080c4 <_dtoa_r+0xf3c>
  807688:	0005883a 	mov	r2,zero
  80768c:	00d00534 	movhi	r3,16404
  807690:	a009883a 	mov	r4,r20
  807694:	a80b883a 	mov	r5,r21
  807698:	180f883a 	mov	r7,r3
  80769c:	100d883a 	mov	r6,r2
  8076a0:	080c3940 	call	80c394 <__subdf3>
  8076a4:	1009883a 	mov	r4,r2
  8076a8:	e00f883a 	mov	r7,fp
  8076ac:	180b883a 	mov	r5,r3
  8076b0:	b00d883a 	mov	r6,r22
  8076b4:	1025883a 	mov	r18,r2
  8076b8:	1827883a 	mov	r19,r3
  8076bc:	080cbb40 	call	80cbb4 <__gtdf2>
  8076c0:	00834f16 	blt	zero,r2,808400 <_dtoa_r+0x1278>
  8076c4:	e0e0003c 	xorhi	r3,fp,32768
  8076c8:	9009883a 	mov	r4,r18
  8076cc:	980b883a 	mov	r5,r19
  8076d0:	180f883a 	mov	r7,r3
  8076d4:	b00d883a 	mov	r6,r22
  8076d8:	080ccc40 	call	80ccc4 <__ltdf2>
  8076dc:	1000080e 	bge	r2,zero,807700 <_dtoa_r+0x578>
  8076e0:	0027883a 	mov	r19,zero
  8076e4:	0025883a 	mov	r18,zero
  8076e8:	d8802617 	ldw	r2,152(sp)
  8076ec:	df000517 	ldw	fp,20(sp)
  8076f0:	d8000615 	stw	zero,24(sp)
  8076f4:	0084303a 	nor	r2,zero,r2
  8076f8:	d8800d15 	stw	r2,52(sp)
  8076fc:	00019b06 	br	807d6c <_dtoa_r+0xbe4>
  807700:	d9801217 	ldw	r6,72(sp)
  807704:	d8801317 	ldw	r2,76(sp)
  807708:	3029883a 	mov	r20,r6
  80770c:	102b883a 	mov	r21,r2
  807710:	d8c00217 	ldw	r3,8(sp)
  807714:	18008516 	blt	r3,zero,80792c <_dtoa_r+0x7a4>
  807718:	d9000d17 	ldw	r4,52(sp)
  80771c:	00800384 	movi	r2,14
  807720:	11008216 	blt	r2,r4,80792c <_dtoa_r+0x7a4>
  807724:	200490fa 	slli	r2,r4,3
  807728:	d9802617 	ldw	r6,152(sp)
  80772c:	00c02074 	movhi	r3,129
  807730:	18c60704 	addi	r3,r3,6172
  807734:	10c5883a 	add	r2,r2,r3
  807738:	14800017 	ldw	r18,0(r2)
  80773c:	14c00117 	ldw	r19,4(r2)
  807740:	30031e16 	blt	r6,zero,8083bc <_dtoa_r+0x1234>
  807744:	d9000517 	ldw	r4,20(sp)
  807748:	d8c00f17 	ldw	r3,60(sp)
  80774c:	a823883a 	mov	r17,r21
  807750:	a021883a 	mov	r16,r20
  807754:	192b883a 	add	r21,r3,r4
  807758:	2039883a 	mov	fp,r4
  80775c:	00000f06 	br	80779c <_dtoa_r+0x614>
  807760:	0005883a 	mov	r2,zero
  807764:	00d00934 	movhi	r3,16420
  807768:	5009883a 	mov	r4,r10
  80776c:	580b883a 	mov	r5,r11
  807770:	180f883a 	mov	r7,r3
  807774:	100d883a 	mov	r6,r2
  807778:	080c4880 	call	80c488 <__muldf3>
  80777c:	180b883a 	mov	r5,r3
  807780:	000d883a 	mov	r6,zero
  807784:	000f883a 	mov	r7,zero
  807788:	1009883a 	mov	r4,r2
  80778c:	1021883a 	mov	r16,r2
  807790:	1823883a 	mov	r17,r3
  807794:	080cb2c0 	call	80cb2c <__nedf2>
  807798:	10004526 	beq	r2,zero,8078b0 <_dtoa_r+0x728>
  80779c:	900d883a 	mov	r6,r18
  8077a0:	980f883a 	mov	r7,r19
  8077a4:	8009883a 	mov	r4,r16
  8077a8:	880b883a 	mov	r5,r17
  8077ac:	080c84c0 	call	80c84c <__divdf3>
  8077b0:	180b883a 	mov	r5,r3
  8077b4:	1009883a 	mov	r4,r2
  8077b8:	080ce440 	call	80ce44 <__fixdfsi>
  8077bc:	1009883a 	mov	r4,r2
  8077c0:	1029883a 	mov	r20,r2
  8077c4:	080cd4c0 	call	80cd4c <__floatsidf>
  8077c8:	180f883a 	mov	r7,r3
  8077cc:	9009883a 	mov	r4,r18
  8077d0:	980b883a 	mov	r5,r19
  8077d4:	100d883a 	mov	r6,r2
  8077d8:	080c4880 	call	80c488 <__muldf3>
  8077dc:	180f883a 	mov	r7,r3
  8077e0:	880b883a 	mov	r5,r17
  8077e4:	8009883a 	mov	r4,r16
  8077e8:	100d883a 	mov	r6,r2
  8077ec:	080c3940 	call	80c394 <__subdf3>
  8077f0:	1015883a 	mov	r10,r2
  8077f4:	a0800c04 	addi	r2,r20,48
  8077f8:	e0800005 	stb	r2,0(fp)
  8077fc:	e7000044 	addi	fp,fp,1
  807800:	1817883a 	mov	r11,r3
  807804:	e57fd61e 	bne	fp,r21,807760 <_dtoa_r+0x5d8>
  807808:	500d883a 	mov	r6,r10
  80780c:	180f883a 	mov	r7,r3
  807810:	5009883a 	mov	r4,r10
  807814:	180b883a 	mov	r5,r3
  807818:	080c4140 	call	80c414 <__adddf3>
  80781c:	100d883a 	mov	r6,r2
  807820:	9009883a 	mov	r4,r18
  807824:	980b883a 	mov	r5,r19
  807828:	180f883a 	mov	r7,r3
  80782c:	1021883a 	mov	r16,r2
  807830:	1823883a 	mov	r17,r3
  807834:	080ccc40 	call	80ccc4 <__ltdf2>
  807838:	10000816 	blt	r2,zero,80785c <_dtoa_r+0x6d4>
  80783c:	980b883a 	mov	r5,r19
  807840:	800d883a 	mov	r6,r16
  807844:	880f883a 	mov	r7,r17
  807848:	9009883a 	mov	r4,r18
  80784c:	080caa40 	call	80caa4 <__eqdf2>
  807850:	1000171e 	bne	r2,zero,8078b0 <_dtoa_r+0x728>
  807854:	a080004c 	andi	r2,r20,1
  807858:	10001526 	beq	r2,zero,8078b0 <_dtoa_r+0x728>
  80785c:	d8800d17 	ldw	r2,52(sp)
  807860:	d8800415 	stw	r2,16(sp)
  807864:	e009883a 	mov	r4,fp
  807868:	213fffc4 	addi	r4,r4,-1
  80786c:	20c00007 	ldb	r3,0(r4)
  807870:	00800e44 	movi	r2,57
  807874:	1880081e 	bne	r3,r2,807898 <_dtoa_r+0x710>
  807878:	d8800517 	ldw	r2,20(sp)
  80787c:	113ffa1e 	bne	r2,r4,807868 <_dtoa_r+0x6e0>
  807880:	d8c00417 	ldw	r3,16(sp)
  807884:	d9800517 	ldw	r6,20(sp)
  807888:	00800c04 	movi	r2,48
  80788c:	18c00044 	addi	r3,r3,1
  807890:	d8c00415 	stw	r3,16(sp)
  807894:	30800005 	stb	r2,0(r6)
  807898:	20800003 	ldbu	r2,0(r4)
  80789c:	d8c00417 	ldw	r3,16(sp)
  8078a0:	27000044 	addi	fp,r4,1
  8078a4:	10800044 	addi	r2,r2,1
  8078a8:	d8c00d15 	stw	r3,52(sp)
  8078ac:	20800005 	stb	r2,0(r4)
  8078b0:	d9001617 	ldw	r4,88(sp)
  8078b4:	d9400717 	ldw	r5,28(sp)
  8078b8:	08097040 	call	809704 <_Bfree>
  8078bc:	e0000005 	stb	zero,0(fp)
  8078c0:	d9800d17 	ldw	r6,52(sp)
  8078c4:	d8c02717 	ldw	r3,156(sp)
  8078c8:	d9002917 	ldw	r4,164(sp)
  8078cc:	30800044 	addi	r2,r6,1
  8078d0:	18800015 	stw	r2,0(r3)
  8078d4:	20029c26 	beq	r4,zero,808348 <_dtoa_r+0x11c0>
  8078d8:	d8c00517 	ldw	r3,20(sp)
  8078dc:	27000015 	stw	fp,0(r4)
  8078e0:	003e5d06 	br	807258 <_dtoa_r+0xd0>
  8078e4:	d9800d17 	ldw	r6,52(sp)
  8078e8:	00c02074 	movhi	r3,129
  8078ec:	18c60704 	addi	r3,r3,6172
  8078f0:	d9001217 	ldw	r4,72(sp)
  8078f4:	300490fa 	slli	r2,r6,3
  8078f8:	d9401317 	ldw	r5,76(sp)
  8078fc:	10c5883a 	add	r2,r2,r3
  807900:	12000017 	ldw	r8,0(r2)
  807904:	12400117 	ldw	r9,4(r2)
  807908:	400d883a 	mov	r6,r8
  80790c:	480f883a 	mov	r7,r9
  807910:	080ccc40 	call	80ccc4 <__ltdf2>
  807914:	1000030e 	bge	r2,zero,807924 <_dtoa_r+0x79c>
  807918:	d8800d17 	ldw	r2,52(sp)
  80791c:	10bfffc4 	addi	r2,r2,-1
  807920:	d8800d15 	stw	r2,52(sp)
  807924:	d8000c15 	stw	zero,48(sp)
  807928:	003ea806 	br	8073cc <_dtoa_r+0x244>
  80792c:	d9000b17 	ldw	r4,44(sp)
  807930:	202cc03a 	cmpne	r22,r4,zero
  807934:	b000c71e 	bne	r22,zero,807c54 <_dtoa_r+0xacc>
  807938:	dc001117 	ldw	r16,68(sp)
  80793c:	dc801017 	ldw	r18,64(sp)
  807940:	0027883a 	mov	r19,zero
  807944:	04000b0e 	bge	zero,r16,807974 <_dtoa_r+0x7ec>
  807948:	d8c00a17 	ldw	r3,40(sp)
  80794c:	00c0090e 	bge	zero,r3,807974 <_dtoa_r+0x7ec>
  807950:	8005883a 	mov	r2,r16
  807954:	1c011316 	blt	r3,r16,807da4 <_dtoa_r+0xc1c>
  807958:	d9000a17 	ldw	r4,40(sp)
  80795c:	d9801117 	ldw	r6,68(sp)
  807960:	80a1c83a 	sub	r16,r16,r2
  807964:	2089c83a 	sub	r4,r4,r2
  807968:	308dc83a 	sub	r6,r6,r2
  80796c:	d9000a15 	stw	r4,40(sp)
  807970:	d9801115 	stw	r6,68(sp)
  807974:	d8801017 	ldw	r2,64(sp)
  807978:	0080150e 	bge	zero,r2,8079d0 <_dtoa_r+0x848>
  80797c:	d8c00b17 	ldw	r3,44(sp)
  807980:	1805003a 	cmpeq	r2,r3,zero
  807984:	1001c91e 	bne	r2,zero,8080ac <_dtoa_r+0xf24>
  807988:	04800e0e 	bge	zero,r18,8079c4 <_dtoa_r+0x83c>
  80798c:	d9001617 	ldw	r4,88(sp)
  807990:	980b883a 	mov	r5,r19
  807994:	900d883a 	mov	r6,r18
  807998:	080a4b80 	call	80a4b8 <__pow5mult>
  80799c:	d9001617 	ldw	r4,88(sp)
  8079a0:	d9800717 	ldw	r6,28(sp)
  8079a4:	100b883a 	mov	r5,r2
  8079a8:	1027883a 	mov	r19,r2
  8079ac:	080a1940 	call	80a194 <__multiply>
  8079b0:	d9001617 	ldw	r4,88(sp)
  8079b4:	d9400717 	ldw	r5,28(sp)
  8079b8:	1023883a 	mov	r17,r2
  8079bc:	08097040 	call	809704 <_Bfree>
  8079c0:	dc400715 	stw	r17,28(sp)
  8079c4:	d9001017 	ldw	r4,64(sp)
  8079c8:	248dc83a 	sub	r6,r4,r18
  8079cc:	30010e1e 	bne	r6,zero,807e08 <_dtoa_r+0xc80>
  8079d0:	d9001617 	ldw	r4,88(sp)
  8079d4:	04400044 	movi	r17,1
  8079d8:	880b883a 	mov	r5,r17
  8079dc:	080a37c0 	call	80a37c <__i2b>
  8079e0:	d9800917 	ldw	r6,36(sp)
  8079e4:	1025883a 	mov	r18,r2
  8079e8:	0180040e 	bge	zero,r6,8079fc <_dtoa_r+0x874>
  8079ec:	d9001617 	ldw	r4,88(sp)
  8079f0:	100b883a 	mov	r5,r2
  8079f4:	080a4b80 	call	80a4b8 <__pow5mult>
  8079f8:	1025883a 	mov	r18,r2
  8079fc:	d8801717 	ldw	r2,92(sp)
  807a00:	8880f30e 	bge	r17,r2,807dd0 <_dtoa_r+0xc48>
  807a04:	0023883a 	mov	r17,zero
  807a08:	d9800917 	ldw	r6,36(sp)
  807a0c:	30019e1e 	bne	r6,zero,808088 <_dtoa_r+0xf00>
  807a10:	00c00044 	movi	r3,1
  807a14:	d9000a17 	ldw	r4,40(sp)
  807a18:	20c5883a 	add	r2,r4,r3
  807a1c:	10c007cc 	andi	r3,r2,31
  807a20:	1800841e 	bne	r3,zero,807c34 <_dtoa_r+0xaac>
  807a24:	00800704 	movi	r2,28
  807a28:	d9000a17 	ldw	r4,40(sp)
  807a2c:	d9801117 	ldw	r6,68(sp)
  807a30:	80a1883a 	add	r16,r16,r2
  807a34:	2089883a 	add	r4,r4,r2
  807a38:	308d883a 	add	r6,r6,r2
  807a3c:	d9000a15 	stw	r4,40(sp)
  807a40:	d9801115 	stw	r6,68(sp)
  807a44:	d8801117 	ldw	r2,68(sp)
  807a48:	0080050e 	bge	zero,r2,807a60 <_dtoa_r+0x8d8>
  807a4c:	d9400717 	ldw	r5,28(sp)
  807a50:	d9001617 	ldw	r4,88(sp)
  807a54:	100d883a 	mov	r6,r2
  807a58:	080a0480 	call	80a048 <__lshift>
  807a5c:	d8800715 	stw	r2,28(sp)
  807a60:	d8c00a17 	ldw	r3,40(sp)
  807a64:	00c0050e 	bge	zero,r3,807a7c <_dtoa_r+0x8f4>
  807a68:	d9001617 	ldw	r4,88(sp)
  807a6c:	900b883a 	mov	r5,r18
  807a70:	180d883a 	mov	r6,r3
  807a74:	080a0480 	call	80a048 <__lshift>
  807a78:	1025883a 	mov	r18,r2
  807a7c:	d9000c17 	ldw	r4,48(sp)
  807a80:	2005003a 	cmpeq	r2,r4,zero
  807a84:	10016f26 	beq	r2,zero,808044 <_dtoa_r+0xebc>
  807a88:	d9000f17 	ldw	r4,60(sp)
  807a8c:	0102170e 	bge	zero,r4,8082ec <_dtoa_r+0x1164>
  807a90:	d9800b17 	ldw	r6,44(sp)
  807a94:	3005003a 	cmpeq	r2,r6,zero
  807a98:	1000881e 	bne	r2,zero,807cbc <_dtoa_r+0xb34>
  807a9c:	0400050e 	bge	zero,r16,807ab4 <_dtoa_r+0x92c>
  807aa0:	d9001617 	ldw	r4,88(sp)
  807aa4:	980b883a 	mov	r5,r19
  807aa8:	800d883a 	mov	r6,r16
  807aac:	080a0480 	call	80a048 <__lshift>
  807ab0:	1027883a 	mov	r19,r2
  807ab4:	8804c03a 	cmpne	r2,r17,zero
  807ab8:	1002541e 	bne	r2,zero,80840c <_dtoa_r+0x1284>
  807abc:	980b883a 	mov	r5,r19
  807ac0:	dd800517 	ldw	r22,20(sp)
  807ac4:	dcc00615 	stw	r19,24(sp)
  807ac8:	a700004c 	andi	fp,r20,1
  807acc:	2827883a 	mov	r19,r5
  807ad0:	d9000717 	ldw	r4,28(sp)
  807ad4:	900b883a 	mov	r5,r18
  807ad8:	0806f700 	call	806f70 <quorem>
  807adc:	d9000717 	ldw	r4,28(sp)
  807ae0:	d9400617 	ldw	r5,24(sp)
  807ae4:	1023883a 	mov	r17,r2
  807ae8:	8dc00c04 	addi	r23,r17,48
  807aec:	08098600 	call	809860 <__mcmp>
  807af0:	d9001617 	ldw	r4,88(sp)
  807af4:	900b883a 	mov	r5,r18
  807af8:	980d883a 	mov	r6,r19
  807afc:	1029883a 	mov	r20,r2
  807b00:	0809ebc0 	call	809ebc <__mdiff>
  807b04:	102b883a 	mov	r21,r2
  807b08:	10800317 	ldw	r2,12(r2)
  807b0c:	1001281e 	bne	r2,zero,807fb0 <_dtoa_r+0xe28>
  807b10:	d9000717 	ldw	r4,28(sp)
  807b14:	a80b883a 	mov	r5,r21
  807b18:	08098600 	call	809860 <__mcmp>
  807b1c:	d9001617 	ldw	r4,88(sp)
  807b20:	1021883a 	mov	r16,r2
  807b24:	a80b883a 	mov	r5,r21
  807b28:	08097040 	call	809704 <_Bfree>
  807b2c:	8000041e 	bne	r16,zero,807b40 <_dtoa_r+0x9b8>
  807b30:	d8801717 	ldw	r2,92(sp)
  807b34:	1000021e 	bne	r2,zero,807b40 <_dtoa_r+0x9b8>
  807b38:	e004c03a 	cmpne	r2,fp,zero
  807b3c:	10011726 	beq	r2,zero,807f9c <_dtoa_r+0xe14>
  807b40:	a0010616 	blt	r20,zero,807f5c <_dtoa_r+0xdd4>
  807b44:	a000041e 	bne	r20,zero,807b58 <_dtoa_r+0x9d0>
  807b48:	d8c01717 	ldw	r3,92(sp)
  807b4c:	1800021e 	bne	r3,zero,807b58 <_dtoa_r+0x9d0>
  807b50:	e004c03a 	cmpne	r2,fp,zero
  807b54:	10010126 	beq	r2,zero,807f5c <_dtoa_r+0xdd4>
  807b58:	04023d16 	blt	zero,r16,808450 <_dtoa_r+0x12c8>
  807b5c:	b5c00005 	stb	r23,0(r22)
  807b60:	d9800517 	ldw	r6,20(sp)
  807b64:	d9000f17 	ldw	r4,60(sp)
  807b68:	b5800044 	addi	r22,r22,1
  807b6c:	3105883a 	add	r2,r6,r4
  807b70:	b0806526 	beq	r22,r2,807d08 <_dtoa_r+0xb80>
  807b74:	d9400717 	ldw	r5,28(sp)
  807b78:	d9001617 	ldw	r4,88(sp)
  807b7c:	01800284 	movi	r6,10
  807b80:	000f883a 	mov	r7,zero
  807b84:	080a3b80 	call	80a3b8 <__multadd>
  807b88:	d8800715 	stw	r2,28(sp)
  807b8c:	d8800617 	ldw	r2,24(sp)
  807b90:	14c10c26 	beq	r2,r19,807fc4 <_dtoa_r+0xe3c>
  807b94:	d9400617 	ldw	r5,24(sp)
  807b98:	d9001617 	ldw	r4,88(sp)
  807b9c:	01800284 	movi	r6,10
  807ba0:	000f883a 	mov	r7,zero
  807ba4:	080a3b80 	call	80a3b8 <__multadd>
  807ba8:	d9001617 	ldw	r4,88(sp)
  807bac:	980b883a 	mov	r5,r19
  807bb0:	01800284 	movi	r6,10
  807bb4:	000f883a 	mov	r7,zero
  807bb8:	d8800615 	stw	r2,24(sp)
  807bbc:	080a3b80 	call	80a3b8 <__multadd>
  807bc0:	1027883a 	mov	r19,r2
  807bc4:	003fc206 	br	807ad0 <_dtoa_r+0x948>
  807bc8:	2445c83a 	sub	r2,r4,r17
  807bcc:	a088983a 	sll	r4,r20,r2
  807bd0:	003e4b06 	br	807500 <_dtoa_r+0x378>
  807bd4:	01bfffc4 	movi	r6,-1
  807bd8:	00800044 	movi	r2,1
  807bdc:	d9800e15 	stw	r6,56(sp)
  807be0:	d9800f15 	stw	r6,60(sp)
  807be4:	d8800b15 	stw	r2,44(sp)
  807be8:	d8c01617 	ldw	r3,88(sp)
  807bec:	008005c4 	movi	r2,23
  807bf0:	18001115 	stw	zero,68(r3)
  807bf4:	1580082e 	bgeu	r2,r22,807c18 <_dtoa_r+0xa90>
  807bf8:	00c00104 	movi	r3,4
  807bfc:	0009883a 	mov	r4,zero
  807c00:	18c7883a 	add	r3,r3,r3
  807c04:	18800504 	addi	r2,r3,20
  807c08:	21000044 	addi	r4,r4,1
  807c0c:	b0bffc2e 	bgeu	r22,r2,807c00 <_dtoa_r+0xa78>
  807c10:	d9801617 	ldw	r6,88(sp)
  807c14:	31001115 	stw	r4,68(r6)
  807c18:	dc000f17 	ldw	r16,60(sp)
  807c1c:	003e4b06 	br	80754c <_dtoa_r+0x3c4>
  807c20:	d9801717 	ldw	r6,92(sp)
  807c24:	0023883a 	mov	r17,zero
  807c28:	31bfff04 	addi	r6,r6,-4
  807c2c:	d9801715 	stw	r6,92(sp)
  807c30:	003df806 	br	807414 <_dtoa_r+0x28c>
  807c34:	00800804 	movi	r2,32
  807c38:	10c9c83a 	sub	r4,r2,r3
  807c3c:	00c00104 	movi	r3,4
  807c40:	19005a16 	blt	r3,r4,807dac <_dtoa_r+0xc24>
  807c44:	008000c4 	movi	r2,3
  807c48:	113f7e16 	blt	r2,r4,807a44 <_dtoa_r+0x8bc>
  807c4c:	20800704 	addi	r2,r4,28
  807c50:	003f7506 	br	807a28 <_dtoa_r+0x8a0>
  807c54:	d9801717 	ldw	r6,92(sp)
  807c58:	00800044 	movi	r2,1
  807c5c:	1180a10e 	bge	r2,r6,807ee4 <_dtoa_r+0xd5c>
  807c60:	d9800f17 	ldw	r6,60(sp)
  807c64:	d8c01017 	ldw	r3,64(sp)
  807c68:	30bfffc4 	addi	r2,r6,-1
  807c6c:	1881c616 	blt	r3,r2,808388 <_dtoa_r+0x1200>
  807c70:	18a5c83a 	sub	r18,r3,r2
  807c74:	d8800f17 	ldw	r2,60(sp)
  807c78:	10026216 	blt	r2,zero,808604 <_dtoa_r+0x147c>
  807c7c:	dc001117 	ldw	r16,68(sp)
  807c80:	1007883a 	mov	r3,r2
  807c84:	d9800a17 	ldw	r6,40(sp)
  807c88:	d8801117 	ldw	r2,68(sp)
  807c8c:	d9001617 	ldw	r4,88(sp)
  807c90:	30cd883a 	add	r6,r6,r3
  807c94:	10c5883a 	add	r2,r2,r3
  807c98:	01400044 	movi	r5,1
  807c9c:	d9800a15 	stw	r6,40(sp)
  807ca0:	d8801115 	stw	r2,68(sp)
  807ca4:	080a37c0 	call	80a37c <__i2b>
  807ca8:	1027883a 	mov	r19,r2
  807cac:	003f2506 	br	807944 <_dtoa_r+0x7bc>
  807cb0:	00c02074 	movhi	r3,129
  807cb4:	18c5ea04 	addi	r3,r3,6056
  807cb8:	003d6706 	br	807258 <_dtoa_r+0xd0>
  807cbc:	dd800517 	ldw	r22,20(sp)
  807cc0:	04000044 	movi	r16,1
  807cc4:	00000706 	br	807ce4 <_dtoa_r+0xb5c>
  807cc8:	d9400717 	ldw	r5,28(sp)
  807ccc:	d9001617 	ldw	r4,88(sp)
  807cd0:	01800284 	movi	r6,10
  807cd4:	000f883a 	mov	r7,zero
  807cd8:	080a3b80 	call	80a3b8 <__multadd>
  807cdc:	d8800715 	stw	r2,28(sp)
  807ce0:	84000044 	addi	r16,r16,1
  807ce4:	d9000717 	ldw	r4,28(sp)
  807ce8:	900b883a 	mov	r5,r18
  807cec:	0806f700 	call	806f70 <quorem>
  807cf0:	15c00c04 	addi	r23,r2,48
  807cf4:	b5c00005 	stb	r23,0(r22)
  807cf8:	d8c00f17 	ldw	r3,60(sp)
  807cfc:	b5800044 	addi	r22,r22,1
  807d00:	80fff116 	blt	r16,r3,807cc8 <_dtoa_r+0xb40>
  807d04:	d8000615 	stw	zero,24(sp)
  807d08:	d9400717 	ldw	r5,28(sp)
  807d0c:	d9001617 	ldw	r4,88(sp)
  807d10:	01800044 	movi	r6,1
  807d14:	080a0480 	call	80a048 <__lshift>
  807d18:	1009883a 	mov	r4,r2
  807d1c:	900b883a 	mov	r5,r18
  807d20:	d8800715 	stw	r2,28(sp)
  807d24:	08098600 	call	809860 <__mcmp>
  807d28:	00803c0e 	bge	zero,r2,807e1c <_dtoa_r+0xc94>
  807d2c:	b009883a 	mov	r4,r22
  807d30:	213fffc4 	addi	r4,r4,-1
  807d34:	21400003 	ldbu	r5,0(r4)
  807d38:	00800e44 	movi	r2,57
  807d3c:	28c03fcc 	andi	r3,r5,255
  807d40:	18c0201c 	xori	r3,r3,128
  807d44:	18ffe004 	addi	r3,r3,-128
  807d48:	1881981e 	bne	r3,r2,8083ac <_dtoa_r+0x1224>
  807d4c:	d9800517 	ldw	r6,20(sp)
  807d50:	21bff71e 	bne	r4,r6,807d30 <_dtoa_r+0xba8>
  807d54:	d8800d17 	ldw	r2,52(sp)
  807d58:	37000044 	addi	fp,r6,1
  807d5c:	10800044 	addi	r2,r2,1
  807d60:	d8800d15 	stw	r2,52(sp)
  807d64:	00800c44 	movi	r2,49
  807d68:	30800005 	stb	r2,0(r6)
  807d6c:	d9001617 	ldw	r4,88(sp)
  807d70:	900b883a 	mov	r5,r18
  807d74:	08097040 	call	809704 <_Bfree>
  807d78:	983ecd26 	beq	r19,zero,8078b0 <_dtoa_r+0x728>
  807d7c:	d8c00617 	ldw	r3,24(sp)
  807d80:	18000426 	beq	r3,zero,807d94 <_dtoa_r+0xc0c>
  807d84:	1cc00326 	beq	r3,r19,807d94 <_dtoa_r+0xc0c>
  807d88:	d9001617 	ldw	r4,88(sp)
  807d8c:	180b883a 	mov	r5,r3
  807d90:	08097040 	call	809704 <_Bfree>
  807d94:	d9001617 	ldw	r4,88(sp)
  807d98:	980b883a 	mov	r5,r19
  807d9c:	08097040 	call	809704 <_Bfree>
  807da0:	003ec306 	br	8078b0 <_dtoa_r+0x728>
  807da4:	1805883a 	mov	r2,r3
  807da8:	003eeb06 	br	807958 <_dtoa_r+0x7d0>
  807dac:	d9800a17 	ldw	r6,40(sp)
  807db0:	d8c01117 	ldw	r3,68(sp)
  807db4:	20bfff04 	addi	r2,r4,-4
  807db8:	308d883a 	add	r6,r6,r2
  807dbc:	1887883a 	add	r3,r3,r2
  807dc0:	80a1883a 	add	r16,r16,r2
  807dc4:	d9800a15 	stw	r6,40(sp)
  807dc8:	d8c01115 	stw	r3,68(sp)
  807dcc:	003f1d06 	br	807a44 <_dtoa_r+0x8bc>
  807dd0:	a03f0c1e 	bne	r20,zero,807a04 <_dtoa_r+0x87c>
  807dd4:	00800434 	movhi	r2,16
  807dd8:	10bfffc4 	addi	r2,r2,-1
  807ddc:	a884703a 	and	r2,r21,r2
  807de0:	103f081e 	bne	r2,zero,807a04 <_dtoa_r+0x87c>
  807de4:	a89ffc2c 	andhi	r2,r21,32752
  807de8:	103f0626 	beq	r2,zero,807a04 <_dtoa_r+0x87c>
  807dec:	d8c01117 	ldw	r3,68(sp)
  807df0:	d9000a17 	ldw	r4,40(sp)
  807df4:	18c00044 	addi	r3,r3,1
  807df8:	21000044 	addi	r4,r4,1
  807dfc:	d8c01115 	stw	r3,68(sp)
  807e00:	d9000a15 	stw	r4,40(sp)
  807e04:	003f0006 	br	807a08 <_dtoa_r+0x880>
  807e08:	d9400717 	ldw	r5,28(sp)
  807e0c:	d9001617 	ldw	r4,88(sp)
  807e10:	080a4b80 	call	80a4b8 <__pow5mult>
  807e14:	d8800715 	stw	r2,28(sp)
  807e18:	003eed06 	br	8079d0 <_dtoa_r+0x848>
  807e1c:	1000021e 	bne	r2,zero,807e28 <_dtoa_r+0xca0>
  807e20:	b880004c 	andi	r2,r23,1
  807e24:	103fc11e 	bne	r2,zero,807d2c <_dtoa_r+0xba4>
  807e28:	b5bfffc4 	addi	r22,r22,-1
  807e2c:	b0c00007 	ldb	r3,0(r22)
  807e30:	00800c04 	movi	r2,48
  807e34:	18bffc26 	beq	r3,r2,807e28 <_dtoa_r+0xca0>
  807e38:	b7000044 	addi	fp,r22,1
  807e3c:	003fcb06 	br	807d6c <_dtoa_r+0xbe4>
  807e40:	d9800d17 	ldw	r6,52(sp)
  807e44:	018fc83a 	sub	r7,zero,r6
  807e48:	3801f726 	beq	r7,zero,808628 <_dtoa_r+0x14a0>
  807e4c:	398003cc 	andi	r6,r7,15
  807e50:	300c90fa 	slli	r6,r6,3
  807e54:	01402074 	movhi	r5,129
  807e58:	29460704 	addi	r5,r5,6172
  807e5c:	d9001217 	ldw	r4,72(sp)
  807e60:	314d883a 	add	r6,r6,r5
  807e64:	30c00117 	ldw	r3,4(r6)
  807e68:	30800017 	ldw	r2,0(r6)
  807e6c:	d9401317 	ldw	r5,76(sp)
  807e70:	3821d13a 	srai	r16,r7,4
  807e74:	100d883a 	mov	r6,r2
  807e78:	180f883a 	mov	r7,r3
  807e7c:	080c4880 	call	80c488 <__muldf3>
  807e80:	1011883a 	mov	r8,r2
  807e84:	1813883a 	mov	r9,r3
  807e88:	1029883a 	mov	r20,r2
  807e8c:	182b883a 	mov	r21,r3
  807e90:	8001e526 	beq	r16,zero,808628 <_dtoa_r+0x14a0>
  807e94:	05800084 	movi	r22,2
  807e98:	04402074 	movhi	r17,129
  807e9c:	8c463904 	addi	r17,r17,6372
  807ea0:	8080004c 	andi	r2,r16,1
  807ea4:	1005003a 	cmpeq	r2,r2,zero
  807ea8:	1000081e 	bne	r2,zero,807ecc <_dtoa_r+0xd44>
  807eac:	89800017 	ldw	r6,0(r17)
  807eb0:	89c00117 	ldw	r7,4(r17)
  807eb4:	480b883a 	mov	r5,r9
  807eb8:	4009883a 	mov	r4,r8
  807ebc:	080c4880 	call	80c488 <__muldf3>
  807ec0:	1011883a 	mov	r8,r2
  807ec4:	b5800044 	addi	r22,r22,1
  807ec8:	1813883a 	mov	r9,r3
  807ecc:	8021d07a 	srai	r16,r16,1
  807ed0:	8c400204 	addi	r17,r17,8
  807ed4:	803ff21e 	bne	r16,zero,807ea0 <_dtoa_r+0xd18>
  807ed8:	4029883a 	mov	r20,r8
  807edc:	482b883a 	mov	r21,r9
  807ee0:	003dca06 	br	80760c <_dtoa_r+0x484>
  807ee4:	d9000817 	ldw	r4,32(sp)
  807ee8:	2005003a 	cmpeq	r2,r4,zero
  807eec:	1001f61e 	bne	r2,zero,8086c8 <_dtoa_r+0x1540>
  807ef0:	dc001117 	ldw	r16,68(sp)
  807ef4:	dc801017 	ldw	r18,64(sp)
  807ef8:	18c10cc4 	addi	r3,r3,1075
  807efc:	003f6106 	br	807c84 <_dtoa_r+0xafc>
  807f00:	d8000b15 	stw	zero,44(sp)
  807f04:	d9802617 	ldw	r6,152(sp)
  807f08:	d8c00d17 	ldw	r3,52(sp)
  807f0c:	30800044 	addi	r2,r6,1
  807f10:	18ad883a 	add	r22,r3,r2
  807f14:	b13fffc4 	addi	r4,r22,-1
  807f18:	d9000e15 	stw	r4,56(sp)
  807f1c:	0581f60e 	bge	zero,r22,8086f8 <_dtoa_r+0x1570>
  807f20:	dd800f15 	stw	r22,60(sp)
  807f24:	003f3006 	br	807be8 <_dtoa_r+0xa60>
  807f28:	d8000b15 	stw	zero,44(sp)
  807f2c:	d9002617 	ldw	r4,152(sp)
  807f30:	0101eb0e 	bge	zero,r4,8086e0 <_dtoa_r+0x1558>
  807f34:	202d883a 	mov	r22,r4
  807f38:	d9000e15 	stw	r4,56(sp)
  807f3c:	d9000f15 	stw	r4,60(sp)
  807f40:	003f2906 	br	807be8 <_dtoa_r+0xa60>
  807f44:	01800044 	movi	r6,1
  807f48:	d9800b15 	stw	r6,44(sp)
  807f4c:	003ff706 	br	807f2c <_dtoa_r+0xda4>
  807f50:	01000044 	movi	r4,1
  807f54:	d9000b15 	stw	r4,44(sp)
  807f58:	003fea06 	br	807f04 <_dtoa_r+0xd7c>
  807f5c:	04000c0e 	bge	zero,r16,807f90 <_dtoa_r+0xe08>
  807f60:	d9400717 	ldw	r5,28(sp)
  807f64:	d9001617 	ldw	r4,88(sp)
  807f68:	01800044 	movi	r6,1
  807f6c:	080a0480 	call	80a048 <__lshift>
  807f70:	1009883a 	mov	r4,r2
  807f74:	900b883a 	mov	r5,r18
  807f78:	d8800715 	stw	r2,28(sp)
  807f7c:	08098600 	call	809860 <__mcmp>
  807f80:	0081e00e 	bge	zero,r2,808704 <_dtoa_r+0x157c>
  807f84:	bdc00044 	addi	r23,r23,1
  807f88:	00800e84 	movi	r2,58
  807f8c:	b881a226 	beq	r23,r2,808618 <_dtoa_r+0x1490>
  807f90:	b7000044 	addi	fp,r22,1
  807f94:	b5c00005 	stb	r23,0(r22)
  807f98:	003f7406 	br	807d6c <_dtoa_r+0xbe4>
  807f9c:	00800e44 	movi	r2,57
  807fa0:	b8819d26 	beq	r23,r2,808618 <_dtoa_r+0x1490>
  807fa4:	053ffa0e 	bge	zero,r20,807f90 <_dtoa_r+0xe08>
  807fa8:	8dc00c44 	addi	r23,r17,49
  807fac:	003ff806 	br	807f90 <_dtoa_r+0xe08>
  807fb0:	d9001617 	ldw	r4,88(sp)
  807fb4:	a80b883a 	mov	r5,r21
  807fb8:	04000044 	movi	r16,1
  807fbc:	08097040 	call	809704 <_Bfree>
  807fc0:	003edf06 	br	807b40 <_dtoa_r+0x9b8>
  807fc4:	d9001617 	ldw	r4,88(sp)
  807fc8:	980b883a 	mov	r5,r19
  807fcc:	01800284 	movi	r6,10
  807fd0:	000f883a 	mov	r7,zero
  807fd4:	080a3b80 	call	80a3b8 <__multadd>
  807fd8:	1027883a 	mov	r19,r2
  807fdc:	d8800615 	stw	r2,24(sp)
  807fe0:	003ebb06 	br	807ad0 <_dtoa_r+0x948>
  807fe4:	d9801117 	ldw	r6,68(sp)
  807fe8:	d8800d17 	ldw	r2,52(sp)
  807fec:	d8000915 	stw	zero,36(sp)
  807ff0:	308dc83a 	sub	r6,r6,r2
  807ff4:	0087c83a 	sub	r3,zero,r2
  807ff8:	d9801115 	stw	r6,68(sp)
  807ffc:	d8c01015 	stw	r3,64(sp)
  808000:	003cfe06 	br	8073fc <_dtoa_r+0x274>
  808004:	018dc83a 	sub	r6,zero,r6
  808008:	d9801115 	stw	r6,68(sp)
  80800c:	d8000a15 	stw	zero,40(sp)
  808010:	003cf306 	br	8073e0 <_dtoa_r+0x258>
  808014:	d9000d17 	ldw	r4,52(sp)
  808018:	080cd4c0 	call	80cd4c <__floatsidf>
  80801c:	880b883a 	mov	r5,r17
  808020:	8009883a 	mov	r4,r16
  808024:	180f883a 	mov	r7,r3
  808028:	100d883a 	mov	r6,r2
  80802c:	080cb2c0 	call	80cb2c <__nedf2>
  808030:	103ce126 	beq	r2,zero,8073b8 <_dtoa_r+0x230>
  808034:	d9800d17 	ldw	r6,52(sp)
  808038:	31bfffc4 	addi	r6,r6,-1
  80803c:	d9800d15 	stw	r6,52(sp)
  808040:	003cdd06 	br	8073b8 <_dtoa_r+0x230>
  808044:	d9000717 	ldw	r4,28(sp)
  808048:	900b883a 	mov	r5,r18
  80804c:	08098600 	call	809860 <__mcmp>
  808050:	103e8d0e 	bge	r2,zero,807a88 <_dtoa_r+0x900>
  808054:	d9400717 	ldw	r5,28(sp)
  808058:	d9001617 	ldw	r4,88(sp)
  80805c:	01800284 	movi	r6,10
  808060:	000f883a 	mov	r7,zero
  808064:	080a3b80 	call	80a3b8 <__multadd>
  808068:	d9800d17 	ldw	r6,52(sp)
  80806c:	d8800715 	stw	r2,28(sp)
  808070:	31bfffc4 	addi	r6,r6,-1
  808074:	d9800d15 	stw	r6,52(sp)
  808078:	b001a71e 	bne	r22,zero,808718 <_dtoa_r+0x1590>
  80807c:	d8800e17 	ldw	r2,56(sp)
  808080:	d8800f15 	stw	r2,60(sp)
  808084:	003e8006 	br	807a88 <_dtoa_r+0x900>
  808088:	90800417 	ldw	r2,16(r18)
  80808c:	1085883a 	add	r2,r2,r2
  808090:	1085883a 	add	r2,r2,r2
  808094:	1485883a 	add	r2,r2,r18
  808098:	11000417 	ldw	r4,16(r2)
  80809c:	080972c0 	call	80972c <__hi0bits>
  8080a0:	00c00804 	movi	r3,32
  8080a4:	1887c83a 	sub	r3,r3,r2
  8080a8:	003e5a06 	br	807a14 <_dtoa_r+0x88c>
  8080ac:	d9400717 	ldw	r5,28(sp)
  8080b0:	d9801017 	ldw	r6,64(sp)
  8080b4:	d9001617 	ldw	r4,88(sp)
  8080b8:	080a4b80 	call	80a4b8 <__pow5mult>
  8080bc:	d8800715 	stw	r2,28(sp)
  8080c0:	003e4306 	br	8079d0 <_dtoa_r+0x848>
  8080c4:	d9800f17 	ldw	r6,60(sp)
  8080c8:	d8800d17 	ldw	r2,52(sp)
  8080cc:	d9800315 	stw	r6,12(sp)
  8080d0:	d8800415 	stw	r2,16(sp)
  8080d4:	d8c00b17 	ldw	r3,44(sp)
  8080d8:	1805003a 	cmpeq	r2,r3,zero
  8080dc:	1000e21e 	bne	r2,zero,808468 <_dtoa_r+0x12e0>
  8080e0:	d9000317 	ldw	r4,12(sp)
  8080e4:	0005883a 	mov	r2,zero
  8080e8:	00cff834 	movhi	r3,16352
  8080ec:	200c90fa 	slli	r6,r4,3
  8080f0:	01002074 	movhi	r4,129
  8080f4:	21060704 	addi	r4,r4,6172
  8080f8:	180b883a 	mov	r5,r3
  8080fc:	310d883a 	add	r6,r6,r4
  808100:	327fff17 	ldw	r9,-4(r6)
  808104:	323ffe17 	ldw	r8,-8(r6)
  808108:	1009883a 	mov	r4,r2
  80810c:	480f883a 	mov	r7,r9
  808110:	400d883a 	mov	r6,r8
  808114:	080c84c0 	call	80c84c <__divdf3>
  808118:	180b883a 	mov	r5,r3
  80811c:	b00d883a 	mov	r6,r22
  808120:	b80f883a 	mov	r7,r23
  808124:	1009883a 	mov	r4,r2
  808128:	080c3940 	call	80c394 <__subdf3>
  80812c:	a80b883a 	mov	r5,r21
  808130:	a009883a 	mov	r4,r20
  808134:	d8c01915 	stw	r3,100(sp)
  808138:	d8801815 	stw	r2,96(sp)
  80813c:	080ce440 	call	80ce44 <__fixdfsi>
  808140:	1009883a 	mov	r4,r2
  808144:	1027883a 	mov	r19,r2
  808148:	080cd4c0 	call	80cd4c <__floatsidf>
  80814c:	a80b883a 	mov	r5,r21
  808150:	a009883a 	mov	r4,r20
  808154:	180f883a 	mov	r7,r3
  808158:	100d883a 	mov	r6,r2
  80815c:	080c3940 	call	80c394 <__subdf3>
  808160:	d9801817 	ldw	r6,96(sp)
  808164:	1823883a 	mov	r17,r3
  808168:	d8801415 	stw	r2,80(sp)
  80816c:	302d883a 	mov	r22,r6
  808170:	d9800517 	ldw	r6,20(sp)
  808174:	9cc00c04 	addi	r19,r19,48
  808178:	dc401515 	stw	r17,84(sp)
  80817c:	d8c01917 	ldw	r3,100(sp)
  808180:	34c00005 	stb	r19,0(r6)
  808184:	d8800517 	ldw	r2,20(sp)
  808188:	d9401917 	ldw	r5,100(sp)
  80818c:	d9801417 	ldw	r6,80(sp)
  808190:	b009883a 	mov	r4,r22
  808194:	880f883a 	mov	r7,r17
  808198:	182f883a 	mov	r23,r3
  80819c:	17000044 	addi	fp,r2,1
  8081a0:	080cbb40 	call	80cbb4 <__gtdf2>
  8081a4:	00804e16 	blt	zero,r2,8082e0 <_dtoa_r+0x1158>
  8081a8:	d9801417 	ldw	r6,80(sp)
  8081ac:	0005883a 	mov	r2,zero
  8081b0:	00cffc34 	movhi	r3,16368
  8081b4:	180b883a 	mov	r5,r3
  8081b8:	880f883a 	mov	r7,r17
  8081bc:	1009883a 	mov	r4,r2
  8081c0:	080c3940 	call	80c394 <__subdf3>
  8081c4:	d9401917 	ldw	r5,100(sp)
  8081c8:	180f883a 	mov	r7,r3
  8081cc:	b009883a 	mov	r4,r22
  8081d0:	100d883a 	mov	r6,r2
  8081d4:	080cbb40 	call	80cbb4 <__gtdf2>
  8081d8:	00bda216 	blt	zero,r2,807864 <_dtoa_r+0x6dc>
  8081dc:	d8c00317 	ldw	r3,12(sp)
  8081e0:	00800044 	movi	r2,1
  8081e4:	10c01216 	blt	r2,r3,808230 <_dtoa_r+0x10a8>
  8081e8:	003d4506 	br	807700 <_dtoa_r+0x578>
  8081ec:	d9801417 	ldw	r6,80(sp)
  8081f0:	0005883a 	mov	r2,zero
  8081f4:	00cffc34 	movhi	r3,16368
  8081f8:	180b883a 	mov	r5,r3
  8081fc:	880f883a 	mov	r7,r17
  808200:	1009883a 	mov	r4,r2
  808204:	080c3940 	call	80c394 <__subdf3>
  808208:	d9c01b17 	ldw	r7,108(sp)
  80820c:	180b883a 	mov	r5,r3
  808210:	1009883a 	mov	r4,r2
  808214:	b00d883a 	mov	r6,r22
  808218:	080ccc40 	call	80ccc4 <__ltdf2>
  80821c:	103d9116 	blt	r2,zero,807864 <_dtoa_r+0x6dc>
  808220:	d9800517 	ldw	r6,20(sp)
  808224:	d9000317 	ldw	r4,12(sp)
  808228:	3105883a 	add	r2,r6,r4
  80822c:	e0bd3426 	beq	fp,r2,807700 <_dtoa_r+0x578>
  808230:	04500934 	movhi	r17,16420
  808234:	0021883a 	mov	r16,zero
  808238:	b80b883a 	mov	r5,r23
  80823c:	b009883a 	mov	r4,r22
  808240:	800d883a 	mov	r6,r16
  808244:	880f883a 	mov	r7,r17
  808248:	080c4880 	call	80c488 <__muldf3>
  80824c:	d9401517 	ldw	r5,84(sp)
  808250:	d9001417 	ldw	r4,80(sp)
  808254:	880f883a 	mov	r7,r17
  808258:	000d883a 	mov	r6,zero
  80825c:	d8801a15 	stw	r2,104(sp)
  808260:	d8c01b15 	stw	r3,108(sp)
  808264:	080c4880 	call	80c488 <__muldf3>
  808268:	180b883a 	mov	r5,r3
  80826c:	1009883a 	mov	r4,r2
  808270:	1823883a 	mov	r17,r3
  808274:	1021883a 	mov	r16,r2
  808278:	080ce440 	call	80ce44 <__fixdfsi>
  80827c:	1009883a 	mov	r4,r2
  808280:	102b883a 	mov	r21,r2
  808284:	080cd4c0 	call	80cd4c <__floatsidf>
  808288:	880b883a 	mov	r5,r17
  80828c:	8009883a 	mov	r4,r16
  808290:	180f883a 	mov	r7,r3
  808294:	100d883a 	mov	r6,r2
  808298:	080c3940 	call	80c394 <__subdf3>
  80829c:	1021883a 	mov	r16,r2
  8082a0:	d9001b17 	ldw	r4,108(sp)
  8082a4:	1823883a 	mov	r17,r3
  8082a8:	dc001415 	stw	r16,80(sp)
  8082ac:	ad400c04 	addi	r21,r21,48
  8082b0:	dc401515 	stw	r17,84(sp)
  8082b4:	d8801a17 	ldw	r2,104(sp)
  8082b8:	e5400005 	stb	r21,0(fp)
  8082bc:	202f883a 	mov	r23,r4
  8082c0:	d9c01b17 	ldw	r7,108(sp)
  8082c4:	d9001417 	ldw	r4,80(sp)
  8082c8:	880b883a 	mov	r5,r17
  8082cc:	100d883a 	mov	r6,r2
  8082d0:	102d883a 	mov	r22,r2
  8082d4:	e7000044 	addi	fp,fp,1
  8082d8:	080ccc40 	call	80ccc4 <__ltdf2>
  8082dc:	103fc30e 	bge	r2,zero,8081ec <_dtoa_r+0x1064>
  8082e0:	d9000417 	ldw	r4,16(sp)
  8082e4:	d9000d15 	stw	r4,52(sp)
  8082e8:	003d7106 	br	8078b0 <_dtoa_r+0x728>
  8082ec:	d9801717 	ldw	r6,92(sp)
  8082f0:	00800084 	movi	r2,2
  8082f4:	11bde60e 	bge	r2,r6,807a90 <_dtoa_r+0x908>
  8082f8:	203cfb1e 	bne	r4,zero,8076e8 <_dtoa_r+0x560>
  8082fc:	d9001617 	ldw	r4,88(sp)
  808300:	900b883a 	mov	r5,r18
  808304:	01800144 	movi	r6,5
  808308:	000f883a 	mov	r7,zero
  80830c:	080a3b80 	call	80a3b8 <__multadd>
  808310:	d9000717 	ldw	r4,28(sp)
  808314:	100b883a 	mov	r5,r2
  808318:	1025883a 	mov	r18,r2
  80831c:	08098600 	call	809860 <__mcmp>
  808320:	00bcf10e 	bge	zero,r2,8076e8 <_dtoa_r+0x560>
  808324:	d8c00d17 	ldw	r3,52(sp)
  808328:	d9000517 	ldw	r4,20(sp)
  80832c:	d8000615 	stw	zero,24(sp)
  808330:	18c00044 	addi	r3,r3,1
  808334:	d8c00d15 	stw	r3,52(sp)
  808338:	00800c44 	movi	r2,49
  80833c:	27000044 	addi	fp,r4,1
  808340:	20800005 	stb	r2,0(r4)
  808344:	003e8906 	br	807d6c <_dtoa_r+0xbe4>
  808348:	d8c00517 	ldw	r3,20(sp)
  80834c:	003bc206 	br	807258 <_dtoa_r+0xd0>
  808350:	01802074 	movhi	r6,129
  808354:	31863904 	addi	r6,r6,6372
  808358:	30c00917 	ldw	r3,36(r6)
  80835c:	30800817 	ldw	r2,32(r6)
  808360:	d9001217 	ldw	r4,72(sp)
  808364:	d9401317 	ldw	r5,76(sp)
  808368:	180f883a 	mov	r7,r3
  80836c:	100d883a 	mov	r6,r2
  808370:	080c84c0 	call	80c84c <__divdf3>
  808374:	948003cc 	andi	r18,r18,15
  808378:	058000c4 	movi	r22,3
  80837c:	1029883a 	mov	r20,r2
  808380:	182b883a 	mov	r21,r3
  808384:	003c8906 	br	8075ac <_dtoa_r+0x424>
  808388:	d9001017 	ldw	r4,64(sp)
  80838c:	d9800917 	ldw	r6,36(sp)
  808390:	0025883a 	mov	r18,zero
  808394:	1105c83a 	sub	r2,r2,r4
  808398:	2089883a 	add	r4,r4,r2
  80839c:	308d883a 	add	r6,r6,r2
  8083a0:	d9001015 	stw	r4,64(sp)
  8083a4:	d9800915 	stw	r6,36(sp)
  8083a8:	003e3206 	br	807c74 <_dtoa_r+0xaec>
  8083ac:	28800044 	addi	r2,r5,1
  8083b0:	27000044 	addi	fp,r4,1
  8083b4:	20800005 	stb	r2,0(r4)
  8083b8:	003e6c06 	br	807d6c <_dtoa_r+0xbe4>
  8083bc:	d8800f17 	ldw	r2,60(sp)
  8083c0:	00bce016 	blt	zero,r2,807744 <_dtoa_r+0x5bc>
  8083c4:	d9800f17 	ldw	r6,60(sp)
  8083c8:	303cc51e 	bne	r6,zero,8076e0 <_dtoa_r+0x558>
  8083cc:	0005883a 	mov	r2,zero
  8083d0:	00d00534 	movhi	r3,16404
  8083d4:	980b883a 	mov	r5,r19
  8083d8:	180f883a 	mov	r7,r3
  8083dc:	9009883a 	mov	r4,r18
  8083e0:	100d883a 	mov	r6,r2
  8083e4:	080c4880 	call	80c488 <__muldf3>
  8083e8:	180b883a 	mov	r5,r3
  8083ec:	a80f883a 	mov	r7,r21
  8083f0:	1009883a 	mov	r4,r2
  8083f4:	a00d883a 	mov	r6,r20
  8083f8:	080cc3c0 	call	80cc3c <__gedf2>
  8083fc:	103cb80e 	bge	r2,zero,8076e0 <_dtoa_r+0x558>
  808400:	0027883a 	mov	r19,zero
  808404:	0025883a 	mov	r18,zero
  808408:	003fc606 	br	808324 <_dtoa_r+0x119c>
  80840c:	99400117 	ldw	r5,4(r19)
  808410:	d9001617 	ldw	r4,88(sp)
  808414:	0809c840 	call	809c84 <_Balloc>
  808418:	99800417 	ldw	r6,16(r19)
  80841c:	11000304 	addi	r4,r2,12
  808420:	99400304 	addi	r5,r19,12
  808424:	318d883a 	add	r6,r6,r6
  808428:	318d883a 	add	r6,r6,r6
  80842c:	31800204 	addi	r6,r6,8
  808430:	1023883a 	mov	r17,r2
  808434:	08095840 	call	809584 <memcpy>
  808438:	d9001617 	ldw	r4,88(sp)
  80843c:	880b883a 	mov	r5,r17
  808440:	01800044 	movi	r6,1
  808444:	080a0480 	call	80a048 <__lshift>
  808448:	100b883a 	mov	r5,r2
  80844c:	003d9c06 	br	807ac0 <_dtoa_r+0x938>
  808450:	00800e44 	movi	r2,57
  808454:	b8807026 	beq	r23,r2,808618 <_dtoa_r+0x1490>
  808458:	b8800044 	addi	r2,r23,1
  80845c:	b7000044 	addi	fp,r22,1
  808460:	b0800005 	stb	r2,0(r22)
  808464:	003e4106 	br	807d6c <_dtoa_r+0xbe4>
  808468:	d8800317 	ldw	r2,12(sp)
  80846c:	01802074 	movhi	r6,129
  808470:	31860704 	addi	r6,r6,6172
  808474:	b009883a 	mov	r4,r22
  808478:	100e90fa 	slli	r7,r2,3
  80847c:	b80b883a 	mov	r5,r23
  808480:	398f883a 	add	r7,r7,r6
  808484:	38bffe17 	ldw	r2,-8(r7)
  808488:	d9800517 	ldw	r6,20(sp)
  80848c:	38ffff17 	ldw	r3,-4(r7)
  808490:	37000044 	addi	fp,r6,1
  808494:	180f883a 	mov	r7,r3
  808498:	100d883a 	mov	r6,r2
  80849c:	080c4880 	call	80c488 <__muldf3>
  8084a0:	a80b883a 	mov	r5,r21
  8084a4:	a009883a 	mov	r4,r20
  8084a8:	182f883a 	mov	r23,r3
  8084ac:	102d883a 	mov	r22,r2
  8084b0:	080ce440 	call	80ce44 <__fixdfsi>
  8084b4:	1009883a 	mov	r4,r2
  8084b8:	1027883a 	mov	r19,r2
  8084bc:	080cd4c0 	call	80cd4c <__floatsidf>
  8084c0:	a80b883a 	mov	r5,r21
  8084c4:	a009883a 	mov	r4,r20
  8084c8:	180f883a 	mov	r7,r3
  8084cc:	100d883a 	mov	r6,r2
  8084d0:	080c3940 	call	80c394 <__subdf3>
  8084d4:	180b883a 	mov	r5,r3
  8084d8:	d8c00517 	ldw	r3,20(sp)
  8084dc:	9cc00c04 	addi	r19,r19,48
  8084e0:	1009883a 	mov	r4,r2
  8084e4:	1cc00005 	stb	r19,0(r3)
  8084e8:	2021883a 	mov	r16,r4
  8084ec:	d9000317 	ldw	r4,12(sp)
  8084f0:	00800044 	movi	r2,1
  8084f4:	2823883a 	mov	r17,r5
  8084f8:	20802226 	beq	r4,r2,808584 <_dtoa_r+0x13fc>
  8084fc:	1029883a 	mov	r20,r2
  808500:	0005883a 	mov	r2,zero
  808504:	00d00934 	movhi	r3,16420
  808508:	180f883a 	mov	r7,r3
  80850c:	100d883a 	mov	r6,r2
  808510:	880b883a 	mov	r5,r17
  808514:	8009883a 	mov	r4,r16
  808518:	080c4880 	call	80c488 <__muldf3>
  80851c:	180b883a 	mov	r5,r3
  808520:	1009883a 	mov	r4,r2
  808524:	1823883a 	mov	r17,r3
  808528:	1021883a 	mov	r16,r2
  80852c:	080ce440 	call	80ce44 <__fixdfsi>
  808530:	1009883a 	mov	r4,r2
  808534:	102b883a 	mov	r21,r2
  808538:	080cd4c0 	call	80cd4c <__floatsidf>
  80853c:	880b883a 	mov	r5,r17
  808540:	8009883a 	mov	r4,r16
  808544:	180f883a 	mov	r7,r3
  808548:	100d883a 	mov	r6,r2
  80854c:	080c3940 	call	80c394 <__subdf3>
  808550:	180b883a 	mov	r5,r3
  808554:	d8c00517 	ldw	r3,20(sp)
  808558:	1009883a 	mov	r4,r2
  80855c:	ad400c04 	addi	r21,r21,48
  808560:	1d05883a 	add	r2,r3,r20
  808564:	15400005 	stb	r21,0(r2)
  808568:	2021883a 	mov	r16,r4
  80856c:	d9000317 	ldw	r4,12(sp)
  808570:	a5000044 	addi	r20,r20,1
  808574:	2823883a 	mov	r17,r5
  808578:	a13fe11e 	bne	r20,r4,808500 <_dtoa_r+0x1378>
  80857c:	e505883a 	add	r2,fp,r20
  808580:	173fffc4 	addi	fp,r2,-1
  808584:	0025883a 	mov	r18,zero
  808588:	04cff834 	movhi	r19,16352
  80858c:	b009883a 	mov	r4,r22
  808590:	b80b883a 	mov	r5,r23
  808594:	900d883a 	mov	r6,r18
  808598:	980f883a 	mov	r7,r19
  80859c:	080c4140 	call	80c414 <__adddf3>
  8085a0:	180b883a 	mov	r5,r3
  8085a4:	1009883a 	mov	r4,r2
  8085a8:	800d883a 	mov	r6,r16
  8085ac:	880f883a 	mov	r7,r17
  8085b0:	080ccc40 	call	80ccc4 <__ltdf2>
  8085b4:	103cab16 	blt	r2,zero,807864 <_dtoa_r+0x6dc>
  8085b8:	0009883a 	mov	r4,zero
  8085bc:	980b883a 	mov	r5,r19
  8085c0:	b80f883a 	mov	r7,r23
  8085c4:	b00d883a 	mov	r6,r22
  8085c8:	080c3940 	call	80c394 <__subdf3>
  8085cc:	180b883a 	mov	r5,r3
  8085d0:	880f883a 	mov	r7,r17
  8085d4:	1009883a 	mov	r4,r2
  8085d8:	800d883a 	mov	r6,r16
  8085dc:	080cbb40 	call	80cbb4 <__gtdf2>
  8085e0:	00bc470e 	bge	zero,r2,807700 <_dtoa_r+0x578>
  8085e4:	00c00c04 	movi	r3,48
  8085e8:	e73fffc4 	addi	fp,fp,-1
  8085ec:	e0800007 	ldb	r2,0(fp)
  8085f0:	10fffd26 	beq	r2,r3,8085e8 <_dtoa_r+0x1460>
  8085f4:	d9800417 	ldw	r6,16(sp)
  8085f8:	e7000044 	addi	fp,fp,1
  8085fc:	d9800d15 	stw	r6,52(sp)
  808600:	003cab06 	br	8078b0 <_dtoa_r+0x728>
  808604:	d8c00f17 	ldw	r3,60(sp)
  808608:	d9001117 	ldw	r4,68(sp)
  80860c:	20e1c83a 	sub	r16,r4,r3
  808610:	0007883a 	mov	r3,zero
  808614:	003d9b06 	br	807c84 <_dtoa_r+0xafc>
  808618:	00800e44 	movi	r2,57
  80861c:	b0800005 	stb	r2,0(r22)
  808620:	b5800044 	addi	r22,r22,1
  808624:	003dc106 	br	807d2c <_dtoa_r+0xba4>
  808628:	05800084 	movi	r22,2
  80862c:	003bf706 	br	80760c <_dtoa_r+0x484>
  808630:	d9000f17 	ldw	r4,60(sp)
  808634:	013c000e 	bge	zero,r4,807638 <_dtoa_r+0x4b0>
  808638:	d9800e17 	ldw	r6,56(sp)
  80863c:	01bc300e 	bge	zero,r6,807700 <_dtoa_r+0x578>
  808640:	0005883a 	mov	r2,zero
  808644:	00d00934 	movhi	r3,16420
  808648:	a80b883a 	mov	r5,r21
  80864c:	180f883a 	mov	r7,r3
  808650:	a009883a 	mov	r4,r20
  808654:	100d883a 	mov	r6,r2
  808658:	080c4880 	call	80c488 <__muldf3>
  80865c:	b1000044 	addi	r4,r22,1
  808660:	1021883a 	mov	r16,r2
  808664:	1823883a 	mov	r17,r3
  808668:	080cd4c0 	call	80cd4c <__floatsidf>
  80866c:	880b883a 	mov	r5,r17
  808670:	8009883a 	mov	r4,r16
  808674:	180f883a 	mov	r7,r3
  808678:	100d883a 	mov	r6,r2
  80867c:	080c4880 	call	80c488 <__muldf3>
  808680:	0011883a 	mov	r8,zero
  808684:	02500734 	movhi	r9,16412
  808688:	180b883a 	mov	r5,r3
  80868c:	480f883a 	mov	r7,r9
  808690:	1009883a 	mov	r4,r2
  808694:	400d883a 	mov	r6,r8
  808698:	080c4140 	call	80c414 <__adddf3>
  80869c:	102d883a 	mov	r22,r2
  8086a0:	00bf3034 	movhi	r2,64704
  8086a4:	10ef883a 	add	r23,r2,r3
  8086a8:	d8800d17 	ldw	r2,52(sp)
  8086ac:	d8c00e17 	ldw	r3,56(sp)
  8086b0:	8029883a 	mov	r20,r16
  8086b4:	10bfffc4 	addi	r2,r2,-1
  8086b8:	882b883a 	mov	r21,r17
  8086bc:	d8800415 	stw	r2,16(sp)
  8086c0:	d8c00315 	stw	r3,12(sp)
  8086c4:	003e8306 	br	8080d4 <_dtoa_r+0xf4c>
  8086c8:	d8800117 	ldw	r2,4(sp)
  8086cc:	dc001117 	ldw	r16,68(sp)
  8086d0:	dc801017 	ldw	r18,64(sp)
  8086d4:	00c00d84 	movi	r3,54
  8086d8:	1887c83a 	sub	r3,r3,r2
  8086dc:	003d6906 	br	807c84 <_dtoa_r+0xafc>
  8086e0:	01800044 	movi	r6,1
  8086e4:	3021883a 	mov	r16,r6
  8086e8:	d9800f15 	stw	r6,60(sp)
  8086ec:	d9802615 	stw	r6,152(sp)
  8086f0:	d9800e15 	stw	r6,56(sp)
  8086f4:	003b9306 	br	807544 <_dtoa_r+0x3bc>
  8086f8:	b021883a 	mov	r16,r22
  8086fc:	dd800f15 	stw	r22,60(sp)
  808700:	003b9006 	br	807544 <_dtoa_r+0x3bc>
  808704:	103e221e 	bne	r2,zero,807f90 <_dtoa_r+0xe08>
  808708:	b880004c 	andi	r2,r23,1
  80870c:	1005003a 	cmpeq	r2,r2,zero
  808710:	103e1f1e 	bne	r2,zero,807f90 <_dtoa_r+0xe08>
  808714:	003e1b06 	br	807f84 <_dtoa_r+0xdfc>
  808718:	d9001617 	ldw	r4,88(sp)
  80871c:	980b883a 	mov	r5,r19
  808720:	01800284 	movi	r6,10
  808724:	000f883a 	mov	r7,zero
  808728:	080a3b80 	call	80a3b8 <__multadd>
  80872c:	d8c00e17 	ldw	r3,56(sp)
  808730:	1027883a 	mov	r19,r2
  808734:	d8c00f15 	stw	r3,60(sp)
  808738:	003cd306 	br	807a88 <_dtoa_r+0x900>

0080873c <_fflush_r>:
  80873c:	defffb04 	addi	sp,sp,-20
  808740:	dcc00315 	stw	r19,12(sp)
  808744:	dc800215 	stw	r18,8(sp)
  808748:	dfc00415 	stw	ra,16(sp)
  80874c:	dc400115 	stw	r17,4(sp)
  808750:	dc000015 	stw	r16,0(sp)
  808754:	2027883a 	mov	r19,r4
  808758:	2825883a 	mov	r18,r5
  80875c:	20000226 	beq	r4,zero,808768 <_fflush_r+0x2c>
  808760:	20800e17 	ldw	r2,56(r4)
  808764:	10005626 	beq	r2,zero,8088c0 <_fflush_r+0x184>
  808768:	9100030b 	ldhu	r4,12(r18)
  80876c:	20ffffcc 	andi	r3,r4,65535
  808770:	18e0001c 	xori	r3,r3,32768
  808774:	18e00004 	addi	r3,r3,-32768
  808778:	1880020c 	andi	r2,r3,8
  80877c:	1000261e 	bne	r2,zero,808818 <_fflush_r+0xdc>
  808780:	90c00117 	ldw	r3,4(r18)
  808784:	20820014 	ori	r2,r4,2048
  808788:	9080030d 	sth	r2,12(r18)
  80878c:	1009883a 	mov	r4,r2
  808790:	00c0400e 	bge	zero,r3,808894 <_fflush_r+0x158>
  808794:	92000a17 	ldw	r8,40(r18)
  808798:	40004026 	beq	r8,zero,80889c <_fflush_r+0x160>
  80879c:	2084000c 	andi	r2,r4,4096
  8087a0:	10005326 	beq	r2,zero,8088f0 <_fflush_r+0x1b4>
  8087a4:	94001417 	ldw	r16,80(r18)
  8087a8:	9080030b 	ldhu	r2,12(r18)
  8087ac:	1080010c 	andi	r2,r2,4
  8087b0:	1000481e 	bne	r2,zero,8088d4 <_fflush_r+0x198>
  8087b4:	91400717 	ldw	r5,28(r18)
  8087b8:	9809883a 	mov	r4,r19
  8087bc:	800d883a 	mov	r6,r16
  8087c0:	000f883a 	mov	r7,zero
  8087c4:	403ee83a 	callr	r8
  8087c8:	8080261e 	bne	r16,r2,808864 <_fflush_r+0x128>
  8087cc:	9080030b 	ldhu	r2,12(r18)
  8087d0:	91000417 	ldw	r4,16(r18)
  8087d4:	90000115 	stw	zero,4(r18)
  8087d8:	10bdffcc 	andi	r2,r2,63487
  8087dc:	10ffffcc 	andi	r3,r2,65535
  8087e0:	18c4000c 	andi	r3,r3,4096
  8087e4:	9080030d 	sth	r2,12(r18)
  8087e8:	91000015 	stw	r4,0(r18)
  8087ec:	18002b26 	beq	r3,zero,80889c <_fflush_r+0x160>
  8087f0:	0007883a 	mov	r3,zero
  8087f4:	1805883a 	mov	r2,r3
  8087f8:	94001415 	stw	r16,80(r18)
  8087fc:	dfc00417 	ldw	ra,16(sp)
  808800:	dcc00317 	ldw	r19,12(sp)
  808804:	dc800217 	ldw	r18,8(sp)
  808808:	dc400117 	ldw	r17,4(sp)
  80880c:	dc000017 	ldw	r16,0(sp)
  808810:	dec00504 	addi	sp,sp,20
  808814:	f800283a 	ret
  808818:	94400417 	ldw	r17,16(r18)
  80881c:	88001f26 	beq	r17,zero,80889c <_fflush_r+0x160>
  808820:	90800017 	ldw	r2,0(r18)
  808824:	18c000cc 	andi	r3,r3,3
  808828:	94400015 	stw	r17,0(r18)
  80882c:	1461c83a 	sub	r16,r2,r17
  808830:	18002526 	beq	r3,zero,8088c8 <_fflush_r+0x18c>
  808834:	0005883a 	mov	r2,zero
  808838:	90800215 	stw	r2,8(r18)
  80883c:	0400170e 	bge	zero,r16,80889c <_fflush_r+0x160>
  808840:	90c00917 	ldw	r3,36(r18)
  808844:	91400717 	ldw	r5,28(r18)
  808848:	880d883a 	mov	r6,r17
  80884c:	800f883a 	mov	r7,r16
  808850:	9809883a 	mov	r4,r19
  808854:	183ee83a 	callr	r3
  808858:	88a3883a 	add	r17,r17,r2
  80885c:	80a1c83a 	sub	r16,r16,r2
  808860:	00bff616 	blt	zero,r2,80883c <_fflush_r+0x100>
  808864:	9080030b 	ldhu	r2,12(r18)
  808868:	00ffffc4 	movi	r3,-1
  80886c:	10801014 	ori	r2,r2,64
  808870:	9080030d 	sth	r2,12(r18)
  808874:	1805883a 	mov	r2,r3
  808878:	dfc00417 	ldw	ra,16(sp)
  80887c:	dcc00317 	ldw	r19,12(sp)
  808880:	dc800217 	ldw	r18,8(sp)
  808884:	dc400117 	ldw	r17,4(sp)
  808888:	dc000017 	ldw	r16,0(sp)
  80888c:	dec00504 	addi	sp,sp,20
  808890:	f800283a 	ret
  808894:	90800f17 	ldw	r2,60(r18)
  808898:	00bfbe16 	blt	zero,r2,808794 <_fflush_r+0x58>
  80889c:	0007883a 	mov	r3,zero
  8088a0:	1805883a 	mov	r2,r3
  8088a4:	dfc00417 	ldw	ra,16(sp)
  8088a8:	dcc00317 	ldw	r19,12(sp)
  8088ac:	dc800217 	ldw	r18,8(sp)
  8088b0:	dc400117 	ldw	r17,4(sp)
  8088b4:	dc000017 	ldw	r16,0(sp)
  8088b8:	dec00504 	addi	sp,sp,20
  8088bc:	f800283a 	ret
  8088c0:	08089d40 	call	8089d4 <__sinit>
  8088c4:	003fa806 	br	808768 <_fflush_r+0x2c>
  8088c8:	90800517 	ldw	r2,20(r18)
  8088cc:	90800215 	stw	r2,8(r18)
  8088d0:	003fda06 	br	80883c <_fflush_r+0x100>
  8088d4:	90800117 	ldw	r2,4(r18)
  8088d8:	90c00c17 	ldw	r3,48(r18)
  8088dc:	80a1c83a 	sub	r16,r16,r2
  8088e0:	183fb426 	beq	r3,zero,8087b4 <_fflush_r+0x78>
  8088e4:	90800f17 	ldw	r2,60(r18)
  8088e8:	80a1c83a 	sub	r16,r16,r2
  8088ec:	003fb106 	br	8087b4 <_fflush_r+0x78>
  8088f0:	91400717 	ldw	r5,28(r18)
  8088f4:	9809883a 	mov	r4,r19
  8088f8:	000d883a 	mov	r6,zero
  8088fc:	01c00044 	movi	r7,1
  808900:	403ee83a 	callr	r8
  808904:	1021883a 	mov	r16,r2
  808908:	00bfffc4 	movi	r2,-1
  80890c:	80800226 	beq	r16,r2,808918 <_fflush_r+0x1dc>
  808910:	92000a17 	ldw	r8,40(r18)
  808914:	003fa406 	br	8087a8 <_fflush_r+0x6c>
  808918:	98c00017 	ldw	r3,0(r19)
  80891c:	00800744 	movi	r2,29
  808920:	18bfde26 	beq	r3,r2,80889c <_fflush_r+0x160>
  808924:	9080030b 	ldhu	r2,12(r18)
  808928:	8007883a 	mov	r3,r16
  80892c:	10801014 	ori	r2,r2,64
  808930:	9080030d 	sth	r2,12(r18)
  808934:	003fcf06 	br	808874 <_fflush_r+0x138>

00808938 <fflush>:
  808938:	01402074 	movhi	r5,129
  80893c:	2961cf04 	addi	r5,r5,-30916
  808940:	2007883a 	mov	r3,r4
  808944:	20000526 	beq	r4,zero,80895c <fflush+0x24>
  808948:	00802074 	movhi	r2,129
  80894c:	108dcb04 	addi	r2,r2,14124
  808950:	11000017 	ldw	r4,0(r2)
  808954:	180b883a 	mov	r5,r3
  808958:	080873c1 	jmpi	80873c <_fflush_r>
  80895c:	00802074 	movhi	r2,129
  808960:	108dcc04 	addi	r2,r2,14128
  808964:	11000017 	ldw	r4,0(r2)
  808968:	08090c81 	jmpi	8090c8 <_fwalk_reent>

0080896c <std>:
  80896c:	00802074 	movhi	r2,129
  808970:	10ab5704 	addi	r2,r2,-21156
  808974:	20800b15 	stw	r2,44(r4)
  808978:	00802074 	movhi	r2,129
  80897c:	10ab9204 	addi	r2,r2,-20920
  808980:	20800815 	stw	r2,32(r4)
  808984:	00c02074 	movhi	r3,129
  808988:	18eb7304 	addi	r3,r3,-21044
  80898c:	00802074 	movhi	r2,129
  808990:	10ab5904 	addi	r2,r2,-21148
  808994:	2140030d 	sth	r5,12(r4)
  808998:	2180038d 	sth	r6,14(r4)
  80899c:	20c00915 	stw	r3,36(r4)
  8089a0:	20800a15 	stw	r2,40(r4)
  8089a4:	20000015 	stw	zero,0(r4)
  8089a8:	20000115 	stw	zero,4(r4)
  8089ac:	20000215 	stw	zero,8(r4)
  8089b0:	20000415 	stw	zero,16(r4)
  8089b4:	20000515 	stw	zero,20(r4)
  8089b8:	20000615 	stw	zero,24(r4)
  8089bc:	21000715 	stw	r4,28(r4)
  8089c0:	f800283a 	ret

008089c4 <__sfp_lock_acquire>:
  8089c4:	f800283a 	ret

008089c8 <__sfp_lock_release>:
  8089c8:	f800283a 	ret

008089cc <__sinit_lock_acquire>:
  8089cc:	f800283a 	ret

008089d0 <__sinit_lock_release>:
  8089d0:	f800283a 	ret

008089d4 <__sinit>:
  8089d4:	20800e17 	ldw	r2,56(r4)
  8089d8:	defffd04 	addi	sp,sp,-12
  8089dc:	dc400115 	stw	r17,4(sp)
  8089e0:	dc000015 	stw	r16,0(sp)
  8089e4:	dfc00215 	stw	ra,8(sp)
  8089e8:	04400044 	movi	r17,1
  8089ec:	01400104 	movi	r5,4
  8089f0:	000d883a 	mov	r6,zero
  8089f4:	2021883a 	mov	r16,r4
  8089f8:	2200bb04 	addi	r8,r4,748
  8089fc:	200f883a 	mov	r7,r4
  808a00:	10000526 	beq	r2,zero,808a18 <__sinit+0x44>
  808a04:	dfc00217 	ldw	ra,8(sp)
  808a08:	dc400117 	ldw	r17,4(sp)
  808a0c:	dc000017 	ldw	r16,0(sp)
  808a10:	dec00304 	addi	sp,sp,12
  808a14:	f800283a 	ret
  808a18:	21000117 	ldw	r4,4(r4)
  808a1c:	00802074 	movhi	r2,129
  808a20:	10a2ae04 	addi	r2,r2,-30024
  808a24:	00c000c4 	movi	r3,3
  808a28:	80800f15 	stw	r2,60(r16)
  808a2c:	80c0b915 	stw	r3,740(r16)
  808a30:	8200ba15 	stw	r8,744(r16)
  808a34:	84400e15 	stw	r17,56(r16)
  808a38:	8000b815 	stw	zero,736(r16)
  808a3c:	080896c0 	call	80896c <std>
  808a40:	81000217 	ldw	r4,8(r16)
  808a44:	880d883a 	mov	r6,r17
  808a48:	800f883a 	mov	r7,r16
  808a4c:	01400284 	movi	r5,10
  808a50:	080896c0 	call	80896c <std>
  808a54:	81000317 	ldw	r4,12(r16)
  808a58:	800f883a 	mov	r7,r16
  808a5c:	01400484 	movi	r5,18
  808a60:	01800084 	movi	r6,2
  808a64:	dfc00217 	ldw	ra,8(sp)
  808a68:	dc400117 	ldw	r17,4(sp)
  808a6c:	dc000017 	ldw	r16,0(sp)
  808a70:	dec00304 	addi	sp,sp,12
  808a74:	080896c1 	jmpi	80896c <std>

00808a78 <__fp_lock>:
  808a78:	0005883a 	mov	r2,zero
  808a7c:	f800283a 	ret

00808a80 <__fp_unlock>:
  808a80:	0005883a 	mov	r2,zero
  808a84:	f800283a 	ret

00808a88 <__fp_unlock_all>:
  808a88:	00802074 	movhi	r2,129
  808a8c:	108dcb04 	addi	r2,r2,14124
  808a90:	11000017 	ldw	r4,0(r2)
  808a94:	01402074 	movhi	r5,129
  808a98:	2962a004 	addi	r5,r5,-30080
  808a9c:	08091901 	jmpi	809190 <_fwalk>

00808aa0 <__fp_lock_all>:
  808aa0:	00802074 	movhi	r2,129
  808aa4:	108dcb04 	addi	r2,r2,14124
  808aa8:	11000017 	ldw	r4,0(r2)
  808aac:	01402074 	movhi	r5,129
  808ab0:	29629e04 	addi	r5,r5,-30088
  808ab4:	08091901 	jmpi	809190 <_fwalk>

00808ab8 <_cleanup_r>:
  808ab8:	01402074 	movhi	r5,129
  808abc:	296c8404 	addi	r5,r5,-19952
  808ac0:	08091901 	jmpi	809190 <_fwalk>

00808ac4 <_cleanup>:
  808ac4:	00802074 	movhi	r2,129
  808ac8:	108dcc04 	addi	r2,r2,14128
  808acc:	11000017 	ldw	r4,0(r2)
  808ad0:	0808ab81 	jmpi	808ab8 <_cleanup_r>

00808ad4 <__sfmoreglue>:
  808ad4:	defffc04 	addi	sp,sp,-16
  808ad8:	dc400115 	stw	r17,4(sp)
  808adc:	2c401724 	muli	r17,r5,92
  808ae0:	dc800215 	stw	r18,8(sp)
  808ae4:	2825883a 	mov	r18,r5
  808ae8:	89400304 	addi	r5,r17,12
  808aec:	dc000015 	stw	r16,0(sp)
  808af0:	dfc00315 	stw	ra,12(sp)
  808af4:	0803dcc0 	call	803dcc <_malloc_r>
  808af8:	0021883a 	mov	r16,zero
  808afc:	880d883a 	mov	r6,r17
  808b00:	000b883a 	mov	r5,zero
  808b04:	10000626 	beq	r2,zero,808b20 <__sfmoreglue+0x4c>
  808b08:	11000304 	addi	r4,r2,12
  808b0c:	14800115 	stw	r18,4(r2)
  808b10:	10000015 	stw	zero,0(r2)
  808b14:	11000215 	stw	r4,8(r2)
  808b18:	1021883a 	mov	r16,r2
  808b1c:	080450c0 	call	80450c <memset>
  808b20:	8005883a 	mov	r2,r16
  808b24:	dfc00317 	ldw	ra,12(sp)
  808b28:	dc800217 	ldw	r18,8(sp)
  808b2c:	dc400117 	ldw	r17,4(sp)
  808b30:	dc000017 	ldw	r16,0(sp)
  808b34:	dec00404 	addi	sp,sp,16
  808b38:	f800283a 	ret

00808b3c <__sfp>:
  808b3c:	defffd04 	addi	sp,sp,-12
  808b40:	00802074 	movhi	r2,129
  808b44:	108dcc04 	addi	r2,r2,14128
  808b48:	dc000015 	stw	r16,0(sp)
  808b4c:	14000017 	ldw	r16,0(r2)
  808b50:	dc400115 	stw	r17,4(sp)
  808b54:	dfc00215 	stw	ra,8(sp)
  808b58:	80800e17 	ldw	r2,56(r16)
  808b5c:	2023883a 	mov	r17,r4
  808b60:	10002626 	beq	r2,zero,808bfc <__sfp+0xc0>
  808b64:	8400b804 	addi	r16,r16,736
  808b68:	80800117 	ldw	r2,4(r16)
  808b6c:	81000217 	ldw	r4,8(r16)
  808b70:	10ffffc4 	addi	r3,r2,-1
  808b74:	18000916 	blt	r3,zero,808b9c <__sfp+0x60>
  808b78:	2080030f 	ldh	r2,12(r4)
  808b7c:	10000b26 	beq	r2,zero,808bac <__sfp+0x70>
  808b80:	017fffc4 	movi	r5,-1
  808b84:	00000206 	br	808b90 <__sfp+0x54>
  808b88:	2080030f 	ldh	r2,12(r4)
  808b8c:	10000726 	beq	r2,zero,808bac <__sfp+0x70>
  808b90:	18ffffc4 	addi	r3,r3,-1
  808b94:	21001704 	addi	r4,r4,92
  808b98:	197ffb1e 	bne	r3,r5,808b88 <__sfp+0x4c>
  808b9c:	80800017 	ldw	r2,0(r16)
  808ba0:	10001926 	beq	r2,zero,808c08 <__sfp+0xcc>
  808ba4:	1021883a 	mov	r16,r2
  808ba8:	003fef06 	br	808b68 <__sfp+0x2c>
  808bac:	00bfffc4 	movi	r2,-1
  808bb0:	00c00044 	movi	r3,1
  808bb4:	2080038d 	sth	r2,14(r4)
  808bb8:	20c0030d 	sth	r3,12(r4)
  808bbc:	20000015 	stw	zero,0(r4)
  808bc0:	20000215 	stw	zero,8(r4)
  808bc4:	20000115 	stw	zero,4(r4)
  808bc8:	20000415 	stw	zero,16(r4)
  808bcc:	20000515 	stw	zero,20(r4)
  808bd0:	20000615 	stw	zero,24(r4)
  808bd4:	20000c15 	stw	zero,48(r4)
  808bd8:	20000d15 	stw	zero,52(r4)
  808bdc:	20001115 	stw	zero,68(r4)
  808be0:	20001215 	stw	zero,72(r4)
  808be4:	2005883a 	mov	r2,r4
  808be8:	dfc00217 	ldw	ra,8(sp)
  808bec:	dc400117 	ldw	r17,4(sp)
  808bf0:	dc000017 	ldw	r16,0(sp)
  808bf4:	dec00304 	addi	sp,sp,12
  808bf8:	f800283a 	ret
  808bfc:	8009883a 	mov	r4,r16
  808c00:	08089d40 	call	8089d4 <__sinit>
  808c04:	003fd706 	br	808b64 <__sfp+0x28>
  808c08:	8809883a 	mov	r4,r17
  808c0c:	01400104 	movi	r5,4
  808c10:	0808ad40 	call	808ad4 <__sfmoreglue>
  808c14:	80800015 	stw	r2,0(r16)
  808c18:	103fe21e 	bne	r2,zero,808ba4 <__sfp+0x68>
  808c1c:	00800304 	movi	r2,12
  808c20:	0009883a 	mov	r4,zero
  808c24:	88800015 	stw	r2,0(r17)
  808c28:	003fee06 	br	808be4 <__sfp+0xa8>

00808c2c <__sfvwrite_r>:
  808c2c:	30800217 	ldw	r2,8(r6)
  808c30:	defff504 	addi	sp,sp,-44
  808c34:	df000915 	stw	fp,36(sp)
  808c38:	dd800715 	stw	r22,28(sp)
  808c3c:	dc800315 	stw	r18,12(sp)
  808c40:	dfc00a15 	stw	ra,40(sp)
  808c44:	ddc00815 	stw	r23,32(sp)
  808c48:	dd400615 	stw	r21,24(sp)
  808c4c:	dd000515 	stw	r20,20(sp)
  808c50:	dcc00415 	stw	r19,16(sp)
  808c54:	dc400215 	stw	r17,8(sp)
  808c58:	dc000115 	stw	r16,4(sp)
  808c5c:	302d883a 	mov	r22,r6
  808c60:	2039883a 	mov	fp,r4
  808c64:	2825883a 	mov	r18,r5
  808c68:	10001c26 	beq	r2,zero,808cdc <__sfvwrite_r+0xb0>
  808c6c:	29c0030b 	ldhu	r7,12(r5)
  808c70:	3880020c 	andi	r2,r7,8
  808c74:	10002726 	beq	r2,zero,808d14 <__sfvwrite_r+0xe8>
  808c78:	28800417 	ldw	r2,16(r5)
  808c7c:	10002526 	beq	r2,zero,808d14 <__sfvwrite_r+0xe8>
  808c80:	3880008c 	andi	r2,r7,2
  808c84:	b5400017 	ldw	r21,0(r22)
  808c88:	10002826 	beq	r2,zero,808d2c <__sfvwrite_r+0x100>
  808c8c:	0021883a 	mov	r16,zero
  808c90:	0023883a 	mov	r17,zero
  808c94:	880d883a 	mov	r6,r17
  808c98:	e009883a 	mov	r4,fp
  808c9c:	00810004 	movi	r2,1024
  808ca0:	80006e26 	beq	r16,zero,808e5c <__sfvwrite_r+0x230>
  808ca4:	800f883a 	mov	r7,r16
  808ca8:	91400717 	ldw	r5,28(r18)
  808cac:	1400012e 	bgeu	r2,r16,808cb4 <__sfvwrite_r+0x88>
  808cb0:	100f883a 	mov	r7,r2
  808cb4:	90c00917 	ldw	r3,36(r18)
  808cb8:	183ee83a 	callr	r3
  808cbc:	1007883a 	mov	r3,r2
  808cc0:	80a1c83a 	sub	r16,r16,r2
  808cc4:	88a3883a 	add	r17,r17,r2
  808cc8:	00806d0e 	bge	zero,r2,808e80 <__sfvwrite_r+0x254>
  808ccc:	b0800217 	ldw	r2,8(r22)
  808cd0:	10c5c83a 	sub	r2,r2,r3
  808cd4:	b0800215 	stw	r2,8(r22)
  808cd8:	103fee1e 	bne	r2,zero,808c94 <__sfvwrite_r+0x68>
  808cdc:	0009883a 	mov	r4,zero
  808ce0:	2005883a 	mov	r2,r4
  808ce4:	dfc00a17 	ldw	ra,40(sp)
  808ce8:	df000917 	ldw	fp,36(sp)
  808cec:	ddc00817 	ldw	r23,32(sp)
  808cf0:	dd800717 	ldw	r22,28(sp)
  808cf4:	dd400617 	ldw	r21,24(sp)
  808cf8:	dd000517 	ldw	r20,20(sp)
  808cfc:	dcc00417 	ldw	r19,16(sp)
  808d00:	dc800317 	ldw	r18,12(sp)
  808d04:	dc400217 	ldw	r17,8(sp)
  808d08:	dc000117 	ldw	r16,4(sp)
  808d0c:	dec00b04 	addi	sp,sp,44
  808d10:	f800283a 	ret
  808d14:	0806e340 	call	806e34 <__swsetup_r>
  808d18:	1000e41e 	bne	r2,zero,8090ac <__sfvwrite_r+0x480>
  808d1c:	91c0030b 	ldhu	r7,12(r18)
  808d20:	b5400017 	ldw	r21,0(r22)
  808d24:	3880008c 	andi	r2,r7,2
  808d28:	103fd81e 	bne	r2,zero,808c8c <__sfvwrite_r+0x60>
  808d2c:	3880004c 	andi	r2,r7,1
  808d30:	1005003a 	cmpeq	r2,r2,zero
  808d34:	10005726 	beq	r2,zero,808e94 <__sfvwrite_r+0x268>
  808d38:	0029883a 	mov	r20,zero
  808d3c:	002f883a 	mov	r23,zero
  808d40:	a0004226 	beq	r20,zero,808e4c <__sfvwrite_r+0x220>
  808d44:	3880800c 	andi	r2,r7,512
  808d48:	94000217 	ldw	r16,8(r18)
  808d4c:	10008b26 	beq	r2,zero,808f7c <__sfvwrite_r+0x350>
  808d50:	800d883a 	mov	r6,r16
  808d54:	a400a536 	bltu	r20,r16,808fec <__sfvwrite_r+0x3c0>
  808d58:	3881200c 	andi	r2,r7,1152
  808d5c:	10002726 	beq	r2,zero,808dfc <__sfvwrite_r+0x1d0>
  808d60:	90800517 	ldw	r2,20(r18)
  808d64:	92000417 	ldw	r8,16(r18)
  808d68:	91400017 	ldw	r5,0(r18)
  808d6c:	1087883a 	add	r3,r2,r2
  808d70:	1887883a 	add	r3,r3,r2
  808d74:	1808d7fa 	srli	r4,r3,31
  808d78:	2a21c83a 	sub	r16,r5,r8
  808d7c:	80800044 	addi	r2,r16,1
  808d80:	20c9883a 	add	r4,r4,r3
  808d84:	2027d07a 	srai	r19,r4,1
  808d88:	a085883a 	add	r2,r20,r2
  808d8c:	980d883a 	mov	r6,r19
  808d90:	9880022e 	bgeu	r19,r2,808d9c <__sfvwrite_r+0x170>
  808d94:	1027883a 	mov	r19,r2
  808d98:	100d883a 	mov	r6,r2
  808d9c:	3881000c 	andi	r2,r7,1024
  808da0:	1000b826 	beq	r2,zero,809084 <__sfvwrite_r+0x458>
  808da4:	300b883a 	mov	r5,r6
  808da8:	e009883a 	mov	r4,fp
  808dac:	0803dcc0 	call	803dcc <_malloc_r>
  808db0:	10003126 	beq	r2,zero,808e78 <__sfvwrite_r+0x24c>
  808db4:	91400417 	ldw	r5,16(r18)
  808db8:	1009883a 	mov	r4,r2
  808dbc:	800d883a 	mov	r6,r16
  808dc0:	1023883a 	mov	r17,r2
  808dc4:	08095840 	call	809584 <memcpy>
  808dc8:	90c0030b 	ldhu	r3,12(r18)
  808dcc:	00beffc4 	movi	r2,-1025
  808dd0:	1886703a 	and	r3,r3,r2
  808dd4:	18c02014 	ori	r3,r3,128
  808dd8:	90c0030d 	sth	r3,12(r18)
  808ddc:	9c07c83a 	sub	r3,r19,r16
  808de0:	8c05883a 	add	r2,r17,r16
  808de4:	a00d883a 	mov	r6,r20
  808de8:	a021883a 	mov	r16,r20
  808dec:	90800015 	stw	r2,0(r18)
  808df0:	90c00215 	stw	r3,8(r18)
  808df4:	94400415 	stw	r17,16(r18)
  808df8:	94c00515 	stw	r19,20(r18)
  808dfc:	91000017 	ldw	r4,0(r18)
  808e00:	b80b883a 	mov	r5,r23
  808e04:	a023883a 	mov	r17,r20
  808e08:	08096240 	call	809624 <memmove>
  808e0c:	90c00217 	ldw	r3,8(r18)
  808e10:	90800017 	ldw	r2,0(r18)
  808e14:	a027883a 	mov	r19,r20
  808e18:	1c07c83a 	sub	r3,r3,r16
  808e1c:	1405883a 	add	r2,r2,r16
  808e20:	90c00215 	stw	r3,8(r18)
  808e24:	a021883a 	mov	r16,r20
  808e28:	90800015 	stw	r2,0(r18)
  808e2c:	b0800217 	ldw	r2,8(r22)
  808e30:	1405c83a 	sub	r2,r2,r16
  808e34:	b0800215 	stw	r2,8(r22)
  808e38:	103fa826 	beq	r2,zero,808cdc <__sfvwrite_r+0xb0>
  808e3c:	a469c83a 	sub	r20,r20,r17
  808e40:	91c0030b 	ldhu	r7,12(r18)
  808e44:	bcef883a 	add	r23,r23,r19
  808e48:	a03fbe1e 	bne	r20,zero,808d44 <__sfvwrite_r+0x118>
  808e4c:	adc00017 	ldw	r23,0(r21)
  808e50:	ad000117 	ldw	r20,4(r21)
  808e54:	ad400204 	addi	r21,r21,8
  808e58:	003fb906 	br	808d40 <__sfvwrite_r+0x114>
  808e5c:	ac400017 	ldw	r17,0(r21)
  808e60:	ac000117 	ldw	r16,4(r21)
  808e64:	ad400204 	addi	r21,r21,8
  808e68:	003f8a06 	br	808c94 <__sfvwrite_r+0x68>
  808e6c:	91400417 	ldw	r5,16(r18)
  808e70:	e009883a 	mov	r4,fp
  808e74:	0804bf80 	call	804bf8 <_free_r>
  808e78:	00800304 	movi	r2,12
  808e7c:	e0800015 	stw	r2,0(fp)
  808e80:	9080030b 	ldhu	r2,12(r18)
  808e84:	013fffc4 	movi	r4,-1
  808e88:	10801014 	ori	r2,r2,64
  808e8c:	9080030d 	sth	r2,12(r18)
  808e90:	003f9306 	br	808ce0 <__sfvwrite_r+0xb4>
  808e94:	0027883a 	mov	r19,zero
  808e98:	002f883a 	mov	r23,zero
  808e9c:	d8000015 	stw	zero,0(sp)
  808ea0:	0029883a 	mov	r20,zero
  808ea4:	98001e26 	beq	r19,zero,808f20 <__sfvwrite_r+0x2f4>
  808ea8:	d8c00017 	ldw	r3,0(sp)
  808eac:	1804c03a 	cmpne	r2,r3,zero
  808eb0:	10005e26 	beq	r2,zero,80902c <__sfvwrite_r+0x400>
  808eb4:	9821883a 	mov	r16,r19
  808eb8:	a4c0012e 	bgeu	r20,r19,808ec0 <__sfvwrite_r+0x294>
  808ebc:	a021883a 	mov	r16,r20
  808ec0:	91000017 	ldw	r4,0(r18)
  808ec4:	90800417 	ldw	r2,16(r18)
  808ec8:	91800217 	ldw	r6,8(r18)
  808ecc:	91c00517 	ldw	r7,20(r18)
  808ed0:	1100022e 	bgeu	r2,r4,808edc <__sfvwrite_r+0x2b0>
  808ed4:	31e3883a 	add	r17,r6,r7
  808ed8:	8c001616 	blt	r17,r16,808f34 <__sfvwrite_r+0x308>
  808edc:	81c03816 	blt	r16,r7,808fc0 <__sfvwrite_r+0x394>
  808ee0:	90c00917 	ldw	r3,36(r18)
  808ee4:	91400717 	ldw	r5,28(r18)
  808ee8:	e009883a 	mov	r4,fp
  808eec:	b80d883a 	mov	r6,r23
  808ef0:	183ee83a 	callr	r3
  808ef4:	1023883a 	mov	r17,r2
  808ef8:	00bfe10e 	bge	zero,r2,808e80 <__sfvwrite_r+0x254>
  808efc:	a469c83a 	sub	r20,r20,r17
  808f00:	a0001826 	beq	r20,zero,808f64 <__sfvwrite_r+0x338>
  808f04:	b0800217 	ldw	r2,8(r22)
  808f08:	1445c83a 	sub	r2,r2,r17
  808f0c:	b0800215 	stw	r2,8(r22)
  808f10:	103f7226 	beq	r2,zero,808cdc <__sfvwrite_r+0xb0>
  808f14:	9c67c83a 	sub	r19,r19,r17
  808f18:	bc6f883a 	add	r23,r23,r17
  808f1c:	983fe21e 	bne	r19,zero,808ea8 <__sfvwrite_r+0x27c>
  808f20:	adc00017 	ldw	r23,0(r21)
  808f24:	acc00117 	ldw	r19,4(r21)
  808f28:	ad400204 	addi	r21,r21,8
  808f2c:	d8000015 	stw	zero,0(sp)
  808f30:	003fdc06 	br	808ea4 <__sfvwrite_r+0x278>
  808f34:	b80b883a 	mov	r5,r23
  808f38:	880d883a 	mov	r6,r17
  808f3c:	08096240 	call	809624 <memmove>
  808f40:	90c00017 	ldw	r3,0(r18)
  808f44:	e009883a 	mov	r4,fp
  808f48:	900b883a 	mov	r5,r18
  808f4c:	1c47883a 	add	r3,r3,r17
  808f50:	90c00015 	stw	r3,0(r18)
  808f54:	080873c0 	call	80873c <_fflush_r>
  808f58:	103fc91e 	bne	r2,zero,808e80 <__sfvwrite_r+0x254>
  808f5c:	a469c83a 	sub	r20,r20,r17
  808f60:	a03fe81e 	bne	r20,zero,808f04 <__sfvwrite_r+0x2d8>
  808f64:	e009883a 	mov	r4,fp
  808f68:	900b883a 	mov	r5,r18
  808f6c:	080873c0 	call	80873c <_fflush_r>
  808f70:	103fc31e 	bne	r2,zero,808e80 <__sfvwrite_r+0x254>
  808f74:	d8000015 	stw	zero,0(sp)
  808f78:	003fe206 	br	808f04 <__sfvwrite_r+0x2d8>
  808f7c:	91000017 	ldw	r4,0(r18)
  808f80:	90800417 	ldw	r2,16(r18)
  808f84:	1100022e 	bgeu	r2,r4,808f90 <__sfvwrite_r+0x364>
  808f88:	8023883a 	mov	r17,r16
  808f8c:	85003136 	bltu	r16,r20,809054 <__sfvwrite_r+0x428>
  808f90:	91c00517 	ldw	r7,20(r18)
  808f94:	a1c01836 	bltu	r20,r7,808ff8 <__sfvwrite_r+0x3cc>
  808f98:	90c00917 	ldw	r3,36(r18)
  808f9c:	91400717 	ldw	r5,28(r18)
  808fa0:	e009883a 	mov	r4,fp
  808fa4:	b80d883a 	mov	r6,r23
  808fa8:	183ee83a 	callr	r3
  808fac:	1021883a 	mov	r16,r2
  808fb0:	00bfb30e 	bge	zero,r2,808e80 <__sfvwrite_r+0x254>
  808fb4:	1023883a 	mov	r17,r2
  808fb8:	1027883a 	mov	r19,r2
  808fbc:	003f9b06 	br	808e2c <__sfvwrite_r+0x200>
  808fc0:	b80b883a 	mov	r5,r23
  808fc4:	800d883a 	mov	r6,r16
  808fc8:	08096240 	call	809624 <memmove>
  808fcc:	90c00217 	ldw	r3,8(r18)
  808fd0:	90800017 	ldw	r2,0(r18)
  808fd4:	8023883a 	mov	r17,r16
  808fd8:	1c07c83a 	sub	r3,r3,r16
  808fdc:	1405883a 	add	r2,r2,r16
  808fe0:	90c00215 	stw	r3,8(r18)
  808fe4:	90800015 	stw	r2,0(r18)
  808fe8:	003fc406 	br	808efc <__sfvwrite_r+0x2d0>
  808fec:	a00d883a 	mov	r6,r20
  808ff0:	a021883a 	mov	r16,r20
  808ff4:	003f8106 	br	808dfc <__sfvwrite_r+0x1d0>
  808ff8:	b80b883a 	mov	r5,r23
  808ffc:	a00d883a 	mov	r6,r20
  809000:	08096240 	call	809624 <memmove>
  809004:	90c00217 	ldw	r3,8(r18)
  809008:	90800017 	ldw	r2,0(r18)
  80900c:	a021883a 	mov	r16,r20
  809010:	1d07c83a 	sub	r3,r3,r20
  809014:	1505883a 	add	r2,r2,r20
  809018:	a023883a 	mov	r17,r20
  80901c:	a027883a 	mov	r19,r20
  809020:	90c00215 	stw	r3,8(r18)
  809024:	90800015 	stw	r2,0(r18)
  809028:	003f8006 	br	808e2c <__sfvwrite_r+0x200>
  80902c:	b809883a 	mov	r4,r23
  809030:	01400284 	movi	r5,10
  809034:	980d883a 	mov	r6,r19
  809038:	08094a00 	call	8094a0 <memchr>
  80903c:	10001726 	beq	r2,zero,80909c <__sfvwrite_r+0x470>
  809040:	15c5c83a 	sub	r2,r2,r23
  809044:	15000044 	addi	r20,r2,1
  809048:	00800044 	movi	r2,1
  80904c:	d8800015 	stw	r2,0(sp)
  809050:	003f9806 	br	808eb4 <__sfvwrite_r+0x288>
  809054:	b80b883a 	mov	r5,r23
  809058:	800d883a 	mov	r6,r16
  80905c:	08096240 	call	809624 <memmove>
  809060:	90c00017 	ldw	r3,0(r18)
  809064:	e009883a 	mov	r4,fp
  809068:	900b883a 	mov	r5,r18
  80906c:	1c07883a 	add	r3,r3,r16
  809070:	90c00015 	stw	r3,0(r18)
  809074:	8027883a 	mov	r19,r16
  809078:	080873c0 	call	80873c <_fflush_r>
  80907c:	103f6b26 	beq	r2,zero,808e2c <__sfvwrite_r+0x200>
  809080:	003f7f06 	br	808e80 <__sfvwrite_r+0x254>
  809084:	400b883a 	mov	r5,r8
  809088:	e009883a 	mov	r4,fp
  80908c:	080a6f80 	call	80a6f8 <_realloc_r>
  809090:	103f7626 	beq	r2,zero,808e6c <__sfvwrite_r+0x240>
  809094:	1023883a 	mov	r17,r2
  809098:	003f5006 	br	808ddc <__sfvwrite_r+0x1b0>
  80909c:	00c00044 	movi	r3,1
  8090a0:	9d000044 	addi	r20,r19,1
  8090a4:	d8c00015 	stw	r3,0(sp)
  8090a8:	003f8206 	br	808eb4 <__sfvwrite_r+0x288>
  8090ac:	9080030b 	ldhu	r2,12(r18)
  8090b0:	00c00244 	movi	r3,9
  8090b4:	013fffc4 	movi	r4,-1
  8090b8:	10801014 	ori	r2,r2,64
  8090bc:	9080030d 	sth	r2,12(r18)
  8090c0:	e0c00015 	stw	r3,0(fp)
  8090c4:	003f0606 	br	808ce0 <__sfvwrite_r+0xb4>

008090c8 <_fwalk_reent>:
  8090c8:	defff704 	addi	sp,sp,-36
  8090cc:	dcc00315 	stw	r19,12(sp)
  8090d0:	24c0b804 	addi	r19,r4,736
  8090d4:	dd800615 	stw	r22,24(sp)
  8090d8:	dd400515 	stw	r21,20(sp)
  8090dc:	dfc00815 	stw	ra,32(sp)
  8090e0:	ddc00715 	stw	r23,28(sp)
  8090e4:	dd000415 	stw	r20,16(sp)
  8090e8:	dc800215 	stw	r18,8(sp)
  8090ec:	dc400115 	stw	r17,4(sp)
  8090f0:	dc000015 	stw	r16,0(sp)
  8090f4:	202b883a 	mov	r21,r4
  8090f8:	282d883a 	mov	r22,r5
  8090fc:	08089c40 	call	8089c4 <__sfp_lock_acquire>
  809100:	98002126 	beq	r19,zero,809188 <_fwalk_reent+0xc0>
  809104:	002f883a 	mov	r23,zero
  809108:	9c800117 	ldw	r18,4(r19)
  80910c:	9c000217 	ldw	r16,8(r19)
  809110:	90bfffc4 	addi	r2,r18,-1
  809114:	10000d16 	blt	r2,zero,80914c <_fwalk_reent+0x84>
  809118:	0023883a 	mov	r17,zero
  80911c:	053fffc4 	movi	r20,-1
  809120:	8080030f 	ldh	r2,12(r16)
  809124:	8c400044 	addi	r17,r17,1
  809128:	10000626 	beq	r2,zero,809144 <_fwalk_reent+0x7c>
  80912c:	8080038f 	ldh	r2,14(r16)
  809130:	800b883a 	mov	r5,r16
  809134:	a809883a 	mov	r4,r21
  809138:	15000226 	beq	r2,r20,809144 <_fwalk_reent+0x7c>
  80913c:	b03ee83a 	callr	r22
  809140:	b8aeb03a 	or	r23,r23,r2
  809144:	84001704 	addi	r16,r16,92
  809148:	947ff51e 	bne	r18,r17,809120 <_fwalk_reent+0x58>
  80914c:	9cc00017 	ldw	r19,0(r19)
  809150:	983fed1e 	bne	r19,zero,809108 <_fwalk_reent+0x40>
  809154:	08089c80 	call	8089c8 <__sfp_lock_release>
  809158:	b805883a 	mov	r2,r23
  80915c:	dfc00817 	ldw	ra,32(sp)
  809160:	ddc00717 	ldw	r23,28(sp)
  809164:	dd800617 	ldw	r22,24(sp)
  809168:	dd400517 	ldw	r21,20(sp)
  80916c:	dd000417 	ldw	r20,16(sp)
  809170:	dcc00317 	ldw	r19,12(sp)
  809174:	dc800217 	ldw	r18,8(sp)
  809178:	dc400117 	ldw	r17,4(sp)
  80917c:	dc000017 	ldw	r16,0(sp)
  809180:	dec00904 	addi	sp,sp,36
  809184:	f800283a 	ret
  809188:	002f883a 	mov	r23,zero
  80918c:	003ff106 	br	809154 <_fwalk_reent+0x8c>

00809190 <_fwalk>:
  809190:	defff804 	addi	sp,sp,-32
  809194:	dcc00315 	stw	r19,12(sp)
  809198:	24c0b804 	addi	r19,r4,736
  80919c:	dd400515 	stw	r21,20(sp)
  8091a0:	dfc00715 	stw	ra,28(sp)
  8091a4:	dd800615 	stw	r22,24(sp)
  8091a8:	dd000415 	stw	r20,16(sp)
  8091ac:	dc800215 	stw	r18,8(sp)
  8091b0:	dc400115 	stw	r17,4(sp)
  8091b4:	dc000015 	stw	r16,0(sp)
  8091b8:	282b883a 	mov	r21,r5
  8091bc:	08089c40 	call	8089c4 <__sfp_lock_acquire>
  8091c0:	98001f26 	beq	r19,zero,809240 <_fwalk+0xb0>
  8091c4:	002d883a 	mov	r22,zero
  8091c8:	9c800117 	ldw	r18,4(r19)
  8091cc:	9c000217 	ldw	r16,8(r19)
  8091d0:	90bfffc4 	addi	r2,r18,-1
  8091d4:	10000c16 	blt	r2,zero,809208 <_fwalk+0x78>
  8091d8:	0023883a 	mov	r17,zero
  8091dc:	053fffc4 	movi	r20,-1
  8091e0:	8080030f 	ldh	r2,12(r16)
  8091e4:	8c400044 	addi	r17,r17,1
  8091e8:	10000526 	beq	r2,zero,809200 <_fwalk+0x70>
  8091ec:	8080038f 	ldh	r2,14(r16)
  8091f0:	8009883a 	mov	r4,r16
  8091f4:	15000226 	beq	r2,r20,809200 <_fwalk+0x70>
  8091f8:	a83ee83a 	callr	r21
  8091fc:	b0acb03a 	or	r22,r22,r2
  809200:	84001704 	addi	r16,r16,92
  809204:	947ff61e 	bne	r18,r17,8091e0 <_fwalk+0x50>
  809208:	9cc00017 	ldw	r19,0(r19)
  80920c:	983fee1e 	bne	r19,zero,8091c8 <_fwalk+0x38>
  809210:	08089c80 	call	8089c8 <__sfp_lock_release>
  809214:	b005883a 	mov	r2,r22
  809218:	dfc00717 	ldw	ra,28(sp)
  80921c:	dd800617 	ldw	r22,24(sp)
  809220:	dd400517 	ldw	r21,20(sp)
  809224:	dd000417 	ldw	r20,16(sp)
  809228:	dcc00317 	ldw	r19,12(sp)
  80922c:	dc800217 	ldw	r18,8(sp)
  809230:	dc400117 	ldw	r17,4(sp)
  809234:	dc000017 	ldw	r16,0(sp)
  809238:	dec00804 	addi	sp,sp,32
  80923c:	f800283a 	ret
  809240:	002d883a 	mov	r22,zero
  809244:	003ff206 	br	809210 <_fwalk+0x80>

00809248 <__locale_charset>:
  809248:	d0a07317 	ldw	r2,-32308(gp)
  80924c:	f800283a 	ret

00809250 <_localeconv_r>:
  809250:	00802074 	movhi	r2,129
  809254:	1085fb04 	addi	r2,r2,6124
  809258:	f800283a 	ret

0080925c <localeconv>:
  80925c:	00802074 	movhi	r2,129
  809260:	108dcb04 	addi	r2,r2,14124
  809264:	11000017 	ldw	r4,0(r2)
  809268:	08092501 	jmpi	809250 <_localeconv_r>

0080926c <_setlocale_r>:
  80926c:	defffc04 	addi	sp,sp,-16
  809270:	00c02074 	movhi	r3,129
  809274:	18c5d204 	addi	r3,r3,5960
  809278:	dc800215 	stw	r18,8(sp)
  80927c:	dc400115 	stw	r17,4(sp)
  809280:	dc000015 	stw	r16,0(sp)
  809284:	2023883a 	mov	r17,r4
  809288:	2825883a 	mov	r18,r5
  80928c:	dfc00315 	stw	ra,12(sp)
  809290:	3021883a 	mov	r16,r6
  809294:	3009883a 	mov	r4,r6
  809298:	180b883a 	mov	r5,r3
  80929c:	30000926 	beq	r6,zero,8092c4 <_setlocale_r+0x58>
  8092a0:	080aea80 	call	80aea8 <strcmp>
  8092a4:	8009883a 	mov	r4,r16
  8092a8:	01402074 	movhi	r5,129
  8092ac:	2945e204 	addi	r5,r5,6024
  8092b0:	10000b1e 	bne	r2,zero,8092e0 <_setlocale_r+0x74>
  8092b4:	8c000d15 	stw	r16,52(r17)
  8092b8:	8c800c15 	stw	r18,48(r17)
  8092bc:	00c02074 	movhi	r3,129
  8092c0:	18c5d204 	addi	r3,r3,5960
  8092c4:	1805883a 	mov	r2,r3
  8092c8:	dfc00317 	ldw	ra,12(sp)
  8092cc:	dc800217 	ldw	r18,8(sp)
  8092d0:	dc400117 	ldw	r17,4(sp)
  8092d4:	dc000017 	ldw	r16,0(sp)
  8092d8:	dec00404 	addi	sp,sp,16
  8092dc:	f800283a 	ret
  8092e0:	080aea80 	call	80aea8 <strcmp>
  8092e4:	0007883a 	mov	r3,zero
  8092e8:	103ff226 	beq	r2,zero,8092b4 <_setlocale_r+0x48>
  8092ec:	003ff506 	br	8092c4 <_setlocale_r+0x58>

008092f0 <setlocale>:
  8092f0:	01802074 	movhi	r6,129
  8092f4:	318dcb04 	addi	r6,r6,14124
  8092f8:	2007883a 	mov	r3,r4
  8092fc:	31000017 	ldw	r4,0(r6)
  809300:	280d883a 	mov	r6,r5
  809304:	180b883a 	mov	r5,r3
  809308:	080926c1 	jmpi	80926c <_setlocale_r>

0080930c <__smakebuf_r>:
  80930c:	2880030b 	ldhu	r2,12(r5)
  809310:	deffed04 	addi	sp,sp,-76
  809314:	dc401015 	stw	r17,64(sp)
  809318:	1080008c 	andi	r2,r2,2
  80931c:	dc000f15 	stw	r16,60(sp)
  809320:	dfc01215 	stw	ra,72(sp)
  809324:	dc801115 	stw	r18,68(sp)
  809328:	2821883a 	mov	r16,r5
  80932c:	2023883a 	mov	r17,r4
  809330:	10000b26 	beq	r2,zero,809360 <__smakebuf_r+0x54>
  809334:	28c010c4 	addi	r3,r5,67
  809338:	00800044 	movi	r2,1
  80933c:	28800515 	stw	r2,20(r5)
  809340:	28c00415 	stw	r3,16(r5)
  809344:	28c00015 	stw	r3,0(r5)
  809348:	dfc01217 	ldw	ra,72(sp)
  80934c:	dc801117 	ldw	r18,68(sp)
  809350:	dc401017 	ldw	r17,64(sp)
  809354:	dc000f17 	ldw	r16,60(sp)
  809358:	dec01304 	addi	sp,sp,76
  80935c:	f800283a 	ret
  809360:	2940038f 	ldh	r5,14(r5)
  809364:	28002116 	blt	r5,zero,8093ec <__smakebuf_r+0xe0>
  809368:	d80d883a 	mov	r6,sp
  80936c:	080b2240 	call	80b224 <_fstat_r>
  809370:	10001e16 	blt	r2,zero,8093ec <__smakebuf_r+0xe0>
  809374:	d8800117 	ldw	r2,4(sp)
  809378:	00e00014 	movui	r3,32768
  80937c:	113c000c 	andi	r4,r2,61440
  809380:	20c03126 	beq	r4,r3,809448 <__smakebuf_r+0x13c>
  809384:	8080030b 	ldhu	r2,12(r16)
  809388:	00c80004 	movi	r3,8192
  80938c:	10820014 	ori	r2,r2,2048
  809390:	8080030d 	sth	r2,12(r16)
  809394:	20c01e26 	beq	r4,r3,809410 <__smakebuf_r+0x104>
  809398:	04810004 	movi	r18,1024
  80939c:	8809883a 	mov	r4,r17
  8093a0:	900b883a 	mov	r5,r18
  8093a4:	0803dcc0 	call	803dcc <_malloc_r>
  8093a8:	1009883a 	mov	r4,r2
  8093ac:	10003126 	beq	r2,zero,809474 <__smakebuf_r+0x168>
  8093b0:	80c0030b 	ldhu	r3,12(r16)
  8093b4:	00802074 	movhi	r2,129
  8093b8:	10a2ae04 	addi	r2,r2,-30024
  8093bc:	88800f15 	stw	r2,60(r17)
  8093c0:	18c02014 	ori	r3,r3,128
  8093c4:	84800515 	stw	r18,20(r16)
  8093c8:	80c0030d 	sth	r3,12(r16)
  8093cc:	81000415 	stw	r4,16(r16)
  8093d0:	81000015 	stw	r4,0(r16)
  8093d4:	dfc01217 	ldw	ra,72(sp)
  8093d8:	dc801117 	ldw	r18,68(sp)
  8093dc:	dc401017 	ldw	r17,64(sp)
  8093e0:	dc000f17 	ldw	r16,60(sp)
  8093e4:	dec01304 	addi	sp,sp,76
  8093e8:	f800283a 	ret
  8093ec:	80c0030b 	ldhu	r3,12(r16)
  8093f0:	1880200c 	andi	r2,r3,128
  8093f4:	10000426 	beq	r2,zero,809408 <__smakebuf_r+0xfc>
  8093f8:	04801004 	movi	r18,64
  8093fc:	18820014 	ori	r2,r3,2048
  809400:	8080030d 	sth	r2,12(r16)
  809404:	003fe506 	br	80939c <__smakebuf_r+0x90>
  809408:	04810004 	movi	r18,1024
  80940c:	003ffb06 	br	8093fc <__smakebuf_r+0xf0>
  809410:	8140038f 	ldh	r5,14(r16)
  809414:	8809883a 	mov	r4,r17
  809418:	080b2980 	call	80b298 <_isatty_r>
  80941c:	103fde26 	beq	r2,zero,809398 <__smakebuf_r+0x8c>
  809420:	8080030b 	ldhu	r2,12(r16)
  809424:	80c010c4 	addi	r3,r16,67
  809428:	04810004 	movi	r18,1024
  80942c:	10800054 	ori	r2,r2,1
  809430:	8080030d 	sth	r2,12(r16)
  809434:	00800044 	movi	r2,1
  809438:	80c00415 	stw	r3,16(r16)
  80943c:	80800515 	stw	r2,20(r16)
  809440:	80c00015 	stw	r3,0(r16)
  809444:	003fd506 	br	80939c <__smakebuf_r+0x90>
  809448:	80c00a17 	ldw	r3,40(r16)
  80944c:	00802074 	movhi	r2,129
  809450:	10ab5904 	addi	r2,r2,-21148
  809454:	18bfcb1e 	bne	r3,r2,809384 <__smakebuf_r+0x78>
  809458:	8080030b 	ldhu	r2,12(r16)
  80945c:	00c10004 	movi	r3,1024
  809460:	1825883a 	mov	r18,r3
  809464:	10c4b03a 	or	r2,r2,r3
  809468:	8080030d 	sth	r2,12(r16)
  80946c:	80c01315 	stw	r3,76(r16)
  809470:	003fca06 	br	80939c <__smakebuf_r+0x90>
  809474:	8100030b 	ldhu	r4,12(r16)
  809478:	2080800c 	andi	r2,r4,512
  80947c:	103fb21e 	bne	r2,zero,809348 <__smakebuf_r+0x3c>
  809480:	80c010c4 	addi	r3,r16,67
  809484:	21000094 	ori	r4,r4,2
  809488:	00800044 	movi	r2,1
  80948c:	80800515 	stw	r2,20(r16)
  809490:	8100030d 	sth	r4,12(r16)
  809494:	80c00415 	stw	r3,16(r16)
  809498:	80c00015 	stw	r3,0(r16)
  80949c:	003faa06 	br	809348 <__smakebuf_r+0x3c>

008094a0 <memchr>:
  8094a0:	008000c4 	movi	r2,3
  8094a4:	29403fcc 	andi	r5,r5,255
  8094a8:	2007883a 	mov	r3,r4
  8094ac:	1180022e 	bgeu	r2,r6,8094b8 <memchr+0x18>
  8094b0:	2084703a 	and	r2,r4,r2
  8094b4:	10000b26 	beq	r2,zero,8094e4 <memchr+0x44>
  8094b8:	313fffc4 	addi	r4,r6,-1
  8094bc:	3000051e 	bne	r6,zero,8094d4 <memchr+0x34>
  8094c0:	00002c06 	br	809574 <memchr+0xd4>
  8094c4:	213fffc4 	addi	r4,r4,-1
  8094c8:	00bfffc4 	movi	r2,-1
  8094cc:	18c00044 	addi	r3,r3,1
  8094d0:	20802826 	beq	r4,r2,809574 <memchr+0xd4>
  8094d4:	18800003 	ldbu	r2,0(r3)
  8094d8:	28bffa1e 	bne	r5,r2,8094c4 <memchr+0x24>
  8094dc:	1805883a 	mov	r2,r3
  8094e0:	f800283a 	ret
  8094e4:	0011883a 	mov	r8,zero
  8094e8:	0007883a 	mov	r3,zero
  8094ec:	01c00104 	movi	r7,4
  8094f0:	4004923a 	slli	r2,r8,8
  8094f4:	18c00044 	addi	r3,r3,1
  8094f8:	1151883a 	add	r8,r2,r5
  8094fc:	19fffc1e 	bne	r3,r7,8094f0 <memchr+0x50>
  809500:	02bfbff4 	movhi	r10,65279
  809504:	52bfbfc4 	addi	r10,r10,-257
  809508:	02602074 	movhi	r9,32897
  80950c:	4a602004 	addi	r9,r9,-32640
  809510:	02c000c4 	movi	r11,3
  809514:	20800017 	ldw	r2,0(r4)
  809518:	31bfff04 	addi	r6,r6,-4
  80951c:	200f883a 	mov	r7,r4
  809520:	1204f03a 	xor	r2,r2,r8
  809524:	1287883a 	add	r3,r2,r10
  809528:	1a46703a 	and	r3,r3,r9
  80952c:	0084303a 	nor	r2,zero,r2
  809530:	10c4703a 	and	r2,r2,r3
  809534:	10000b26 	beq	r2,zero,809564 <memchr+0xc4>
  809538:	20800003 	ldbu	r2,0(r4)
  80953c:	28800f26 	beq	r5,r2,80957c <memchr+0xdc>
  809540:	20800043 	ldbu	r2,1(r4)
  809544:	21c00044 	addi	r7,r4,1
  809548:	28800c26 	beq	r5,r2,80957c <memchr+0xdc>
  80954c:	20800083 	ldbu	r2,2(r4)
  809550:	21c00084 	addi	r7,r4,2
  809554:	28800926 	beq	r5,r2,80957c <memchr+0xdc>
  809558:	208000c3 	ldbu	r2,3(r4)
  80955c:	21c000c4 	addi	r7,r4,3
  809560:	28800626 	beq	r5,r2,80957c <memchr+0xdc>
  809564:	21000104 	addi	r4,r4,4
  809568:	59bfea36 	bltu	r11,r6,809514 <memchr+0x74>
  80956c:	2007883a 	mov	r3,r4
  809570:	003fd106 	br	8094b8 <memchr+0x18>
  809574:	0005883a 	mov	r2,zero
  809578:	f800283a 	ret
  80957c:	3805883a 	mov	r2,r7
  809580:	f800283a 	ret

00809584 <memcpy>:
  809584:	01c003c4 	movi	r7,15
  809588:	2007883a 	mov	r3,r4
  80958c:	3980032e 	bgeu	r7,r6,80959c <memcpy+0x18>
  809590:	2904b03a 	or	r2,r5,r4
  809594:	108000cc 	andi	r2,r2,3
  809598:	10000926 	beq	r2,zero,8095c0 <memcpy+0x3c>
  80959c:	30000626 	beq	r6,zero,8095b8 <memcpy+0x34>
  8095a0:	30cd883a 	add	r6,r6,r3
  8095a4:	28800003 	ldbu	r2,0(r5)
  8095a8:	29400044 	addi	r5,r5,1
  8095ac:	18800005 	stb	r2,0(r3)
  8095b0:	18c00044 	addi	r3,r3,1
  8095b4:	30fffb1e 	bne	r6,r3,8095a4 <memcpy+0x20>
  8095b8:	2005883a 	mov	r2,r4
  8095bc:	f800283a 	ret
  8095c0:	3811883a 	mov	r8,r7
  8095c4:	200f883a 	mov	r7,r4
  8095c8:	28c00017 	ldw	r3,0(r5)
  8095cc:	31bffc04 	addi	r6,r6,-16
  8095d0:	38c00015 	stw	r3,0(r7)
  8095d4:	28800117 	ldw	r2,4(r5)
  8095d8:	38800115 	stw	r2,4(r7)
  8095dc:	28c00217 	ldw	r3,8(r5)
  8095e0:	38c00215 	stw	r3,8(r7)
  8095e4:	28800317 	ldw	r2,12(r5)
  8095e8:	29400404 	addi	r5,r5,16
  8095ec:	38800315 	stw	r2,12(r7)
  8095f0:	39c00404 	addi	r7,r7,16
  8095f4:	41bff436 	bltu	r8,r6,8095c8 <memcpy+0x44>
  8095f8:	008000c4 	movi	r2,3
  8095fc:	1180072e 	bgeu	r2,r6,80961c <memcpy+0x98>
  809600:	1007883a 	mov	r3,r2
  809604:	28800017 	ldw	r2,0(r5)
  809608:	31bfff04 	addi	r6,r6,-4
  80960c:	29400104 	addi	r5,r5,4
  809610:	38800015 	stw	r2,0(r7)
  809614:	39c00104 	addi	r7,r7,4
  809618:	19bffa36 	bltu	r3,r6,809604 <memcpy+0x80>
  80961c:	3807883a 	mov	r3,r7
  809620:	003fde06 	br	80959c <memcpy+0x18>

00809624 <memmove>:
  809624:	2807883a 	mov	r3,r5
  809628:	2011883a 	mov	r8,r4
  80962c:	29000c2e 	bgeu	r5,r4,809660 <memmove+0x3c>
  809630:	298f883a 	add	r7,r5,r6
  809634:	21c00a2e 	bgeu	r4,r7,809660 <memmove+0x3c>
  809638:	30000726 	beq	r6,zero,809658 <memmove+0x34>
  80963c:	2187883a 	add	r3,r4,r6
  809640:	198dc83a 	sub	r6,r3,r6
  809644:	39ffffc4 	addi	r7,r7,-1
  809648:	38800003 	ldbu	r2,0(r7)
  80964c:	18ffffc4 	addi	r3,r3,-1
  809650:	18800005 	stb	r2,0(r3)
  809654:	19bffb1e 	bne	r3,r6,809644 <memmove+0x20>
  809658:	2005883a 	mov	r2,r4
  80965c:	f800283a 	ret
  809660:	01c003c4 	movi	r7,15
  809664:	39800a36 	bltu	r7,r6,809690 <memmove+0x6c>
  809668:	303ffb26 	beq	r6,zero,809658 <memmove+0x34>
  80966c:	400f883a 	mov	r7,r8
  809670:	320d883a 	add	r6,r6,r8
  809674:	28800003 	ldbu	r2,0(r5)
  809678:	29400044 	addi	r5,r5,1
  80967c:	38800005 	stb	r2,0(r7)
  809680:	39c00044 	addi	r7,r7,1
  809684:	39bffb1e 	bne	r7,r6,809674 <memmove+0x50>
  809688:	2005883a 	mov	r2,r4
  80968c:	f800283a 	ret
  809690:	1904b03a 	or	r2,r3,r4
  809694:	108000cc 	andi	r2,r2,3
  809698:	103ff31e 	bne	r2,zero,809668 <memmove+0x44>
  80969c:	3811883a 	mov	r8,r7
  8096a0:	180b883a 	mov	r5,r3
  8096a4:	200f883a 	mov	r7,r4
  8096a8:	28c00017 	ldw	r3,0(r5)
  8096ac:	31bffc04 	addi	r6,r6,-16
  8096b0:	38c00015 	stw	r3,0(r7)
  8096b4:	28800117 	ldw	r2,4(r5)
  8096b8:	38800115 	stw	r2,4(r7)
  8096bc:	28c00217 	ldw	r3,8(r5)
  8096c0:	38c00215 	stw	r3,8(r7)
  8096c4:	28800317 	ldw	r2,12(r5)
  8096c8:	29400404 	addi	r5,r5,16
  8096cc:	38800315 	stw	r2,12(r7)
  8096d0:	39c00404 	addi	r7,r7,16
  8096d4:	41bff436 	bltu	r8,r6,8096a8 <memmove+0x84>
  8096d8:	008000c4 	movi	r2,3
  8096dc:	1180072e 	bgeu	r2,r6,8096fc <memmove+0xd8>
  8096e0:	1007883a 	mov	r3,r2
  8096e4:	28800017 	ldw	r2,0(r5)
  8096e8:	31bfff04 	addi	r6,r6,-4
  8096ec:	29400104 	addi	r5,r5,4
  8096f0:	38800015 	stw	r2,0(r7)
  8096f4:	39c00104 	addi	r7,r7,4
  8096f8:	19bffa36 	bltu	r3,r6,8096e4 <memmove+0xc0>
  8096fc:	3811883a 	mov	r8,r7
  809700:	003fd906 	br	809668 <memmove+0x44>

00809704 <_Bfree>:
  809704:	28000826 	beq	r5,zero,809728 <_Bfree+0x24>
  809708:	28800117 	ldw	r2,4(r5)
  80970c:	21001317 	ldw	r4,76(r4)
  809710:	1085883a 	add	r2,r2,r2
  809714:	1085883a 	add	r2,r2,r2
  809718:	1105883a 	add	r2,r2,r4
  80971c:	10c00017 	ldw	r3,0(r2)
  809720:	28c00015 	stw	r3,0(r5)
  809724:	11400015 	stw	r5,0(r2)
  809728:	f800283a 	ret

0080972c <__hi0bits>:
  80972c:	20bfffec 	andhi	r2,r4,65535
  809730:	10001426 	beq	r2,zero,809784 <__hi0bits+0x58>
  809734:	0007883a 	mov	r3,zero
  809738:	20bfc02c 	andhi	r2,r4,65280
  80973c:	1000021e 	bne	r2,zero,809748 <__hi0bits+0x1c>
  809740:	2008923a 	slli	r4,r4,8
  809744:	18c00204 	addi	r3,r3,8
  809748:	20bc002c 	andhi	r2,r4,61440
  80974c:	1000021e 	bne	r2,zero,809758 <__hi0bits+0x2c>
  809750:	2008913a 	slli	r4,r4,4
  809754:	18c00104 	addi	r3,r3,4
  809758:	20b0002c 	andhi	r2,r4,49152
  80975c:	1000031e 	bne	r2,zero,80976c <__hi0bits+0x40>
  809760:	2105883a 	add	r2,r4,r4
  809764:	18c00084 	addi	r3,r3,2
  809768:	1089883a 	add	r4,r2,r2
  80976c:	20000316 	blt	r4,zero,80977c <__hi0bits+0x50>
  809770:	2090002c 	andhi	r2,r4,16384
  809774:	10000626 	beq	r2,zero,809790 <__hi0bits+0x64>
  809778:	18c00044 	addi	r3,r3,1
  80977c:	1805883a 	mov	r2,r3
  809780:	f800283a 	ret
  809784:	2008943a 	slli	r4,r4,16
  809788:	00c00404 	movi	r3,16
  80978c:	003fea06 	br	809738 <__hi0bits+0xc>
  809790:	00c00804 	movi	r3,32
  809794:	1805883a 	mov	r2,r3
  809798:	f800283a 	ret

0080979c <__lo0bits>:
  80979c:	20c00017 	ldw	r3,0(r4)
  8097a0:	188001cc 	andi	r2,r3,7
  8097a4:	10000a26 	beq	r2,zero,8097d0 <__lo0bits+0x34>
  8097a8:	1880004c 	andi	r2,r3,1
  8097ac:	1005003a 	cmpeq	r2,r2,zero
  8097b0:	10002126 	beq	r2,zero,809838 <__lo0bits+0x9c>
  8097b4:	1880008c 	andi	r2,r3,2
  8097b8:	1000251e 	bne	r2,zero,809850 <__lo0bits+0xb4>
  8097bc:	1804d0ba 	srli	r2,r3,2
  8097c0:	01400084 	movi	r5,2
  8097c4:	20800015 	stw	r2,0(r4)
  8097c8:	2805883a 	mov	r2,r5
  8097cc:	f800283a 	ret
  8097d0:	18bfffcc 	andi	r2,r3,65535
  8097d4:	10001526 	beq	r2,zero,80982c <__lo0bits+0x90>
  8097d8:	000b883a 	mov	r5,zero
  8097dc:	18803fcc 	andi	r2,r3,255
  8097e0:	1000021e 	bne	r2,zero,8097ec <__lo0bits+0x50>
  8097e4:	1806d23a 	srli	r3,r3,8
  8097e8:	29400204 	addi	r5,r5,8
  8097ec:	188003cc 	andi	r2,r3,15
  8097f0:	1000021e 	bne	r2,zero,8097fc <__lo0bits+0x60>
  8097f4:	1806d13a 	srli	r3,r3,4
  8097f8:	29400104 	addi	r5,r5,4
  8097fc:	188000cc 	andi	r2,r3,3
  809800:	1000021e 	bne	r2,zero,80980c <__lo0bits+0x70>
  809804:	1806d0ba 	srli	r3,r3,2
  809808:	29400084 	addi	r5,r5,2
  80980c:	1880004c 	andi	r2,r3,1
  809810:	1000031e 	bne	r2,zero,809820 <__lo0bits+0x84>
  809814:	1806d07a 	srli	r3,r3,1
  809818:	18000a26 	beq	r3,zero,809844 <__lo0bits+0xa8>
  80981c:	29400044 	addi	r5,r5,1
  809820:	2805883a 	mov	r2,r5
  809824:	20c00015 	stw	r3,0(r4)
  809828:	f800283a 	ret
  80982c:	1806d43a 	srli	r3,r3,16
  809830:	01400404 	movi	r5,16
  809834:	003fe906 	br	8097dc <__lo0bits+0x40>
  809838:	000b883a 	mov	r5,zero
  80983c:	2805883a 	mov	r2,r5
  809840:	f800283a 	ret
  809844:	01400804 	movi	r5,32
  809848:	2805883a 	mov	r2,r5
  80984c:	f800283a 	ret
  809850:	1804d07a 	srli	r2,r3,1
  809854:	01400044 	movi	r5,1
  809858:	20800015 	stw	r2,0(r4)
  80985c:	003fda06 	br	8097c8 <__lo0bits+0x2c>

00809860 <__mcmp>:
  809860:	20800417 	ldw	r2,16(r4)
  809864:	28c00417 	ldw	r3,16(r5)
  809868:	10cfc83a 	sub	r7,r2,r3
  80986c:	38000c1e 	bne	r7,zero,8098a0 <__mcmp+0x40>
  809870:	18c5883a 	add	r2,r3,r3
  809874:	1085883a 	add	r2,r2,r2
  809878:	10c00504 	addi	r3,r2,20
  80987c:	21000504 	addi	r4,r4,20
  809880:	28cb883a 	add	r5,r5,r3
  809884:	2085883a 	add	r2,r4,r2
  809888:	10bfff04 	addi	r2,r2,-4
  80988c:	297fff04 	addi	r5,r5,-4
  809890:	11800017 	ldw	r6,0(r2)
  809894:	28c00017 	ldw	r3,0(r5)
  809898:	30c0031e 	bne	r6,r3,8098a8 <__mcmp+0x48>
  80989c:	20bffa36 	bltu	r4,r2,809888 <__mcmp+0x28>
  8098a0:	3805883a 	mov	r2,r7
  8098a4:	f800283a 	ret
  8098a8:	30c00336 	bltu	r6,r3,8098b8 <__mcmp+0x58>
  8098ac:	01c00044 	movi	r7,1
  8098b0:	3805883a 	mov	r2,r7
  8098b4:	f800283a 	ret
  8098b8:	01ffffc4 	movi	r7,-1
  8098bc:	003ff806 	br	8098a0 <__mcmp+0x40>

008098c0 <__ulp>:
  8098c0:	295ffc2c 	andhi	r5,r5,32752
  8098c4:	013f3034 	movhi	r4,64704
  8098c8:	290b883a 	add	r5,r5,r4
  8098cc:	0145c83a 	sub	r2,zero,r5
  8098d0:	1007d53a 	srai	r3,r2,20
  8098d4:	000d883a 	mov	r6,zero
  8098d8:	0140040e 	bge	zero,r5,8098ec <__ulp+0x2c>
  8098dc:	280f883a 	mov	r7,r5
  8098e0:	3807883a 	mov	r3,r7
  8098e4:	3005883a 	mov	r2,r6
  8098e8:	f800283a 	ret
  8098ec:	008004c4 	movi	r2,19
  8098f0:	193ffb04 	addi	r4,r3,-20
  8098f4:	10c00c0e 	bge	r2,r3,809928 <__ulp+0x68>
  8098f8:	008007c4 	movi	r2,31
  8098fc:	1107c83a 	sub	r3,r2,r4
  809900:	00800784 	movi	r2,30
  809904:	01400044 	movi	r5,1
  809908:	11000216 	blt	r2,r4,809914 <__ulp+0x54>
  80990c:	00800044 	movi	r2,1
  809910:	10ca983a 	sll	r5,r2,r3
  809914:	000f883a 	mov	r7,zero
  809918:	280d883a 	mov	r6,r5
  80991c:	3807883a 	mov	r3,r7
  809920:	3005883a 	mov	r2,r6
  809924:	f800283a 	ret
  809928:	00800234 	movhi	r2,8
  80992c:	10cfd83a 	sra	r7,r2,r3
  809930:	000d883a 	mov	r6,zero
  809934:	3005883a 	mov	r2,r6
  809938:	3807883a 	mov	r3,r7
  80993c:	f800283a 	ret

00809940 <__b2d>:
  809940:	20800417 	ldw	r2,16(r4)
  809944:	defff904 	addi	sp,sp,-28
  809948:	dd000415 	stw	r20,16(sp)
  80994c:	1085883a 	add	r2,r2,r2
  809950:	25000504 	addi	r20,r4,20
  809954:	1085883a 	add	r2,r2,r2
  809958:	dc000015 	stw	r16,0(sp)
  80995c:	a0a1883a 	add	r16,r20,r2
  809960:	dd400515 	stw	r21,20(sp)
  809964:	857fff17 	ldw	r21,-4(r16)
  809968:	dc400115 	stw	r17,4(sp)
  80996c:	dfc00615 	stw	ra,24(sp)
  809970:	a809883a 	mov	r4,r21
  809974:	2823883a 	mov	r17,r5
  809978:	dcc00315 	stw	r19,12(sp)
  80997c:	dc800215 	stw	r18,8(sp)
  809980:	080972c0 	call	80972c <__hi0bits>
  809984:	100b883a 	mov	r5,r2
  809988:	00800804 	movi	r2,32
  80998c:	1145c83a 	sub	r2,r2,r5
  809990:	88800015 	stw	r2,0(r17)
  809994:	00800284 	movi	r2,10
  809998:	80ffff04 	addi	r3,r16,-4
  80999c:	11401416 	blt	r2,r5,8099f0 <__b2d+0xb0>
  8099a0:	008002c4 	movi	r2,11
  8099a4:	1149c83a 	sub	r4,r2,r5
  8099a8:	a0c02736 	bltu	r20,r3,809a48 <__b2d+0x108>
  8099ac:	000d883a 	mov	r6,zero
  8099b0:	28800544 	addi	r2,r5,21
  8099b4:	a906d83a 	srl	r3,r21,r4
  8099b8:	a884983a 	sll	r2,r21,r2
  8099bc:	1ccffc34 	orhi	r19,r3,16368
  8099c0:	11a4b03a 	or	r18,r2,r6
  8099c4:	9005883a 	mov	r2,r18
  8099c8:	9807883a 	mov	r3,r19
  8099cc:	dfc00617 	ldw	ra,24(sp)
  8099d0:	dd400517 	ldw	r21,20(sp)
  8099d4:	dd000417 	ldw	r20,16(sp)
  8099d8:	dcc00317 	ldw	r19,12(sp)
  8099dc:	dc800217 	ldw	r18,8(sp)
  8099e0:	dc400117 	ldw	r17,4(sp)
  8099e4:	dc000017 	ldw	r16,0(sp)
  8099e8:	dec00704 	addi	sp,sp,28
  8099ec:	f800283a 	ret
  8099f0:	a0c00e36 	bltu	r20,r3,809a2c <__b2d+0xec>
  8099f4:	293ffd44 	addi	r4,r5,-11
  8099f8:	000d883a 	mov	r6,zero
  8099fc:	20000f26 	beq	r4,zero,809a3c <__b2d+0xfc>
  809a00:	00800804 	movi	r2,32
  809a04:	110bc83a 	sub	r5,r2,r4
  809a08:	a0c01236 	bltu	r20,r3,809a54 <__b2d+0x114>
  809a0c:	000f883a 	mov	r7,zero
  809a10:	a904983a 	sll	r2,r21,r4
  809a14:	3146d83a 	srl	r3,r6,r5
  809a18:	3108983a 	sll	r4,r6,r4
  809a1c:	108ffc34 	orhi	r2,r2,16368
  809a20:	18a6b03a 	or	r19,r3,r2
  809a24:	3924b03a 	or	r18,r7,r4
  809a28:	003fe606 	br	8099c4 <__b2d+0x84>
  809a2c:	293ffd44 	addi	r4,r5,-11
  809a30:	81bffe17 	ldw	r6,-8(r16)
  809a34:	80fffe04 	addi	r3,r16,-8
  809a38:	203ff11e 	bne	r4,zero,809a00 <__b2d+0xc0>
  809a3c:	accffc34 	orhi	r19,r21,16368
  809a40:	3025883a 	mov	r18,r6
  809a44:	003fdf06 	br	8099c4 <__b2d+0x84>
  809a48:	18bfff17 	ldw	r2,-4(r3)
  809a4c:	110cd83a 	srl	r6,r2,r4
  809a50:	003fd706 	br	8099b0 <__b2d+0x70>
  809a54:	18bfff17 	ldw	r2,-4(r3)
  809a58:	114ed83a 	srl	r7,r2,r5
  809a5c:	003fec06 	br	809a10 <__b2d+0xd0>

00809a60 <__ratio>:
  809a60:	defff904 	addi	sp,sp,-28
  809a64:	dc400215 	stw	r17,8(sp)
  809a68:	2823883a 	mov	r17,r5
  809a6c:	d80b883a 	mov	r5,sp
  809a70:	dfc00615 	stw	ra,24(sp)
  809a74:	dd000515 	stw	r20,20(sp)
  809a78:	dcc00415 	stw	r19,16(sp)
  809a7c:	dc800315 	stw	r18,12(sp)
  809a80:	2025883a 	mov	r18,r4
  809a84:	08099400 	call	809940 <__b2d>
  809a88:	8809883a 	mov	r4,r17
  809a8c:	d9400104 	addi	r5,sp,4
  809a90:	1027883a 	mov	r19,r2
  809a94:	1829883a 	mov	r20,r3
  809a98:	08099400 	call	809940 <__b2d>
  809a9c:	89000417 	ldw	r4,16(r17)
  809aa0:	91c00417 	ldw	r7,16(r18)
  809aa4:	d9800117 	ldw	r6,4(sp)
  809aa8:	180b883a 	mov	r5,r3
  809aac:	390fc83a 	sub	r7,r7,r4
  809ab0:	1009883a 	mov	r4,r2
  809ab4:	d8800017 	ldw	r2,0(sp)
  809ab8:	380e917a 	slli	r7,r7,5
  809abc:	2011883a 	mov	r8,r4
  809ac0:	1185c83a 	sub	r2,r2,r6
  809ac4:	11c5883a 	add	r2,r2,r7
  809ac8:	1006953a 	slli	r3,r2,20
  809acc:	2813883a 	mov	r9,r5
  809ad0:	00800d0e 	bge	zero,r2,809b08 <__ratio+0xa8>
  809ad4:	1d29883a 	add	r20,r3,r20
  809ad8:	a00b883a 	mov	r5,r20
  809adc:	480f883a 	mov	r7,r9
  809ae0:	9809883a 	mov	r4,r19
  809ae4:	400d883a 	mov	r6,r8
  809ae8:	080c84c0 	call	80c84c <__divdf3>
  809aec:	dfc00617 	ldw	ra,24(sp)
  809af0:	dd000517 	ldw	r20,20(sp)
  809af4:	dcc00417 	ldw	r19,16(sp)
  809af8:	dc800317 	ldw	r18,12(sp)
  809afc:	dc400217 	ldw	r17,8(sp)
  809b00:	dec00704 	addi	sp,sp,28
  809b04:	f800283a 	ret
  809b08:	28d3c83a 	sub	r9,r5,r3
  809b0c:	003ff206 	br	809ad8 <__ratio+0x78>

00809b10 <_mprec_log10>:
  809b10:	defffe04 	addi	sp,sp,-8
  809b14:	008005c4 	movi	r2,23
  809b18:	dc000015 	stw	r16,0(sp)
  809b1c:	dfc00115 	stw	ra,4(sp)
  809b20:	2021883a 	mov	r16,r4
  809b24:	11000c16 	blt	r2,r4,809b58 <_mprec_log10+0x48>
  809b28:	200490fa 	slli	r2,r4,3
  809b2c:	00c02074 	movhi	r3,129
  809b30:	18c60704 	addi	r3,r3,6172
  809b34:	10c5883a 	add	r2,r2,r3
  809b38:	12400117 	ldw	r9,4(r2)
  809b3c:	12000017 	ldw	r8,0(r2)
  809b40:	4807883a 	mov	r3,r9
  809b44:	4005883a 	mov	r2,r8
  809b48:	dfc00117 	ldw	ra,4(sp)
  809b4c:	dc000017 	ldw	r16,0(sp)
  809b50:	dec00204 	addi	sp,sp,8
  809b54:	f800283a 	ret
  809b58:	0011883a 	mov	r8,zero
  809b5c:	024ffc34 	movhi	r9,16368
  809b60:	0005883a 	mov	r2,zero
  809b64:	00d00934 	movhi	r3,16420
  809b68:	480b883a 	mov	r5,r9
  809b6c:	4009883a 	mov	r4,r8
  809b70:	180f883a 	mov	r7,r3
  809b74:	100d883a 	mov	r6,r2
  809b78:	080c4880 	call	80c488 <__muldf3>
  809b7c:	843fffc4 	addi	r16,r16,-1
  809b80:	1011883a 	mov	r8,r2
  809b84:	1813883a 	mov	r9,r3
  809b88:	803ff51e 	bne	r16,zero,809b60 <_mprec_log10+0x50>
  809b8c:	4005883a 	mov	r2,r8
  809b90:	4807883a 	mov	r3,r9
  809b94:	dfc00117 	ldw	ra,4(sp)
  809b98:	dc000017 	ldw	r16,0(sp)
  809b9c:	dec00204 	addi	sp,sp,8
  809ba0:	f800283a 	ret

00809ba4 <__copybits>:
  809ba4:	297fffc4 	addi	r5,r5,-1
  809ba8:	30800417 	ldw	r2,16(r6)
  809bac:	280bd17a 	srai	r5,r5,5
  809bb0:	31800504 	addi	r6,r6,20
  809bb4:	1085883a 	add	r2,r2,r2
  809bb8:	294b883a 	add	r5,r5,r5
  809bbc:	294b883a 	add	r5,r5,r5
  809bc0:	1085883a 	add	r2,r2,r2
  809bc4:	290b883a 	add	r5,r5,r4
  809bc8:	3087883a 	add	r3,r6,r2
  809bcc:	29400104 	addi	r5,r5,4
  809bd0:	30c0052e 	bgeu	r6,r3,809be8 <__copybits+0x44>
  809bd4:	30800017 	ldw	r2,0(r6)
  809bd8:	31800104 	addi	r6,r6,4
  809bdc:	20800015 	stw	r2,0(r4)
  809be0:	21000104 	addi	r4,r4,4
  809be4:	30fffb36 	bltu	r6,r3,809bd4 <__copybits+0x30>
  809be8:	2140032e 	bgeu	r4,r5,809bf8 <__copybits+0x54>
  809bec:	20000015 	stw	zero,0(r4)
  809bf0:	21000104 	addi	r4,r4,4
  809bf4:	217ffd36 	bltu	r4,r5,809bec <__copybits+0x48>
  809bf8:	f800283a 	ret

00809bfc <__any_on>:
  809bfc:	20800417 	ldw	r2,16(r4)
  809c00:	2807d17a 	srai	r3,r5,5
  809c04:	21000504 	addi	r4,r4,20
  809c08:	10c00d0e 	bge	r2,r3,809c40 <__any_on+0x44>
  809c0c:	1085883a 	add	r2,r2,r2
  809c10:	1085883a 	add	r2,r2,r2
  809c14:	208d883a 	add	r6,r4,r2
  809c18:	2180182e 	bgeu	r4,r6,809c7c <__any_on+0x80>
  809c1c:	30bfff17 	ldw	r2,-4(r6)
  809c20:	30ffff04 	addi	r3,r6,-4
  809c24:	1000041e 	bne	r2,zero,809c38 <__any_on+0x3c>
  809c28:	20c0142e 	bgeu	r4,r3,809c7c <__any_on+0x80>
  809c2c:	18ffff04 	addi	r3,r3,-4
  809c30:	18800017 	ldw	r2,0(r3)
  809c34:	103ffc26 	beq	r2,zero,809c28 <__any_on+0x2c>
  809c38:	00800044 	movi	r2,1
  809c3c:	f800283a 	ret
  809c40:	18800a0e 	bge	r3,r2,809c6c <__any_on+0x70>
  809c44:	294007cc 	andi	r5,r5,31
  809c48:	28000826 	beq	r5,zero,809c6c <__any_on+0x70>
  809c4c:	18c5883a 	add	r2,r3,r3
  809c50:	1085883a 	add	r2,r2,r2
  809c54:	208d883a 	add	r6,r4,r2
  809c58:	30c00017 	ldw	r3,0(r6)
  809c5c:	1944d83a 	srl	r2,r3,r5
  809c60:	1144983a 	sll	r2,r2,r5
  809c64:	18bff41e 	bne	r3,r2,809c38 <__any_on+0x3c>
  809c68:	003feb06 	br	809c18 <__any_on+0x1c>
  809c6c:	18c5883a 	add	r2,r3,r3
  809c70:	1085883a 	add	r2,r2,r2
  809c74:	208d883a 	add	r6,r4,r2
  809c78:	003fe706 	br	809c18 <__any_on+0x1c>
  809c7c:	0005883a 	mov	r2,zero
  809c80:	f800283a 	ret

00809c84 <_Balloc>:
  809c84:	20c01317 	ldw	r3,76(r4)
  809c88:	defffb04 	addi	sp,sp,-20
  809c8c:	dcc00315 	stw	r19,12(sp)
  809c90:	dc800215 	stw	r18,8(sp)
  809c94:	dfc00415 	stw	ra,16(sp)
  809c98:	2825883a 	mov	r18,r5
  809c9c:	dc400115 	stw	r17,4(sp)
  809ca0:	dc000015 	stw	r16,0(sp)
  809ca4:	2027883a 	mov	r19,r4
  809ca8:	01800404 	movi	r6,16
  809cac:	01400104 	movi	r5,4
  809cb0:	18001726 	beq	r3,zero,809d10 <_Balloc+0x8c>
  809cb4:	01400044 	movi	r5,1
  809cb8:	9485883a 	add	r2,r18,r18
  809cbc:	2ca2983a 	sll	r17,r5,r18
  809cc0:	1085883a 	add	r2,r2,r2
  809cc4:	10c7883a 	add	r3,r2,r3
  809cc8:	1c000017 	ldw	r16,0(r3)
  809ccc:	8c4d883a 	add	r6,r17,r17
  809cd0:	318d883a 	add	r6,r6,r6
  809cd4:	9809883a 	mov	r4,r19
  809cd8:	31800504 	addi	r6,r6,20
  809cdc:	80001226 	beq	r16,zero,809d28 <_Balloc+0xa4>
  809ce0:	80800017 	ldw	r2,0(r16)
  809ce4:	18800015 	stw	r2,0(r3)
  809ce8:	80000415 	stw	zero,16(r16)
  809cec:	80000315 	stw	zero,12(r16)
  809cf0:	8005883a 	mov	r2,r16
  809cf4:	dfc00417 	ldw	ra,16(sp)
  809cf8:	dcc00317 	ldw	r19,12(sp)
  809cfc:	dc800217 	ldw	r18,8(sp)
  809d00:	dc400117 	ldw	r17,4(sp)
  809d04:	dc000017 	ldw	r16,0(sp)
  809d08:	dec00504 	addi	sp,sp,20
  809d0c:	f800283a 	ret
  809d10:	080afdc0 	call	80afdc <_calloc_r>
  809d14:	1007883a 	mov	r3,r2
  809d18:	0021883a 	mov	r16,zero
  809d1c:	98801315 	stw	r2,76(r19)
  809d20:	103fe41e 	bne	r2,zero,809cb4 <_Balloc+0x30>
  809d24:	003ff206 	br	809cf0 <_Balloc+0x6c>
  809d28:	080afdc0 	call	80afdc <_calloc_r>
  809d2c:	103ff026 	beq	r2,zero,809cf0 <_Balloc+0x6c>
  809d30:	1021883a 	mov	r16,r2
  809d34:	14800115 	stw	r18,4(r2)
  809d38:	14400215 	stw	r17,8(r2)
  809d3c:	003fea06 	br	809ce8 <_Balloc+0x64>

00809d40 <__d2b>:
  809d40:	defff504 	addi	sp,sp,-44
  809d44:	dcc00515 	stw	r19,20(sp)
  809d48:	04c00044 	movi	r19,1
  809d4c:	dc000215 	stw	r16,8(sp)
  809d50:	2821883a 	mov	r16,r5
  809d54:	980b883a 	mov	r5,r19
  809d58:	ddc00915 	stw	r23,36(sp)
  809d5c:	dd800815 	stw	r22,32(sp)
  809d60:	dd400715 	stw	r21,28(sp)
  809d64:	dd000615 	stw	r20,24(sp)
  809d68:	dc800415 	stw	r18,16(sp)
  809d6c:	dc400315 	stw	r17,12(sp)
  809d70:	dfc00a15 	stw	ra,40(sp)
  809d74:	3023883a 	mov	r17,r6
  809d78:	382d883a 	mov	r22,r7
  809d7c:	ddc00b17 	ldw	r23,44(sp)
  809d80:	0809c840 	call	809c84 <_Balloc>
  809d84:	1025883a 	mov	r18,r2
  809d88:	00a00034 	movhi	r2,32768
  809d8c:	10bfffc4 	addi	r2,r2,-1
  809d90:	8888703a 	and	r4,r17,r2
  809d94:	202ad53a 	srli	r21,r4,20
  809d98:	00800434 	movhi	r2,16
  809d9c:	10bfffc4 	addi	r2,r2,-1
  809da0:	8886703a 	and	r3,r17,r2
  809da4:	a829003a 	cmpeq	r20,r21,zero
  809da8:	800b883a 	mov	r5,r16
  809dac:	d8c00115 	stw	r3,4(sp)
  809db0:	94000504 	addi	r16,r18,20
  809db4:	a000021e 	bne	r20,zero,809dc0 <__d2b+0x80>
  809db8:	18c00434 	orhi	r3,r3,16
  809dbc:	d8c00115 	stw	r3,4(sp)
  809dc0:	28002726 	beq	r5,zero,809e60 <__d2b+0x120>
  809dc4:	d809883a 	mov	r4,sp
  809dc8:	d9400015 	stw	r5,0(sp)
  809dcc:	080979c0 	call	80979c <__lo0bits>
  809dd0:	100d883a 	mov	r6,r2
  809dd4:	10003526 	beq	r2,zero,809eac <__d2b+0x16c>
  809dd8:	d8c00117 	ldw	r3,4(sp)
  809ddc:	00800804 	movi	r2,32
  809de0:	1185c83a 	sub	r2,r2,r6
  809de4:	d9000017 	ldw	r4,0(sp)
  809de8:	1886983a 	sll	r3,r3,r2
  809dec:	1906b03a 	or	r3,r3,r4
  809df0:	90c00515 	stw	r3,20(r18)
  809df4:	d8c00117 	ldw	r3,4(sp)
  809df8:	1986d83a 	srl	r3,r3,r6
  809dfc:	d8c00115 	stw	r3,4(sp)
  809e00:	180b003a 	cmpeq	r5,r3,zero
  809e04:	00800084 	movi	r2,2
  809e08:	114bc83a 	sub	r5,r2,r5
  809e0c:	80c00115 	stw	r3,4(r16)
  809e10:	91400415 	stw	r5,16(r18)
  809e14:	a0001a1e 	bne	r20,zero,809e80 <__d2b+0x140>
  809e18:	3545883a 	add	r2,r6,r21
  809e1c:	10bef344 	addi	r2,r2,-1075
  809e20:	00c00d44 	movi	r3,53
  809e24:	b0800015 	stw	r2,0(r22)
  809e28:	1987c83a 	sub	r3,r3,r6
  809e2c:	b8c00015 	stw	r3,0(r23)
  809e30:	9005883a 	mov	r2,r18
  809e34:	dfc00a17 	ldw	ra,40(sp)
  809e38:	ddc00917 	ldw	r23,36(sp)
  809e3c:	dd800817 	ldw	r22,32(sp)
  809e40:	dd400717 	ldw	r21,28(sp)
  809e44:	dd000617 	ldw	r20,24(sp)
  809e48:	dcc00517 	ldw	r19,20(sp)
  809e4c:	dc800417 	ldw	r18,16(sp)
  809e50:	dc400317 	ldw	r17,12(sp)
  809e54:	dc000217 	ldw	r16,8(sp)
  809e58:	dec00b04 	addi	sp,sp,44
  809e5c:	f800283a 	ret
  809e60:	d9000104 	addi	r4,sp,4
  809e64:	080979c0 	call	80979c <__lo0bits>
  809e68:	11800804 	addi	r6,r2,32
  809e6c:	d8800117 	ldw	r2,4(sp)
  809e70:	94c00415 	stw	r19,16(r18)
  809e74:	980b883a 	mov	r5,r19
  809e78:	90800515 	stw	r2,20(r18)
  809e7c:	a03fe626 	beq	r20,zero,809e18 <__d2b+0xd8>
  809e80:	2945883a 	add	r2,r5,r5
  809e84:	1085883a 	add	r2,r2,r2
  809e88:	1405883a 	add	r2,r2,r16
  809e8c:	113fff17 	ldw	r4,-4(r2)
  809e90:	30fef384 	addi	r3,r6,-1074
  809e94:	2820917a 	slli	r16,r5,5
  809e98:	b0c00015 	stw	r3,0(r22)
  809e9c:	080972c0 	call	80972c <__hi0bits>
  809ea0:	80a1c83a 	sub	r16,r16,r2
  809ea4:	bc000015 	stw	r16,0(r23)
  809ea8:	003fe106 	br	809e30 <__d2b+0xf0>
  809eac:	d8800017 	ldw	r2,0(sp)
  809eb0:	90800515 	stw	r2,20(r18)
  809eb4:	d8c00117 	ldw	r3,4(sp)
  809eb8:	003fd106 	br	809e00 <__d2b+0xc0>

00809ebc <__mdiff>:
  809ebc:	defffb04 	addi	sp,sp,-20
  809ec0:	dc000015 	stw	r16,0(sp)
  809ec4:	2821883a 	mov	r16,r5
  809ec8:	dc800215 	stw	r18,8(sp)
  809ecc:	300b883a 	mov	r5,r6
  809ed0:	2025883a 	mov	r18,r4
  809ed4:	8009883a 	mov	r4,r16
  809ed8:	dc400115 	stw	r17,4(sp)
  809edc:	dfc00415 	stw	ra,16(sp)
  809ee0:	dcc00315 	stw	r19,12(sp)
  809ee4:	3023883a 	mov	r17,r6
  809ee8:	08098600 	call	809860 <__mcmp>
  809eec:	10004226 	beq	r2,zero,809ff8 <__mdiff+0x13c>
  809ef0:	10005016 	blt	r2,zero,80a034 <__mdiff+0x178>
  809ef4:	0027883a 	mov	r19,zero
  809ef8:	81400117 	ldw	r5,4(r16)
  809efc:	9009883a 	mov	r4,r18
  809f00:	0809c840 	call	809c84 <_Balloc>
  809f04:	1019883a 	mov	r12,r2
  809f08:	82800417 	ldw	r10,16(r16)
  809f0c:	88800417 	ldw	r2,16(r17)
  809f10:	81800504 	addi	r6,r16,20
  809f14:	5287883a 	add	r3,r10,r10
  809f18:	1085883a 	add	r2,r2,r2
  809f1c:	18c7883a 	add	r3,r3,r3
  809f20:	1085883a 	add	r2,r2,r2
  809f24:	8a000504 	addi	r8,r17,20
  809f28:	64c00315 	stw	r19,12(r12)
  809f2c:	30db883a 	add	r13,r6,r3
  809f30:	4097883a 	add	r11,r8,r2
  809f34:	61c00504 	addi	r7,r12,20
  809f38:	0013883a 	mov	r9,zero
  809f3c:	31000017 	ldw	r4,0(r6)
  809f40:	41400017 	ldw	r5,0(r8)
  809f44:	42000104 	addi	r8,r8,4
  809f48:	20bfffcc 	andi	r2,r4,65535
  809f4c:	28ffffcc 	andi	r3,r5,65535
  809f50:	10c5c83a 	sub	r2,r2,r3
  809f54:	1245883a 	add	r2,r2,r9
  809f58:	2008d43a 	srli	r4,r4,16
  809f5c:	280ad43a 	srli	r5,r5,16
  809f60:	1007d43a 	srai	r3,r2,16
  809f64:	3880000d 	sth	r2,0(r7)
  809f68:	2149c83a 	sub	r4,r4,r5
  809f6c:	20c9883a 	add	r4,r4,r3
  809f70:	3900008d 	sth	r4,2(r7)
  809f74:	31800104 	addi	r6,r6,4
  809f78:	39c00104 	addi	r7,r7,4
  809f7c:	2013d43a 	srai	r9,r4,16
  809f80:	42ffee36 	bltu	r8,r11,809f3c <__mdiff+0x80>
  809f84:	33400c2e 	bgeu	r6,r13,809fb8 <__mdiff+0xfc>
  809f88:	30800017 	ldw	r2,0(r6)
  809f8c:	31800104 	addi	r6,r6,4
  809f90:	10ffffcc 	andi	r3,r2,65535
  809f94:	1a47883a 	add	r3,r3,r9
  809f98:	1004d43a 	srli	r2,r2,16
  809f9c:	1809d43a 	srai	r4,r3,16
  809fa0:	38c0000d 	sth	r3,0(r7)
  809fa4:	1105883a 	add	r2,r2,r4
  809fa8:	3880008d 	sth	r2,2(r7)
  809fac:	1013d43a 	srai	r9,r2,16
  809fb0:	39c00104 	addi	r7,r7,4
  809fb4:	337ff436 	bltu	r6,r13,809f88 <__mdiff+0xcc>
  809fb8:	38bfff17 	ldw	r2,-4(r7)
  809fbc:	38ffff04 	addi	r3,r7,-4
  809fc0:	1000041e 	bne	r2,zero,809fd4 <__mdiff+0x118>
  809fc4:	18ffff04 	addi	r3,r3,-4
  809fc8:	18800017 	ldw	r2,0(r3)
  809fcc:	52bfffc4 	addi	r10,r10,-1
  809fd0:	103ffc26 	beq	r2,zero,809fc4 <__mdiff+0x108>
  809fd4:	6005883a 	mov	r2,r12
  809fd8:	62800415 	stw	r10,16(r12)
  809fdc:	dfc00417 	ldw	ra,16(sp)
  809fe0:	dcc00317 	ldw	r19,12(sp)
  809fe4:	dc800217 	ldw	r18,8(sp)
  809fe8:	dc400117 	ldw	r17,4(sp)
  809fec:	dc000017 	ldw	r16,0(sp)
  809ff0:	dec00504 	addi	sp,sp,20
  809ff4:	f800283a 	ret
  809ff8:	9009883a 	mov	r4,r18
  809ffc:	000b883a 	mov	r5,zero
  80a000:	0809c840 	call	809c84 <_Balloc>
  80a004:	1019883a 	mov	r12,r2
  80a008:	00800044 	movi	r2,1
  80a00c:	60800415 	stw	r2,16(r12)
  80a010:	6005883a 	mov	r2,r12
  80a014:	60000515 	stw	zero,20(r12)
  80a018:	dfc00417 	ldw	ra,16(sp)
  80a01c:	dcc00317 	ldw	r19,12(sp)
  80a020:	dc800217 	ldw	r18,8(sp)
  80a024:	dc400117 	ldw	r17,4(sp)
  80a028:	dc000017 	ldw	r16,0(sp)
  80a02c:	dec00504 	addi	sp,sp,20
  80a030:	f800283a 	ret
  80a034:	880d883a 	mov	r6,r17
  80a038:	04c00044 	movi	r19,1
  80a03c:	8023883a 	mov	r17,r16
  80a040:	3021883a 	mov	r16,r6
  80a044:	003fac06 	br	809ef8 <__mdiff+0x3c>

0080a048 <__lshift>:
  80a048:	defff904 	addi	sp,sp,-28
  80a04c:	28800417 	ldw	r2,16(r5)
  80a050:	dc000015 	stw	r16,0(sp)
  80a054:	3021d17a 	srai	r16,r6,5
  80a058:	28c00217 	ldw	r3,8(r5)
  80a05c:	10800044 	addi	r2,r2,1
  80a060:	dc400115 	stw	r17,4(sp)
  80a064:	80a3883a 	add	r17,r16,r2
  80a068:	dd400515 	stw	r21,20(sp)
  80a06c:	dd000415 	stw	r20,16(sp)
  80a070:	dc800215 	stw	r18,8(sp)
  80a074:	dfc00615 	stw	ra,24(sp)
  80a078:	2825883a 	mov	r18,r5
  80a07c:	dcc00315 	stw	r19,12(sp)
  80a080:	3029883a 	mov	r20,r6
  80a084:	202b883a 	mov	r21,r4
  80a088:	29400117 	ldw	r5,4(r5)
  80a08c:	1c40030e 	bge	r3,r17,80a09c <__lshift+0x54>
  80a090:	18c7883a 	add	r3,r3,r3
  80a094:	29400044 	addi	r5,r5,1
  80a098:	1c7ffd16 	blt	r3,r17,80a090 <__lshift+0x48>
  80a09c:	a809883a 	mov	r4,r21
  80a0a0:	0809c840 	call	809c84 <_Balloc>
  80a0a4:	1027883a 	mov	r19,r2
  80a0a8:	11400504 	addi	r5,r2,20
  80a0ac:	0400090e 	bge	zero,r16,80a0d4 <__lshift+0x8c>
  80a0b0:	2805883a 	mov	r2,r5
  80a0b4:	0007883a 	mov	r3,zero
  80a0b8:	18c00044 	addi	r3,r3,1
  80a0bc:	10000015 	stw	zero,0(r2)
  80a0c0:	10800104 	addi	r2,r2,4
  80a0c4:	80fffc1e 	bne	r16,r3,80a0b8 <__lshift+0x70>
  80a0c8:	8405883a 	add	r2,r16,r16
  80a0cc:	1085883a 	add	r2,r2,r2
  80a0d0:	288b883a 	add	r5,r5,r2
  80a0d4:	90800417 	ldw	r2,16(r18)
  80a0d8:	91000504 	addi	r4,r18,20
  80a0dc:	a18007cc 	andi	r6,r20,31
  80a0e0:	1085883a 	add	r2,r2,r2
  80a0e4:	1085883a 	add	r2,r2,r2
  80a0e8:	208f883a 	add	r7,r4,r2
  80a0ec:	30001e26 	beq	r6,zero,80a168 <__lshift+0x120>
  80a0f0:	00800804 	movi	r2,32
  80a0f4:	1191c83a 	sub	r8,r2,r6
  80a0f8:	0007883a 	mov	r3,zero
  80a0fc:	20800017 	ldw	r2,0(r4)
  80a100:	1184983a 	sll	r2,r2,r6
  80a104:	1884b03a 	or	r2,r3,r2
  80a108:	28800015 	stw	r2,0(r5)
  80a10c:	20c00017 	ldw	r3,0(r4)
  80a110:	21000104 	addi	r4,r4,4
  80a114:	29400104 	addi	r5,r5,4
  80a118:	1a06d83a 	srl	r3,r3,r8
  80a11c:	21fff736 	bltu	r4,r7,80a0fc <__lshift+0xb4>
  80a120:	28c00015 	stw	r3,0(r5)
  80a124:	18000126 	beq	r3,zero,80a12c <__lshift+0xe4>
  80a128:	8c400044 	addi	r17,r17,1
  80a12c:	88bfffc4 	addi	r2,r17,-1
  80a130:	98800415 	stw	r2,16(r19)
  80a134:	a809883a 	mov	r4,r21
  80a138:	900b883a 	mov	r5,r18
  80a13c:	08097040 	call	809704 <_Bfree>
  80a140:	9805883a 	mov	r2,r19
  80a144:	dfc00617 	ldw	ra,24(sp)
  80a148:	dd400517 	ldw	r21,20(sp)
  80a14c:	dd000417 	ldw	r20,16(sp)
  80a150:	dcc00317 	ldw	r19,12(sp)
  80a154:	dc800217 	ldw	r18,8(sp)
  80a158:	dc400117 	ldw	r17,4(sp)
  80a15c:	dc000017 	ldw	r16,0(sp)
  80a160:	dec00704 	addi	sp,sp,28
  80a164:	f800283a 	ret
  80a168:	20800017 	ldw	r2,0(r4)
  80a16c:	21000104 	addi	r4,r4,4
  80a170:	28800015 	stw	r2,0(r5)
  80a174:	29400104 	addi	r5,r5,4
  80a178:	21ffec2e 	bgeu	r4,r7,80a12c <__lshift+0xe4>
  80a17c:	20800017 	ldw	r2,0(r4)
  80a180:	21000104 	addi	r4,r4,4
  80a184:	28800015 	stw	r2,0(r5)
  80a188:	29400104 	addi	r5,r5,4
  80a18c:	21fff636 	bltu	r4,r7,80a168 <__lshift+0x120>
  80a190:	003fe606 	br	80a12c <__lshift+0xe4>

0080a194 <__multiply>:
  80a194:	defff904 	addi	sp,sp,-28
  80a198:	dcc00315 	stw	r19,12(sp)
  80a19c:	dc800215 	stw	r18,8(sp)
  80a1a0:	2cc00417 	ldw	r19,16(r5)
  80a1a4:	34800417 	ldw	r18,16(r6)
  80a1a8:	dd000415 	stw	r20,16(sp)
  80a1ac:	dc400115 	stw	r17,4(sp)
  80a1b0:	dfc00615 	stw	ra,24(sp)
  80a1b4:	dd400515 	stw	r21,20(sp)
  80a1b8:	dc000015 	stw	r16,0(sp)
  80a1bc:	2823883a 	mov	r17,r5
  80a1c0:	3029883a 	mov	r20,r6
  80a1c4:	9c80040e 	bge	r19,r18,80a1d8 <__multiply+0x44>
  80a1c8:	9027883a 	mov	r19,r18
  80a1cc:	2c800417 	ldw	r18,16(r5)
  80a1d0:	2829883a 	mov	r20,r5
  80a1d4:	3023883a 	mov	r17,r6
  80a1d8:	88800217 	ldw	r2,8(r17)
  80a1dc:	9ca1883a 	add	r16,r19,r18
  80a1e0:	89400117 	ldw	r5,4(r17)
  80a1e4:	1400010e 	bge	r2,r16,80a1ec <__multiply+0x58>
  80a1e8:	29400044 	addi	r5,r5,1
  80a1ec:	0809c840 	call	809c84 <_Balloc>
  80a1f0:	102b883a 	mov	r21,r2
  80a1f4:	8405883a 	add	r2,r16,r16
  80a1f8:	1085883a 	add	r2,r2,r2
  80a1fc:	a9000504 	addi	r4,r21,20
  80a200:	209d883a 	add	r14,r4,r2
  80a204:	2380042e 	bgeu	r4,r14,80a218 <__multiply+0x84>
  80a208:	2005883a 	mov	r2,r4
  80a20c:	10000015 	stw	zero,0(r2)
  80a210:	10800104 	addi	r2,r2,4
  80a214:	13bffd36 	bltu	r2,r14,80a20c <__multiply+0x78>
  80a218:	9485883a 	add	r2,r18,r18
  80a21c:	9cc7883a 	add	r3,r19,r19
  80a220:	a1800504 	addi	r6,r20,20
  80a224:	1085883a 	add	r2,r2,r2
  80a228:	8b400504 	addi	r13,r17,20
  80a22c:	18c7883a 	add	r3,r3,r3
  80a230:	309f883a 	add	r15,r6,r2
  80a234:	68d7883a 	add	r11,r13,r3
  80a238:	33c03b2e 	bgeu	r6,r15,80a328 <__multiply+0x194>
  80a23c:	2019883a 	mov	r12,r4
  80a240:	30800017 	ldw	r2,0(r6)
  80a244:	127fffcc 	andi	r9,r2,65535
  80a248:	48001826 	beq	r9,zero,80a2ac <__multiply+0x118>
  80a24c:	6811883a 	mov	r8,r13
  80a250:	600f883a 	mov	r7,r12
  80a254:	0015883a 	mov	r10,zero
  80a258:	40c00017 	ldw	r3,0(r8)
  80a25c:	39400017 	ldw	r5,0(r7)
  80a260:	42000104 	addi	r8,r8,4
  80a264:	193fffcc 	andi	r4,r3,65535
  80a268:	4909383a 	mul	r4,r9,r4
  80a26c:	1806d43a 	srli	r3,r3,16
  80a270:	28bfffcc 	andi	r2,r5,65535
  80a274:	5085883a 	add	r2,r10,r2
  80a278:	2089883a 	add	r4,r4,r2
  80a27c:	48c7383a 	mul	r3,r9,r3
  80a280:	280ad43a 	srli	r5,r5,16
  80a284:	2004d43a 	srli	r2,r4,16
  80a288:	3900000d 	sth	r4,0(r7)
  80a28c:	1947883a 	add	r3,r3,r5
  80a290:	10c5883a 	add	r2,r2,r3
  80a294:	3880008d 	sth	r2,2(r7)
  80a298:	1014d43a 	srli	r10,r2,16
  80a29c:	39c00104 	addi	r7,r7,4
  80a2a0:	42ffed36 	bltu	r8,r11,80a258 <__multiply+0xc4>
  80a2a4:	3a800015 	stw	r10,0(r7)
  80a2a8:	30800017 	ldw	r2,0(r6)
  80a2ac:	1012d43a 	srli	r9,r2,16
  80a2b0:	48001926 	beq	r9,zero,80a318 <__multiply+0x184>
  80a2b4:	60800017 	ldw	r2,0(r12)
  80a2b8:	6811883a 	mov	r8,r13
  80a2bc:	600f883a 	mov	r7,r12
  80a2c0:	0015883a 	mov	r10,zero
  80a2c4:	100b883a 	mov	r5,r2
  80a2c8:	41000017 	ldw	r4,0(r8)
  80a2cc:	2806d43a 	srli	r3,r5,16
  80a2d0:	3880000d 	sth	r2,0(r7)
  80a2d4:	20bfffcc 	andi	r2,r4,65535
  80a2d8:	4885383a 	mul	r2,r9,r2
  80a2dc:	50c7883a 	add	r3,r10,r3
  80a2e0:	2008d43a 	srli	r4,r4,16
  80a2e4:	10c5883a 	add	r2,r2,r3
  80a2e8:	3880008d 	sth	r2,2(r7)
  80a2ec:	39c00104 	addi	r7,r7,4
  80a2f0:	39400017 	ldw	r5,0(r7)
  80a2f4:	4909383a 	mul	r4,r9,r4
  80a2f8:	1004d43a 	srli	r2,r2,16
  80a2fc:	28ffffcc 	andi	r3,r5,65535
  80a300:	20c9883a 	add	r4,r4,r3
  80a304:	1105883a 	add	r2,r2,r4
  80a308:	42000104 	addi	r8,r8,4
  80a30c:	1014d43a 	srli	r10,r2,16
  80a310:	42ffed36 	bltu	r8,r11,80a2c8 <__multiply+0x134>
  80a314:	38800015 	stw	r2,0(r7)
  80a318:	31800104 	addi	r6,r6,4
  80a31c:	33c0022e 	bgeu	r6,r15,80a328 <__multiply+0x194>
  80a320:	63000104 	addi	r12,r12,4
  80a324:	003fc606 	br	80a240 <__multiply+0xac>
  80a328:	0400090e 	bge	zero,r16,80a350 <__multiply+0x1bc>
  80a32c:	70bfff17 	ldw	r2,-4(r14)
  80a330:	70ffff04 	addi	r3,r14,-4
  80a334:	10000326 	beq	r2,zero,80a344 <__multiply+0x1b0>
  80a338:	00000506 	br	80a350 <__multiply+0x1bc>
  80a33c:	18800017 	ldw	r2,0(r3)
  80a340:	1000031e 	bne	r2,zero,80a350 <__multiply+0x1bc>
  80a344:	843fffc4 	addi	r16,r16,-1
  80a348:	18ffff04 	addi	r3,r3,-4
  80a34c:	803ffb1e 	bne	r16,zero,80a33c <__multiply+0x1a8>
  80a350:	a805883a 	mov	r2,r21
  80a354:	ac000415 	stw	r16,16(r21)
  80a358:	dfc00617 	ldw	ra,24(sp)
  80a35c:	dd400517 	ldw	r21,20(sp)
  80a360:	dd000417 	ldw	r20,16(sp)
  80a364:	dcc00317 	ldw	r19,12(sp)
  80a368:	dc800217 	ldw	r18,8(sp)
  80a36c:	dc400117 	ldw	r17,4(sp)
  80a370:	dc000017 	ldw	r16,0(sp)
  80a374:	dec00704 	addi	sp,sp,28
  80a378:	f800283a 	ret

0080a37c <__i2b>:
  80a37c:	defffd04 	addi	sp,sp,-12
  80a380:	dc000015 	stw	r16,0(sp)
  80a384:	04000044 	movi	r16,1
  80a388:	dc800115 	stw	r18,4(sp)
  80a38c:	2825883a 	mov	r18,r5
  80a390:	800b883a 	mov	r5,r16
  80a394:	dfc00215 	stw	ra,8(sp)
  80a398:	0809c840 	call	809c84 <_Balloc>
  80a39c:	14000415 	stw	r16,16(r2)
  80a3a0:	14800515 	stw	r18,20(r2)
  80a3a4:	dfc00217 	ldw	ra,8(sp)
  80a3a8:	dc800117 	ldw	r18,4(sp)
  80a3ac:	dc000017 	ldw	r16,0(sp)
  80a3b0:	dec00304 	addi	sp,sp,12
  80a3b4:	f800283a 	ret

0080a3b8 <__multadd>:
  80a3b8:	defffa04 	addi	sp,sp,-24
  80a3bc:	dc800215 	stw	r18,8(sp)
  80a3c0:	2c800417 	ldw	r18,16(r5)
  80a3c4:	dd000415 	stw	r20,16(sp)
  80a3c8:	dcc00315 	stw	r19,12(sp)
  80a3cc:	dc000015 	stw	r16,0(sp)
  80a3d0:	dfc00515 	stw	ra,20(sp)
  80a3d4:	3821883a 	mov	r16,r7
  80a3d8:	dc400115 	stw	r17,4(sp)
  80a3dc:	2827883a 	mov	r19,r5
  80a3e0:	2029883a 	mov	r20,r4
  80a3e4:	2a000504 	addi	r8,r5,20
  80a3e8:	000f883a 	mov	r7,zero
  80a3ec:	40800017 	ldw	r2,0(r8)
  80a3f0:	39c00044 	addi	r7,r7,1
  80a3f4:	10ffffcc 	andi	r3,r2,65535
  80a3f8:	1987383a 	mul	r3,r3,r6
  80a3fc:	1004d43a 	srli	r2,r2,16
  80a400:	1c07883a 	add	r3,r3,r16
  80a404:	180ad43a 	srli	r5,r3,16
  80a408:	1185383a 	mul	r2,r2,r6
  80a40c:	18ffffcc 	andi	r3,r3,65535
  80a410:	1145883a 	add	r2,r2,r5
  80a414:	1008943a 	slli	r4,r2,16
  80a418:	1020d43a 	srli	r16,r2,16
  80a41c:	20c9883a 	add	r4,r4,r3
  80a420:	41000015 	stw	r4,0(r8)
  80a424:	42000104 	addi	r8,r8,4
  80a428:	3cbff016 	blt	r7,r18,80a3ec <__multadd+0x34>
  80a42c:	80000826 	beq	r16,zero,80a450 <__multadd+0x98>
  80a430:	98800217 	ldw	r2,8(r19)
  80a434:	90800f0e 	bge	r18,r2,80a474 <__multadd+0xbc>
  80a438:	9485883a 	add	r2,r18,r18
  80a43c:	1085883a 	add	r2,r2,r2
  80a440:	14c5883a 	add	r2,r2,r19
  80a444:	90c00044 	addi	r3,r18,1
  80a448:	14000515 	stw	r16,20(r2)
  80a44c:	98c00415 	stw	r3,16(r19)
  80a450:	9805883a 	mov	r2,r19
  80a454:	dfc00517 	ldw	ra,20(sp)
  80a458:	dd000417 	ldw	r20,16(sp)
  80a45c:	dcc00317 	ldw	r19,12(sp)
  80a460:	dc800217 	ldw	r18,8(sp)
  80a464:	dc400117 	ldw	r17,4(sp)
  80a468:	dc000017 	ldw	r16,0(sp)
  80a46c:	dec00604 	addi	sp,sp,24
  80a470:	f800283a 	ret
  80a474:	99400117 	ldw	r5,4(r19)
  80a478:	a009883a 	mov	r4,r20
  80a47c:	29400044 	addi	r5,r5,1
  80a480:	0809c840 	call	809c84 <_Balloc>
  80a484:	99800417 	ldw	r6,16(r19)
  80a488:	99400304 	addi	r5,r19,12
  80a48c:	11000304 	addi	r4,r2,12
  80a490:	318d883a 	add	r6,r6,r6
  80a494:	318d883a 	add	r6,r6,r6
  80a498:	31800204 	addi	r6,r6,8
  80a49c:	1023883a 	mov	r17,r2
  80a4a0:	08095840 	call	809584 <memcpy>
  80a4a4:	980b883a 	mov	r5,r19
  80a4a8:	a009883a 	mov	r4,r20
  80a4ac:	08097040 	call	809704 <_Bfree>
  80a4b0:	8827883a 	mov	r19,r17
  80a4b4:	003fe006 	br	80a438 <__multadd+0x80>

0080a4b8 <__pow5mult>:
  80a4b8:	defffa04 	addi	sp,sp,-24
  80a4bc:	308000cc 	andi	r2,r6,3
  80a4c0:	dd000415 	stw	r20,16(sp)
  80a4c4:	dcc00315 	stw	r19,12(sp)
  80a4c8:	dc000015 	stw	r16,0(sp)
  80a4cc:	dfc00515 	stw	ra,20(sp)
  80a4d0:	dc800215 	stw	r18,8(sp)
  80a4d4:	dc400115 	stw	r17,4(sp)
  80a4d8:	3021883a 	mov	r16,r6
  80a4dc:	2027883a 	mov	r19,r4
  80a4e0:	2829883a 	mov	r20,r5
  80a4e4:	10002b1e 	bne	r2,zero,80a594 <__pow5mult+0xdc>
  80a4e8:	8025d0ba 	srai	r18,r16,2
  80a4ec:	90001b26 	beq	r18,zero,80a55c <__pow5mult+0xa4>
  80a4f0:	9c001217 	ldw	r16,72(r19)
  80a4f4:	8000081e 	bne	r16,zero,80a518 <__pow5mult+0x60>
  80a4f8:	00003006 	br	80a5bc <__pow5mult+0x104>
  80a4fc:	800b883a 	mov	r5,r16
  80a500:	800d883a 	mov	r6,r16
  80a504:	9809883a 	mov	r4,r19
  80a508:	90001426 	beq	r18,zero,80a55c <__pow5mult+0xa4>
  80a50c:	80800017 	ldw	r2,0(r16)
  80a510:	10001b26 	beq	r2,zero,80a580 <__pow5mult+0xc8>
  80a514:	1021883a 	mov	r16,r2
  80a518:	9080004c 	andi	r2,r18,1
  80a51c:	1005003a 	cmpeq	r2,r2,zero
  80a520:	9025d07a 	srai	r18,r18,1
  80a524:	800d883a 	mov	r6,r16
  80a528:	9809883a 	mov	r4,r19
  80a52c:	a00b883a 	mov	r5,r20
  80a530:	103ff21e 	bne	r2,zero,80a4fc <__pow5mult+0x44>
  80a534:	080a1940 	call	80a194 <__multiply>
  80a538:	a00b883a 	mov	r5,r20
  80a53c:	9809883a 	mov	r4,r19
  80a540:	1023883a 	mov	r17,r2
  80a544:	08097040 	call	809704 <_Bfree>
  80a548:	8829883a 	mov	r20,r17
  80a54c:	800b883a 	mov	r5,r16
  80a550:	800d883a 	mov	r6,r16
  80a554:	9809883a 	mov	r4,r19
  80a558:	903fec1e 	bne	r18,zero,80a50c <__pow5mult+0x54>
  80a55c:	a005883a 	mov	r2,r20
  80a560:	dfc00517 	ldw	ra,20(sp)
  80a564:	dd000417 	ldw	r20,16(sp)
  80a568:	dcc00317 	ldw	r19,12(sp)
  80a56c:	dc800217 	ldw	r18,8(sp)
  80a570:	dc400117 	ldw	r17,4(sp)
  80a574:	dc000017 	ldw	r16,0(sp)
  80a578:	dec00604 	addi	sp,sp,24
  80a57c:	f800283a 	ret
  80a580:	080a1940 	call	80a194 <__multiply>
  80a584:	80800015 	stw	r2,0(r16)
  80a588:	1021883a 	mov	r16,r2
  80a58c:	10000015 	stw	zero,0(r2)
  80a590:	003fe106 	br	80a518 <__pow5mult+0x60>
  80a594:	1085883a 	add	r2,r2,r2
  80a598:	00c02074 	movhi	r3,129
  80a59c:	18c64d04 	addi	r3,r3,6452
  80a5a0:	1085883a 	add	r2,r2,r2
  80a5a4:	10c5883a 	add	r2,r2,r3
  80a5a8:	11bfff17 	ldw	r6,-4(r2)
  80a5ac:	000f883a 	mov	r7,zero
  80a5b0:	080a3b80 	call	80a3b8 <__multadd>
  80a5b4:	1029883a 	mov	r20,r2
  80a5b8:	003fcb06 	br	80a4e8 <__pow5mult+0x30>
  80a5bc:	9809883a 	mov	r4,r19
  80a5c0:	01409c44 	movi	r5,625
  80a5c4:	080a37c0 	call	80a37c <__i2b>
  80a5c8:	98801215 	stw	r2,72(r19)
  80a5cc:	1021883a 	mov	r16,r2
  80a5d0:	10000015 	stw	zero,0(r2)
  80a5d4:	003fd006 	br	80a518 <__pow5mult+0x60>

0080a5d8 <__s2b>:
  80a5d8:	defff904 	addi	sp,sp,-28
  80a5dc:	dcc00315 	stw	r19,12(sp)
  80a5e0:	dc800215 	stw	r18,8(sp)
  80a5e4:	2827883a 	mov	r19,r5
  80a5e8:	2025883a 	mov	r18,r4
  80a5ec:	01400244 	movi	r5,9
  80a5f0:	39000204 	addi	r4,r7,8
  80a5f4:	dd000415 	stw	r20,16(sp)
  80a5f8:	dc400115 	stw	r17,4(sp)
  80a5fc:	dfc00615 	stw	ra,24(sp)
  80a600:	dd400515 	stw	r21,20(sp)
  80a604:	dc000015 	stw	r16,0(sp)
  80a608:	3829883a 	mov	r20,r7
  80a60c:	3023883a 	mov	r17,r6
  80a610:	080d12c0 	call	80d12c <__divsi3>
  80a614:	00c00044 	movi	r3,1
  80a618:	1880350e 	bge	r3,r2,80a6f0 <__s2b+0x118>
  80a61c:	000b883a 	mov	r5,zero
  80a620:	18c7883a 	add	r3,r3,r3
  80a624:	29400044 	addi	r5,r5,1
  80a628:	18bffd16 	blt	r3,r2,80a620 <__s2b+0x48>
  80a62c:	9009883a 	mov	r4,r18
  80a630:	0809c840 	call	809c84 <_Balloc>
  80a634:	1011883a 	mov	r8,r2
  80a638:	d8800717 	ldw	r2,28(sp)
  80a63c:	00c00044 	movi	r3,1
  80a640:	01800244 	movi	r6,9
  80a644:	40800515 	stw	r2,20(r8)
  80a648:	40c00415 	stw	r3,16(r8)
  80a64c:	3440260e 	bge	r6,r17,80a6e8 <__s2b+0x110>
  80a650:	3021883a 	mov	r16,r6
  80a654:	99ab883a 	add	r21,r19,r6
  80a658:	9c05883a 	add	r2,r19,r16
  80a65c:	11c00007 	ldb	r7,0(r2)
  80a660:	400b883a 	mov	r5,r8
  80a664:	9009883a 	mov	r4,r18
  80a668:	39fff404 	addi	r7,r7,-48
  80a66c:	01800284 	movi	r6,10
  80a670:	080a3b80 	call	80a3b8 <__multadd>
  80a674:	84000044 	addi	r16,r16,1
  80a678:	1011883a 	mov	r8,r2
  80a67c:	8c3ff61e 	bne	r17,r16,80a658 <__s2b+0x80>
  80a680:	ac45883a 	add	r2,r21,r17
  80a684:	117ffe04 	addi	r5,r2,-8
  80a688:	880d883a 	mov	r6,r17
  80a68c:	35000c0e 	bge	r6,r20,80a6c0 <__s2b+0xe8>
  80a690:	a185c83a 	sub	r2,r20,r6
  80a694:	2821883a 	mov	r16,r5
  80a698:	28a3883a 	add	r17,r5,r2
  80a69c:	81c00007 	ldb	r7,0(r16)
  80a6a0:	400b883a 	mov	r5,r8
  80a6a4:	9009883a 	mov	r4,r18
  80a6a8:	39fff404 	addi	r7,r7,-48
  80a6ac:	01800284 	movi	r6,10
  80a6b0:	080a3b80 	call	80a3b8 <__multadd>
  80a6b4:	84000044 	addi	r16,r16,1
  80a6b8:	1011883a 	mov	r8,r2
  80a6bc:	847ff71e 	bne	r16,r17,80a69c <__s2b+0xc4>
  80a6c0:	4005883a 	mov	r2,r8
  80a6c4:	dfc00617 	ldw	ra,24(sp)
  80a6c8:	dd400517 	ldw	r21,20(sp)
  80a6cc:	dd000417 	ldw	r20,16(sp)
  80a6d0:	dcc00317 	ldw	r19,12(sp)
  80a6d4:	dc800217 	ldw	r18,8(sp)
  80a6d8:	dc400117 	ldw	r17,4(sp)
  80a6dc:	dc000017 	ldw	r16,0(sp)
  80a6e0:	dec00704 	addi	sp,sp,28
  80a6e4:	f800283a 	ret
  80a6e8:	99400284 	addi	r5,r19,10
  80a6ec:	003fe706 	br	80a68c <__s2b+0xb4>
  80a6f0:	000b883a 	mov	r5,zero
  80a6f4:	003fcd06 	br	80a62c <__s2b+0x54>

0080a6f8 <_realloc_r>:
  80a6f8:	defff404 	addi	sp,sp,-48
  80a6fc:	dd800815 	stw	r22,32(sp)
  80a700:	dc800415 	stw	r18,16(sp)
  80a704:	dc400315 	stw	r17,12(sp)
  80a708:	dfc00b15 	stw	ra,44(sp)
  80a70c:	df000a15 	stw	fp,40(sp)
  80a710:	ddc00915 	stw	r23,36(sp)
  80a714:	dd400715 	stw	r21,28(sp)
  80a718:	dd000615 	stw	r20,24(sp)
  80a71c:	dcc00515 	stw	r19,20(sp)
  80a720:	dc000215 	stw	r16,8(sp)
  80a724:	2825883a 	mov	r18,r5
  80a728:	3023883a 	mov	r17,r6
  80a72c:	202d883a 	mov	r22,r4
  80a730:	2800c926 	beq	r5,zero,80aa58 <_realloc_r+0x360>
  80a734:	080e28c0 	call	80e28c <__malloc_lock>
  80a738:	943ffe04 	addi	r16,r18,-8
  80a73c:	88c002c4 	addi	r3,r17,11
  80a740:	00800584 	movi	r2,22
  80a744:	82000117 	ldw	r8,4(r16)
  80a748:	10c01b2e 	bgeu	r2,r3,80a7b8 <_realloc_r+0xc0>
  80a74c:	00bffe04 	movi	r2,-8
  80a750:	188e703a 	and	r7,r3,r2
  80a754:	3839883a 	mov	fp,r7
  80a758:	38001a16 	blt	r7,zero,80a7c4 <_realloc_r+0xcc>
  80a75c:	e4401936 	bltu	fp,r17,80a7c4 <_realloc_r+0xcc>
  80a760:	013fff04 	movi	r4,-4
  80a764:	4126703a 	and	r19,r8,r4
  80a768:	99c02616 	blt	r19,r7,80a804 <_realloc_r+0x10c>
  80a76c:	802b883a 	mov	r21,r16
  80a770:	9829883a 	mov	r20,r19
  80a774:	84000204 	addi	r16,r16,8
  80a778:	a80f883a 	mov	r7,r21
  80a77c:	a70dc83a 	sub	r6,r20,fp
  80a780:	008003c4 	movi	r2,15
  80a784:	1180c136 	bltu	r2,r6,80aa8c <_realloc_r+0x394>
  80a788:	38800117 	ldw	r2,4(r7)
  80a78c:	a549883a 	add	r4,r20,r21
  80a790:	1080004c 	andi	r2,r2,1
  80a794:	a084b03a 	or	r2,r20,r2
  80a798:	38800115 	stw	r2,4(r7)
  80a79c:	20c00117 	ldw	r3,4(r4)
  80a7a0:	18c00054 	ori	r3,r3,1
  80a7a4:	20c00115 	stw	r3,4(r4)
  80a7a8:	b009883a 	mov	r4,r22
  80a7ac:	080e2ac0 	call	80e2ac <__malloc_unlock>
  80a7b0:	8023883a 	mov	r17,r16
  80a7b4:	00000606 	br	80a7d0 <_realloc_r+0xd8>
  80a7b8:	01c00404 	movi	r7,16
  80a7bc:	3839883a 	mov	fp,r7
  80a7c0:	e47fe72e 	bgeu	fp,r17,80a760 <_realloc_r+0x68>
  80a7c4:	00800304 	movi	r2,12
  80a7c8:	0023883a 	mov	r17,zero
  80a7cc:	b0800015 	stw	r2,0(r22)
  80a7d0:	8805883a 	mov	r2,r17
  80a7d4:	dfc00b17 	ldw	ra,44(sp)
  80a7d8:	df000a17 	ldw	fp,40(sp)
  80a7dc:	ddc00917 	ldw	r23,36(sp)
  80a7e0:	dd800817 	ldw	r22,32(sp)
  80a7e4:	dd400717 	ldw	r21,28(sp)
  80a7e8:	dd000617 	ldw	r20,24(sp)
  80a7ec:	dcc00517 	ldw	r19,20(sp)
  80a7f0:	dc800417 	ldw	r18,16(sp)
  80a7f4:	dc400317 	ldw	r17,12(sp)
  80a7f8:	dc000217 	ldw	r16,8(sp)
  80a7fc:	dec00c04 	addi	sp,sp,48
  80a800:	f800283a 	ret
  80a804:	00802074 	movhi	r2,129
  80a808:	1086a304 	addi	r2,r2,6796
  80a80c:	12400217 	ldw	r9,8(r2)
  80a810:	84cd883a 	add	r6,r16,r19
  80a814:	802b883a 	mov	r21,r16
  80a818:	3240b926 	beq	r6,r9,80ab00 <_realloc_r+0x408>
  80a81c:	31400117 	ldw	r5,4(r6)
  80a820:	00bfff84 	movi	r2,-2
  80a824:	2884703a 	and	r2,r5,r2
  80a828:	1185883a 	add	r2,r2,r6
  80a82c:	10c00117 	ldw	r3,4(r2)
  80a830:	18c0004c 	andi	r3,r3,1
  80a834:	1807003a 	cmpeq	r3,r3,zero
  80a838:	1800a326 	beq	r3,zero,80aac8 <_realloc_r+0x3d0>
  80a83c:	2908703a 	and	r4,r5,r4
  80a840:	9929883a 	add	r20,r19,r4
  80a844:	a1c0a30e 	bge	r20,r7,80aad4 <_realloc_r+0x3dc>
  80a848:	4080004c 	andi	r2,r8,1
  80a84c:	1000551e 	bne	r2,zero,80a9a4 <_realloc_r+0x2ac>
  80a850:	80800017 	ldw	r2,0(r16)
  80a854:	80afc83a 	sub	r23,r16,r2
  80a858:	b8c00117 	ldw	r3,4(r23)
  80a85c:	00bfff04 	movi	r2,-4
  80a860:	1884703a 	and	r2,r3,r2
  80a864:	30002e26 	beq	r6,zero,80a920 <_realloc_r+0x228>
  80a868:	3240b926 	beq	r6,r9,80ab50 <_realloc_r+0x458>
  80a86c:	98a9883a 	add	r20,r19,r2
  80a870:	2509883a 	add	r4,r4,r20
  80a874:	d9000015 	stw	r4,0(sp)
  80a878:	21c02a16 	blt	r4,r7,80a924 <_realloc_r+0x22c>
  80a87c:	30800317 	ldw	r2,12(r6)
  80a880:	30c00217 	ldw	r3,8(r6)
  80a884:	01400904 	movi	r5,36
  80a888:	99bfff04 	addi	r6,r19,-4
  80a88c:	18800315 	stw	r2,12(r3)
  80a890:	10c00215 	stw	r3,8(r2)
  80a894:	b9000317 	ldw	r4,12(r23)
  80a898:	b8800217 	ldw	r2,8(r23)
  80a89c:	b82b883a 	mov	r21,r23
  80a8a0:	bc000204 	addi	r16,r23,8
  80a8a4:	20800215 	stw	r2,8(r4)
  80a8a8:	11000315 	stw	r4,12(r2)
  80a8ac:	2980e436 	bltu	r5,r6,80ac40 <_realloc_r+0x548>
  80a8b0:	008004c4 	movi	r2,19
  80a8b4:	9009883a 	mov	r4,r18
  80a8b8:	8011883a 	mov	r8,r16
  80a8bc:	11800f2e 	bgeu	r2,r6,80a8fc <_realloc_r+0x204>
  80a8c0:	90800017 	ldw	r2,0(r18)
  80a8c4:	ba000404 	addi	r8,r23,16
  80a8c8:	91000204 	addi	r4,r18,8
  80a8cc:	b8800215 	stw	r2,8(r23)
  80a8d0:	90c00117 	ldw	r3,4(r18)
  80a8d4:	008006c4 	movi	r2,27
  80a8d8:	b8c00315 	stw	r3,12(r23)
  80a8dc:	1180072e 	bgeu	r2,r6,80a8fc <_realloc_r+0x204>
  80a8e0:	90c00217 	ldw	r3,8(r18)
  80a8e4:	ba000604 	addi	r8,r23,24
  80a8e8:	91000404 	addi	r4,r18,16
  80a8ec:	b8c00415 	stw	r3,16(r23)
  80a8f0:	90800317 	ldw	r2,12(r18)
  80a8f4:	b8800515 	stw	r2,20(r23)
  80a8f8:	3140e726 	beq	r6,r5,80ac98 <_realloc_r+0x5a0>
  80a8fc:	20800017 	ldw	r2,0(r4)
  80a900:	dd000017 	ldw	r20,0(sp)
  80a904:	b80f883a 	mov	r7,r23
  80a908:	40800015 	stw	r2,0(r8)
  80a90c:	20c00117 	ldw	r3,4(r4)
  80a910:	40c00115 	stw	r3,4(r8)
  80a914:	20800217 	ldw	r2,8(r4)
  80a918:	40800215 	stw	r2,8(r8)
  80a91c:	003f9706 	br	80a77c <_realloc_r+0x84>
  80a920:	98a9883a 	add	r20,r19,r2
  80a924:	a1c01f16 	blt	r20,r7,80a9a4 <_realloc_r+0x2ac>
  80a928:	b8c00317 	ldw	r3,12(r23)
  80a92c:	b8800217 	ldw	r2,8(r23)
  80a930:	99bfff04 	addi	r6,r19,-4
  80a934:	01400904 	movi	r5,36
  80a938:	b82b883a 	mov	r21,r23
  80a93c:	18800215 	stw	r2,8(r3)
  80a940:	10c00315 	stw	r3,12(r2)
  80a944:	bc000204 	addi	r16,r23,8
  80a948:	2980c336 	bltu	r5,r6,80ac58 <_realloc_r+0x560>
  80a94c:	008004c4 	movi	r2,19
  80a950:	9009883a 	mov	r4,r18
  80a954:	8011883a 	mov	r8,r16
  80a958:	11800f2e 	bgeu	r2,r6,80a998 <_realloc_r+0x2a0>
  80a95c:	90800017 	ldw	r2,0(r18)
  80a960:	ba000404 	addi	r8,r23,16
  80a964:	91000204 	addi	r4,r18,8
  80a968:	b8800215 	stw	r2,8(r23)
  80a96c:	90c00117 	ldw	r3,4(r18)
  80a970:	008006c4 	movi	r2,27
  80a974:	b8c00315 	stw	r3,12(r23)
  80a978:	1180072e 	bgeu	r2,r6,80a998 <_realloc_r+0x2a0>
  80a97c:	90c00217 	ldw	r3,8(r18)
  80a980:	ba000604 	addi	r8,r23,24
  80a984:	91000404 	addi	r4,r18,16
  80a988:	b8c00415 	stw	r3,16(r23)
  80a98c:	90800317 	ldw	r2,12(r18)
  80a990:	b8800515 	stw	r2,20(r23)
  80a994:	3140c726 	beq	r6,r5,80acb4 <_realloc_r+0x5bc>
  80a998:	20800017 	ldw	r2,0(r4)
  80a99c:	b80f883a 	mov	r7,r23
  80a9a0:	003fd906 	br	80a908 <_realloc_r+0x210>
  80a9a4:	880b883a 	mov	r5,r17
  80a9a8:	b009883a 	mov	r4,r22
  80a9ac:	0803dcc0 	call	803dcc <_malloc_r>
  80a9b0:	1023883a 	mov	r17,r2
  80a9b4:	10002526 	beq	r2,zero,80aa4c <_realloc_r+0x354>
  80a9b8:	80800117 	ldw	r2,4(r16)
  80a9bc:	00ffff84 	movi	r3,-2
  80a9c0:	893ffe04 	addi	r4,r17,-8
  80a9c4:	10c4703a 	and	r2,r2,r3
  80a9c8:	8085883a 	add	r2,r16,r2
  80a9cc:	20809526 	beq	r4,r2,80ac24 <_realloc_r+0x52c>
  80a9d0:	99bfff04 	addi	r6,r19,-4
  80a9d4:	01c00904 	movi	r7,36
  80a9d8:	39804536 	bltu	r7,r6,80aaf0 <_realloc_r+0x3f8>
  80a9dc:	008004c4 	movi	r2,19
  80a9e0:	9009883a 	mov	r4,r18
  80a9e4:	880b883a 	mov	r5,r17
  80a9e8:	11800f2e 	bgeu	r2,r6,80aa28 <_realloc_r+0x330>
  80a9ec:	90800017 	ldw	r2,0(r18)
  80a9f0:	89400204 	addi	r5,r17,8
  80a9f4:	91000204 	addi	r4,r18,8
  80a9f8:	88800015 	stw	r2,0(r17)
  80a9fc:	90c00117 	ldw	r3,4(r18)
  80aa00:	008006c4 	movi	r2,27
  80aa04:	88c00115 	stw	r3,4(r17)
  80aa08:	1180072e 	bgeu	r2,r6,80aa28 <_realloc_r+0x330>
  80aa0c:	90c00217 	ldw	r3,8(r18)
  80aa10:	89400404 	addi	r5,r17,16
  80aa14:	91000404 	addi	r4,r18,16
  80aa18:	88c00215 	stw	r3,8(r17)
  80aa1c:	90800317 	ldw	r2,12(r18)
  80aa20:	88800315 	stw	r2,12(r17)
  80aa24:	31c09126 	beq	r6,r7,80ac6c <_realloc_r+0x574>
  80aa28:	20800017 	ldw	r2,0(r4)
  80aa2c:	28800015 	stw	r2,0(r5)
  80aa30:	20c00117 	ldw	r3,4(r4)
  80aa34:	28c00115 	stw	r3,4(r5)
  80aa38:	20800217 	ldw	r2,8(r4)
  80aa3c:	28800215 	stw	r2,8(r5)
  80aa40:	900b883a 	mov	r5,r18
  80aa44:	b009883a 	mov	r4,r22
  80aa48:	0804bf80 	call	804bf8 <_free_r>
  80aa4c:	b009883a 	mov	r4,r22
  80aa50:	080e2ac0 	call	80e2ac <__malloc_unlock>
  80aa54:	003f5e06 	br	80a7d0 <_realloc_r+0xd8>
  80aa58:	300b883a 	mov	r5,r6
  80aa5c:	dfc00b17 	ldw	ra,44(sp)
  80aa60:	df000a17 	ldw	fp,40(sp)
  80aa64:	ddc00917 	ldw	r23,36(sp)
  80aa68:	dd800817 	ldw	r22,32(sp)
  80aa6c:	dd400717 	ldw	r21,28(sp)
  80aa70:	dd000617 	ldw	r20,24(sp)
  80aa74:	dcc00517 	ldw	r19,20(sp)
  80aa78:	dc800417 	ldw	r18,16(sp)
  80aa7c:	dc400317 	ldw	r17,12(sp)
  80aa80:	dc000217 	ldw	r16,8(sp)
  80aa84:	dec00c04 	addi	sp,sp,48
  80aa88:	0803dcc1 	jmpi	803dcc <_malloc_r>
  80aa8c:	38800117 	ldw	r2,4(r7)
  80aa90:	e54b883a 	add	r5,fp,r21
  80aa94:	31000054 	ori	r4,r6,1
  80aa98:	1080004c 	andi	r2,r2,1
  80aa9c:	1704b03a 	or	r2,r2,fp
  80aaa0:	38800115 	stw	r2,4(r7)
  80aaa4:	29000115 	stw	r4,4(r5)
  80aaa8:	2987883a 	add	r3,r5,r6
  80aaac:	18800117 	ldw	r2,4(r3)
  80aab0:	29400204 	addi	r5,r5,8
  80aab4:	b009883a 	mov	r4,r22
  80aab8:	10800054 	ori	r2,r2,1
  80aabc:	18800115 	stw	r2,4(r3)
  80aac0:	0804bf80 	call	804bf8 <_free_r>
  80aac4:	003f3806 	br	80a7a8 <_realloc_r+0xb0>
  80aac8:	000d883a 	mov	r6,zero
  80aacc:	0009883a 	mov	r4,zero
  80aad0:	003f5d06 	br	80a848 <_realloc_r+0x150>
  80aad4:	30c00217 	ldw	r3,8(r6)
  80aad8:	30800317 	ldw	r2,12(r6)
  80aadc:	800f883a 	mov	r7,r16
  80aae0:	84000204 	addi	r16,r16,8
  80aae4:	10c00215 	stw	r3,8(r2)
  80aae8:	18800315 	stw	r2,12(r3)
  80aaec:	003f2306 	br	80a77c <_realloc_r+0x84>
  80aaf0:	8809883a 	mov	r4,r17
  80aaf4:	900b883a 	mov	r5,r18
  80aaf8:	08096240 	call	809624 <memmove>
  80aafc:	003fd006 	br	80aa40 <_realloc_r+0x348>
  80ab00:	30800117 	ldw	r2,4(r6)
  80ab04:	e0c00404 	addi	r3,fp,16
  80ab08:	1108703a 	and	r4,r2,r4
  80ab0c:	9905883a 	add	r2,r19,r4
  80ab10:	10ff4d16 	blt	r2,r3,80a848 <_realloc_r+0x150>
  80ab14:	1705c83a 	sub	r2,r2,fp
  80ab18:	870b883a 	add	r5,r16,fp
  80ab1c:	10800054 	ori	r2,r2,1
  80ab20:	28800115 	stw	r2,4(r5)
  80ab24:	80c00117 	ldw	r3,4(r16)
  80ab28:	00802074 	movhi	r2,129
  80ab2c:	1086a304 	addi	r2,r2,6796
  80ab30:	b009883a 	mov	r4,r22
  80ab34:	18c0004c 	andi	r3,r3,1
  80ab38:	e0c6b03a 	or	r3,fp,r3
  80ab3c:	11400215 	stw	r5,8(r2)
  80ab40:	80c00115 	stw	r3,4(r16)
  80ab44:	080e2ac0 	call	80e2ac <__malloc_unlock>
  80ab48:	84400204 	addi	r17,r16,8
  80ab4c:	003f2006 	br	80a7d0 <_realloc_r+0xd8>
  80ab50:	98a9883a 	add	r20,r19,r2
  80ab54:	2509883a 	add	r4,r4,r20
  80ab58:	e0800404 	addi	r2,fp,16
  80ab5c:	d9000115 	stw	r4,4(sp)
  80ab60:	20bf7016 	blt	r4,r2,80a924 <_realloc_r+0x22c>
  80ab64:	b8c00317 	ldw	r3,12(r23)
  80ab68:	b8800217 	ldw	r2,8(r23)
  80ab6c:	99bfff04 	addi	r6,r19,-4
  80ab70:	01400904 	movi	r5,36
  80ab74:	18800215 	stw	r2,8(r3)
  80ab78:	10c00315 	stw	r3,12(r2)
  80ab7c:	bc400204 	addi	r17,r23,8
  80ab80:	29804136 	bltu	r5,r6,80ac88 <_realloc_r+0x590>
  80ab84:	008004c4 	movi	r2,19
  80ab88:	9009883a 	mov	r4,r18
  80ab8c:	880f883a 	mov	r7,r17
  80ab90:	11800f2e 	bgeu	r2,r6,80abd0 <_realloc_r+0x4d8>
  80ab94:	90800017 	ldw	r2,0(r18)
  80ab98:	b9c00404 	addi	r7,r23,16
  80ab9c:	91000204 	addi	r4,r18,8
  80aba0:	b8800215 	stw	r2,8(r23)
  80aba4:	90c00117 	ldw	r3,4(r18)
  80aba8:	008006c4 	movi	r2,27
  80abac:	b8c00315 	stw	r3,12(r23)
  80abb0:	1180072e 	bgeu	r2,r6,80abd0 <_realloc_r+0x4d8>
  80abb4:	90c00217 	ldw	r3,8(r18)
  80abb8:	b9c00604 	addi	r7,r23,24
  80abbc:	91000404 	addi	r4,r18,16
  80abc0:	b8c00415 	stw	r3,16(r23)
  80abc4:	90800317 	ldw	r2,12(r18)
  80abc8:	b8800515 	stw	r2,20(r23)
  80abcc:	31404026 	beq	r6,r5,80acd0 <_realloc_r+0x5d8>
  80abd0:	20800017 	ldw	r2,0(r4)
  80abd4:	38800015 	stw	r2,0(r7)
  80abd8:	20c00117 	ldw	r3,4(r4)
  80abdc:	38c00115 	stw	r3,4(r7)
  80abe0:	20800217 	ldw	r2,8(r4)
  80abe4:	38800215 	stw	r2,8(r7)
  80abe8:	d8c00117 	ldw	r3,4(sp)
  80abec:	bf0b883a 	add	r5,r23,fp
  80abf0:	b009883a 	mov	r4,r22
  80abf4:	1f05c83a 	sub	r2,r3,fp
  80abf8:	10800054 	ori	r2,r2,1
  80abfc:	28800115 	stw	r2,4(r5)
  80ac00:	b8c00117 	ldw	r3,4(r23)
  80ac04:	00802074 	movhi	r2,129
  80ac08:	1086a304 	addi	r2,r2,6796
  80ac0c:	11400215 	stw	r5,8(r2)
  80ac10:	18c0004c 	andi	r3,r3,1
  80ac14:	e0c6b03a 	or	r3,fp,r3
  80ac18:	b8c00115 	stw	r3,4(r23)
  80ac1c:	080e2ac0 	call	80e2ac <__malloc_unlock>
  80ac20:	003eeb06 	br	80a7d0 <_realloc_r+0xd8>
  80ac24:	20800117 	ldw	r2,4(r4)
  80ac28:	00ffff04 	movi	r3,-4
  80ac2c:	800f883a 	mov	r7,r16
  80ac30:	10c4703a 	and	r2,r2,r3
  80ac34:	98a9883a 	add	r20,r19,r2
  80ac38:	84000204 	addi	r16,r16,8
  80ac3c:	003ecf06 	br	80a77c <_realloc_r+0x84>
  80ac40:	900b883a 	mov	r5,r18
  80ac44:	8009883a 	mov	r4,r16
  80ac48:	08096240 	call	809624 <memmove>
  80ac4c:	dd000017 	ldw	r20,0(sp)
  80ac50:	b80f883a 	mov	r7,r23
  80ac54:	003ec906 	br	80a77c <_realloc_r+0x84>
  80ac58:	900b883a 	mov	r5,r18
  80ac5c:	8009883a 	mov	r4,r16
  80ac60:	08096240 	call	809624 <memmove>
  80ac64:	b80f883a 	mov	r7,r23
  80ac68:	003ec406 	br	80a77c <_realloc_r+0x84>
  80ac6c:	90c00417 	ldw	r3,16(r18)
  80ac70:	89400604 	addi	r5,r17,24
  80ac74:	91000604 	addi	r4,r18,24
  80ac78:	88c00415 	stw	r3,16(r17)
  80ac7c:	90800517 	ldw	r2,20(r18)
  80ac80:	88800515 	stw	r2,20(r17)
  80ac84:	003f6806 	br	80aa28 <_realloc_r+0x330>
  80ac88:	900b883a 	mov	r5,r18
  80ac8c:	8809883a 	mov	r4,r17
  80ac90:	08096240 	call	809624 <memmove>
  80ac94:	003fd406 	br	80abe8 <_realloc_r+0x4f0>
  80ac98:	90c00417 	ldw	r3,16(r18)
  80ac9c:	91000604 	addi	r4,r18,24
  80aca0:	ba000804 	addi	r8,r23,32
  80aca4:	b8c00615 	stw	r3,24(r23)
  80aca8:	90800517 	ldw	r2,20(r18)
  80acac:	b8800715 	stw	r2,28(r23)
  80acb0:	003f1206 	br	80a8fc <_realloc_r+0x204>
  80acb4:	90c00417 	ldw	r3,16(r18)
  80acb8:	91000604 	addi	r4,r18,24
  80acbc:	ba000804 	addi	r8,r23,32
  80acc0:	b8c00615 	stw	r3,24(r23)
  80acc4:	90800517 	ldw	r2,20(r18)
  80acc8:	b8800715 	stw	r2,28(r23)
  80accc:	003f3206 	br	80a998 <_realloc_r+0x2a0>
  80acd0:	90c00417 	ldw	r3,16(r18)
  80acd4:	91000604 	addi	r4,r18,24
  80acd8:	b9c00804 	addi	r7,r23,32
  80acdc:	b8c00615 	stw	r3,24(r23)
  80ace0:	90800517 	ldw	r2,20(r18)
  80ace4:	b8800715 	stw	r2,28(r23)
  80ace8:	003fb906 	br	80abd0 <_realloc_r+0x4d8>

0080acec <__isinfd>:
  80acec:	200d883a 	mov	r6,r4
  80acf0:	0109c83a 	sub	r4,zero,r4
  80acf4:	2188b03a 	or	r4,r4,r6
  80acf8:	2008d7fa 	srli	r4,r4,31
  80acfc:	00a00034 	movhi	r2,32768
  80ad00:	10bfffc4 	addi	r2,r2,-1
  80ad04:	1144703a 	and	r2,r2,r5
  80ad08:	2088b03a 	or	r4,r4,r2
  80ad0c:	009ffc34 	movhi	r2,32752
  80ad10:	1105c83a 	sub	r2,r2,r4
  80ad14:	0087c83a 	sub	r3,zero,r2
  80ad18:	10c4b03a 	or	r2,r2,r3
  80ad1c:	1004d7fa 	srli	r2,r2,31
  80ad20:	00c00044 	movi	r3,1
  80ad24:	1885c83a 	sub	r2,r3,r2
  80ad28:	f800283a 	ret

0080ad2c <__isnand>:
  80ad2c:	200d883a 	mov	r6,r4
  80ad30:	0109c83a 	sub	r4,zero,r4
  80ad34:	2188b03a 	or	r4,r4,r6
  80ad38:	2008d7fa 	srli	r4,r4,31
  80ad3c:	00a00034 	movhi	r2,32768
  80ad40:	10bfffc4 	addi	r2,r2,-1
  80ad44:	1144703a 	and	r2,r2,r5
  80ad48:	2088b03a 	or	r4,r4,r2
  80ad4c:	009ffc34 	movhi	r2,32752
  80ad50:	1105c83a 	sub	r2,r2,r4
  80ad54:	1004d7fa 	srli	r2,r2,31
  80ad58:	f800283a 	ret

0080ad5c <__sclose>:
  80ad5c:	2940038f 	ldh	r5,14(r5)
  80ad60:	080b0901 	jmpi	80b090 <_close_r>

0080ad64 <__sseek>:
  80ad64:	defffe04 	addi	sp,sp,-8
  80ad68:	dc000015 	stw	r16,0(sp)
  80ad6c:	2821883a 	mov	r16,r5
  80ad70:	2940038f 	ldh	r5,14(r5)
  80ad74:	dfc00115 	stw	ra,4(sp)
  80ad78:	080b3080 	call	80b308 <_lseek_r>
  80ad7c:	1007883a 	mov	r3,r2
  80ad80:	00bfffc4 	movi	r2,-1
  80ad84:	18800926 	beq	r3,r2,80adac <__sseek+0x48>
  80ad88:	8080030b 	ldhu	r2,12(r16)
  80ad8c:	80c01415 	stw	r3,80(r16)
  80ad90:	10840014 	ori	r2,r2,4096
  80ad94:	8080030d 	sth	r2,12(r16)
  80ad98:	1805883a 	mov	r2,r3
  80ad9c:	dfc00117 	ldw	ra,4(sp)
  80ada0:	dc000017 	ldw	r16,0(sp)
  80ada4:	dec00204 	addi	sp,sp,8
  80ada8:	f800283a 	ret
  80adac:	8080030b 	ldhu	r2,12(r16)
  80adb0:	10bbffcc 	andi	r2,r2,61439
  80adb4:	8080030d 	sth	r2,12(r16)
  80adb8:	1805883a 	mov	r2,r3
  80adbc:	dfc00117 	ldw	ra,4(sp)
  80adc0:	dc000017 	ldw	r16,0(sp)
  80adc4:	dec00204 	addi	sp,sp,8
  80adc8:	f800283a 	ret

0080adcc <__swrite>:
  80adcc:	2880030b 	ldhu	r2,12(r5)
  80add0:	defffb04 	addi	sp,sp,-20
  80add4:	dcc00315 	stw	r19,12(sp)
  80add8:	1080400c 	andi	r2,r2,256
  80addc:	dc800215 	stw	r18,8(sp)
  80ade0:	dc400115 	stw	r17,4(sp)
  80ade4:	dc000015 	stw	r16,0(sp)
  80ade8:	3027883a 	mov	r19,r6
  80adec:	3825883a 	mov	r18,r7
  80adf0:	dfc00415 	stw	ra,16(sp)
  80adf4:	2821883a 	mov	r16,r5
  80adf8:	000d883a 	mov	r6,zero
  80adfc:	01c00084 	movi	r7,2
  80ae00:	2023883a 	mov	r17,r4
  80ae04:	10000226 	beq	r2,zero,80ae10 <__swrite+0x44>
  80ae08:	2940038f 	ldh	r5,14(r5)
  80ae0c:	080b3080 	call	80b308 <_lseek_r>
  80ae10:	8080030b 	ldhu	r2,12(r16)
  80ae14:	8140038f 	ldh	r5,14(r16)
  80ae18:	8809883a 	mov	r4,r17
  80ae1c:	10bbffcc 	andi	r2,r2,61439
  80ae20:	980d883a 	mov	r6,r19
  80ae24:	900f883a 	mov	r7,r18
  80ae28:	8080030d 	sth	r2,12(r16)
  80ae2c:	dfc00417 	ldw	ra,16(sp)
  80ae30:	dcc00317 	ldw	r19,12(sp)
  80ae34:	dc800217 	ldw	r18,8(sp)
  80ae38:	dc400117 	ldw	r17,4(sp)
  80ae3c:	dc000017 	ldw	r16,0(sp)
  80ae40:	dec00504 	addi	sp,sp,20
  80ae44:	080af641 	jmpi	80af64 <_write_r>

0080ae48 <__sread>:
  80ae48:	defffe04 	addi	sp,sp,-8
  80ae4c:	dc000015 	stw	r16,0(sp)
  80ae50:	2821883a 	mov	r16,r5
  80ae54:	2940038f 	ldh	r5,14(r5)
  80ae58:	dfc00115 	stw	ra,4(sp)
  80ae5c:	080b3800 	call	80b380 <_read_r>
  80ae60:	1007883a 	mov	r3,r2
  80ae64:	10000816 	blt	r2,zero,80ae88 <__sread+0x40>
  80ae68:	80801417 	ldw	r2,80(r16)
  80ae6c:	10c5883a 	add	r2,r2,r3
  80ae70:	80801415 	stw	r2,80(r16)
  80ae74:	1805883a 	mov	r2,r3
  80ae78:	dfc00117 	ldw	ra,4(sp)
  80ae7c:	dc000017 	ldw	r16,0(sp)
  80ae80:	dec00204 	addi	sp,sp,8
  80ae84:	f800283a 	ret
  80ae88:	8080030b 	ldhu	r2,12(r16)
  80ae8c:	10bbffcc 	andi	r2,r2,61439
  80ae90:	8080030d 	sth	r2,12(r16)
  80ae94:	1805883a 	mov	r2,r3
  80ae98:	dfc00117 	ldw	ra,4(sp)
  80ae9c:	dc000017 	ldw	r16,0(sp)
  80aea0:	dec00204 	addi	sp,sp,8
  80aea4:	f800283a 	ret

0080aea8 <strcmp>:
  80aea8:	2144b03a 	or	r2,r4,r5
  80aeac:	108000cc 	andi	r2,r2,3
  80aeb0:	10001d1e 	bne	r2,zero,80af28 <strcmp+0x80>
  80aeb4:	200f883a 	mov	r7,r4
  80aeb8:	28800017 	ldw	r2,0(r5)
  80aebc:	21000017 	ldw	r4,0(r4)
  80aec0:	280d883a 	mov	r6,r5
  80aec4:	2080161e 	bne	r4,r2,80af20 <strcmp+0x78>
  80aec8:	023fbff4 	movhi	r8,65279
  80aecc:	423fbfc4 	addi	r8,r8,-257
  80aed0:	2207883a 	add	r3,r4,r8
  80aed4:	01602074 	movhi	r5,32897
  80aed8:	29602004 	addi	r5,r5,-32640
  80aedc:	1946703a 	and	r3,r3,r5
  80aee0:	0104303a 	nor	r2,zero,r4
  80aee4:	10c4703a 	and	r2,r2,r3
  80aee8:	10001c1e 	bne	r2,zero,80af5c <strcmp+0xb4>
  80aeec:	4013883a 	mov	r9,r8
  80aef0:	2811883a 	mov	r8,r5
  80aef4:	00000106 	br	80aefc <strcmp+0x54>
  80aef8:	1800181e 	bne	r3,zero,80af5c <strcmp+0xb4>
  80aefc:	39c00104 	addi	r7,r7,4
  80af00:	39000017 	ldw	r4,0(r7)
  80af04:	31800104 	addi	r6,r6,4
  80af08:	31400017 	ldw	r5,0(r6)
  80af0c:	2245883a 	add	r2,r4,r9
  80af10:	1204703a 	and	r2,r2,r8
  80af14:	0106303a 	nor	r3,zero,r4
  80af18:	1886703a 	and	r3,r3,r2
  80af1c:	217ff626 	beq	r4,r5,80aef8 <strcmp+0x50>
  80af20:	3809883a 	mov	r4,r7
  80af24:	300b883a 	mov	r5,r6
  80af28:	20c00007 	ldb	r3,0(r4)
  80af2c:	1800051e 	bne	r3,zero,80af44 <strcmp+0x9c>
  80af30:	00000606 	br	80af4c <strcmp+0xa4>
  80af34:	21000044 	addi	r4,r4,1
  80af38:	20c00007 	ldb	r3,0(r4)
  80af3c:	29400044 	addi	r5,r5,1
  80af40:	18000226 	beq	r3,zero,80af4c <strcmp+0xa4>
  80af44:	28800007 	ldb	r2,0(r5)
  80af48:	18bffa26 	beq	r3,r2,80af34 <strcmp+0x8c>
  80af4c:	20c00003 	ldbu	r3,0(r4)
  80af50:	28800003 	ldbu	r2,0(r5)
  80af54:	1885c83a 	sub	r2,r3,r2
  80af58:	f800283a 	ret
  80af5c:	0005883a 	mov	r2,zero
  80af60:	f800283a 	ret

0080af64 <_write_r>:
  80af64:	defffd04 	addi	sp,sp,-12
  80af68:	dc000015 	stw	r16,0(sp)
  80af6c:	04002074 	movhi	r16,129
  80af70:	84151704 	addi	r16,r16,21596
  80af74:	dc400115 	stw	r17,4(sp)
  80af78:	80000015 	stw	zero,0(r16)
  80af7c:	2023883a 	mov	r17,r4
  80af80:	2809883a 	mov	r4,r5
  80af84:	300b883a 	mov	r5,r6
  80af88:	380d883a 	mov	r6,r7
  80af8c:	dfc00215 	stw	ra,8(sp)
  80af90:	080e5680 	call	80e568 <write>
  80af94:	1007883a 	mov	r3,r2
  80af98:	00bfffc4 	movi	r2,-1
  80af9c:	18800626 	beq	r3,r2,80afb8 <_write_r+0x54>
  80afa0:	1805883a 	mov	r2,r3
  80afa4:	dfc00217 	ldw	ra,8(sp)
  80afa8:	dc400117 	ldw	r17,4(sp)
  80afac:	dc000017 	ldw	r16,0(sp)
  80afb0:	dec00304 	addi	sp,sp,12
  80afb4:	f800283a 	ret
  80afb8:	80800017 	ldw	r2,0(r16)
  80afbc:	103ff826 	beq	r2,zero,80afa0 <_write_r+0x3c>
  80afc0:	88800015 	stw	r2,0(r17)
  80afc4:	1805883a 	mov	r2,r3
  80afc8:	dfc00217 	ldw	ra,8(sp)
  80afcc:	dc400117 	ldw	r17,4(sp)
  80afd0:	dc000017 	ldw	r16,0(sp)
  80afd4:	dec00304 	addi	sp,sp,12
  80afd8:	f800283a 	ret

0080afdc <_calloc_r>:
  80afdc:	298b383a 	mul	r5,r5,r6
  80afe0:	defffe04 	addi	sp,sp,-8
  80afe4:	dc000015 	stw	r16,0(sp)
  80afe8:	dfc00115 	stw	ra,4(sp)
  80afec:	0803dcc0 	call	803dcc <_malloc_r>
  80aff0:	1021883a 	mov	r16,r2
  80aff4:	01c00904 	movi	r7,36
  80aff8:	10000d26 	beq	r2,zero,80b030 <_calloc_r+0x54>
  80affc:	10ffff17 	ldw	r3,-4(r2)
  80b000:	1009883a 	mov	r4,r2
  80b004:	00bfff04 	movi	r2,-4
  80b008:	1886703a 	and	r3,r3,r2
  80b00c:	1887883a 	add	r3,r3,r2
  80b010:	180d883a 	mov	r6,r3
  80b014:	000b883a 	mov	r5,zero
  80b018:	38c01736 	bltu	r7,r3,80b078 <_calloc_r+0x9c>
  80b01c:	008004c4 	movi	r2,19
  80b020:	10c00836 	bltu	r2,r3,80b044 <_calloc_r+0x68>
  80b024:	20000215 	stw	zero,8(r4)
  80b028:	20000015 	stw	zero,0(r4)
  80b02c:	20000115 	stw	zero,4(r4)
  80b030:	8005883a 	mov	r2,r16
  80b034:	dfc00117 	ldw	ra,4(sp)
  80b038:	dc000017 	ldw	r16,0(sp)
  80b03c:	dec00204 	addi	sp,sp,8
  80b040:	f800283a 	ret
  80b044:	008006c4 	movi	r2,27
  80b048:	80000015 	stw	zero,0(r16)
  80b04c:	80000115 	stw	zero,4(r16)
  80b050:	81000204 	addi	r4,r16,8
  80b054:	10fff32e 	bgeu	r2,r3,80b024 <_calloc_r+0x48>
  80b058:	80000215 	stw	zero,8(r16)
  80b05c:	80000315 	stw	zero,12(r16)
  80b060:	81000404 	addi	r4,r16,16
  80b064:	19ffef1e 	bne	r3,r7,80b024 <_calloc_r+0x48>
  80b068:	81000604 	addi	r4,r16,24
  80b06c:	80000415 	stw	zero,16(r16)
  80b070:	80000515 	stw	zero,20(r16)
  80b074:	003feb06 	br	80b024 <_calloc_r+0x48>
  80b078:	080450c0 	call	80450c <memset>
  80b07c:	8005883a 	mov	r2,r16
  80b080:	dfc00117 	ldw	ra,4(sp)
  80b084:	dc000017 	ldw	r16,0(sp)
  80b088:	dec00204 	addi	sp,sp,8
  80b08c:	f800283a 	ret

0080b090 <_close_r>:
  80b090:	defffd04 	addi	sp,sp,-12
  80b094:	dc000015 	stw	r16,0(sp)
  80b098:	04002074 	movhi	r16,129
  80b09c:	84151704 	addi	r16,r16,21596
  80b0a0:	dc400115 	stw	r17,4(sp)
  80b0a4:	80000015 	stw	zero,0(r16)
  80b0a8:	2023883a 	mov	r17,r4
  80b0ac:	2809883a 	mov	r4,r5
  80b0b0:	dfc00215 	stw	ra,8(sp)
  80b0b4:	080d8280 	call	80d828 <close>
  80b0b8:	1007883a 	mov	r3,r2
  80b0bc:	00bfffc4 	movi	r2,-1
  80b0c0:	18800626 	beq	r3,r2,80b0dc <_close_r+0x4c>
  80b0c4:	1805883a 	mov	r2,r3
  80b0c8:	dfc00217 	ldw	ra,8(sp)
  80b0cc:	dc400117 	ldw	r17,4(sp)
  80b0d0:	dc000017 	ldw	r16,0(sp)
  80b0d4:	dec00304 	addi	sp,sp,12
  80b0d8:	f800283a 	ret
  80b0dc:	80800017 	ldw	r2,0(r16)
  80b0e0:	103ff826 	beq	r2,zero,80b0c4 <_close_r+0x34>
  80b0e4:	88800015 	stw	r2,0(r17)
  80b0e8:	1805883a 	mov	r2,r3
  80b0ec:	dfc00217 	ldw	ra,8(sp)
  80b0f0:	dc400117 	ldw	r17,4(sp)
  80b0f4:	dc000017 	ldw	r16,0(sp)
  80b0f8:	dec00304 	addi	sp,sp,12
  80b0fc:	f800283a 	ret

0080b100 <_fclose_r>:
  80b100:	defffc04 	addi	sp,sp,-16
  80b104:	dc400115 	stw	r17,4(sp)
  80b108:	dc000015 	stw	r16,0(sp)
  80b10c:	dfc00315 	stw	ra,12(sp)
  80b110:	dc800215 	stw	r18,8(sp)
  80b114:	2821883a 	mov	r16,r5
  80b118:	2023883a 	mov	r17,r4
  80b11c:	28002926 	beq	r5,zero,80b1c4 <_fclose_r+0xc4>
  80b120:	08089c40 	call	8089c4 <__sfp_lock_acquire>
  80b124:	88000226 	beq	r17,zero,80b130 <_fclose_r+0x30>
  80b128:	88800e17 	ldw	r2,56(r17)
  80b12c:	10002d26 	beq	r2,zero,80b1e4 <_fclose_r+0xe4>
  80b130:	8080030f 	ldh	r2,12(r16)
  80b134:	10002226 	beq	r2,zero,80b1c0 <_fclose_r+0xc0>
  80b138:	8809883a 	mov	r4,r17
  80b13c:	800b883a 	mov	r5,r16
  80b140:	080873c0 	call	80873c <_fflush_r>
  80b144:	1025883a 	mov	r18,r2
  80b148:	80800b17 	ldw	r2,44(r16)
  80b14c:	10000426 	beq	r2,zero,80b160 <_fclose_r+0x60>
  80b150:	81400717 	ldw	r5,28(r16)
  80b154:	8809883a 	mov	r4,r17
  80b158:	103ee83a 	callr	r2
  80b15c:	10002a16 	blt	r2,zero,80b208 <_fclose_r+0x108>
  80b160:	8080030b 	ldhu	r2,12(r16)
  80b164:	1080200c 	andi	r2,r2,128
  80b168:	1000231e 	bne	r2,zero,80b1f8 <_fclose_r+0xf8>
  80b16c:	81400c17 	ldw	r5,48(r16)
  80b170:	28000526 	beq	r5,zero,80b188 <_fclose_r+0x88>
  80b174:	80801004 	addi	r2,r16,64
  80b178:	28800226 	beq	r5,r2,80b184 <_fclose_r+0x84>
  80b17c:	8809883a 	mov	r4,r17
  80b180:	0804bf80 	call	804bf8 <_free_r>
  80b184:	80000c15 	stw	zero,48(r16)
  80b188:	81401117 	ldw	r5,68(r16)
  80b18c:	28000326 	beq	r5,zero,80b19c <_fclose_r+0x9c>
  80b190:	8809883a 	mov	r4,r17
  80b194:	0804bf80 	call	804bf8 <_free_r>
  80b198:	80001115 	stw	zero,68(r16)
  80b19c:	8000030d 	sth	zero,12(r16)
  80b1a0:	08089c80 	call	8089c8 <__sfp_lock_release>
  80b1a4:	9005883a 	mov	r2,r18
  80b1a8:	dfc00317 	ldw	ra,12(sp)
  80b1ac:	dc800217 	ldw	r18,8(sp)
  80b1b0:	dc400117 	ldw	r17,4(sp)
  80b1b4:	dc000017 	ldw	r16,0(sp)
  80b1b8:	dec00404 	addi	sp,sp,16
  80b1bc:	f800283a 	ret
  80b1c0:	08089c80 	call	8089c8 <__sfp_lock_release>
  80b1c4:	0025883a 	mov	r18,zero
  80b1c8:	9005883a 	mov	r2,r18
  80b1cc:	dfc00317 	ldw	ra,12(sp)
  80b1d0:	dc800217 	ldw	r18,8(sp)
  80b1d4:	dc400117 	ldw	r17,4(sp)
  80b1d8:	dc000017 	ldw	r16,0(sp)
  80b1dc:	dec00404 	addi	sp,sp,16
  80b1e0:	f800283a 	ret
  80b1e4:	8809883a 	mov	r4,r17
  80b1e8:	08089d40 	call	8089d4 <__sinit>
  80b1ec:	8080030f 	ldh	r2,12(r16)
  80b1f0:	103fd11e 	bne	r2,zero,80b138 <_fclose_r+0x38>
  80b1f4:	003ff206 	br	80b1c0 <_fclose_r+0xc0>
  80b1f8:	81400417 	ldw	r5,16(r16)
  80b1fc:	8809883a 	mov	r4,r17
  80b200:	0804bf80 	call	804bf8 <_free_r>
  80b204:	003fd906 	br	80b16c <_fclose_r+0x6c>
  80b208:	04bfffc4 	movi	r18,-1
  80b20c:	003fd406 	br	80b160 <_fclose_r+0x60>

0080b210 <fclose>:
  80b210:	00802074 	movhi	r2,129
  80b214:	108dcb04 	addi	r2,r2,14124
  80b218:	200b883a 	mov	r5,r4
  80b21c:	11000017 	ldw	r4,0(r2)
  80b220:	080b1001 	jmpi	80b100 <_fclose_r>

0080b224 <_fstat_r>:
  80b224:	defffd04 	addi	sp,sp,-12
  80b228:	dc000015 	stw	r16,0(sp)
  80b22c:	04002074 	movhi	r16,129
  80b230:	84151704 	addi	r16,r16,21596
  80b234:	dc400115 	stw	r17,4(sp)
  80b238:	80000015 	stw	zero,0(r16)
  80b23c:	2023883a 	mov	r17,r4
  80b240:	2809883a 	mov	r4,r5
  80b244:	300b883a 	mov	r5,r6
  80b248:	dfc00215 	stw	ra,8(sp)
  80b24c:	080da100 	call	80da10 <fstat>
  80b250:	1007883a 	mov	r3,r2
  80b254:	00bfffc4 	movi	r2,-1
  80b258:	18800626 	beq	r3,r2,80b274 <_fstat_r+0x50>
  80b25c:	1805883a 	mov	r2,r3
  80b260:	dfc00217 	ldw	ra,8(sp)
  80b264:	dc400117 	ldw	r17,4(sp)
  80b268:	dc000017 	ldw	r16,0(sp)
  80b26c:	dec00304 	addi	sp,sp,12
  80b270:	f800283a 	ret
  80b274:	80800017 	ldw	r2,0(r16)
  80b278:	103ff826 	beq	r2,zero,80b25c <_fstat_r+0x38>
  80b27c:	88800015 	stw	r2,0(r17)
  80b280:	1805883a 	mov	r2,r3
  80b284:	dfc00217 	ldw	ra,8(sp)
  80b288:	dc400117 	ldw	r17,4(sp)
  80b28c:	dc000017 	ldw	r16,0(sp)
  80b290:	dec00304 	addi	sp,sp,12
  80b294:	f800283a 	ret

0080b298 <_isatty_r>:
  80b298:	defffd04 	addi	sp,sp,-12
  80b29c:	dc000015 	stw	r16,0(sp)
  80b2a0:	04002074 	movhi	r16,129
  80b2a4:	84151704 	addi	r16,r16,21596
  80b2a8:	dc400115 	stw	r17,4(sp)
  80b2ac:	80000015 	stw	zero,0(r16)
  80b2b0:	2023883a 	mov	r17,r4
  80b2b4:	2809883a 	mov	r4,r5
  80b2b8:	dfc00215 	stw	ra,8(sp)
  80b2bc:	080dd240 	call	80dd24 <isatty>
  80b2c0:	1007883a 	mov	r3,r2
  80b2c4:	00bfffc4 	movi	r2,-1
  80b2c8:	18800626 	beq	r3,r2,80b2e4 <_isatty_r+0x4c>
  80b2cc:	1805883a 	mov	r2,r3
  80b2d0:	dfc00217 	ldw	ra,8(sp)
  80b2d4:	dc400117 	ldw	r17,4(sp)
  80b2d8:	dc000017 	ldw	r16,0(sp)
  80b2dc:	dec00304 	addi	sp,sp,12
  80b2e0:	f800283a 	ret
  80b2e4:	80800017 	ldw	r2,0(r16)
  80b2e8:	103ff826 	beq	r2,zero,80b2cc <_isatty_r+0x34>
  80b2ec:	88800015 	stw	r2,0(r17)
  80b2f0:	1805883a 	mov	r2,r3
  80b2f4:	dfc00217 	ldw	ra,8(sp)
  80b2f8:	dc400117 	ldw	r17,4(sp)
  80b2fc:	dc000017 	ldw	r16,0(sp)
  80b300:	dec00304 	addi	sp,sp,12
  80b304:	f800283a 	ret

0080b308 <_lseek_r>:
  80b308:	defffd04 	addi	sp,sp,-12
  80b30c:	dc000015 	stw	r16,0(sp)
  80b310:	04002074 	movhi	r16,129
  80b314:	84151704 	addi	r16,r16,21596
  80b318:	dc400115 	stw	r17,4(sp)
  80b31c:	80000015 	stw	zero,0(r16)
  80b320:	2023883a 	mov	r17,r4
  80b324:	2809883a 	mov	r4,r5
  80b328:	300b883a 	mov	r5,r6
  80b32c:	380d883a 	mov	r6,r7
  80b330:	dfc00215 	stw	ra,8(sp)
  80b334:	080e0d00 	call	80e0d0 <lseek>
  80b338:	1007883a 	mov	r3,r2
  80b33c:	00bfffc4 	movi	r2,-1
  80b340:	18800626 	beq	r3,r2,80b35c <_lseek_r+0x54>
  80b344:	1805883a 	mov	r2,r3
  80b348:	dfc00217 	ldw	ra,8(sp)
  80b34c:	dc400117 	ldw	r17,4(sp)
  80b350:	dc000017 	ldw	r16,0(sp)
  80b354:	dec00304 	addi	sp,sp,12
  80b358:	f800283a 	ret
  80b35c:	80800017 	ldw	r2,0(r16)
  80b360:	103ff826 	beq	r2,zero,80b344 <_lseek_r+0x3c>
  80b364:	88800015 	stw	r2,0(r17)
  80b368:	1805883a 	mov	r2,r3
  80b36c:	dfc00217 	ldw	ra,8(sp)
  80b370:	dc400117 	ldw	r17,4(sp)
  80b374:	dc000017 	ldw	r16,0(sp)
  80b378:	dec00304 	addi	sp,sp,12
  80b37c:	f800283a 	ret

0080b380 <_read_r>:
  80b380:	defffd04 	addi	sp,sp,-12
  80b384:	dc000015 	stw	r16,0(sp)
  80b388:	04002074 	movhi	r16,129
  80b38c:	84151704 	addi	r16,r16,21596
  80b390:	dc400115 	stw	r17,4(sp)
  80b394:	80000015 	stw	zero,0(r16)
  80b398:	2023883a 	mov	r17,r4
  80b39c:	2809883a 	mov	r4,r5
  80b3a0:	300b883a 	mov	r5,r6
  80b3a4:	380d883a 	mov	r6,r7
  80b3a8:	dfc00215 	stw	ra,8(sp)
  80b3ac:	080e2cc0 	call	80e2cc <read>
  80b3b0:	1007883a 	mov	r3,r2
  80b3b4:	00bfffc4 	movi	r2,-1
  80b3b8:	18800626 	beq	r3,r2,80b3d4 <_read_r+0x54>
  80b3bc:	1805883a 	mov	r2,r3
  80b3c0:	dfc00217 	ldw	ra,8(sp)
  80b3c4:	dc400117 	ldw	r17,4(sp)
  80b3c8:	dc000017 	ldw	r16,0(sp)
  80b3cc:	dec00304 	addi	sp,sp,12
  80b3d0:	f800283a 	ret
  80b3d4:	80800017 	ldw	r2,0(r16)
  80b3d8:	103ff826 	beq	r2,zero,80b3bc <_read_r+0x3c>
  80b3dc:	88800015 	stw	r2,0(r17)
  80b3e0:	1805883a 	mov	r2,r3
  80b3e4:	dfc00217 	ldw	ra,8(sp)
  80b3e8:	dc400117 	ldw	r17,4(sp)
  80b3ec:	dc000017 	ldw	r16,0(sp)
  80b3f0:	dec00304 	addi	sp,sp,12
  80b3f4:	f800283a 	ret

0080b3f8 <__udivdi3>:
  80b3f8:	defff004 	addi	sp,sp,-64
  80b3fc:	2005883a 	mov	r2,r4
  80b400:	3011883a 	mov	r8,r6
  80b404:	df000e15 	stw	fp,56(sp)
  80b408:	dd000a15 	stw	r20,40(sp)
  80b40c:	dc000615 	stw	r16,24(sp)
  80b410:	dfc00f15 	stw	ra,60(sp)
  80b414:	ddc00d15 	stw	r23,52(sp)
  80b418:	dd800c15 	stw	r22,48(sp)
  80b41c:	dd400b15 	stw	r21,44(sp)
  80b420:	dcc00915 	stw	r19,36(sp)
  80b424:	dc800815 	stw	r18,32(sp)
  80b428:	dc400715 	stw	r17,28(sp)
  80b42c:	4021883a 	mov	r16,r8
  80b430:	1039883a 	mov	fp,r2
  80b434:	2829883a 	mov	r20,r5
  80b438:	38003b1e 	bne	r7,zero,80b528 <__udivdi3+0x130>
  80b43c:	2a005c36 	bltu	r5,r8,80b5b0 <__udivdi3+0x1b8>
  80b440:	4000a626 	beq	r8,zero,80b6dc <__udivdi3+0x2e4>
  80b444:	00bfffd4 	movui	r2,65535
  80b448:	14009e36 	bltu	r2,r16,80b6c4 <__udivdi3+0x2cc>
  80b44c:	00803fc4 	movi	r2,255
  80b450:	14013d36 	bltu	r2,r16,80b948 <__udivdi3+0x550>
  80b454:	000b883a 	mov	r5,zero
  80b458:	0005883a 	mov	r2,zero
  80b45c:	8084d83a 	srl	r2,r16,r2
  80b460:	01002074 	movhi	r4,129
  80b464:	21065504 	addi	r4,r4,6484
  80b468:	01800804 	movi	r6,32
  80b46c:	1105883a 	add	r2,r2,r4
  80b470:	10c00003 	ldbu	r3,0(r2)
  80b474:	28c7883a 	add	r3,r5,r3
  80b478:	30edc83a 	sub	r22,r6,r3
  80b47c:	b000ee1e 	bne	r22,zero,80b838 <__udivdi3+0x440>
  80b480:	802ad43a 	srli	r21,r16,16
  80b484:	00800044 	movi	r2,1
  80b488:	a423c83a 	sub	r17,r20,r16
  80b48c:	85ffffcc 	andi	r23,r16,65535
  80b490:	d8800315 	stw	r2,12(sp)
  80b494:	8809883a 	mov	r4,r17
  80b498:	a80b883a 	mov	r5,r21
  80b49c:	080d1ec0 	call	80d1ec <__udivsi3>
  80b4a0:	8809883a 	mov	r4,r17
  80b4a4:	a80b883a 	mov	r5,r21
  80b4a8:	102d883a 	mov	r22,r2
  80b4ac:	080d1f40 	call	80d1f4 <__umodsi3>
  80b4b0:	1004943a 	slli	r2,r2,16
  80b4b4:	e006d43a 	srli	r3,fp,16
  80b4b8:	bda3383a 	mul	r17,r23,r22
  80b4bc:	10c4b03a 	or	r2,r2,r3
  80b4c0:	1440042e 	bgeu	r2,r17,80b4d4 <__udivdi3+0xdc>
  80b4c4:	1405883a 	add	r2,r2,r16
  80b4c8:	b5bfffc4 	addi	r22,r22,-1
  80b4cc:	14000136 	bltu	r2,r16,80b4d4 <__udivdi3+0xdc>
  80b4d0:	14413d36 	bltu	r2,r17,80b9c8 <__udivdi3+0x5d0>
  80b4d4:	1463c83a 	sub	r17,r2,r17
  80b4d8:	8809883a 	mov	r4,r17
  80b4dc:	a80b883a 	mov	r5,r21
  80b4e0:	080d1ec0 	call	80d1ec <__udivsi3>
  80b4e4:	8809883a 	mov	r4,r17
  80b4e8:	a80b883a 	mov	r5,r21
  80b4ec:	1029883a 	mov	r20,r2
  80b4f0:	080d1f40 	call	80d1f4 <__umodsi3>
  80b4f4:	1004943a 	slli	r2,r2,16
  80b4f8:	bd09383a 	mul	r4,r23,r20
  80b4fc:	e0ffffcc 	andi	r3,fp,65535
  80b500:	10c4b03a 	or	r2,r2,r3
  80b504:	1100042e 	bgeu	r2,r4,80b518 <__udivdi3+0x120>
  80b508:	8085883a 	add	r2,r16,r2
  80b50c:	a53fffc4 	addi	r20,r20,-1
  80b510:	14000136 	bltu	r2,r16,80b518 <__udivdi3+0x120>
  80b514:	11012036 	bltu	r2,r4,80b998 <__udivdi3+0x5a0>
  80b518:	b004943a 	slli	r2,r22,16
  80b51c:	d9000317 	ldw	r4,12(sp)
  80b520:	a084b03a 	or	r2,r20,r2
  80b524:	00001506 	br	80b57c <__udivdi3+0x184>
  80b528:	380d883a 	mov	r6,r7
  80b52c:	29c06236 	bltu	r5,r7,80b6b8 <__udivdi3+0x2c0>
  80b530:	00bfffd4 	movui	r2,65535
  80b534:	11c05a36 	bltu	r2,r7,80b6a0 <__udivdi3+0x2a8>
  80b538:	00803fc4 	movi	r2,255
  80b53c:	11c0fc36 	bltu	r2,r7,80b930 <__udivdi3+0x538>
  80b540:	000b883a 	mov	r5,zero
  80b544:	0005883a 	mov	r2,zero
  80b548:	3084d83a 	srl	r2,r6,r2
  80b54c:	01002074 	movhi	r4,129
  80b550:	21065504 	addi	r4,r4,6484
  80b554:	01c00804 	movi	r7,32
  80b558:	1105883a 	add	r2,r2,r4
  80b55c:	10c00003 	ldbu	r3,0(r2)
  80b560:	28c7883a 	add	r3,r5,r3
  80b564:	38efc83a 	sub	r23,r7,r3
  80b568:	b800691e 	bne	r23,zero,80b710 <__udivdi3+0x318>
  80b56c:	35000136 	bltu	r6,r20,80b574 <__udivdi3+0x17c>
  80b570:	e4005136 	bltu	fp,r16,80b6b8 <__udivdi3+0x2c0>
  80b574:	00800044 	movi	r2,1
  80b578:	0009883a 	mov	r4,zero
  80b57c:	2007883a 	mov	r3,r4
  80b580:	dfc00f17 	ldw	ra,60(sp)
  80b584:	df000e17 	ldw	fp,56(sp)
  80b588:	ddc00d17 	ldw	r23,52(sp)
  80b58c:	dd800c17 	ldw	r22,48(sp)
  80b590:	dd400b17 	ldw	r21,44(sp)
  80b594:	dd000a17 	ldw	r20,40(sp)
  80b598:	dcc00917 	ldw	r19,36(sp)
  80b59c:	dc800817 	ldw	r18,32(sp)
  80b5a0:	dc400717 	ldw	r17,28(sp)
  80b5a4:	dc000617 	ldw	r16,24(sp)
  80b5a8:	dec01004 	addi	sp,sp,64
  80b5ac:	f800283a 	ret
  80b5b0:	00bfffd4 	movui	r2,65535
  80b5b4:	12005036 	bltu	r2,r8,80b6f8 <__udivdi3+0x300>
  80b5b8:	00803fc4 	movi	r2,255
  80b5bc:	1200e836 	bltu	r2,r8,80b960 <__udivdi3+0x568>
  80b5c0:	000b883a 	mov	r5,zero
  80b5c4:	0005883a 	mov	r2,zero
  80b5c8:	8084d83a 	srl	r2,r16,r2
  80b5cc:	01002074 	movhi	r4,129
  80b5d0:	21065504 	addi	r4,r4,6484
  80b5d4:	01800804 	movi	r6,32
  80b5d8:	1105883a 	add	r2,r2,r4
  80b5dc:	10c00003 	ldbu	r3,0(r2)
  80b5e0:	28c7883a 	add	r3,r5,r3
  80b5e4:	30cbc83a 	sub	r5,r6,r3
  80b5e8:	28000626 	beq	r5,zero,80b604 <__udivdi3+0x20c>
  80b5ec:	3145c83a 	sub	r2,r6,r5
  80b5f0:	e084d83a 	srl	r2,fp,r2
  80b5f4:	a146983a 	sll	r3,r20,r5
  80b5f8:	e178983a 	sll	fp,fp,r5
  80b5fc:	8160983a 	sll	r16,r16,r5
  80b600:	18a8b03a 	or	r20,r3,r2
  80b604:	802ad43a 	srli	r21,r16,16
  80b608:	a009883a 	mov	r4,r20
  80b60c:	85ffffcc 	andi	r23,r16,65535
  80b610:	a80b883a 	mov	r5,r21
  80b614:	080d1ec0 	call	80d1ec <__udivsi3>
  80b618:	a009883a 	mov	r4,r20
  80b61c:	a80b883a 	mov	r5,r21
  80b620:	102d883a 	mov	r22,r2
  80b624:	080d1f40 	call	80d1f4 <__umodsi3>
  80b628:	1004943a 	slli	r2,r2,16
  80b62c:	e006d43a 	srli	r3,fp,16
  80b630:	bda3383a 	mul	r17,r23,r22
  80b634:	10c4b03a 	or	r2,r2,r3
  80b638:	1440042e 	bgeu	r2,r17,80b64c <__udivdi3+0x254>
  80b63c:	1405883a 	add	r2,r2,r16
  80b640:	b5bfffc4 	addi	r22,r22,-1
  80b644:	14000136 	bltu	r2,r16,80b64c <__udivdi3+0x254>
  80b648:	1440d536 	bltu	r2,r17,80b9a0 <__udivdi3+0x5a8>
  80b64c:	1463c83a 	sub	r17,r2,r17
  80b650:	8809883a 	mov	r4,r17
  80b654:	a80b883a 	mov	r5,r21
  80b658:	080d1ec0 	call	80d1ec <__udivsi3>
  80b65c:	8809883a 	mov	r4,r17
  80b660:	a80b883a 	mov	r5,r21
  80b664:	1029883a 	mov	r20,r2
  80b668:	080d1f40 	call	80d1f4 <__umodsi3>
  80b66c:	1004943a 	slli	r2,r2,16
  80b670:	bd09383a 	mul	r4,r23,r20
  80b674:	e0ffffcc 	andi	r3,fp,65535
  80b678:	10c4b03a 	or	r2,r2,r3
  80b67c:	1100042e 	bgeu	r2,r4,80b690 <__udivdi3+0x298>
  80b680:	8085883a 	add	r2,r16,r2
  80b684:	a53fffc4 	addi	r20,r20,-1
  80b688:	14000136 	bltu	r2,r16,80b690 <__udivdi3+0x298>
  80b68c:	1100c736 	bltu	r2,r4,80b9ac <__udivdi3+0x5b4>
  80b690:	b004943a 	slli	r2,r22,16
  80b694:	0009883a 	mov	r4,zero
  80b698:	a084b03a 	or	r2,r20,r2
  80b69c:	003fb706 	br	80b57c <__udivdi3+0x184>
  80b6a0:	00804034 	movhi	r2,256
  80b6a4:	10bfffc4 	addi	r2,r2,-1
  80b6a8:	11c0a436 	bltu	r2,r7,80b93c <__udivdi3+0x544>
  80b6ac:	01400404 	movi	r5,16
  80b6b0:	2805883a 	mov	r2,r5
  80b6b4:	003fa406 	br	80b548 <__udivdi3+0x150>
  80b6b8:	0005883a 	mov	r2,zero
  80b6bc:	0009883a 	mov	r4,zero
  80b6c0:	003fae06 	br	80b57c <__udivdi3+0x184>
  80b6c4:	00804034 	movhi	r2,256
  80b6c8:	10bfffc4 	addi	r2,r2,-1
  80b6cc:	1400a136 	bltu	r2,r16,80b954 <__udivdi3+0x55c>
  80b6d0:	01400404 	movi	r5,16
  80b6d4:	2805883a 	mov	r2,r5
  80b6d8:	003f6006 	br	80b45c <__udivdi3+0x64>
  80b6dc:	01000044 	movi	r4,1
  80b6e0:	000b883a 	mov	r5,zero
  80b6e4:	080d1ec0 	call	80d1ec <__udivsi3>
  80b6e8:	1021883a 	mov	r16,r2
  80b6ec:	00bfffd4 	movui	r2,65535
  80b6f0:	143ff436 	bltu	r2,r16,80b6c4 <__udivdi3+0x2cc>
  80b6f4:	003f5506 	br	80b44c <__udivdi3+0x54>
  80b6f8:	00804034 	movhi	r2,256
  80b6fc:	10bfffc4 	addi	r2,r2,-1
  80b700:	12009a36 	bltu	r2,r8,80b96c <__udivdi3+0x574>
  80b704:	01400404 	movi	r5,16
  80b708:	2805883a 	mov	r2,r5
  80b70c:	003fae06 	br	80b5c8 <__udivdi3+0x1d0>
  80b710:	3dc5c83a 	sub	r2,r7,r23
  80b714:	35c8983a 	sll	r4,r6,r23
  80b718:	8086d83a 	srl	r3,r16,r2
  80b71c:	a0a2d83a 	srl	r17,r20,r2
  80b720:	e084d83a 	srl	r2,fp,r2
  80b724:	20eab03a 	or	r21,r4,r3
  80b728:	a82cd43a 	srli	r22,r21,16
  80b72c:	a5c6983a 	sll	r3,r20,r23
  80b730:	8809883a 	mov	r4,r17
  80b734:	b00b883a 	mov	r5,r22
  80b738:	1886b03a 	or	r3,r3,r2
  80b73c:	d8c00215 	stw	r3,8(sp)
  80b740:	080d1ec0 	call	80d1ec <__udivsi3>
  80b744:	8809883a 	mov	r4,r17
  80b748:	b00b883a 	mov	r5,r22
  80b74c:	1029883a 	mov	r20,r2
  80b750:	080d1f40 	call	80d1f4 <__umodsi3>
  80b754:	a8ffffcc 	andi	r3,r21,65535
  80b758:	d8c00515 	stw	r3,20(sp)
  80b75c:	d9000217 	ldw	r4,8(sp)
  80b760:	d9400517 	ldw	r5,20(sp)
  80b764:	1004943a 	slli	r2,r2,16
  80b768:	2006d43a 	srli	r3,r4,16
  80b76c:	85e0983a 	sll	r16,r16,r23
  80b770:	2d23383a 	mul	r17,r5,r20
  80b774:	10c4b03a 	or	r2,r2,r3
  80b778:	dc000015 	stw	r16,0(sp)
  80b77c:	1440032e 	bgeu	r2,r17,80b78c <__udivdi3+0x394>
  80b780:	1545883a 	add	r2,r2,r21
  80b784:	a53fffc4 	addi	r20,r20,-1
  80b788:	15407f2e 	bgeu	r2,r21,80b988 <__udivdi3+0x590>
  80b78c:	1463c83a 	sub	r17,r2,r17
  80b790:	8809883a 	mov	r4,r17
  80b794:	b00b883a 	mov	r5,r22
  80b798:	080d1ec0 	call	80d1ec <__udivsi3>
  80b79c:	8809883a 	mov	r4,r17
  80b7a0:	b00b883a 	mov	r5,r22
  80b7a4:	1021883a 	mov	r16,r2
  80b7a8:	080d1f40 	call	80d1f4 <__umodsi3>
  80b7ac:	d8c00517 	ldw	r3,20(sp)
  80b7b0:	d9000217 	ldw	r4,8(sp)
  80b7b4:	1004943a 	slli	r2,r2,16
  80b7b8:	1c0f383a 	mul	r7,r3,r16
  80b7bc:	20ffffcc 	andi	r3,r4,65535
  80b7c0:	10e2b03a 	or	r17,r2,r3
  80b7c4:	89c0032e 	bgeu	r17,r7,80b7d4 <__udivdi3+0x3dc>
  80b7c8:	8d63883a 	add	r17,r17,r21
  80b7cc:	843fffc4 	addi	r16,r16,-1
  80b7d0:	8d40692e 	bgeu	r17,r21,80b978 <__udivdi3+0x580>
  80b7d4:	a008943a 	slli	r4,r20,16
  80b7d8:	d9400017 	ldw	r5,0(sp)
  80b7dc:	89e3c83a 	sub	r17,r17,r7
  80b7e0:	8110b03a 	or	r8,r16,r4
  80b7e4:	280cd43a 	srli	r6,r5,16
  80b7e8:	28ffffcc 	andi	r3,r5,65535
  80b7ec:	40bfffcc 	andi	r2,r8,65535
  80b7f0:	400ad43a 	srli	r5,r8,16
  80b7f4:	10d3383a 	mul	r9,r2,r3
  80b7f8:	1185383a 	mul	r2,r2,r6
  80b7fc:	28c7383a 	mul	r3,r5,r3
  80b800:	4808d43a 	srli	r4,r9,16
  80b804:	298b383a 	mul	r5,r5,r6
  80b808:	10c5883a 	add	r2,r2,r3
  80b80c:	2089883a 	add	r4,r4,r2
  80b810:	20c0022e 	bgeu	r4,r3,80b81c <__udivdi3+0x424>
  80b814:	00800074 	movhi	r2,1
  80b818:	288b883a 	add	r5,r5,r2
  80b81c:	2004d43a 	srli	r2,r4,16
  80b820:	288b883a 	add	r5,r5,r2
  80b824:	89403f36 	bltu	r17,r5,80b924 <__udivdi3+0x52c>
  80b828:	89403926 	beq	r17,r5,80b910 <__udivdi3+0x518>
  80b82c:	4005883a 	mov	r2,r8
  80b830:	0009883a 	mov	r4,zero
  80b834:	003f5106 	br	80b57c <__udivdi3+0x184>
  80b838:	85a0983a 	sll	r16,r16,r22
  80b83c:	3585c83a 	sub	r2,r6,r22
  80b840:	a0a2d83a 	srl	r17,r20,r2
  80b844:	802ad43a 	srli	r21,r16,16
  80b848:	e084d83a 	srl	r2,fp,r2
  80b84c:	a586983a 	sll	r3,r20,r22
  80b850:	8809883a 	mov	r4,r17
  80b854:	a80b883a 	mov	r5,r21
  80b858:	1886b03a 	or	r3,r3,r2
  80b85c:	d8c00115 	stw	r3,4(sp)
  80b860:	080d1ec0 	call	80d1ec <__udivsi3>
  80b864:	8809883a 	mov	r4,r17
  80b868:	a80b883a 	mov	r5,r21
  80b86c:	d8800415 	stw	r2,16(sp)
  80b870:	080d1f40 	call	80d1f4 <__umodsi3>
  80b874:	d9000117 	ldw	r4,4(sp)
  80b878:	d9400417 	ldw	r5,16(sp)
  80b87c:	1004943a 	slli	r2,r2,16
  80b880:	85ffffcc 	andi	r23,r16,65535
  80b884:	2006d43a 	srli	r3,r4,16
  80b888:	b963383a 	mul	r17,r23,r5
  80b88c:	10c4b03a 	or	r2,r2,r3
  80b890:	1440042e 	bgeu	r2,r17,80b8a4 <__udivdi3+0x4ac>
  80b894:	297fffc4 	addi	r5,r5,-1
  80b898:	1405883a 	add	r2,r2,r16
  80b89c:	d9400415 	stw	r5,16(sp)
  80b8a0:	1400442e 	bgeu	r2,r16,80b9b4 <__udivdi3+0x5bc>
  80b8a4:	1463c83a 	sub	r17,r2,r17
  80b8a8:	8809883a 	mov	r4,r17
  80b8ac:	a80b883a 	mov	r5,r21
  80b8b0:	080d1ec0 	call	80d1ec <__udivsi3>
  80b8b4:	8809883a 	mov	r4,r17
  80b8b8:	a80b883a 	mov	r5,r21
  80b8bc:	1029883a 	mov	r20,r2
  80b8c0:	080d1f40 	call	80d1f4 <__umodsi3>
  80b8c4:	d9400117 	ldw	r5,4(sp)
  80b8c8:	1004943a 	slli	r2,r2,16
  80b8cc:	bd09383a 	mul	r4,r23,r20
  80b8d0:	28ffffcc 	andi	r3,r5,65535
  80b8d4:	10c6b03a 	or	r3,r2,r3
  80b8d8:	1900062e 	bgeu	r3,r4,80b8f4 <__udivdi3+0x4fc>
  80b8dc:	1c07883a 	add	r3,r3,r16
  80b8e0:	a53fffc4 	addi	r20,r20,-1
  80b8e4:	1c000336 	bltu	r3,r16,80b8f4 <__udivdi3+0x4fc>
  80b8e8:	1900022e 	bgeu	r3,r4,80b8f4 <__udivdi3+0x4fc>
  80b8ec:	a53fffc4 	addi	r20,r20,-1
  80b8f0:	1c07883a 	add	r3,r3,r16
  80b8f4:	d9400417 	ldw	r5,16(sp)
  80b8f8:	e5b8983a 	sll	fp,fp,r22
  80b8fc:	1923c83a 	sub	r17,r3,r4
  80b900:	2804943a 	slli	r2,r5,16
  80b904:	a0a8b03a 	or	r20,r20,r2
  80b908:	dd000315 	stw	r20,12(sp)
  80b90c:	003ee106 	br	80b494 <__udivdi3+0x9c>
  80b910:	2004943a 	slli	r2,r4,16
  80b914:	e5c8983a 	sll	r4,fp,r23
  80b918:	48ffffcc 	andi	r3,r9,65535
  80b91c:	10c5883a 	add	r2,r2,r3
  80b920:	20bfc22e 	bgeu	r4,r2,80b82c <__udivdi3+0x434>
  80b924:	40bfffc4 	addi	r2,r8,-1
  80b928:	0009883a 	mov	r4,zero
  80b92c:	003f1306 	br	80b57c <__udivdi3+0x184>
  80b930:	01400204 	movi	r5,8
  80b934:	2805883a 	mov	r2,r5
  80b938:	003f0306 	br	80b548 <__udivdi3+0x150>
  80b93c:	01400604 	movi	r5,24
  80b940:	2805883a 	mov	r2,r5
  80b944:	003f0006 	br	80b548 <__udivdi3+0x150>
  80b948:	01400204 	movi	r5,8
  80b94c:	2805883a 	mov	r2,r5
  80b950:	003ec206 	br	80b45c <__udivdi3+0x64>
  80b954:	01400604 	movi	r5,24
  80b958:	2805883a 	mov	r2,r5
  80b95c:	003ebf06 	br	80b45c <__udivdi3+0x64>
  80b960:	01400204 	movi	r5,8
  80b964:	2805883a 	mov	r2,r5
  80b968:	003f1706 	br	80b5c8 <__udivdi3+0x1d0>
  80b96c:	01400604 	movi	r5,24
  80b970:	2805883a 	mov	r2,r5
  80b974:	003f1406 	br	80b5c8 <__udivdi3+0x1d0>
  80b978:	89ff962e 	bgeu	r17,r7,80b7d4 <__udivdi3+0x3dc>
  80b97c:	8d63883a 	add	r17,r17,r21
  80b980:	843fffc4 	addi	r16,r16,-1
  80b984:	003f9306 	br	80b7d4 <__udivdi3+0x3dc>
  80b988:	147f802e 	bgeu	r2,r17,80b78c <__udivdi3+0x394>
  80b98c:	a53fffc4 	addi	r20,r20,-1
  80b990:	1545883a 	add	r2,r2,r21
  80b994:	003f7d06 	br	80b78c <__udivdi3+0x394>
  80b998:	a53fffc4 	addi	r20,r20,-1
  80b99c:	003ede06 	br	80b518 <__udivdi3+0x120>
  80b9a0:	b5bfffc4 	addi	r22,r22,-1
  80b9a4:	1405883a 	add	r2,r2,r16
  80b9a8:	003f2806 	br	80b64c <__udivdi3+0x254>
  80b9ac:	a53fffc4 	addi	r20,r20,-1
  80b9b0:	003f3706 	br	80b690 <__udivdi3+0x298>
  80b9b4:	147fbb2e 	bgeu	r2,r17,80b8a4 <__udivdi3+0x4ac>
  80b9b8:	297fffc4 	addi	r5,r5,-1
  80b9bc:	1405883a 	add	r2,r2,r16
  80b9c0:	d9400415 	stw	r5,16(sp)
  80b9c4:	003fb706 	br	80b8a4 <__udivdi3+0x4ac>
  80b9c8:	b5bfffc4 	addi	r22,r22,-1
  80b9cc:	1405883a 	add	r2,r2,r16
  80b9d0:	003ec006 	br	80b4d4 <__udivdi3+0xdc>

0080b9d4 <__umoddi3>:
  80b9d4:	defff104 	addi	sp,sp,-60
  80b9d8:	dd800b15 	stw	r22,44(sp)
  80b9dc:	dd000915 	stw	r20,36(sp)
  80b9e0:	dc000515 	stw	r16,20(sp)
  80b9e4:	dfc00e15 	stw	ra,56(sp)
  80b9e8:	df000d15 	stw	fp,52(sp)
  80b9ec:	ddc00c15 	stw	r23,48(sp)
  80b9f0:	dd400a15 	stw	r21,40(sp)
  80b9f4:	dcc00815 	stw	r19,32(sp)
  80b9f8:	dc800715 	stw	r18,28(sp)
  80b9fc:	dc400615 	stw	r17,24(sp)
  80ba00:	3021883a 	mov	r16,r6
  80ba04:	202d883a 	mov	r22,r4
  80ba08:	2829883a 	mov	r20,r5
  80ba0c:	38002b1e 	bne	r7,zero,80babc <__umoddi3+0xe8>
  80ba10:	29805036 	bltu	r5,r6,80bb54 <__umoddi3+0x180>
  80ba14:	30008a26 	beq	r6,zero,80bc40 <__umoddi3+0x26c>
  80ba18:	00bfffd4 	movui	r2,65535
  80ba1c:	14008236 	bltu	r2,r16,80bc28 <__umoddi3+0x254>
  80ba20:	00803fc4 	movi	r2,255
  80ba24:	14013636 	bltu	r2,r16,80bf00 <__umoddi3+0x52c>
  80ba28:	000b883a 	mov	r5,zero
  80ba2c:	0005883a 	mov	r2,zero
  80ba30:	8084d83a 	srl	r2,r16,r2
  80ba34:	01002074 	movhi	r4,129
  80ba38:	21065504 	addi	r4,r4,6484
  80ba3c:	01800804 	movi	r6,32
  80ba40:	1105883a 	add	r2,r2,r4
  80ba44:	10c00003 	ldbu	r3,0(r2)
  80ba48:	28c7883a 	add	r3,r5,r3
  80ba4c:	30efc83a 	sub	r23,r6,r3
  80ba50:	b800941e 	bne	r23,zero,80bca4 <__umoddi3+0x2d0>
  80ba54:	802ad43a 	srli	r21,r16,16
  80ba58:	a423c83a 	sub	r17,r20,r16
  80ba5c:	0039883a 	mov	fp,zero
  80ba60:	853fffcc 	andi	r20,r16,65535
  80ba64:	8809883a 	mov	r4,r17
  80ba68:	a80b883a 	mov	r5,r21
  80ba6c:	080d1ec0 	call	80d1ec <__udivsi3>
  80ba70:	8809883a 	mov	r4,r17
  80ba74:	a80b883a 	mov	r5,r21
  80ba78:	a0a3383a 	mul	r17,r20,r2
  80ba7c:	080d1f40 	call	80d1f4 <__umodsi3>
  80ba80:	1004943a 	slli	r2,r2,16
  80ba84:	b006d43a 	srli	r3,r22,16
  80ba88:	10c4b03a 	or	r2,r2,r3
  80ba8c:	1440032e 	bgeu	r2,r17,80ba9c <__umoddi3+0xc8>
  80ba90:	1405883a 	add	r2,r2,r16
  80ba94:	14000136 	bltu	r2,r16,80ba9c <__umoddi3+0xc8>
  80ba98:	14413536 	bltu	r2,r17,80bf70 <__umoddi3+0x59c>
  80ba9c:	1463c83a 	sub	r17,r2,r17
  80baa0:	8809883a 	mov	r4,r17
  80baa4:	a80b883a 	mov	r5,r21
  80baa8:	080d1ec0 	call	80d1ec <__udivsi3>
  80baac:	8809883a 	mov	r4,r17
  80bab0:	a0a3383a 	mul	r17,r20,r2
  80bab4:	a80b883a 	mov	r5,r21
  80bab8:	00004d06 	br	80bbf0 <__umoddi3+0x21c>
  80babc:	380d883a 	mov	r6,r7
  80bac0:	29c0102e 	bgeu	r5,r7,80bb04 <__umoddi3+0x130>
  80bac4:	2011883a 	mov	r8,r4
  80bac8:	2813883a 	mov	r9,r5
  80bacc:	4005883a 	mov	r2,r8
  80bad0:	4807883a 	mov	r3,r9
  80bad4:	dfc00e17 	ldw	ra,56(sp)
  80bad8:	df000d17 	ldw	fp,52(sp)
  80badc:	ddc00c17 	ldw	r23,48(sp)
  80bae0:	dd800b17 	ldw	r22,44(sp)
  80bae4:	dd400a17 	ldw	r21,40(sp)
  80bae8:	dd000917 	ldw	r20,36(sp)
  80baec:	dcc00817 	ldw	r19,32(sp)
  80baf0:	dc800717 	ldw	r18,28(sp)
  80baf4:	dc400617 	ldw	r17,24(sp)
  80baf8:	dc000517 	ldw	r16,20(sp)
  80bafc:	dec00f04 	addi	sp,sp,60
  80bb00:	f800283a 	ret
  80bb04:	00bfffd4 	movui	r2,65535
  80bb08:	11c05a36 	bltu	r2,r7,80bc74 <__umoddi3+0x2a0>
  80bb0c:	00803fc4 	movi	r2,255
  80bb10:	11c0fe36 	bltu	r2,r7,80bf0c <__umoddi3+0x538>
  80bb14:	000b883a 	mov	r5,zero
  80bb18:	0005883a 	mov	r2,zero
  80bb1c:	3084d83a 	srl	r2,r6,r2
  80bb20:	01002074 	movhi	r4,129
  80bb24:	21065504 	addi	r4,r4,6484
  80bb28:	01c00804 	movi	r7,32
  80bb2c:	1105883a 	add	r2,r2,r4
  80bb30:	10c00003 	ldbu	r3,0(r2)
  80bb34:	28c7883a 	add	r3,r5,r3
  80bb38:	38ebc83a 	sub	r21,r7,r3
  80bb3c:	a800851e 	bne	r21,zero,80bd54 <__umoddi3+0x380>
  80bb40:	35005236 	bltu	r6,r20,80bc8c <__umoddi3+0x2b8>
  80bb44:	b400512e 	bgeu	r22,r16,80bc8c <__umoddi3+0x2b8>
  80bb48:	b011883a 	mov	r8,r22
  80bb4c:	a013883a 	mov	r9,r20
  80bb50:	003fde06 	br	80bacc <__umoddi3+0xf8>
  80bb54:	00bfffd4 	movui	r2,65535
  80bb58:	11804036 	bltu	r2,r6,80bc5c <__umoddi3+0x288>
  80bb5c:	00803fc4 	movi	r2,255
  80bb60:	1180ed36 	bltu	r2,r6,80bf18 <__umoddi3+0x544>
  80bb64:	000b883a 	mov	r5,zero
  80bb68:	0005883a 	mov	r2,zero
  80bb6c:	8084d83a 	srl	r2,r16,r2
  80bb70:	01002074 	movhi	r4,129
  80bb74:	21065504 	addi	r4,r4,6484
  80bb78:	01800804 	movi	r6,32
  80bb7c:	1105883a 	add	r2,r2,r4
  80bb80:	10c00003 	ldbu	r3,0(r2)
  80bb84:	28c7883a 	add	r3,r5,r3
  80bb88:	30c7c83a 	sub	r3,r6,r3
  80bb8c:	1800bf1e 	bne	r3,zero,80be8c <__umoddi3+0x4b8>
  80bb90:	0039883a 	mov	fp,zero
  80bb94:	802ad43a 	srli	r21,r16,16
  80bb98:	a009883a 	mov	r4,r20
  80bb9c:	85ffffcc 	andi	r23,r16,65535
  80bba0:	a80b883a 	mov	r5,r21
  80bba4:	080d1ec0 	call	80d1ec <__udivsi3>
  80bba8:	a009883a 	mov	r4,r20
  80bbac:	a80b883a 	mov	r5,r21
  80bbb0:	b8a3383a 	mul	r17,r23,r2
  80bbb4:	080d1f40 	call	80d1f4 <__umodsi3>
  80bbb8:	1004943a 	slli	r2,r2,16
  80bbbc:	b006d43a 	srli	r3,r22,16
  80bbc0:	10c4b03a 	or	r2,r2,r3
  80bbc4:	1440032e 	bgeu	r2,r17,80bbd4 <__umoddi3+0x200>
  80bbc8:	1405883a 	add	r2,r2,r16
  80bbcc:	14000136 	bltu	r2,r16,80bbd4 <__umoddi3+0x200>
  80bbd0:	1440e536 	bltu	r2,r17,80bf68 <__umoddi3+0x594>
  80bbd4:	1463c83a 	sub	r17,r2,r17
  80bbd8:	8809883a 	mov	r4,r17
  80bbdc:	a80b883a 	mov	r5,r21
  80bbe0:	080d1ec0 	call	80d1ec <__udivsi3>
  80bbe4:	8809883a 	mov	r4,r17
  80bbe8:	b8a3383a 	mul	r17,r23,r2
  80bbec:	a80b883a 	mov	r5,r21
  80bbf0:	080d1f40 	call	80d1f4 <__umodsi3>
  80bbf4:	1004943a 	slli	r2,r2,16
  80bbf8:	b0ffffcc 	andi	r3,r22,65535
  80bbfc:	10c4b03a 	or	r2,r2,r3
  80bc00:	1440042e 	bgeu	r2,r17,80bc14 <__umoddi3+0x240>
  80bc04:	1405883a 	add	r2,r2,r16
  80bc08:	14000236 	bltu	r2,r16,80bc14 <__umoddi3+0x240>
  80bc0c:	1440012e 	bgeu	r2,r17,80bc14 <__umoddi3+0x240>
  80bc10:	1405883a 	add	r2,r2,r16
  80bc14:	1445c83a 	sub	r2,r2,r17
  80bc18:	1724d83a 	srl	r18,r2,fp
  80bc1c:	0013883a 	mov	r9,zero
  80bc20:	9011883a 	mov	r8,r18
  80bc24:	003fa906 	br	80bacc <__umoddi3+0xf8>
  80bc28:	00804034 	movhi	r2,256
  80bc2c:	10bfffc4 	addi	r2,r2,-1
  80bc30:	1400b036 	bltu	r2,r16,80bef4 <__umoddi3+0x520>
  80bc34:	01400404 	movi	r5,16
  80bc38:	2805883a 	mov	r2,r5
  80bc3c:	003f7c06 	br	80ba30 <__umoddi3+0x5c>
  80bc40:	01000044 	movi	r4,1
  80bc44:	000b883a 	mov	r5,zero
  80bc48:	080d1ec0 	call	80d1ec <__udivsi3>
  80bc4c:	1021883a 	mov	r16,r2
  80bc50:	00bfffd4 	movui	r2,65535
  80bc54:	143ff436 	bltu	r2,r16,80bc28 <__umoddi3+0x254>
  80bc58:	003f7106 	br	80ba20 <__umoddi3+0x4c>
  80bc5c:	00804034 	movhi	r2,256
  80bc60:	10bfffc4 	addi	r2,r2,-1
  80bc64:	1180af36 	bltu	r2,r6,80bf24 <__umoddi3+0x550>
  80bc68:	01400404 	movi	r5,16
  80bc6c:	2805883a 	mov	r2,r5
  80bc70:	003fbe06 	br	80bb6c <__umoddi3+0x198>
  80bc74:	00804034 	movhi	r2,256
  80bc78:	10bfffc4 	addi	r2,r2,-1
  80bc7c:	11c0ac36 	bltu	r2,r7,80bf30 <__umoddi3+0x55c>
  80bc80:	01400404 	movi	r5,16
  80bc84:	2805883a 	mov	r2,r5
  80bc88:	003fa406 	br	80bb1c <__umoddi3+0x148>
  80bc8c:	b409c83a 	sub	r4,r22,r16
  80bc90:	b105803a 	cmpltu	r2,r22,r4
  80bc94:	a187c83a 	sub	r3,r20,r6
  80bc98:	18a9c83a 	sub	r20,r3,r2
  80bc9c:	202d883a 	mov	r22,r4
  80bca0:	003fa906 	br	80bb48 <__umoddi3+0x174>
  80bca4:	85e0983a 	sll	r16,r16,r23
  80bca8:	35c5c83a 	sub	r2,r6,r23
  80bcac:	a0a2d83a 	srl	r17,r20,r2
  80bcb0:	802ad43a 	srli	r21,r16,16
  80bcb4:	b084d83a 	srl	r2,r22,r2
  80bcb8:	a5c6983a 	sll	r3,r20,r23
  80bcbc:	8809883a 	mov	r4,r17
  80bcc0:	a80b883a 	mov	r5,r21
  80bcc4:	1886b03a 	or	r3,r3,r2
  80bcc8:	d8c00115 	stw	r3,4(sp)
  80bccc:	853fffcc 	andi	r20,r16,65535
  80bcd0:	080d1ec0 	call	80d1ec <__udivsi3>
  80bcd4:	8809883a 	mov	r4,r17
  80bcd8:	a80b883a 	mov	r5,r21
  80bcdc:	a0a3383a 	mul	r17,r20,r2
  80bce0:	080d1f40 	call	80d1f4 <__umodsi3>
  80bce4:	d9000117 	ldw	r4,4(sp)
  80bce8:	1004943a 	slli	r2,r2,16
  80bcec:	b839883a 	mov	fp,r23
  80bcf0:	2006d43a 	srli	r3,r4,16
  80bcf4:	10c4b03a 	or	r2,r2,r3
  80bcf8:	1440022e 	bgeu	r2,r17,80bd04 <__umoddi3+0x330>
  80bcfc:	1405883a 	add	r2,r2,r16
  80bd00:	1400962e 	bgeu	r2,r16,80bf5c <__umoddi3+0x588>
  80bd04:	1463c83a 	sub	r17,r2,r17
  80bd08:	8809883a 	mov	r4,r17
  80bd0c:	a80b883a 	mov	r5,r21
  80bd10:	080d1ec0 	call	80d1ec <__udivsi3>
  80bd14:	8809883a 	mov	r4,r17
  80bd18:	a80b883a 	mov	r5,r21
  80bd1c:	a0a3383a 	mul	r17,r20,r2
  80bd20:	080d1f40 	call	80d1f4 <__umodsi3>
  80bd24:	d9400117 	ldw	r5,4(sp)
  80bd28:	1004943a 	slli	r2,r2,16
  80bd2c:	28ffffcc 	andi	r3,r5,65535
  80bd30:	10c4b03a 	or	r2,r2,r3
  80bd34:	1440042e 	bgeu	r2,r17,80bd48 <__umoddi3+0x374>
  80bd38:	1405883a 	add	r2,r2,r16
  80bd3c:	14000236 	bltu	r2,r16,80bd48 <__umoddi3+0x374>
  80bd40:	1440012e 	bgeu	r2,r17,80bd48 <__umoddi3+0x374>
  80bd44:	1405883a 	add	r2,r2,r16
  80bd48:	b5ec983a 	sll	r22,r22,r23
  80bd4c:	1463c83a 	sub	r17,r2,r17
  80bd50:	003f4406 	br	80ba64 <__umoddi3+0x90>
  80bd54:	3d4fc83a 	sub	r7,r7,r21
  80bd58:	3546983a 	sll	r3,r6,r21
  80bd5c:	81c4d83a 	srl	r2,r16,r7
  80bd60:	a1e2d83a 	srl	r17,r20,r7
  80bd64:	a54c983a 	sll	r6,r20,r21
  80bd68:	18aeb03a 	or	r23,r3,r2
  80bd6c:	b828d43a 	srli	r20,r23,16
  80bd70:	b1c4d83a 	srl	r2,r22,r7
  80bd74:	8809883a 	mov	r4,r17
  80bd78:	a00b883a 	mov	r5,r20
  80bd7c:	308cb03a 	or	r6,r6,r2
  80bd80:	d9c00315 	stw	r7,12(sp)
  80bd84:	d9800215 	stw	r6,8(sp)
  80bd88:	080d1ec0 	call	80d1ec <__udivsi3>
  80bd8c:	8809883a 	mov	r4,r17
  80bd90:	a00b883a 	mov	r5,r20
  80bd94:	1039883a 	mov	fp,r2
  80bd98:	080d1f40 	call	80d1f4 <__umodsi3>
  80bd9c:	b8ffffcc 	andi	r3,r23,65535
  80bda0:	d8c00415 	stw	r3,16(sp)
  80bda4:	d9000217 	ldw	r4,8(sp)
  80bda8:	d9400417 	ldw	r5,16(sp)
  80bdac:	1004943a 	slli	r2,r2,16
  80bdb0:	2006d43a 	srli	r3,r4,16
  80bdb4:	8560983a 	sll	r16,r16,r21
  80bdb8:	2f23383a 	mul	r17,r5,fp
  80bdbc:	10c4b03a 	or	r2,r2,r3
  80bdc0:	dc000015 	stw	r16,0(sp)
  80bdc4:	b56c983a 	sll	r22,r22,r21
  80bdc8:	1440032e 	bgeu	r2,r17,80bdd8 <__umoddi3+0x404>
  80bdcc:	15c5883a 	add	r2,r2,r23
  80bdd0:	e73fffc4 	addi	fp,fp,-1
  80bdd4:	15c05d2e 	bgeu	r2,r23,80bf4c <__umoddi3+0x578>
  80bdd8:	1463c83a 	sub	r17,r2,r17
  80bddc:	8809883a 	mov	r4,r17
  80bde0:	a00b883a 	mov	r5,r20
  80bde4:	080d1ec0 	call	80d1ec <__udivsi3>
  80bde8:	8809883a 	mov	r4,r17
  80bdec:	a00b883a 	mov	r5,r20
  80bdf0:	1021883a 	mov	r16,r2
  80bdf4:	080d1f40 	call	80d1f4 <__umodsi3>
  80bdf8:	d8c00417 	ldw	r3,16(sp)
  80bdfc:	d9000217 	ldw	r4,8(sp)
  80be00:	1004943a 	slli	r2,r2,16
  80be04:	1c23383a 	mul	r17,r3,r16
  80be08:	20ffffcc 	andi	r3,r4,65535
  80be0c:	10ceb03a 	or	r7,r2,r3
  80be10:	3c40032e 	bgeu	r7,r17,80be20 <__umoddi3+0x44c>
  80be14:	3dcf883a 	add	r7,r7,r23
  80be18:	843fffc4 	addi	r16,r16,-1
  80be1c:	3dc0472e 	bgeu	r7,r23,80bf3c <__umoddi3+0x568>
  80be20:	e004943a 	slli	r2,fp,16
  80be24:	d9400017 	ldw	r5,0(sp)
  80be28:	3c4fc83a 	sub	r7,r7,r17
  80be2c:	8084b03a 	or	r2,r16,r2
  80be30:	28ffffcc 	andi	r3,r5,65535
  80be34:	280cd43a 	srli	r6,r5,16
  80be38:	100ad43a 	srli	r5,r2,16
  80be3c:	10bfffcc 	andi	r2,r2,65535
  80be40:	10d1383a 	mul	r8,r2,r3
  80be44:	28c7383a 	mul	r3,r5,r3
  80be48:	1185383a 	mul	r2,r2,r6
  80be4c:	4008d43a 	srli	r4,r8,16
  80be50:	298b383a 	mul	r5,r5,r6
  80be54:	10c5883a 	add	r2,r2,r3
  80be58:	2089883a 	add	r4,r4,r2
  80be5c:	20c0022e 	bgeu	r4,r3,80be68 <__umoddi3+0x494>
  80be60:	00800074 	movhi	r2,1
  80be64:	288b883a 	add	r5,r5,r2
  80be68:	2004d43a 	srli	r2,r4,16
  80be6c:	2008943a 	slli	r4,r4,16
  80be70:	40ffffcc 	andi	r3,r8,65535
  80be74:	288b883a 	add	r5,r5,r2
  80be78:	20c9883a 	add	r4,r4,r3
  80be7c:	39400b36 	bltu	r7,r5,80beac <__umoddi3+0x4d8>
  80be80:	39403d26 	beq	r7,r5,80bf78 <__umoddi3+0x5a4>
  80be84:	394bc83a 	sub	r5,r7,r5
  80be88:	00000f06 	br	80bec8 <__umoddi3+0x4f4>
  80be8c:	30c5c83a 	sub	r2,r6,r3
  80be90:	1839883a 	mov	fp,r3
  80be94:	b084d83a 	srl	r2,r22,r2
  80be98:	a0c6983a 	sll	r3,r20,r3
  80be9c:	8720983a 	sll	r16,r16,fp
  80bea0:	b72c983a 	sll	r22,r22,fp
  80bea4:	18a8b03a 	or	r20,r3,r2
  80bea8:	003f3a06 	br	80bb94 <__umoddi3+0x1c0>
  80beac:	d8c00017 	ldw	r3,0(sp)
  80beb0:	20c5c83a 	sub	r2,r4,r3
  80beb4:	2089803a 	cmpltu	r4,r4,r2
  80beb8:	2dc7c83a 	sub	r3,r5,r23
  80bebc:	1907c83a 	sub	r3,r3,r4
  80bec0:	38cbc83a 	sub	r5,r7,r3
  80bec4:	1009883a 	mov	r4,r2
  80bec8:	b105c83a 	sub	r2,r22,r4
  80becc:	b087803a 	cmpltu	r3,r22,r2
  80bed0:	28c7c83a 	sub	r3,r5,r3
  80bed4:	d9400317 	ldw	r5,12(sp)
  80bed8:	1544d83a 	srl	r2,r2,r21
  80bedc:	1948983a 	sll	r4,r3,r5
  80bee0:	1d46d83a 	srl	r3,r3,r21
  80bee4:	20a4b03a 	or	r18,r4,r2
  80bee8:	9011883a 	mov	r8,r18
  80beec:	1813883a 	mov	r9,r3
  80bef0:	003ef606 	br	80bacc <__umoddi3+0xf8>
  80bef4:	01400604 	movi	r5,24
  80bef8:	2805883a 	mov	r2,r5
  80befc:	003ecc06 	br	80ba30 <__umoddi3+0x5c>
  80bf00:	01400204 	movi	r5,8
  80bf04:	2805883a 	mov	r2,r5
  80bf08:	003ec906 	br	80ba30 <__umoddi3+0x5c>
  80bf0c:	01400204 	movi	r5,8
  80bf10:	2805883a 	mov	r2,r5
  80bf14:	003f0106 	br	80bb1c <__umoddi3+0x148>
  80bf18:	01400204 	movi	r5,8
  80bf1c:	2805883a 	mov	r2,r5
  80bf20:	003f1206 	br	80bb6c <__umoddi3+0x198>
  80bf24:	01400604 	movi	r5,24
  80bf28:	2805883a 	mov	r2,r5
  80bf2c:	003f0f06 	br	80bb6c <__umoddi3+0x198>
  80bf30:	01400604 	movi	r5,24
  80bf34:	2805883a 	mov	r2,r5
  80bf38:	003ef806 	br	80bb1c <__umoddi3+0x148>
  80bf3c:	3c7fb82e 	bgeu	r7,r17,80be20 <__umoddi3+0x44c>
  80bf40:	843fffc4 	addi	r16,r16,-1
  80bf44:	3dcf883a 	add	r7,r7,r23
  80bf48:	003fb506 	br	80be20 <__umoddi3+0x44c>
  80bf4c:	147fa22e 	bgeu	r2,r17,80bdd8 <__umoddi3+0x404>
  80bf50:	e73fffc4 	addi	fp,fp,-1
  80bf54:	15c5883a 	add	r2,r2,r23
  80bf58:	003f9f06 	br	80bdd8 <__umoddi3+0x404>
  80bf5c:	147f692e 	bgeu	r2,r17,80bd04 <__umoddi3+0x330>
  80bf60:	1405883a 	add	r2,r2,r16
  80bf64:	003f6706 	br	80bd04 <__umoddi3+0x330>
  80bf68:	1405883a 	add	r2,r2,r16
  80bf6c:	003f1906 	br	80bbd4 <__umoddi3+0x200>
  80bf70:	1405883a 	add	r2,r2,r16
  80bf74:	003ec906 	br	80ba9c <__umoddi3+0xc8>
  80bf78:	b13fcc36 	bltu	r22,r4,80beac <__umoddi3+0x4d8>
  80bf7c:	000b883a 	mov	r5,zero
  80bf80:	003fd106 	br	80bec8 <__umoddi3+0x4f4>

0080bf84 <_fpadd_parts>:
  80bf84:	defff804 	addi	sp,sp,-32
  80bf88:	dcc00315 	stw	r19,12(sp)
  80bf8c:	2027883a 	mov	r19,r4
  80bf90:	21000017 	ldw	r4,0(r4)
  80bf94:	00c00044 	movi	r3,1
  80bf98:	dd400515 	stw	r21,20(sp)
  80bf9c:	dd000415 	stw	r20,16(sp)
  80bfa0:	ddc00715 	stw	r23,28(sp)
  80bfa4:	dd800615 	stw	r22,24(sp)
  80bfa8:	dc800215 	stw	r18,8(sp)
  80bfac:	dc400115 	stw	r17,4(sp)
  80bfb0:	dc000015 	stw	r16,0(sp)
  80bfb4:	282b883a 	mov	r21,r5
  80bfb8:	3029883a 	mov	r20,r6
  80bfbc:	1900632e 	bgeu	r3,r4,80c14c <_fpadd_parts+0x1c8>
  80bfc0:	28800017 	ldw	r2,0(r5)
  80bfc4:	1880812e 	bgeu	r3,r2,80c1cc <_fpadd_parts+0x248>
  80bfc8:	00c00104 	movi	r3,4
  80bfcc:	20c0dc26 	beq	r4,r3,80c340 <_fpadd_parts+0x3bc>
  80bfd0:	10c07e26 	beq	r2,r3,80c1cc <_fpadd_parts+0x248>
  80bfd4:	00c00084 	movi	r3,2
  80bfd8:	10c06726 	beq	r2,r3,80c178 <_fpadd_parts+0x1f4>
  80bfdc:	20c07b26 	beq	r4,r3,80c1cc <_fpadd_parts+0x248>
  80bfe0:	9dc00217 	ldw	r23,8(r19)
  80bfe4:	28c00217 	ldw	r3,8(r5)
  80bfe8:	9c400317 	ldw	r17,12(r19)
  80bfec:	2bc00317 	ldw	r15,12(r5)
  80bff0:	b8cdc83a 	sub	r6,r23,r3
  80bff4:	9c800417 	ldw	r18,16(r19)
  80bff8:	2c000417 	ldw	r16,16(r5)
  80bffc:	3009883a 	mov	r4,r6
  80c000:	30009716 	blt	r6,zero,80c260 <_fpadd_parts+0x2dc>
  80c004:	00800fc4 	movi	r2,63
  80c008:	11806b16 	blt	r2,r6,80c1b8 <_fpadd_parts+0x234>
  80c00c:	0100a40e 	bge	zero,r4,80c2a0 <_fpadd_parts+0x31c>
  80c010:	35bff804 	addi	r22,r6,-32
  80c014:	b000bc16 	blt	r22,zero,80c308 <_fpadd_parts+0x384>
  80c018:	8596d83a 	srl	r11,r16,r22
  80c01c:	0019883a 	mov	r12,zero
  80c020:	0013883a 	mov	r9,zero
  80c024:	01000044 	movi	r4,1
  80c028:	0015883a 	mov	r10,zero
  80c02c:	b000be16 	blt	r22,zero,80c328 <_fpadd_parts+0x3a4>
  80c030:	2590983a 	sll	r8,r4,r22
  80c034:	000f883a 	mov	r7,zero
  80c038:	00bfffc4 	movi	r2,-1
  80c03c:	3889883a 	add	r4,r7,r2
  80c040:	408b883a 	add	r5,r8,r2
  80c044:	21cd803a 	cmpltu	r6,r4,r7
  80c048:	314b883a 	add	r5,r6,r5
  80c04c:	7904703a 	and	r2,r15,r4
  80c050:	8146703a 	and	r3,r16,r5
  80c054:	10c4b03a 	or	r2,r2,r3
  80c058:	10000226 	beq	r2,zero,80c064 <_fpadd_parts+0xe0>
  80c05c:	02400044 	movi	r9,1
  80c060:	0015883a 	mov	r10,zero
  80c064:	5a5eb03a 	or	r15,r11,r9
  80c068:	62a0b03a 	or	r16,r12,r10
  80c06c:	99400117 	ldw	r5,4(r19)
  80c070:	a8800117 	ldw	r2,4(r21)
  80c074:	28806e26 	beq	r5,r2,80c230 <_fpadd_parts+0x2ac>
  80c078:	28006626 	beq	r5,zero,80c214 <_fpadd_parts+0x290>
  80c07c:	7c45c83a 	sub	r2,r15,r17
  80c080:	7889803a 	cmpltu	r4,r15,r2
  80c084:	8487c83a 	sub	r3,r16,r18
  80c088:	1909c83a 	sub	r4,r3,r4
  80c08c:	100d883a 	mov	r6,r2
  80c090:	200f883a 	mov	r7,r4
  80c094:	38007716 	blt	r7,zero,80c274 <_fpadd_parts+0x2f0>
  80c098:	a5c00215 	stw	r23,8(r20)
  80c09c:	a1c00415 	stw	r7,16(r20)
  80c0a0:	a0000115 	stw	zero,4(r20)
  80c0a4:	a1800315 	stw	r6,12(r20)
  80c0a8:	a2000317 	ldw	r8,12(r20)
  80c0ac:	a2400417 	ldw	r9,16(r20)
  80c0b0:	00bfffc4 	movi	r2,-1
  80c0b4:	408b883a 	add	r5,r8,r2
  80c0b8:	2a09803a 	cmpltu	r4,r5,r8
  80c0bc:	488d883a 	add	r6,r9,r2
  80c0c0:	01c40034 	movhi	r7,4096
  80c0c4:	39ffffc4 	addi	r7,r7,-1
  80c0c8:	218d883a 	add	r6,r4,r6
  80c0cc:	39801736 	bltu	r7,r6,80c12c <_fpadd_parts+0x1a8>
  80c0d0:	31c06526 	beq	r6,r7,80c268 <_fpadd_parts+0x2e4>
  80c0d4:	a3000217 	ldw	r12,8(r20)
  80c0d8:	4209883a 	add	r4,r8,r8
  80c0dc:	00bfffc4 	movi	r2,-1
  80c0e0:	220f803a 	cmpltu	r7,r4,r8
  80c0e4:	4a4b883a 	add	r5,r9,r9
  80c0e8:	394f883a 	add	r7,r7,r5
  80c0ec:	2095883a 	add	r10,r4,r2
  80c0f0:	3897883a 	add	r11,r7,r2
  80c0f4:	510d803a 	cmpltu	r6,r10,r4
  80c0f8:	6099883a 	add	r12,r12,r2
  80c0fc:	32d7883a 	add	r11,r6,r11
  80c100:	00840034 	movhi	r2,4096
  80c104:	10bfffc4 	addi	r2,r2,-1
  80c108:	2011883a 	mov	r8,r4
  80c10c:	3813883a 	mov	r9,r7
  80c110:	a1000315 	stw	r4,12(r20)
  80c114:	a1c00415 	stw	r7,16(r20)
  80c118:	a3000215 	stw	r12,8(r20)
  80c11c:	12c00336 	bltu	r2,r11,80c12c <_fpadd_parts+0x1a8>
  80c120:	58bfed1e 	bne	r11,r2,80c0d8 <_fpadd_parts+0x154>
  80c124:	00bfff84 	movi	r2,-2
  80c128:	12bfeb2e 	bgeu	r2,r10,80c0d8 <_fpadd_parts+0x154>
  80c12c:	a2800417 	ldw	r10,16(r20)
  80c130:	008000c4 	movi	r2,3
  80c134:	00c80034 	movhi	r3,8192
  80c138:	18ffffc4 	addi	r3,r3,-1
  80c13c:	a2400317 	ldw	r9,12(r20)
  80c140:	a0800015 	stw	r2,0(r20)
  80c144:	1a802336 	bltu	r3,r10,80c1d4 <_fpadd_parts+0x250>
  80c148:	a027883a 	mov	r19,r20
  80c14c:	9805883a 	mov	r2,r19
  80c150:	ddc00717 	ldw	r23,28(sp)
  80c154:	dd800617 	ldw	r22,24(sp)
  80c158:	dd400517 	ldw	r21,20(sp)
  80c15c:	dd000417 	ldw	r20,16(sp)
  80c160:	dcc00317 	ldw	r19,12(sp)
  80c164:	dc800217 	ldw	r18,8(sp)
  80c168:	dc400117 	ldw	r17,4(sp)
  80c16c:	dc000017 	ldw	r16,0(sp)
  80c170:	dec00804 	addi	sp,sp,32
  80c174:	f800283a 	ret
  80c178:	20fff41e 	bne	r4,r3,80c14c <_fpadd_parts+0x1c8>
  80c17c:	31000015 	stw	r4,0(r6)
  80c180:	98800117 	ldw	r2,4(r19)
  80c184:	30800115 	stw	r2,4(r6)
  80c188:	98c00217 	ldw	r3,8(r19)
  80c18c:	30c00215 	stw	r3,8(r6)
  80c190:	98800317 	ldw	r2,12(r19)
  80c194:	30800315 	stw	r2,12(r6)
  80c198:	98c00417 	ldw	r3,16(r19)
  80c19c:	30c00415 	stw	r3,16(r6)
  80c1a0:	98800117 	ldw	r2,4(r19)
  80c1a4:	28c00117 	ldw	r3,4(r5)
  80c1a8:	3027883a 	mov	r19,r6
  80c1ac:	10c4703a 	and	r2,r2,r3
  80c1b0:	30800115 	stw	r2,4(r6)
  80c1b4:	003fe506 	br	80c14c <_fpadd_parts+0x1c8>
  80c1b8:	1dc02616 	blt	r3,r23,80c254 <_fpadd_parts+0x2d0>
  80c1bc:	0023883a 	mov	r17,zero
  80c1c0:	182f883a 	mov	r23,r3
  80c1c4:	0025883a 	mov	r18,zero
  80c1c8:	003fa806 	br	80c06c <_fpadd_parts+0xe8>
  80c1cc:	a827883a 	mov	r19,r21
  80c1d0:	003fde06 	br	80c14c <_fpadd_parts+0x1c8>
  80c1d4:	01800044 	movi	r6,1
  80c1d8:	500497fa 	slli	r2,r10,31
  80c1dc:	4808d07a 	srli	r4,r9,1
  80c1e0:	518ad83a 	srl	r5,r10,r6
  80c1e4:	a2000217 	ldw	r8,8(r20)
  80c1e8:	1108b03a 	or	r4,r2,r4
  80c1ec:	0007883a 	mov	r3,zero
  80c1f0:	4984703a 	and	r2,r9,r6
  80c1f4:	208cb03a 	or	r6,r4,r2
  80c1f8:	28ceb03a 	or	r7,r5,r3
  80c1fc:	42000044 	addi	r8,r8,1
  80c200:	a027883a 	mov	r19,r20
  80c204:	a1c00415 	stw	r7,16(r20)
  80c208:	a2000215 	stw	r8,8(r20)
  80c20c:	a1800315 	stw	r6,12(r20)
  80c210:	003fce06 	br	80c14c <_fpadd_parts+0x1c8>
  80c214:	8bc5c83a 	sub	r2,r17,r15
  80c218:	8889803a 	cmpltu	r4,r17,r2
  80c21c:	9407c83a 	sub	r3,r18,r16
  80c220:	1909c83a 	sub	r4,r3,r4
  80c224:	100d883a 	mov	r6,r2
  80c228:	200f883a 	mov	r7,r4
  80c22c:	003f9906 	br	80c094 <_fpadd_parts+0x110>
  80c230:	7c45883a 	add	r2,r15,r17
  80c234:	13c9803a 	cmpltu	r4,r2,r15
  80c238:	8487883a 	add	r3,r16,r18
  80c23c:	20c9883a 	add	r4,r4,r3
  80c240:	a1400115 	stw	r5,4(r20)
  80c244:	a5c00215 	stw	r23,8(r20)
  80c248:	a0800315 	stw	r2,12(r20)
  80c24c:	a1000415 	stw	r4,16(r20)
  80c250:	003fb606 	br	80c12c <_fpadd_parts+0x1a8>
  80c254:	001f883a 	mov	r15,zero
  80c258:	0021883a 	mov	r16,zero
  80c25c:	003f8306 	br	80c06c <_fpadd_parts+0xe8>
  80c260:	018dc83a 	sub	r6,zero,r6
  80c264:	003f6706 	br	80c004 <_fpadd_parts+0x80>
  80c268:	00bfff84 	movi	r2,-2
  80c26c:	117faf36 	bltu	r2,r5,80c12c <_fpadd_parts+0x1a8>
  80c270:	003f9806 	br	80c0d4 <_fpadd_parts+0x150>
  80c274:	0005883a 	mov	r2,zero
  80c278:	1189c83a 	sub	r4,r2,r6
  80c27c:	1105803a 	cmpltu	r2,r2,r4
  80c280:	01cbc83a 	sub	r5,zero,r7
  80c284:	2885c83a 	sub	r2,r5,r2
  80c288:	01800044 	movi	r6,1
  80c28c:	a1800115 	stw	r6,4(r20)
  80c290:	a5c00215 	stw	r23,8(r20)
  80c294:	a1000315 	stw	r4,12(r20)
  80c298:	a0800415 	stw	r2,16(r20)
  80c29c:	003f8206 	br	80c0a8 <_fpadd_parts+0x124>
  80c2a0:	203f7226 	beq	r4,zero,80c06c <_fpadd_parts+0xe8>
  80c2a4:	35bff804 	addi	r22,r6,-32
  80c2a8:	b9af883a 	add	r23,r23,r6
  80c2ac:	b0003116 	blt	r22,zero,80c374 <_fpadd_parts+0x3f0>
  80c2b0:	959ad83a 	srl	r13,r18,r22
  80c2b4:	001d883a 	mov	r14,zero
  80c2b8:	000f883a 	mov	r7,zero
  80c2bc:	01000044 	movi	r4,1
  80c2c0:	0011883a 	mov	r8,zero
  80c2c4:	b0002516 	blt	r22,zero,80c35c <_fpadd_parts+0x3d8>
  80c2c8:	2594983a 	sll	r10,r4,r22
  80c2cc:	0013883a 	mov	r9,zero
  80c2d0:	00bfffc4 	movi	r2,-1
  80c2d4:	4889883a 	add	r4,r9,r2
  80c2d8:	508b883a 	add	r5,r10,r2
  80c2dc:	224d803a 	cmpltu	r6,r4,r9
  80c2e0:	314b883a 	add	r5,r6,r5
  80c2e4:	8904703a 	and	r2,r17,r4
  80c2e8:	9146703a 	and	r3,r18,r5
  80c2ec:	10c4b03a 	or	r2,r2,r3
  80c2f0:	10000226 	beq	r2,zero,80c2fc <_fpadd_parts+0x378>
  80c2f4:	01c00044 	movi	r7,1
  80c2f8:	0011883a 	mov	r8,zero
  80c2fc:	69e2b03a 	or	r17,r13,r7
  80c300:	7224b03a 	or	r18,r14,r8
  80c304:	003f5906 	br	80c06c <_fpadd_parts+0xe8>
  80c308:	8407883a 	add	r3,r16,r16
  80c30c:	008007c4 	movi	r2,31
  80c310:	1185c83a 	sub	r2,r2,r6
  80c314:	1886983a 	sll	r3,r3,r2
  80c318:	7996d83a 	srl	r11,r15,r6
  80c31c:	8198d83a 	srl	r12,r16,r6
  80c320:	1ad6b03a 	or	r11,r3,r11
  80c324:	003f3e06 	br	80c020 <_fpadd_parts+0x9c>
  80c328:	2006d07a 	srli	r3,r4,1
  80c32c:	008007c4 	movi	r2,31
  80c330:	1185c83a 	sub	r2,r2,r6
  80c334:	1890d83a 	srl	r8,r3,r2
  80c338:	218e983a 	sll	r7,r4,r6
  80c33c:	003f3e06 	br	80c038 <_fpadd_parts+0xb4>
  80c340:	113f821e 	bne	r2,r4,80c14c <_fpadd_parts+0x1c8>
  80c344:	28c00117 	ldw	r3,4(r5)
  80c348:	98800117 	ldw	r2,4(r19)
  80c34c:	10ff7f26 	beq	r2,r3,80c14c <_fpadd_parts+0x1c8>
  80c350:	04c02074 	movhi	r19,129
  80c354:	9cc65004 	addi	r19,r19,6464
  80c358:	003f7c06 	br	80c14c <_fpadd_parts+0x1c8>
  80c35c:	2006d07a 	srli	r3,r4,1
  80c360:	008007c4 	movi	r2,31
  80c364:	1185c83a 	sub	r2,r2,r6
  80c368:	1894d83a 	srl	r10,r3,r2
  80c36c:	2192983a 	sll	r9,r4,r6
  80c370:	003fd706 	br	80c2d0 <_fpadd_parts+0x34c>
  80c374:	9487883a 	add	r3,r18,r18
  80c378:	008007c4 	movi	r2,31
  80c37c:	1185c83a 	sub	r2,r2,r6
  80c380:	1886983a 	sll	r3,r3,r2
  80c384:	899ad83a 	srl	r13,r17,r6
  80c388:	919cd83a 	srl	r14,r18,r6
  80c38c:	1b5ab03a 	or	r13,r3,r13
  80c390:	003fc906 	br	80c2b8 <_fpadd_parts+0x334>

0080c394 <__subdf3>:
  80c394:	deffea04 	addi	sp,sp,-88
  80c398:	dcc01415 	stw	r19,80(sp)
  80c39c:	dcc00404 	addi	r19,sp,16
  80c3a0:	2011883a 	mov	r8,r4
  80c3a4:	2813883a 	mov	r9,r5
  80c3a8:	dc401315 	stw	r17,76(sp)
  80c3ac:	d809883a 	mov	r4,sp
  80c3b0:	980b883a 	mov	r5,r19
  80c3b4:	dc400904 	addi	r17,sp,36
  80c3b8:	dfc01515 	stw	ra,84(sp)
  80c3bc:	da400115 	stw	r9,4(sp)
  80c3c0:	d9c00315 	stw	r7,12(sp)
  80c3c4:	da000015 	stw	r8,0(sp)
  80c3c8:	d9800215 	stw	r6,8(sp)
  80c3cc:	080d6280 	call	80d628 <__unpack_d>
  80c3d0:	d9000204 	addi	r4,sp,8
  80c3d4:	880b883a 	mov	r5,r17
  80c3d8:	080d6280 	call	80d628 <__unpack_d>
  80c3dc:	d8800a17 	ldw	r2,40(sp)
  80c3e0:	880b883a 	mov	r5,r17
  80c3e4:	9809883a 	mov	r4,r19
  80c3e8:	d9800e04 	addi	r6,sp,56
  80c3ec:	1080005c 	xori	r2,r2,1
  80c3f0:	d8800a15 	stw	r2,40(sp)
  80c3f4:	080bf840 	call	80bf84 <_fpadd_parts>
  80c3f8:	1009883a 	mov	r4,r2
  80c3fc:	080d3140 	call	80d314 <__pack_d>
  80c400:	dfc01517 	ldw	ra,84(sp)
  80c404:	dcc01417 	ldw	r19,80(sp)
  80c408:	dc401317 	ldw	r17,76(sp)
  80c40c:	dec01604 	addi	sp,sp,88
  80c410:	f800283a 	ret

0080c414 <__adddf3>:
  80c414:	deffea04 	addi	sp,sp,-88
  80c418:	dcc01415 	stw	r19,80(sp)
  80c41c:	dcc00404 	addi	r19,sp,16
  80c420:	2011883a 	mov	r8,r4
  80c424:	2813883a 	mov	r9,r5
  80c428:	dc401315 	stw	r17,76(sp)
  80c42c:	d809883a 	mov	r4,sp
  80c430:	980b883a 	mov	r5,r19
  80c434:	dc400904 	addi	r17,sp,36
  80c438:	dfc01515 	stw	ra,84(sp)
  80c43c:	da400115 	stw	r9,4(sp)
  80c440:	d9c00315 	stw	r7,12(sp)
  80c444:	da000015 	stw	r8,0(sp)
  80c448:	d9800215 	stw	r6,8(sp)
  80c44c:	080d6280 	call	80d628 <__unpack_d>
  80c450:	d9000204 	addi	r4,sp,8
  80c454:	880b883a 	mov	r5,r17
  80c458:	080d6280 	call	80d628 <__unpack_d>
  80c45c:	d9800e04 	addi	r6,sp,56
  80c460:	9809883a 	mov	r4,r19
  80c464:	880b883a 	mov	r5,r17
  80c468:	080bf840 	call	80bf84 <_fpadd_parts>
  80c46c:	1009883a 	mov	r4,r2
  80c470:	080d3140 	call	80d314 <__pack_d>
  80c474:	dfc01517 	ldw	ra,84(sp)
  80c478:	dcc01417 	ldw	r19,80(sp)
  80c47c:	dc401317 	ldw	r17,76(sp)
  80c480:	dec01604 	addi	sp,sp,88
  80c484:	f800283a 	ret

0080c488 <__muldf3>:
  80c488:	deffe004 	addi	sp,sp,-128
  80c48c:	dc401815 	stw	r17,96(sp)
  80c490:	dc400404 	addi	r17,sp,16
  80c494:	2011883a 	mov	r8,r4
  80c498:	2813883a 	mov	r9,r5
  80c49c:	dc001715 	stw	r16,92(sp)
  80c4a0:	d809883a 	mov	r4,sp
  80c4a4:	880b883a 	mov	r5,r17
  80c4a8:	dc000904 	addi	r16,sp,36
  80c4ac:	dfc01f15 	stw	ra,124(sp)
  80c4b0:	da400115 	stw	r9,4(sp)
  80c4b4:	d9c00315 	stw	r7,12(sp)
  80c4b8:	da000015 	stw	r8,0(sp)
  80c4bc:	d9800215 	stw	r6,8(sp)
  80c4c0:	ddc01e15 	stw	r23,120(sp)
  80c4c4:	dd801d15 	stw	r22,116(sp)
  80c4c8:	dd401c15 	stw	r21,112(sp)
  80c4cc:	dd001b15 	stw	r20,108(sp)
  80c4d0:	dcc01a15 	stw	r19,104(sp)
  80c4d4:	dc801915 	stw	r18,100(sp)
  80c4d8:	080d6280 	call	80d628 <__unpack_d>
  80c4dc:	d9000204 	addi	r4,sp,8
  80c4e0:	800b883a 	mov	r5,r16
  80c4e4:	080d6280 	call	80d628 <__unpack_d>
  80c4e8:	d9000417 	ldw	r4,16(sp)
  80c4ec:	00800044 	movi	r2,1
  80c4f0:	1100102e 	bgeu	r2,r4,80c534 <__muldf3+0xac>
  80c4f4:	d8c00917 	ldw	r3,36(sp)
  80c4f8:	10c0062e 	bgeu	r2,r3,80c514 <__muldf3+0x8c>
  80c4fc:	00800104 	movi	r2,4
  80c500:	20800a26 	beq	r4,r2,80c52c <__muldf3+0xa4>
  80c504:	1880cc26 	beq	r3,r2,80c838 <__muldf3+0x3b0>
  80c508:	00800084 	movi	r2,2
  80c50c:	20800926 	beq	r4,r2,80c534 <__muldf3+0xac>
  80c510:	1880191e 	bne	r3,r2,80c578 <__muldf3+0xf0>
  80c514:	d8c00a17 	ldw	r3,40(sp)
  80c518:	d8800517 	ldw	r2,20(sp)
  80c51c:	8009883a 	mov	r4,r16
  80c520:	10c4c03a 	cmpne	r2,r2,r3
  80c524:	d8800a15 	stw	r2,40(sp)
  80c528:	00000706 	br	80c548 <__muldf3+0xc0>
  80c52c:	00800084 	movi	r2,2
  80c530:	1880c326 	beq	r3,r2,80c840 <__muldf3+0x3b8>
  80c534:	d8800517 	ldw	r2,20(sp)
  80c538:	d8c00a17 	ldw	r3,40(sp)
  80c53c:	8809883a 	mov	r4,r17
  80c540:	10c4c03a 	cmpne	r2,r2,r3
  80c544:	d8800515 	stw	r2,20(sp)
  80c548:	080d3140 	call	80d314 <__pack_d>
  80c54c:	dfc01f17 	ldw	ra,124(sp)
  80c550:	ddc01e17 	ldw	r23,120(sp)
  80c554:	dd801d17 	ldw	r22,116(sp)
  80c558:	dd401c17 	ldw	r21,112(sp)
  80c55c:	dd001b17 	ldw	r20,108(sp)
  80c560:	dcc01a17 	ldw	r19,104(sp)
  80c564:	dc801917 	ldw	r18,100(sp)
  80c568:	dc401817 	ldw	r17,96(sp)
  80c56c:	dc001717 	ldw	r16,92(sp)
  80c570:	dec02004 	addi	sp,sp,128
  80c574:	f800283a 	ret
  80c578:	dd800717 	ldw	r22,28(sp)
  80c57c:	dc800c17 	ldw	r18,48(sp)
  80c580:	002b883a 	mov	r21,zero
  80c584:	0023883a 	mov	r17,zero
  80c588:	a80b883a 	mov	r5,r21
  80c58c:	b00d883a 	mov	r6,r22
  80c590:	880f883a 	mov	r7,r17
  80c594:	ddc00817 	ldw	r23,32(sp)
  80c598:	dcc00d17 	ldw	r19,52(sp)
  80c59c:	9009883a 	mov	r4,r18
  80c5a0:	080d1fc0 	call	80d1fc <__muldi3>
  80c5a4:	001b883a 	mov	r13,zero
  80c5a8:	680f883a 	mov	r7,r13
  80c5ac:	b009883a 	mov	r4,r22
  80c5b0:	000b883a 	mov	r5,zero
  80c5b4:	980d883a 	mov	r6,r19
  80c5b8:	b82d883a 	mov	r22,r23
  80c5bc:	002f883a 	mov	r23,zero
  80c5c0:	db401615 	stw	r13,88(sp)
  80c5c4:	d8801315 	stw	r2,76(sp)
  80c5c8:	d8c01415 	stw	r3,80(sp)
  80c5cc:	dcc01515 	stw	r19,84(sp)
  80c5d0:	080d1fc0 	call	80d1fc <__muldi3>
  80c5d4:	b00d883a 	mov	r6,r22
  80c5d8:	000b883a 	mov	r5,zero
  80c5dc:	9009883a 	mov	r4,r18
  80c5e0:	b80f883a 	mov	r7,r23
  80c5e4:	1021883a 	mov	r16,r2
  80c5e8:	1823883a 	mov	r17,r3
  80c5ec:	080d1fc0 	call	80d1fc <__muldi3>
  80c5f0:	8085883a 	add	r2,r16,r2
  80c5f4:	140d803a 	cmpltu	r6,r2,r16
  80c5f8:	88c7883a 	add	r3,r17,r3
  80c5fc:	30cd883a 	add	r6,r6,r3
  80c600:	1029883a 	mov	r20,r2
  80c604:	302b883a 	mov	r21,r6
  80c608:	da801317 	ldw	r10,76(sp)
  80c60c:	dac01417 	ldw	r11,80(sp)
  80c610:	db001517 	ldw	r12,84(sp)
  80c614:	db401617 	ldw	r13,88(sp)
  80c618:	3440612e 	bgeu	r6,r17,80c7a0 <__muldf3+0x318>
  80c61c:	0009883a 	mov	r4,zero
  80c620:	5105883a 	add	r2,r10,r4
  80c624:	128d803a 	cmpltu	r6,r2,r10
  80c628:	5d07883a 	add	r3,r11,r20
  80c62c:	30cd883a 	add	r6,r6,r3
  80c630:	0021883a 	mov	r16,zero
  80c634:	04400044 	movi	r17,1
  80c638:	1025883a 	mov	r18,r2
  80c63c:	3027883a 	mov	r19,r6
  80c640:	32c06236 	bltu	r6,r11,80c7cc <__muldf3+0x344>
  80c644:	59807a26 	beq	r11,r6,80c830 <__muldf3+0x3a8>
  80c648:	680b883a 	mov	r5,r13
  80c64c:	b80f883a 	mov	r7,r23
  80c650:	6009883a 	mov	r4,r12
  80c654:	b00d883a 	mov	r6,r22
  80c658:	080d1fc0 	call	80d1fc <__muldi3>
  80c65c:	1009883a 	mov	r4,r2
  80c660:	000f883a 	mov	r7,zero
  80c664:	1545883a 	add	r2,r2,r21
  80c668:	1111803a 	cmpltu	r8,r2,r4
  80c66c:	19c7883a 	add	r3,r3,r7
  80c670:	40c7883a 	add	r3,r8,r3
  80c674:	88cb883a 	add	r5,r17,r3
  80c678:	d8c00617 	ldw	r3,24(sp)
  80c67c:	8089883a 	add	r4,r16,r2
  80c680:	d8800b17 	ldw	r2,44(sp)
  80c684:	18c00104 	addi	r3,r3,4
  80c688:	240d803a 	cmpltu	r6,r4,r16
  80c68c:	10c7883a 	add	r3,r2,r3
  80c690:	2013883a 	mov	r9,r4
  80c694:	d8800a17 	ldw	r2,40(sp)
  80c698:	d9000517 	ldw	r4,20(sp)
  80c69c:	314d883a 	add	r6,r6,r5
  80c6a0:	3015883a 	mov	r10,r6
  80c6a4:	2088c03a 	cmpne	r4,r4,r2
  80c6a8:	00880034 	movhi	r2,8192
  80c6ac:	10bfffc4 	addi	r2,r2,-1
  80c6b0:	d9000f15 	stw	r4,60(sp)
  80c6b4:	d8c01015 	stw	r3,64(sp)
  80c6b8:	1180162e 	bgeu	r2,r6,80c714 <__muldf3+0x28c>
  80c6bc:	1811883a 	mov	r8,r3
  80c6c0:	101f883a 	mov	r15,r2
  80c6c4:	980497fa 	slli	r2,r19,31
  80c6c8:	9016d07a 	srli	r11,r18,1
  80c6cc:	500697fa 	slli	r3,r10,31
  80c6d0:	480cd07a 	srli	r6,r9,1
  80c6d4:	500ed07a 	srli	r7,r10,1
  80c6d8:	12d6b03a 	or	r11,r2,r11
  80c6dc:	00800044 	movi	r2,1
  80c6e0:	198cb03a 	or	r6,r3,r6
  80c6e4:	4888703a 	and	r4,r9,r2
  80c6e8:	9818d07a 	srli	r12,r19,1
  80c6ec:	001b883a 	mov	r13,zero
  80c6f0:	03a00034 	movhi	r14,32768
  80c6f4:	3013883a 	mov	r9,r6
  80c6f8:	3815883a 	mov	r10,r7
  80c6fc:	4091883a 	add	r8,r8,r2
  80c700:	20000226 	beq	r4,zero,80c70c <__muldf3+0x284>
  80c704:	5b64b03a 	or	r18,r11,r13
  80c708:	63a6b03a 	or	r19,r12,r14
  80c70c:	7abfed36 	bltu	r15,r10,80c6c4 <__muldf3+0x23c>
  80c710:	da001015 	stw	r8,64(sp)
  80c714:	00840034 	movhi	r2,4096
  80c718:	10bfffc4 	addi	r2,r2,-1
  80c71c:	12801436 	bltu	r2,r10,80c770 <__muldf3+0x2e8>
  80c720:	da001017 	ldw	r8,64(sp)
  80c724:	101f883a 	mov	r15,r2
  80c728:	4a45883a 	add	r2,r9,r9
  80c72c:	124d803a 	cmpltu	r6,r2,r9
  80c730:	5287883a 	add	r3,r10,r10
  80c734:	9497883a 	add	r11,r18,r18
  80c738:	5c8f803a 	cmpltu	r7,r11,r18
  80c73c:	9cd9883a 	add	r12,r19,r19
  80c740:	01000044 	movi	r4,1
  80c744:	30cd883a 	add	r6,r6,r3
  80c748:	3b0f883a 	add	r7,r7,r12
  80c74c:	423fffc4 	addi	r8,r8,-1
  80c750:	1013883a 	mov	r9,r2
  80c754:	3015883a 	mov	r10,r6
  80c758:	111ab03a 	or	r13,r2,r4
  80c75c:	98003016 	blt	r19,zero,80c820 <__muldf3+0x398>
  80c760:	5825883a 	mov	r18,r11
  80c764:	3827883a 	mov	r19,r7
  80c768:	7abfef2e 	bgeu	r15,r10,80c728 <__muldf3+0x2a0>
  80c76c:	da001015 	stw	r8,64(sp)
  80c770:	00803fc4 	movi	r2,255
  80c774:	488e703a 	and	r7,r9,r2
  80c778:	00802004 	movi	r2,128
  80c77c:	0007883a 	mov	r3,zero
  80c780:	0011883a 	mov	r8,zero
  80c784:	38801826 	beq	r7,r2,80c7e8 <__muldf3+0x360>
  80c788:	008000c4 	movi	r2,3
  80c78c:	d9000e04 	addi	r4,sp,56
  80c790:	da801215 	stw	r10,72(sp)
  80c794:	d8800e15 	stw	r2,56(sp)
  80c798:	da401115 	stw	r9,68(sp)
  80c79c:	003f6a06 	br	80c548 <__muldf3+0xc0>
  80c7a0:	89802126 	beq	r17,r6,80c828 <__muldf3+0x3a0>
  80c7a4:	0009883a 	mov	r4,zero
  80c7a8:	5105883a 	add	r2,r10,r4
  80c7ac:	128d803a 	cmpltu	r6,r2,r10
  80c7b0:	5d07883a 	add	r3,r11,r20
  80c7b4:	30cd883a 	add	r6,r6,r3
  80c7b8:	0021883a 	mov	r16,zero
  80c7bc:	0023883a 	mov	r17,zero
  80c7c0:	1025883a 	mov	r18,r2
  80c7c4:	3027883a 	mov	r19,r6
  80c7c8:	32ff9e2e 	bgeu	r6,r11,80c644 <__muldf3+0x1bc>
  80c7cc:	00800044 	movi	r2,1
  80c7d0:	8089883a 	add	r4,r16,r2
  80c7d4:	240d803a 	cmpltu	r6,r4,r16
  80c7d8:	344d883a 	add	r6,r6,r17
  80c7dc:	2021883a 	mov	r16,r4
  80c7e0:	3023883a 	mov	r17,r6
  80c7e4:	003f9806 	br	80c648 <__muldf3+0x1c0>
  80c7e8:	403fe71e 	bne	r8,zero,80c788 <__muldf3+0x300>
  80c7ec:	01004004 	movi	r4,256
  80c7f0:	4904703a 	and	r2,r9,r4
  80c7f4:	10c4b03a 	or	r2,r2,r3
  80c7f8:	103fe31e 	bne	r2,zero,80c788 <__muldf3+0x300>
  80c7fc:	94c4b03a 	or	r2,r18,r19
  80c800:	103fe126 	beq	r2,zero,80c788 <__muldf3+0x300>
  80c804:	49c5883a 	add	r2,r9,r7
  80c808:	1251803a 	cmpltu	r8,r2,r9
  80c80c:	4291883a 	add	r8,r8,r10
  80c810:	013fc004 	movi	r4,-256
  80c814:	1112703a 	and	r9,r2,r4
  80c818:	4015883a 	mov	r10,r8
  80c81c:	003fda06 	br	80c788 <__muldf3+0x300>
  80c820:	6813883a 	mov	r9,r13
  80c824:	003fce06 	br	80c760 <__muldf3+0x2d8>
  80c828:	143f7c36 	bltu	r2,r16,80c61c <__muldf3+0x194>
  80c82c:	003fdd06 	br	80c7a4 <__muldf3+0x31c>
  80c830:	12bf852e 	bgeu	r2,r10,80c648 <__muldf3+0x1c0>
  80c834:	003fe506 	br	80c7cc <__muldf3+0x344>
  80c838:	00800084 	movi	r2,2
  80c83c:	20bf351e 	bne	r4,r2,80c514 <__muldf3+0x8c>
  80c840:	01002074 	movhi	r4,129
  80c844:	21065004 	addi	r4,r4,6464
  80c848:	003f3f06 	br	80c548 <__muldf3+0xc0>

0080c84c <__divdf3>:
  80c84c:	deffed04 	addi	sp,sp,-76
  80c850:	dcc01115 	stw	r19,68(sp)
  80c854:	dcc00404 	addi	r19,sp,16
  80c858:	2011883a 	mov	r8,r4
  80c85c:	2813883a 	mov	r9,r5
  80c860:	dc000e15 	stw	r16,56(sp)
  80c864:	d809883a 	mov	r4,sp
  80c868:	980b883a 	mov	r5,r19
  80c86c:	dc000904 	addi	r16,sp,36
  80c870:	dfc01215 	stw	ra,72(sp)
  80c874:	da400115 	stw	r9,4(sp)
  80c878:	d9c00315 	stw	r7,12(sp)
  80c87c:	da000015 	stw	r8,0(sp)
  80c880:	d9800215 	stw	r6,8(sp)
  80c884:	dc801015 	stw	r18,64(sp)
  80c888:	dc400f15 	stw	r17,60(sp)
  80c88c:	080d6280 	call	80d628 <__unpack_d>
  80c890:	d9000204 	addi	r4,sp,8
  80c894:	800b883a 	mov	r5,r16
  80c898:	080d6280 	call	80d628 <__unpack_d>
  80c89c:	d9000417 	ldw	r4,16(sp)
  80c8a0:	00800044 	movi	r2,1
  80c8a4:	11000b2e 	bgeu	r2,r4,80c8d4 <__divdf3+0x88>
  80c8a8:	d9400917 	ldw	r5,36(sp)
  80c8ac:	1140762e 	bgeu	r2,r5,80ca88 <__divdf3+0x23c>
  80c8b0:	d8800517 	ldw	r2,20(sp)
  80c8b4:	d8c00a17 	ldw	r3,40(sp)
  80c8b8:	01800104 	movi	r6,4
  80c8bc:	10c4f03a 	xor	r2,r2,r3
  80c8c0:	d8800515 	stw	r2,20(sp)
  80c8c4:	21800226 	beq	r4,r6,80c8d0 <__divdf3+0x84>
  80c8c8:	00800084 	movi	r2,2
  80c8cc:	2080141e 	bne	r4,r2,80c920 <__divdf3+0xd4>
  80c8d0:	29000926 	beq	r5,r4,80c8f8 <__divdf3+0xac>
  80c8d4:	9809883a 	mov	r4,r19
  80c8d8:	080d3140 	call	80d314 <__pack_d>
  80c8dc:	dfc01217 	ldw	ra,72(sp)
  80c8e0:	dcc01117 	ldw	r19,68(sp)
  80c8e4:	dc801017 	ldw	r18,64(sp)
  80c8e8:	dc400f17 	ldw	r17,60(sp)
  80c8ec:	dc000e17 	ldw	r16,56(sp)
  80c8f0:	dec01304 	addi	sp,sp,76
  80c8f4:	f800283a 	ret
  80c8f8:	01002074 	movhi	r4,129
  80c8fc:	21065004 	addi	r4,r4,6464
  80c900:	080d3140 	call	80d314 <__pack_d>
  80c904:	dfc01217 	ldw	ra,72(sp)
  80c908:	dcc01117 	ldw	r19,68(sp)
  80c90c:	dc801017 	ldw	r18,64(sp)
  80c910:	dc400f17 	ldw	r17,60(sp)
  80c914:	dc000e17 	ldw	r16,56(sp)
  80c918:	dec01304 	addi	sp,sp,76
  80c91c:	f800283a 	ret
  80c920:	29805b26 	beq	r5,r6,80ca90 <__divdf3+0x244>
  80c924:	28802d26 	beq	r5,r2,80c9dc <__divdf3+0x190>
  80c928:	d8c00617 	ldw	r3,24(sp)
  80c92c:	d8800b17 	ldw	r2,44(sp)
  80c930:	d9c00817 	ldw	r7,32(sp)
  80c934:	dc400d17 	ldw	r17,52(sp)
  80c938:	188bc83a 	sub	r5,r3,r2
  80c93c:	d9800717 	ldw	r6,28(sp)
  80c940:	dc000c17 	ldw	r16,48(sp)
  80c944:	d9400615 	stw	r5,24(sp)
  80c948:	3c403836 	bltu	r7,r17,80ca2c <__divdf3+0x1e0>
  80c94c:	89c03626 	beq	r17,r7,80ca28 <__divdf3+0x1dc>
  80c950:	0015883a 	mov	r10,zero
  80c954:	001d883a 	mov	r14,zero
  80c958:	02c40034 	movhi	r11,4096
  80c95c:	001f883a 	mov	r15,zero
  80c960:	003f883a 	mov	ra,zero
  80c964:	04800f44 	movi	r18,61
  80c968:	00000f06 	br	80c9a8 <__divdf3+0x15c>
  80c96c:	601d883a 	mov	r14,r12
  80c970:	681f883a 	mov	r15,r13
  80c974:	400d883a 	mov	r6,r8
  80c978:	100f883a 	mov	r7,r2
  80c97c:	3191883a 	add	r8,r6,r6
  80c980:	5808d07a 	srli	r4,r11,1
  80c984:	4185803a 	cmpltu	r2,r8,r6
  80c988:	39d3883a 	add	r9,r7,r7
  80c98c:	28c6b03a 	or	r3,r5,r3
  80c990:	1245883a 	add	r2,r2,r9
  80c994:	1815883a 	mov	r10,r3
  80c998:	2017883a 	mov	r11,r4
  80c99c:	400d883a 	mov	r6,r8
  80c9a0:	100f883a 	mov	r7,r2
  80c9a4:	fc801726 	beq	ra,r18,80ca04 <__divdf3+0x1b8>
  80c9a8:	580a97fa 	slli	r5,r11,31
  80c9ac:	5006d07a 	srli	r3,r10,1
  80c9b0:	ffc00044 	addi	ra,ra,1
  80c9b4:	3c7ff136 	bltu	r7,r17,80c97c <__divdf3+0x130>
  80c9b8:	3411c83a 	sub	r8,r6,r16
  80c9bc:	3205803a 	cmpltu	r2,r6,r8
  80c9c0:	3c53c83a 	sub	r9,r7,r17
  80c9c4:	7298b03a 	or	r12,r14,r10
  80c9c8:	7adab03a 	or	r13,r15,r11
  80c9cc:	4885c83a 	sub	r2,r9,r2
  80c9d0:	89ffe61e 	bne	r17,r7,80c96c <__divdf3+0x120>
  80c9d4:	343fe936 	bltu	r6,r16,80c97c <__divdf3+0x130>
  80c9d8:	003fe406 	br	80c96c <__divdf3+0x120>
  80c9dc:	9809883a 	mov	r4,r19
  80c9e0:	d9800415 	stw	r6,16(sp)
  80c9e4:	080d3140 	call	80d314 <__pack_d>
  80c9e8:	dfc01217 	ldw	ra,72(sp)
  80c9ec:	dcc01117 	ldw	r19,68(sp)
  80c9f0:	dc801017 	ldw	r18,64(sp)
  80c9f4:	dc400f17 	ldw	r17,60(sp)
  80c9f8:	dc000e17 	ldw	r16,56(sp)
  80c9fc:	dec01304 	addi	sp,sp,76
  80ca00:	f800283a 	ret
  80ca04:	00803fc4 	movi	r2,255
  80ca08:	7090703a 	and	r8,r14,r2
  80ca0c:	00802004 	movi	r2,128
  80ca10:	0007883a 	mov	r3,zero
  80ca14:	0013883a 	mov	r9,zero
  80ca18:	40800d26 	beq	r8,r2,80ca50 <__divdf3+0x204>
  80ca1c:	dbc00815 	stw	r15,32(sp)
  80ca20:	db800715 	stw	r14,28(sp)
  80ca24:	003fab06 	br	80c8d4 <__divdf3+0x88>
  80ca28:	343fc92e 	bgeu	r6,r16,80c950 <__divdf3+0x104>
  80ca2c:	3185883a 	add	r2,r6,r6
  80ca30:	1189803a 	cmpltu	r4,r2,r6
  80ca34:	39c7883a 	add	r3,r7,r7
  80ca38:	20c9883a 	add	r4,r4,r3
  80ca3c:	297fffc4 	addi	r5,r5,-1
  80ca40:	100d883a 	mov	r6,r2
  80ca44:	200f883a 	mov	r7,r4
  80ca48:	d9400615 	stw	r5,24(sp)
  80ca4c:	003fc006 	br	80c950 <__divdf3+0x104>
  80ca50:	483ff21e 	bne	r9,zero,80ca1c <__divdf3+0x1d0>
  80ca54:	01004004 	movi	r4,256
  80ca58:	7104703a 	and	r2,r14,r4
  80ca5c:	10c4b03a 	or	r2,r2,r3
  80ca60:	103fee1e 	bne	r2,zero,80ca1c <__divdf3+0x1d0>
  80ca64:	31c4b03a 	or	r2,r6,r7
  80ca68:	103fec26 	beq	r2,zero,80ca1c <__divdf3+0x1d0>
  80ca6c:	7205883a 	add	r2,r14,r8
  80ca70:	1391803a 	cmpltu	r8,r2,r14
  80ca74:	43d1883a 	add	r8,r8,r15
  80ca78:	013fc004 	movi	r4,-256
  80ca7c:	111c703a 	and	r14,r2,r4
  80ca80:	401f883a 	mov	r15,r8
  80ca84:	003fe506 	br	80ca1c <__divdf3+0x1d0>
  80ca88:	8009883a 	mov	r4,r16
  80ca8c:	003f9206 	br	80c8d8 <__divdf3+0x8c>
  80ca90:	9809883a 	mov	r4,r19
  80ca94:	d8000715 	stw	zero,28(sp)
  80ca98:	d8000815 	stw	zero,32(sp)
  80ca9c:	d8000615 	stw	zero,24(sp)
  80caa0:	003f8d06 	br	80c8d8 <__divdf3+0x8c>

0080caa4 <__eqdf2>:
  80caa4:	deffef04 	addi	sp,sp,-68
  80caa8:	dc400f15 	stw	r17,60(sp)
  80caac:	dc400404 	addi	r17,sp,16
  80cab0:	2005883a 	mov	r2,r4
  80cab4:	2807883a 	mov	r3,r5
  80cab8:	dc000e15 	stw	r16,56(sp)
  80cabc:	d809883a 	mov	r4,sp
  80cac0:	880b883a 	mov	r5,r17
  80cac4:	dc000904 	addi	r16,sp,36
  80cac8:	d8c00115 	stw	r3,4(sp)
  80cacc:	d8800015 	stw	r2,0(sp)
  80cad0:	d9800215 	stw	r6,8(sp)
  80cad4:	dfc01015 	stw	ra,64(sp)
  80cad8:	d9c00315 	stw	r7,12(sp)
  80cadc:	080d6280 	call	80d628 <__unpack_d>
  80cae0:	d9000204 	addi	r4,sp,8
  80cae4:	800b883a 	mov	r5,r16
  80cae8:	080d6280 	call	80d628 <__unpack_d>
  80caec:	d8800417 	ldw	r2,16(sp)
  80caf0:	00c00044 	movi	r3,1
  80caf4:	180d883a 	mov	r6,r3
  80caf8:	1880062e 	bgeu	r3,r2,80cb14 <__eqdf2+0x70>
  80cafc:	d8800917 	ldw	r2,36(sp)
  80cb00:	8809883a 	mov	r4,r17
  80cb04:	800b883a 	mov	r5,r16
  80cb08:	1880022e 	bgeu	r3,r2,80cb14 <__eqdf2+0x70>
  80cb0c:	080d7600 	call	80d760 <__fpcmp_parts_d>
  80cb10:	100d883a 	mov	r6,r2
  80cb14:	3005883a 	mov	r2,r6
  80cb18:	dfc01017 	ldw	ra,64(sp)
  80cb1c:	dc400f17 	ldw	r17,60(sp)
  80cb20:	dc000e17 	ldw	r16,56(sp)
  80cb24:	dec01104 	addi	sp,sp,68
  80cb28:	f800283a 	ret

0080cb2c <__nedf2>:
  80cb2c:	deffef04 	addi	sp,sp,-68
  80cb30:	dc400f15 	stw	r17,60(sp)
  80cb34:	dc400404 	addi	r17,sp,16
  80cb38:	2005883a 	mov	r2,r4
  80cb3c:	2807883a 	mov	r3,r5
  80cb40:	dc000e15 	stw	r16,56(sp)
  80cb44:	d809883a 	mov	r4,sp
  80cb48:	880b883a 	mov	r5,r17
  80cb4c:	dc000904 	addi	r16,sp,36
  80cb50:	d8c00115 	stw	r3,4(sp)
  80cb54:	d8800015 	stw	r2,0(sp)
  80cb58:	d9800215 	stw	r6,8(sp)
  80cb5c:	dfc01015 	stw	ra,64(sp)
  80cb60:	d9c00315 	stw	r7,12(sp)
  80cb64:	080d6280 	call	80d628 <__unpack_d>
  80cb68:	d9000204 	addi	r4,sp,8
  80cb6c:	800b883a 	mov	r5,r16
  80cb70:	080d6280 	call	80d628 <__unpack_d>
  80cb74:	d8800417 	ldw	r2,16(sp)
  80cb78:	00c00044 	movi	r3,1
  80cb7c:	180d883a 	mov	r6,r3
  80cb80:	1880062e 	bgeu	r3,r2,80cb9c <__nedf2+0x70>
  80cb84:	d8800917 	ldw	r2,36(sp)
  80cb88:	8809883a 	mov	r4,r17
  80cb8c:	800b883a 	mov	r5,r16
  80cb90:	1880022e 	bgeu	r3,r2,80cb9c <__nedf2+0x70>
  80cb94:	080d7600 	call	80d760 <__fpcmp_parts_d>
  80cb98:	100d883a 	mov	r6,r2
  80cb9c:	3005883a 	mov	r2,r6
  80cba0:	dfc01017 	ldw	ra,64(sp)
  80cba4:	dc400f17 	ldw	r17,60(sp)
  80cba8:	dc000e17 	ldw	r16,56(sp)
  80cbac:	dec01104 	addi	sp,sp,68
  80cbb0:	f800283a 	ret

0080cbb4 <__gtdf2>:
  80cbb4:	deffef04 	addi	sp,sp,-68
  80cbb8:	dc400f15 	stw	r17,60(sp)
  80cbbc:	dc400404 	addi	r17,sp,16
  80cbc0:	2005883a 	mov	r2,r4
  80cbc4:	2807883a 	mov	r3,r5
  80cbc8:	dc000e15 	stw	r16,56(sp)
  80cbcc:	d809883a 	mov	r4,sp
  80cbd0:	880b883a 	mov	r5,r17
  80cbd4:	dc000904 	addi	r16,sp,36
  80cbd8:	d8c00115 	stw	r3,4(sp)
  80cbdc:	d8800015 	stw	r2,0(sp)
  80cbe0:	d9800215 	stw	r6,8(sp)
  80cbe4:	dfc01015 	stw	ra,64(sp)
  80cbe8:	d9c00315 	stw	r7,12(sp)
  80cbec:	080d6280 	call	80d628 <__unpack_d>
  80cbf0:	d9000204 	addi	r4,sp,8
  80cbf4:	800b883a 	mov	r5,r16
  80cbf8:	080d6280 	call	80d628 <__unpack_d>
  80cbfc:	d8800417 	ldw	r2,16(sp)
  80cc00:	00c00044 	movi	r3,1
  80cc04:	01bfffc4 	movi	r6,-1
  80cc08:	1880062e 	bgeu	r3,r2,80cc24 <__gtdf2+0x70>
  80cc0c:	d8800917 	ldw	r2,36(sp)
  80cc10:	8809883a 	mov	r4,r17
  80cc14:	800b883a 	mov	r5,r16
  80cc18:	1880022e 	bgeu	r3,r2,80cc24 <__gtdf2+0x70>
  80cc1c:	080d7600 	call	80d760 <__fpcmp_parts_d>
  80cc20:	100d883a 	mov	r6,r2
  80cc24:	3005883a 	mov	r2,r6
  80cc28:	dfc01017 	ldw	ra,64(sp)
  80cc2c:	dc400f17 	ldw	r17,60(sp)
  80cc30:	dc000e17 	ldw	r16,56(sp)
  80cc34:	dec01104 	addi	sp,sp,68
  80cc38:	f800283a 	ret

0080cc3c <__gedf2>:
  80cc3c:	deffef04 	addi	sp,sp,-68
  80cc40:	dc400f15 	stw	r17,60(sp)
  80cc44:	dc400404 	addi	r17,sp,16
  80cc48:	2005883a 	mov	r2,r4
  80cc4c:	2807883a 	mov	r3,r5
  80cc50:	dc000e15 	stw	r16,56(sp)
  80cc54:	d809883a 	mov	r4,sp
  80cc58:	880b883a 	mov	r5,r17
  80cc5c:	dc000904 	addi	r16,sp,36
  80cc60:	d8c00115 	stw	r3,4(sp)
  80cc64:	d8800015 	stw	r2,0(sp)
  80cc68:	d9800215 	stw	r6,8(sp)
  80cc6c:	dfc01015 	stw	ra,64(sp)
  80cc70:	d9c00315 	stw	r7,12(sp)
  80cc74:	080d6280 	call	80d628 <__unpack_d>
  80cc78:	d9000204 	addi	r4,sp,8
  80cc7c:	800b883a 	mov	r5,r16
  80cc80:	080d6280 	call	80d628 <__unpack_d>
  80cc84:	d8800417 	ldw	r2,16(sp)
  80cc88:	00c00044 	movi	r3,1
  80cc8c:	01bfffc4 	movi	r6,-1
  80cc90:	1880062e 	bgeu	r3,r2,80ccac <__gedf2+0x70>
  80cc94:	d8800917 	ldw	r2,36(sp)
  80cc98:	8809883a 	mov	r4,r17
  80cc9c:	800b883a 	mov	r5,r16
  80cca0:	1880022e 	bgeu	r3,r2,80ccac <__gedf2+0x70>
  80cca4:	080d7600 	call	80d760 <__fpcmp_parts_d>
  80cca8:	100d883a 	mov	r6,r2
  80ccac:	3005883a 	mov	r2,r6
  80ccb0:	dfc01017 	ldw	ra,64(sp)
  80ccb4:	dc400f17 	ldw	r17,60(sp)
  80ccb8:	dc000e17 	ldw	r16,56(sp)
  80ccbc:	dec01104 	addi	sp,sp,68
  80ccc0:	f800283a 	ret

0080ccc4 <__ltdf2>:
  80ccc4:	deffef04 	addi	sp,sp,-68
  80ccc8:	dc400f15 	stw	r17,60(sp)
  80cccc:	dc400404 	addi	r17,sp,16
  80ccd0:	2005883a 	mov	r2,r4
  80ccd4:	2807883a 	mov	r3,r5
  80ccd8:	dc000e15 	stw	r16,56(sp)
  80ccdc:	d809883a 	mov	r4,sp
  80cce0:	880b883a 	mov	r5,r17
  80cce4:	dc000904 	addi	r16,sp,36
  80cce8:	d8c00115 	stw	r3,4(sp)
  80ccec:	d8800015 	stw	r2,0(sp)
  80ccf0:	d9800215 	stw	r6,8(sp)
  80ccf4:	dfc01015 	stw	ra,64(sp)
  80ccf8:	d9c00315 	stw	r7,12(sp)
  80ccfc:	080d6280 	call	80d628 <__unpack_d>
  80cd00:	d9000204 	addi	r4,sp,8
  80cd04:	800b883a 	mov	r5,r16
  80cd08:	080d6280 	call	80d628 <__unpack_d>
  80cd0c:	d8800417 	ldw	r2,16(sp)
  80cd10:	00c00044 	movi	r3,1
  80cd14:	180d883a 	mov	r6,r3
  80cd18:	1880062e 	bgeu	r3,r2,80cd34 <__ltdf2+0x70>
  80cd1c:	d8800917 	ldw	r2,36(sp)
  80cd20:	8809883a 	mov	r4,r17
  80cd24:	800b883a 	mov	r5,r16
  80cd28:	1880022e 	bgeu	r3,r2,80cd34 <__ltdf2+0x70>
  80cd2c:	080d7600 	call	80d760 <__fpcmp_parts_d>
  80cd30:	100d883a 	mov	r6,r2
  80cd34:	3005883a 	mov	r2,r6
  80cd38:	dfc01017 	ldw	ra,64(sp)
  80cd3c:	dc400f17 	ldw	r17,60(sp)
  80cd40:	dc000e17 	ldw	r16,56(sp)
  80cd44:	dec01104 	addi	sp,sp,68
  80cd48:	f800283a 	ret

0080cd4c <__floatsidf>:
  80cd4c:	2006d7fa 	srli	r3,r4,31
  80cd50:	defff604 	addi	sp,sp,-40
  80cd54:	008000c4 	movi	r2,3
  80cd58:	dfc00915 	stw	ra,36(sp)
  80cd5c:	dcc00815 	stw	r19,32(sp)
  80cd60:	dc800715 	stw	r18,28(sp)
  80cd64:	dc400615 	stw	r17,24(sp)
  80cd68:	dc000515 	stw	r16,20(sp)
  80cd6c:	d8800015 	stw	r2,0(sp)
  80cd70:	d8c00115 	stw	r3,4(sp)
  80cd74:	20000f1e 	bne	r4,zero,80cdb4 <__floatsidf+0x68>
  80cd78:	00800084 	movi	r2,2
  80cd7c:	d8800015 	stw	r2,0(sp)
  80cd80:	d809883a 	mov	r4,sp
  80cd84:	080d3140 	call	80d314 <__pack_d>
  80cd88:	1009883a 	mov	r4,r2
  80cd8c:	180b883a 	mov	r5,r3
  80cd90:	2005883a 	mov	r2,r4
  80cd94:	2807883a 	mov	r3,r5
  80cd98:	dfc00917 	ldw	ra,36(sp)
  80cd9c:	dcc00817 	ldw	r19,32(sp)
  80cda0:	dc800717 	ldw	r18,28(sp)
  80cda4:	dc400617 	ldw	r17,24(sp)
  80cda8:	dc000517 	ldw	r16,20(sp)
  80cdac:	dec00a04 	addi	sp,sp,40
  80cdb0:	f800283a 	ret
  80cdb4:	00800f04 	movi	r2,60
  80cdb8:	1807003a 	cmpeq	r3,r3,zero
  80cdbc:	d8800215 	stw	r2,8(sp)
  80cdc0:	18001126 	beq	r3,zero,80ce08 <__floatsidf+0xbc>
  80cdc4:	0027883a 	mov	r19,zero
  80cdc8:	2025883a 	mov	r18,r4
  80cdcc:	d9000315 	stw	r4,12(sp)
  80cdd0:	dcc00415 	stw	r19,16(sp)
  80cdd4:	080d2940 	call	80d294 <__clzsi2>
  80cdd8:	11000744 	addi	r4,r2,29
  80cddc:	013fe80e 	bge	zero,r4,80cd80 <__floatsidf+0x34>
  80cde0:	10bfff44 	addi	r2,r2,-3
  80cde4:	10000c16 	blt	r2,zero,80ce18 <__floatsidf+0xcc>
  80cde8:	90a2983a 	sll	r17,r18,r2
  80cdec:	0021883a 	mov	r16,zero
  80cdf0:	d8800217 	ldw	r2,8(sp)
  80cdf4:	dc400415 	stw	r17,16(sp)
  80cdf8:	dc000315 	stw	r16,12(sp)
  80cdfc:	1105c83a 	sub	r2,r2,r4
  80ce00:	d8800215 	stw	r2,8(sp)
  80ce04:	003fde06 	br	80cd80 <__floatsidf+0x34>
  80ce08:	00a00034 	movhi	r2,32768
  80ce0c:	20800a26 	beq	r4,r2,80ce38 <__floatsidf+0xec>
  80ce10:	0109c83a 	sub	r4,zero,r4
  80ce14:	003feb06 	br	80cdc4 <__floatsidf+0x78>
  80ce18:	9006d07a 	srli	r3,r18,1
  80ce1c:	008007c4 	movi	r2,31
  80ce20:	1105c83a 	sub	r2,r2,r4
  80ce24:	1886d83a 	srl	r3,r3,r2
  80ce28:	9922983a 	sll	r17,r19,r4
  80ce2c:	9120983a 	sll	r16,r18,r4
  80ce30:	1c62b03a 	or	r17,r3,r17
  80ce34:	003fee06 	br	80cdf0 <__floatsidf+0xa4>
  80ce38:	0009883a 	mov	r4,zero
  80ce3c:	01707834 	movhi	r5,49632
  80ce40:	003fd306 	br	80cd90 <__floatsidf+0x44>

0080ce44 <__fixdfsi>:
  80ce44:	defff804 	addi	sp,sp,-32
  80ce48:	2005883a 	mov	r2,r4
  80ce4c:	2807883a 	mov	r3,r5
  80ce50:	d809883a 	mov	r4,sp
  80ce54:	d9400204 	addi	r5,sp,8
  80ce58:	d8c00115 	stw	r3,4(sp)
  80ce5c:	d8800015 	stw	r2,0(sp)
  80ce60:	dfc00715 	stw	ra,28(sp)
  80ce64:	080d6280 	call	80d628 <__unpack_d>
  80ce68:	d8c00217 	ldw	r3,8(sp)
  80ce6c:	00800084 	movi	r2,2
  80ce70:	1880051e 	bne	r3,r2,80ce88 <__fixdfsi+0x44>
  80ce74:	0007883a 	mov	r3,zero
  80ce78:	1805883a 	mov	r2,r3
  80ce7c:	dfc00717 	ldw	ra,28(sp)
  80ce80:	dec00804 	addi	sp,sp,32
  80ce84:	f800283a 	ret
  80ce88:	00800044 	movi	r2,1
  80ce8c:	10fff92e 	bgeu	r2,r3,80ce74 <__fixdfsi+0x30>
  80ce90:	00800104 	movi	r2,4
  80ce94:	18800426 	beq	r3,r2,80cea8 <__fixdfsi+0x64>
  80ce98:	d8c00417 	ldw	r3,16(sp)
  80ce9c:	183ff516 	blt	r3,zero,80ce74 <__fixdfsi+0x30>
  80cea0:	00800784 	movi	r2,30
  80cea4:	10c0080e 	bge	r2,r3,80cec8 <__fixdfsi+0x84>
  80cea8:	d8800317 	ldw	r2,12(sp)
  80ceac:	1000121e 	bne	r2,zero,80cef8 <__fixdfsi+0xb4>
  80ceb0:	00e00034 	movhi	r3,32768
  80ceb4:	18ffffc4 	addi	r3,r3,-1
  80ceb8:	1805883a 	mov	r2,r3
  80cebc:	dfc00717 	ldw	ra,28(sp)
  80cec0:	dec00804 	addi	sp,sp,32
  80cec4:	f800283a 	ret
  80cec8:	00800f04 	movi	r2,60
  80cecc:	10d1c83a 	sub	r8,r2,r3
  80ced0:	40bff804 	addi	r2,r8,-32
  80ced4:	d9800517 	ldw	r6,20(sp)
  80ced8:	d9c00617 	ldw	r7,24(sp)
  80cedc:	10000816 	blt	r2,zero,80cf00 <__fixdfsi+0xbc>
  80cee0:	3888d83a 	srl	r4,r7,r2
  80cee4:	d8800317 	ldw	r2,12(sp)
  80cee8:	2007883a 	mov	r3,r4
  80ceec:	103fe226 	beq	r2,zero,80ce78 <__fixdfsi+0x34>
  80cef0:	0107c83a 	sub	r3,zero,r4
  80cef4:	003fe006 	br	80ce78 <__fixdfsi+0x34>
  80cef8:	00e00034 	movhi	r3,32768
  80cefc:	003fde06 	br	80ce78 <__fixdfsi+0x34>
  80cf00:	39c7883a 	add	r3,r7,r7
  80cf04:	008007c4 	movi	r2,31
  80cf08:	1205c83a 	sub	r2,r2,r8
  80cf0c:	1886983a 	sll	r3,r3,r2
  80cf10:	3208d83a 	srl	r4,r6,r8
  80cf14:	1908b03a 	or	r4,r3,r4
  80cf18:	003ff206 	br	80cee4 <__fixdfsi+0xa0>

0080cf1c <__floatunsidf>:
  80cf1c:	defff204 	addi	sp,sp,-56
  80cf20:	dfc00d15 	stw	ra,52(sp)
  80cf24:	ddc00c15 	stw	r23,48(sp)
  80cf28:	dd800b15 	stw	r22,44(sp)
  80cf2c:	dd400a15 	stw	r21,40(sp)
  80cf30:	dd000915 	stw	r20,36(sp)
  80cf34:	dcc00815 	stw	r19,32(sp)
  80cf38:	dc800715 	stw	r18,28(sp)
  80cf3c:	dc400615 	stw	r17,24(sp)
  80cf40:	dc000515 	stw	r16,20(sp)
  80cf44:	d8000115 	stw	zero,4(sp)
  80cf48:	20000f1e 	bne	r4,zero,80cf88 <__floatunsidf+0x6c>
  80cf4c:	00800084 	movi	r2,2
  80cf50:	d8800015 	stw	r2,0(sp)
  80cf54:	d809883a 	mov	r4,sp
  80cf58:	080d3140 	call	80d314 <__pack_d>
  80cf5c:	dfc00d17 	ldw	ra,52(sp)
  80cf60:	ddc00c17 	ldw	r23,48(sp)
  80cf64:	dd800b17 	ldw	r22,44(sp)
  80cf68:	dd400a17 	ldw	r21,40(sp)
  80cf6c:	dd000917 	ldw	r20,36(sp)
  80cf70:	dcc00817 	ldw	r19,32(sp)
  80cf74:	dc800717 	ldw	r18,28(sp)
  80cf78:	dc400617 	ldw	r17,24(sp)
  80cf7c:	dc000517 	ldw	r16,20(sp)
  80cf80:	dec00e04 	addi	sp,sp,56
  80cf84:	f800283a 	ret
  80cf88:	008000c4 	movi	r2,3
  80cf8c:	00c00f04 	movi	r3,60
  80cf90:	002f883a 	mov	r23,zero
  80cf94:	202d883a 	mov	r22,r4
  80cf98:	d8800015 	stw	r2,0(sp)
  80cf9c:	d8c00215 	stw	r3,8(sp)
  80cfa0:	d9000315 	stw	r4,12(sp)
  80cfa4:	ddc00415 	stw	r23,16(sp)
  80cfa8:	080d2940 	call	80d294 <__clzsi2>
  80cfac:	12400744 	addi	r9,r2,29
  80cfb0:	48000b16 	blt	r9,zero,80cfe0 <__floatunsidf+0xc4>
  80cfb4:	483fe726 	beq	r9,zero,80cf54 <__floatunsidf+0x38>
  80cfb8:	10bfff44 	addi	r2,r2,-3
  80cfbc:	10002e16 	blt	r2,zero,80d078 <__floatunsidf+0x15c>
  80cfc0:	b0a2983a 	sll	r17,r22,r2
  80cfc4:	0021883a 	mov	r16,zero
  80cfc8:	d8800217 	ldw	r2,8(sp)
  80cfcc:	dc400415 	stw	r17,16(sp)
  80cfd0:	dc000315 	stw	r16,12(sp)
  80cfd4:	1245c83a 	sub	r2,r2,r9
  80cfd8:	d8800215 	stw	r2,8(sp)
  80cfdc:	003fdd06 	br	80cf54 <__floatunsidf+0x38>
  80cfe0:	0255c83a 	sub	r10,zero,r9
  80cfe4:	51bff804 	addi	r6,r10,-32
  80cfe8:	30001b16 	blt	r6,zero,80d058 <__floatunsidf+0x13c>
  80cfec:	b9a8d83a 	srl	r20,r23,r6
  80cff0:	002b883a 	mov	r21,zero
  80cff4:	000f883a 	mov	r7,zero
  80cff8:	01000044 	movi	r4,1
  80cffc:	0011883a 	mov	r8,zero
  80d000:	30002516 	blt	r6,zero,80d098 <__floatunsidf+0x17c>
  80d004:	21a6983a 	sll	r19,r4,r6
  80d008:	0025883a 	mov	r18,zero
  80d00c:	00bfffc4 	movi	r2,-1
  80d010:	9089883a 	add	r4,r18,r2
  80d014:	988b883a 	add	r5,r19,r2
  80d018:	248d803a 	cmpltu	r6,r4,r18
  80d01c:	314b883a 	add	r5,r6,r5
  80d020:	b104703a 	and	r2,r22,r4
  80d024:	b946703a 	and	r3,r23,r5
  80d028:	10c4b03a 	or	r2,r2,r3
  80d02c:	10000226 	beq	r2,zero,80d038 <__floatunsidf+0x11c>
  80d030:	01c00044 	movi	r7,1
  80d034:	0011883a 	mov	r8,zero
  80d038:	d9000217 	ldw	r4,8(sp)
  80d03c:	a1c4b03a 	or	r2,r20,r7
  80d040:	aa06b03a 	or	r3,r21,r8
  80d044:	2249c83a 	sub	r4,r4,r9
  80d048:	d8c00415 	stw	r3,16(sp)
  80d04c:	d9000215 	stw	r4,8(sp)
  80d050:	d8800315 	stw	r2,12(sp)
  80d054:	003fbf06 	br	80cf54 <__floatunsidf+0x38>
  80d058:	bdc7883a 	add	r3,r23,r23
  80d05c:	008007c4 	movi	r2,31
  80d060:	1285c83a 	sub	r2,r2,r10
  80d064:	1886983a 	sll	r3,r3,r2
  80d068:	b2a8d83a 	srl	r20,r22,r10
  80d06c:	baaad83a 	srl	r21,r23,r10
  80d070:	1d28b03a 	or	r20,r3,r20
  80d074:	003fdf06 	br	80cff4 <__floatunsidf+0xd8>
  80d078:	b006d07a 	srli	r3,r22,1
  80d07c:	008007c4 	movi	r2,31
  80d080:	1245c83a 	sub	r2,r2,r9
  80d084:	1886d83a 	srl	r3,r3,r2
  80d088:	ba62983a 	sll	r17,r23,r9
  80d08c:	b260983a 	sll	r16,r22,r9
  80d090:	1c62b03a 	or	r17,r3,r17
  80d094:	003fcc06 	br	80cfc8 <__floatunsidf+0xac>
  80d098:	2006d07a 	srli	r3,r4,1
  80d09c:	008007c4 	movi	r2,31
  80d0a0:	1285c83a 	sub	r2,r2,r10
  80d0a4:	18a6d83a 	srl	r19,r3,r2
  80d0a8:	22a4983a 	sll	r18,r4,r10
  80d0ac:	003fd706 	br	80d00c <__floatunsidf+0xf0>

0080d0b0 <udivmodsi4>:
  80d0b0:	29001b2e 	bgeu	r5,r4,80d120 <udivmodsi4+0x70>
  80d0b4:	28001a16 	blt	r5,zero,80d120 <udivmodsi4+0x70>
  80d0b8:	00800044 	movi	r2,1
  80d0bc:	0007883a 	mov	r3,zero
  80d0c0:	01c007c4 	movi	r7,31
  80d0c4:	00000306 	br	80d0d4 <udivmodsi4+0x24>
  80d0c8:	19c01326 	beq	r3,r7,80d118 <udivmodsi4+0x68>
  80d0cc:	18c00044 	addi	r3,r3,1
  80d0d0:	28000416 	blt	r5,zero,80d0e4 <udivmodsi4+0x34>
  80d0d4:	294b883a 	add	r5,r5,r5
  80d0d8:	1085883a 	add	r2,r2,r2
  80d0dc:	293ffa36 	bltu	r5,r4,80d0c8 <udivmodsi4+0x18>
  80d0e0:	10000d26 	beq	r2,zero,80d118 <udivmodsi4+0x68>
  80d0e4:	0007883a 	mov	r3,zero
  80d0e8:	21400236 	bltu	r4,r5,80d0f4 <udivmodsi4+0x44>
  80d0ec:	2149c83a 	sub	r4,r4,r5
  80d0f0:	1886b03a 	or	r3,r3,r2
  80d0f4:	1004d07a 	srli	r2,r2,1
  80d0f8:	280ad07a 	srli	r5,r5,1
  80d0fc:	103ffa1e 	bne	r2,zero,80d0e8 <udivmodsi4+0x38>
  80d100:	30000226 	beq	r6,zero,80d10c <udivmodsi4+0x5c>
  80d104:	2005883a 	mov	r2,r4
  80d108:	f800283a 	ret
  80d10c:	1809883a 	mov	r4,r3
  80d110:	2005883a 	mov	r2,r4
  80d114:	f800283a 	ret
  80d118:	0007883a 	mov	r3,zero
  80d11c:	003ff806 	br	80d100 <udivmodsi4+0x50>
  80d120:	00800044 	movi	r2,1
  80d124:	0007883a 	mov	r3,zero
  80d128:	003fef06 	br	80d0e8 <udivmodsi4+0x38>

0080d12c <__divsi3>:
  80d12c:	defffe04 	addi	sp,sp,-8
  80d130:	dc000015 	stw	r16,0(sp)
  80d134:	dfc00115 	stw	ra,4(sp)
  80d138:	0021883a 	mov	r16,zero
  80d13c:	20000c16 	blt	r4,zero,80d170 <__divsi3+0x44>
  80d140:	000d883a 	mov	r6,zero
  80d144:	28000e16 	blt	r5,zero,80d180 <__divsi3+0x54>
  80d148:	080d0b00 	call	80d0b0 <udivmodsi4>
  80d14c:	1007883a 	mov	r3,r2
  80d150:	8005003a 	cmpeq	r2,r16,zero
  80d154:	1000011e 	bne	r2,zero,80d15c <__divsi3+0x30>
  80d158:	00c7c83a 	sub	r3,zero,r3
  80d15c:	1805883a 	mov	r2,r3
  80d160:	dfc00117 	ldw	ra,4(sp)
  80d164:	dc000017 	ldw	r16,0(sp)
  80d168:	dec00204 	addi	sp,sp,8
  80d16c:	f800283a 	ret
  80d170:	0109c83a 	sub	r4,zero,r4
  80d174:	04000044 	movi	r16,1
  80d178:	000d883a 	mov	r6,zero
  80d17c:	283ff20e 	bge	r5,zero,80d148 <__divsi3+0x1c>
  80d180:	014bc83a 	sub	r5,zero,r5
  80d184:	8021003a 	cmpeq	r16,r16,zero
  80d188:	003fef06 	br	80d148 <__divsi3+0x1c>

0080d18c <__modsi3>:
  80d18c:	deffff04 	addi	sp,sp,-4
  80d190:	dfc00015 	stw	ra,0(sp)
  80d194:	01800044 	movi	r6,1
  80d198:	2807883a 	mov	r3,r5
  80d19c:	20000416 	blt	r4,zero,80d1b0 <__modsi3+0x24>
  80d1a0:	28000c16 	blt	r5,zero,80d1d4 <__modsi3+0x48>
  80d1a4:	dfc00017 	ldw	ra,0(sp)
  80d1a8:	dec00104 	addi	sp,sp,4
  80d1ac:	080d0b01 	jmpi	80d0b0 <udivmodsi4>
  80d1b0:	0109c83a 	sub	r4,zero,r4
  80d1b4:	28000b16 	blt	r5,zero,80d1e4 <__modsi3+0x58>
  80d1b8:	180b883a 	mov	r5,r3
  80d1bc:	01800044 	movi	r6,1
  80d1c0:	080d0b00 	call	80d0b0 <udivmodsi4>
  80d1c4:	0085c83a 	sub	r2,zero,r2
  80d1c8:	dfc00017 	ldw	ra,0(sp)
  80d1cc:	dec00104 	addi	sp,sp,4
  80d1d0:	f800283a 	ret
  80d1d4:	014bc83a 	sub	r5,zero,r5
  80d1d8:	dfc00017 	ldw	ra,0(sp)
  80d1dc:	dec00104 	addi	sp,sp,4
  80d1e0:	080d0b01 	jmpi	80d0b0 <udivmodsi4>
  80d1e4:	0147c83a 	sub	r3,zero,r5
  80d1e8:	003ff306 	br	80d1b8 <__modsi3+0x2c>

0080d1ec <__udivsi3>:
  80d1ec:	000d883a 	mov	r6,zero
  80d1f0:	080d0b01 	jmpi	80d0b0 <udivmodsi4>

0080d1f4 <__umodsi3>:
  80d1f4:	01800044 	movi	r6,1
  80d1f8:	080d0b01 	jmpi	80d0b0 <udivmodsi4>

0080d1fc <__muldi3>:
  80d1fc:	2011883a 	mov	r8,r4
  80d200:	427fffcc 	andi	r9,r8,65535
  80d204:	4018d43a 	srli	r12,r8,16
  80d208:	32bfffcc 	andi	r10,r6,65535
  80d20c:	3016d43a 	srli	r11,r6,16
  80d210:	4a85383a 	mul	r2,r9,r10
  80d214:	6295383a 	mul	r10,r12,r10
  80d218:	4ad3383a 	mul	r9,r9,r11
  80d21c:	113fffcc 	andi	r4,r2,65535
  80d220:	1004d43a 	srli	r2,r2,16
  80d224:	4a93883a 	add	r9,r9,r10
  80d228:	3807883a 	mov	r3,r7
  80d22c:	1245883a 	add	r2,r2,r9
  80d230:	280f883a 	mov	r7,r5
  80d234:	180b883a 	mov	r5,r3
  80d238:	1006943a 	slli	r3,r2,16
  80d23c:	defffd04 	addi	sp,sp,-12
  80d240:	dc800215 	stw	r18,8(sp)
  80d244:	1907883a 	add	r3,r3,r4
  80d248:	dc400115 	stw	r17,4(sp)
  80d24c:	dc000015 	stw	r16,0(sp)
  80d250:	4165383a 	mul	r18,r8,r5
  80d254:	31e3383a 	mul	r17,r6,r7
  80d258:	1012d43a 	srli	r9,r2,16
  80d25c:	62d9383a 	mul	r12,r12,r11
  80d260:	181f883a 	mov	r15,r3
  80d264:	1280022e 	bgeu	r2,r10,80d270 <__muldi3+0x74>
  80d268:	00800074 	movhi	r2,1
  80d26c:	6099883a 	add	r12,r12,r2
  80d270:	624d883a 	add	r6,r12,r9
  80d274:	9187883a 	add	r3,r18,r6
  80d278:	88c7883a 	add	r3,r17,r3
  80d27c:	7805883a 	mov	r2,r15
  80d280:	dc800217 	ldw	r18,8(sp)
  80d284:	dc400117 	ldw	r17,4(sp)
  80d288:	dc000017 	ldw	r16,0(sp)
  80d28c:	dec00304 	addi	sp,sp,12
  80d290:	f800283a 	ret

0080d294 <__clzsi2>:
  80d294:	00bfffd4 	movui	r2,65535
  80d298:	11000e36 	bltu	r2,r4,80d2d4 <__clzsi2+0x40>
  80d29c:	00803fc4 	movi	r2,255
  80d2a0:	01400204 	movi	r5,8
  80d2a4:	0007883a 	mov	r3,zero
  80d2a8:	11001036 	bltu	r2,r4,80d2ec <__clzsi2+0x58>
  80d2ac:	000b883a 	mov	r5,zero
  80d2b0:	20c6d83a 	srl	r3,r4,r3
  80d2b4:	00802074 	movhi	r2,129
  80d2b8:	10865504 	addi	r2,r2,6484
  80d2bc:	1887883a 	add	r3,r3,r2
  80d2c0:	18800003 	ldbu	r2,0(r3)
  80d2c4:	00c00804 	movi	r3,32
  80d2c8:	2885883a 	add	r2,r5,r2
  80d2cc:	1885c83a 	sub	r2,r3,r2
  80d2d0:	f800283a 	ret
  80d2d4:	01400404 	movi	r5,16
  80d2d8:	00804034 	movhi	r2,256
  80d2dc:	10bfffc4 	addi	r2,r2,-1
  80d2e0:	2807883a 	mov	r3,r5
  80d2e4:	113ff22e 	bgeu	r2,r4,80d2b0 <__clzsi2+0x1c>
  80d2e8:	01400604 	movi	r5,24
  80d2ec:	2807883a 	mov	r3,r5
  80d2f0:	20c6d83a 	srl	r3,r4,r3
  80d2f4:	00802074 	movhi	r2,129
  80d2f8:	10865504 	addi	r2,r2,6484
  80d2fc:	1887883a 	add	r3,r3,r2
  80d300:	18800003 	ldbu	r2,0(r3)
  80d304:	00c00804 	movi	r3,32
  80d308:	2885883a 	add	r2,r5,r2
  80d30c:	1885c83a 	sub	r2,r3,r2
  80d310:	f800283a 	ret

0080d314 <__pack_d>:
  80d314:	20c00017 	ldw	r3,0(r4)
  80d318:	defffd04 	addi	sp,sp,-12
  80d31c:	dc000015 	stw	r16,0(sp)
  80d320:	dc800215 	stw	r18,8(sp)
  80d324:	dc400115 	stw	r17,4(sp)
  80d328:	00800044 	movi	r2,1
  80d32c:	22000317 	ldw	r8,12(r4)
  80d330:	001f883a 	mov	r15,zero
  80d334:	22400417 	ldw	r9,16(r4)
  80d338:	24000117 	ldw	r16,4(r4)
  80d33c:	10c0552e 	bgeu	r2,r3,80d494 <__pack_d+0x180>
  80d340:	00800104 	movi	r2,4
  80d344:	18804f26 	beq	r3,r2,80d484 <__pack_d+0x170>
  80d348:	00800084 	movi	r2,2
  80d34c:	18800226 	beq	r3,r2,80d358 <__pack_d+0x44>
  80d350:	4244b03a 	or	r2,r8,r9
  80d354:	10001a1e 	bne	r2,zero,80d3c0 <__pack_d+0xac>
  80d358:	000d883a 	mov	r6,zero
  80d35c:	000f883a 	mov	r7,zero
  80d360:	0011883a 	mov	r8,zero
  80d364:	00800434 	movhi	r2,16
  80d368:	10bfffc4 	addi	r2,r2,-1
  80d36c:	301d883a 	mov	r14,r6
  80d370:	3884703a 	and	r2,r7,r2
  80d374:	400a953a 	slli	r5,r8,20
  80d378:	79bffc2c 	andhi	r6,r15,65520
  80d37c:	308cb03a 	or	r6,r6,r2
  80d380:	00e00434 	movhi	r3,32784
  80d384:	18ffffc4 	addi	r3,r3,-1
  80d388:	800497fa 	slli	r2,r16,31
  80d38c:	30c6703a 	and	r3,r6,r3
  80d390:	1946b03a 	or	r3,r3,r5
  80d394:	01600034 	movhi	r5,32768
  80d398:	297fffc4 	addi	r5,r5,-1
  80d39c:	194a703a 	and	r5,r3,r5
  80d3a0:	288ab03a 	or	r5,r5,r2
  80d3a4:	2807883a 	mov	r3,r5
  80d3a8:	7005883a 	mov	r2,r14
  80d3ac:	dc800217 	ldw	r18,8(sp)
  80d3b0:	dc400117 	ldw	r17,4(sp)
  80d3b4:	dc000017 	ldw	r16,0(sp)
  80d3b8:	dec00304 	addi	sp,sp,12
  80d3bc:	f800283a 	ret
  80d3c0:	21000217 	ldw	r4,8(r4)
  80d3c4:	00bf0084 	movi	r2,-1022
  80d3c8:	20803f16 	blt	r4,r2,80d4c8 <__pack_d+0x1b4>
  80d3cc:	0080ffc4 	movi	r2,1023
  80d3d0:	11002c16 	blt	r2,r4,80d484 <__pack_d+0x170>
  80d3d4:	00803fc4 	movi	r2,255
  80d3d8:	408c703a 	and	r6,r8,r2
  80d3dc:	00802004 	movi	r2,128
  80d3e0:	0007883a 	mov	r3,zero
  80d3e4:	000f883a 	mov	r7,zero
  80d3e8:	2280ffc4 	addi	r10,r4,1023
  80d3ec:	30801e26 	beq	r6,r2,80d468 <__pack_d+0x154>
  80d3f0:	00801fc4 	movi	r2,127
  80d3f4:	4089883a 	add	r4,r8,r2
  80d3f8:	220d803a 	cmpltu	r6,r4,r8
  80d3fc:	324d883a 	add	r6,r6,r9
  80d400:	2011883a 	mov	r8,r4
  80d404:	3013883a 	mov	r9,r6
  80d408:	00880034 	movhi	r2,8192
  80d40c:	10bfffc4 	addi	r2,r2,-1
  80d410:	12400d36 	bltu	r2,r9,80d448 <__pack_d+0x134>
  80d414:	4804963a 	slli	r2,r9,24
  80d418:	400cd23a 	srli	r6,r8,8
  80d41c:	480ed23a 	srli	r7,r9,8
  80d420:	013fffc4 	movi	r4,-1
  80d424:	118cb03a 	or	r6,r2,r6
  80d428:	01400434 	movhi	r5,16
  80d42c:	297fffc4 	addi	r5,r5,-1
  80d430:	3104703a 	and	r2,r6,r4
  80d434:	3946703a 	and	r3,r7,r5
  80d438:	5201ffcc 	andi	r8,r10,2047
  80d43c:	100d883a 	mov	r6,r2
  80d440:	180f883a 	mov	r7,r3
  80d444:	003fc706 	br	80d364 <__pack_d+0x50>
  80d448:	480897fa 	slli	r4,r9,31
  80d44c:	4004d07a 	srli	r2,r8,1
  80d450:	4806d07a 	srli	r3,r9,1
  80d454:	52800044 	addi	r10,r10,1
  80d458:	2084b03a 	or	r2,r4,r2
  80d45c:	1011883a 	mov	r8,r2
  80d460:	1813883a 	mov	r9,r3
  80d464:	003feb06 	br	80d414 <__pack_d+0x100>
  80d468:	383fe11e 	bne	r7,zero,80d3f0 <__pack_d+0xdc>
  80d46c:	01004004 	movi	r4,256
  80d470:	4104703a 	and	r2,r8,r4
  80d474:	10c4b03a 	or	r2,r2,r3
  80d478:	103fe326 	beq	r2,zero,80d408 <__pack_d+0xf4>
  80d47c:	3005883a 	mov	r2,r6
  80d480:	003fdc06 	br	80d3f4 <__pack_d+0xe0>
  80d484:	000d883a 	mov	r6,zero
  80d488:	000f883a 	mov	r7,zero
  80d48c:	0201ffc4 	movi	r8,2047
  80d490:	003fb406 	br	80d364 <__pack_d+0x50>
  80d494:	0005883a 	mov	r2,zero
  80d498:	00c00234 	movhi	r3,8
  80d49c:	408cb03a 	or	r6,r8,r2
  80d4a0:	48ceb03a 	or	r7,r9,r3
  80d4a4:	013fffc4 	movi	r4,-1
  80d4a8:	01400434 	movhi	r5,16
  80d4ac:	297fffc4 	addi	r5,r5,-1
  80d4b0:	3104703a 	and	r2,r6,r4
  80d4b4:	3946703a 	and	r3,r7,r5
  80d4b8:	100d883a 	mov	r6,r2
  80d4bc:	180f883a 	mov	r7,r3
  80d4c0:	0201ffc4 	movi	r8,2047
  80d4c4:	003fa706 	br	80d364 <__pack_d+0x50>
  80d4c8:	1109c83a 	sub	r4,r2,r4
  80d4cc:	00800e04 	movi	r2,56
  80d4d0:	11004316 	blt	r2,r4,80d5e0 <__pack_d+0x2cc>
  80d4d4:	21fff804 	addi	r7,r4,-32
  80d4d8:	38004516 	blt	r7,zero,80d5f0 <__pack_d+0x2dc>
  80d4dc:	49d8d83a 	srl	r12,r9,r7
  80d4e0:	001b883a 	mov	r13,zero
  80d4e4:	0023883a 	mov	r17,zero
  80d4e8:	01400044 	movi	r5,1
  80d4ec:	0025883a 	mov	r18,zero
  80d4f0:	38004716 	blt	r7,zero,80d610 <__pack_d+0x2fc>
  80d4f4:	29d6983a 	sll	r11,r5,r7
  80d4f8:	0015883a 	mov	r10,zero
  80d4fc:	00bfffc4 	movi	r2,-1
  80d500:	5089883a 	add	r4,r10,r2
  80d504:	588b883a 	add	r5,r11,r2
  80d508:	228d803a 	cmpltu	r6,r4,r10
  80d50c:	314b883a 	add	r5,r6,r5
  80d510:	4104703a 	and	r2,r8,r4
  80d514:	4946703a 	and	r3,r9,r5
  80d518:	10c4b03a 	or	r2,r2,r3
  80d51c:	10000226 	beq	r2,zero,80d528 <__pack_d+0x214>
  80d520:	04400044 	movi	r17,1
  80d524:	0025883a 	mov	r18,zero
  80d528:	00803fc4 	movi	r2,255
  80d52c:	644eb03a 	or	r7,r12,r17
  80d530:	3892703a 	and	r9,r7,r2
  80d534:	00802004 	movi	r2,128
  80d538:	6c90b03a 	or	r8,r13,r18
  80d53c:	0015883a 	mov	r10,zero
  80d540:	48801626 	beq	r9,r2,80d59c <__pack_d+0x288>
  80d544:	01001fc4 	movi	r4,127
  80d548:	3905883a 	add	r2,r7,r4
  80d54c:	11cd803a 	cmpltu	r6,r2,r7
  80d550:	320d883a 	add	r6,r6,r8
  80d554:	100f883a 	mov	r7,r2
  80d558:	00840034 	movhi	r2,4096
  80d55c:	10bfffc4 	addi	r2,r2,-1
  80d560:	3011883a 	mov	r8,r6
  80d564:	0007883a 	mov	r3,zero
  80d568:	11801b36 	bltu	r2,r6,80d5d8 <__pack_d+0x2c4>
  80d56c:	4004963a 	slli	r2,r8,24
  80d570:	3808d23a 	srli	r4,r7,8
  80d574:	400ad23a 	srli	r5,r8,8
  80d578:	1813883a 	mov	r9,r3
  80d57c:	1108b03a 	or	r4,r2,r4
  80d580:	00bfffc4 	movi	r2,-1
  80d584:	00c00434 	movhi	r3,16
  80d588:	18ffffc4 	addi	r3,r3,-1
  80d58c:	208c703a 	and	r6,r4,r2
  80d590:	28ce703a 	and	r7,r5,r3
  80d594:	4a01ffcc 	andi	r8,r9,2047
  80d598:	003f7206 	br	80d364 <__pack_d+0x50>
  80d59c:	503fe91e 	bne	r10,zero,80d544 <__pack_d+0x230>
  80d5a0:	01004004 	movi	r4,256
  80d5a4:	3904703a 	and	r2,r7,r4
  80d5a8:	0007883a 	mov	r3,zero
  80d5ac:	10c4b03a 	or	r2,r2,r3
  80d5b0:	10000626 	beq	r2,zero,80d5cc <__pack_d+0x2b8>
  80d5b4:	3a45883a 	add	r2,r7,r9
  80d5b8:	11cd803a 	cmpltu	r6,r2,r7
  80d5bc:	320d883a 	add	r6,r6,r8
  80d5c0:	100f883a 	mov	r7,r2
  80d5c4:	3011883a 	mov	r8,r6
  80d5c8:	0007883a 	mov	r3,zero
  80d5cc:	00840034 	movhi	r2,4096
  80d5d0:	10bfffc4 	addi	r2,r2,-1
  80d5d4:	123fe52e 	bgeu	r2,r8,80d56c <__pack_d+0x258>
  80d5d8:	00c00044 	movi	r3,1
  80d5dc:	003fe306 	br	80d56c <__pack_d+0x258>
  80d5e0:	0009883a 	mov	r4,zero
  80d5e4:	0013883a 	mov	r9,zero
  80d5e8:	000b883a 	mov	r5,zero
  80d5ec:	003fe406 	br	80d580 <__pack_d+0x26c>
  80d5f0:	4a47883a 	add	r3,r9,r9
  80d5f4:	008007c4 	movi	r2,31
  80d5f8:	1105c83a 	sub	r2,r2,r4
  80d5fc:	1886983a 	sll	r3,r3,r2
  80d600:	4118d83a 	srl	r12,r8,r4
  80d604:	491ad83a 	srl	r13,r9,r4
  80d608:	1b18b03a 	or	r12,r3,r12
  80d60c:	003fb506 	br	80d4e4 <__pack_d+0x1d0>
  80d610:	2806d07a 	srli	r3,r5,1
  80d614:	008007c4 	movi	r2,31
  80d618:	1105c83a 	sub	r2,r2,r4
  80d61c:	1896d83a 	srl	r11,r3,r2
  80d620:	2914983a 	sll	r10,r5,r4
  80d624:	003fb506 	br	80d4fc <__pack_d+0x1e8>

0080d628 <__unpack_d>:
  80d628:	20c00117 	ldw	r3,4(r4)
  80d62c:	22400017 	ldw	r9,0(r4)
  80d630:	00800434 	movhi	r2,16
  80d634:	10bfffc4 	addi	r2,r2,-1
  80d638:	1808d53a 	srli	r4,r3,20
  80d63c:	180cd7fa 	srli	r6,r3,31
  80d640:	1894703a 	and	r10,r3,r2
  80d644:	2201ffcc 	andi	r8,r4,2047
  80d648:	281b883a 	mov	r13,r5
  80d64c:	4817883a 	mov	r11,r9
  80d650:	29800115 	stw	r6,4(r5)
  80d654:	5019883a 	mov	r12,r10
  80d658:	40001e1e 	bne	r8,zero,80d6d4 <__unpack_d+0xac>
  80d65c:	4a84b03a 	or	r2,r9,r10
  80d660:	10001926 	beq	r2,zero,80d6c8 <__unpack_d+0xa0>
  80d664:	4804d63a 	srli	r2,r9,24
  80d668:	500c923a 	slli	r6,r10,8
  80d66c:	013f0084 	movi	r4,-1022
  80d670:	00c40034 	movhi	r3,4096
  80d674:	18ffffc4 	addi	r3,r3,-1
  80d678:	118cb03a 	or	r6,r2,r6
  80d67c:	008000c4 	movi	r2,3
  80d680:	480a923a 	slli	r5,r9,8
  80d684:	68800015 	stw	r2,0(r13)
  80d688:	69000215 	stw	r4,8(r13)
  80d68c:	19800b36 	bltu	r3,r6,80d6bc <__unpack_d+0x94>
  80d690:	200f883a 	mov	r7,r4
  80d694:	1811883a 	mov	r8,r3
  80d698:	2945883a 	add	r2,r5,r5
  80d69c:	1149803a 	cmpltu	r4,r2,r5
  80d6a0:	3187883a 	add	r3,r6,r6
  80d6a4:	20c9883a 	add	r4,r4,r3
  80d6a8:	100b883a 	mov	r5,r2
  80d6ac:	200d883a 	mov	r6,r4
  80d6b0:	39ffffc4 	addi	r7,r7,-1
  80d6b4:	413ff82e 	bgeu	r8,r4,80d698 <__unpack_d+0x70>
  80d6b8:	69c00215 	stw	r7,8(r13)
  80d6bc:	69800415 	stw	r6,16(r13)
  80d6c0:	69400315 	stw	r5,12(r13)
  80d6c4:	f800283a 	ret
  80d6c8:	00800084 	movi	r2,2
  80d6cc:	28800015 	stw	r2,0(r5)
  80d6d0:	f800283a 	ret
  80d6d4:	0081ffc4 	movi	r2,2047
  80d6d8:	40800f26 	beq	r8,r2,80d718 <__unpack_d+0xf0>
  80d6dc:	480cd63a 	srli	r6,r9,24
  80d6e0:	5006923a 	slli	r3,r10,8
  80d6e4:	4804923a 	slli	r2,r9,8
  80d6e8:	0009883a 	mov	r4,zero
  80d6ec:	30c6b03a 	or	r3,r6,r3
  80d6f0:	01440034 	movhi	r5,4096
  80d6f4:	110cb03a 	or	r6,r2,r4
  80d6f8:	423f0044 	addi	r8,r8,-1023
  80d6fc:	194eb03a 	or	r7,r3,r5
  80d700:	008000c4 	movi	r2,3
  80d704:	69c00415 	stw	r7,16(r13)
  80d708:	6a000215 	stw	r8,8(r13)
  80d70c:	68800015 	stw	r2,0(r13)
  80d710:	69800315 	stw	r6,12(r13)
  80d714:	f800283a 	ret
  80d718:	4a84b03a 	or	r2,r9,r10
  80d71c:	1000031e 	bne	r2,zero,80d72c <__unpack_d+0x104>
  80d720:	00800104 	movi	r2,4
  80d724:	28800015 	stw	r2,0(r5)
  80d728:	f800283a 	ret
  80d72c:	0009883a 	mov	r4,zero
  80d730:	01400234 	movhi	r5,8
  80d734:	4904703a 	and	r2,r9,r4
  80d738:	5146703a 	and	r3,r10,r5
  80d73c:	10c4b03a 	or	r2,r2,r3
  80d740:	10000526 	beq	r2,zero,80d758 <__unpack_d+0x130>
  80d744:	00800044 	movi	r2,1
  80d748:	68800015 	stw	r2,0(r13)
  80d74c:	6b000415 	stw	r12,16(r13)
  80d750:	6ac00315 	stw	r11,12(r13)
  80d754:	f800283a 	ret
  80d758:	68000015 	stw	zero,0(r13)
  80d75c:	003ffb06 	br	80d74c <__unpack_d+0x124>

0080d760 <__fpcmp_parts_d>:
  80d760:	21800017 	ldw	r6,0(r4)
  80d764:	00c00044 	movi	r3,1
  80d768:	19800a2e 	bgeu	r3,r6,80d794 <__fpcmp_parts_d+0x34>
  80d76c:	28800017 	ldw	r2,0(r5)
  80d770:	1880082e 	bgeu	r3,r2,80d794 <__fpcmp_parts_d+0x34>
  80d774:	00c00104 	movi	r3,4
  80d778:	30c02626 	beq	r6,r3,80d814 <__fpcmp_parts_d+0xb4>
  80d77c:	10c02226 	beq	r2,r3,80d808 <__fpcmp_parts_d+0xa8>
  80d780:	00c00084 	movi	r3,2
  80d784:	30c00526 	beq	r6,r3,80d79c <__fpcmp_parts_d+0x3c>
  80d788:	10c0071e 	bne	r2,r3,80d7a8 <__fpcmp_parts_d+0x48>
  80d78c:	20800117 	ldw	r2,4(r4)
  80d790:	1000091e 	bne	r2,zero,80d7b8 <__fpcmp_parts_d+0x58>
  80d794:	00800044 	movi	r2,1
  80d798:	f800283a 	ret
  80d79c:	10c01a1e 	bne	r2,r3,80d808 <__fpcmp_parts_d+0xa8>
  80d7a0:	0005883a 	mov	r2,zero
  80d7a4:	f800283a 	ret
  80d7a8:	22000117 	ldw	r8,4(r4)
  80d7ac:	28800117 	ldw	r2,4(r5)
  80d7b0:	40800326 	beq	r8,r2,80d7c0 <__fpcmp_parts_d+0x60>
  80d7b4:	403ff726 	beq	r8,zero,80d794 <__fpcmp_parts_d+0x34>
  80d7b8:	00bfffc4 	movi	r2,-1
  80d7bc:	f800283a 	ret
  80d7c0:	20c00217 	ldw	r3,8(r4)
  80d7c4:	28800217 	ldw	r2,8(r5)
  80d7c8:	10fffa16 	blt	r2,r3,80d7b4 <__fpcmp_parts_d+0x54>
  80d7cc:	18800916 	blt	r3,r2,80d7f4 <__fpcmp_parts_d+0x94>
  80d7d0:	21c00417 	ldw	r7,16(r4)
  80d7d4:	28c00417 	ldw	r3,16(r5)
  80d7d8:	21800317 	ldw	r6,12(r4)
  80d7dc:	28800317 	ldw	r2,12(r5)
  80d7e0:	19fff436 	bltu	r3,r7,80d7b4 <__fpcmp_parts_d+0x54>
  80d7e4:	38c00526 	beq	r7,r3,80d7fc <__fpcmp_parts_d+0x9c>
  80d7e8:	38c00236 	bltu	r7,r3,80d7f4 <__fpcmp_parts_d+0x94>
  80d7ec:	19ffec1e 	bne	r3,r7,80d7a0 <__fpcmp_parts_d+0x40>
  80d7f0:	30bfeb2e 	bgeu	r6,r2,80d7a0 <__fpcmp_parts_d+0x40>
  80d7f4:	403fe71e 	bne	r8,zero,80d794 <__fpcmp_parts_d+0x34>
  80d7f8:	003fef06 	br	80d7b8 <__fpcmp_parts_d+0x58>
  80d7fc:	11bffa2e 	bgeu	r2,r6,80d7e8 <__fpcmp_parts_d+0x88>
  80d800:	403fe426 	beq	r8,zero,80d794 <__fpcmp_parts_d+0x34>
  80d804:	003fec06 	br	80d7b8 <__fpcmp_parts_d+0x58>
  80d808:	28800117 	ldw	r2,4(r5)
  80d80c:	103fe11e 	bne	r2,zero,80d794 <__fpcmp_parts_d+0x34>
  80d810:	003fe906 	br	80d7b8 <__fpcmp_parts_d+0x58>
  80d814:	11bfdd1e 	bne	r2,r6,80d78c <__fpcmp_parts_d+0x2c>
  80d818:	28c00117 	ldw	r3,4(r5)
  80d81c:	20800117 	ldw	r2,4(r4)
  80d820:	1885c83a 	sub	r2,r3,r2
  80d824:	f800283a 	ret

0080d828 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d828:	defff804 	addi	sp,sp,-32
  80d82c:	dfc00715 	stw	ra,28(sp)
  80d830:	df000615 	stw	fp,24(sp)
  80d834:	df000604 	addi	fp,sp,24
  80d838:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d83c:	e0bffc17 	ldw	r2,-16(fp)
  80d840:	1004803a 	cmplt	r2,r2,zero
  80d844:	1000081e 	bne	r2,zero,80d868 <close+0x40>
  80d848:	e0bffc17 	ldw	r2,-16(fp)
  80d84c:	10800324 	muli	r2,r2,12
  80d850:	1007883a 	mov	r3,r2
  80d854:	00802074 	movhi	r2,129
  80d858:	1088b204 	addi	r2,r2,8904
  80d85c:	1887883a 	add	r3,r3,r2
  80d860:	e0ffff15 	stw	r3,-4(fp)
  80d864:	00000106 	br	80d86c <close+0x44>
  80d868:	e03fff15 	stw	zero,-4(fp)
  80d86c:	e0bfff17 	ldw	r2,-4(fp)
  80d870:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80d874:	e0bffb17 	ldw	r2,-20(fp)
  80d878:	1005003a 	cmpeq	r2,r2,zero
  80d87c:	10001d1e 	bne	r2,zero,80d8f4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d880:	e0bffb17 	ldw	r2,-20(fp)
  80d884:	10800017 	ldw	r2,0(r2)
  80d888:	10800417 	ldw	r2,16(r2)
  80d88c:	1005003a 	cmpeq	r2,r2,zero
  80d890:	1000071e 	bne	r2,zero,80d8b0 <close+0x88>
  80d894:	e0bffb17 	ldw	r2,-20(fp)
  80d898:	10800017 	ldw	r2,0(r2)
  80d89c:	10800417 	ldw	r2,16(r2)
  80d8a0:	e13ffb17 	ldw	r4,-20(fp)
  80d8a4:	103ee83a 	callr	r2
  80d8a8:	e0bffe15 	stw	r2,-8(fp)
  80d8ac:	00000106 	br	80d8b4 <close+0x8c>
  80d8b0:	e03ffe15 	stw	zero,-8(fp)
  80d8b4:	e0bffe17 	ldw	r2,-8(fp)
  80d8b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d8bc:	e13ffc17 	ldw	r4,-16(fp)
  80d8c0:	080e44c0 	call	80e44c <alt_release_fd>
    if (rval < 0)
  80d8c4:	e0bffa17 	ldw	r2,-24(fp)
  80d8c8:	1004403a 	cmpge	r2,r2,zero
  80d8cc:	1000071e 	bne	r2,zero,80d8ec <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80d8d0:	080d9240 	call	80d924 <alt_get_errno>
  80d8d4:	e0fffa17 	ldw	r3,-24(fp)
  80d8d8:	00c7c83a 	sub	r3,zero,r3
  80d8dc:	10c00015 	stw	r3,0(r2)
      return -1;
  80d8e0:	00bfffc4 	movi	r2,-1
  80d8e4:	e0bffd15 	stw	r2,-12(fp)
  80d8e8:	00000806 	br	80d90c <close+0xe4>
    }
    return 0;
  80d8ec:	e03ffd15 	stw	zero,-12(fp)
  80d8f0:	00000606 	br	80d90c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d8f4:	080d9240 	call	80d924 <alt_get_errno>
  80d8f8:	1007883a 	mov	r3,r2
  80d8fc:	00801444 	movi	r2,81
  80d900:	18800015 	stw	r2,0(r3)
    return -1;
  80d904:	00bfffc4 	movi	r2,-1
  80d908:	e0bffd15 	stw	r2,-12(fp)
  80d90c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80d910:	e037883a 	mov	sp,fp
  80d914:	dfc00117 	ldw	ra,4(sp)
  80d918:	df000017 	ldw	fp,0(sp)
  80d91c:	dec00204 	addi	sp,sp,8
  80d920:	f800283a 	ret

0080d924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d924:	defffd04 	addi	sp,sp,-12
  80d928:	dfc00215 	stw	ra,8(sp)
  80d92c:	df000115 	stw	fp,4(sp)
  80d930:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d934:	00802074 	movhi	r2,129
  80d938:	108dd404 	addi	r2,r2,14160
  80d93c:	10800017 	ldw	r2,0(r2)
  80d940:	1005003a 	cmpeq	r2,r2,zero
  80d944:	1000061e 	bne	r2,zero,80d960 <alt_get_errno+0x3c>
  80d948:	00802074 	movhi	r2,129
  80d94c:	108dd404 	addi	r2,r2,14160
  80d950:	10800017 	ldw	r2,0(r2)
  80d954:	103ee83a 	callr	r2
  80d958:	e0bfff15 	stw	r2,-4(fp)
  80d95c:	00000306 	br	80d96c <alt_get_errno+0x48>
  80d960:	00802074 	movhi	r2,129
  80d964:	10951704 	addi	r2,r2,21596
  80d968:	e0bfff15 	stw	r2,-4(fp)
  80d96c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d970:	e037883a 	mov	sp,fp
  80d974:	dfc00117 	ldw	ra,4(sp)
  80d978:	df000017 	ldw	fp,0(sp)
  80d97c:	dec00204 	addi	sp,sp,8
  80d980:	f800283a 	ret

0080d984 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d984:	defffc04 	addi	sp,sp,-16
  80d988:	df000315 	stw	fp,12(sp)
  80d98c:	df000304 	addi	fp,sp,12
  80d990:	e13ffd15 	stw	r4,-12(fp)
  80d994:	e17ffe15 	stw	r5,-8(fp)
  80d998:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d99c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d9a0:	e037883a 	mov	sp,fp
  80d9a4:	df000017 	ldw	fp,0(sp)
  80d9a8:	dec00104 	addi	sp,sp,4
  80d9ac:	f800283a 	ret

0080d9b0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80d9b0:	defffd04 	addi	sp,sp,-12
  80d9b4:	df000215 	stw	fp,8(sp)
  80d9b8:	df000204 	addi	fp,sp,8
  80d9bc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80d9c0:	e0bfff17 	ldw	r2,-4(fp)
  80d9c4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d9c8:	e0bffe17 	ldw	r2,-8(fp)
  80d9cc:	1005003a 	cmpeq	r2,r2,zero
  80d9d0:	1000021e 	bne	r2,zero,80d9dc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80d9d4:	002af070 	cmpltui	zero,zero,43969
  80d9d8:	00000106 	br	80d9e0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80d9dc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80d9e0:	e037883a 	mov	sp,fp
  80d9e4:	df000017 	ldw	fp,0(sp)
  80d9e8:	dec00104 	addi	sp,sp,4
  80d9ec:	f800283a 	ret

0080d9f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d9f0:	defffd04 	addi	sp,sp,-12
  80d9f4:	dfc00215 	stw	ra,8(sp)
  80d9f8:	df000115 	stw	fp,4(sp)
  80d9fc:	df000104 	addi	fp,sp,4
  80da00:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80da04:	e13fff17 	ldw	r4,-4(fp)
  80da08:	080d9b00 	call	80d9b0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80da0c:	003fff06 	br	80da0c <_exit+0x1c>

0080da10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80da10:	defff904 	addi	sp,sp,-28
  80da14:	dfc00615 	stw	ra,24(sp)
  80da18:	df000515 	stw	fp,20(sp)
  80da1c:	df000504 	addi	fp,sp,20
  80da20:	e13ffc15 	stw	r4,-16(fp)
  80da24:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80da28:	e0bffc17 	ldw	r2,-16(fp)
  80da2c:	1004803a 	cmplt	r2,r2,zero
  80da30:	1000081e 	bne	r2,zero,80da54 <fstat+0x44>
  80da34:	e0bffc17 	ldw	r2,-16(fp)
  80da38:	10800324 	muli	r2,r2,12
  80da3c:	1007883a 	mov	r3,r2
  80da40:	00802074 	movhi	r2,129
  80da44:	1088b204 	addi	r2,r2,8904
  80da48:	1887883a 	add	r3,r3,r2
  80da4c:	e0ffff15 	stw	r3,-4(fp)
  80da50:	00000106 	br	80da58 <fstat+0x48>
  80da54:	e03fff15 	stw	zero,-4(fp)
  80da58:	e0bfff17 	ldw	r2,-4(fp)
  80da5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80da60:	e0bffb17 	ldw	r2,-20(fp)
  80da64:	1005003a 	cmpeq	r2,r2,zero
  80da68:	1000121e 	bne	r2,zero,80dab4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80da6c:	e0bffb17 	ldw	r2,-20(fp)
  80da70:	10800017 	ldw	r2,0(r2)
  80da74:	10800817 	ldw	r2,32(r2)
  80da78:	1005003a 	cmpeq	r2,r2,zero
  80da7c:	1000081e 	bne	r2,zero,80daa0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80da80:	e0bffb17 	ldw	r2,-20(fp)
  80da84:	10800017 	ldw	r2,0(r2)
  80da88:	10800817 	ldw	r2,32(r2)
  80da8c:	e13ffb17 	ldw	r4,-20(fp)
  80da90:	e17ffd17 	ldw	r5,-12(fp)
  80da94:	103ee83a 	callr	r2
  80da98:	e0bffe15 	stw	r2,-8(fp)
  80da9c:	00000b06 	br	80dacc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80daa0:	e0fffd17 	ldw	r3,-12(fp)
  80daa4:	00880004 	movi	r2,8192
  80daa8:	18800115 	stw	r2,4(r3)
      return 0;
  80daac:	e03ffe15 	stw	zero,-8(fp)
  80dab0:	00000606 	br	80dacc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dab4:	080dae40 	call	80dae4 <alt_get_errno>
  80dab8:	1007883a 	mov	r3,r2
  80dabc:	00801444 	movi	r2,81
  80dac0:	18800015 	stw	r2,0(r3)
    return -1;
  80dac4:	00bfffc4 	movi	r2,-1
  80dac8:	e0bffe15 	stw	r2,-8(fp)
  80dacc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80dad0:	e037883a 	mov	sp,fp
  80dad4:	dfc00117 	ldw	ra,4(sp)
  80dad8:	df000017 	ldw	fp,0(sp)
  80dadc:	dec00204 	addi	sp,sp,8
  80dae0:	f800283a 	ret

0080dae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dae4:	defffd04 	addi	sp,sp,-12
  80dae8:	dfc00215 	stw	ra,8(sp)
  80daec:	df000115 	stw	fp,4(sp)
  80daf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80daf4:	00802074 	movhi	r2,129
  80daf8:	108dd404 	addi	r2,r2,14160
  80dafc:	10800017 	ldw	r2,0(r2)
  80db00:	1005003a 	cmpeq	r2,r2,zero
  80db04:	1000061e 	bne	r2,zero,80db20 <alt_get_errno+0x3c>
  80db08:	00802074 	movhi	r2,129
  80db0c:	108dd404 	addi	r2,r2,14160
  80db10:	10800017 	ldw	r2,0(r2)
  80db14:	103ee83a 	callr	r2
  80db18:	e0bfff15 	stw	r2,-4(fp)
  80db1c:	00000306 	br	80db2c <alt_get_errno+0x48>
  80db20:	00802074 	movhi	r2,129
  80db24:	10951704 	addi	r2,r2,21596
  80db28:	e0bfff15 	stw	r2,-4(fp)
  80db2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80db30:	e037883a 	mov	sp,fp
  80db34:	dfc00117 	ldw	ra,4(sp)
  80db38:	df000017 	ldw	fp,0(sp)
  80db3c:	dec00204 	addi	sp,sp,8
  80db40:	f800283a 	ret

0080db44 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80db44:	deffff04 	addi	sp,sp,-4
  80db48:	df000015 	stw	fp,0(sp)
  80db4c:	d839883a 	mov	fp,sp
  return 0;
  80db50:	0005883a 	mov	r2,zero
}
  80db54:	e037883a 	mov	sp,fp
  80db58:	df000017 	ldw	fp,0(sp)
  80db5c:	dec00104 	addi	sp,sp,4
  80db60:	f800283a 	ret

0080db64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80db64:	deffef04 	addi	sp,sp,-68
  80db68:	df001015 	stw	fp,64(sp)
  80db6c:	df001004 	addi	fp,sp,64
  80db70:	e13ffc15 	stw	r4,-16(fp)
  80db74:	e17ffd15 	stw	r5,-12(fp)
  80db78:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80db7c:	00bffa84 	movi	r2,-22
  80db80:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80db84:	e0bffc17 	ldw	r2,-16(fp)
  80db88:	10800828 	cmpgeui	r2,r2,32
  80db8c:	1000601e 	bne	r2,zero,80dd10 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db90:	0005303a 	rdctl	r2,status
  80db94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db98:	e0fff917 	ldw	r3,-28(fp)
  80db9c:	00bfff84 	movi	r2,-2
  80dba0:	1884703a 	and	r2,r3,r2
  80dba4:	1001703a 	wrctl	status,r2
  
  return context;
  80dba8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80dbac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80dbb0:	e0bffc17 	ldw	r2,-16(fp)
  80dbb4:	00c02074 	movhi	r3,129
  80dbb8:	18d72b04 	addi	r3,r3,23724
  80dbbc:	100490fa 	slli	r2,r2,3
  80dbc0:	10c7883a 	add	r3,r2,r3
  80dbc4:	e0bffe17 	ldw	r2,-8(fp)
  80dbc8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80dbcc:	e0bffc17 	ldw	r2,-16(fp)
  80dbd0:	00c02074 	movhi	r3,129
  80dbd4:	18d72b04 	addi	r3,r3,23724
  80dbd8:	100490fa 	slli	r2,r2,3
  80dbdc:	10c5883a 	add	r2,r2,r3
  80dbe0:	10c00104 	addi	r3,r2,4
  80dbe4:	e0bffd17 	ldw	r2,-12(fp)
  80dbe8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80dbec:	e0bffe17 	ldw	r2,-8(fp)
  80dbf0:	1005003a 	cmpeq	r2,r2,zero
  80dbf4:	1000201e 	bne	r2,zero,80dc78 <alt_irq_register+0x114>
  80dbf8:	e0bffc17 	ldw	r2,-16(fp)
  80dbfc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc00:	0005303a 	rdctl	r2,status
  80dc04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc08:	e0fff617 	ldw	r3,-40(fp)
  80dc0c:	00bfff84 	movi	r2,-2
  80dc10:	1884703a 	and	r2,r3,r2
  80dc14:	1001703a 	wrctl	status,r2
  
  return context;
  80dc18:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80dc1c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80dc20:	e0fff717 	ldw	r3,-36(fp)
  80dc24:	00800044 	movi	r2,1
  80dc28:	10c4983a 	sll	r2,r2,r3
  80dc2c:	1007883a 	mov	r3,r2
  80dc30:	00802074 	movhi	r2,129
  80dc34:	10951b04 	addi	r2,r2,21612
  80dc38:	10800017 	ldw	r2,0(r2)
  80dc3c:	1886b03a 	or	r3,r3,r2
  80dc40:	00802074 	movhi	r2,129
  80dc44:	10951b04 	addi	r2,r2,21612
  80dc48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dc4c:	00802074 	movhi	r2,129
  80dc50:	10951b04 	addi	r2,r2,21612
  80dc54:	10800017 	ldw	r2,0(r2)
  80dc58:	100170fa 	wrctl	ienable,r2
  80dc5c:	e0bff817 	ldw	r2,-32(fp)
  80dc60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc64:	e0bff517 	ldw	r2,-44(fp)
  80dc68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dc6c:	0005883a 	mov	r2,zero
  80dc70:	e0bfff15 	stw	r2,-4(fp)
  80dc74:	00002006 	br	80dcf8 <alt_irq_register+0x194>
  80dc78:	e0bffc17 	ldw	r2,-16(fp)
  80dc7c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc80:	0005303a 	rdctl	r2,status
  80dc84:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc88:	e0fff217 	ldw	r3,-56(fp)
  80dc8c:	00bfff84 	movi	r2,-2
  80dc90:	1884703a 	and	r2,r3,r2
  80dc94:	1001703a 	wrctl	status,r2
  
  return context;
  80dc98:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80dc9c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80dca0:	e0fff317 	ldw	r3,-52(fp)
  80dca4:	00800044 	movi	r2,1
  80dca8:	10c4983a 	sll	r2,r2,r3
  80dcac:	0084303a 	nor	r2,zero,r2
  80dcb0:	1007883a 	mov	r3,r2
  80dcb4:	00802074 	movhi	r2,129
  80dcb8:	10951b04 	addi	r2,r2,21612
  80dcbc:	10800017 	ldw	r2,0(r2)
  80dcc0:	1886703a 	and	r3,r3,r2
  80dcc4:	00802074 	movhi	r2,129
  80dcc8:	10951b04 	addi	r2,r2,21612
  80dccc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80dcd0:	00802074 	movhi	r2,129
  80dcd4:	10951b04 	addi	r2,r2,21612
  80dcd8:	10800017 	ldw	r2,0(r2)
  80dcdc:	100170fa 	wrctl	ienable,r2
  80dce0:	e0bff417 	ldw	r2,-48(fp)
  80dce4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dce8:	e0bff117 	ldw	r2,-60(fp)
  80dcec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80dcf0:	0005883a 	mov	r2,zero
  80dcf4:	e0bfff15 	stw	r2,-4(fp)
  80dcf8:	e0bfff17 	ldw	r2,-4(fp)
  80dcfc:	e0bffb15 	stw	r2,-20(fp)
  80dd00:	e0bffa17 	ldw	r2,-24(fp)
  80dd04:	e0bff015 	stw	r2,-64(fp)
  80dd08:	e0bff017 	ldw	r2,-64(fp)
  80dd0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80dd10:	e0bffb17 	ldw	r2,-20(fp)
}
  80dd14:	e037883a 	mov	sp,fp
  80dd18:	df000017 	ldw	fp,0(sp)
  80dd1c:	dec00104 	addi	sp,sp,4
  80dd20:	f800283a 	ret

0080dd24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80dd24:	deffeb04 	addi	sp,sp,-84
  80dd28:	dfc01415 	stw	ra,80(sp)
  80dd2c:	df001315 	stw	fp,76(sp)
  80dd30:	df001304 	addi	fp,sp,76
  80dd34:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dd38:	e0bffd17 	ldw	r2,-12(fp)
  80dd3c:	1004803a 	cmplt	r2,r2,zero
  80dd40:	1000081e 	bne	r2,zero,80dd64 <isatty+0x40>
  80dd44:	e0bffd17 	ldw	r2,-12(fp)
  80dd48:	10800324 	muli	r2,r2,12
  80dd4c:	1007883a 	mov	r3,r2
  80dd50:	00802074 	movhi	r2,129
  80dd54:	1088b204 	addi	r2,r2,8904
  80dd58:	1887883a 	add	r3,r3,r2
  80dd5c:	e0ffff15 	stw	r3,-4(fp)
  80dd60:	00000106 	br	80dd68 <isatty+0x44>
  80dd64:	e03fff15 	stw	zero,-4(fp)
  80dd68:	e0bfff17 	ldw	r2,-4(fp)
  80dd6c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80dd70:	e0bfed17 	ldw	r2,-76(fp)
  80dd74:	1005003a 	cmpeq	r2,r2,zero
  80dd78:	10000f1e 	bne	r2,zero,80ddb8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80dd7c:	e0bfed17 	ldw	r2,-76(fp)
  80dd80:	10800017 	ldw	r2,0(r2)
  80dd84:	10800817 	ldw	r2,32(r2)
  80dd88:	1004c03a 	cmpne	r2,r2,zero
  80dd8c:	1000031e 	bne	r2,zero,80dd9c <isatty+0x78>
    {
      return 1;
  80dd90:	00800044 	movi	r2,1
  80dd94:	e0bffe15 	stw	r2,-8(fp)
  80dd98:	00000c06 	br	80ddcc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80dd9c:	e17fee04 	addi	r5,fp,-72
  80dda0:	e13ffd17 	ldw	r4,-12(fp)
  80dda4:	080da100 	call	80da10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80dda8:	e0bfef17 	ldw	r2,-68(fp)
  80ddac:	10880020 	cmpeqi	r2,r2,8192
  80ddb0:	e0bffe15 	stw	r2,-8(fp)
  80ddb4:	00000506 	br	80ddcc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ddb8:	080dde40 	call	80dde4 <alt_get_errno>
  80ddbc:	1007883a 	mov	r3,r2
  80ddc0:	00801444 	movi	r2,81
  80ddc4:	18800015 	stw	r2,0(r3)
    return 0;
  80ddc8:	e03ffe15 	stw	zero,-8(fp)
  80ddcc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ddd0:	e037883a 	mov	sp,fp
  80ddd4:	dfc00117 	ldw	ra,4(sp)
  80ddd8:	df000017 	ldw	fp,0(sp)
  80dddc:	dec00204 	addi	sp,sp,8
  80dde0:	f800283a 	ret

0080dde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dde4:	defffd04 	addi	sp,sp,-12
  80dde8:	dfc00215 	stw	ra,8(sp)
  80ddec:	df000115 	stw	fp,4(sp)
  80ddf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ddf4:	00802074 	movhi	r2,129
  80ddf8:	108dd404 	addi	r2,r2,14160
  80ddfc:	10800017 	ldw	r2,0(r2)
  80de00:	1005003a 	cmpeq	r2,r2,zero
  80de04:	1000061e 	bne	r2,zero,80de20 <alt_get_errno+0x3c>
  80de08:	00802074 	movhi	r2,129
  80de0c:	108dd404 	addi	r2,r2,14160
  80de10:	10800017 	ldw	r2,0(r2)
  80de14:	103ee83a 	callr	r2
  80de18:	e0bfff15 	stw	r2,-4(fp)
  80de1c:	00000306 	br	80de2c <alt_get_errno+0x48>
  80de20:	00802074 	movhi	r2,129
  80de24:	10951704 	addi	r2,r2,21596
  80de28:	e0bfff15 	stw	r2,-4(fp)
  80de2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80de30:	e037883a 	mov	sp,fp
  80de34:	dfc00117 	ldw	ra,4(sp)
  80de38:	df000017 	ldw	fp,0(sp)
  80de3c:	dec00204 	addi	sp,sp,8
  80de40:	f800283a 	ret

0080de44 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80de44:	defffa04 	addi	sp,sp,-24
  80de48:	dfc00515 	stw	ra,20(sp)
  80de4c:	df000415 	stw	fp,16(sp)
  80de50:	df000404 	addi	fp,sp,16
  80de54:	e13ffd15 	stw	r4,-12(fp)
  80de58:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
  80de5c:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
  80de60:	e0bffd17 	ldw	r2,-12(fp)
  80de64:	10800048 	cmpgei	r2,r2,1
  80de68:	1000301e 	bne	r2,zero,80df2c <kill+0xe8>
  {
    switch (sig)
  80de6c:	e0bffe17 	ldw	r2,-8(fp)
  80de70:	10800828 	cmpgeui	r2,r2,32
  80de74:	10002a1e 	bne	r2,zero,80df20 <kill+0xdc>
  80de78:	e0bffe17 	ldw	r2,-8(fp)
  80de7c:	1085883a 	add	r2,r2,r2
  80de80:	1087883a 	add	r3,r2,r2
  80de84:	00802074 	movhi	r2,129
  80de88:	10b7a604 	addi	r2,r2,-8552
  80de8c:	1885883a 	add	r2,r3,r2
  80de90:	10800017 	ldw	r2,0(r2)
  80de94:	1000683a 	jmp	r2
  80de98:	0080df40 	call	80df4 <__alt_mem_sdram_controller-0x77f20c>
  80de9c:	0080df20 	cmpeqi	r2,zero,892
  80dea0:	0080df20 	cmpeqi	r2,zero,892
  80dea4:	0080df18 	cmpnei	r2,zero,892
  80dea8:	0080df18 	cmpnei	r2,zero,892
  80deac:	0080df18 	cmpnei	r2,zero,892
  80deb0:	0080df18 	cmpnei	r2,zero,892
  80deb4:	0080df20 	cmpeqi	r2,zero,892
  80deb8:	0080df18 	cmpnei	r2,zero,892
  80debc:	0080df18 	cmpnei	r2,zero,892
  80dec0:	0080df18 	cmpnei	r2,zero,892
  80dec4:	0080df18 	cmpnei	r2,zero,892
  80dec8:	0080df18 	cmpnei	r2,zero,892
  80decc:	0080df18 	cmpnei	r2,zero,892
  80ded0:	0080df18 	cmpnei	r2,zero,892
  80ded4:	0080df18 	cmpnei	r2,zero,892
  80ded8:	0080df40 	call	80df4 <__alt_mem_sdram_controller-0x77f20c>
  80dedc:	0080df20 	cmpeqi	r2,zero,892
  80dee0:	0080df20 	cmpeqi	r2,zero,892
  80dee4:	0080df20 	cmpeqi	r2,zero,892
  80dee8:	0080df40 	call	80df4 <__alt_mem_sdram_controller-0x77f20c>
  80deec:	0080df20 	cmpeqi	r2,zero,892
  80def0:	0080df20 	cmpeqi	r2,zero,892
  80def4:	0080df18 	cmpnei	r2,zero,892
  80def8:	0080df18 	cmpnei	r2,zero,892
  80defc:	0080df18 	cmpnei	r2,zero,892
  80df00:	0080df18 	cmpnei	r2,zero,892
  80df04:	0080df18 	cmpnei	r2,zero,892
  80df08:	0080df20 	cmpeqi	r2,zero,892
  80df0c:	0080df20 	cmpeqi	r2,zero,892
  80df10:	0080df18 	cmpnei	r2,zero,892
  80df14:	0080df18 	cmpnei	r2,zero,892
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80df18:	0009883a 	mov	r4,zero
  80df1c:	080d9f00 	call	80d9f0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80df20:	00800584 	movi	r2,22
  80df24:	e0bffc15 	stw	r2,-16(fp)
  80df28:	00000506 	br	80df40 <kill+0xfc>
    }
  }

  else if (pid > 0)
  80df2c:	e0bffd17 	ldw	r2,-12(fp)
  80df30:	10800050 	cmplti	r2,r2,1
  80df34:	1000021e 	bne	r2,zero,80df40 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80df38:	008000c4 	movi	r2,3
  80df3c:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
  80df40:	e0bffc17 	ldw	r2,-16(fp)
  80df44:	1005003a 	cmpeq	r2,r2,zero
  80df48:	1000071e 	bne	r2,zero,80df68 <kill+0x124>
  {
    ALT_ERRNO = status;
  80df4c:	080df840 	call	80df84 <alt_get_errno>
  80df50:	1007883a 	mov	r3,r2
  80df54:	e0bffc17 	ldw	r2,-16(fp)
  80df58:	18800015 	stw	r2,0(r3)
    return -1;
  80df5c:	00bfffc4 	movi	r2,-1
  80df60:	e0bfff15 	stw	r2,-4(fp)
  80df64:	00000106 	br	80df6c <kill+0x128>
  }

  return 0;
  80df68:	e03fff15 	stw	zero,-4(fp)
  80df6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80df70:	e037883a 	mov	sp,fp
  80df74:	dfc00117 	ldw	ra,4(sp)
  80df78:	df000017 	ldw	fp,0(sp)
  80df7c:	dec00204 	addi	sp,sp,8
  80df80:	f800283a 	ret

0080df84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80df84:	defffd04 	addi	sp,sp,-12
  80df88:	dfc00215 	stw	ra,8(sp)
  80df8c:	df000115 	stw	fp,4(sp)
  80df90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80df94:	00802074 	movhi	r2,129
  80df98:	108dd404 	addi	r2,r2,14160
  80df9c:	10800017 	ldw	r2,0(r2)
  80dfa0:	1005003a 	cmpeq	r2,r2,zero
  80dfa4:	1000061e 	bne	r2,zero,80dfc0 <alt_get_errno+0x3c>
  80dfa8:	00802074 	movhi	r2,129
  80dfac:	108dd404 	addi	r2,r2,14160
  80dfb0:	10800017 	ldw	r2,0(r2)
  80dfb4:	103ee83a 	callr	r2
  80dfb8:	e0bfff15 	stw	r2,-4(fp)
  80dfbc:	00000306 	br	80dfcc <alt_get_errno+0x48>
  80dfc0:	00802074 	movhi	r2,129
  80dfc4:	10951704 	addi	r2,r2,21596
  80dfc8:	e0bfff15 	stw	r2,-4(fp)
  80dfcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80dfd0:	e037883a 	mov	sp,fp
  80dfd4:	dfc00117 	ldw	ra,4(sp)
  80dfd8:	df000017 	ldw	fp,0(sp)
  80dfdc:	dec00204 	addi	sp,sp,8
  80dfe0:	f800283a 	ret

0080dfe4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80dfe4:	defffe04 	addi	sp,sp,-8
  80dfe8:	dfc00115 	stw	ra,4(sp)
  80dfec:	df000015 	stw	fp,0(sp)
  80dff0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80dff4:	01002074 	movhi	r4,129
  80dff8:	210dd904 	addi	r4,r4,14180
  80dffc:	01402074 	movhi	r5,129
  80e000:	2946a304 	addi	r5,r5,6796
  80e004:	01802074 	movhi	r6,129
  80e008:	318dd904 	addi	r6,r6,14180
  80e00c:	080e0640 	call	80e064 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e010:	01002034 	movhi	r4,128
  80e014:	21000004 	addi	r4,r4,0
  80e018:	01404034 	movhi	r5,256
  80e01c:	29500804 	addi	r5,r5,16416
  80e020:	01804034 	movhi	r6,256
  80e024:	31906d04 	addi	r6,r6,16820
  80e028:	080e0640 	call	80e064 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e02c:	01002074 	movhi	r4,129
  80e030:	21047204 	addi	r4,r4,4552
  80e034:	01402074 	movhi	r5,129
  80e038:	29447204 	addi	r5,r5,4552
  80e03c:	01802074 	movhi	r6,129
  80e040:	3186a304 	addi	r6,r6,6796
  80e044:	080e0640 	call	80e064 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e048:	080ffa00 	call	80ffa0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e04c:	08101c00 	call	8101c0 <alt_icache_flush_all>
}
  80e050:	e037883a 	mov	sp,fp
  80e054:	dfc00117 	ldw	ra,4(sp)
  80e058:	df000017 	ldw	fp,0(sp)
  80e05c:	dec00204 	addi	sp,sp,8
  80e060:	f800283a 	ret

0080e064 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e064:	defffc04 	addi	sp,sp,-16
  80e068:	df000315 	stw	fp,12(sp)
  80e06c:	df000304 	addi	fp,sp,12
  80e070:	e13ffd15 	stw	r4,-12(fp)
  80e074:	e17ffe15 	stw	r5,-8(fp)
  80e078:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e07c:	e0fffe17 	ldw	r3,-8(fp)
  80e080:	e0bffd17 	ldw	r2,-12(fp)
  80e084:	18800e26 	beq	r3,r2,80e0c0 <alt_load_section+0x5c>
  {
    while( to != end )
  80e088:	00000a06 	br	80e0b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80e08c:	e0bffd17 	ldw	r2,-12(fp)
  80e090:	10c00017 	ldw	r3,0(r2)
  80e094:	e0bffe17 	ldw	r2,-8(fp)
  80e098:	10c00015 	stw	r3,0(r2)
  80e09c:	e0bffe17 	ldw	r2,-8(fp)
  80e0a0:	10800104 	addi	r2,r2,4
  80e0a4:	e0bffe15 	stw	r2,-8(fp)
  80e0a8:	e0bffd17 	ldw	r2,-12(fp)
  80e0ac:	10800104 	addi	r2,r2,4
  80e0b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e0b4:	e0fffe17 	ldw	r3,-8(fp)
  80e0b8:	e0bfff17 	ldw	r2,-4(fp)
  80e0bc:	18bff31e 	bne	r3,r2,80e08c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80e0c0:	e037883a 	mov	sp,fp
  80e0c4:	df000017 	ldw	fp,0(sp)
  80e0c8:	dec00104 	addi	sp,sp,4
  80e0cc:	f800283a 	ret

0080e0d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e0d0:	defff804 	addi	sp,sp,-32
  80e0d4:	dfc00715 	stw	ra,28(sp)
  80e0d8:	df000615 	stw	fp,24(sp)
  80e0dc:	df000604 	addi	fp,sp,24
  80e0e0:	e13ffc15 	stw	r4,-16(fp)
  80e0e4:	e17ffd15 	stw	r5,-12(fp)
  80e0e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e0ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e0f0:	e0bffc17 	ldw	r2,-16(fp)
  80e0f4:	1004803a 	cmplt	r2,r2,zero
  80e0f8:	1000081e 	bne	r2,zero,80e11c <lseek+0x4c>
  80e0fc:	e0bffc17 	ldw	r2,-16(fp)
  80e100:	10800324 	muli	r2,r2,12
  80e104:	1007883a 	mov	r3,r2
  80e108:	00802074 	movhi	r2,129
  80e10c:	1088b204 	addi	r2,r2,8904
  80e110:	1887883a 	add	r3,r3,r2
  80e114:	e0ffff15 	stw	r3,-4(fp)
  80e118:	00000106 	br	80e120 <lseek+0x50>
  80e11c:	e03fff15 	stw	zero,-4(fp)
  80e120:	e0bfff17 	ldw	r2,-4(fp)
  80e124:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80e128:	e0bffb17 	ldw	r2,-20(fp)
  80e12c:	1005003a 	cmpeq	r2,r2,zero
  80e130:	1000111e 	bne	r2,zero,80e178 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e134:	e0bffb17 	ldw	r2,-20(fp)
  80e138:	10800017 	ldw	r2,0(r2)
  80e13c:	10800717 	ldw	r2,28(r2)
  80e140:	1005003a 	cmpeq	r2,r2,zero
  80e144:	1000091e 	bne	r2,zero,80e16c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e148:	e0bffb17 	ldw	r2,-20(fp)
  80e14c:	10800017 	ldw	r2,0(r2)
  80e150:	10800717 	ldw	r2,28(r2)
  80e154:	e13ffb17 	ldw	r4,-20(fp)
  80e158:	e17ffd17 	ldw	r5,-12(fp)
  80e15c:	e1bffe17 	ldw	r6,-8(fp)
  80e160:	103ee83a 	callr	r2
  80e164:	e0bffa15 	stw	r2,-24(fp)
  80e168:	00000506 	br	80e180 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e16c:	00bfde84 	movi	r2,-134
  80e170:	e0bffa15 	stw	r2,-24(fp)
  80e174:	00000206 	br	80e180 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e178:	00bfebc4 	movi	r2,-81
  80e17c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80e180:	e0bffa17 	ldw	r2,-24(fp)
  80e184:	1004403a 	cmpge	r2,r2,zero
  80e188:	1000071e 	bne	r2,zero,80e1a8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80e18c:	080e1c00 	call	80e1c0 <alt_get_errno>
  80e190:	1007883a 	mov	r3,r2
  80e194:	e0bffa17 	ldw	r2,-24(fp)
  80e198:	0085c83a 	sub	r2,zero,r2
  80e19c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e1a0:	00bfffc4 	movi	r2,-1
  80e1a4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80e1a8:	e0bffa17 	ldw	r2,-24(fp)
}
  80e1ac:	e037883a 	mov	sp,fp
  80e1b0:	dfc00117 	ldw	ra,4(sp)
  80e1b4:	df000017 	ldw	fp,0(sp)
  80e1b8:	dec00204 	addi	sp,sp,8
  80e1bc:	f800283a 	ret

0080e1c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e1c0:	defffd04 	addi	sp,sp,-12
  80e1c4:	dfc00215 	stw	ra,8(sp)
  80e1c8:	df000115 	stw	fp,4(sp)
  80e1cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e1d0:	00802074 	movhi	r2,129
  80e1d4:	108dd404 	addi	r2,r2,14160
  80e1d8:	10800017 	ldw	r2,0(r2)
  80e1dc:	1005003a 	cmpeq	r2,r2,zero
  80e1e0:	1000061e 	bne	r2,zero,80e1fc <alt_get_errno+0x3c>
  80e1e4:	00802074 	movhi	r2,129
  80e1e8:	108dd404 	addi	r2,r2,14160
  80e1ec:	10800017 	ldw	r2,0(r2)
  80e1f0:	103ee83a 	callr	r2
  80e1f4:	e0bfff15 	stw	r2,-4(fp)
  80e1f8:	00000306 	br	80e208 <alt_get_errno+0x48>
  80e1fc:	00802074 	movhi	r2,129
  80e200:	10951704 	addi	r2,r2,21596
  80e204:	e0bfff15 	stw	r2,-4(fp)
  80e208:	e0bfff17 	ldw	r2,-4(fp)
}
  80e20c:	e037883a 	mov	sp,fp
  80e210:	dfc00117 	ldw	ra,4(sp)
  80e214:	df000017 	ldw	fp,0(sp)
  80e218:	dec00204 	addi	sp,sp,8
  80e21c:	f800283a 	ret

0080e220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e220:	defffd04 	addi	sp,sp,-12
  80e224:	dfc00215 	stw	ra,8(sp)
  80e228:	df000115 	stw	fp,4(sp)
  80e22c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e230:	0009883a 	mov	r4,zero
  80e234:	080e6e80 	call	80e6e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e238:	080e71c0 	call	80e71c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e23c:	01002074 	movhi	r4,129
  80e240:	21069804 	addi	r4,r4,6752
  80e244:	01402074 	movhi	r5,129
  80e248:	29469804 	addi	r5,r5,6752
  80e24c:	01802074 	movhi	r6,129
  80e250:	31869804 	addi	r6,r6,6752
  80e254:	08105800 	call	810580 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e258:	08100f80 	call	8100f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e25c:	01002074 	movhi	r4,129
  80e260:	21005704 	addi	r4,r4,348
  80e264:	0810d7c0 	call	810d7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e268:	d127c117 	ldw	r4,-24828(gp)
  80e26c:	d167c217 	ldw	r5,-24824(gp)
  80e270:	d1a7c317 	ldw	r6,-24820(gp)
  80e274:	0801c880 	call	801c88 <main>
  80e278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e27c:	01000044 	movi	r4,1
  80e280:	080d8280 	call	80d828 <close>
  exit (result);
  80e284:	e13fff17 	ldw	r4,-4(fp)
  80e288:	0810d900 	call	810d90 <exit>

0080e28c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e28c:	defffe04 	addi	sp,sp,-8
  80e290:	df000115 	stw	fp,4(sp)
  80e294:	df000104 	addi	fp,sp,4
  80e298:	e13fff15 	stw	r4,-4(fp)
}
  80e29c:	e037883a 	mov	sp,fp
  80e2a0:	df000017 	ldw	fp,0(sp)
  80e2a4:	dec00104 	addi	sp,sp,4
  80e2a8:	f800283a 	ret

0080e2ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e2ac:	defffe04 	addi	sp,sp,-8
  80e2b0:	df000115 	stw	fp,4(sp)
  80e2b4:	df000104 	addi	fp,sp,4
  80e2b8:	e13fff15 	stw	r4,-4(fp)
}
  80e2bc:	e037883a 	mov	sp,fp
  80e2c0:	df000017 	ldw	fp,0(sp)
  80e2c4:	dec00104 	addi	sp,sp,4
  80e2c8:	f800283a 	ret

0080e2cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e2cc:	defff704 	addi	sp,sp,-36
  80e2d0:	dfc00815 	stw	ra,32(sp)
  80e2d4:	df000715 	stw	fp,28(sp)
  80e2d8:	df000704 	addi	fp,sp,28
  80e2dc:	e13ffb15 	stw	r4,-20(fp)
  80e2e0:	e17ffc15 	stw	r5,-16(fp)
  80e2e4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e2e8:	e0bffb17 	ldw	r2,-20(fp)
  80e2ec:	1004803a 	cmplt	r2,r2,zero
  80e2f0:	1000081e 	bne	r2,zero,80e314 <read+0x48>
  80e2f4:	e0bffb17 	ldw	r2,-20(fp)
  80e2f8:	10800324 	muli	r2,r2,12
  80e2fc:	1007883a 	mov	r3,r2
  80e300:	00802074 	movhi	r2,129
  80e304:	1088b204 	addi	r2,r2,8904
  80e308:	1887883a 	add	r3,r3,r2
  80e30c:	e0ffff15 	stw	r3,-4(fp)
  80e310:	00000106 	br	80e318 <read+0x4c>
  80e314:	e03fff15 	stw	zero,-4(fp)
  80e318:	e0bfff17 	ldw	r2,-4(fp)
  80e31c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e320:	e0bffa17 	ldw	r2,-24(fp)
  80e324:	1005003a 	cmpeq	r2,r2,zero
  80e328:	1000241e 	bne	r2,zero,80e3bc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e32c:	e0bffa17 	ldw	r2,-24(fp)
  80e330:	10800217 	ldw	r2,8(r2)
  80e334:	108000cc 	andi	r2,r2,3
  80e338:	10800060 	cmpeqi	r2,r2,1
  80e33c:	10001a1e 	bne	r2,zero,80e3a8 <read+0xdc>
  80e340:	e0bffa17 	ldw	r2,-24(fp)
  80e344:	10800017 	ldw	r2,0(r2)
  80e348:	10800517 	ldw	r2,20(r2)
  80e34c:	1005003a 	cmpeq	r2,r2,zero
  80e350:	1000151e 	bne	r2,zero,80e3a8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e354:	e0bffa17 	ldw	r2,-24(fp)
  80e358:	10800017 	ldw	r2,0(r2)
  80e35c:	10800517 	ldw	r2,20(r2)
  80e360:	e17ffc17 	ldw	r5,-16(fp)
  80e364:	e1bffd17 	ldw	r6,-12(fp)
  80e368:	e13ffa17 	ldw	r4,-24(fp)
  80e36c:	103ee83a 	callr	r2
  80e370:	e0bff915 	stw	r2,-28(fp)
  80e374:	e0bff917 	ldw	r2,-28(fp)
  80e378:	1004403a 	cmpge	r2,r2,zero
  80e37c:	1000071e 	bne	r2,zero,80e39c <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80e380:	080e3ec0 	call	80e3ec <alt_get_errno>
  80e384:	e0fff917 	ldw	r3,-28(fp)
  80e388:	00c7c83a 	sub	r3,zero,r3
  80e38c:	10c00015 	stw	r3,0(r2)
          return -1;
  80e390:	00bfffc4 	movi	r2,-1
  80e394:	e0bffe15 	stw	r2,-8(fp)
  80e398:	00000e06 	br	80e3d4 <read+0x108>
        }
        return rval;
  80e39c:	e0bff917 	ldw	r2,-28(fp)
  80e3a0:	e0bffe15 	stw	r2,-8(fp)
  80e3a4:	00000b06 	br	80e3d4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e3a8:	080e3ec0 	call	80e3ec <alt_get_errno>
  80e3ac:	1007883a 	mov	r3,r2
  80e3b0:	00800344 	movi	r2,13
  80e3b4:	18800015 	stw	r2,0(r3)
  80e3b8:	00000406 	br	80e3cc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e3bc:	080e3ec0 	call	80e3ec <alt_get_errno>
  80e3c0:	1007883a 	mov	r3,r2
  80e3c4:	00801444 	movi	r2,81
  80e3c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e3cc:	00bfffc4 	movi	r2,-1
  80e3d0:	e0bffe15 	stw	r2,-8(fp)
  80e3d4:	e0bffe17 	ldw	r2,-8(fp)
}
  80e3d8:	e037883a 	mov	sp,fp
  80e3dc:	dfc00117 	ldw	ra,4(sp)
  80e3e0:	df000017 	ldw	fp,0(sp)
  80e3e4:	dec00204 	addi	sp,sp,8
  80e3e8:	f800283a 	ret

0080e3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e3ec:	defffd04 	addi	sp,sp,-12
  80e3f0:	dfc00215 	stw	ra,8(sp)
  80e3f4:	df000115 	stw	fp,4(sp)
  80e3f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e3fc:	00802074 	movhi	r2,129
  80e400:	108dd404 	addi	r2,r2,14160
  80e404:	10800017 	ldw	r2,0(r2)
  80e408:	1005003a 	cmpeq	r2,r2,zero
  80e40c:	1000061e 	bne	r2,zero,80e428 <alt_get_errno+0x3c>
  80e410:	00802074 	movhi	r2,129
  80e414:	108dd404 	addi	r2,r2,14160
  80e418:	10800017 	ldw	r2,0(r2)
  80e41c:	103ee83a 	callr	r2
  80e420:	e0bfff15 	stw	r2,-4(fp)
  80e424:	00000306 	br	80e434 <alt_get_errno+0x48>
  80e428:	00802074 	movhi	r2,129
  80e42c:	10951704 	addi	r2,r2,21596
  80e430:	e0bfff15 	stw	r2,-4(fp)
  80e434:	e0bfff17 	ldw	r2,-4(fp)
}
  80e438:	e037883a 	mov	sp,fp
  80e43c:	dfc00117 	ldw	ra,4(sp)
  80e440:	df000017 	ldw	fp,0(sp)
  80e444:	dec00204 	addi	sp,sp,8
  80e448:	f800283a 	ret

0080e44c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e44c:	defffe04 	addi	sp,sp,-8
  80e450:	df000115 	stw	fp,4(sp)
  80e454:	df000104 	addi	fp,sp,4
  80e458:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e45c:	e0bfff17 	ldw	r2,-4(fp)
  80e460:	108000d0 	cmplti	r2,r2,3
  80e464:	10000d1e 	bne	r2,zero,80e49c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e468:	e0bfff17 	ldw	r2,-4(fp)
  80e46c:	00c02074 	movhi	r3,129
  80e470:	18c8b204 	addi	r3,r3,8904
  80e474:	10800324 	muli	r2,r2,12
  80e478:	10c5883a 	add	r2,r2,r3
  80e47c:	10800204 	addi	r2,r2,8
  80e480:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e484:	e0bfff17 	ldw	r2,-4(fp)
  80e488:	00c02074 	movhi	r3,129
  80e48c:	18c8b204 	addi	r3,r3,8904
  80e490:	10800324 	muli	r2,r2,12
  80e494:	10c5883a 	add	r2,r2,r3
  80e498:	10000015 	stw	zero,0(r2)
  }
}
  80e49c:	e037883a 	mov	sp,fp
  80e4a0:	df000017 	ldw	fp,0(sp)
  80e4a4:	dec00104 	addi	sp,sp,4
  80e4a8:	f800283a 	ret

0080e4ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e4ac:	defff804 	addi	sp,sp,-32
  80e4b0:	df000715 	stw	fp,28(sp)
  80e4b4:	df000704 	addi	fp,sp,28
  80e4b8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e4bc:	0005303a 	rdctl	r2,status
  80e4c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e4c4:	e0fffb17 	ldw	r3,-20(fp)
  80e4c8:	00bfff84 	movi	r2,-2
  80e4cc:	1884703a 	and	r2,r3,r2
  80e4d0:	1001703a 	wrctl	status,r2
  
  return context;
  80e4d4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e4d8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e4dc:	d0a07b17 	ldw	r2,-32276(gp)
  80e4e0:	10c000c4 	addi	r3,r2,3
  80e4e4:	00bfff04 	movi	r2,-4
  80e4e8:	1884703a 	and	r2,r3,r2
  80e4ec:	d0a07b15 	stw	r2,-32276(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e4f0:	d0e07b17 	ldw	r3,-32276(gp)
  80e4f4:	e0bffe17 	ldw	r2,-8(fp)
  80e4f8:	1887883a 	add	r3,r3,r2
  80e4fc:	00804034 	movhi	r2,256
  80e500:	10800004 	addi	r2,r2,0
  80e504:	10c0072e 	bgeu	r2,r3,80e524 <sbrk+0x78>
  80e508:	e0bffd17 	ldw	r2,-12(fp)
  80e50c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e510:	e0bffa17 	ldw	r2,-24(fp)
  80e514:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e518:	00bfffc4 	movi	r2,-1
  80e51c:	e0bfff15 	stw	r2,-4(fp)
  80e520:	00000c06 	br	80e554 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80e524:	d0a07b17 	ldw	r2,-32276(gp)
  80e528:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80e52c:	d0e07b17 	ldw	r3,-32276(gp)
  80e530:	e0bffe17 	ldw	r2,-8(fp)
  80e534:	1885883a 	add	r2,r3,r2
  80e538:	d0a07b15 	stw	r2,-32276(gp)
  80e53c:	e0bffd17 	ldw	r2,-12(fp)
  80e540:	e0bff915 	stw	r2,-28(fp)
  80e544:	e0bff917 	ldw	r2,-28(fp)
  80e548:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e54c:	e0bffc17 	ldw	r2,-16(fp)
  80e550:	e0bfff15 	stw	r2,-4(fp)
  80e554:	e0bfff17 	ldw	r2,-4(fp)
} 
  80e558:	e037883a 	mov	sp,fp
  80e55c:	df000017 	ldw	fp,0(sp)
  80e560:	dec00104 	addi	sp,sp,4
  80e564:	f800283a 	ret

0080e568 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e568:	defff704 	addi	sp,sp,-36
  80e56c:	dfc00815 	stw	ra,32(sp)
  80e570:	df000715 	stw	fp,28(sp)
  80e574:	df000704 	addi	fp,sp,28
  80e578:	e13ffb15 	stw	r4,-20(fp)
  80e57c:	e17ffc15 	stw	r5,-16(fp)
  80e580:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e584:	e0bffb17 	ldw	r2,-20(fp)
  80e588:	1004803a 	cmplt	r2,r2,zero
  80e58c:	1000081e 	bne	r2,zero,80e5b0 <write+0x48>
  80e590:	e0bffb17 	ldw	r2,-20(fp)
  80e594:	10800324 	muli	r2,r2,12
  80e598:	1007883a 	mov	r3,r2
  80e59c:	00802074 	movhi	r2,129
  80e5a0:	1088b204 	addi	r2,r2,8904
  80e5a4:	1887883a 	add	r3,r3,r2
  80e5a8:	e0ffff15 	stw	r3,-4(fp)
  80e5ac:	00000106 	br	80e5b4 <write+0x4c>
  80e5b0:	e03fff15 	stw	zero,-4(fp)
  80e5b4:	e0bfff17 	ldw	r2,-4(fp)
  80e5b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80e5bc:	e0bffa17 	ldw	r2,-24(fp)
  80e5c0:	1005003a 	cmpeq	r2,r2,zero
  80e5c4:	1000241e 	bne	r2,zero,80e658 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e5c8:	e0bffa17 	ldw	r2,-24(fp)
  80e5cc:	10800217 	ldw	r2,8(r2)
  80e5d0:	108000cc 	andi	r2,r2,3
  80e5d4:	1005003a 	cmpeq	r2,r2,zero
  80e5d8:	10001a1e 	bne	r2,zero,80e644 <write+0xdc>
  80e5dc:	e0bffa17 	ldw	r2,-24(fp)
  80e5e0:	10800017 	ldw	r2,0(r2)
  80e5e4:	10800617 	ldw	r2,24(r2)
  80e5e8:	1005003a 	cmpeq	r2,r2,zero
  80e5ec:	1000151e 	bne	r2,zero,80e644 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e5f0:	e0bffa17 	ldw	r2,-24(fp)
  80e5f4:	10800017 	ldw	r2,0(r2)
  80e5f8:	10800617 	ldw	r2,24(r2)
  80e5fc:	e17ffc17 	ldw	r5,-16(fp)
  80e600:	e1bffd17 	ldw	r6,-12(fp)
  80e604:	e13ffa17 	ldw	r4,-24(fp)
  80e608:	103ee83a 	callr	r2
  80e60c:	e0bff915 	stw	r2,-28(fp)
  80e610:	e0bff917 	ldw	r2,-28(fp)
  80e614:	1004403a 	cmpge	r2,r2,zero
  80e618:	1000071e 	bne	r2,zero,80e638 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80e61c:	080e6880 	call	80e688 <alt_get_errno>
  80e620:	e0fff917 	ldw	r3,-28(fp)
  80e624:	00c7c83a 	sub	r3,zero,r3
  80e628:	10c00015 	stw	r3,0(r2)
        return -1;
  80e62c:	00bfffc4 	movi	r2,-1
  80e630:	e0bffe15 	stw	r2,-8(fp)
  80e634:	00000e06 	br	80e670 <write+0x108>
      }
      return rval;
  80e638:	e0bff917 	ldw	r2,-28(fp)
  80e63c:	e0bffe15 	stw	r2,-8(fp)
  80e640:	00000b06 	br	80e670 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e644:	080e6880 	call	80e688 <alt_get_errno>
  80e648:	1007883a 	mov	r3,r2
  80e64c:	00800344 	movi	r2,13
  80e650:	18800015 	stw	r2,0(r3)
  80e654:	00000406 	br	80e668 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e658:	080e6880 	call	80e688 <alt_get_errno>
  80e65c:	1007883a 	mov	r3,r2
  80e660:	00801444 	movi	r2,81
  80e664:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e668:	00bfffc4 	movi	r2,-1
  80e66c:	e0bffe15 	stw	r2,-8(fp)
  80e670:	e0bffe17 	ldw	r2,-8(fp)
}
  80e674:	e037883a 	mov	sp,fp
  80e678:	dfc00117 	ldw	ra,4(sp)
  80e67c:	df000017 	ldw	fp,0(sp)
  80e680:	dec00204 	addi	sp,sp,8
  80e684:	f800283a 	ret

0080e688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e688:	defffd04 	addi	sp,sp,-12
  80e68c:	dfc00215 	stw	ra,8(sp)
  80e690:	df000115 	stw	fp,4(sp)
  80e694:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e698:	00802074 	movhi	r2,129
  80e69c:	108dd404 	addi	r2,r2,14160
  80e6a0:	10800017 	ldw	r2,0(r2)
  80e6a4:	1005003a 	cmpeq	r2,r2,zero
  80e6a8:	1000061e 	bne	r2,zero,80e6c4 <alt_get_errno+0x3c>
  80e6ac:	00802074 	movhi	r2,129
  80e6b0:	108dd404 	addi	r2,r2,14160
  80e6b4:	10800017 	ldw	r2,0(r2)
  80e6b8:	103ee83a 	callr	r2
  80e6bc:	e0bfff15 	stw	r2,-4(fp)
  80e6c0:	00000306 	br	80e6d0 <alt_get_errno+0x48>
  80e6c4:	00802074 	movhi	r2,129
  80e6c8:	10951704 	addi	r2,r2,21596
  80e6cc:	e0bfff15 	stw	r2,-4(fp)
  80e6d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e6d4:	e037883a 	mov	sp,fp
  80e6d8:	dfc00117 	ldw	ra,4(sp)
  80e6dc:	df000017 	ldw	fp,0(sp)
  80e6e0:	dec00204 	addi	sp,sp,8
  80e6e4:	f800283a 	ret

0080e6e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e6e8:	defffd04 	addi	sp,sp,-12
  80e6ec:	dfc00215 	stw	ra,8(sp)
  80e6f0:	df000115 	stw	fp,4(sp)
  80e6f4:	df000104 	addi	fp,sp,4
  80e6f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  80e6fc:	0810a600 	call	810a60 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e700:	00800044 	movi	r2,1
  80e704:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e708:	e037883a 	mov	sp,fp
  80e70c:	dfc00117 	ldw	ra,4(sp)
  80e710:	df000017 	ldw	fp,0(sp)
  80e714:	dec00204 	addi	sp,sp,8
  80e718:	f800283a 	ret

0080e71c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e71c:	defffe04 	addi	sp,sp,-8
  80e720:	dfc00115 	stw	ra,4(sp)
  80e724:	df000015 	stw	fp,0(sp)
  80e728:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80e72c:	01002074 	movhi	r4,129
  80e730:	21091c04 	addi	r4,r4,9328
  80e734:	000b883a 	mov	r5,zero
  80e738:	000d883a 	mov	r6,zero
  80e73c:	080e9000 	call	80e900 <altera_avalon_jtag_uart_init>
  80e740:	01002074 	movhi	r4,129
  80e744:	21091204 	addi	r4,r4,9288
  80e748:	080e7800 	call	80e780 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80e74c:	01002074 	movhi	r4,129
  80e750:	210d3404 	addi	r4,r4,13520
  80e754:	000b883a 	mov	r5,zero
  80e758:	01800044 	movi	r6,1
  80e75c:	080f5940 	call	80f594 <altera_avalon_uart_init>
  80e760:	01002074 	movhi	r4,129
  80e764:	210d2a04 	addi	r4,r4,13480
  80e768:	080e7800 	call	80e780 <alt_dev_reg>
}
  80e76c:	e037883a 	mov	sp,fp
  80e770:	dfc00117 	ldw	ra,4(sp)
  80e774:	df000017 	ldw	fp,0(sp)
  80e778:	dec00204 	addi	sp,sp,8
  80e77c:	f800283a 	ret

0080e780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e780:	defffd04 	addi	sp,sp,-12
  80e784:	dfc00215 	stw	ra,8(sp)
  80e788:	df000115 	stw	fp,4(sp)
  80e78c:	df000104 	addi	fp,sp,4
  80e790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e794:	e13fff17 	ldw	r4,-4(fp)
  80e798:	01402074 	movhi	r5,129
  80e79c:	294dd104 	addi	r5,r5,14148
  80e7a0:	080ffe40 	call	80ffe4 <alt_dev_llist_insert>
}
  80e7a4:	e037883a 	mov	sp,fp
  80e7a8:	dfc00117 	ldw	ra,4(sp)
  80e7ac:	df000017 	ldw	fp,0(sp)
  80e7b0:	dec00204 	addi	sp,sp,8
  80e7b4:	f800283a 	ret

0080e7b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e7b8:	defffa04 	addi	sp,sp,-24
  80e7bc:	dfc00515 	stw	ra,20(sp)
  80e7c0:	df000415 	stw	fp,16(sp)
  80e7c4:	df000404 	addi	fp,sp,16
  80e7c8:	e13ffd15 	stw	r4,-12(fp)
  80e7cc:	e17ffe15 	stw	r5,-8(fp)
  80e7d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e7d4:	e0bffd17 	ldw	r2,-12(fp)
  80e7d8:	10800017 	ldw	r2,0(r2)
  80e7dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e7e0:	e0bffc17 	ldw	r2,-16(fp)
  80e7e4:	11000a04 	addi	r4,r2,40
  80e7e8:	e0bffd17 	ldw	r2,-12(fp)
  80e7ec:	11c00217 	ldw	r7,8(r2)
  80e7f0:	e17ffe17 	ldw	r5,-8(fp)
  80e7f4:	e1bfff17 	ldw	r6,-4(fp)
  80e7f8:	080ee000 	call	80ee00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e7fc:	e037883a 	mov	sp,fp
  80e800:	dfc00117 	ldw	ra,4(sp)
  80e804:	df000017 	ldw	fp,0(sp)
  80e808:	dec00204 	addi	sp,sp,8
  80e80c:	f800283a 	ret

0080e810 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e810:	defffa04 	addi	sp,sp,-24
  80e814:	dfc00515 	stw	ra,20(sp)
  80e818:	df000415 	stw	fp,16(sp)
  80e81c:	df000404 	addi	fp,sp,16
  80e820:	e13ffd15 	stw	r4,-12(fp)
  80e824:	e17ffe15 	stw	r5,-8(fp)
  80e828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e82c:	e0bffd17 	ldw	r2,-12(fp)
  80e830:	10800017 	ldw	r2,0(r2)
  80e834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e838:	e0bffc17 	ldw	r2,-16(fp)
  80e83c:	11000a04 	addi	r4,r2,40
  80e840:	e0bffd17 	ldw	r2,-12(fp)
  80e844:	11c00217 	ldw	r7,8(r2)
  80e848:	e17ffe17 	ldw	r5,-8(fp)
  80e84c:	e1bfff17 	ldw	r6,-4(fp)
  80e850:	080f0240 	call	80f024 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e854:	e037883a 	mov	sp,fp
  80e858:	dfc00117 	ldw	ra,4(sp)
  80e85c:	df000017 	ldw	fp,0(sp)
  80e860:	dec00204 	addi	sp,sp,8
  80e864:	f800283a 	ret

0080e868 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e868:	defffc04 	addi	sp,sp,-16
  80e86c:	dfc00315 	stw	ra,12(sp)
  80e870:	df000215 	stw	fp,8(sp)
  80e874:	df000204 	addi	fp,sp,8
  80e878:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e87c:	e0bfff17 	ldw	r2,-4(fp)
  80e880:	10800017 	ldw	r2,0(r2)
  80e884:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e888:	e0bffe17 	ldw	r2,-8(fp)
  80e88c:	11000a04 	addi	r4,r2,40
  80e890:	e0bfff17 	ldw	r2,-4(fp)
  80e894:	11400217 	ldw	r5,8(r2)
  80e898:	080ec980 	call	80ec98 <altera_avalon_jtag_uart_close>
}
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	dfc00117 	ldw	ra,4(sp)
  80e8a4:	df000017 	ldw	fp,0(sp)
  80e8a8:	dec00204 	addi	sp,sp,8
  80e8ac:	f800283a 	ret

0080e8b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e8b0:	defffa04 	addi	sp,sp,-24
  80e8b4:	dfc00515 	stw	ra,20(sp)
  80e8b8:	df000415 	stw	fp,16(sp)
  80e8bc:	df000404 	addi	fp,sp,16
  80e8c0:	e13ffd15 	stw	r4,-12(fp)
  80e8c4:	e17ffe15 	stw	r5,-8(fp)
  80e8c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e8cc:	e0bffd17 	ldw	r2,-12(fp)
  80e8d0:	10800017 	ldw	r2,0(r2)
  80e8d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e8d8:	e0bffc17 	ldw	r2,-16(fp)
  80e8dc:	11000a04 	addi	r4,r2,40
  80e8e0:	e17ffe17 	ldw	r5,-8(fp)
  80e8e4:	e1bfff17 	ldw	r6,-4(fp)
  80e8e8:	080ed0c0 	call	80ed0c <altera_avalon_jtag_uart_ioctl>
}
  80e8ec:	e037883a 	mov	sp,fp
  80e8f0:	dfc00117 	ldw	ra,4(sp)
  80e8f4:	df000017 	ldw	fp,0(sp)
  80e8f8:	dec00204 	addi	sp,sp,8
  80e8fc:	f800283a 	ret

0080e900 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e900:	defffa04 	addi	sp,sp,-24
  80e904:	dfc00515 	stw	ra,20(sp)
  80e908:	df000415 	stw	fp,16(sp)
  80e90c:	df000404 	addi	fp,sp,16
  80e910:	e13ffd15 	stw	r4,-12(fp)
  80e914:	e17ffe15 	stw	r5,-8(fp)
  80e918:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e91c:	e0fffd17 	ldw	r3,-12(fp)
  80e920:	00800044 	movi	r2,1
  80e924:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e928:	e0bffd17 	ldw	r2,-12(fp)
  80e92c:	10800017 	ldw	r2,0(r2)
  80e930:	11000104 	addi	r4,r2,4
  80e934:	e0bffd17 	ldw	r2,-12(fp)
  80e938:	10800817 	ldw	r2,32(r2)
  80e93c:	1007883a 	mov	r3,r2
  80e940:	2005883a 	mov	r2,r4
  80e944:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80e948:	e13ffe17 	ldw	r4,-8(fp)
  80e94c:	e17fff17 	ldw	r5,-4(fp)
  80e950:	d8000015 	stw	zero,0(sp)
  80e954:	01802074 	movhi	r6,129
  80e958:	31ba7004 	addi	r6,r6,-5696
  80e95c:	e1fffd17 	ldw	r7,-12(fp)
  80e960:	08101f00 	call	8101f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80e964:	e0bffd17 	ldw	r2,-12(fp)
  80e968:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80e96c:	e0bffd17 	ldw	r2,-12(fp)
  80e970:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e974:	00802074 	movhi	r2,129
  80e978:	10951f04 	addi	r2,r2,21628
  80e97c:	10800017 	ldw	r2,0(r2)
  80e980:	100b883a 	mov	r5,r2
  80e984:	01802074 	movhi	r6,129
  80e988:	31bafa04 	addi	r6,r6,-5144
  80e98c:	e1fffd17 	ldw	r7,-12(fp)
  80e990:	080fe4c0 	call	80fe4c <alt_alarm_start>
  80e994:	1004403a 	cmpge	r2,r2,zero
  80e998:	1000041e 	bne	r2,zero,80e9ac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80e99c:	e0fffd17 	ldw	r3,-12(fp)
  80e9a0:	00a00034 	movhi	r2,32768
  80e9a4:	10bfffc4 	addi	r2,r2,-1
  80e9a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80e9ac:	e037883a 	mov	sp,fp
  80e9b0:	dfc00117 	ldw	ra,4(sp)
  80e9b4:	df000017 	ldw	fp,0(sp)
  80e9b8:	dec00204 	addi	sp,sp,8
  80e9bc:	f800283a 	ret

0080e9c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80e9c0:	defff804 	addi	sp,sp,-32
  80e9c4:	df000715 	stw	fp,28(sp)
  80e9c8:	df000704 	addi	fp,sp,28
  80e9cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80e9d0:	e0bfff17 	ldw	r2,-4(fp)
  80e9d4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80e9d8:	e0bffe17 	ldw	r2,-8(fp)
  80e9dc:	10800017 	ldw	r2,0(r2)
  80e9e0:	e0bffd15 	stw	r2,-12(fp)
  80e9e4:	00000006 	br	80e9e8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e9e8:	e0bffd17 	ldw	r2,-12(fp)
  80e9ec:	10800104 	addi	r2,r2,4
  80e9f0:	10800037 	ldwio	r2,0(r2)
  80e9f4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80e9f8:	e0bffc17 	ldw	r2,-16(fp)
  80e9fc:	1080c00c 	andi	r2,r2,768
  80ea00:	1005003a 	cmpeq	r2,r2,zero
  80ea04:	1000741e 	bne	r2,zero,80ebd8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ea08:	e0bffc17 	ldw	r2,-16(fp)
  80ea0c:	1080400c 	andi	r2,r2,256
  80ea10:	1005003a 	cmpeq	r2,r2,zero
  80ea14:	1000351e 	bne	r2,zero,80eaec <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ea18:	00800074 	movhi	r2,1
  80ea1c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ea20:	e0bffe17 	ldw	r2,-8(fp)
  80ea24:	10800a17 	ldw	r2,40(r2)
  80ea28:	10800044 	addi	r2,r2,1
  80ea2c:	1081ffcc 	andi	r2,r2,2047
  80ea30:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80ea34:	e0bffe17 	ldw	r2,-8(fp)
  80ea38:	10c00b17 	ldw	r3,44(r2)
  80ea3c:	e0bffa17 	ldw	r2,-24(fp)
  80ea40:	18801626 	beq	r3,r2,80ea9c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ea44:	e0bffd17 	ldw	r2,-12(fp)
  80ea48:	10800037 	ldwio	r2,0(r2)
  80ea4c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ea50:	e0bffb17 	ldw	r2,-20(fp)
  80ea54:	10a0000c 	andi	r2,r2,32768
  80ea58:	1005003a 	cmpeq	r2,r2,zero
  80ea5c:	10000f1e 	bne	r2,zero,80ea9c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ea60:	e0bffe17 	ldw	r2,-8(fp)
  80ea64:	10c00a17 	ldw	r3,40(r2)
  80ea68:	e0bffb17 	ldw	r2,-20(fp)
  80ea6c:	1009883a 	mov	r4,r2
  80ea70:	e0bffe17 	ldw	r2,-8(fp)
  80ea74:	1885883a 	add	r2,r3,r2
  80ea78:	10800e04 	addi	r2,r2,56
  80ea7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ea80:	e0bffe17 	ldw	r2,-8(fp)
  80ea84:	10800a17 	ldw	r2,40(r2)
  80ea88:	10800044 	addi	r2,r2,1
  80ea8c:	10c1ffcc 	andi	r3,r2,2047
  80ea90:	e0bffe17 	ldw	r2,-8(fp)
  80ea94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ea98:	003fe106 	br	80ea20 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ea9c:	e0bffb17 	ldw	r2,-20(fp)
  80eaa0:	10bfffec 	andhi	r2,r2,65535
  80eaa4:	1005003a 	cmpeq	r2,r2,zero
  80eaa8:	1000101e 	bne	r2,zero,80eaec <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80eaac:	e0bffe17 	ldw	r2,-8(fp)
  80eab0:	10c00817 	ldw	r3,32(r2)
  80eab4:	00bfff84 	movi	r2,-2
  80eab8:	1886703a 	and	r3,r3,r2
  80eabc:	e0bffe17 	ldw	r2,-8(fp)
  80eac0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80eac4:	e0bffd17 	ldw	r2,-12(fp)
  80eac8:	11000104 	addi	r4,r2,4
  80eacc:	e0bffe17 	ldw	r2,-8(fp)
  80ead0:	10800817 	ldw	r2,32(r2)
  80ead4:	1007883a 	mov	r3,r2
  80ead8:	2005883a 	mov	r2,r4
  80eadc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80eae0:	e0bffd17 	ldw	r2,-12(fp)
  80eae4:	10800104 	addi	r2,r2,4
  80eae8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80eaec:	e0bffc17 	ldw	r2,-16(fp)
  80eaf0:	1080800c 	andi	r2,r2,512
  80eaf4:	1005003a 	cmpeq	r2,r2,zero
  80eaf8:	103fbb1e 	bne	r2,zero,80e9e8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80eafc:	e0bffc17 	ldw	r2,-16(fp)
  80eb00:	10bfffec 	andhi	r2,r2,65535
  80eb04:	1004d43a 	srli	r2,r2,16
  80eb08:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80eb0c:	00001506 	br	80eb64 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80eb10:	e13ffd17 	ldw	r4,-12(fp)
  80eb14:	e0bffe17 	ldw	r2,-8(fp)
  80eb18:	10c00d17 	ldw	r3,52(r2)
  80eb1c:	e0bffe17 	ldw	r2,-8(fp)
  80eb20:	1885883a 	add	r2,r3,r2
  80eb24:	10820e04 	addi	r2,r2,2104
  80eb28:	10800003 	ldbu	r2,0(r2)
  80eb2c:	10c03fcc 	andi	r3,r2,255
  80eb30:	18c0201c 	xori	r3,r3,128
  80eb34:	18ffe004 	addi	r3,r3,-128
  80eb38:	2005883a 	mov	r2,r4
  80eb3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eb40:	e0bffe17 	ldw	r2,-8(fp)
  80eb44:	10800d17 	ldw	r2,52(r2)
  80eb48:	10800044 	addi	r2,r2,1
  80eb4c:	10c1ffcc 	andi	r3,r2,2047
  80eb50:	e0bffe17 	ldw	r2,-8(fp)
  80eb54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80eb58:	e0bff917 	ldw	r2,-28(fp)
  80eb5c:	10bfffc4 	addi	r2,r2,-1
  80eb60:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80eb64:	e0bff917 	ldw	r2,-28(fp)
  80eb68:	1005003a 	cmpeq	r2,r2,zero
  80eb6c:	1000051e 	bne	r2,zero,80eb84 <altera_avalon_jtag_uart_irq+0x1c4>
  80eb70:	e0bffe17 	ldw	r2,-8(fp)
  80eb74:	10c00d17 	ldw	r3,52(r2)
  80eb78:	e0bffe17 	ldw	r2,-8(fp)
  80eb7c:	10800c17 	ldw	r2,48(r2)
  80eb80:	18bfe31e 	bne	r3,r2,80eb10 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80eb84:	e0bff917 	ldw	r2,-28(fp)
  80eb88:	1005003a 	cmpeq	r2,r2,zero
  80eb8c:	103f961e 	bne	r2,zero,80e9e8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80eb90:	e0bffe17 	ldw	r2,-8(fp)
  80eb94:	10c00817 	ldw	r3,32(r2)
  80eb98:	00bfff44 	movi	r2,-3
  80eb9c:	1886703a 	and	r3,r3,r2
  80eba0:	e0bffe17 	ldw	r2,-8(fp)
  80eba4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80eba8:	e0bffe17 	ldw	r2,-8(fp)
  80ebac:	10800017 	ldw	r2,0(r2)
  80ebb0:	11000104 	addi	r4,r2,4
  80ebb4:	e0bffe17 	ldw	r2,-8(fp)
  80ebb8:	10800817 	ldw	r2,32(r2)
  80ebbc:	1007883a 	mov	r3,r2
  80ebc0:	2005883a 	mov	r2,r4
  80ebc4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ebc8:	e0bffd17 	ldw	r2,-12(fp)
  80ebcc:	10800104 	addi	r2,r2,4
  80ebd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80ebd4:	003f8406 	br	80e9e8 <altera_avalon_jtag_uart_irq+0x28>
}
  80ebd8:	e037883a 	mov	sp,fp
  80ebdc:	df000017 	ldw	fp,0(sp)
  80ebe0:	dec00104 	addi	sp,sp,4
  80ebe4:	f800283a 	ret

0080ebe8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ebe8:	defffc04 	addi	sp,sp,-16
  80ebec:	df000315 	stw	fp,12(sp)
  80ebf0:	df000304 	addi	fp,sp,12
  80ebf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ebf8:	e0bfff17 	ldw	r2,-4(fp)
  80ebfc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ec00:	e0bffe17 	ldw	r2,-8(fp)
  80ec04:	10800017 	ldw	r2,0(r2)
  80ec08:	10800104 	addi	r2,r2,4
  80ec0c:	10800037 	ldwio	r2,0(r2)
  80ec10:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ec14:	e0bffd17 	ldw	r2,-12(fp)
  80ec18:	1081000c 	andi	r2,r2,1024
  80ec1c:	1005003a 	cmpeq	r2,r2,zero
  80ec20:	10000c1e 	bne	r2,zero,80ec54 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ec24:	e0bffe17 	ldw	r2,-8(fp)
  80ec28:	10800017 	ldw	r2,0(r2)
  80ec2c:	11000104 	addi	r4,r2,4
  80ec30:	e0bffe17 	ldw	r2,-8(fp)
  80ec34:	10800817 	ldw	r2,32(r2)
  80ec38:	10810014 	ori	r2,r2,1024
  80ec3c:	1007883a 	mov	r3,r2
  80ec40:	2005883a 	mov	r2,r4
  80ec44:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80ec48:	e0bffe17 	ldw	r2,-8(fp)
  80ec4c:	10000915 	stw	zero,36(r2)
  80ec50:	00000a06 	br	80ec7c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ec54:	e0bffe17 	ldw	r2,-8(fp)
  80ec58:	10c00917 	ldw	r3,36(r2)
  80ec5c:	00a00034 	movhi	r2,32768
  80ec60:	10bfff04 	addi	r2,r2,-4
  80ec64:	10c00536 	bltu	r2,r3,80ec7c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80ec68:	e0bffe17 	ldw	r2,-8(fp)
  80ec6c:	10800917 	ldw	r2,36(r2)
  80ec70:	10c00044 	addi	r3,r2,1
  80ec74:	e0bffe17 	ldw	r2,-8(fp)
  80ec78:	10c00915 	stw	r3,36(r2)
  80ec7c:	00802074 	movhi	r2,129
  80ec80:	10951f04 	addi	r2,r2,21628
  80ec84:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ec88:	e037883a 	mov	sp,fp
  80ec8c:	df000017 	ldw	fp,0(sp)
  80ec90:	dec00104 	addi	sp,sp,4
  80ec94:	f800283a 	ret

0080ec98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80ec98:	defffc04 	addi	sp,sp,-16
  80ec9c:	df000315 	stw	fp,12(sp)
  80eca0:	df000304 	addi	fp,sp,12
  80eca4:	e13ffd15 	stw	r4,-12(fp)
  80eca8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ecac:	00000706 	br	80eccc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80ecb0:	e0bffe17 	ldw	r2,-8(fp)
  80ecb4:	1090000c 	andi	r2,r2,16384
  80ecb8:	1005003a 	cmpeq	r2,r2,zero
  80ecbc:	1000031e 	bne	r2,zero,80eccc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80ecc0:	00bffd44 	movi	r2,-11
  80ecc4:	e0bfff15 	stw	r2,-4(fp)
  80ecc8:	00000b06 	br	80ecf8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	10c00d17 	ldw	r3,52(r2)
  80ecd4:	e0bffd17 	ldw	r2,-12(fp)
  80ecd8:	10800c17 	ldw	r2,48(r2)
  80ecdc:	18800526 	beq	r3,r2,80ecf4 <altera_avalon_jtag_uart_close+0x5c>
  80ece0:	e0bffd17 	ldw	r2,-12(fp)
  80ece4:	10c00917 	ldw	r3,36(r2)
  80ece8:	e0bffd17 	ldw	r2,-12(fp)
  80ecec:	10800117 	ldw	r2,4(r2)
  80ecf0:	18bfef36 	bltu	r3,r2,80ecb0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80ecf4:	e03fff15 	stw	zero,-4(fp)
  80ecf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecfc:	e037883a 	mov	sp,fp
  80ed00:	df000017 	ldw	fp,0(sp)
  80ed04:	dec00104 	addi	sp,sp,4
  80ed08:	f800283a 	ret

0080ed0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80ed0c:	defff804 	addi	sp,sp,-32
  80ed10:	df000715 	stw	fp,28(sp)
  80ed14:	df000704 	addi	fp,sp,28
  80ed18:	e13ffb15 	stw	r4,-20(fp)
  80ed1c:	e17ffc15 	stw	r5,-16(fp)
  80ed20:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80ed24:	00bff9c4 	movi	r2,-25
  80ed28:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80ed2c:	e0bffc17 	ldw	r2,-16(fp)
  80ed30:	e0bfff15 	stw	r2,-4(fp)
  80ed34:	e0ffff17 	ldw	r3,-4(fp)
  80ed38:	189a8060 	cmpeqi	r2,r3,27137
  80ed3c:	1000041e 	bne	r2,zero,80ed50 <altera_avalon_jtag_uart_ioctl+0x44>
  80ed40:	e0ffff17 	ldw	r3,-4(fp)
  80ed44:	189a80a0 	cmpeqi	r2,r3,27138
  80ed48:	10001b1e 	bne	r2,zero,80edb8 <altera_avalon_jtag_uart_ioctl+0xac>
  80ed4c:	00002706 	br	80edec <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80ed50:	e0bffb17 	ldw	r2,-20(fp)
  80ed54:	10c00117 	ldw	r3,4(r2)
  80ed58:	00a00034 	movhi	r2,32768
  80ed5c:	10bfffc4 	addi	r2,r2,-1
  80ed60:	18802226 	beq	r3,r2,80edec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80ed64:	e0bffd17 	ldw	r2,-12(fp)
  80ed68:	10800017 	ldw	r2,0(r2)
  80ed6c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80ed70:	e0bff917 	ldw	r2,-28(fp)
  80ed74:	10800090 	cmplti	r2,r2,2
  80ed78:	1000071e 	bne	r2,zero,80ed98 <altera_avalon_jtag_uart_ioctl+0x8c>
  80ed7c:	e0fff917 	ldw	r3,-28(fp)
  80ed80:	00a00034 	movhi	r2,32768
  80ed84:	10bfffc4 	addi	r2,r2,-1
  80ed88:	18800326 	beq	r3,r2,80ed98 <altera_avalon_jtag_uart_ioctl+0x8c>
  80ed8c:	e0bff917 	ldw	r2,-28(fp)
  80ed90:	e0bffe15 	stw	r2,-8(fp)
  80ed94:	00000306 	br	80eda4 <altera_avalon_jtag_uart_ioctl+0x98>
  80ed98:	00e00034 	movhi	r3,32768
  80ed9c:	18ffff84 	addi	r3,r3,-2
  80eda0:	e0fffe15 	stw	r3,-8(fp)
  80eda4:	e0bffb17 	ldw	r2,-20(fp)
  80eda8:	e0fffe17 	ldw	r3,-8(fp)
  80edac:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80edb0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80edb4:	00000d06 	br	80edec <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80edb8:	e0bffb17 	ldw	r2,-20(fp)
  80edbc:	10c00117 	ldw	r3,4(r2)
  80edc0:	00a00034 	movhi	r2,32768
  80edc4:	10bfffc4 	addi	r2,r2,-1
  80edc8:	18800826 	beq	r3,r2,80edec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80edcc:	e13ffd17 	ldw	r4,-12(fp)
  80edd0:	e0bffb17 	ldw	r2,-20(fp)
  80edd4:	10c00917 	ldw	r3,36(r2)
  80edd8:	e0bffb17 	ldw	r2,-20(fp)
  80eddc:	10800117 	ldw	r2,4(r2)
  80ede0:	1885803a 	cmpltu	r2,r3,r2
  80ede4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80ede8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80edec:	e0bffa17 	ldw	r2,-24(fp)
}
  80edf0:	e037883a 	mov	sp,fp
  80edf4:	df000017 	ldw	fp,0(sp)
  80edf8:	dec00104 	addi	sp,sp,4
  80edfc:	f800283a 	ret

0080ee00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ee00:	defff204 	addi	sp,sp,-56
  80ee04:	dfc00d15 	stw	ra,52(sp)
  80ee08:	df000c15 	stw	fp,48(sp)
  80ee0c:	df000c04 	addi	fp,sp,48
  80ee10:	e13ffb15 	stw	r4,-20(fp)
  80ee14:	e17ffc15 	stw	r5,-16(fp)
  80ee18:	e1bffd15 	stw	r6,-12(fp)
  80ee1c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80ee20:	e0bffc17 	ldw	r2,-16(fp)
  80ee24:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ee28:	00004806 	br	80ef4c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ee2c:	e0bffb17 	ldw	r2,-20(fp)
  80ee30:	10800a17 	ldw	r2,40(r2)
  80ee34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ee38:	e0bffb17 	ldw	r2,-20(fp)
  80ee3c:	10800b17 	ldw	r2,44(r2)
  80ee40:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80ee44:	e0fff717 	ldw	r3,-36(fp)
  80ee48:	e0bff617 	ldw	r2,-40(fp)
  80ee4c:	18800536 	bltu	r3,r2,80ee64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ee50:	e0bff717 	ldw	r2,-36(fp)
  80ee54:	e0fff617 	ldw	r3,-40(fp)
  80ee58:	10c5c83a 	sub	r2,r2,r3
  80ee5c:	e0bff815 	stw	r2,-32(fp)
  80ee60:	00000406 	br	80ee74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ee64:	00820004 	movi	r2,2048
  80ee68:	e0fff617 	ldw	r3,-40(fp)
  80ee6c:	10c5c83a 	sub	r2,r2,r3
  80ee70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80ee74:	e0bff817 	ldw	r2,-32(fp)
  80ee78:	1005003a 	cmpeq	r2,r2,zero
  80ee7c:	10001f1e 	bne	r2,zero,80eefc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80ee80:	e0fffd17 	ldw	r3,-12(fp)
  80ee84:	e0bff817 	ldw	r2,-32(fp)
  80ee88:	1880022e 	bgeu	r3,r2,80ee94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80ee8c:	e0bffd17 	ldw	r2,-12(fp)
  80ee90:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ee94:	e0bffb17 	ldw	r2,-20(fp)
  80ee98:	10c00e04 	addi	r3,r2,56
  80ee9c:	e0bff617 	ldw	r2,-40(fp)
  80eea0:	1887883a 	add	r3,r3,r2
  80eea4:	e0bffa17 	ldw	r2,-24(fp)
  80eea8:	1009883a 	mov	r4,r2
  80eeac:	180b883a 	mov	r5,r3
  80eeb0:	e1bff817 	ldw	r6,-32(fp)
  80eeb4:	08095840 	call	809584 <memcpy>
      ptr   += n;
  80eeb8:	e0fff817 	ldw	r3,-32(fp)
  80eebc:	e0bffa17 	ldw	r2,-24(fp)
  80eec0:	10c5883a 	add	r2,r2,r3
  80eec4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80eec8:	e0fffd17 	ldw	r3,-12(fp)
  80eecc:	e0bff817 	ldw	r2,-32(fp)
  80eed0:	1885c83a 	sub	r2,r3,r2
  80eed4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eed8:	e0fff617 	ldw	r3,-40(fp)
  80eedc:	e0bff817 	ldw	r2,-32(fp)
  80eee0:	1885883a 	add	r2,r3,r2
  80eee4:	10c1ffcc 	andi	r3,r2,2047
  80eee8:	e0bffb17 	ldw	r2,-20(fp)
  80eeec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80eef0:	e0bffd17 	ldw	r2,-12(fp)
  80eef4:	10800048 	cmpgei	r2,r2,1
  80eef8:	103fcc1e 	bne	r2,zero,80ee2c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80eefc:	e0fffa17 	ldw	r3,-24(fp)
  80ef00:	e0bffc17 	ldw	r2,-16(fp)
  80ef04:	1880141e 	bne	r3,r2,80ef58 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80ef08:	e0bffe17 	ldw	r2,-8(fp)
  80ef0c:	1090000c 	andi	r2,r2,16384
  80ef10:	1004c03a 	cmpne	r2,r2,zero
  80ef14:	1000101e 	bne	r2,zero,80ef58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80ef18:	e0bffb17 	ldw	r2,-20(fp)
  80ef1c:	10c00a17 	ldw	r3,40(r2)
  80ef20:	e0bff717 	ldw	r2,-36(fp)
  80ef24:	1880051e 	bne	r3,r2,80ef3c <altera_avalon_jtag_uart_read+0x13c>
  80ef28:	e0bffb17 	ldw	r2,-20(fp)
  80ef2c:	10c00917 	ldw	r3,36(r2)
  80ef30:	e0bffb17 	ldw	r2,-20(fp)
  80ef34:	10800117 	ldw	r2,4(r2)
  80ef38:	18bff736 	bltu	r3,r2,80ef18 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80ef3c:	e0bffb17 	ldw	r2,-20(fp)
  80ef40:	10c00a17 	ldw	r3,40(r2)
  80ef44:	e0bff717 	ldw	r2,-36(fp)
  80ef48:	18800326 	beq	r3,r2,80ef58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ef4c:	e0bffd17 	ldw	r2,-12(fp)
  80ef50:	10800048 	cmpgei	r2,r2,1
  80ef54:	103fb51e 	bne	r2,zero,80ee2c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80ef58:	e0fffa17 	ldw	r3,-24(fp)
  80ef5c:	e0bffc17 	ldw	r2,-16(fp)
  80ef60:	18801926 	beq	r3,r2,80efc8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef64:	0005303a 	rdctl	r2,status
  80ef68:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef6c:	e0fff517 	ldw	r3,-44(fp)
  80ef70:	00bfff84 	movi	r2,-2
  80ef74:	1884703a 	and	r2,r3,r2
  80ef78:	1001703a 	wrctl	status,r2
  
  return context;
  80ef7c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80ef80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ef84:	e0bffb17 	ldw	r2,-20(fp)
  80ef88:	10800817 	ldw	r2,32(r2)
  80ef8c:	10c00054 	ori	r3,r2,1
  80ef90:	e0bffb17 	ldw	r2,-20(fp)
  80ef94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ef98:	e0bffb17 	ldw	r2,-20(fp)
  80ef9c:	10800017 	ldw	r2,0(r2)
  80efa0:	11000104 	addi	r4,r2,4
  80efa4:	e0bffb17 	ldw	r2,-20(fp)
  80efa8:	10800817 	ldw	r2,32(r2)
  80efac:	1007883a 	mov	r3,r2
  80efb0:	2005883a 	mov	r2,r4
  80efb4:	10c00035 	stwio	r3,0(r2)
  80efb8:	e0bff917 	ldw	r2,-28(fp)
  80efbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efc0:	e0bff417 	ldw	r2,-48(fp)
  80efc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80efc8:	e0fffa17 	ldw	r3,-24(fp)
  80efcc:	e0bffc17 	ldw	r2,-16(fp)
  80efd0:	18800526 	beq	r3,r2,80efe8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80efd4:	e0fffa17 	ldw	r3,-24(fp)
  80efd8:	e0bffc17 	ldw	r2,-16(fp)
  80efdc:	1887c83a 	sub	r3,r3,r2
  80efe0:	e0ffff15 	stw	r3,-4(fp)
  80efe4:	00000906 	br	80f00c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80efe8:	e0bffe17 	ldw	r2,-8(fp)
  80efec:	1090000c 	andi	r2,r2,16384
  80eff0:	1005003a 	cmpeq	r2,r2,zero
  80eff4:	1000031e 	bne	r2,zero,80f004 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80eff8:	00bffd44 	movi	r2,-11
  80effc:	e0bfff15 	stw	r2,-4(fp)
  80f000:	00000206 	br	80f00c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80f004:	00bffec4 	movi	r2,-5
  80f008:	e0bfff15 	stw	r2,-4(fp)
  80f00c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f010:	e037883a 	mov	sp,fp
  80f014:	dfc00117 	ldw	ra,4(sp)
  80f018:	df000017 	ldw	fp,0(sp)
  80f01c:	dec00204 	addi	sp,sp,8
  80f020:	f800283a 	ret

0080f024 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f024:	defff204 	addi	sp,sp,-56
  80f028:	dfc00d15 	stw	ra,52(sp)
  80f02c:	df000c15 	stw	fp,48(sp)
  80f030:	df000c04 	addi	fp,sp,48
  80f034:	e13ffb15 	stw	r4,-20(fp)
  80f038:	e17ffc15 	stw	r5,-16(fp)
  80f03c:	e1bffd15 	stw	r6,-12(fp)
  80f040:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f044:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f048:	e0bffc17 	ldw	r2,-16(fp)
  80f04c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f050:	00003a06 	br	80f13c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f054:	e0bffb17 	ldw	r2,-20(fp)
  80f058:	10800c17 	ldw	r2,48(r2)
  80f05c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80f060:	e0bffb17 	ldw	r2,-20(fp)
  80f064:	10800d17 	ldw	r2,52(r2)
  80f068:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80f06c:	e0fffa17 	ldw	r3,-24(fp)
  80f070:	e0bff917 	ldw	r2,-28(fp)
  80f074:	1880062e 	bgeu	r3,r2,80f090 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f078:	e0fff917 	ldw	r3,-28(fp)
  80f07c:	e0bffa17 	ldw	r2,-24(fp)
  80f080:	1885c83a 	sub	r2,r3,r2
  80f084:	10bfffc4 	addi	r2,r2,-1
  80f088:	e0bff815 	stw	r2,-32(fp)
  80f08c:	00000c06 	br	80f0c0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80f090:	e0bff917 	ldw	r2,-28(fp)
  80f094:	1005003a 	cmpeq	r2,r2,zero
  80f098:	1000051e 	bne	r2,zero,80f0b0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f09c:	00820004 	movi	r2,2048
  80f0a0:	e0fffa17 	ldw	r3,-24(fp)
  80f0a4:	10c5c83a 	sub	r2,r2,r3
  80f0a8:	e0bff815 	stw	r2,-32(fp)
  80f0ac:	00000406 	br	80f0c0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f0b0:	0081ffc4 	movi	r2,2047
  80f0b4:	e0fffa17 	ldw	r3,-24(fp)
  80f0b8:	10c5c83a 	sub	r2,r2,r3
  80f0bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80f0c0:	e0bff817 	ldw	r2,-32(fp)
  80f0c4:	1005003a 	cmpeq	r2,r2,zero
  80f0c8:	10001f1e 	bne	r2,zero,80f148 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80f0cc:	e0fffd17 	ldw	r3,-12(fp)
  80f0d0:	e0bff817 	ldw	r2,-32(fp)
  80f0d4:	1880022e 	bgeu	r3,r2,80f0e0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80f0d8:	e0bffd17 	ldw	r2,-12(fp)
  80f0dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f0e0:	e0bffb17 	ldw	r2,-20(fp)
  80f0e4:	10c20e04 	addi	r3,r2,2104
  80f0e8:	e0bffa17 	ldw	r2,-24(fp)
  80f0ec:	1885883a 	add	r2,r3,r2
  80f0f0:	e0fffc17 	ldw	r3,-16(fp)
  80f0f4:	1009883a 	mov	r4,r2
  80f0f8:	180b883a 	mov	r5,r3
  80f0fc:	e1bff817 	ldw	r6,-32(fp)
  80f100:	08095840 	call	809584 <memcpy>
      ptr   += n;
  80f104:	e0fff817 	ldw	r3,-32(fp)
  80f108:	e0bffc17 	ldw	r2,-16(fp)
  80f10c:	10c5883a 	add	r2,r2,r3
  80f110:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80f114:	e0fffd17 	ldw	r3,-12(fp)
  80f118:	e0bff817 	ldw	r2,-32(fp)
  80f11c:	1885c83a 	sub	r2,r3,r2
  80f120:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f124:	e0fffa17 	ldw	r3,-24(fp)
  80f128:	e0bff817 	ldw	r2,-32(fp)
  80f12c:	1885883a 	add	r2,r3,r2
  80f130:	10c1ffcc 	andi	r3,r2,2047
  80f134:	e0bffb17 	ldw	r2,-20(fp)
  80f138:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f13c:	e0bffd17 	ldw	r2,-12(fp)
  80f140:	10800048 	cmpgei	r2,r2,1
  80f144:	103fc31e 	bne	r2,zero,80f054 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f148:	0005303a 	rdctl	r2,status
  80f14c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f150:	e0fff517 	ldw	r3,-44(fp)
  80f154:	00bfff84 	movi	r2,-2
  80f158:	1884703a 	and	r2,r3,r2
  80f15c:	1001703a 	wrctl	status,r2
  
  return context;
  80f160:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f164:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f168:	e0bffb17 	ldw	r2,-20(fp)
  80f16c:	10800817 	ldw	r2,32(r2)
  80f170:	10c00094 	ori	r3,r2,2
  80f174:	e0bffb17 	ldw	r2,-20(fp)
  80f178:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f17c:	e0bffb17 	ldw	r2,-20(fp)
  80f180:	10800017 	ldw	r2,0(r2)
  80f184:	11000104 	addi	r4,r2,4
  80f188:	e0bffb17 	ldw	r2,-20(fp)
  80f18c:	10800817 	ldw	r2,32(r2)
  80f190:	1007883a 	mov	r3,r2
  80f194:	2005883a 	mov	r2,r4
  80f198:	10c00035 	stwio	r3,0(r2)
  80f19c:	e0bff717 	ldw	r2,-36(fp)
  80f1a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1a4:	e0bff417 	ldw	r2,-48(fp)
  80f1a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f1ac:	e0bffd17 	ldw	r2,-12(fp)
  80f1b0:	10800050 	cmplti	r2,r2,1
  80f1b4:	1000111e 	bne	r2,zero,80f1fc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80f1b8:	e0bffe17 	ldw	r2,-8(fp)
  80f1bc:	1090000c 	andi	r2,r2,16384
  80f1c0:	1004c03a 	cmpne	r2,r2,zero
  80f1c4:	1000101e 	bne	r2,zero,80f208 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f1c8:	e0bffb17 	ldw	r2,-20(fp)
  80f1cc:	10c00d17 	ldw	r3,52(r2)
  80f1d0:	e0bff917 	ldw	r2,-28(fp)
  80f1d4:	1880051e 	bne	r3,r2,80f1ec <altera_avalon_jtag_uart_write+0x1c8>
  80f1d8:	e0bffb17 	ldw	r2,-20(fp)
  80f1dc:	10c00917 	ldw	r3,36(r2)
  80f1e0:	e0bffb17 	ldw	r2,-20(fp)
  80f1e4:	10800117 	ldw	r2,4(r2)
  80f1e8:	18bff736 	bltu	r3,r2,80f1c8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80f1ec:	e0bffb17 	ldw	r2,-20(fp)
  80f1f0:	10c00d17 	ldw	r3,52(r2)
  80f1f4:	e0bff917 	ldw	r2,-28(fp)
  80f1f8:	18800326 	beq	r3,r2,80f208 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80f1fc:	e0bffd17 	ldw	r2,-12(fp)
  80f200:	10800048 	cmpgei	r2,r2,1
  80f204:	103fcd1e 	bne	r2,zero,80f13c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f208:	e0fffc17 	ldw	r3,-16(fp)
  80f20c:	e0bff617 	ldw	r2,-40(fp)
  80f210:	18800526 	beq	r3,r2,80f228 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80f214:	e0fffc17 	ldw	r3,-16(fp)
  80f218:	e0bff617 	ldw	r2,-40(fp)
  80f21c:	1887c83a 	sub	r3,r3,r2
  80f220:	e0ffff15 	stw	r3,-4(fp)
  80f224:	00000906 	br	80f24c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80f228:	e0bffe17 	ldw	r2,-8(fp)
  80f22c:	1090000c 	andi	r2,r2,16384
  80f230:	1005003a 	cmpeq	r2,r2,zero
  80f234:	1000031e 	bne	r2,zero,80f244 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80f238:	00bffd44 	movi	r2,-11
  80f23c:	e0bfff15 	stw	r2,-4(fp)
  80f240:	00000206 	br	80f24c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f244:	00bffec4 	movi	r2,-5
  80f248:	e0bfff15 	stw	r2,-4(fp)
  80f24c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f250:	e037883a 	mov	sp,fp
  80f254:	dfc00117 	ldw	ra,4(sp)
  80f258:	df000017 	ldw	fp,0(sp)
  80f25c:	dec00204 	addi	sp,sp,8
  80f260:	f800283a 	ret

0080f264 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80f264:	defff404 	addi	sp,sp,-48
  80f268:	df000b15 	stw	fp,44(sp)
  80f26c:	df000b04 	addi	fp,sp,44
  80f270:	e13ffc15 	stw	r4,-16(fp)
  80f274:	e17ffd15 	stw	r5,-12(fp)
  80f278:	e1bffe15 	stw	r6,-8(fp)
  80f27c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80f280:	e0fffe17 	ldw	r3,-8(fp)
  80f284:	e0bfff17 	ldw	r2,-4(fp)
  80f288:	10c5883a 	add	r2,r2,r3
  80f28c:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
  80f290:	e0c00117 	ldw	r3,4(fp)
  80f294:	e0800217 	ldw	r2,8(fp)
  80f298:	10c5883a 	add	r2,r2,r3
  80f29c:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
  80f2a0:	e0800117 	ldw	r2,4(fp)
  80f2a4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
  80f2a8:	e0bffe17 	ldw	r2,-8(fp)
  80f2ac:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80f2b0:	00800044 	movi	r2,1
  80f2b4:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80f2b8:	e0bffc17 	ldw	r2,-16(fp)
  80f2bc:	11000504 	addi	r4,r2,20
  80f2c0:	e0fffd17 	ldw	r3,-12(fp)
  80f2c4:	00800044 	movi	r2,1
  80f2c8:	10c6983a 	sll	r3,r2,r3
  80f2cc:	2005883a 	mov	r2,r4
  80f2d0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80f2d4:	e0800317 	ldw	r2,12(fp)
  80f2d8:	1080008c 	andi	r2,r2,2
  80f2dc:	1004c03a 	cmpne	r2,r2,zero
  80f2e0:	1000051e 	bne	r2,zero,80f2f8 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80f2e4:	e0bffc17 	ldw	r2,-16(fp)
  80f2e8:	10800304 	addi	r2,r2,12
  80f2ec:	1007883a 	mov	r3,r2
  80f2f0:	00810004 	movi	r2,1024
  80f2f4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80f2f8:	e0bffc17 	ldw	r2,-16(fp)
  80f2fc:	10800037 	ldwio	r2,0(r2)
  80f300:	00000006 	br	80f304 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80f304:	e0bffc17 	ldw	r2,-16(fp)
  80f308:	10800204 	addi	r2,r2,8
  80f30c:	10800037 	ldwio	r2,0(r2)
  80f310:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80f314:	e0bff717 	ldw	r2,-36(fp)
  80f318:	1080100c 	andi	r2,r2,64
  80f31c:	1005003a 	cmpeq	r2,r2,zero
  80f320:	1000031e 	bne	r2,zero,80f330 <alt_avalon_spi_command+0xcc>
  80f324:	e0bff617 	ldw	r2,-40(fp)
  80f328:	1004c03a 	cmpne	r2,r2,zero
  80f32c:	1000041e 	bne	r2,zero,80f340 <alt_avalon_spi_command+0xdc>
  80f330:	e0bff717 	ldw	r2,-36(fp)
  80f334:	1080200c 	andi	r2,r2,128
  80f338:	1005003a 	cmpeq	r2,r2,zero
  80f33c:	103ff11e 	bne	r2,zero,80f304 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80f340:	e0bff717 	ldw	r2,-36(fp)
  80f344:	1080100c 	andi	r2,r2,64
  80f348:	1005003a 	cmpeq	r2,r2,zero
  80f34c:	1000201e 	bne	r2,zero,80f3d0 <alt_avalon_spi_command+0x16c>
  80f350:	e0bff617 	ldw	r2,-40(fp)
  80f354:	10800050 	cmplti	r2,r2,1
  80f358:	10001d1e 	bne	r2,zero,80f3d0 <alt_avalon_spi_command+0x16c>
    {
      credits--;
  80f35c:	e0bff617 	ldw	r2,-40(fp)
  80f360:	10bfffc4 	addi	r2,r2,-1
  80f364:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
  80f368:	e0ffff17 	ldw	r3,-4(fp)
  80f36c:	e0bffb17 	ldw	r2,-20(fp)
  80f370:	18800b2e 	bgeu	r3,r2,80f3a0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  80f374:	e0bffc17 	ldw	r2,-16(fp)
  80f378:	11000104 	addi	r4,r2,4
  80f37c:	e0bfff17 	ldw	r2,-4(fp)
  80f380:	10800003 	ldbu	r2,0(r2)
  80f384:	10c03fcc 	andi	r3,r2,255
  80f388:	e0bfff17 	ldw	r2,-4(fp)
  80f38c:	10800044 	addi	r2,r2,1
  80f390:	e0bfff15 	stw	r2,-4(fp)
  80f394:	2005883a 	mov	r2,r4
  80f398:	10c00035 	stwio	r3,0(r2)
  80f39c:	00000c06 	br	80f3d0 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
  80f3a0:	e0bff917 	ldw	r2,-28(fp)
  80f3a4:	1005003a 	cmpeq	r2,r2,zero
  80f3a8:	1000071e 	bne	r2,zero,80f3c8 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
  80f3ac:	e0bff917 	ldw	r2,-28(fp)
  80f3b0:	10bfffc4 	addi	r2,r2,-1
  80f3b4:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  80f3b8:	e0bffc17 	ldw	r2,-16(fp)
  80f3bc:	10800104 	addi	r2,r2,4
  80f3c0:	10000035 	stwio	zero,0(r2)
  80f3c4:	00000206 	br	80f3d0 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
  80f3c8:	00bf0004 	movi	r2,-1024
  80f3cc:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80f3d0:	e0bff717 	ldw	r2,-36(fp)
  80f3d4:	1080200c 	andi	r2,r2,128
  80f3d8:	1005003a 	cmpeq	r2,r2,zero
  80f3dc:	103fc91e 	bne	r2,zero,80f304 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80f3e0:	e0bffc17 	ldw	r2,-16(fp)
  80f3e4:	10800037 	ldwio	r2,0(r2)
  80f3e8:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
  80f3ec:	e0bff817 	ldw	r2,-32(fp)
  80f3f0:	1005003a 	cmpeq	r2,r2,zero
  80f3f4:	1000041e 	bne	r2,zero,80f408 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
  80f3f8:	e0bff817 	ldw	r2,-32(fp)
  80f3fc:	10bfffc4 	addi	r2,r2,-1
  80f400:	e0bff815 	stw	r2,-32(fp)
  80f404:	00000706 	br	80f424 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
  80f408:	e0bff517 	ldw	r2,-44(fp)
  80f40c:	1007883a 	mov	r3,r2
  80f410:	e0800217 	ldw	r2,8(fp)
  80f414:	10c00005 	stb	r3,0(r2)
  80f418:	e0800217 	ldw	r2,8(fp)
  80f41c:	10800044 	addi	r2,r2,1
  80f420:	e0800215 	stw	r2,8(fp)
      credits++;
  80f424:	e0bff617 	ldw	r2,-40(fp)
  80f428:	10800044 	addi	r2,r2,1
  80f42c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
  80f430:	e0bff817 	ldw	r2,-32(fp)
  80f434:	1004c03a 	cmpne	r2,r2,zero
  80f438:	103fb21e 	bne	r2,zero,80f304 <alt_avalon_spi_command+0xa0>
  80f43c:	e0c00217 	ldw	r3,8(fp)
  80f440:	e0bffa17 	ldw	r2,-24(fp)
  80f444:	18800126 	beq	r3,r2,80f44c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
  80f448:	003fae06 	br	80f304 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80f44c:	e0bffc17 	ldw	r2,-16(fp)
  80f450:	10800204 	addi	r2,r2,8
  80f454:	10800037 	ldwio	r2,0(r2)
  80f458:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80f45c:	e0bff717 	ldw	r2,-36(fp)
  80f460:	1080080c 	andi	r2,r2,32
  80f464:	1005003a 	cmpeq	r2,r2,zero
  80f468:	103ff81e 	bne	r2,zero,80f44c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80f46c:	e0800317 	ldw	r2,12(fp)
  80f470:	1080004c 	andi	r2,r2,1
  80f474:	1004c03a 	cmpne	r2,r2,zero
  80f478:	1000031e 	bne	r2,zero,80f488 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80f47c:	e0bffc17 	ldw	r2,-16(fp)
  80f480:	10800304 	addi	r2,r2,12
  80f484:	10000035 	stwio	zero,0(r2)

  return read_length;
  80f488:	e0800117 	ldw	r2,4(fp)
}
  80f48c:	e037883a 	mov	sp,fp
  80f490:	df000017 	ldw	fp,0(sp)
  80f494:	dec00104 	addi	sp,sp,4
  80f498:	f800283a 	ret

0080f49c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f49c:	defffa04 	addi	sp,sp,-24
  80f4a0:	dfc00515 	stw	ra,20(sp)
  80f4a4:	df000415 	stw	fp,16(sp)
  80f4a8:	df000404 	addi	fp,sp,16
  80f4ac:	e13ffd15 	stw	r4,-12(fp)
  80f4b0:	e17ffe15 	stw	r5,-8(fp)
  80f4b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80f4b8:	e0bffd17 	ldw	r2,-12(fp)
  80f4bc:	10800017 	ldw	r2,0(r2)
  80f4c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80f4c4:	e0bffc17 	ldw	r2,-16(fp)
  80f4c8:	11000a04 	addi	r4,r2,40
  80f4cc:	e0bffd17 	ldw	r2,-12(fp)
  80f4d0:	11c00217 	ldw	r7,8(r2)
  80f4d4:	e17ffe17 	ldw	r5,-8(fp)
  80f4d8:	e1bfff17 	ldw	r6,-4(fp)
  80f4dc:	080f9940 	call	80f994 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80f4e0:	e037883a 	mov	sp,fp
  80f4e4:	dfc00117 	ldw	ra,4(sp)
  80f4e8:	df000017 	ldw	fp,0(sp)
  80f4ec:	dec00204 	addi	sp,sp,8
  80f4f0:	f800283a 	ret

0080f4f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f4f4:	defffa04 	addi	sp,sp,-24
  80f4f8:	dfc00515 	stw	ra,20(sp)
  80f4fc:	df000415 	stw	fp,16(sp)
  80f500:	df000404 	addi	fp,sp,16
  80f504:	e13ffd15 	stw	r4,-12(fp)
  80f508:	e17ffe15 	stw	r5,-8(fp)
  80f50c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80f510:	e0bffd17 	ldw	r2,-12(fp)
  80f514:	10800017 	ldw	r2,0(r2)
  80f518:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80f51c:	e0bffc17 	ldw	r2,-16(fp)
  80f520:	11000a04 	addi	r4,r2,40
  80f524:	e0bffd17 	ldw	r2,-12(fp)
  80f528:	11c00217 	ldw	r7,8(r2)
  80f52c:	e17ffe17 	ldw	r5,-8(fp)
  80f530:	e1bfff17 	ldw	r6,-4(fp)
  80f534:	080fc240 	call	80fc24 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80f538:	e037883a 	mov	sp,fp
  80f53c:	dfc00117 	ldw	ra,4(sp)
  80f540:	df000017 	ldw	fp,0(sp)
  80f544:	dec00204 	addi	sp,sp,8
  80f548:	f800283a 	ret

0080f54c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80f54c:	defffc04 	addi	sp,sp,-16
  80f550:	dfc00315 	stw	ra,12(sp)
  80f554:	df000215 	stw	fp,8(sp)
  80f558:	df000204 	addi	fp,sp,8
  80f55c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80f560:	e0bfff17 	ldw	r2,-4(fp)
  80f564:	10800017 	ldw	r2,0(r2)
  80f568:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80f56c:	e0bffe17 	ldw	r2,-8(fp)
  80f570:	11000a04 	addi	r4,r2,40
  80f574:	e0bfff17 	ldw	r2,-4(fp)
  80f578:	11400217 	ldw	r5,8(r2)
  80f57c:	080f9340 	call	80f934 <altera_avalon_uart_close>
}
  80f580:	e037883a 	mov	sp,fp
  80f584:	dfc00117 	ldw	ra,4(sp)
  80f588:	df000017 	ldw	fp,0(sp)
  80f58c:	dec00204 	addi	sp,sp,8
  80f590:	f800283a 	ret

0080f594 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80f594:	defff704 	addi	sp,sp,-36
  80f598:	dfc00815 	stw	ra,32(sp)
  80f59c:	df000715 	stw	fp,28(sp)
  80f5a0:	df000704 	addi	fp,sp,28
  80f5a4:	e13ffc15 	stw	r4,-16(fp)
  80f5a8:	e17ffd15 	stw	r5,-12(fp)
  80f5ac:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80f5b0:	e0bffc17 	ldw	r2,-16(fp)
  80f5b4:	10800017 	ldw	r2,0(r2)
  80f5b8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80f5bc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80f5c0:	1004c03a 	cmpne	r2,r2,zero
  80f5c4:	1000061e 	bne	r2,zero,80f5e0 <altera_avalon_uart_init+0x4c>
  80f5c8:	0005883a 	mov	r2,zero
  80f5cc:	1004c03a 	cmpne	r2,r2,zero
  80f5d0:	1000031e 	bne	r2,zero,80f5e0 <altera_avalon_uart_init+0x4c>
  80f5d4:	0005883a 	mov	r2,zero
  80f5d8:	1005003a 	cmpeq	r2,r2,zero
  80f5dc:	1000031e 	bne	r2,zero,80f5ec <altera_avalon_uart_init+0x58>
  80f5e0:	00800044 	movi	r2,1
  80f5e4:	e0bfff15 	stw	r2,-4(fp)
  80f5e8:	00000106 	br	80f5f0 <altera_avalon_uart_init+0x5c>
  80f5ec:	e03fff15 	stw	zero,-4(fp)
  80f5f0:	e0bfff17 	ldw	r2,-4(fp)
  80f5f4:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80f5f8:	e0bffa17 	ldw	r2,-24(fp)
  80f5fc:	1004c03a 	cmpne	r2,r2,zero
  80f600:	1000111e 	bne	r2,zero,80f648 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80f604:	e0fffc17 	ldw	r3,-16(fp)
  80f608:	00832004 	movi	r2,3200
  80f60c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80f610:	e0bffb17 	ldw	r2,-20(fp)
  80f614:	11000304 	addi	r4,r2,12
  80f618:	e0bffc17 	ldw	r2,-16(fp)
  80f61c:	10800117 	ldw	r2,4(r2)
  80f620:	1007883a 	mov	r3,r2
  80f624:	2005883a 	mov	r2,r4
  80f628:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80f62c:	d8000015 	stw	zero,0(sp)
  80f630:	e13ffd17 	ldw	r4,-12(fp)
  80f634:	e17ffe17 	ldw	r5,-8(fp)
  80f638:	01802074 	movhi	r6,129
  80f63c:	31bd9704 	addi	r6,r6,-2468
  80f640:	e1fffc17 	ldw	r7,-16(fp)
  80f644:	08101f00 	call	8101f0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80f648:	e037883a 	mov	sp,fp
  80f64c:	dfc00117 	ldw	ra,4(sp)
  80f650:	df000017 	ldw	fp,0(sp)
  80f654:	dec00204 	addi	sp,sp,8
  80f658:	f800283a 	ret

0080f65c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80f65c:	defffa04 	addi	sp,sp,-24
  80f660:	dfc00515 	stw	ra,20(sp)
  80f664:	df000415 	stw	fp,16(sp)
  80f668:	df000404 	addi	fp,sp,16
  80f66c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80f670:	e0bfff17 	ldw	r2,-4(fp)
  80f674:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80f678:	e0bffd17 	ldw	r2,-12(fp)
  80f67c:	10800017 	ldw	r2,0(r2)
  80f680:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80f684:	e0bffc17 	ldw	r2,-16(fp)
  80f688:	10800204 	addi	r2,r2,8
  80f68c:	10800037 	ldwio	r2,0(r2)
  80f690:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80f694:	e0bffc17 	ldw	r2,-16(fp)
  80f698:	10800204 	addi	r2,r2,8
  80f69c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80f6a0:	e0bffc17 	ldw	r2,-16(fp)
  80f6a4:	10800204 	addi	r2,r2,8
  80f6a8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80f6ac:	e0bffe17 	ldw	r2,-8(fp)
  80f6b0:	1080200c 	andi	r2,r2,128
  80f6b4:	1005003a 	cmpeq	r2,r2,zero
  80f6b8:	1000031e 	bne	r2,zero,80f6c8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80f6bc:	e13ffd17 	ldw	r4,-12(fp)
  80f6c0:	e17ffe17 	ldw	r5,-8(fp)
  80f6c4:	080f6f80 	call	80f6f8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80f6c8:	e0bffe17 	ldw	r2,-8(fp)
  80f6cc:	1081100c 	andi	r2,r2,1088
  80f6d0:	1005003a 	cmpeq	r2,r2,zero
  80f6d4:	1000031e 	bne	r2,zero,80f6e4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80f6d8:	e13ffd17 	ldw	r4,-12(fp)
  80f6dc:	e17ffe17 	ldw	r5,-8(fp)
  80f6e0:	080f7d80 	call	80f7d8 <altera_avalon_uart_txirq>
  }
  

}
  80f6e4:	e037883a 	mov	sp,fp
  80f6e8:	dfc00117 	ldw	ra,4(sp)
  80f6ec:	df000017 	ldw	fp,0(sp)
  80f6f0:	dec00204 	addi	sp,sp,8
  80f6f4:	f800283a 	ret

0080f6f8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80f6f8:	defffc04 	addi	sp,sp,-16
  80f6fc:	df000315 	stw	fp,12(sp)
  80f700:	df000304 	addi	fp,sp,12
  80f704:	e13ffe15 	stw	r4,-8(fp)
  80f708:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80f70c:	e0bfff17 	ldw	r2,-4(fp)
  80f710:	108000cc 	andi	r2,r2,3
  80f714:	1004c03a 	cmpne	r2,r2,zero
  80f718:	10002b1e 	bne	r2,zero,80f7c8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80f71c:	e0bffe17 	ldw	r2,-8(fp)
  80f720:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f724:	e0bffe17 	ldw	r2,-8(fp)
  80f728:	10800317 	ldw	r2,12(r2)
  80f72c:	10800044 	addi	r2,r2,1
  80f730:	10800fcc 	andi	r2,r2,63
  80f734:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80f738:	e0bffe17 	ldw	r2,-8(fp)
  80f73c:	11000317 	ldw	r4,12(r2)
  80f740:	e0bffe17 	ldw	r2,-8(fp)
  80f744:	10800017 	ldw	r2,0(r2)
  80f748:	10800037 	ldwio	r2,0(r2)
  80f74c:	1007883a 	mov	r3,r2
  80f750:	e0bffe17 	ldw	r2,-8(fp)
  80f754:	2085883a 	add	r2,r4,r2
  80f758:	10800704 	addi	r2,r2,28
  80f75c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80f760:	e0fffe17 	ldw	r3,-8(fp)
  80f764:	e0bffd17 	ldw	r2,-12(fp)
  80f768:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f76c:	e0bffe17 	ldw	r2,-8(fp)
  80f770:	10800317 	ldw	r2,12(r2)
  80f774:	10800044 	addi	r2,r2,1
  80f778:	10800fcc 	andi	r2,r2,63
  80f77c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80f780:	e0bffe17 	ldw	r2,-8(fp)
  80f784:	10c00217 	ldw	r3,8(r2)
  80f788:	e0bffd17 	ldw	r2,-12(fp)
  80f78c:	18800e1e 	bne	r3,r2,80f7c8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f790:	e0bffe17 	ldw	r2,-8(fp)
  80f794:	10c00117 	ldw	r3,4(r2)
  80f798:	00bfdfc4 	movi	r2,-129
  80f79c:	1886703a 	and	r3,r3,r2
  80f7a0:	e0bffe17 	ldw	r2,-8(fp)
  80f7a4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80f7a8:	e0bffe17 	ldw	r2,-8(fp)
  80f7ac:	10800017 	ldw	r2,0(r2)
  80f7b0:	11000304 	addi	r4,r2,12
  80f7b4:	e0bffe17 	ldw	r2,-8(fp)
  80f7b8:	10800117 	ldw	r2,4(r2)
  80f7bc:	1007883a 	mov	r3,r2
  80f7c0:	2005883a 	mov	r2,r4
  80f7c4:	10c00035 	stwio	r3,0(r2)
  }   
}
  80f7c8:	e037883a 	mov	sp,fp
  80f7cc:	df000017 	ldw	fp,0(sp)
  80f7d0:	dec00104 	addi	sp,sp,4
  80f7d4:	f800283a 	ret

0080f7d8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80f7d8:	defffd04 	addi	sp,sp,-12
  80f7dc:	df000215 	stw	fp,8(sp)
  80f7e0:	df000204 	addi	fp,sp,8
  80f7e4:	e13ffe15 	stw	r4,-8(fp)
  80f7e8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80f7ec:	e0bffe17 	ldw	r2,-8(fp)
  80f7f0:	10c00417 	ldw	r3,16(r2)
  80f7f4:	e0bffe17 	ldw	r2,-8(fp)
  80f7f8:	10800517 	ldw	r2,20(r2)
  80f7fc:	18803626 	beq	r3,r2,80f8d8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f800:	e0bffe17 	ldw	r2,-8(fp)
  80f804:	10800617 	ldw	r2,24(r2)
  80f808:	1080008c 	andi	r2,r2,2
  80f80c:	1005003a 	cmpeq	r2,r2,zero
  80f810:	1000041e 	bne	r2,zero,80f824 <altera_avalon_uart_txirq+0x4c>
  80f814:	e0bfff17 	ldw	r2,-4(fp)
  80f818:	1082000c 	andi	r2,r2,2048
  80f81c:	1005003a 	cmpeq	r2,r2,zero
  80f820:	10001e1e 	bne	r2,zero,80f89c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80f824:	e0bffe17 	ldw	r2,-8(fp)
  80f828:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80f82c:	e0bffe17 	ldw	r2,-8(fp)
  80f830:	10800017 	ldw	r2,0(r2)
  80f834:	11000104 	addi	r4,r2,4
  80f838:	e0bffe17 	ldw	r2,-8(fp)
  80f83c:	10c00417 	ldw	r3,16(r2)
  80f840:	e0bffe17 	ldw	r2,-8(fp)
  80f844:	1885883a 	add	r2,r3,r2
  80f848:	10801704 	addi	r2,r2,92
  80f84c:	10800003 	ldbu	r2,0(r2)
  80f850:	10c03fcc 	andi	r3,r2,255
  80f854:	2005883a 	mov	r2,r4
  80f858:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80f85c:	e0bffe17 	ldw	r2,-8(fp)
  80f860:	10800417 	ldw	r2,16(r2)
  80f864:	10c00044 	addi	r3,r2,1
  80f868:	e0bffe17 	ldw	r2,-8(fp)
  80f86c:	10c00415 	stw	r3,16(r2)
  80f870:	e0bffe17 	ldw	r2,-8(fp)
  80f874:	10800417 	ldw	r2,16(r2)
  80f878:	10c00fcc 	andi	r3,r2,63
  80f87c:	e0bffe17 	ldw	r2,-8(fp)
  80f880:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f884:	e0bffe17 	ldw	r2,-8(fp)
  80f888:	10800117 	ldw	r2,4(r2)
  80f88c:	10c01014 	ori	r3,r2,64
  80f890:	e0bffe17 	ldw	r2,-8(fp)
  80f894:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f898:	00000f06 	br	80f8d8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80f89c:	e0bffe17 	ldw	r2,-8(fp)
  80f8a0:	10800017 	ldw	r2,0(r2)
  80f8a4:	10800204 	addi	r2,r2,8
  80f8a8:	10800037 	ldwio	r2,0(r2)
  80f8ac:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f8b0:	e0bfff17 	ldw	r2,-4(fp)
  80f8b4:	1082000c 	andi	r2,r2,2048
  80f8b8:	1004c03a 	cmpne	r2,r2,zero
  80f8bc:	1000061e 	bne	r2,zero,80f8d8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f8c0:	e0bffe17 	ldw	r2,-8(fp)
  80f8c4:	10c00117 	ldw	r3,4(r2)
  80f8c8:	00bfefc4 	movi	r2,-65
  80f8cc:	1886703a 	and	r3,r3,r2
  80f8d0:	e0bffe17 	ldw	r2,-8(fp)
  80f8d4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80f8d8:	e0bffe17 	ldw	r2,-8(fp)
  80f8dc:	10c00417 	ldw	r3,16(r2)
  80f8e0:	e0bffe17 	ldw	r2,-8(fp)
  80f8e4:	10800517 	ldw	r2,20(r2)
  80f8e8:	1880061e 	bne	r3,r2,80f904 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f8ec:	e0bffe17 	ldw	r2,-8(fp)
  80f8f0:	10c00117 	ldw	r3,4(r2)
  80f8f4:	00beefc4 	movi	r2,-1089
  80f8f8:	1886703a 	and	r3,r3,r2
  80f8fc:	e0bffe17 	ldw	r2,-8(fp)
  80f900:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f904:	e0bffe17 	ldw	r2,-8(fp)
  80f908:	10800017 	ldw	r2,0(r2)
  80f90c:	11000304 	addi	r4,r2,12
  80f910:	e0bffe17 	ldw	r2,-8(fp)
  80f914:	10800117 	ldw	r2,4(r2)
  80f918:	1007883a 	mov	r3,r2
  80f91c:	2005883a 	mov	r2,r4
  80f920:	10c00035 	stwio	r3,0(r2)
}
  80f924:	e037883a 	mov	sp,fp
  80f928:	df000017 	ldw	fp,0(sp)
  80f92c:	dec00104 	addi	sp,sp,4
  80f930:	f800283a 	ret

0080f934 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80f934:	defffc04 	addi	sp,sp,-16
  80f938:	df000315 	stw	fp,12(sp)
  80f93c:	df000304 	addi	fp,sp,12
  80f940:	e13ffd15 	stw	r4,-12(fp)
  80f944:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f948:	00000706 	br	80f968 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80f94c:	e0bffe17 	ldw	r2,-8(fp)
  80f950:	1090000c 	andi	r2,r2,16384
  80f954:	1005003a 	cmpeq	r2,r2,zero
  80f958:	1000031e 	bne	r2,zero,80f968 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80f95c:	00bffd44 	movi	r2,-11
  80f960:	e0bfff15 	stw	r2,-4(fp)
  80f964:	00000606 	br	80f980 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f968:	e0bffd17 	ldw	r2,-12(fp)
  80f96c:	10c00417 	ldw	r3,16(r2)
  80f970:	e0bffd17 	ldw	r2,-12(fp)
  80f974:	10800517 	ldw	r2,20(r2)
  80f978:	18bff41e 	bne	r3,r2,80f94c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f97c:	e03fff15 	stw	zero,-4(fp)
  80f980:	e0bfff17 	ldw	r2,-4(fp)
}
  80f984:	e037883a 	mov	sp,fp
  80f988:	df000017 	ldw	fp,0(sp)
  80f98c:	dec00104 	addi	sp,sp,4
  80f990:	f800283a 	ret

0080f994 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80f994:	defff004 	addi	sp,sp,-64
  80f998:	dfc00f15 	stw	ra,60(sp)
  80f99c:	df000e15 	stw	fp,56(sp)
  80f9a0:	df000e04 	addi	fp,sp,56
  80f9a4:	e13ffb15 	stw	r4,-20(fp)
  80f9a8:	e17ffc15 	stw	r5,-16(fp)
  80f9ac:	e1bffd15 	stw	r6,-12(fp)
  80f9b0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80f9b4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80f9b8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80f9bc:	e0bffe17 	ldw	r2,-8(fp)
  80f9c0:	1090000c 	andi	r2,r2,16384
  80f9c4:	1005003a 	cmpeq	r2,r2,zero
  80f9c8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80f9cc:	e0bffb17 	ldw	r2,-20(fp)
  80f9d0:	10800217 	ldw	r2,8(r2)
  80f9d4:	10800044 	addi	r2,r2,1
  80f9d8:	10800fcc 	andi	r2,r2,63
  80f9dc:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f9e0:	00001906 	br	80fa48 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80f9e4:	e0bff617 	ldw	r2,-40(fp)
  80f9e8:	10800044 	addi	r2,r2,1
  80f9ec:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f9f0:	e0bffb17 	ldw	r2,-20(fp)
  80f9f4:	10c00217 	ldw	r3,8(r2)
  80f9f8:	e0bffb17 	ldw	r2,-20(fp)
  80f9fc:	1885883a 	add	r2,r3,r2
  80fa00:	10800704 	addi	r2,r2,28
  80fa04:	10800003 	ldbu	r2,0(r2)
  80fa08:	1007883a 	mov	r3,r2
  80fa0c:	e0bffc17 	ldw	r2,-16(fp)
  80fa10:	10c00005 	stb	r3,0(r2)
  80fa14:	e0bffc17 	ldw	r2,-16(fp)
  80fa18:	10800044 	addi	r2,r2,1
  80fa1c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80fa20:	e0bffb17 	ldw	r2,-20(fp)
  80fa24:	10800217 	ldw	r2,8(r2)
  80fa28:	10c00044 	addi	r3,r2,1
  80fa2c:	e0bffb17 	ldw	r2,-20(fp)
  80fa30:	10c00215 	stw	r3,8(r2)
  80fa34:	e0bffb17 	ldw	r2,-20(fp)
  80fa38:	10800217 	ldw	r2,8(r2)
  80fa3c:	10c00fcc 	andi	r3,r2,63
  80fa40:	e0bffb17 	ldw	r2,-20(fp)
  80fa44:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80fa48:	e0fff617 	ldw	r3,-40(fp)
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	1880050e 	bge	r3,r2,80fa68 <altera_avalon_uart_read+0xd4>
  80fa54:	e0bffb17 	ldw	r2,-20(fp)
  80fa58:	10c00217 	ldw	r3,8(r2)
  80fa5c:	e0bffb17 	ldw	r2,-20(fp)
  80fa60:	10800317 	ldw	r2,12(r2)
  80fa64:	18bfdf1e 	bne	r3,r2,80f9e4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80fa68:	e0bff617 	ldw	r2,-40(fp)
  80fa6c:	1004c03a 	cmpne	r2,r2,zero
  80fa70:	1000271e 	bne	r2,zero,80fb10 <altera_avalon_uart_read+0x17c>
  80fa74:	e0bffb17 	ldw	r2,-20(fp)
  80fa78:	10c00217 	ldw	r3,8(r2)
  80fa7c:	e0bffb17 	ldw	r2,-20(fp)
  80fa80:	10800317 	ldw	r2,12(r2)
  80fa84:	1880221e 	bne	r3,r2,80fb10 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80fa88:	e0bff917 	ldw	r2,-28(fp)
  80fa8c:	1004c03a 	cmpne	r2,r2,zero
  80fa90:	1000061e 	bne	r2,zero,80faac <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80fa94:	080fbc40 	call	80fbc4 <alt_get_errno>
  80fa98:	00c002c4 	movi	r3,11
  80fa9c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80faa0:	00800044 	movi	r2,1
  80faa4:	e0bff705 	stb	r2,-36(fp)
        break;
  80faa8:	00001f06 	br	80fb28 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80faac:	0005303a 	rdctl	r2,status
  80fab0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fab4:	e0fff517 	ldw	r3,-44(fp)
  80fab8:	00bfff84 	movi	r2,-2
  80fabc:	1884703a 	and	r2,r3,r2
  80fac0:	1001703a 	wrctl	status,r2
  
  return context;
  80fac4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80fac8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80facc:	e0bffb17 	ldw	r2,-20(fp)
  80fad0:	10800117 	ldw	r2,4(r2)
  80fad4:	10c02014 	ori	r3,r2,128
  80fad8:	e0bffb17 	ldw	r2,-20(fp)
  80fadc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80fae0:	e0bffb17 	ldw	r2,-20(fp)
  80fae4:	10800017 	ldw	r2,0(r2)
  80fae8:	11000304 	addi	r4,r2,12
  80faec:	e0bffb17 	ldw	r2,-20(fp)
  80faf0:	10800117 	ldw	r2,4(r2)
  80faf4:	1007883a 	mov	r3,r2
  80faf8:	2005883a 	mov	r2,r4
  80fafc:	10c00035 	stwio	r3,0(r2)
  80fb00:	e0bffa17 	ldw	r2,-24(fp)
  80fb04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb08:	e0bff417 	ldw	r2,-48(fp)
  80fb0c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80fb10:	e0bff617 	ldw	r2,-40(fp)
  80fb14:	1004c03a 	cmpne	r2,r2,zero
  80fb18:	1000031e 	bne	r2,zero,80fb28 <altera_avalon_uart_read+0x194>
  80fb1c:	e0bffd17 	ldw	r2,-12(fp)
  80fb20:	1004c03a 	cmpne	r2,r2,zero
  80fb24:	103fc81e 	bne	r2,zero,80fa48 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb28:	0005303a 	rdctl	r2,status
  80fb2c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb30:	e0fff317 	ldw	r3,-52(fp)
  80fb34:	00bfff84 	movi	r2,-2
  80fb38:	1884703a 	and	r2,r3,r2
  80fb3c:	1001703a 	wrctl	status,r2
  
  return context;
  80fb40:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80fb44:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80fb48:	e0bffb17 	ldw	r2,-20(fp)
  80fb4c:	10800117 	ldw	r2,4(r2)
  80fb50:	10c02014 	ori	r3,r2,128
  80fb54:	e0bffb17 	ldw	r2,-20(fp)
  80fb58:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80fb5c:	e0bffb17 	ldw	r2,-20(fp)
  80fb60:	10800017 	ldw	r2,0(r2)
  80fb64:	11000304 	addi	r4,r2,12
  80fb68:	e0bffb17 	ldw	r2,-20(fp)
  80fb6c:	10800117 	ldw	r2,4(r2)
  80fb70:	1007883a 	mov	r3,r2
  80fb74:	2005883a 	mov	r2,r4
  80fb78:	10c00035 	stwio	r3,0(r2)
  80fb7c:	e0bffa17 	ldw	r2,-24(fp)
  80fb80:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb84:	e0bff217 	ldw	r2,-56(fp)
  80fb88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80fb8c:	e0bff703 	ldbu	r2,-36(fp)
  80fb90:	1005003a 	cmpeq	r2,r2,zero
  80fb94:	1000031e 	bne	r2,zero,80fba4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80fb98:	00bffd04 	movi	r2,-12
  80fb9c:	e0bfff15 	stw	r2,-4(fp)
  80fba0:	00000206 	br	80fbac <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80fba4:	e0bff617 	ldw	r2,-40(fp)
  80fba8:	e0bfff15 	stw	r2,-4(fp)
  80fbac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80fbb0:	e037883a 	mov	sp,fp
  80fbb4:	dfc00117 	ldw	ra,4(sp)
  80fbb8:	df000017 	ldw	fp,0(sp)
  80fbbc:	dec00204 	addi	sp,sp,8
  80fbc0:	f800283a 	ret

0080fbc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbc4:	defffd04 	addi	sp,sp,-12
  80fbc8:	dfc00215 	stw	ra,8(sp)
  80fbcc:	df000115 	stw	fp,4(sp)
  80fbd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fbd4:	00802074 	movhi	r2,129
  80fbd8:	108dd404 	addi	r2,r2,14160
  80fbdc:	10800017 	ldw	r2,0(r2)
  80fbe0:	1005003a 	cmpeq	r2,r2,zero
  80fbe4:	1000061e 	bne	r2,zero,80fc00 <alt_get_errno+0x3c>
  80fbe8:	00802074 	movhi	r2,129
  80fbec:	108dd404 	addi	r2,r2,14160
  80fbf0:	10800017 	ldw	r2,0(r2)
  80fbf4:	103ee83a 	callr	r2
  80fbf8:	e0bfff15 	stw	r2,-4(fp)
  80fbfc:	00000306 	br	80fc0c <alt_get_errno+0x48>
  80fc00:	00802074 	movhi	r2,129
  80fc04:	10951704 	addi	r2,r2,21596
  80fc08:	e0bfff15 	stw	r2,-4(fp)
  80fc0c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc10:	e037883a 	mov	sp,fp
  80fc14:	dfc00117 	ldw	ra,4(sp)
  80fc18:	df000017 	ldw	fp,0(sp)
  80fc1c:	dec00204 	addi	sp,sp,8
  80fc20:	f800283a 	ret

0080fc24 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80fc24:	defff204 	addi	sp,sp,-56
  80fc28:	dfc00d15 	stw	ra,52(sp)
  80fc2c:	df000c15 	stw	fp,48(sp)
  80fc30:	df000c04 	addi	fp,sp,48
  80fc34:	e13ffc15 	stw	r4,-16(fp)
  80fc38:	e17ffd15 	stw	r5,-12(fp)
  80fc3c:	e1bffe15 	stw	r6,-8(fp)
  80fc40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80fc44:	e0bffe17 	ldw	r2,-8(fp)
  80fc48:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80fc4c:	e0bfff17 	ldw	r2,-4(fp)
  80fc50:	1090000c 	andi	r2,r2,16384
  80fc54:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80fc58:	00004006 	br	80fd5c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80fc5c:	e0bffc17 	ldw	r2,-16(fp)
  80fc60:	10800517 	ldw	r2,20(r2)
  80fc64:	10800044 	addi	r2,r2,1
  80fc68:	10800fcc 	andi	r2,r2,63
  80fc6c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80fc70:	e0bffc17 	ldw	r2,-16(fp)
  80fc74:	10c00417 	ldw	r3,16(r2)
  80fc78:	e0bff917 	ldw	r2,-28(fp)
  80fc7c:	1880251e 	bne	r3,r2,80fd14 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80fc80:	e0bffa17 	ldw	r2,-24(fp)
  80fc84:	1005003a 	cmpeq	r2,r2,zero
  80fc88:	1000051e 	bne	r2,zero,80fca0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80fc8c:	080fdec0 	call	80fdec <alt_get_errno>
  80fc90:	1007883a 	mov	r3,r2
  80fc94:	008002c4 	movi	r2,11
  80fc98:	18800015 	stw	r2,0(r3)
        break;
  80fc9c:	00003206 	br	80fd68 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fca0:	0005303a 	rdctl	r2,status
  80fca4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fca8:	e0fff717 	ldw	r3,-36(fp)
  80fcac:	00bfff84 	movi	r2,-2
  80fcb0:	1884703a 	and	r2,r3,r2
  80fcb4:	1001703a 	wrctl	status,r2
  
  return context;
  80fcb8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80fcbc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80fcc0:	e0bffc17 	ldw	r2,-16(fp)
  80fcc4:	10800117 	ldw	r2,4(r2)
  80fcc8:	10c11014 	ori	r3,r2,1088
  80fccc:	e0bffc17 	ldw	r2,-16(fp)
  80fcd0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80fcd4:	e0bffc17 	ldw	r2,-16(fp)
  80fcd8:	10800017 	ldw	r2,0(r2)
  80fcdc:	11000304 	addi	r4,r2,12
  80fce0:	e0bffc17 	ldw	r2,-16(fp)
  80fce4:	10800117 	ldw	r2,4(r2)
  80fce8:	1007883a 	mov	r3,r2
  80fcec:	2005883a 	mov	r2,r4
  80fcf0:	10c00035 	stwio	r3,0(r2)
  80fcf4:	e0bffb17 	ldw	r2,-20(fp)
  80fcf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fcfc:	e0bff617 	ldw	r2,-40(fp)
  80fd00:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80fd04:	e0bffc17 	ldw	r2,-16(fp)
  80fd08:	10c00417 	ldw	r3,16(r2)
  80fd0c:	e0bff917 	ldw	r2,-28(fp)
  80fd10:	18bffc26 	beq	r3,r2,80fd04 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80fd14:	e0bff817 	ldw	r2,-32(fp)
  80fd18:	10bfffc4 	addi	r2,r2,-1
  80fd1c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80fd20:	e0bffc17 	ldw	r2,-16(fp)
  80fd24:	10c00517 	ldw	r3,20(r2)
  80fd28:	e0bffd17 	ldw	r2,-12(fp)
  80fd2c:	10800003 	ldbu	r2,0(r2)
  80fd30:	1009883a 	mov	r4,r2
  80fd34:	e0bffc17 	ldw	r2,-16(fp)
  80fd38:	1885883a 	add	r2,r3,r2
  80fd3c:	10801704 	addi	r2,r2,92
  80fd40:	11000005 	stb	r4,0(r2)
  80fd44:	e0bffd17 	ldw	r2,-12(fp)
  80fd48:	10800044 	addi	r2,r2,1
  80fd4c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80fd50:	e0fffc17 	ldw	r3,-16(fp)
  80fd54:	e0bff917 	ldw	r2,-28(fp)
  80fd58:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80fd5c:	e0bff817 	ldw	r2,-32(fp)
  80fd60:	1004c03a 	cmpne	r2,r2,zero
  80fd64:	103fbd1e 	bne	r2,zero,80fc5c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd68:	0005303a 	rdctl	r2,status
  80fd6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd70:	e0fff517 	ldw	r3,-44(fp)
  80fd74:	00bfff84 	movi	r2,-2
  80fd78:	1884703a 	and	r2,r3,r2
  80fd7c:	1001703a 	wrctl	status,r2
  
  return context;
  80fd80:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80fd84:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80fd88:	e0bffc17 	ldw	r2,-16(fp)
  80fd8c:	10800117 	ldw	r2,4(r2)
  80fd90:	10c11014 	ori	r3,r2,1088
  80fd94:	e0bffc17 	ldw	r2,-16(fp)
  80fd98:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80fd9c:	e0bffc17 	ldw	r2,-16(fp)
  80fda0:	10800017 	ldw	r2,0(r2)
  80fda4:	11000304 	addi	r4,r2,12
  80fda8:	e0bffc17 	ldw	r2,-16(fp)
  80fdac:	10800117 	ldw	r2,4(r2)
  80fdb0:	1007883a 	mov	r3,r2
  80fdb4:	2005883a 	mov	r2,r4
  80fdb8:	10c00035 	stwio	r3,0(r2)
  80fdbc:	e0bffb17 	ldw	r2,-20(fp)
  80fdc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fdc4:	e0bff417 	ldw	r2,-48(fp)
  80fdc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80fdcc:	e0fffe17 	ldw	r3,-8(fp)
  80fdd0:	e0bff817 	ldw	r2,-32(fp)
  80fdd4:	1885c83a 	sub	r2,r3,r2
}
  80fdd8:	e037883a 	mov	sp,fp
  80fddc:	dfc00117 	ldw	ra,4(sp)
  80fde0:	df000017 	ldw	fp,0(sp)
  80fde4:	dec00204 	addi	sp,sp,8
  80fde8:	f800283a 	ret

0080fdec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fdec:	defffd04 	addi	sp,sp,-12
  80fdf0:	dfc00215 	stw	ra,8(sp)
  80fdf4:	df000115 	stw	fp,4(sp)
  80fdf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fdfc:	00802074 	movhi	r2,129
  80fe00:	108dd404 	addi	r2,r2,14160
  80fe04:	10800017 	ldw	r2,0(r2)
  80fe08:	1005003a 	cmpeq	r2,r2,zero
  80fe0c:	1000061e 	bne	r2,zero,80fe28 <alt_get_errno+0x3c>
  80fe10:	00802074 	movhi	r2,129
  80fe14:	108dd404 	addi	r2,r2,14160
  80fe18:	10800017 	ldw	r2,0(r2)
  80fe1c:	103ee83a 	callr	r2
  80fe20:	e0bfff15 	stw	r2,-4(fp)
  80fe24:	00000306 	br	80fe34 <alt_get_errno+0x48>
  80fe28:	00802074 	movhi	r2,129
  80fe2c:	10951704 	addi	r2,r2,21596
  80fe30:	e0bfff15 	stw	r2,-4(fp)
  80fe34:	e0bfff17 	ldw	r2,-4(fp)
}
  80fe38:	e037883a 	mov	sp,fp
  80fe3c:	dfc00117 	ldw	ra,4(sp)
  80fe40:	df000017 	ldw	fp,0(sp)
  80fe44:	dec00204 	addi	sp,sp,8
  80fe48:	f800283a 	ret

0080fe4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80fe4c:	defff404 	addi	sp,sp,-48
  80fe50:	df000b15 	stw	fp,44(sp)
  80fe54:	df000b04 	addi	fp,sp,44
  80fe58:	e13ffb15 	stw	r4,-20(fp)
  80fe5c:	e17ffc15 	stw	r5,-16(fp)
  80fe60:	e1bffd15 	stw	r6,-12(fp)
  80fe64:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80fe68:	e03ff915 	stw	zero,-28(fp)
  80fe6c:	00802074 	movhi	r2,129
  80fe70:	10951f04 	addi	r2,r2,21628
  80fe74:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80fe78:	1005003a 	cmpeq	r2,r2,zero
  80fe7c:	1000411e 	bne	r2,zero,80ff84 <alt_alarm_start+0x138>
  {
    if (alarm)
  80fe80:	e0bffb17 	ldw	r2,-20(fp)
  80fe84:	1005003a 	cmpeq	r2,r2,zero
  80fe88:	10003b1e 	bne	r2,zero,80ff78 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80fe8c:	e0fffb17 	ldw	r3,-20(fp)
  80fe90:	e0bffd17 	ldw	r2,-12(fp)
  80fe94:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80fe98:	e0fffb17 	ldw	r3,-20(fp)
  80fe9c:	e0bffe17 	ldw	r2,-8(fp)
  80fea0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fea4:	0005303a 	rdctl	r2,status
  80fea8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80feac:	e0fff817 	ldw	r3,-32(fp)
  80feb0:	00bfff84 	movi	r2,-2
  80feb4:	1884703a 	and	r2,r3,r2
  80feb8:	1001703a 	wrctl	status,r2
  
  return context;
  80febc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80fec0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80fec4:	00802074 	movhi	r2,129
  80fec8:	10952004 	addi	r2,r2,21632
  80fecc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80fed0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80fed4:	e0fffc17 	ldw	r3,-16(fp)
  80fed8:	e0bff917 	ldw	r2,-28(fp)
  80fedc:	1885883a 	add	r2,r3,r2
  80fee0:	10c00044 	addi	r3,r2,1
  80fee4:	e0bffb17 	ldw	r2,-20(fp)
  80fee8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80feec:	e0bffb17 	ldw	r2,-20(fp)
  80fef0:	10c00217 	ldw	r3,8(r2)
  80fef4:	e0bff917 	ldw	r2,-28(fp)
  80fef8:	1880042e 	bgeu	r3,r2,80ff0c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80fefc:	e0fffb17 	ldw	r3,-20(fp)
  80ff00:	00800044 	movi	r2,1
  80ff04:	18800405 	stb	r2,16(r3)
  80ff08:	00000206 	br	80ff14 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80ff0c:	e0bffb17 	ldw	r2,-20(fp)
  80ff10:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ff14:	e0fffb17 	ldw	r3,-20(fp)
  80ff18:	00802074 	movhi	r2,129
  80ff1c:	108dd704 	addi	r2,r2,14172
  80ff20:	e0bff615 	stw	r2,-40(fp)
  80ff24:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ff28:	e0fff717 	ldw	r3,-36(fp)
  80ff2c:	e0bff617 	ldw	r2,-40(fp)
  80ff30:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ff34:	e0bff617 	ldw	r2,-40(fp)
  80ff38:	10c00017 	ldw	r3,0(r2)
  80ff3c:	e0bff717 	ldw	r2,-36(fp)
  80ff40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ff44:	e0bff617 	ldw	r2,-40(fp)
  80ff48:	10c00017 	ldw	r3,0(r2)
  80ff4c:	e0bff717 	ldw	r2,-36(fp)
  80ff50:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ff54:	e0fff617 	ldw	r3,-40(fp)
  80ff58:	e0bff717 	ldw	r2,-36(fp)
  80ff5c:	18800015 	stw	r2,0(r3)
  80ff60:	e0bffa17 	ldw	r2,-24(fp)
  80ff64:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff68:	e0bff517 	ldw	r2,-44(fp)
  80ff6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80ff70:	e03fff15 	stw	zero,-4(fp)
  80ff74:	00000506 	br	80ff8c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80ff78:	00bffa84 	movi	r2,-22
  80ff7c:	e0bfff15 	stw	r2,-4(fp)
  80ff80:	00000206 	br	80ff8c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80ff84:	00bfde84 	movi	r2,-134
  80ff88:	e0bfff15 	stw	r2,-4(fp)
  80ff8c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80ff90:	e037883a 	mov	sp,fp
  80ff94:	df000017 	ldw	fp,0(sp)
  80ff98:	dec00104 	addi	sp,sp,4
  80ff9c:	f800283a 	ret

0080ffa0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80ffa0:	defffe04 	addi	sp,sp,-8
  80ffa4:	df000115 	stw	fp,4(sp)
  80ffa8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ffac:	e03fff15 	stw	zero,-4(fp)
  80ffb0:	00000506 	br	80ffc8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80ffb4:	e0bfff17 	ldw	r2,-4(fp)
  80ffb8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ffbc:	e0bfff17 	ldw	r2,-4(fp)
  80ffc0:	10800804 	addi	r2,r2,32
  80ffc4:	e0bfff15 	stw	r2,-4(fp)
  80ffc8:	e0bfff17 	ldw	r2,-4(fp)
  80ffcc:	10820030 	cmpltui	r2,r2,2048
  80ffd0:	103ff81e 	bne	r2,zero,80ffb4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80ffd4:	e037883a 	mov	sp,fp
  80ffd8:	df000017 	ldw	fp,0(sp)
  80ffdc:	dec00104 	addi	sp,sp,4
  80ffe0:	f800283a 	ret

0080ffe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80ffe4:	defff904 	addi	sp,sp,-28
  80ffe8:	dfc00615 	stw	ra,24(sp)
  80ffec:	df000515 	stw	fp,20(sp)
  80fff0:	df000504 	addi	fp,sp,20
  80fff4:	e13ffd15 	stw	r4,-12(fp)
  80fff8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80fffc:	e0bffd17 	ldw	r2,-12(fp)
  810000:	1005003a 	cmpeq	r2,r2,zero
  810004:	1000041e 	bne	r2,zero,810018 <alt_dev_llist_insert+0x34>
  810008:	e0bffd17 	ldw	r2,-12(fp)
  81000c:	10800217 	ldw	r2,8(r2)
  810010:	1004c03a 	cmpne	r2,r2,zero
  810014:	1000071e 	bne	r2,zero,810034 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  810018:	08100980 	call	810098 <alt_get_errno>
  81001c:	1007883a 	mov	r3,r2
  810020:	00800584 	movi	r2,22
  810024:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810028:	00bffa84 	movi	r2,-22
  81002c:	e0bfff15 	stw	r2,-4(fp)
  810030:	00001306 	br	810080 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810034:	e0fffd17 	ldw	r3,-12(fp)
  810038:	e0bffe17 	ldw	r2,-8(fp)
  81003c:	e0bffb15 	stw	r2,-20(fp)
  810040:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810044:	e0fffc17 	ldw	r3,-16(fp)
  810048:	e0bffb17 	ldw	r2,-20(fp)
  81004c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810050:	e0bffb17 	ldw	r2,-20(fp)
  810054:	10c00017 	ldw	r3,0(r2)
  810058:	e0bffc17 	ldw	r2,-16(fp)
  81005c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810060:	e0bffb17 	ldw	r2,-20(fp)
  810064:	10c00017 	ldw	r3,0(r2)
  810068:	e0bffc17 	ldw	r2,-16(fp)
  81006c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810070:	e0fffb17 	ldw	r3,-20(fp)
  810074:	e0bffc17 	ldw	r2,-16(fp)
  810078:	18800015 	stw	r2,0(r3)

  return 0;  
  81007c:	e03fff15 	stw	zero,-4(fp)
  810080:	e0bfff17 	ldw	r2,-4(fp)
}
  810084:	e037883a 	mov	sp,fp
  810088:	dfc00117 	ldw	ra,4(sp)
  81008c:	df000017 	ldw	fp,0(sp)
  810090:	dec00204 	addi	sp,sp,8
  810094:	f800283a 	ret

00810098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810098:	defffd04 	addi	sp,sp,-12
  81009c:	dfc00215 	stw	ra,8(sp)
  8100a0:	df000115 	stw	fp,4(sp)
  8100a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8100a8:	00802074 	movhi	r2,129
  8100ac:	108dd404 	addi	r2,r2,14160
  8100b0:	10800017 	ldw	r2,0(r2)
  8100b4:	1005003a 	cmpeq	r2,r2,zero
  8100b8:	1000061e 	bne	r2,zero,8100d4 <alt_get_errno+0x3c>
  8100bc:	00802074 	movhi	r2,129
  8100c0:	108dd404 	addi	r2,r2,14160
  8100c4:	10800017 	ldw	r2,0(r2)
  8100c8:	103ee83a 	callr	r2
  8100cc:	e0bfff15 	stw	r2,-4(fp)
  8100d0:	00000306 	br	8100e0 <alt_get_errno+0x48>
  8100d4:	00802074 	movhi	r2,129
  8100d8:	10951704 	addi	r2,r2,21596
  8100dc:	e0bfff15 	stw	r2,-4(fp)
  8100e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8100e4:	e037883a 	mov	sp,fp
  8100e8:	dfc00117 	ldw	ra,4(sp)
  8100ec:	df000017 	ldw	fp,0(sp)
  8100f0:	dec00204 	addi	sp,sp,8
  8100f4:	f800283a 	ret

008100f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8100f8:	defffd04 	addi	sp,sp,-12
  8100fc:	dfc00215 	stw	ra,8(sp)
  810100:	df000115 	stw	fp,4(sp)
  810104:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  810108:	00bfff04 	movi	r2,-4
  81010c:	00c02074 	movhi	r3,129
  810110:	18c47204 	addi	r3,r3,4552
  810114:	1885883a 	add	r2,r3,r2
  810118:	e0bfff15 	stw	r2,-4(fp)
  81011c:	00000606 	br	810138 <_do_ctors+0x40>
        (*ctor) (); 
  810120:	e0bfff17 	ldw	r2,-4(fp)
  810124:	10800017 	ldw	r2,0(r2)
  810128:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81012c:	e0bfff17 	ldw	r2,-4(fp)
  810130:	10bfff04 	addi	r2,r2,-4
  810134:	e0bfff15 	stw	r2,-4(fp)
  810138:	e0ffff17 	ldw	r3,-4(fp)
  81013c:	00802074 	movhi	r2,129
  810140:	10847104 	addi	r2,r2,4548
  810144:	18bff62e 	bgeu	r3,r2,810120 <_do_ctors+0x28>
        (*ctor) (); 
}
  810148:	e037883a 	mov	sp,fp
  81014c:	dfc00117 	ldw	ra,4(sp)
  810150:	df000017 	ldw	fp,0(sp)
  810154:	dec00204 	addi	sp,sp,8
  810158:	f800283a 	ret

0081015c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81015c:	defffd04 	addi	sp,sp,-12
  810160:	dfc00215 	stw	ra,8(sp)
  810164:	df000115 	stw	fp,4(sp)
  810168:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81016c:	00bfff04 	movi	r2,-4
  810170:	00c02074 	movhi	r3,129
  810174:	18c47204 	addi	r3,r3,4552
  810178:	1885883a 	add	r2,r3,r2
  81017c:	e0bfff15 	stw	r2,-4(fp)
  810180:	00000606 	br	81019c <_do_dtors+0x40>
        (*dtor) (); 
  810184:	e0bfff17 	ldw	r2,-4(fp)
  810188:	10800017 	ldw	r2,0(r2)
  81018c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  810190:	e0bfff17 	ldw	r2,-4(fp)
  810194:	10bfff04 	addi	r2,r2,-4
  810198:	e0bfff15 	stw	r2,-4(fp)
  81019c:	e0ffff17 	ldw	r3,-4(fp)
  8101a0:	00802074 	movhi	r2,129
  8101a4:	10847204 	addi	r2,r2,4552
  8101a8:	18bff62e 	bgeu	r3,r2,810184 <_do_dtors+0x28>
        (*dtor) (); 
}
  8101ac:	e037883a 	mov	sp,fp
  8101b0:	dfc00117 	ldw	ra,4(sp)
  8101b4:	df000017 	ldw	fp,0(sp)
  8101b8:	dec00204 	addi	sp,sp,8
  8101bc:	f800283a 	ret

008101c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8101c0:	defffe04 	addi	sp,sp,-8
  8101c4:	dfc00115 	stw	ra,4(sp)
  8101c8:	df000015 	stw	fp,0(sp)
  8101cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8101d0:	0009883a 	mov	r4,zero
  8101d4:	01440004 	movi	r5,4096
  8101d8:	0810cec0 	call	810cec <alt_icache_flush>
#endif
}
  8101dc:	e037883a 	mov	sp,fp
  8101e0:	dfc00117 	ldw	ra,4(sp)
  8101e4:	df000017 	ldw	fp,0(sp)
  8101e8:	dec00204 	addi	sp,sp,8
  8101ec:	f800283a 	ret

008101f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8101f0:	defff904 	addi	sp,sp,-28
  8101f4:	dfc00615 	stw	ra,24(sp)
  8101f8:	df000515 	stw	fp,20(sp)
  8101fc:	df000504 	addi	fp,sp,20
  810200:	e13ffc15 	stw	r4,-16(fp)
  810204:	e17ffd15 	stw	r5,-12(fp)
  810208:	e1bffe15 	stw	r6,-8(fp)
  81020c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  810210:	e0800217 	ldw	r2,8(fp)
  810214:	d8800015 	stw	r2,0(sp)
  810218:	e13ffc17 	ldw	r4,-16(fp)
  81021c:	e17ffd17 	ldw	r5,-12(fp)
  810220:	e1bffe17 	ldw	r6,-8(fp)
  810224:	e1ffff17 	ldw	r7,-4(fp)
  810228:	08103c40 	call	8103c4 <alt_iic_isr_register>
}  
  81022c:	e037883a 	mov	sp,fp
  810230:	dfc00117 	ldw	ra,4(sp)
  810234:	df000017 	ldw	fp,0(sp)
  810238:	dec00204 	addi	sp,sp,8
  81023c:	f800283a 	ret

00810240 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  810240:	defff904 	addi	sp,sp,-28
  810244:	df000615 	stw	fp,24(sp)
  810248:	df000604 	addi	fp,sp,24
  81024c:	e13ffe15 	stw	r4,-8(fp)
  810250:	e17fff15 	stw	r5,-4(fp)
  810254:	e0bfff17 	ldw	r2,-4(fp)
  810258:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81025c:	0005303a 	rdctl	r2,status
  810260:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810264:	e0fffb17 	ldw	r3,-20(fp)
  810268:	00bfff84 	movi	r2,-2
  81026c:	1884703a 	and	r2,r3,r2
  810270:	1001703a 	wrctl	status,r2
  
  return context;
  810274:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810278:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  81027c:	e0fffc17 	ldw	r3,-16(fp)
  810280:	00800044 	movi	r2,1
  810284:	10c4983a 	sll	r2,r2,r3
  810288:	1007883a 	mov	r3,r2
  81028c:	00802074 	movhi	r2,129
  810290:	10951b04 	addi	r2,r2,21612
  810294:	10800017 	ldw	r2,0(r2)
  810298:	1886b03a 	or	r3,r3,r2
  81029c:	00802074 	movhi	r2,129
  8102a0:	10951b04 	addi	r2,r2,21612
  8102a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8102a8:	00802074 	movhi	r2,129
  8102ac:	10951b04 	addi	r2,r2,21612
  8102b0:	10800017 	ldw	r2,0(r2)
  8102b4:	100170fa 	wrctl	ienable,r2
  8102b8:	e0bffd17 	ldw	r2,-12(fp)
  8102bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8102c0:	e0bffa17 	ldw	r2,-24(fp)
  8102c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8102c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8102cc:	e037883a 	mov	sp,fp
  8102d0:	df000017 	ldw	fp,0(sp)
  8102d4:	dec00104 	addi	sp,sp,4
  8102d8:	f800283a 	ret

008102dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8102dc:	defff904 	addi	sp,sp,-28
  8102e0:	df000615 	stw	fp,24(sp)
  8102e4:	df000604 	addi	fp,sp,24
  8102e8:	e13ffe15 	stw	r4,-8(fp)
  8102ec:	e17fff15 	stw	r5,-4(fp)
  8102f0:	e0bfff17 	ldw	r2,-4(fp)
  8102f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102f8:	0005303a 	rdctl	r2,status
  8102fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810300:	e0fffb17 	ldw	r3,-20(fp)
  810304:	00bfff84 	movi	r2,-2
  810308:	1884703a 	and	r2,r3,r2
  81030c:	1001703a 	wrctl	status,r2
  
  return context;
  810310:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810314:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  810318:	e0fffc17 	ldw	r3,-16(fp)
  81031c:	00800044 	movi	r2,1
  810320:	10c4983a 	sll	r2,r2,r3
  810324:	0084303a 	nor	r2,zero,r2
  810328:	1007883a 	mov	r3,r2
  81032c:	00802074 	movhi	r2,129
  810330:	10951b04 	addi	r2,r2,21612
  810334:	10800017 	ldw	r2,0(r2)
  810338:	1886703a 	and	r3,r3,r2
  81033c:	00802074 	movhi	r2,129
  810340:	10951b04 	addi	r2,r2,21612
  810344:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810348:	00802074 	movhi	r2,129
  81034c:	10951b04 	addi	r2,r2,21612
  810350:	10800017 	ldw	r2,0(r2)
  810354:	100170fa 	wrctl	ienable,r2
  810358:	e0bffd17 	ldw	r2,-12(fp)
  81035c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810360:	e0bffa17 	ldw	r2,-24(fp)
  810364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810368:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  81036c:	e037883a 	mov	sp,fp
  810370:	df000017 	ldw	fp,0(sp)
  810374:	dec00104 	addi	sp,sp,4
  810378:	f800283a 	ret

0081037c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81037c:	defffc04 	addi	sp,sp,-16
  810380:	df000315 	stw	fp,12(sp)
  810384:	df000304 	addi	fp,sp,12
  810388:	e13ffe15 	stw	r4,-8(fp)
  81038c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  810390:	000530fa 	rdctl	r2,ienable
  810394:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  810398:	e0ffff17 	ldw	r3,-4(fp)
  81039c:	00800044 	movi	r2,1
  8103a0:	10c4983a 	sll	r2,r2,r3
  8103a4:	1007883a 	mov	r3,r2
  8103a8:	e0bffd17 	ldw	r2,-12(fp)
  8103ac:	1884703a 	and	r2,r3,r2
  8103b0:	1004c03a 	cmpne	r2,r2,zero
}
  8103b4:	e037883a 	mov	sp,fp
  8103b8:	df000017 	ldw	fp,0(sp)
  8103bc:	dec00104 	addi	sp,sp,4
  8103c0:	f800283a 	ret

008103c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8103c4:	defff404 	addi	sp,sp,-48
  8103c8:	dfc00b15 	stw	ra,44(sp)
  8103cc:	df000a15 	stw	fp,40(sp)
  8103d0:	df000a04 	addi	fp,sp,40
  8103d4:	e13ffb15 	stw	r4,-20(fp)
  8103d8:	e17ffc15 	stw	r5,-16(fp)
  8103dc:	e1bffd15 	stw	r6,-12(fp)
  8103e0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8103e4:	00bffa84 	movi	r2,-22
  8103e8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8103ec:	e0bffc17 	ldw	r2,-16(fp)
  8103f0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8103f4:	e0bff917 	ldw	r2,-28(fp)
  8103f8:	10800808 	cmpgei	r2,r2,32
  8103fc:	1000291e 	bne	r2,zero,8104a4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810400:	0005303a 	rdctl	r2,status
  810404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810408:	e0fff717 	ldw	r3,-36(fp)
  81040c:	00bfff84 	movi	r2,-2
  810410:	1884703a 	and	r2,r3,r2
  810414:	1001703a 	wrctl	status,r2
  
  return context;
  810418:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81041c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  810420:	e0bff917 	ldw	r2,-28(fp)
  810424:	00c02074 	movhi	r3,129
  810428:	18d72b04 	addi	r3,r3,23724
  81042c:	100490fa 	slli	r2,r2,3
  810430:	10c7883a 	add	r3,r2,r3
  810434:	e0bffd17 	ldw	r2,-12(fp)
  810438:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  81043c:	e0bff917 	ldw	r2,-28(fp)
  810440:	00c02074 	movhi	r3,129
  810444:	18d72b04 	addi	r3,r3,23724
  810448:	100490fa 	slli	r2,r2,3
  81044c:	10c5883a 	add	r2,r2,r3
  810450:	10c00104 	addi	r3,r2,4
  810454:	e0bffe17 	ldw	r2,-8(fp)
  810458:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81045c:	e0bffd17 	ldw	r2,-12(fp)
  810460:	1005003a 	cmpeq	r2,r2,zero
  810464:	1000051e 	bne	r2,zero,81047c <alt_iic_isr_register+0xb8>
  810468:	e17ff917 	ldw	r5,-28(fp)
  81046c:	e13ffb17 	ldw	r4,-20(fp)
  810470:	08102400 	call	810240 <alt_ic_irq_enable>
  810474:	e0bfff15 	stw	r2,-4(fp)
  810478:	00000406 	br	81048c <alt_iic_isr_register+0xc8>
  81047c:	e17ff917 	ldw	r5,-28(fp)
  810480:	e13ffb17 	ldw	r4,-20(fp)
  810484:	08102dc0 	call	8102dc <alt_ic_irq_disable>
  810488:	e0bfff15 	stw	r2,-4(fp)
  81048c:	e0bfff17 	ldw	r2,-4(fp)
  810490:	e0bffa15 	stw	r2,-24(fp)
  810494:	e0bff817 	ldw	r2,-32(fp)
  810498:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81049c:	e0bff617 	ldw	r2,-40(fp)
  8104a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8104a4:	e0bffa17 	ldw	r2,-24(fp)
}
  8104a8:	e037883a 	mov	sp,fp
  8104ac:	dfc00117 	ldw	ra,4(sp)
  8104b0:	df000017 	ldw	fp,0(sp)
  8104b4:	dec00204 	addi	sp,sp,8
  8104b8:	f800283a 	ret

008104bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8104bc:	defff904 	addi	sp,sp,-28
  8104c0:	dfc00615 	stw	ra,24(sp)
  8104c4:	df000515 	stw	fp,20(sp)
  8104c8:	df000504 	addi	fp,sp,20
  8104cc:	e13ffc15 	stw	r4,-16(fp)
  8104d0:	e17ffd15 	stw	r5,-12(fp)
  8104d4:	e1bffe15 	stw	r6,-8(fp)
  8104d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8104dc:	e13ffd17 	ldw	r4,-12(fp)
  8104e0:	e17ffe17 	ldw	r5,-8(fp)
  8104e4:	e1bfff17 	ldw	r6,-4(fp)
  8104e8:	08106d40 	call	8106d4 <open>
  8104ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8104f0:	e0bffb17 	ldw	r2,-20(fp)
  8104f4:	1004803a 	cmplt	r2,r2,zero
  8104f8:	10001c1e 	bne	r2,zero,81056c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8104fc:	e0bffb17 	ldw	r2,-20(fp)
  810500:	00c02074 	movhi	r3,129
  810504:	18c8b204 	addi	r3,r3,8904
  810508:	10800324 	muli	r2,r2,12
  81050c:	10c5883a 	add	r2,r2,r3
  810510:	10c00017 	ldw	r3,0(r2)
  810514:	e0bffc17 	ldw	r2,-16(fp)
  810518:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81051c:	e0bffb17 	ldw	r2,-20(fp)
  810520:	00c02074 	movhi	r3,129
  810524:	18c8b204 	addi	r3,r3,8904
  810528:	10800324 	muli	r2,r2,12
  81052c:	10c5883a 	add	r2,r2,r3
  810530:	10800104 	addi	r2,r2,4
  810534:	10c00017 	ldw	r3,0(r2)
  810538:	e0bffc17 	ldw	r2,-16(fp)
  81053c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  810540:	e0bffb17 	ldw	r2,-20(fp)
  810544:	00c02074 	movhi	r3,129
  810548:	18c8b204 	addi	r3,r3,8904
  81054c:	10800324 	muli	r2,r2,12
  810550:	10c5883a 	add	r2,r2,r3
  810554:	10800204 	addi	r2,r2,8
  810558:	10c00017 	ldw	r3,0(r2)
  81055c:	e0bffc17 	ldw	r2,-16(fp)
  810560:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  810564:	e13ffb17 	ldw	r4,-20(fp)
  810568:	080e44c0 	call	80e44c <alt_release_fd>
  }
} 
  81056c:	e037883a 	mov	sp,fp
  810570:	dfc00117 	ldw	ra,4(sp)
  810574:	df000017 	ldw	fp,0(sp)
  810578:	dec00204 	addi	sp,sp,8
  81057c:	f800283a 	ret

00810580 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  810580:	defffb04 	addi	sp,sp,-20
  810584:	dfc00415 	stw	ra,16(sp)
  810588:	df000315 	stw	fp,12(sp)
  81058c:	df000304 	addi	fp,sp,12
  810590:	e13ffd15 	stw	r4,-12(fp)
  810594:	e17ffe15 	stw	r5,-8(fp)
  810598:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81059c:	01002074 	movhi	r4,129
  8105a0:	2108b504 	addi	r4,r4,8916
  8105a4:	e17ffd17 	ldw	r5,-12(fp)
  8105a8:	01800044 	movi	r6,1
  8105ac:	01c07fc4 	movi	r7,511
  8105b0:	08104bc0 	call	8104bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8105b4:	01002074 	movhi	r4,129
  8105b8:	2108b204 	addi	r4,r4,8904
  8105bc:	e17ffe17 	ldw	r5,-8(fp)
  8105c0:	000d883a 	mov	r6,zero
  8105c4:	01c07fc4 	movi	r7,511
  8105c8:	08104bc0 	call	8104bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8105cc:	01002074 	movhi	r4,129
  8105d0:	2108b804 	addi	r4,r4,8928
  8105d4:	e17fff17 	ldw	r5,-4(fp)
  8105d8:	01800044 	movi	r6,1
  8105dc:	01c07fc4 	movi	r7,511
  8105e0:	08104bc0 	call	8104bc <alt_open_fd>
}  
  8105e4:	e037883a 	mov	sp,fp
  8105e8:	dfc00117 	ldw	ra,4(sp)
  8105ec:	df000017 	ldw	fp,0(sp)
  8105f0:	dec00204 	addi	sp,sp,8
  8105f4:	f800283a 	ret

008105f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8105f8:	defffc04 	addi	sp,sp,-16
  8105fc:	df000315 	stw	fp,12(sp)
  810600:	df000304 	addi	fp,sp,12
  810604:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810608:	e0bffe17 	ldw	r2,-8(fp)
  81060c:	10800217 	ldw	r2,8(r2)
  810610:	10d00034 	orhi	r3,r2,16384
  810614:	e0bffe17 	ldw	r2,-8(fp)
  810618:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81061c:	e03ffd15 	stw	zero,-12(fp)
  810620:	00002006 	br	8106a4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810624:	e0bffd17 	ldw	r2,-12(fp)
  810628:	00c02074 	movhi	r3,129
  81062c:	18c8b204 	addi	r3,r3,8904
  810630:	10800324 	muli	r2,r2,12
  810634:	10c5883a 	add	r2,r2,r3
  810638:	10c00017 	ldw	r3,0(r2)
  81063c:	e0bffe17 	ldw	r2,-8(fp)
  810640:	10800017 	ldw	r2,0(r2)
  810644:	1880141e 	bne	r3,r2,810698 <alt_file_locked+0xa0>
  810648:	e0bffd17 	ldw	r2,-12(fp)
  81064c:	00c02074 	movhi	r3,129
  810650:	18c8b204 	addi	r3,r3,8904
  810654:	10800324 	muli	r2,r2,12
  810658:	10c5883a 	add	r2,r2,r3
  81065c:	10800204 	addi	r2,r2,8
  810660:	10800017 	ldw	r2,0(r2)
  810664:	1004403a 	cmpge	r2,r2,zero
  810668:	10000b1e 	bne	r2,zero,810698 <alt_file_locked+0xa0>
  81066c:	e0bffd17 	ldw	r2,-12(fp)
  810670:	10800324 	muli	r2,r2,12
  810674:	1007883a 	mov	r3,r2
  810678:	00802074 	movhi	r2,129
  81067c:	1088b204 	addi	r2,r2,8904
  810680:	1887883a 	add	r3,r3,r2
  810684:	e0bffe17 	ldw	r2,-8(fp)
  810688:	18800326 	beq	r3,r2,810698 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81068c:	00bffcc4 	movi	r2,-13
  810690:	e0bfff15 	stw	r2,-4(fp)
  810694:	00000a06 	br	8106c0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810698:	e0bffd17 	ldw	r2,-12(fp)
  81069c:	10800044 	addi	r2,r2,1
  8106a0:	e0bffd15 	stw	r2,-12(fp)
  8106a4:	00802074 	movhi	r2,129
  8106a8:	108dd304 	addi	r2,r2,14156
  8106ac:	10800017 	ldw	r2,0(r2)
  8106b0:	1007883a 	mov	r3,r2
  8106b4:	e0bffd17 	ldw	r2,-12(fp)
  8106b8:	18bfda2e 	bgeu	r3,r2,810624 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8106bc:	e03fff15 	stw	zero,-4(fp)
  8106c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8106c4:	e037883a 	mov	sp,fp
  8106c8:	df000017 	ldw	fp,0(sp)
  8106cc:	dec00104 	addi	sp,sp,4
  8106d0:	f800283a 	ret

008106d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8106d4:	defff404 	addi	sp,sp,-48
  8106d8:	dfc00b15 	stw	ra,44(sp)
  8106dc:	df000a15 	stw	fp,40(sp)
  8106e0:	df000a04 	addi	fp,sp,40
  8106e4:	e13ffb15 	stw	r4,-20(fp)
  8106e8:	e17ffc15 	stw	r5,-16(fp)
  8106ec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8106f0:	00bfffc4 	movi	r2,-1
  8106f4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8106f8:	00bffb44 	movi	r2,-19
  8106fc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  810700:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810704:	e13ffb17 	ldw	r4,-20(fp)
  810708:	01402074 	movhi	r5,129
  81070c:	294dd104 	addi	r5,r5,14148
  810710:	0810a800 	call	810a80 <alt_find_dev>
  810714:	e0bffa15 	stw	r2,-24(fp)
  810718:	e0bffa17 	ldw	r2,-24(fp)
  81071c:	1004c03a 	cmpne	r2,r2,zero
  810720:	1000051e 	bne	r2,zero,810738 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810724:	e13ffb17 	ldw	r4,-20(fp)
  810728:	0810b140 	call	810b14 <alt_find_file>
  81072c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  810730:	00800044 	movi	r2,1
  810734:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810738:	e0bffa17 	ldw	r2,-24(fp)
  81073c:	1005003a 	cmpeq	r2,r2,zero
  810740:	1000301e 	bne	r2,zero,810804 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810744:	e13ffa17 	ldw	r4,-24(fp)
  810748:	0810c340 	call	810c34 <alt_get_fd>
  81074c:	e0bff815 	stw	r2,-32(fp)
  810750:	e0bff817 	ldw	r2,-32(fp)
  810754:	1004403a 	cmpge	r2,r2,zero
  810758:	1000031e 	bne	r2,zero,810768 <open+0x94>
    {
      status = index;
  81075c:	e0bff817 	ldw	r2,-32(fp)
  810760:	e0bff715 	stw	r2,-36(fp)
  810764:	00002906 	br	81080c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  810768:	e0bff817 	ldw	r2,-32(fp)
  81076c:	10800324 	muli	r2,r2,12
  810770:	1007883a 	mov	r3,r2
  810774:	00802074 	movhi	r2,129
  810778:	1088b204 	addi	r2,r2,8904
  81077c:	1885883a 	add	r2,r3,r2
  810780:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810784:	e0fffc17 	ldw	r3,-16(fp)
  810788:	00900034 	movhi	r2,16384
  81078c:	10bfffc4 	addi	r2,r2,-1
  810790:	1886703a 	and	r3,r3,r2
  810794:	e0bff917 	ldw	r2,-28(fp)
  810798:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81079c:	e0bff617 	ldw	r2,-40(fp)
  8107a0:	1004c03a 	cmpne	r2,r2,zero
  8107a4:	1000061e 	bne	r2,zero,8107c0 <open+0xec>
  8107a8:	e13ff917 	ldw	r4,-28(fp)
  8107ac:	08105f80 	call	8105f8 <alt_file_locked>
  8107b0:	e0bff715 	stw	r2,-36(fp)
  8107b4:	e0bff717 	ldw	r2,-36(fp)
  8107b8:	1004803a 	cmplt	r2,r2,zero
  8107bc:	1000131e 	bne	r2,zero,81080c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8107c0:	e0bffa17 	ldw	r2,-24(fp)
  8107c4:	10800317 	ldw	r2,12(r2)
  8107c8:	1005003a 	cmpeq	r2,r2,zero
  8107cc:	1000091e 	bne	r2,zero,8107f4 <open+0x120>
  8107d0:	e0bffa17 	ldw	r2,-24(fp)
  8107d4:	10800317 	ldw	r2,12(r2)
  8107d8:	e13ff917 	ldw	r4,-28(fp)
  8107dc:	e17ffb17 	ldw	r5,-20(fp)
  8107e0:	e1bffc17 	ldw	r6,-16(fp)
  8107e4:	e1fffd17 	ldw	r7,-12(fp)
  8107e8:	103ee83a 	callr	r2
  8107ec:	e0bfff15 	stw	r2,-4(fp)
  8107f0:	00000106 	br	8107f8 <open+0x124>
  8107f4:	e03fff15 	stw	zero,-4(fp)
  8107f8:	e0bfff17 	ldw	r2,-4(fp)
  8107fc:	e0bff715 	stw	r2,-36(fp)
  810800:	00000206 	br	81080c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810804:	00bffb44 	movi	r2,-19
  810808:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81080c:	e0bff717 	ldw	r2,-36(fp)
  810810:	1004403a 	cmpge	r2,r2,zero
  810814:	1000091e 	bne	r2,zero,81083c <open+0x168>
  {
    alt_release_fd (index);  
  810818:	e13ff817 	ldw	r4,-32(fp)
  81081c:	080e44c0 	call	80e44c <alt_release_fd>
    ALT_ERRNO = -status;
  810820:	081085c0 	call	81085c <alt_get_errno>
  810824:	e0fff717 	ldw	r3,-36(fp)
  810828:	00c7c83a 	sub	r3,zero,r3
  81082c:	10c00015 	stw	r3,0(r2)
    return -1;
  810830:	00bfffc4 	movi	r2,-1
  810834:	e0bffe15 	stw	r2,-8(fp)
  810838:	00000206 	br	810844 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81083c:	e0bff817 	ldw	r2,-32(fp)
  810840:	e0bffe15 	stw	r2,-8(fp)
  810844:	e0bffe17 	ldw	r2,-8(fp)
}
  810848:	e037883a 	mov	sp,fp
  81084c:	dfc00117 	ldw	ra,4(sp)
  810850:	df000017 	ldw	fp,0(sp)
  810854:	dec00204 	addi	sp,sp,8
  810858:	f800283a 	ret

0081085c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81085c:	defffd04 	addi	sp,sp,-12
  810860:	dfc00215 	stw	ra,8(sp)
  810864:	df000115 	stw	fp,4(sp)
  810868:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81086c:	00802074 	movhi	r2,129
  810870:	108dd404 	addi	r2,r2,14160
  810874:	10800017 	ldw	r2,0(r2)
  810878:	1005003a 	cmpeq	r2,r2,zero
  81087c:	1000061e 	bne	r2,zero,810898 <alt_get_errno+0x3c>
  810880:	00802074 	movhi	r2,129
  810884:	108dd404 	addi	r2,r2,14160
  810888:	10800017 	ldw	r2,0(r2)
  81088c:	103ee83a 	callr	r2
  810890:	e0bfff15 	stw	r2,-4(fp)
  810894:	00000306 	br	8108a4 <alt_get_errno+0x48>
  810898:	00802074 	movhi	r2,129
  81089c:	10951704 	addi	r2,r2,21596
  8108a0:	e0bfff15 	stw	r2,-4(fp)
  8108a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8108a8:	e037883a 	mov	sp,fp
  8108ac:	dfc00117 	ldw	ra,4(sp)
  8108b0:	df000017 	ldw	fp,0(sp)
  8108b4:	dec00204 	addi	sp,sp,8
  8108b8:	f800283a 	ret

008108bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8108bc:	defffa04 	addi	sp,sp,-24
  8108c0:	df000515 	stw	fp,20(sp)
  8108c4:	df000504 	addi	fp,sp,20
  8108c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108cc:	0005303a 	rdctl	r2,status
  8108d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8108d4:	e0fffd17 	ldw	r3,-12(fp)
  8108d8:	00bfff84 	movi	r2,-2
  8108dc:	1884703a 	and	r2,r3,r2
  8108e0:	1001703a 	wrctl	status,r2
  
  return context;
  8108e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8108e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8108ec:	e0bfff17 	ldw	r2,-4(fp)
  8108f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8108f4:	e0bffc17 	ldw	r2,-16(fp)
  8108f8:	10c00017 	ldw	r3,0(r2)
  8108fc:	e0bffc17 	ldw	r2,-16(fp)
  810900:	10800117 	ldw	r2,4(r2)
  810904:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  810908:	e0bffc17 	ldw	r2,-16(fp)
  81090c:	10c00117 	ldw	r3,4(r2)
  810910:	e0bffc17 	ldw	r2,-16(fp)
  810914:	10800017 	ldw	r2,0(r2)
  810918:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81091c:	e0fffc17 	ldw	r3,-16(fp)
  810920:	e0bffc17 	ldw	r2,-16(fp)
  810924:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  810928:	e0fffc17 	ldw	r3,-16(fp)
  81092c:	e0bffc17 	ldw	r2,-16(fp)
  810930:	18800015 	stw	r2,0(r3)
  810934:	e0bffe17 	ldw	r2,-8(fp)
  810938:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81093c:	e0bffb17 	ldw	r2,-20(fp)
  810940:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810944:	e037883a 	mov	sp,fp
  810948:	df000017 	ldw	fp,0(sp)
  81094c:	dec00104 	addi	sp,sp,4
  810950:	f800283a 	ret

00810954 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810954:	defffb04 	addi	sp,sp,-20
  810958:	dfc00415 	stw	ra,16(sp)
  81095c:	df000315 	stw	fp,12(sp)
  810960:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810964:	d0a07c17 	ldw	r2,-32272(gp)
  810968:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81096c:	d0a7c517 	ldw	r2,-24812(gp)
  810970:	10800044 	addi	r2,r2,1
  810974:	d0a7c515 	stw	r2,-24812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810978:	00003106 	br	810a40 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81097c:	e0bffe17 	ldw	r2,-8(fp)
  810980:	10800017 	ldw	r2,0(r2)
  810984:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810988:	e0bffe17 	ldw	r2,-8(fp)
  81098c:	10800403 	ldbu	r2,16(r2)
  810990:	10803fcc 	andi	r2,r2,255
  810994:	1005003a 	cmpeq	r2,r2,zero
  810998:	1000051e 	bne	r2,zero,8109b0 <alt_tick+0x5c>
  81099c:	d0a7c517 	ldw	r2,-24812(gp)
  8109a0:	1004c03a 	cmpne	r2,r2,zero
  8109a4:	1000021e 	bne	r2,zero,8109b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8109a8:	e0bffe17 	ldw	r2,-8(fp)
  8109ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8109b0:	e0bffe17 	ldw	r2,-8(fp)
  8109b4:	10c00217 	ldw	r3,8(r2)
  8109b8:	d0a7c517 	ldw	r2,-24812(gp)
  8109bc:	10c01e36 	bltu	r2,r3,810a38 <alt_tick+0xe4>
  8109c0:	e0bffe17 	ldw	r2,-8(fp)
  8109c4:	10800403 	ldbu	r2,16(r2)
  8109c8:	10803fcc 	andi	r2,r2,255
  8109cc:	1004c03a 	cmpne	r2,r2,zero
  8109d0:	1000191e 	bne	r2,zero,810a38 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8109d4:	e0bffe17 	ldw	r2,-8(fp)
  8109d8:	10c00317 	ldw	r3,12(r2)
  8109dc:	e0bffe17 	ldw	r2,-8(fp)
  8109e0:	11000517 	ldw	r4,20(r2)
  8109e4:	183ee83a 	callr	r3
  8109e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8109ec:	e0bffd17 	ldw	r2,-12(fp)
  8109f0:	1004c03a 	cmpne	r2,r2,zero
  8109f4:	1000031e 	bne	r2,zero,810a04 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8109f8:	e13ffe17 	ldw	r4,-8(fp)
  8109fc:	08108bc0 	call	8108bc <alt_alarm_stop>
  810a00:	00000d06 	br	810a38 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  810a04:	e0bffe17 	ldw	r2,-8(fp)
  810a08:	10c00217 	ldw	r3,8(r2)
  810a0c:	e0bffd17 	ldw	r2,-12(fp)
  810a10:	1887883a 	add	r3,r3,r2
  810a14:	e0bffe17 	ldw	r2,-8(fp)
  810a18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810a1c:	e0bffe17 	ldw	r2,-8(fp)
  810a20:	10c00217 	ldw	r3,8(r2)
  810a24:	d0a7c517 	ldw	r2,-24812(gp)
  810a28:	1880032e 	bgeu	r3,r2,810a38 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  810a2c:	e0fffe17 	ldw	r3,-8(fp)
  810a30:	00800044 	movi	r2,1
  810a34:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  810a38:	e0bfff17 	ldw	r2,-4(fp)
  810a3c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810a40:	d0e07c04 	addi	r3,gp,-32272
  810a44:	e0bffe17 	ldw	r2,-8(fp)
  810a48:	10ffcc1e 	bne	r2,r3,81097c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  810a4c:	e037883a 	mov	sp,fp
  810a50:	dfc00117 	ldw	ra,4(sp)
  810a54:	df000017 	ldw	fp,0(sp)
  810a58:	dec00204 	addi	sp,sp,8
  810a5c:	f800283a 	ret

00810a60 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  810a60:	deffff04 	addi	sp,sp,-4
  810a64:	df000015 	stw	fp,0(sp)
  810a68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  810a6c:	000170fa 	wrctl	ienable,zero
}
  810a70:	e037883a 	mov	sp,fp
  810a74:	df000017 	ldw	fp,0(sp)
  810a78:	dec00104 	addi	sp,sp,4
  810a7c:	f800283a 	ret

00810a80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810a80:	defff904 	addi	sp,sp,-28
  810a84:	dfc00615 	stw	ra,24(sp)
  810a88:	df000515 	stw	fp,20(sp)
  810a8c:	df000504 	addi	fp,sp,20
  810a90:	e13ffd15 	stw	r4,-12(fp)
  810a94:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  810a98:	e0bffe17 	ldw	r2,-8(fp)
  810a9c:	10800017 	ldw	r2,0(r2)
  810aa0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  810aa4:	e13ffd17 	ldw	r4,-12(fp)
  810aa8:	08049640 	call	804964 <strlen>
  810aac:	10800044 	addi	r2,r2,1
  810ab0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810ab4:	00000d06 	br	810aec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  810ab8:	e0bffc17 	ldw	r2,-16(fp)
  810abc:	11000217 	ldw	r4,8(r2)
  810ac0:	e1bffb17 	ldw	r6,-20(fp)
  810ac4:	e17ffd17 	ldw	r5,-12(fp)
  810ac8:	0810dc80 	call	810dc8 <memcmp>
  810acc:	1004c03a 	cmpne	r2,r2,zero
  810ad0:	1000031e 	bne	r2,zero,810ae0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  810ad4:	e0bffc17 	ldw	r2,-16(fp)
  810ad8:	e0bfff15 	stw	r2,-4(fp)
  810adc:	00000706 	br	810afc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  810ae0:	e0bffc17 	ldw	r2,-16(fp)
  810ae4:	10800017 	ldw	r2,0(r2)
  810ae8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  810aec:	e0fffe17 	ldw	r3,-8(fp)
  810af0:	e0bffc17 	ldw	r2,-16(fp)
  810af4:	10fff01e 	bne	r2,r3,810ab8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810af8:	e03fff15 	stw	zero,-4(fp)
  810afc:	e0bfff17 	ldw	r2,-4(fp)
}
  810b00:	e037883a 	mov	sp,fp
  810b04:	dfc00117 	ldw	ra,4(sp)
  810b08:	df000017 	ldw	fp,0(sp)
  810b0c:	dec00204 	addi	sp,sp,8
  810b10:	f800283a 	ret

00810b14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810b14:	defffa04 	addi	sp,sp,-24
  810b18:	dfc00515 	stw	ra,20(sp)
  810b1c:	df000415 	stw	fp,16(sp)
  810b20:	df000404 	addi	fp,sp,16
  810b24:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810b28:	00802074 	movhi	r2,129
  810b2c:	108dcf04 	addi	r2,r2,14140
  810b30:	10800017 	ldw	r2,0(r2)
  810b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810b38:	00003306 	br	810c08 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  810b3c:	e0bffd17 	ldw	r2,-12(fp)
  810b40:	11000217 	ldw	r4,8(r2)
  810b44:	08049640 	call	804964 <strlen>
  810b48:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  810b4c:	e0bffd17 	ldw	r2,-12(fp)
  810b50:	10c00217 	ldw	r3,8(r2)
  810b54:	e0bffc17 	ldw	r2,-16(fp)
  810b58:	1885883a 	add	r2,r3,r2
  810b5c:	10bfffc4 	addi	r2,r2,-1
  810b60:	10800003 	ldbu	r2,0(r2)
  810b64:	10803fcc 	andi	r2,r2,255
  810b68:	1080201c 	xori	r2,r2,128
  810b6c:	10bfe004 	addi	r2,r2,-128
  810b70:	10800bd8 	cmpnei	r2,r2,47
  810b74:	1000031e 	bne	r2,zero,810b84 <alt_find_file+0x70>
    {
      len -= 1;
  810b78:	e0bffc17 	ldw	r2,-16(fp)
  810b7c:	10bfffc4 	addi	r2,r2,-1
  810b80:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810b84:	e0bffc17 	ldw	r2,-16(fp)
  810b88:	1007883a 	mov	r3,r2
  810b8c:	e0bffe17 	ldw	r2,-8(fp)
  810b90:	1885883a 	add	r2,r3,r2
  810b94:	10800003 	ldbu	r2,0(r2)
  810b98:	10803fcc 	andi	r2,r2,255
  810b9c:	1080201c 	xori	r2,r2,128
  810ba0:	10bfe004 	addi	r2,r2,-128
  810ba4:	10800be0 	cmpeqi	r2,r2,47
  810ba8:	10000a1e 	bne	r2,zero,810bd4 <alt_find_file+0xc0>
  810bac:	e0bffc17 	ldw	r2,-16(fp)
  810bb0:	1007883a 	mov	r3,r2
  810bb4:	e0bffe17 	ldw	r2,-8(fp)
  810bb8:	1885883a 	add	r2,r3,r2
  810bbc:	10800003 	ldbu	r2,0(r2)
  810bc0:	10803fcc 	andi	r2,r2,255
  810bc4:	1080201c 	xori	r2,r2,128
  810bc8:	10bfe004 	addi	r2,r2,-128
  810bcc:	1004c03a 	cmpne	r2,r2,zero
  810bd0:	10000a1e 	bne	r2,zero,810bfc <alt_find_file+0xe8>
  810bd4:	e0bffd17 	ldw	r2,-12(fp)
  810bd8:	11000217 	ldw	r4,8(r2)
  810bdc:	e1bffc17 	ldw	r6,-16(fp)
  810be0:	e17ffe17 	ldw	r5,-8(fp)
  810be4:	0810dc80 	call	810dc8 <memcmp>
  810be8:	1004c03a 	cmpne	r2,r2,zero
  810bec:	1000031e 	bne	r2,zero,810bfc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810bf0:	e0bffd17 	ldw	r2,-12(fp)
  810bf4:	e0bfff15 	stw	r2,-4(fp)
  810bf8:	00000806 	br	810c1c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  810bfc:	e0bffd17 	ldw	r2,-12(fp)
  810c00:	10800017 	ldw	r2,0(r2)
  810c04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810c08:	00c02074 	movhi	r3,129
  810c0c:	18cdcf04 	addi	r3,r3,14140
  810c10:	e0bffd17 	ldw	r2,-12(fp)
  810c14:	10ffc91e 	bne	r2,r3,810b3c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810c18:	e03fff15 	stw	zero,-4(fp)
  810c1c:	e0bfff17 	ldw	r2,-4(fp)
}
  810c20:	e037883a 	mov	sp,fp
  810c24:	dfc00117 	ldw	ra,4(sp)
  810c28:	df000017 	ldw	fp,0(sp)
  810c2c:	dec00204 	addi	sp,sp,8
  810c30:	f800283a 	ret

00810c34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  810c34:	defffc04 	addi	sp,sp,-16
  810c38:	df000315 	stw	fp,12(sp)
  810c3c:	df000304 	addi	fp,sp,12
  810c40:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  810c44:	00bffa04 	movi	r2,-24
  810c48:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810c4c:	e03ffe15 	stw	zero,-8(fp)
  810c50:	00001e06 	br	810ccc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  810c54:	e0bffe17 	ldw	r2,-8(fp)
  810c58:	00c02074 	movhi	r3,129
  810c5c:	18c8b204 	addi	r3,r3,8904
  810c60:	10800324 	muli	r2,r2,12
  810c64:	10c5883a 	add	r2,r2,r3
  810c68:	10800017 	ldw	r2,0(r2)
  810c6c:	1004c03a 	cmpne	r2,r2,zero
  810c70:	1000131e 	bne	r2,zero,810cc0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  810c74:	e0bffe17 	ldw	r2,-8(fp)
  810c78:	00c02074 	movhi	r3,129
  810c7c:	18c8b204 	addi	r3,r3,8904
  810c80:	10800324 	muli	r2,r2,12
  810c84:	10c7883a 	add	r3,r2,r3
  810c88:	e0bfff17 	ldw	r2,-4(fp)
  810c8c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  810c90:	00802074 	movhi	r2,129
  810c94:	108dd304 	addi	r2,r2,14156
  810c98:	10c00017 	ldw	r3,0(r2)
  810c9c:	e0bffe17 	ldw	r2,-8(fp)
  810ca0:	1880040e 	bge	r3,r2,810cb4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  810ca4:	00c02074 	movhi	r3,129
  810ca8:	18cdd304 	addi	r3,r3,14156
  810cac:	e0bffe17 	ldw	r2,-8(fp)
  810cb0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  810cb4:	e0bffe17 	ldw	r2,-8(fp)
  810cb8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  810cbc:	00000606 	br	810cd8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810cc0:	e0bffe17 	ldw	r2,-8(fp)
  810cc4:	10800044 	addi	r2,r2,1
  810cc8:	e0bffe15 	stw	r2,-8(fp)
  810ccc:	e0bffe17 	ldw	r2,-8(fp)
  810cd0:	10800810 	cmplti	r2,r2,32
  810cd4:	103fdf1e 	bne	r2,zero,810c54 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810cd8:	e0bffd17 	ldw	r2,-12(fp)
}
  810cdc:	e037883a 	mov	sp,fp
  810ce0:	df000017 	ldw	fp,0(sp)
  810ce4:	dec00104 	addi	sp,sp,4
  810ce8:	f800283a 	ret

00810cec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  810cec:	defffb04 	addi	sp,sp,-20
  810cf0:	df000415 	stw	fp,16(sp)
  810cf4:	df000404 	addi	fp,sp,16
  810cf8:	e13ffe15 	stw	r4,-8(fp)
  810cfc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810d00:	e0bfff17 	ldw	r2,-4(fp)
  810d04:	10840070 	cmpltui	r2,r2,4097
  810d08:	1000021e 	bne	r2,zero,810d14 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  810d0c:	00840004 	movi	r2,4096
  810d10:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  810d14:	e0fffe17 	ldw	r3,-8(fp)
  810d18:	e0bfff17 	ldw	r2,-4(fp)
  810d1c:	1885883a 	add	r2,r3,r2
  810d20:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810d24:	e0bffe17 	ldw	r2,-8(fp)
  810d28:	e0bffd15 	stw	r2,-12(fp)
  810d2c:	00000506 	br	810d44 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810d30:	e0bffd17 	ldw	r2,-12(fp)
  810d34:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810d38:	e0bffd17 	ldw	r2,-12(fp)
  810d3c:	10800804 	addi	r2,r2,32
  810d40:	e0bffd15 	stw	r2,-12(fp)
  810d44:	e0fffd17 	ldw	r3,-12(fp)
  810d48:	e0bffc17 	ldw	r2,-16(fp)
  810d4c:	18bff836 	bltu	r3,r2,810d30 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  810d50:	e0bffe17 	ldw	r2,-8(fp)
  810d54:	108007cc 	andi	r2,r2,31
  810d58:	1005003a 	cmpeq	r2,r2,zero
  810d5c:	1000021e 	bne	r2,zero,810d68 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  810d60:	e0bffd17 	ldw	r2,-12(fp)
  810d64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  810d68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  810d6c:	e037883a 	mov	sp,fp
  810d70:	df000017 	ldw	fp,0(sp)
  810d74:	dec00104 	addi	sp,sp,4
  810d78:	f800283a 	ret

00810d7c <atexit>:
  810d7c:	200b883a 	mov	r5,r4
  810d80:	000d883a 	mov	r6,zero
  810d84:	0009883a 	mov	r4,zero
  810d88:	000f883a 	mov	r7,zero
  810d8c:	0810e3c1 	jmpi	810e3c <__register_exitproc>

00810d90 <exit>:
  810d90:	defffe04 	addi	sp,sp,-8
  810d94:	000b883a 	mov	r5,zero
  810d98:	dc000015 	stw	r16,0(sp)
  810d9c:	dfc00115 	stw	ra,4(sp)
  810da0:	2021883a 	mov	r16,r4
  810da4:	0810f740 	call	810f74 <__call_exitprocs>
  810da8:	00802074 	movhi	r2,129
  810dac:	108dcc04 	addi	r2,r2,14128
  810db0:	11000017 	ldw	r4,0(r2)
  810db4:	20800f17 	ldw	r2,60(r4)
  810db8:	10000126 	beq	r2,zero,810dc0 <exit+0x30>
  810dbc:	103ee83a 	callr	r2
  810dc0:	8009883a 	mov	r4,r16
  810dc4:	080d9f00 	call	80d9f0 <_exit>

00810dc8 <memcmp>:
  810dc8:	00c000c4 	movi	r3,3
  810dcc:	1980032e 	bgeu	r3,r6,810ddc <memcmp+0x14>
  810dd0:	2144b03a 	or	r2,r4,r5
  810dd4:	10c4703a 	and	r2,r2,r3
  810dd8:	10000f26 	beq	r2,zero,810e18 <memcmp+0x50>
  810ddc:	31ffffc4 	addi	r7,r6,-1
  810de0:	3000061e 	bne	r6,zero,810dfc <memcmp+0x34>
  810de4:	00000a06 	br	810e10 <memcmp+0x48>
  810de8:	39ffffc4 	addi	r7,r7,-1
  810dec:	00bfffc4 	movi	r2,-1
  810df0:	21000044 	addi	r4,r4,1
  810df4:	29400044 	addi	r5,r5,1
  810df8:	38800526 	beq	r7,r2,810e10 <memcmp+0x48>
  810dfc:	20c00003 	ldbu	r3,0(r4)
  810e00:	28800003 	ldbu	r2,0(r5)
  810e04:	18bff826 	beq	r3,r2,810de8 <memcmp+0x20>
  810e08:	1885c83a 	sub	r2,r3,r2
  810e0c:	f800283a 	ret
  810e10:	0005883a 	mov	r2,zero
  810e14:	f800283a 	ret
  810e18:	180f883a 	mov	r7,r3
  810e1c:	20c00017 	ldw	r3,0(r4)
  810e20:	28800017 	ldw	r2,0(r5)
  810e24:	18bfed1e 	bne	r3,r2,810ddc <memcmp+0x14>
  810e28:	31bfff04 	addi	r6,r6,-4
  810e2c:	21000104 	addi	r4,r4,4
  810e30:	29400104 	addi	r5,r5,4
  810e34:	39bff936 	bltu	r7,r6,810e1c <memcmp+0x54>
  810e38:	003fe806 	br	810ddc <memcmp+0x14>

00810e3c <__register_exitproc>:
  810e3c:	defffa04 	addi	sp,sp,-24
  810e40:	00802074 	movhi	r2,129
  810e44:	108dcc04 	addi	r2,r2,14128
  810e48:	dc000015 	stw	r16,0(sp)
  810e4c:	14000017 	ldw	r16,0(r2)
  810e50:	dd000415 	stw	r20,16(sp)
  810e54:	2829883a 	mov	r20,r5
  810e58:	81405217 	ldw	r5,328(r16)
  810e5c:	dcc00315 	stw	r19,12(sp)
  810e60:	dc800215 	stw	r18,8(sp)
  810e64:	dc400115 	stw	r17,4(sp)
  810e68:	dfc00515 	stw	ra,20(sp)
  810e6c:	2023883a 	mov	r17,r4
  810e70:	3027883a 	mov	r19,r6
  810e74:	3825883a 	mov	r18,r7
  810e78:	28002526 	beq	r5,zero,810f10 <__register_exitproc+0xd4>
  810e7c:	29000117 	ldw	r4,4(r5)
  810e80:	008007c4 	movi	r2,31
  810e84:	11002716 	blt	r2,r4,810f24 <__register_exitproc+0xe8>
  810e88:	8800101e 	bne	r17,zero,810ecc <__register_exitproc+0x90>
  810e8c:	2105883a 	add	r2,r4,r4
  810e90:	1085883a 	add	r2,r2,r2
  810e94:	20c00044 	addi	r3,r4,1
  810e98:	1145883a 	add	r2,r2,r5
  810e9c:	0009883a 	mov	r4,zero
  810ea0:	15000215 	stw	r20,8(r2)
  810ea4:	28c00115 	stw	r3,4(r5)
  810ea8:	2005883a 	mov	r2,r4
  810eac:	dfc00517 	ldw	ra,20(sp)
  810eb0:	dd000417 	ldw	r20,16(sp)
  810eb4:	dcc00317 	ldw	r19,12(sp)
  810eb8:	dc800217 	ldw	r18,8(sp)
  810ebc:	dc400117 	ldw	r17,4(sp)
  810ec0:	dc000017 	ldw	r16,0(sp)
  810ec4:	dec00604 	addi	sp,sp,24
  810ec8:	f800283a 	ret
  810ecc:	29802204 	addi	r6,r5,136
  810ed0:	00800044 	movi	r2,1
  810ed4:	110e983a 	sll	r7,r2,r4
  810ed8:	30c04017 	ldw	r3,256(r6)
  810edc:	2105883a 	add	r2,r4,r4
  810ee0:	1085883a 	add	r2,r2,r2
  810ee4:	1185883a 	add	r2,r2,r6
  810ee8:	19c6b03a 	or	r3,r3,r7
  810eec:	14802015 	stw	r18,128(r2)
  810ef0:	14c00015 	stw	r19,0(r2)
  810ef4:	00800084 	movi	r2,2
  810ef8:	30c04015 	stw	r3,256(r6)
  810efc:	88bfe31e 	bne	r17,r2,810e8c <__register_exitproc+0x50>
  810f00:	30804117 	ldw	r2,260(r6)
  810f04:	11c4b03a 	or	r2,r2,r7
  810f08:	30804115 	stw	r2,260(r6)
  810f0c:	003fdf06 	br	810e8c <__register_exitproc+0x50>
  810f10:	00802074 	movhi	r2,129
  810f14:	10976b04 	addi	r2,r2,23980
  810f18:	100b883a 	mov	r5,r2
  810f1c:	80805215 	stw	r2,328(r16)
  810f20:	003fd606 	br	810e7c <__register_exitproc+0x40>
  810f24:	00802034 	movhi	r2,128
  810f28:	108f6e04 	addi	r2,r2,15800
  810f2c:	1000021e 	bne	r2,zero,810f38 <__register_exitproc+0xfc>
  810f30:	013fffc4 	movi	r4,-1
  810f34:	003fdc06 	br	810ea8 <__register_exitproc+0x6c>
  810f38:	01006404 	movi	r4,400
  810f3c:	103ee83a 	callr	r2
  810f40:	1007883a 	mov	r3,r2
  810f44:	103ffa26 	beq	r2,zero,810f30 <__register_exitproc+0xf4>
  810f48:	80805217 	ldw	r2,328(r16)
  810f4c:	180b883a 	mov	r5,r3
  810f50:	18000115 	stw	zero,4(r3)
  810f54:	18800015 	stw	r2,0(r3)
  810f58:	80c05215 	stw	r3,328(r16)
  810f5c:	18006215 	stw	zero,392(r3)
  810f60:	18006315 	stw	zero,396(r3)
  810f64:	0009883a 	mov	r4,zero
  810f68:	883fc826 	beq	r17,zero,810e8c <__register_exitproc+0x50>
  810f6c:	003fd706 	br	810ecc <__register_exitproc+0x90>

00810f70 <register_fini>:
  810f70:	f800283a 	ret

00810f74 <__call_exitprocs>:
  810f74:	00802074 	movhi	r2,129
  810f78:	108dcc04 	addi	r2,r2,14128
  810f7c:	10800017 	ldw	r2,0(r2)
  810f80:	defff304 	addi	sp,sp,-52
  810f84:	df000b15 	stw	fp,44(sp)
  810f88:	d8800115 	stw	r2,4(sp)
  810f8c:	00802034 	movhi	r2,128
  810f90:	108f6904 	addi	r2,r2,15780
  810f94:	1005003a 	cmpeq	r2,r2,zero
  810f98:	d8800215 	stw	r2,8(sp)
  810f9c:	d8800117 	ldw	r2,4(sp)
  810fa0:	dd400815 	stw	r21,32(sp)
  810fa4:	dd000715 	stw	r20,28(sp)
  810fa8:	10805204 	addi	r2,r2,328
  810fac:	dfc00c15 	stw	ra,48(sp)
  810fb0:	ddc00a15 	stw	r23,40(sp)
  810fb4:	dd800915 	stw	r22,36(sp)
  810fb8:	dcc00615 	stw	r19,24(sp)
  810fbc:	dc800515 	stw	r18,20(sp)
  810fc0:	dc400415 	stw	r17,16(sp)
  810fc4:	dc000315 	stw	r16,12(sp)
  810fc8:	282b883a 	mov	r21,r5
  810fcc:	2039883a 	mov	fp,r4
  810fd0:	d8800015 	stw	r2,0(sp)
  810fd4:	2829003a 	cmpeq	r20,r5,zero
  810fd8:	d8800117 	ldw	r2,4(sp)
  810fdc:	14405217 	ldw	r17,328(r2)
  810fe0:	88001026 	beq	r17,zero,811024 <__call_exitprocs+0xb0>
  810fe4:	ddc00017 	ldw	r23,0(sp)
  810fe8:	88800117 	ldw	r2,4(r17)
  810fec:	8c802204 	addi	r18,r17,136
  810ff0:	143fffc4 	addi	r16,r2,-1
  810ff4:	80000916 	blt	r16,zero,81101c <__call_exitprocs+0xa8>
  810ff8:	05bfffc4 	movi	r22,-1
  810ffc:	a000151e 	bne	r20,zero,811054 <__call_exitprocs+0xe0>
  811000:	8409883a 	add	r4,r16,r16
  811004:	2105883a 	add	r2,r4,r4
  811008:	1485883a 	add	r2,r2,r18
  81100c:	10c02017 	ldw	r3,128(r2)
  811010:	a8c01126 	beq	r21,r3,811058 <__call_exitprocs+0xe4>
  811014:	843fffc4 	addi	r16,r16,-1
  811018:	85bff81e 	bne	r16,r22,810ffc <__call_exitprocs+0x88>
  81101c:	d8800217 	ldw	r2,8(sp)
  811020:	10003126 	beq	r2,zero,8110e8 <__call_exitprocs+0x174>
  811024:	dfc00c17 	ldw	ra,48(sp)
  811028:	df000b17 	ldw	fp,44(sp)
  81102c:	ddc00a17 	ldw	r23,40(sp)
  811030:	dd800917 	ldw	r22,36(sp)
  811034:	dd400817 	ldw	r21,32(sp)
  811038:	dd000717 	ldw	r20,28(sp)
  81103c:	dcc00617 	ldw	r19,24(sp)
  811040:	dc800517 	ldw	r18,20(sp)
  811044:	dc400417 	ldw	r17,16(sp)
  811048:	dc000317 	ldw	r16,12(sp)
  81104c:	dec00d04 	addi	sp,sp,52
  811050:	f800283a 	ret
  811054:	8409883a 	add	r4,r16,r16
  811058:	88c00117 	ldw	r3,4(r17)
  81105c:	2105883a 	add	r2,r4,r4
  811060:	1445883a 	add	r2,r2,r17
  811064:	18ffffc4 	addi	r3,r3,-1
  811068:	11800217 	ldw	r6,8(r2)
  81106c:	1c001526 	beq	r3,r16,8110c4 <__call_exitprocs+0x150>
  811070:	10000215 	stw	zero,8(r2)
  811074:	303fe726 	beq	r6,zero,811014 <__call_exitprocs+0xa0>
  811078:	00c00044 	movi	r3,1
  81107c:	1c06983a 	sll	r3,r3,r16
  811080:	90804017 	ldw	r2,256(r18)
  811084:	8cc00117 	ldw	r19,4(r17)
  811088:	1884703a 	and	r2,r3,r2
  81108c:	10001426 	beq	r2,zero,8110e0 <__call_exitprocs+0x16c>
  811090:	90804117 	ldw	r2,260(r18)
  811094:	1884703a 	and	r2,r3,r2
  811098:	10000c1e 	bne	r2,zero,8110cc <__call_exitprocs+0x158>
  81109c:	2105883a 	add	r2,r4,r4
  8110a0:	1485883a 	add	r2,r2,r18
  8110a4:	11400017 	ldw	r5,0(r2)
  8110a8:	e009883a 	mov	r4,fp
  8110ac:	303ee83a 	callr	r6
  8110b0:	88800117 	ldw	r2,4(r17)
  8110b4:	98bfc81e 	bne	r19,r2,810fd8 <__call_exitprocs+0x64>
  8110b8:	b8800017 	ldw	r2,0(r23)
  8110bc:	147fd526 	beq	r2,r17,811014 <__call_exitprocs+0xa0>
  8110c0:	003fc506 	br	810fd8 <__call_exitprocs+0x64>
  8110c4:	8c000115 	stw	r16,4(r17)
  8110c8:	003fea06 	br	811074 <__call_exitprocs+0x100>
  8110cc:	2105883a 	add	r2,r4,r4
  8110d0:	1485883a 	add	r2,r2,r18
  8110d4:	11000017 	ldw	r4,0(r2)
  8110d8:	303ee83a 	callr	r6
  8110dc:	003ff406 	br	8110b0 <__call_exitprocs+0x13c>
  8110e0:	303ee83a 	callr	r6
  8110e4:	003ff206 	br	8110b0 <__call_exitprocs+0x13c>
  8110e8:	88800117 	ldw	r2,4(r17)
  8110ec:	1000081e 	bne	r2,zero,811110 <__call_exitprocs+0x19c>
  8110f0:	89000017 	ldw	r4,0(r17)
  8110f4:	20000726 	beq	r4,zero,811114 <__call_exitprocs+0x1a0>
  8110f8:	b9000015 	stw	r4,0(r23)
  8110fc:	8809883a 	mov	r4,r17
  811100:	0803da40 	call	803da4 <free>
  811104:	bc400017 	ldw	r17,0(r23)
  811108:	883fb71e 	bne	r17,zero,810fe8 <__call_exitprocs+0x74>
  81110c:	003fc506 	br	811024 <__call_exitprocs+0xb0>
  811110:	89000017 	ldw	r4,0(r17)
  811114:	882f883a 	mov	r23,r17
  811118:	2023883a 	mov	r17,r4
  81111c:	883fb21e 	bne	r17,zero,810fe8 <__call_exitprocs+0x74>
  811120:	003fc006 	br	811024 <__call_exitprocs+0xb0>
  811124:	0601ffff 	0x601ffff
  811128:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  81112c:	ffff0002 	0xffff0002
  811130:	00000201 	jmpi	20 <__alt_mem_sdram_controller-0x7fffe0>
  811134:	0401ffff 	0x401ffff
  811138:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  81113c:	0401ffff 	0x401ffff
  811140:	00010000 	call	1000 <__alt_mem_sdram_controller-0x7ff000>
  811144:	0201ffff 	0x201ffff
  811148:	883a0000 	call	883a000 <__ram_exceptions_end+0x7835e4c>
  81114c:	010d0bff 	0x10d0bff
  811150:	7f010002 	0x7f010002
  811154:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811158:	00811664 	muli	r2,zero,1113
  81115c:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  811160:	01090bff 	0x1090bff
  811164:	7f010002 	0x7f010002
	...
  811170:	010d0bff 	0x10d0bff
  811174:	01000004 	movi	r4,0
  811178:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  81117c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811180:	010d0bff 	0x10d0bff
  811184:	01000004 	movi	r4,0
  811188:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  81118c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  811190:	010d0bff 	0x10d0bff
  811194:	01000004 	movi	r4,0
  811198:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  81119c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  8111a0:	010d0bff 	0x10d0bff
  8111a4:	7f010002 	0x7f010002
  8111a8:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  8111ac:	00811664 	muli	r2,zero,1113
  8111b0:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  8111b4:	01090bff 	0x1090bff
  8111b8:	7f010002 	0x7f010002
	...
  8111c4:	00810f70 	cmpltui	r2,zero,1085
