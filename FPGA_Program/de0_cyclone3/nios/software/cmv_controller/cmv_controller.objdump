
cmv_controller.elf:     file format elf32-littlenios2
cmv_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800194

Program Header:
    LOAD off    0x00001020 vaddr 0x01004020 paddr 0x00800000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00800194 paddr 0x00800194 align 2**12
         filesz 0x000110c8 memsz 0x000110c8 flags r-x
    LOAD off    0x0001325c vaddr 0x0081125c paddr 0x00812f14 align 2**12
         filesz 0x00001cb8 memsz 0x00001cb8 flags rw-
    LOAD off    0x00015bcc vaddr 0x00814bcc paddr 0x00814bcc align 2**12
         filesz 0x00000000 memsz 0x00000b00 flags rw-
    LOAD off    0x00015000 vaddr 0x01004000 paddr 0x01004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01004000  01004000  00015000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01004020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001083c  00800194  00800194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000088c  008109d0  008109d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  0081125c  00812f14  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b00  00814bcc  00814bcc  00015bcc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010d8  00000000  00000000  00015048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025dd  00000000  00000000  00016120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000321a7  00000000  00000000  000186fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c3e1  00000000  00000000  0004a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b593  00000000  00000000  00056c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000287c  00000000  00000000  00072218  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000040fb  00000000  00000000  00074a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ec23  00000000  00000000  00078b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000877b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c08  00000000  00000000  000877e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008e20b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0008e20e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008e211  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008e212  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008e213  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008e217  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008e21b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008e21f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008e228  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008e231  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0008e23a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  0008e23e  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005e8b8  00000000  00000000  0008e291  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01004000 l    d  .entry	00000000 .entry
01004020 l    d  .exceptions	00000000 .exceptions
00800194 l    d  .text	00000000 .text
008109d0 l    d  .rodata	00000000 .rodata
0081125c l    d  .rwdata	00000000 .rwdata
00814bcc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 UART.cpp
00800870 l     F .text	00000060 _Z23_UART_receive_interruptPv
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_throw.cc
0080166c l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_opv.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00801960 l     F .text	00000030 _Z12read_uleb128PKhPj
00801990 l     F .text	00000054 _Z12read_sleb128PKhPi
008019e4 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00801a80 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
00801c54 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
00801ce4 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00801de4 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
00801e68 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00814bcc l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00814c14 l     O .bss	00000800 emergency_buffer
00814bd8 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00814bdc l     O .bss	00000004 fc_static
00803114 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0080322c l     F .text	000000cc _Unwind_RaiseException_Phase2
008032f8 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00811664 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080471c l     F .text	00000058 __sprint_r
00810f8a l     O .rodata	00000010 blanks.3452
00810f7a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00806780 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080817c l     F .text	00000058 std
00808288 l     F .text	00000008 __fp_lock
00808290 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00812ee8 l     O .rwdata	00000004 charset
00810fbc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00811104 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080b794 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080c8c0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d134 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080d194 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080d1c0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080d2f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080d5f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080d794 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080d874 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080d9d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080dbfc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00812f08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080de98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00811c18 l     O .rwdata	00001060 jtag_uart
00812c78 l     O .rwdata	000000c4 uart
0080df90 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080e1d0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080e3f8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080ee6c l     F .text	0000009c altera_avalon_uart_irq
0080ef08 l     F .text	000000e0 altera_avalon_uart_rxirq
0080efe8 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080f3d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080f5fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f8a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080fccc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080fe08 l     F .text	000000dc alt_file_locked
0081006c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00810780 l     F .text	00000004 register_fini
00802c78 g     F .text	00000040 __cxa_free_exception
00802df4 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00809320 g     F .text	00000094 _mprec_log10
008029d4 g     F .text	00000018 _ZSt10unexpectedv
00812de4  w    O .rwdata	00000008 _ZTIw
0080940c g     F .text	00000088 __any_on
0080aaa8 g     F .text	00000070 _isatty_r
008110dc g     O .rodata	00000028 __mprec_tinytens
00812ddc  w    O .rwdata	00000008 _ZTIc
0080da30 g     F .text	0000006c alt_main
0081543c g     O .bss	00000100 alt_irq
00812dd4  w    O .rwdata	00000008 _ZTIa
0080ab18 g     F .text	00000078 _lseek_r
008030c4 g     F .text	00000014 _Unwind_GetIPInfo
00812f14 g       *ABS*	00000000 __flash_rwdata_start
0080c2b4 g     F .text	00000088 __eqdf2
00810c2c  w    O .rodata	00000010 _ZTIPy
00812e94  w    O .rwdata	00000002 _ZTSa
00801584 g     F .text	00000074 __cxa_rethrow
00803064 g     F .text	0000000c _Unwind_SjLj_Unregister
008028f4 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0080106c  w    F .text	00000088 _ZN4FIFOIcE4pushEc
00810cbc  w    O .rodata	00000010 _ZTIPKi
008030b4 g     F .text	00000010 _Unwind_GetIP
008156cc g       *ABS*	00000000 __alt_heap_start
00812e54  w    O .rwdata	00000003 _ZTSPj
00804100 g     F .text	00000074 _kill_r
00802c68 g     F .text	00000010 _ZNSt9bad_allocD2Ev
008027d4 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00804040 g     F .text	000000a0 _signal_r
00812e30  w    O .rwdata	00000003 _ZTSPx
0080a574 g     F .text	00000068 __sseek
008081e4 g     F .text	000000a4 __sinit
00812e3c  w    O .rwdata	00000003 _ZTSPm
008010f4  w    F .text	00000040 _ZN4FIFOIcE22_triggerEmptyConditionEv
00812d4c  w    O .rwdata	00000006 _ZTS4UART
008027c4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00808a7c g     F .text	00000084 _setlocale_r
00810b10  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
008082e4 g     F .text	00000068 __sfmoreglue
0080dabc g     F .text	00000020 __malloc_unlock
00801774 g     F .text	00000020 _ZSt18uncaught_exceptionv
00808e34 g     F .text	000000e0 memmove
00812e58  w    O .rwdata	00000002 _ZTSj
00802b60 g     F .text	00000010 _ZNSt9exceptionD2Ev
008082d4 g     F .text	00000010 _cleanup
0080100c  w    F .text	00000020 _ZN4FIFOIcE6unlockEv
00809494 g     F .text	000000bc _Balloc
00810e94  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
00802f00 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
0080c3c4 g     F .text	00000088 __gtdf2
00810b44  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00812eb8  w    O .rwdata	00000002 _ZTSb
01004000 g     F .entry	0000001c __reset
00812e98  w    O .rwdata	00000004 _ZTSPKc
008030f4 g     F .text	00000008 _Unwind_GetRegionStart
00812eb0  w    O .rwdata	00000004 _ZTSPKb
00812e20  w    O .rwdata	00000004 _ZTSPKy
00800000 g       *ABS*	00000000 __flash_exceptions_start
0080aa34 g     F .text	00000074 _fstat_r
00810cdc  w    O .rodata	00000010 _ZTIPKt
00812e90  w    O .rwdata	00000003 _ZTSPa
008029ec g     F .text	00000100 _Znwm
00814bec g     O .bss	00000004 errno
00812ebc  w    O .rwdata	00000004 _ZTSPKv
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
008034c4 g     F .text	00000080 _Unwind_Backtrace
00810d9c  w    O .rodata	00000010 _ZTIPKb
00814c04 g     O .bss	00000004 alt_argv
0081ad3c g       *ABS*	00000000 _gp
00800478 g     F .text	00000038 _ZN4UART16inBuffer_isEmptyEv
00802bf8 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
0080d354 g     F .text	00000020 getpid
00800824 g     F .text	0000004c _ZN4UART7sendAllEv
00801eec g     F .text	00000180 __cxa_call_unexpected
0080176c g     F .text	00000008 __cxa_get_exception_ptr
00812e44  w    O .rwdata	00000004 _ZTSPKl
00811a98 g     O .rwdata	00000180 alt_fd_list
00801134  w    F .text	00000084 _ZN4FIFOIcE4pullEv
00802fd0 g     F .text	00000034 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00810a2c  w    O .rodata	00000018 _ZTV4FIFOIcE
00810c8c  w    O .rodata	00000010 _ZTIPl
00803474 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
00803088 g     F .text	00000014 _Unwind_GetCFA
00812dbc  w    O .rwdata	00000008 _ZTIt
008028e0 g     F .text	00000014 _ZSt13set_terminatePFvvE
00810290 g     F .text	00000094 alt_find_dev
00808d94 g     F .text	000000a0 memcpy
00812ec0  w    O .rwdata	00000003 _ZTSPv
008082c8 g     F .text	0000000c _cleanup_r
0080c55c g     F .text	000000f8 __floatsidf
0080fd90 g     F .text	00000078 alt_io_redirect
0080c4d4 g     F .text	00000088 __ltdf2
008109d0 g       *ABS*	00000000 __DTOR_END__
00810dcc  w    O .rodata	00000010 _ZTIPv
0080260c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00810f0c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
00812dec  w    O .rwdata	00000008 _ZTIb
00810c7c  w    O .rodata	00000010 _ZTIPKl
00809270 g     F .text	000000b0 __ratio
00802ecc g     F .text	00000034 _ZN10__cxxabiv119__pointer_type_infoD0Ev
0080e610 g     F .text	00000224 altera_avalon_jtag_uart_read
008035c8 g     F .text	00000014 malloc
0080c9fc g     F .text	00000008 __udivsi3
0080d534 g     F .text	000000c0 isatty
00803e24 g     F .text	000000cc _raise_r
00812e6c  w    O .rwdata	00000003 _ZTSPt
00810fec g     O .rodata	000000c8 __mprec_tens
00802bc4 g     F .text	00000034 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
00808a58 g     F .text	00000008 __locale_charset
0080429c g     F .text	00000040 vsnprintf
008104fc g     F .text	00000090 alt_icache_flush
00814be0 g     O .bss	00000004 __malloc_top_pad
008040fc g     F .text	00000004 _getpid_r
00812ee4 g     O .rwdata	00000004 __mb_cur_max
00808a60 g     F .text	0000000c _localeconv_r
00809b8c g     F .text	0000003c __i2b
0080843c g     F .text	0000049c __sfvwrite_r
0080262c g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00812e08  w    O .rwdata	00000004 _ZTSPKd
00803f78 g     F .text	000000b4 __sigtramp_r
00803db4 g     F .text	00000070 _sbrk_r
00810e40  w    O .rodata	00000020 _ZTVSt9type_info
008003f0 g     F .text	00000050 _ZN3SPID2Ev
00803004 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0080ab90 g     F .text	00000078 _read_r
00802b30 g     F .text	00000010 _ZNKSt9exception4whatEv
00812e38  w    O .rwdata	00000004 _ZTSPKm
00811a64 g     O .rwdata	0000000c __lc_ctype
00812efc g     O .rwdata	00000004 alt_max_fd
0080ce38 g     F .text	00000138 __unpack_d
0080a910 g     F .text	00000110 _fclose_r
00810e34  w    O .rodata	0000000c _ZTISt9bad_alloc
00808148 g     F .text	00000034 fflush
00810c0c  w    O .rodata	00000010 _ZTIPf
00814be4 g     O .bss	00000004 __malloc_max_sbrked_mem
0080d374 g     F .text	000001c0 alt_irq_register
00810e70  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
0080bc24 g     F .text	00000074 __adddf3
00810ae4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00800770 g     F .text	000000b4 _ZN4UART4sendEv
00809150 g     F .text	00000120 __b2d
0080b1e4 g     F .text	000005b0 __umoddi3
0080d8e0 g     F .text	000000f0 lseek
0080268c g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00801950 g     F .text	0000000c _ZdlPv
00812ee0 g     O .rwdata	00000004 _global_impure_ptr
00809f08 g     F .text	000005f4 _realloc_r
008156cc g       *ABS*	00000000 __bss_end
00812e24  w    O .rwdata	00000003 _ZTSPy
0080fbd4 g     F .text	000000f8 alt_iic_isr_register
00812e5c  w    O .rwdata	00000004 _ZTSPKi
00810dac  w    O .rodata	00000010 _ZTIPb
00810164 g     F .text	0000010c alt_tick
00803054 g     F .text	00000010 _Unwind_SjLj_Register
0080ac08 g     F .text	000005dc __udivdi3
008110b4 g     O .rodata	00000028 __mprec_bigtens
00809de8 g     F .text	00000120 __s2b
0080359c g     F .text	00000018 abort
0080c72c g     F .text	00000194 __floatunsidf
00809070 g     F .text	00000060 __mcmp
0080eda4 g     F .text	000000c8 altera_avalon_uart_init
00812d8c  w    O .rwdata	00000008 _ZTIy
00801794 g     F .text	000000a4 __cxa_end_catch
008082b0 g     F .text	00000018 __fp_lock_all
0080fb8c g     F .text	00000048 alt_ic_irq_enabled
00802bb4 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00810bfc  w    O .rodata	00000010 _ZTIPKf
008100cc g     F .text	00000098 alt_alarm_stop
00800f78  w    F .text	00000074 _ZN4FIFOIcE6isFullEv
00810bec  w    O .rodata	00000010 _ZTIPd
00814bfc g     O .bss	00000004 alt_irq_active
008029ac g     F .text	00000018 _ZSt9terminatev
00812e7c  w    O .rwdata	00000002 _ZTSs
00810ec4  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
010040ec g     F .exceptions	000000c8 alt_irq_handler
00811a70 g     O .rwdata	00000028 alt_dev_null
00800d24 g     F .text	00000220 _ZN4UARTC2Emmjj
00812e60  w    O .rwdata	00000003 _ZTSPi
00812e18  w    O .rwdata	00000003 _ZTSPf
00810d7c  w    O .rodata	00000010 _ZTIPKw
00812e0c  w    O .rwdata	00000003 _ZTSPd
00810ab4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0080f7b0 g     F .text	00000044 alt_dcache_flush_all
00808f3c g     F .text	00000070 __hi0bits
00812d94  w    O .rwdata	00000008 _ZTIx
00812ea8  w    O .rwdata	00000003 _ZTSPw
00812d6c  w    O .rwdata	00000008 _ZTISt9exception
0080c654 g     F .text	000000d8 __fixdfsi
00812e40  w    O .rwdata	00000002 _ZTSm
008001e0 g     F .text	00000040 _ZN3SPIC2Em
00812f14 g       *ABS*	00000000 __ram_rwdata_end
00810ccc  w    O .rodata	00000010 _ZTIPi
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory
00802e24 g     F .text	00000010 _ZNSt9type_infoD1Ev
00812ef4 g     O .rwdata	00000008 alt_dev_list
00814bd4 g     O .bss	00000004 __new_handler
0080dd78 g     F .text	00000120 write
00802e14 g     F .text	00000010 _ZNSt9type_infoD0Ev
0081125c g       *ABS*	00000000 __ram_rodata_end
0080d220 g     F .text	000000d4 fstat
00812d84  w    O .rwdata	00000008 _ZTIf
0080d654 g     F .text	00000140 kill
00812e48  w    O .rwdata	00000003 _ZTSPl
00810d0c  w    O .rodata	00000010 _ZTIPs
00809cc8 g     F .text	00000120 __pow5mult
00814bf0 g     O .bss	00000004 __nlocale_changed
0080ca04 g     F .text	00000008 __umodsi3
00802e0c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00812e2c  w    O .rwdata	00000004 _ZTSPKx
008156cc g       *ABS*	00000000 end
00812ea0  w    O .rwdata	00000002 _ZTSc
0080f434 g     F .text	000001c8 altera_avalon_uart_write
00803214 g     F .text	00000018 _Unwind_DeleteException
00812e50  w    O .rwdata	00000004 _ZTSPKj
0080e110 g     F .text	000000c0 altera_avalon_jtag_uart_init
008109cc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810c6c  w    O .rodata	00000010 _ZTIPm
0080ed04 g     F .text	00000058 altera_avalon_uart_write_fd
0080caa4 g     F .text	00000080 __clzsi2
0080ed5c g     F .text	00000048 altera_avalon_uart_close_fd
0080254c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0080e834 g     F .text	00000240 altera_avalon_jtag_uart_write
008081d4 g     F .text	00000004 __sfp_lock_acquire
00810b6c  w    O .rodata	00000012 _ZTSSt13bad_exception
00808cb0 g     F .text	000000e4 memchr
00804774 g     F .text	00001eac ___vfprintf_internal_r
00812e88  w    O .rwdata	00000002 _ZTSh
008004b0 g     F .text	00000084 _ZN4UART13buffer_putstrEPKc
00804408 g     F .text	00000314 _free_r
008008d0 g     F .text	000000bc _ZN4UARTD0Ev
00810784 g     F .text	000001b0 __call_exitprocs
00810a44  w    O .rodata	00000009 _ZTS4FIFOIcE
00814bf4 g     O .bss	00000004 __mlocale_changed
00812ed8 g     O .rwdata	00000004 __malloc_sbrk_base
00800194 g     F .text	0000004c _start
00814c0c g     O .bss	00000004 _alt_tick_rate
00803014 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00810e60  w    O .rodata	0000000d _ZTSSt9type_info
00801278  w    F .text	0000006c _ZN4FIFOIcED0Ev
00809858 g     F .text	0000014c __lshift
0080ea74 g     F .text	00000238 alt_avalon_spi_command
00810e10  w    O .rodata	00000014 _ZTVSt9bad_alloc
00814c10 g     O .bss	00000004 _alt_nticks
008040e0 g     F .text	0000001c signal
0080dadc g     F .text	00000120 read
0080df2c g     F .text	00000064 alt_sys_init
00812eb4  w    O .rwdata	00000003 _ZTSPb
00810d2c  w    O .rodata	00000010 _ZTIPh
00810d8c  w    O .rodata	00000010 _ZTIPw
0081064c g     F .text	00000134 __register_exitproc
00810e24  w    O .rodata	0000000d _ZTSSt9bad_alloc
00812dcc  w    O .rwdata	00000008 _ZTIh
00800570 g     F .text	00000040 _ZN4UART14buffer_getcharEv
0080102c  w    F .text	00000040 _ZN4FIFOIcE21_triggerFullConditionEv
00810c3c  w    O .rodata	00000010 _ZTIPKx
008099a4 g     F .text	000001e8 __multiply
0080e4a8 g     F .text	00000074 altera_avalon_jtag_uart_close
0081125c g       *ABS*	00000000 __ram_rwdata_start
0080337c g     F .text	000000f8 _Unwind_SjLj_RaiseException
008109d0 g       *ABS*	00000000 __ram_rodata_start
00815414 g     O .bss	00000028 __malloc_current_mallinfo
00803320 g     F .text	0000005c _Unwind_SjLj_Resume
00809550 g     F .text	0000017c __d2b
0080098c g     F .text	000000bc _ZN4UARTD1Ev
00812dac  w    O .rwdata	00000008 _ZTIj
00812d7c  w    O .rwdata	00000008 _ZTId
00802e34 g     F .text	00000010 _ZNSt9type_infoD2Ev
00802708 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00810c9c  w    O .rodata	00000010 _ZTIPKj
00802e44 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00810e04  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
0080dfc8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00810444 g     F .text	000000b8 alt_get_fd
00800f44  w    F .text	00000034 _ZN4FIFOIcE7isEmptyEv
0080cf70 g     F .text	000000c8 __fpcmp_parts_d
0080a8a0 g     F .text	00000070 _close_r
00812e14  w    O .rwdata	00000004 _ZTSPKf
00812e8c  w    O .rwdata	00000004 _ZTSPKa
008105d8 g     F .text	00000074 memcmp
0080e078 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008156cc g       *ABS*	00000000 __alt_stack_base
0080e0c0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802c24 g     F .text	00000034 _ZNSt9bad_allocD0Ev
008027b4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00802c08 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
00806644 g     F .text	0000013c __swsetup_r
00803544 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0080c05c g     F .text	00000258 __divdf3
0080834c g     F .text	000000f0 __sfp
008093b4 g     F .text	00000058 __copybits
00802dec g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00802f10 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
0081125c g     O .rwdata	00000408 __malloc_av_
008081e0 g     F .text	00000004 __sinit_lock_release
008041e8 g     F .text	000000b4 _vsnprintf_r
0080bc98 g     F .text	000003c4 __muldf3
0080a658 g     F .text	00000060 __sread
00810b58  w    O .rodata	00000014 _ZTVSt9exception
00810324 g     F .text	00000120 alt_find_file
008025b8 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0080f7f4 g     F .text	000000b4 alt_dev_llist_insert
0080da9c g     F .text	00000020 __malloc_lock
0080dcbc g     F .text	000000bc sbrk
00810a1c  w    O .rodata	00000010 _ZTV4UART
00810a88  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
008015f8 g     F .text	00000074 __cxa_throw
00807f4c g     F .text	000001fc _fflush_r
008030d8 g     F .text	00000010 _Unwind_SetIP
0080a7ec g     F .text	000000b4 _calloc_r
00812db4  w    O .rwdata	00000008 _ZTIi
00810c1c  w    O .rodata	00000010 _ZTIPKy
00814bcc g       *ABS*	00000000 __bss_start
00803d1c g     F .text	00000098 memset
00801350 g     F .text	00000234 main
00812e04  w    O .rwdata	00000002 _ZTSe
00814c08 g     O .bss	00000004 alt_envp
008011b8  w    F .text	000000c0 _ZN4FIFOIcEC1Ej
00814be8 g     O .bss	00000004 __malloc_max_total_mem
0080e020 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00812d74  w    O .rwdata	00000008 _ZTIe
008028d0 g     F .text	00000008 __cxa_get_globals_fast
0080a56c g     F .text	00000008 __sclose
0080195c g     F .text	00000004 _ZdaPv
01000000 g       *ABS*	00000000 __alt_heap_limit
00812e1c  w    O .rwdata	00000002 _ZTSf
0080aa20 g     F .text	00000014 fclose
0081553c g     O .bss	00000190 _atexit0
00810d5c  w    O .rodata	00000010 _ZTIPKc
00806998 g     F .text	000015b4 _dtoa_r
008035dc g     F .text	00000740 _malloc_r
00810c5c  w    O .rodata	00000010 _ZTIPKm
00812f00 g     O .rwdata	00000004 alt_errno
00803f68 g     F .text	00000010 _init_signal
00810ad8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00800220 g     F .text	00000040 _ZN3SPIC1Em
008089a0 g     F .text	000000b8 _fwalk
00802ba4 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0080c93c g     F .text	00000060 __divsi3
00811110 g     O .rodata	00000014 __thenan_df
00810bbc  w    O .rodata	00000010 _ZTIPKe
008042dc g     F .text	0000012c _malloc_trim_r
008109d0 g       *ABS*	00000000 __CTOR_END__
0080a6b8 g     F .text	000000bc strcmp
00810cfc  w    O .rodata	00000010 _ZTIPKs
00810d6c  w    O .rodata	00000010 _ZTIPc
008109d0 g       *ABS*	00000000 __flash_rodata_start
00812d3c  w    O .rwdata	00000005 _ZTS3SPI
008109d0 g       *ABS*	00000000 __DTOR_LIST__
00800350 g     F .text	00000050 _ZN3SPID0Ev
0080c33c g     F .text	00000088 __nedf2
00812eac  w    O .rwdata	00000002 _ZTSw
00812e00  w    O .rwdata	00000003 _ZTSPe
0080def8 g     F .text	00000034 alt_irq_init
00812e9c  w    O .rwdata	00000003 _ZTSPc
0080dc5c g     F .text	00000060 alt_release_fd
00802f20 g     F .text	000000b0 _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
00802780 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00800b04 g     F .text	00000220 _ZN4UARTC1Emmjj
00811124 g     O .rodata	00000100 __clz_tab
00814bf8 g     O .bss	00000004 _PathLocale
00800440 g     F .text	00000038 _ZN4UART17outBuffer_isEmptyEv
0081058c g     F .text	00000014 atexit
0080a774 g     F .text	00000078 _write_r
00800a48 g     F .text	000000bc _ZN4UARTD2Ev
00808b00 g     F .text	0000001c setlocale
008012e4  w    F .text	0000006c _ZN4FIFOIcED1Ev
0080310c g     F .text	00000008 _Unwind_GetTextRelBase
008005b0 g     F .text	000001c0 _ZN4UART13buffer_printfEPKcz
00802aec g     F .text	00000044 __cxa_call_terminate
00812d9c  w    O .rwdata	00000008 _ZTIm
00812edc g     O .rwdata	00000004 _impure_ptr
00814c00 g     O .bss	00000004 alt_argc
00810b9c  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
0080f96c g     F .text	00000064 _do_dtors
01004020 g       .exceptions	00000000 alt_irq_entry
008090d0 g     F .text	00000080 __ulp
0080a4fc g     F .text	00000040 __isinfd
008030fc g     F .text	00000008 _Unwind_FindEnclosingFunction
00808298 g     F .text	00000018 __fp_unlock_all
00810d3c  w    O .rodata	00000010 _ZTIPKa
008016cc g     F .text	000000a0 _Znam
00812eec g     O .rwdata	00000008 alt_fs_list
00810cac  w    O .rodata	00000010 _ZTIPj
008030e8 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00801838 g     F .text	00000118 __cxa_begin_catch
00812e80  w    O .rwdata	00000004 _ZTSPKh
0080261c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
008029c4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00810dbc  w    O .rodata	00000010 _ZTIPKv
00812dfc  w    O .rwdata	00000004 _ZTSPKe
01004020 g       *ABS*	00000000 __ram_exceptions_start
00808a6c g     F .text	00000010 localeconv
00812ec4  w    O .rwdata	00000002 _ZTSv
00802b70 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00812d64 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00800534 g     F .text	0000003c _ZN4UART14buffer_putcharEc
00812e70  w    O .rwdata	00000002 _ZTSt
00802e4c g     F .text	00000080 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00810cec  w    O .rodata	00000010 _ZTIPt
0080fa00 g     F .text	00000050 alt_ic_isr_register
00802cb8 g     F .text	00000134 __cxa_allocate_exception
00810bdc  w    O .rodata	00000010 _ZTIPKd
00810b38  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00810d1c  w    O .rodata	00000010 _ZTIPKh
00802c18 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
00812f14 g       *ABS*	00000000 _edata
0080ecac g     F .text	00000058 altera_avalon_uart_read_fd
008156cc g       *ABS*	00000000 _end
00812ec8 g     O .rwdata	00000001 _ZSt7nothrow
00812d54  w    O .rwdata	00000008 _ZTI4UART
0080206c g     F .text	000004e0 __gxx_personality_sj0
010041b4 g       *ABS*	00000000 __ram_exceptions_end
00812e64  w    O .rwdata	00000002 _ZTSi
0080e51c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00812e28  w    O .rwdata	00000002 _ZTSy
008026bc g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00802b50 g     F .text	00000010 _ZNSt9exceptionD1Ev
00810ee8  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
0080faec g     F .text	000000a0 alt_ic_irq_disable
00812e4c  w    O .rwdata	00000002 _ZTSl
0080a5dc g     F .text	0000007c __swrite
00812df4  w    O .rwdata	00000008 _ZTIv
00812ed4 g     O .rwdata	00000004 __malloc_trim_threshold
00812e78  w    O .rwdata	00000003 _ZTSPs
00810270 g     F .text	00000020 altera_nios2_qsys_irq_init
008105a0 g     F .text	00000038 exit
0080309c g     F .text	00000018 _Unwind_SetGR
008088d8 g     F .text	000000c8 _fwalk_reent
008096cc g     F .text	0000018c __mdiff
00802908 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0080c99c g     F .text	00000060 __modsi3
00802c58 g     F .text	00000010 _ZNSt9bad_allocD1Ev
01000000 g       *ABS*	00000000 __alt_data_end
01004020 g     F .exceptions	00000000 alt_exception
008081d8 g     F .text	00000004 __sfp_lock_release
00812e10  w    O .rwdata	00000002 _ZTSd
00812da4  w    O .rwdata	00000008 _ZTIl
00802808 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00810b80  w    O .rodata	0000000c _ZTISt13bad_exception
00803024  w    F .text	00000030 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
0080f144 g     F .text	00000060 altera_avalon_uart_close
00810c4c  w    O .rodata	00000010 _ZTIPx
0080a53c g     F .text	00000030 __isnand
0080d200 g     F .text	00000020 _exit
0080f65c g     F .text	00000154 alt_alarm_start
0080ca0c g     F .text	00000098 __muldi3
00803070 g     F .text	00000018 _Unwind_GetGR
008028d8 g     F .text	00000008 __cxa_get_globals
00808b1c g     F .text	00000194 __smakebuf_r
00812d68 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00804174 g     F .text	00000074 strlen
00803f04 g     F .text	00000064 _init_signal_r
00812ecc  w    O .rwdata	00000008 _ZTISt9type_info
0080fee4 g     F .text	00000188 open
00810bcc  w    O .rodata	00000010 _ZTIPe
0080c44c g     F .text	00000088 __gedf2
00810b8c  w    O .rodata	0000000d _ZTSSt9exception
00812d44  w    O .rwdata	00000008 _ZTI3SPI
00802b40 g     F .text	00000010 _ZNSt9exceptionD0Ev
0080f9d0 g     F .text	00000030 alt_icache_flush_all
00812e34  w    O .rwdata	00000002 _ZTSx
00803104 g     F .text	00000008 _Unwind_GetDataRelBase
00812f04 g     O .rwdata	00000004 alt_priority_mask
00800260 g     F .text	0000006c _ZN3SPI15readCMVRegisterEh
0080fa50 g     F .text	0000009c alt_ic_irq_enable
00812dc4  w    O .rwdata	00000008 _ZTIs
00806620 g     F .text	00000024 __vfprintf_internal
0080f1a4 g     F .text	00000230 altera_avalon_uart_read
00810d4c  w    O .rodata	00000010 _ZTIPa
00812ea4  w    O .rwdata	00000004 _ZTSPKw
0080bba4 g     F .text	00000080 __subdf3
008003a0 g     F .text	00000050 _ZN3SPID1Ev
008002cc g     F .text	00000084 _ZN3SPI16writeCMVRegisterEhh
00808fac g     F .text	000000c4 __lo0bits
00812f0c g     O .rwdata	00000008 alt_alarm_list
00810ddc  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00800fec  w    F .text	00000020 _ZN4FIFOIcE4lockEv
0080f908 g     F .text	00000064 _do_ctors
0080402c g     F .text	00000014 __sigtramp
00812d5c  w    O .rwdata	00000008 _ZTI4FIFOIcE
00810eb8  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
0080d038 g     F .text	000000fc close
00812e84  w    O .rwdata	00000003 _ZTSPh
008109d0  w    O .rodata	00000010 _ZTV3SPI
0080d7f4 g     F .text	00000080 alt_load
0080cb24 g     F .text	00000314 __pack_d
00802dfc g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00812e74  w    O .rwdata	00000004 _ZTSPKs
00803ef0 g     F .text	00000014 raise
00812e68  w    O .rwdata	00000004 _ZTSPKt
008035b4 g     F .text	00000014 free
008081dc g     F .text	00000004 __sinit_lock_acquire
00809bc8 g     F .text	00000100 __multadd
008025d8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00808f14 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1004000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100400c:	00bffd16 	blt	zero,r2,1004004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1004010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1004014:	08406514 	ori	at,at,404
    jmp r1
 1004018:	0800683a 	jmp	at
 100401c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

01004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1004020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1004024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100407c:	10000326 	beq	r2,zero,100408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1004080:	20000226 	beq	r4,zero,100408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1004084:	10040ec0 	call	10040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1004088:	00000306 	br	1004098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1004090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1004094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10040e8:	ef80083a 	eret

010040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10040ec:	defff904 	addi	sp,sp,-28
 10040f0:	dfc00615 	stw	ra,24(sp)
 10040f4:	df000515 	stw	fp,20(sp)
 10040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10040fc:	0005313a 	rdctl	r2,ipending
 1004100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1004104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1004108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1004110:	00800044 	movi	r2,1
 1004114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1004118:	e0ffff17 	ldw	r3,-4(fp)
 100411c:	e0bffe17 	ldw	r2,-8(fp)
 1004120:	1884703a 	and	r2,r3,r2
 1004124:	1005003a 	cmpeq	r2,r2,zero
 1004128:	1000161e 	bne	r2,zero,1004184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100412c:	e0bffd17 	ldw	r2,-12(fp)
 1004130:	00c02074 	movhi	r3,129
 1004134:	18d50f04 	addi	r3,r3,21564
 1004138:	100490fa 	slli	r2,r2,3
 100413c:	10c5883a 	add	r2,r2,r3
 1004140:	11400017 	ldw	r5,0(r2)
 1004144:	e0bffd17 	ldw	r2,-12(fp)
 1004148:	00c02074 	movhi	r3,129
 100414c:	18d50f04 	addi	r3,r3,21564
 1004150:	100490fa 	slli	r2,r2,3
 1004154:	10c5883a 	add	r2,r2,r3
 1004158:	10800104 	addi	r2,r2,4
 100415c:	11000017 	ldw	r4,0(r2)
 1004160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1004164:	0005313a 	rdctl	r2,ipending
 1004168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100416c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1004170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1004174:	e0bfff17 	ldw	r2,-4(fp)
 1004178:	1004c03a 	cmpne	r2,r2,zero
 100417c:	103fe31e 	bne	r2,zero,100410c <alt_irq_handler+0x20>
 1004180:	00000706 	br	10041a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1004184:	e0bffe17 	ldw	r2,-8(fp)
 1004188:	1085883a 	add	r2,r2,r2
 100418c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1004190:	e0bffd17 	ldw	r2,-12(fp)
 1004194:	10800044 	addi	r2,r2,1
 1004198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100419c:	003fde06 	br	1004118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10041a0:	e037883a 	mov	sp,fp
 10041a4:	dfc00117 	ldw	ra,4(sp)
 10041a8:	df000017 	ldw	fp,0(sp)
 10041ac:	dec00204 	addi	sp,sp,8
 10041b0:	f800283a 	ret

Disassembly of section .text:

00800194 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800194:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800198:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80019c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a0:	00bffd16 	blt	zero,r2,800198 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001ac:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b0:	d6ab4f14 	ori	gp,gp,44348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b8:	1092f314 	ori	r2,r2,19404

    movhi r3, %hi(__bss_end)
  8001bc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c0:	18d5b314 	ori	r3,r3,22220

    beq r2, r3, 1f
  8001c4:	10c00326 	beq	r2,r3,8001d4 <_start+0x40>

0:
    stw zero, (r2)
  8001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d0:	10fffd36 	bltu	r2,r3,8001c8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d4:	080d7f40 	call	80d7f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d8:	080da300 	call	80da30 <alt_main>

008001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001dc:	003fff06 	br	8001dc <alt_after_alt_main>

008001e0 <_ZN3SPIC2Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  8001e0:	defffd04 	addi	sp,sp,-12
  8001e4:	df000215 	stw	fp,8(sp)
  8001e8:	df000204 	addi	fp,sp,8
  8001ec:	e13ffe15 	stw	r4,-8(fp)
  8001f0:	e17fff15 	stw	r5,-4(fp)
  8001f4:	00c02074 	movhi	r3,129
  8001f8:	18c27604 	addi	r3,r3,2520
  8001fc:	e0bffe17 	ldw	r2,-8(fp)
  800200:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  800204:	e0fffe17 	ldw	r3,-8(fp)
  800208:	e0bfff17 	ldw	r2,-4(fp)
  80020c:	18800115 	stw	r2,4(r3)
}
  800210:	e037883a 	mov	sp,fp
  800214:	df000017 	ldw	fp,0(sp)
  800218:	dec00104 	addi	sp,sp,4
  80021c:	f800283a 	ret

00800220 <_ZN3SPIC1Em>:

#include "SPI.h"
#include "altera_avalon_spi.h"


SPI::SPI(unsigned long base_address){
  800220:	defffd04 	addi	sp,sp,-12
  800224:	df000215 	stw	fp,8(sp)
  800228:	df000204 	addi	fp,sp,8
  80022c:	e13ffe15 	stw	r4,-8(fp)
  800230:	e17fff15 	stw	r5,-4(fp)
  800234:	00c02074 	movhi	r3,129
  800238:	18c27604 	addi	r3,r3,2520
  80023c:	e0bffe17 	ldw	r2,-8(fp)
  800240:	10c00015 	stw	r3,0(r2)
	_base_address= base_address;
  800244:	e0fffe17 	ldw	r3,-8(fp)
  800248:	e0bfff17 	ldw	r2,-4(fp)
  80024c:	18800115 	stw	r2,4(r3)
}
  800250:	e037883a 	mov	sp,fp
  800254:	df000017 	ldw	fp,0(sp)
  800258:	dec00104 	addi	sp,sp,4
  80025c:	f800283a 	ret

00800260 <_ZN3SPI15readCMVRegisterEh>:

SPI::~SPI(){}


unsigned char SPI::readCMVRegister(unsigned char address) {
  800260:	defff804 	addi	sp,sp,-32
  800264:	dfc00715 	stw	ra,28(sp)
  800268:	df000615 	stw	fp,24(sp)
  80026c:	df000604 	addi	fp,sp,24
  800270:	e13ffe15 	stw	r4,-8(fp)
  800274:	e17fff05 	stb	r5,-4(fp)

  unsigned char write_data[1];
  unsigned char read_data[1];

  write_data[0]= address & 0x7F;
  800278:	e0bfff03 	ldbu	r2,-4(fp)
  80027c:	10801fcc 	andi	r2,r2,127
  800280:	e0bffd05 	stb	r2,-12(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 1, write_data, 1, read_data, 0x00);
  800284:	e0bffe17 	ldw	r2,-8(fp)
  800288:	11000117 	ldw	r4,4(r2)
  80028c:	00800044 	movi	r2,1
  800290:	d8800015 	stw	r2,0(sp)
  800294:	e0bffd44 	addi	r2,fp,-11
  800298:	d8800115 	stw	r2,4(sp)
  80029c:	d8000215 	stw	zero,8(sp)
  8002a0:	000b883a 	mov	r5,zero
  8002a4:	01800044 	movi	r6,1
  8002a8:	e1fffd04 	addi	r7,fp,-12
  8002ac:	080ea740 	call	80ea74 <alt_avalon_spi_command>

	return read_data[0];
  8002b0:	e0bffd43 	ldbu	r2,-11(fp)
  8002b4:	10803fcc 	andi	r2,r2,255
}
  8002b8:	e037883a 	mov	sp,fp
  8002bc:	dfc00117 	ldw	ra,4(sp)
  8002c0:	df000017 	ldw	fp,0(sp)
  8002c4:	dec00204 	addi	sp,sp,8
  8002c8:	f800283a 	ret

008002cc <_ZN3SPI16writeCMVRegisterEhh>:

bool SPI::writeCMVRegister(unsigned char address, unsigned char value)
  8002cc:	defff704 	addi	sp,sp,-36
  8002d0:	dfc00815 	stw	ra,32(sp)
  8002d4:	df000715 	stw	fp,28(sp)
  8002d8:	df000704 	addi	fp,sp,28
  8002dc:	e13ffd15 	stw	r4,-12(fp)
  8002e0:	e17ffe05 	stb	r5,-8(fp)
  8002e4:	e1bfff05 	stb	r6,-4(fp)
{
  unsigned char write_data[2];
  write_data[0]= address | 0x80;
  8002e8:	e0fffe03 	ldbu	r3,-8(fp)
  8002ec:	00bfe004 	movi	r2,-128
  8002f0:	1884b03a 	or	r2,r3,r2
  8002f4:	e0bffc05 	stb	r2,-16(fp)
  write_data[1]= value;
  8002f8:	e0bfff03 	ldbu	r2,-4(fp)
  8002fc:	e0bffc45 	stb	r2,-15(fp)

	alt_avalon_spi_command( _base_address, SPI_SLAVE_CMV_ENABLE, 2, write_data, 0, 0x00, 0x00);
  800300:	e0bffd17 	ldw	r2,-12(fp)
  800304:	11000117 	ldw	r4,4(r2)
  800308:	d8000015 	stw	zero,0(sp)
  80030c:	d8000115 	stw	zero,4(sp)
  800310:	d8000215 	stw	zero,8(sp)
  800314:	000b883a 	mov	r5,zero
  800318:	01800084 	movi	r6,2
  80031c:	e1fffc04 	addi	r7,fp,-16
  800320:	080ea740 	call	80ea74 <alt_avalon_spi_command>

	return (value == this->readCMVRegister(address));
  800324:	e17ffe03 	ldbu	r5,-8(fp)
  800328:	e13ffd17 	ldw	r4,-12(fp)
  80032c:	08002600 	call	800260 <_ZN3SPI15readCMVRegisterEh>
  800330:	10c03fcc 	andi	r3,r2,255
  800334:	e0bfff03 	ldbu	r2,-4(fp)
  800338:	1885003a 	cmpeq	r2,r3,r2
}
  80033c:	e037883a 	mov	sp,fp
  800340:	dfc00117 	ldw	ra,4(sp)
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00204 	addi	sp,sp,8
  80034c:	f800283a 	ret

00800350 <_ZN3SPID0Ev>:

SPI::SPI(unsigned long base_address){
	_base_address= base_address;
}

SPI::~SPI(){}
  800350:	defffd04 	addi	sp,sp,-12
  800354:	dfc00215 	stw	ra,8(sp)
  800358:	df000115 	stw	fp,4(sp)
  80035c:	df000104 	addi	fp,sp,4
  800360:	e13fff15 	stw	r4,-4(fp)
  800364:	00c02074 	movhi	r3,129
  800368:	18c27604 	addi	r3,r3,2520
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10c00015 	stw	r3,0(r2)
  800374:	00800044 	movi	r2,1
  800378:	10803fcc 	andi	r2,r2,255
  80037c:	1005003a 	cmpeq	r2,r2,zero
  800380:	1000021e 	bne	r2,zero,80038c <_ZN3SPID0Ev+0x3c>
  800384:	e13fff17 	ldw	r4,-4(fp)
  800388:	08019500 	call	801950 <_ZdlPv>
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <_ZN3SPID1Ev>:
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
  8003b4:	00c02074 	movhi	r3,129
  8003b8:	18c27604 	addi	r3,r3,2520
  8003bc:	e0bfff17 	ldw	r2,-4(fp)
  8003c0:	10c00015 	stw	r3,0(r2)
  8003c4:	0005883a 	mov	r2,zero
  8003c8:	10803fcc 	andi	r2,r2,255
  8003cc:	1005003a 	cmpeq	r2,r2,zero
  8003d0:	1000021e 	bne	r2,zero,8003dc <_ZN3SPID1Ev+0x3c>
  8003d4:	e13fff17 	ldw	r4,-4(fp)
  8003d8:	08019500 	call	801950 <_ZdlPv>
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	dfc00117 	ldw	ra,4(sp)
  8003e4:	df000017 	ldw	fp,0(sp)
  8003e8:	dec00204 	addi	sp,sp,8
  8003ec:	f800283a 	ret

008003f0 <_ZN3SPID2Ev>:
  8003f0:	defffd04 	addi	sp,sp,-12
  8003f4:	dfc00215 	stw	ra,8(sp)
  8003f8:	df000115 	stw	fp,4(sp)
  8003fc:	df000104 	addi	fp,sp,4
  800400:	e13fff15 	stw	r4,-4(fp)
  800404:	00c02074 	movhi	r3,129
  800408:	18c27604 	addi	r3,r3,2520
  80040c:	e0bfff17 	ldw	r2,-4(fp)
  800410:	10c00015 	stw	r3,0(r2)
  800414:	0005883a 	mov	r2,zero
  800418:	10803fcc 	andi	r2,r2,255
  80041c:	1005003a 	cmpeq	r2,r2,zero
  800420:	1000021e 	bne	r2,zero,80042c <_ZN3SPID2Ev+0x3c>
  800424:	e13fff17 	ldw	r4,-4(fp)
  800428:	08019500 	call	801950 <_ZdlPv>
  80042c:	e037883a 	mov	sp,fp
  800430:	dfc00117 	ldw	ra,4(sp)
  800434:	df000017 	ldw	fp,0(sp)
  800438:	dec00204 	addi	sp,sp,8
  80043c:	f800283a 	ret

00800440 <_ZN4UART17outBuffer_isEmptyEv>:

bool UART::inBuffer_isEmpty(void) {
	return _in_buffer->isEmpty();
}

bool UART::outBuffer_isEmpty(void) {
  800440:	defffd04 	addi	sp,sp,-12
  800444:	dfc00215 	stw	ra,8(sp)
  800448:	df000115 	stw	fp,4(sp)
  80044c:	df000104 	addi	fp,sp,4
  800450:	e13fff15 	stw	r4,-4(fp)
	return _out_buffer->isEmpty();
  800454:	e0bfff17 	ldw	r2,-4(fp)
  800458:	11000217 	ldw	r4,8(r2)
  80045c:	0800f440 	call	800f44 <_ZN4FIFOIcE7isEmptyEv>
  800460:	10803fcc 	andi	r2,r2,255
}
  800464:	e037883a 	mov	sp,fp
  800468:	dfc00117 	ldw	ra,4(sp)
  80046c:	df000017 	ldw	fp,0(sp)
  800470:	dec00204 	addi	sp,sp,8
  800474:	f800283a 	ret

00800478 <_ZN4UART16inBuffer_isEmptyEv>:
	delete _in_buffer;
	delete _out_buffer;
	free(irq_context);
}

bool UART::inBuffer_isEmpty(void) {
  800478:	defffd04 	addi	sp,sp,-12
  80047c:	dfc00215 	stw	ra,8(sp)
  800480:	df000115 	stw	fp,4(sp)
  800484:	df000104 	addi	fp,sp,4
  800488:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->isEmpty();
  80048c:	e0bfff17 	ldw	r2,-4(fp)
  800490:	11000117 	ldw	r4,4(r2)
  800494:	0800f440 	call	800f44 <_ZN4FIFOIcE7isEmptyEv>
  800498:	10803fcc 	andi	r2,r2,255
}
  80049c:	e037883a 	mov	sp,fp
  8004a0:	dfc00117 	ldw	ra,4(sp)
  8004a4:	df000017 	ldw	fp,0(sp)
  8004a8:	dec00204 	addi	sp,sp,8
  8004ac:	f800283a 	ret

008004b0 <_ZN4UART13buffer_putstrEPKc>:

void UART::buffer_putchar(const char character) {
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
  8004b0:	defffa04 	addi	sp,sp,-24
  8004b4:	dfc00515 	stw	ra,20(sp)
  8004b8:	df000415 	stw	fp,16(sp)
  8004bc:	df000404 	addi	fp,sp,16
  8004c0:	e13ffe15 	stw	r4,-8(fp)
  8004c4:	e17fff15 	stw	r5,-4(fp)
	int len = strlen(str);
  8004c8:	e13fff17 	ldw	r4,-4(fp)
  8004cc:	08041740 	call	804174 <strlen>
  8004d0:	e0bffd15 	stw	r2,-12(fp)
	for (int i = 0; i < len; i++)
  8004d4:	e03ffc15 	stw	zero,-16(fp)
  8004d8:	00000e06 	br	800514 <_ZN4UART13buffer_putstrEPKc+0x64>
		_out_buffer->push(str[i]);
  8004dc:	e0bffe17 	ldw	r2,-8(fp)
  8004e0:	11000217 	ldw	r4,8(r2)
  8004e4:	e0bffc17 	ldw	r2,-16(fp)
  8004e8:	1007883a 	mov	r3,r2
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	1885883a 	add	r2,r3,r2
  8004f4:	10800003 	ldbu	r2,0(r2)
  8004f8:	11403fcc 	andi	r5,r2,255
  8004fc:	2940201c 	xori	r5,r5,128
  800500:	297fe004 	addi	r5,r5,-128
  800504:	080106c0 	call	80106c <_ZN4FIFOIcE4pushEc>
	_out_buffer->push(character);
}

void UART::buffer_putstr(const char* str) {
	int len = strlen(str);
	for (int i = 0; i < len; i++)
  800508:	e0bffc17 	ldw	r2,-16(fp)
  80050c:	10800044 	addi	r2,r2,1
  800510:	e0bffc15 	stw	r2,-16(fp)
  800514:	e0fffc17 	ldw	r3,-16(fp)
  800518:	e0bffd17 	ldw	r2,-12(fp)
  80051c:	18bfef16 	blt	r3,r2,8004dc <_ZN4UART13buffer_putstrEPKc+0x2c>
		_out_buffer->push(str[i]);
}
  800520:	e037883a 	mov	sp,fp
  800524:	dfc00117 	ldw	ra,4(sp)
  800528:	df000017 	ldw	fp,0(sp)
  80052c:	dec00204 	addi	sp,sp,8
  800530:	f800283a 	ret

00800534 <_ZN4UART14buffer_putcharEc>:

	for (int i = 0; i < len; i++)
		_out_buffer->push(buffer[i]);
}

void UART::buffer_putchar(const char character) {
  800534:	defffc04 	addi	sp,sp,-16
  800538:	dfc00315 	stw	ra,12(sp)
  80053c:	df000215 	stw	fp,8(sp)
  800540:	df000204 	addi	fp,sp,8
  800544:	e13ffe15 	stw	r4,-8(fp)
  800548:	e17fff05 	stb	r5,-4(fp)
	_out_buffer->push(character);
  80054c:	e0bffe17 	ldw	r2,-8(fp)
  800550:	11000217 	ldw	r4,8(r2)
  800554:	e17fff07 	ldb	r5,-4(fp)
  800558:	080106c0 	call	80106c <_ZN4FIFOIcE4pushEc>
}
  80055c:	e037883a 	mov	sp,fp
  800560:	dfc00117 	ldw	ra,4(sp)
  800564:	df000017 	ldw	fp,0(sp)
  800568:	dec00204 	addi	sp,sp,8
  80056c:	f800283a 	ret

00800570 <_ZN4UART14buffer_getcharEv>:

bool UART::outBuffer_isEmpty(void) {
	return _out_buffer->isEmpty();
}

char UART::buffer_getchar(void) {
  800570:	defffd04 	addi	sp,sp,-12
  800574:	dfc00215 	stw	ra,8(sp)
  800578:	df000115 	stw	fp,4(sp)
  80057c:	df000104 	addi	fp,sp,4
  800580:	e13fff15 	stw	r4,-4(fp)
	return _in_buffer->pull();
  800584:	e0bfff17 	ldw	r2,-4(fp)
  800588:	11000117 	ldw	r4,4(r2)
  80058c:	08011340 	call	801134 <_ZN4FIFOIcE4pullEv>
  800590:	10803fcc 	andi	r2,r2,255
  800594:	1080201c 	xori	r2,r2,128
  800598:	10bfe004 	addi	r2,r2,-128
}
  80059c:	e037883a 	mov	sp,fp
  8005a0:	dfc00117 	ldw	ra,4(sp)
  8005a4:	df000017 	ldw	fp,0(sp)
  8005a8:	dec00204 	addi	sp,sp,8
  8005ac:	f800283a 	ret

008005b0 <_ZN4UART13buffer_printfEPKcz>:
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
	}
}

void UART::buffer_printf( const char* format, ... ) {
  8005b0:	deffdd04 	addi	sp,sp,-140
  8005b4:	dfc02015 	stw	ra,128(sp)
  8005b8:	df001f15 	stw	fp,124(sp)
  8005bc:	ddc01e15 	stw	r23,120(sp)
  8005c0:	dd801d15 	stw	r22,116(sp)
  8005c4:	dd401c15 	stw	r21,112(sp)
  8005c8:	dd001b15 	stw	r20,108(sp)
  8005cc:	dcc01a15 	stw	r19,104(sp)
  8005d0:	dc801915 	stw	r18,100(sp)
  8005d4:	dc401815 	stw	r17,96(sp)
  8005d8:	dc001715 	stw	r16,92(sp)
  8005dc:	df001704 	addi	fp,sp,92
  8005e0:	e13fed15 	stw	r4,-76(fp)
  8005e4:	e1800a15 	stw	r6,40(fp)
  8005e8:	e1c00b15 	stw	r7,44(fp)
  8005ec:	e17fee15 	stw	r5,-72(fp)
  8005f0:	00802034 	movhi	r2,128
  8005f4:	10881b04 	addi	r2,r2,8300
  8005f8:	e0bff515 	stw	r2,-44(fp)
  8005fc:	00802074 	movhi	r2,129
  800600:	10824d04 	addi	r2,r2,2356
  800604:	e0bff615 	stw	r2,-40(fp)
  800608:	e0bff704 	addi	r2,fp,-36
  80060c:	e0ffe904 	addi	r3,fp,-92
  800610:	10c00015 	stw	r3,0(r2)
  800614:	00c02034 	movhi	r3,128
  800618:	18c1c204 	addi	r3,r3,1800
  80061c:	10c00115 	stw	r3,4(r2)
  800620:	16c00215 	stw	sp,8(r2)
  800624:	e13fef04 	addi	r4,fp,-68
  800628:	08030540 	call	803054 <_Unwind_SjLj_Register>
  80062c:	e6ffff15 	stw	sp,-4(fp)
  800630:	d805883a 	mov	r2,sp
  800634:	e0bffc15 	stw	r2,-16(fp)

  char buffer[_size_out];
  800638:	e0bfed17 	ldw	r2,-76(fp)
  80063c:	10800517 	ldw	r2,20(r2)
  800640:	10bfffc4 	addi	r2,r2,-1
  800644:	10800044 	addi	r2,r2,1
  800648:	108000c4 	addi	r2,r2,3
  80064c:	108000c4 	addi	r2,r2,3
  800650:	1004d0ba 	srli	r2,r2,2
  800654:	1085883a 	add	r2,r2,r2
  800658:	1085883a 	add	r2,r2,r2
  80065c:	d8b7c83a 	sub	sp,sp,r2
  800660:	e6fffd15 	stw	sp,-12(fp)
  800664:	e0fffd17 	ldw	r3,-12(fp)
  800668:	188000c4 	addi	r2,r3,3
  80066c:	1004d0ba 	srli	r2,r2,2
  800670:	1085883a 	add	r2,r2,r2
  800674:	1085883a 	add	r2,r2,r2
  800678:	e0bffd15 	stw	r2,-12(fp)
  80067c:	e0bffd17 	ldw	r2,-12(fp)
  800680:	e0bfeb15 	stw	r2,-84(fp)
  int len;

  va_list args;
  va_start (args, format);
  800684:	e0800a04 	addi	r2,fp,40
  800688:	e0bfec15 	stw	r2,-80(fp)
  len= vsnprintf(buffer, _size_out, format, args );
  80068c:	e13feb17 	ldw	r4,-84(fp)
  800690:	e0bfed17 	ldw	r2,-76(fp)
  800694:	11400517 	ldw	r5,20(r2)
  800698:	e1ffec17 	ldw	r7,-80(fp)
  80069c:	00800044 	movi	r2,1
  8006a0:	e0bff015 	stw	r2,-64(fp)
  8006a4:	e1bfee17 	ldw	r6,-72(fp)
  8006a8:	080429c0 	call	80429c <vsnprintf>
  8006ac:	e0bfea15 	stw	r2,-88(fp)
  va_end (args);

	for (int i = 0; i < len; i++)
  8006b0:	e03fe915 	stw	zero,-92(fp)
  8006b4:	00000f06 	br	8006f4 <_ZN4UART13buffer_printfEPKcz+0x144>
		_out_buffer->push(buffer[i]);
  8006b8:	e0bfed17 	ldw	r2,-76(fp)
  8006bc:	11000217 	ldw	r4,8(r2)
  8006c0:	e0ffe917 	ldw	r3,-92(fp)
  8006c4:	e0bfeb17 	ldw	r2,-84(fp)
  8006c8:	10c5883a 	add	r2,r2,r3
  8006cc:	10800003 	ldbu	r2,0(r2)
  8006d0:	11403fcc 	andi	r5,r2,255
  8006d4:	2940201c 	xori	r5,r5,128
  8006d8:	297fe004 	addi	r5,r5,-128
  8006dc:	00800044 	movi	r2,1
  8006e0:	e0bff015 	stw	r2,-64(fp)
  8006e4:	080106c0 	call	80106c <_ZN4FIFOIcE4pushEc>
  va_list args;
  va_start (args, format);
  len= vsnprintf(buffer, _size_out, format, args );
  va_end (args);

	for (int i = 0; i < len; i++)
  8006e8:	e0bfe917 	ldw	r2,-92(fp)
  8006ec:	10800044 	addi	r2,r2,1
  8006f0:	e0bfe915 	stw	r2,-92(fp)
  8006f4:	e0ffe917 	ldw	r3,-92(fp)
  8006f8:	e0bfea17 	ldw	r2,-88(fp)
  8006fc:	18bfee16 	blt	r3,r2,8006b8 <_ZN4UART13buffer_printfEPKcz+0x108>
  800700:	e6fffc17 	ldw	sp,-16(fp)
		_out_buffer->push(buffer[i]);
}
  800704:	00000a06 	br	800730 <_ZN4UART13buffer_printfEPKcz+0x180>
  800708:	e7001704 	addi	fp,fp,92
  80070c:	e0fff117 	ldw	r3,-60(fp)
  800710:	e0fffe15 	stw	r3,-8(fp)
  800714:	e0bffe17 	ldw	r2,-8(fp)
  800718:	e6fffc17 	ldw	sp,-16(fp)
  80071c:	e0bffe15 	stw	r2,-8(fp)
  800720:	00bfffc4 	movi	r2,-1
  800724:	e0bff015 	stw	r2,-64(fp)
  800728:	e13ffe17 	ldw	r4,-8(fp)
  80072c:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  800730:	e6ffff17 	ldw	sp,-4(fp)
  800734:	e13fef04 	addi	r4,fp,-68
  800738:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  80073c:	e037883a 	mov	sp,fp
  800740:	dfc00917 	ldw	ra,36(sp)
  800744:	df000817 	ldw	fp,32(sp)
  800748:	ddc00717 	ldw	r23,28(sp)
  80074c:	dd800617 	ldw	r22,24(sp)
  800750:	dd400517 	ldw	r21,20(sp)
  800754:	dd000417 	ldw	r20,16(sp)
  800758:	dcc00317 	ldw	r19,12(sp)
  80075c:	dc800217 	ldw	r18,8(sp)
  800760:	dc400117 	ldw	r17,4(sp)
  800764:	dc000017 	ldw	r16,0(sp)
  800768:	dec00c04 	addi	sp,sp,48
  80076c:	f800283a 	ret

00800770 <_ZN4UART4sendEv>:
	while (!outBuffer_isEmpty()) {
		send();
	}
}

void UART::send() {
  800770:	defffb04 	addi	sp,sp,-20
  800774:	dfc00415 	stw	ra,16(sp)
  800778:	df000315 	stw	fp,12(sp)
  80077c:	dc000215 	stw	r16,8(sp)
  800780:	df000204 	addi	fp,sp,8
  800784:	e13ffe15 	stw	r4,-8(fp)
	if (!outBuffer_isEmpty()
  800788:	e13ffe17 	ldw	r4,-8(fp)
  80078c:	08004400 	call	800440 <_ZN4UART17outBuffer_isEmptyEv>
  800790:	1080005c 	xori	r2,r2,1
  800794:	1080005c 	xori	r2,r2,1
  800798:	10803fcc 	andi	r2,r2,255
  80079c:	1004c03a 	cmpne	r2,r2,zero
  8007a0:	10000a1e 	bne	r2,zero,8007cc <_ZN4UART4sendEv+0x5c>
  8007a4:	e0bffe17 	ldw	r2,-8(fp)
  8007a8:	10800317 	ldw	r2,12(r2)
  8007ac:	10800204 	addi	r2,r2,8
  8007b0:	10800037 	ldwio	r2,0(r2)
  8007b4:	1080100c 	andi	r2,r2,64
  8007b8:	1005003a 	cmpeq	r2,r2,zero
  8007bc:	1000031e 	bne	r2,zero,8007cc <_ZN4UART4sendEv+0x5c>
  8007c0:	00800044 	movi	r2,1
  8007c4:	e0bfff05 	stb	r2,-4(fp)
  8007c8:	00000106 	br	8007d0 <_ZN4UART4sendEv+0x60>
  8007cc:	e03fff05 	stb	zero,-4(fp)
  8007d0:	e0bfff03 	ldbu	r2,-4(fp)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1005003a 	cmpeq	r2,r2,zero
  8007dc:	10000b1e 	bne	r2,zero,80080c <_ZN4UART4sendEv+0x9c>
	    && (IORD_ALTERA_AVALON_UART_STATUS( _base_adress )
	        & ALTERA_AVALON_UART_STATUS_TRDY_MSK)) {
		IOWR_ALTERA_AVALON_UART_TXDATA(_base_adress, _out_buffer->pull());
  8007e0:	e0bffe17 	ldw	r2,-8(fp)
  8007e4:	10800317 	ldw	r2,12(r2)
  8007e8:	14000104 	addi	r16,r2,4
  8007ec:	e0bffe17 	ldw	r2,-8(fp)
  8007f0:	11000217 	ldw	r4,8(r2)
  8007f4:	08011340 	call	801134 <_ZN4FIFOIcE4pullEv>
  8007f8:	10c03fcc 	andi	r3,r2,255
  8007fc:	18c0201c 	xori	r3,r3,128
  800800:	18ffe004 	addi	r3,r3,-128
  800804:	8005883a 	mov	r2,r16
  800808:	10c00035 	stwio	r3,0(r2)
	}
}
  80080c:	e037883a 	mov	sp,fp
  800810:	dfc00217 	ldw	ra,8(sp)
  800814:	df000117 	ldw	fp,4(sp)
  800818:	dc000017 	ldw	r16,0(sp)
  80081c:	dec00304 	addi	sp,sp,12
  800820:	f800283a 	ret

00800824 <_ZN4UART7sendAllEv>:

char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
  800824:	defffd04 	addi	sp,sp,-12
  800828:	dfc00215 	stw	ra,8(sp)
  80082c:	df000115 	stw	fp,4(sp)
  800830:	df000104 	addi	fp,sp,4
  800834:	e13fff15 	stw	r4,-4(fp)
	while (!outBuffer_isEmpty()) {
  800838:	00000206 	br	800844 <_ZN4UART7sendAllEv+0x20>
		send();
  80083c:	e13fff17 	ldw	r4,-4(fp)
  800840:	08007700 	call	800770 <_ZN4UART4sendEv>
char UART::buffer_getchar(void) {
	return _in_buffer->pull();
}

void UART::sendAll() {
	while (!outBuffer_isEmpty()) {
  800844:	e13fff17 	ldw	r4,-4(fp)
  800848:	08004400 	call	800440 <_ZN4UART17outBuffer_isEmptyEv>
  80084c:	1080005c 	xori	r2,r2,1
  800850:	10803fcc 	andi	r2,r2,255
  800854:	1004c03a 	cmpne	r2,r2,zero
  800858:	103ff81e 	bne	r2,zero,80083c <_ZN4UART7sendAllEv+0x18>
		send();
	}
}
  80085c:	e037883a 	mov	sp,fp
  800860:	dfc00117 	ldw	ra,4(sp)
  800864:	df000017 	ldw	fp,0(sp)
  800868:	dec00204 	addi	sp,sp,8
  80086c:	f800283a 	ret

00800870 <_Z23_UART_receive_interruptPv>:

#include "malloc.h"
#include "string.h"
#include "stdarg.h"

static void _UART_receive_interrupt(void* context) {
  800870:	defffc04 	addi	sp,sp,-16
  800874:	dfc00315 	stw	ra,12(sp)
  800878:	df000215 	stw	fp,8(sp)
  80087c:	df000204 	addi	fp,sp,8
  800880:	e13fff15 	stw	r4,-4(fp)
	UART_interrupt_context* interrupt_context = (UART_interrupt_context*) context;
  800884:	e0bfff17 	ldw	r2,-4(fp)
  800888:	e0bffe15 	stw	r2,-8(fp)
	interrupt_context->_in_buffer->push(
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
  80088c:	e0bffe17 	ldw	r2,-8(fp)
  800890:	11000017 	ldw	r4,0(r2)
  800894:	e0bffe17 	ldw	r2,-8(fp)
  800898:	10800117 	ldw	r2,4(r2)
  80089c:	10800037 	ldwio	r2,0(r2)
  8008a0:	11403fcc 	andi	r5,r2,255
  8008a4:	2940201c 	xori	r5,r5,128
  8008a8:	297fe004 	addi	r5,r5,-128
  8008ac:	080106c0 	call	80106c <_ZN4FIFOIcE4pushEc>
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
  8008b0:	e0bffe17 	ldw	r2,-8(fp)
  8008b4:	10800117 	ldw	r2,4(r2)
  8008b8:	10000035 	stwio	zero,0(r2)
}
  8008bc:	e037883a 	mov	sp,fp
  8008c0:	dfc00117 	ldw	ra,4(sp)
  8008c4:	df000017 	ldw	fp,0(sp)
  8008c8:	dec00204 	addi	sp,sp,8
  8008cc:	f800283a 	ret

008008d0 <_ZN4UARTD0Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  8008d0:	defffd04 	addi	sp,sp,-12
  8008d4:	dfc00215 	stw	ra,8(sp)
  8008d8:	df000115 	stw	fp,4(sp)
  8008dc:	df000104 	addi	fp,sp,4
  8008e0:	e13fff15 	stw	r4,-4(fp)
  8008e4:	00c02074 	movhi	r3,129
  8008e8:	18c28904 	addi	r3,r3,2596
  8008ec:	e0bfff17 	ldw	r2,-4(fp)
  8008f0:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  8008f4:	e0bfff17 	ldw	r2,-4(fp)
  8008f8:	10800117 	ldw	r2,4(r2)
  8008fc:	1005003a 	cmpeq	r2,r2,zero
  800900:	1000081e 	bne	r2,zero,800924 <_ZN4UARTD0Ev+0x54>
  800904:	e0bfff17 	ldw	r2,-4(fp)
  800908:	10800117 	ldw	r2,4(r2)
  80090c:	10800017 	ldw	r2,0(r2)
  800910:	10800104 	addi	r2,r2,4
  800914:	10c00017 	ldw	r3,0(r2)
  800918:	e0bfff17 	ldw	r2,-4(fp)
  80091c:	11000117 	ldw	r4,4(r2)
  800920:	183ee83a 	callr	r3
	delete _out_buffer;
  800924:	e0bfff17 	ldw	r2,-4(fp)
  800928:	10800217 	ldw	r2,8(r2)
  80092c:	1005003a 	cmpeq	r2,r2,zero
  800930:	1000081e 	bne	r2,zero,800954 <_ZN4UARTD0Ev+0x84>
  800934:	e0bfff17 	ldw	r2,-4(fp)
  800938:	10800217 	ldw	r2,8(r2)
  80093c:	10800017 	ldw	r2,0(r2)
  800940:	10800104 	addi	r2,r2,4
  800944:	10c00017 	ldw	r3,0(r2)
  800948:	e0bfff17 	ldw	r2,-4(fp)
  80094c:	11000217 	ldw	r4,8(r2)
  800950:	183ee83a 	callr	r3
	free(irq_context);
  800954:	e0bfff17 	ldw	r2,-4(fp)
  800958:	11000617 	ldw	r4,24(r2)
  80095c:	08035b40 	call	8035b4 <free>
}
  800960:	00800044 	movi	r2,1
  800964:	10803fcc 	andi	r2,r2,255
  800968:	1005003a 	cmpeq	r2,r2,zero
  80096c:	1000021e 	bne	r2,zero,800978 <_ZN4UARTD0Ev+0xa8>
  800970:	e13fff17 	ldw	r4,-4(fp)
  800974:	08019500 	call	801950 <_ZdlPv>
  800978:	e037883a 	mov	sp,fp
  80097c:	dfc00117 	ldw	ra,4(sp)
  800980:	df000017 	ldw	fp,0(sp)
  800984:	dec00204 	addi	sp,sp,8
  800988:	f800283a 	ret

0080098c <_ZN4UARTD1Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  80098c:	defffd04 	addi	sp,sp,-12
  800990:	dfc00215 	stw	ra,8(sp)
  800994:	df000115 	stw	fp,4(sp)
  800998:	df000104 	addi	fp,sp,4
  80099c:	e13fff15 	stw	r4,-4(fp)
  8009a0:	00c02074 	movhi	r3,129
  8009a4:	18c28904 	addi	r3,r3,2596
  8009a8:	e0bfff17 	ldw	r2,-4(fp)
  8009ac:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  8009b0:	e0bfff17 	ldw	r2,-4(fp)
  8009b4:	10800117 	ldw	r2,4(r2)
  8009b8:	1005003a 	cmpeq	r2,r2,zero
  8009bc:	1000081e 	bne	r2,zero,8009e0 <_ZN4UARTD1Ev+0x54>
  8009c0:	e0bfff17 	ldw	r2,-4(fp)
  8009c4:	10800117 	ldw	r2,4(r2)
  8009c8:	10800017 	ldw	r2,0(r2)
  8009cc:	10800104 	addi	r2,r2,4
  8009d0:	10c00017 	ldw	r3,0(r2)
  8009d4:	e0bfff17 	ldw	r2,-4(fp)
  8009d8:	11000117 	ldw	r4,4(r2)
  8009dc:	183ee83a 	callr	r3
	delete _out_buffer;
  8009e0:	e0bfff17 	ldw	r2,-4(fp)
  8009e4:	10800217 	ldw	r2,8(r2)
  8009e8:	1005003a 	cmpeq	r2,r2,zero
  8009ec:	1000081e 	bne	r2,zero,800a10 <_ZN4UARTD1Ev+0x84>
  8009f0:	e0bfff17 	ldw	r2,-4(fp)
  8009f4:	10800217 	ldw	r2,8(r2)
  8009f8:	10800017 	ldw	r2,0(r2)
  8009fc:	10800104 	addi	r2,r2,4
  800a00:	10c00017 	ldw	r3,0(r2)
  800a04:	e0bfff17 	ldw	r2,-4(fp)
  800a08:	11000217 	ldw	r4,8(r2)
  800a0c:	183ee83a 	callr	r3
	free(irq_context);
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	11000617 	ldw	r4,24(r2)
  800a18:	08035b40 	call	8035b4 <free>
}
  800a1c:	0005883a 	mov	r2,zero
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1005003a 	cmpeq	r2,r2,zero
  800a28:	1000021e 	bne	r2,zero,800a34 <_ZN4UARTD1Ev+0xa8>
  800a2c:	e13fff17 	ldw	r4,-4(fp)
  800a30:	08019500 	call	801950 <_ZdlPv>
  800a34:	e037883a 	mov	sp,fp
  800a38:	dfc00117 	ldw	ra,4(sp)
  800a3c:	df000017 	ldw	fp,0(sp)
  800a40:	dec00204 	addi	sp,sp,8
  800a44:	f800283a 	ret

00800a48 <_ZN4UARTD2Ev>:
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}

UART::~UART() {
  800a48:	defffd04 	addi	sp,sp,-12
  800a4c:	dfc00215 	stw	ra,8(sp)
  800a50:	df000115 	stw	fp,4(sp)
  800a54:	df000104 	addi	fp,sp,4
  800a58:	e13fff15 	stw	r4,-4(fp)
  800a5c:	00c02074 	movhi	r3,129
  800a60:	18c28904 	addi	r3,r3,2596
  800a64:	e0bfff17 	ldw	r2,-4(fp)
  800a68:	10c00015 	stw	r3,0(r2)
	delete _in_buffer;
  800a6c:	e0bfff17 	ldw	r2,-4(fp)
  800a70:	10800117 	ldw	r2,4(r2)
  800a74:	1005003a 	cmpeq	r2,r2,zero
  800a78:	1000081e 	bne	r2,zero,800a9c <_ZN4UARTD2Ev+0x54>
  800a7c:	e0bfff17 	ldw	r2,-4(fp)
  800a80:	10800117 	ldw	r2,4(r2)
  800a84:	10800017 	ldw	r2,0(r2)
  800a88:	10800104 	addi	r2,r2,4
  800a8c:	10c00017 	ldw	r3,0(r2)
  800a90:	e0bfff17 	ldw	r2,-4(fp)
  800a94:	11000117 	ldw	r4,4(r2)
  800a98:	183ee83a 	callr	r3
	delete _out_buffer;
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
  800aa0:	10800217 	ldw	r2,8(r2)
  800aa4:	1005003a 	cmpeq	r2,r2,zero
  800aa8:	1000081e 	bne	r2,zero,800acc <_ZN4UARTD2Ev+0x84>
  800aac:	e0bfff17 	ldw	r2,-4(fp)
  800ab0:	10800217 	ldw	r2,8(r2)
  800ab4:	10800017 	ldw	r2,0(r2)
  800ab8:	10800104 	addi	r2,r2,4
  800abc:	10c00017 	ldw	r3,0(r2)
  800ac0:	e0bfff17 	ldw	r2,-4(fp)
  800ac4:	11000217 	ldw	r4,8(r2)
  800ac8:	183ee83a 	callr	r3
	free(irq_context);
  800acc:	e0bfff17 	ldw	r2,-4(fp)
  800ad0:	11000617 	ldw	r4,24(r2)
  800ad4:	08035b40 	call	8035b4 <free>
}
  800ad8:	0005883a 	mov	r2,zero
  800adc:	10803fcc 	andi	r2,r2,255
  800ae0:	1005003a 	cmpeq	r2,r2,zero
  800ae4:	1000021e 	bne	r2,zero,800af0 <_ZN4UARTD2Ev+0xa8>
  800ae8:	e13fff17 	ldw	r4,-4(fp)
  800aec:	08019500 	call	801950 <_ZdlPv>
  800af0:	e037883a 	mov	sp,fp
  800af4:	dfc00117 	ldw	ra,4(sp)
  800af8:	df000017 	ldw	fp,0(sp)
  800afc:	dec00204 	addi	sp,sp,8
  800b00:	f800283a 	ret

00800b04 <_ZN4UARTC1Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  800b04:	deffe004 	addi	sp,sp,-128
  800b08:	dfc01f15 	stw	ra,124(sp)
  800b0c:	df001e15 	stw	fp,120(sp)
  800b10:	ddc01d15 	stw	r23,116(sp)
  800b14:	dd801c15 	stw	r22,112(sp)
  800b18:	dd401b15 	stw	r21,108(sp)
  800b1c:	dd001a15 	stw	r20,104(sp)
  800b20:	dcc01915 	stw	r19,100(sp)
  800b24:	dc801815 	stw	r18,96(sp)
  800b28:	dc401715 	stw	r17,92(sp)
  800b2c:	dc001615 	stw	r16,88(sp)
  800b30:	df001604 	addi	fp,sp,88
  800b34:	e13fea15 	stw	r4,-88(fp)
  800b38:	e17feb15 	stw	r5,-84(fp)
  800b3c:	e1bfec15 	stw	r6,-80(fp)
  800b40:	e1ffed15 	stw	r7,-76(fp)
  800b44:	00802034 	movhi	r2,128
  800b48:	10881b04 	addi	r2,r2,8300
  800b4c:	e0bff415 	stw	r2,-48(fp)
  800b50:	00802074 	movhi	r2,129
  800b54:	10824e84 	addi	r2,r2,2362
  800b58:	e0bff515 	stw	r2,-44(fp)
  800b5c:	e0bff604 	addi	r2,fp,-40
  800b60:	e0ffea04 	addi	r3,fp,-88
  800b64:	10c00015 	stw	r3,0(r2)
  800b68:	00c02034 	movhi	r3,128
  800b6c:	18c32a04 	addi	r3,r3,3240
  800b70:	10c00115 	stw	r3,4(r2)
  800b74:	16c00215 	stw	sp,8(r2)
  800b78:	e13fee04 	addi	r4,fp,-72
  800b7c:	08030540 	call	803054 <_Unwind_SjLj_Register>
  800b80:	00c02074 	movhi	r3,129
  800b84:	18c28904 	addi	r3,r3,2596
  800b88:	e0bfea17 	ldw	r2,-88(fp)
  800b8c:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  800b90:	e0ffea17 	ldw	r3,-88(fp)
  800b94:	e0bfeb17 	ldw	r2,-84(fp)
  800b98:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  800b9c:	e0ffea17 	ldw	r3,-88(fp)
  800ba0:	e0800a17 	ldw	r2,40(fp)
  800ba4:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  800ba8:	e0ffea17 	ldw	r3,-88(fp)
  800bac:	e0bfed17 	ldw	r2,-76(fp)
  800bb0:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  800bb4:	00bfffc4 	movi	r2,-1
  800bb8:	e0bfef15 	stw	r2,-68(fp)
  800bbc:	01000504 	movi	r4,20
  800bc0:	08029ec0 	call	8029ec <_Znwm>
  800bc4:	e0bffe15 	stw	r2,-8(fp)
  800bc8:	00800084 	movi	r2,2
  800bcc:	e0bfef15 	stw	r2,-68(fp)
  800bd0:	e13ffe17 	ldw	r4,-8(fp)
  800bd4:	e17fed17 	ldw	r5,-76(fp)
  800bd8:	08011b80 	call	8011b8 <_ZN4FIFOIcEC1Ej>
  800bdc:	e0bfea17 	ldw	r2,-88(fp)
  800be0:	e0fffe17 	ldw	r3,-8(fp)
  800be4:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  800be8:	00bfffc4 	movi	r2,-1
  800bec:	e0bfef15 	stw	r2,-68(fp)
  800bf0:	01000504 	movi	r4,20
  800bf4:	08029ec0 	call	8029ec <_Znwm>
  800bf8:	e0bffd15 	stw	r2,-12(fp)
  800bfc:	00800044 	movi	r2,1
  800c00:	e0bfef15 	stw	r2,-68(fp)
  800c04:	e13ffd17 	ldw	r4,-12(fp)
  800c08:	e1400a17 	ldw	r5,40(fp)
  800c0c:	08011b80 	call	8011b8 <_ZN4FIFOIcEC1Ej>
  800c10:	00000a06 	br	800c3c <_ZN4UARTC1Emmjj+0x138>
  800c14:	e0bfff17 	ldw	r2,-4(fp)
  800c18:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  800c1c:	e13ffe17 	ldw	r4,-8(fp)
  800c20:	08019500 	call	801950 <_ZdlPv>
  800c24:	e0fffc17 	ldw	r3,-16(fp)
  800c28:	e0ffff15 	stw	r3,-4(fp)
  800c2c:	00bfffc4 	movi	r2,-1
  800c30:	e0bfef15 	stw	r2,-68(fp)
  800c34:	e13fff17 	ldw	r4,-4(fp)
  800c38:	08033200 	call	803320 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  800c3c:	e0bfea17 	ldw	r2,-88(fp)
  800c40:	e0fffd17 	ldw	r3,-12(fp)
  800c44:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  800c48:	01000204 	movi	r4,8
  800c4c:	08035c80 	call	8035c8 <malloc>
  800c50:	1007883a 	mov	r3,r2
  800c54:	e0bfea17 	ldw	r2,-88(fp)
  800c58:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  800c5c:	e0bfea17 	ldw	r2,-88(fp)
  800c60:	10c00617 	ldw	r3,24(r2)
  800c64:	e0bfea17 	ldw	r2,-88(fp)
  800c68:	10800317 	ldw	r2,12(r2)
  800c6c:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  800c70:	e0bfea17 	ldw	r2,-88(fp)
  800c74:	10c00617 	ldw	r3,24(r2)
  800c78:	e0bfea17 	ldw	r2,-88(fp)
  800c7c:	10800117 	ldw	r2,4(r2)
  800c80:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  800c84:	e0bfea17 	ldw	r2,-88(fp)
  800c88:	11400617 	ldw	r5,24(r2)
  800c8c:	00bfffc4 	movi	r2,-1
  800c90:	e0bfef15 	stw	r2,-68(fp)
  800c94:	e13fec17 	ldw	r4,-80(fp)
  800c98:	01802034 	movhi	r6,128
  800c9c:	31821c04 	addi	r6,r6,2160
  800ca0:	080d3740 	call	80d374 <alt_irq_register>
}
  800ca4:	00001006 	br	800ce8 <_ZN4UARTC1Emmjj+0x1e4>
  800ca8:	e7001604 	addi	fp,fp,88
  800cac:	e0bfef17 	ldw	r2,-68(fp)
  800cb0:	e0fff017 	ldw	r3,-64(fp)
  800cb4:	e0ffff15 	stw	r3,-4(fp)
  800cb8:	10800060 	cmpeqi	r2,r2,1
  800cbc:	103fd51e 	bne	r2,zero,800c14 <_ZN4UARTC1Emmjj+0x110>
  800cc0:	e0bfff17 	ldw	r2,-4(fp)
  800cc4:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  800cc8:	e13ffd17 	ldw	r4,-12(fp)
  800ccc:	08019500 	call	801950 <_ZdlPv>
  800cd0:	e0fffb17 	ldw	r3,-20(fp)
  800cd4:	e0ffff15 	stw	r3,-4(fp)
  800cd8:	00bfffc4 	movi	r2,-1
  800cdc:	e0bfef15 	stw	r2,-68(fp)
  800ce0:	e13fff17 	ldw	r4,-4(fp)
  800ce4:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  800ce8:	e13fee04 	addi	r4,fp,-72
  800cec:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  800cf0:	e037883a 	mov	sp,fp
  800cf4:	dfc00917 	ldw	ra,36(sp)
  800cf8:	df000817 	ldw	fp,32(sp)
  800cfc:	ddc00717 	ldw	r23,28(sp)
  800d00:	dd800617 	ldw	r22,24(sp)
  800d04:	dd400517 	ldw	r21,20(sp)
  800d08:	dd000417 	ldw	r20,16(sp)
  800d0c:	dcc00317 	ldw	r19,12(sp)
  800d10:	dc800217 	ldw	r18,8(sp)
  800d14:	dc400117 	ldw	r17,4(sp)
  800d18:	dc000017 	ldw	r16,0(sp)
  800d1c:	dec00a04 	addi	sp,sp,40
  800d20:	f800283a 	ret

00800d24 <_ZN4UARTC2Emmjj>:
	    (char) (IORD_ALTERA_AVALON_UART_RXDATA(interrupt_context->_base_adress)));
	IOWR_ALTERA_AVALON_UART_RXDATA( interrupt_context->_base_adress, 0);
}

UART::UART(unsigned long base_adress, unsigned long irq, unsigned size_in,
    unsigned size_out) {
  800d24:	deffe004 	addi	sp,sp,-128
  800d28:	dfc01f15 	stw	ra,124(sp)
  800d2c:	df001e15 	stw	fp,120(sp)
  800d30:	ddc01d15 	stw	r23,116(sp)
  800d34:	dd801c15 	stw	r22,112(sp)
  800d38:	dd401b15 	stw	r21,108(sp)
  800d3c:	dd001a15 	stw	r20,104(sp)
  800d40:	dcc01915 	stw	r19,100(sp)
  800d44:	dc801815 	stw	r18,96(sp)
  800d48:	dc401715 	stw	r17,92(sp)
  800d4c:	dc001615 	stw	r16,88(sp)
  800d50:	df001604 	addi	fp,sp,88
  800d54:	e13fea15 	stw	r4,-88(fp)
  800d58:	e17feb15 	stw	r5,-84(fp)
  800d5c:	e1bfec15 	stw	r6,-80(fp)
  800d60:	e1ffed15 	stw	r7,-76(fp)
  800d64:	00802034 	movhi	r2,128
  800d68:	10881b04 	addi	r2,r2,8300
  800d6c:	e0bff415 	stw	r2,-48(fp)
  800d70:	00802074 	movhi	r2,129
  800d74:	10825084 	addi	r2,r2,2370
  800d78:	e0bff515 	stw	r2,-44(fp)
  800d7c:	e0bff604 	addi	r2,fp,-40
  800d80:	e0ffea04 	addi	r3,fp,-88
  800d84:	10c00015 	stw	r3,0(r2)
  800d88:	00c02034 	movhi	r3,128
  800d8c:	18c3b204 	addi	r3,r3,3784
  800d90:	10c00115 	stw	r3,4(r2)
  800d94:	16c00215 	stw	sp,8(r2)
  800d98:	e13fee04 	addi	r4,fp,-72
  800d9c:	08030540 	call	803054 <_Unwind_SjLj_Register>
  800da0:	00c02074 	movhi	r3,129
  800da4:	18c28904 	addi	r3,r3,2596
  800da8:	e0bfea17 	ldw	r2,-88(fp)
  800dac:	10c00015 	stw	r3,0(r2)

	_base_adress = base_adress;
  800db0:	e0ffea17 	ldw	r3,-88(fp)
  800db4:	e0bfeb17 	ldw	r2,-84(fp)
  800db8:	18800315 	stw	r2,12(r3)
	_size_out = size_out;
  800dbc:	e0ffea17 	ldw	r3,-88(fp)
  800dc0:	e0800a17 	ldw	r2,40(fp)
  800dc4:	18800515 	stw	r2,20(r3)
	_size_in = size_in;
  800dc8:	e0ffea17 	ldw	r3,-88(fp)
  800dcc:	e0bfed17 	ldw	r2,-76(fp)
  800dd0:	18800415 	stw	r2,16(r3)
	_in_buffer = new FIFO<char>(size_in);
  800dd4:	00bfffc4 	movi	r2,-1
  800dd8:	e0bfef15 	stw	r2,-68(fp)
  800ddc:	01000504 	movi	r4,20
  800de0:	08029ec0 	call	8029ec <_Znwm>
  800de4:	e0bffe15 	stw	r2,-8(fp)
  800de8:	00800084 	movi	r2,2
  800dec:	e0bfef15 	stw	r2,-68(fp)
  800df0:	e13ffe17 	ldw	r4,-8(fp)
  800df4:	e17fed17 	ldw	r5,-76(fp)
  800df8:	08011b80 	call	8011b8 <_ZN4FIFOIcEC1Ej>
  800dfc:	e0bfea17 	ldw	r2,-88(fp)
  800e00:	e0fffe17 	ldw	r3,-8(fp)
  800e04:	10c00115 	stw	r3,4(r2)
	_out_buffer = new FIFO<char>(size_out);
  800e08:	00bfffc4 	movi	r2,-1
  800e0c:	e0bfef15 	stw	r2,-68(fp)
  800e10:	01000504 	movi	r4,20
  800e14:	08029ec0 	call	8029ec <_Znwm>
  800e18:	e0bffd15 	stw	r2,-12(fp)
  800e1c:	00800044 	movi	r2,1
  800e20:	e0bfef15 	stw	r2,-68(fp)
  800e24:	e13ffd17 	ldw	r4,-12(fp)
  800e28:	e1400a17 	ldw	r5,40(fp)
  800e2c:	08011b80 	call	8011b8 <_ZN4FIFOIcEC1Ej>
  800e30:	00000a06 	br	800e5c <_ZN4UARTC2Emmjj+0x138>
  800e34:	e0bfff17 	ldw	r2,-4(fp)
  800e38:	e0bffc15 	stw	r2,-16(fp)
    unsigned size_out) {

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
  800e3c:	e13ffe17 	ldw	r4,-8(fp)
  800e40:	08019500 	call	801950 <_ZdlPv>
  800e44:	e0fffc17 	ldw	r3,-16(fp)
  800e48:	e0ffff15 	stw	r3,-4(fp)
  800e4c:	00bfffc4 	movi	r2,-1
  800e50:	e0bfef15 	stw	r2,-68(fp)
  800e54:	e13fff17 	ldw	r4,-4(fp)
  800e58:	08033200 	call	803320 <_Unwind_SjLj_Resume>
	_out_buffer = new FIFO<char>(size_out);
  800e5c:	e0bfea17 	ldw	r2,-88(fp)
  800e60:	e0fffd17 	ldw	r3,-12(fp)
  800e64:	10c00215 	stw	r3,8(r2)

	// init irq
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
  800e68:	01000204 	movi	r4,8
  800e6c:	08035c80 	call	8035c8 <malloc>
  800e70:	1007883a 	mov	r3,r2
  800e74:	e0bfea17 	ldw	r2,-88(fp)
  800e78:	10c00615 	stw	r3,24(r2)
	irq_context->_base_adress = _base_adress;
  800e7c:	e0bfea17 	ldw	r2,-88(fp)
  800e80:	10c00617 	ldw	r3,24(r2)
  800e84:	e0bfea17 	ldw	r2,-88(fp)
  800e88:	10800317 	ldw	r2,12(r2)
  800e8c:	18800115 	stw	r2,4(r3)
	irq_context->_in_buffer = _in_buffer;
  800e90:	e0bfea17 	ldw	r2,-88(fp)
  800e94:	10c00617 	ldw	r3,24(r2)
  800e98:	e0bfea17 	ldw	r2,-88(fp)
  800e9c:	10800117 	ldw	r2,4(r2)
  800ea0:	18800015 	stw	r2,0(r3)
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
  800ea4:	e0bfea17 	ldw	r2,-88(fp)
  800ea8:	11400617 	ldw	r5,24(r2)
  800eac:	00bfffc4 	movi	r2,-1
  800eb0:	e0bfef15 	stw	r2,-68(fp)
  800eb4:	e13fec17 	ldw	r4,-80(fp)
  800eb8:	01802034 	movhi	r6,128
  800ebc:	31821c04 	addi	r6,r6,2160
  800ec0:	080d3740 	call	80d374 <alt_irq_register>
}
  800ec4:	00001006 	br	800f08 <_ZN4UARTC2Emmjj+0x1e4>
  800ec8:	e7001604 	addi	fp,fp,88
  800ecc:	e0bfef17 	ldw	r2,-68(fp)
  800ed0:	e0fff017 	ldw	r3,-64(fp)
  800ed4:	e0ffff15 	stw	r3,-4(fp)
  800ed8:	10800060 	cmpeqi	r2,r2,1
  800edc:	103fd51e 	bne	r2,zero,800e34 <_ZN4UARTC2Emmjj+0x110>
  800ee0:	e0bfff17 	ldw	r2,-4(fp)
  800ee4:	e0bffb15 	stw	r2,-20(fp)

	_base_adress = base_adress;
	_size_out = size_out;
	_size_in = size_in;
	_in_buffer = new FIFO<char>(size_in);
	_out_buffer = new FIFO<char>(size_out);
  800ee8:	e13ffd17 	ldw	r4,-12(fp)
  800eec:	08019500 	call	801950 <_ZdlPv>
  800ef0:	e0fffb17 	ldw	r3,-20(fp)
  800ef4:	e0ffff15 	stw	r3,-4(fp)
  800ef8:	00bfffc4 	movi	r2,-1
  800efc:	e0bfef15 	stw	r2,-68(fp)
  800f00:	e13fff17 	ldw	r4,-4(fp)
  800f04:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  800f08:	e13fee04 	addi	r4,fp,-72
  800f0c:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
	irq_context = (UART_interrupt_context*) malloc(
	    sizeof(UART_interrupt_context));
	irq_context->_base_adress = _base_adress;
	irq_context->_in_buffer = _in_buffer;
	alt_irq_register(irq, irq_context, _UART_receive_interrupt);
}
  800f10:	e037883a 	mov	sp,fp
  800f14:	dfc00917 	ldw	ra,36(sp)
  800f18:	df000817 	ldw	fp,32(sp)
  800f1c:	ddc00717 	ldw	r23,28(sp)
  800f20:	dd800617 	ldw	r22,24(sp)
  800f24:	dd400517 	ldw	r21,20(sp)
  800f28:	dd000417 	ldw	r20,16(sp)
  800f2c:	dcc00317 	ldw	r19,12(sp)
  800f30:	dc800217 	ldw	r18,8(sp)
  800f34:	dc400117 	ldw	r17,4(sp)
  800f38:	dc000017 	ldw	r16,0(sp)
  800f3c:	dec00a04 	addi	sp,sp,40
  800f40:	f800283a 	ret

00800f44 <_ZN4FIFOIcE7isEmptyEv>:

		virtual ~FIFO<T>() {
			delete[] _x;
		}

		bool isEmpty(void) {
  800f44:	defffe04 	addi	sp,sp,-8
  800f48:	df000115 	stw	fp,4(sp)
  800f4c:	df000104 	addi	fp,sp,4
  800f50:	e13fff15 	stw	r4,-4(fp)
			return (_r == _w);
  800f54:	e0bfff17 	ldw	r2,-4(fp)
  800f58:	10c00217 	ldw	r3,8(r2)
  800f5c:	e0bfff17 	ldw	r2,-4(fp)
  800f60:	10800317 	ldw	r2,12(r2)
  800f64:	1885003a 	cmpeq	r2,r3,r2
  800f68:	e037883a 	mov	sp,fp
  800f6c:	df000017 	ldw	fp,0(sp)
  800f70:	dec00104 	addi	sp,sp,4
  800f74:	f800283a 	ret

00800f78 <_ZN4FIFOIcE6isFullEv>:
		}

		bool isFull(void) {
  800f78:	defffd04 	addi	sp,sp,-12
  800f7c:	df000215 	stw	fp,8(sp)
  800f80:	df000204 	addi	fp,sp,8
  800f84:	e13ffe15 	stw	r4,-8(fp)
			return (((_r & _m) == (_w & _m)) && (_r != _w));
  800f88:	e0bffe17 	ldw	r2,-8(fp)
  800f8c:	10c00217 	ldw	r3,8(r2)
  800f90:	e0bffe17 	ldw	r2,-8(fp)
  800f94:	10800117 	ldw	r2,4(r2)
  800f98:	1888703a 	and	r4,r3,r2
  800f9c:	e0bffe17 	ldw	r2,-8(fp)
  800fa0:	10c00317 	ldw	r3,12(r2)
  800fa4:	e0bffe17 	ldw	r2,-8(fp)
  800fa8:	10800117 	ldw	r2,4(r2)
  800fac:	1884703a 	and	r2,r3,r2
  800fb0:	2080081e 	bne	r4,r2,800fd4 <_ZN4FIFOIcE6isFullEv+0x5c>
  800fb4:	e0bffe17 	ldw	r2,-8(fp)
  800fb8:	10c00217 	ldw	r3,8(r2)
  800fbc:	e0bffe17 	ldw	r2,-8(fp)
  800fc0:	10800317 	ldw	r2,12(r2)
  800fc4:	18800326 	beq	r3,r2,800fd4 <_ZN4FIFOIcE6isFullEv+0x5c>
  800fc8:	00800044 	movi	r2,1
  800fcc:	e0bfff05 	stb	r2,-4(fp)
  800fd0:	00000106 	br	800fd8 <_ZN4FIFOIcE6isFullEv+0x60>
  800fd4:	e03fff05 	stb	zero,-4(fp)
  800fd8:	e0bfff03 	ldbu	r2,-4(fp)
  800fdc:	e037883a 	mov	sp,fp
  800fe0:	df000017 	ldw	fp,0(sp)
  800fe4:	dec00104 	addi	sp,sp,4
  800fe8:	f800283a 	ret

00800fec <_ZN4FIFOIcE4lockEv>:
		FIFO<T>& flush(void) {
			_r = _w = 0;
			return *this;
		}

		virtual void lock(void) {
  800fec:	defffe04 	addi	sp,sp,-8
  800ff0:	df000115 	stw	fp,4(sp)
  800ff4:	df000104 	addi	fp,sp,4
  800ff8:	e13fff15 	stw	r4,-4(fp)
			;
  800ffc:	e037883a 	mov	sp,fp
  801000:	df000017 	ldw	fp,0(sp)
  801004:	dec00104 	addi	sp,sp,4
  801008:	f800283a 	ret

0080100c <_ZN4FIFOIcE6unlockEv>:
		}

		virtual void unlock(void) {
  80100c:	defffe04 	addi	sp,sp,-8
  801010:	df000115 	stw	fp,4(sp)
  801014:	df000104 	addi	fp,sp,4
  801018:	e13fff15 	stw	r4,-4(fp)
			;
  80101c:	e037883a 	mov	sp,fp
  801020:	df000017 	ldw	fp,0(sp)
  801024:	dec00104 	addi	sp,sp,4
  801028:	f800283a 	ret

0080102c <_ZN4FIFOIcE21_triggerFullConditionEv>:
		unsigned _m; /* counter mask (= depth - 1) */
		unsigned _r; /* read offset in units of T  */
		unsigned _w; /* write offset in units of T */
		T* _x;

		void _triggerFullCondition(void) {
  80102c:	defffd04 	addi	sp,sp,-12
  801030:	dfc00215 	stw	ra,8(sp)
  801034:	df000115 	stw	fp,4(sp)
  801038:	df000104 	addi	fp,sp,4
  80103c:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is full"; /* XXX FullFIFOException */
  801040:	01000104 	movi	r4,4
  801044:	0802cb80 	call	802cb8 <__cxa_allocate_exception>
  801048:	1009883a 	mov	r4,r2
  80104c:	2007883a 	mov	r3,r4
  801050:	00802074 	movhi	r2,129
  801054:	10827804 	addi	r2,r2,2528
  801058:	18800015 	stw	r2,0(r3)
  80105c:	01402074 	movhi	r5,129
  801060:	29435704 	addi	r5,r5,3420
  801064:	000d883a 	mov	r6,zero
  801068:	08015f80 	call	8015f8 <__cxa_throw>

0080106c <_ZN4FIFOIcE4pushEc>:

		bool isFull(void) {
			return (((_r & _m) == (_w & _m)) && (_r != _w));
		}

		FIFO<T>& push(T val) {
  80106c:	defffc04 	addi	sp,sp,-16
  801070:	dfc00315 	stw	ra,12(sp)
  801074:	df000215 	stw	fp,8(sp)
  801078:	df000204 	addi	fp,sp,8
  80107c:	e13ffe15 	stw	r4,-8(fp)
  801080:	e17fff05 	stb	r5,-4(fp)
			if (isFull())
  801084:	e13ffe17 	ldw	r4,-8(fp)
  801088:	0800f780 	call	800f78 <_ZN4FIFOIcE6isFullEv>
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	1005003a 	cmpeq	r2,r2,zero
  801094:	1000021e 	bne	r2,zero,8010a0 <_ZN4FIFOIcE4pushEc+0x34>
				_triggerFullCondition();
  801098:	e13ffe17 	ldw	r4,-8(fp)
  80109c:	080102c0 	call	80102c <_ZN4FIFOIcE21_triggerFullConditionEv>

			_x[_w & _m] = val;
  8010a0:	e0bffe17 	ldw	r2,-8(fp)
  8010a4:	11000417 	ldw	r4,16(r2)
  8010a8:	e0bffe17 	ldw	r2,-8(fp)
  8010ac:	10c00317 	ldw	r3,12(r2)
  8010b0:	e0bffe17 	ldw	r2,-8(fp)
  8010b4:	10800117 	ldw	r2,4(r2)
  8010b8:	1884703a 	and	r2,r3,r2
  8010bc:	2087883a 	add	r3,r4,r2
  8010c0:	e0bfff03 	ldbu	r2,-4(fp)
  8010c4:	18800005 	stb	r2,0(r3)
			_w++;
  8010c8:	e0bffe17 	ldw	r2,-8(fp)
  8010cc:	10800317 	ldw	r2,12(r2)
  8010d0:	10c00044 	addi	r3,r2,1
  8010d4:	e0bffe17 	ldw	r2,-8(fp)
  8010d8:	10c00315 	stw	r3,12(r2)

			return *this;
  8010dc:	e0bffe17 	ldw	r2,-8(fp)
  8010e0:	e037883a 	mov	sp,fp
  8010e4:	dfc00117 	ldw	ra,4(sp)
  8010e8:	df000017 	ldw	fp,0(sp)
  8010ec:	dec00204 	addi	sp,sp,8
  8010f0:	f800283a 	ret

008010f4 <_ZN4FIFOIcE22_triggerEmptyConditionEv>:

		void _triggerFullCondition(void) {
			throw "FIFO is full"; /* XXX FullFIFOException */
		}

		void _triggerEmptyCondition(void) {
  8010f4:	defffd04 	addi	sp,sp,-12
  8010f8:	dfc00215 	stw	ra,8(sp)
  8010fc:	df000115 	stw	fp,4(sp)
  801100:	df000104 	addi	fp,sp,4
  801104:	e13fff15 	stw	r4,-4(fp)
			throw "FIFO is empty"; /*XXX EmptyFIFOException */
  801108:	01000104 	movi	r4,4
  80110c:	0802cb80 	call	802cb8 <__cxa_allocate_exception>
  801110:	1009883a 	mov	r4,r2
  801114:	2007883a 	mov	r3,r4
  801118:	00802074 	movhi	r2,129
  80111c:	10827c04 	addi	r2,r2,2544
  801120:	18800015 	stw	r2,0(r3)
  801124:	01402074 	movhi	r5,129
  801128:	29435704 	addi	r5,r5,3420
  80112c:	000d883a 	mov	r6,zero
  801130:	08015f80 	call	8015f8 <__cxa_throw>

00801134 <_ZN4FIFOIcE4pullEv>:
			_w++;

			return *this;
		}

		T pull(void) {
  801134:	defffc04 	addi	sp,sp,-16
  801138:	dfc00315 	stw	ra,12(sp)
  80113c:	df000215 	stw	fp,8(sp)
  801140:	df000204 	addi	fp,sp,8
  801144:	e13fff15 	stw	r4,-4(fp)
			if (isEmpty())
  801148:	e13fff17 	ldw	r4,-4(fp)
  80114c:	0800f440 	call	800f44 <_ZN4FIFOIcE7isEmptyEv>
  801150:	10803fcc 	andi	r2,r2,255
  801154:	1005003a 	cmpeq	r2,r2,zero
  801158:	1000021e 	bne	r2,zero,801164 <_ZN4FIFOIcE4pullEv+0x30>
				_triggerEmptyCondition();
  80115c:	e13fff17 	ldw	r4,-4(fp)
  801160:	08010f40 	call	8010f4 <_ZN4FIFOIcE22_triggerEmptyConditionEv>

			T rv = _x[_r & _m];
  801164:	e0bfff17 	ldw	r2,-4(fp)
  801168:	11000417 	ldw	r4,16(r2)
  80116c:	e0bfff17 	ldw	r2,-4(fp)
  801170:	10c00217 	ldw	r3,8(r2)
  801174:	e0bfff17 	ldw	r2,-4(fp)
  801178:	10800117 	ldw	r2,4(r2)
  80117c:	1884703a 	and	r2,r3,r2
  801180:	2085883a 	add	r2,r4,r2
  801184:	10800003 	ldbu	r2,0(r2)
  801188:	e0bffe05 	stb	r2,-8(fp)
			_r++;
  80118c:	e0bfff17 	ldw	r2,-4(fp)
  801190:	10800217 	ldw	r2,8(r2)
  801194:	10c00044 	addi	r3,r2,1
  801198:	e0bfff17 	ldw	r2,-4(fp)
  80119c:	10c00215 	stw	r3,8(r2)

			return rv;
  8011a0:	e0bffe07 	ldb	r2,-8(fp)
  8011a4:	e037883a 	mov	sp,fp
  8011a8:	dfc00117 	ldw	ra,4(sp)
  8011ac:	df000017 	ldw	fp,0(sp)
  8011b0:	dec00204 	addi	sp,sp,8
  8011b4:	f800283a 	ret

008011b8 <_ZN4FIFOIcEC1Ej>:
template<class T>
class FIFO {

	public:

		FIFO<T>(unsigned depth = 1024) :
  8011b8:	defffc04 	addi	sp,sp,-16
  8011bc:	dfc00315 	stw	ra,12(sp)
  8011c0:	df000215 	stw	fp,8(sp)
  8011c4:	df000204 	addi	fp,sp,8
  8011c8:	e13ffe15 	stw	r4,-8(fp)
  8011cc:	e17fff15 	stw	r5,-4(fp)
				_m(depth - 1) {
  8011d0:	00c02074 	movhi	r3,129
  8011d4:	18c28d04 	addi	r3,r3,2612
  8011d8:	e0bffe17 	ldw	r2,-8(fp)
  8011dc:	10c00015 	stw	r3,0(r2)
  8011e0:	e0bfff17 	ldw	r2,-4(fp)
  8011e4:	10ffffc4 	addi	r3,r2,-1
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10c00115 	stw	r3,4(r2)
			if ((depth < 2) || (depth & _m))
  8011f0:	e0bfff17 	ldw	r2,-4(fp)
  8011f4:	108000b0 	cmpltui	r2,r2,2
  8011f8:	1000061e 	bne	r2,zero,801214 <_ZN4FIFOIcEC1Ej+0x5c>
  8011fc:	e0bffe17 	ldw	r2,-8(fp)
  801200:	10c00117 	ldw	r3,4(r2)
  801204:	e0bfff17 	ldw	r2,-4(fp)
  801208:	1884703a 	and	r2,r3,r2
  80120c:	1005003a 	cmpeq	r2,r2,zero
  801210:	10000b1e 	bne	r2,zero,801240 <_ZN4FIFOIcEC1Ej+0x88>
				throw("depth must be a power of 2"); /* XXX InvalidFIFODepthException */
  801214:	01000104 	movi	r4,4
  801218:	0802cb80 	call	802cb8 <__cxa_allocate_exception>
  80121c:	1009883a 	mov	r4,r2
  801220:	2007883a 	mov	r3,r4
  801224:	00802074 	movhi	r2,129
  801228:	10828004 	addi	r2,r2,2560
  80122c:	18800015 	stw	r2,0(r3)
  801230:	01402074 	movhi	r5,129
  801234:	29435704 	addi	r5,r5,3420
  801238:	000d883a 	mov	r6,zero
  80123c:	08015f80 	call	8015f8 <__cxa_throw>

			_x = new T[depth];
  801240:	e13fff17 	ldw	r4,-4(fp)
  801244:	08016cc0 	call	8016cc <_Znam>
  801248:	1007883a 	mov	r3,r2
  80124c:	e0bffe17 	ldw	r2,-8(fp)
  801250:	10c00415 	stw	r3,16(r2)
			_r = 0;
  801254:	e0bffe17 	ldw	r2,-8(fp)
  801258:	10000215 	stw	zero,8(r2)
			_w = 0;
  80125c:	e0bffe17 	ldw	r2,-8(fp)
  801260:	10000315 	stw	zero,12(r2)
  801264:	e037883a 	mov	sp,fp
  801268:	dfc00117 	ldw	ra,4(sp)
  80126c:	df000017 	ldw	fp,0(sp)
  801270:	dec00204 	addi	sp,sp,8
  801274:	f800283a 	ret

00801278 <_ZN4FIFOIcED0Ev>:
		}

		virtual ~FIFO<T>() {
  801278:	defffd04 	addi	sp,sp,-12
  80127c:	dfc00215 	stw	ra,8(sp)
  801280:	df000115 	stw	fp,4(sp)
  801284:	df000104 	addi	fp,sp,4
  801288:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  80128c:	00c02074 	movhi	r3,129
  801290:	18c28d04 	addi	r3,r3,2612
  801294:	e0bfff17 	ldw	r2,-4(fp)
  801298:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  80129c:	e0bfff17 	ldw	r2,-4(fp)
  8012a0:	10800417 	ldw	r2,16(r2)
  8012a4:	1005003a 	cmpeq	r2,r2,zero
  8012a8:	1000031e 	bne	r2,zero,8012b8 <_ZN4FIFOIcED0Ev+0x40>
  8012ac:	e0bfff17 	ldw	r2,-4(fp)
  8012b0:	11000417 	ldw	r4,16(r2)
  8012b4:	080195c0 	call	80195c <_ZdaPv>
  8012b8:	00800044 	movi	r2,1
  8012bc:	10803fcc 	andi	r2,r2,255
  8012c0:	1005003a 	cmpeq	r2,r2,zero
  8012c4:	1000021e 	bne	r2,zero,8012d0 <_ZN4FIFOIcED0Ev+0x58>
  8012c8:	e13fff17 	ldw	r4,-4(fp)
  8012cc:	08019500 	call	801950 <_ZdlPv>
  8012d0:	e037883a 	mov	sp,fp
  8012d4:	dfc00117 	ldw	ra,4(sp)
  8012d8:	df000017 	ldw	fp,0(sp)
  8012dc:	dec00204 	addi	sp,sp,8
  8012e0:	f800283a 	ret

008012e4 <_ZN4FIFOIcED1Ev>:
			_x = new T[depth];
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
  8012e4:	defffd04 	addi	sp,sp,-12
  8012e8:	dfc00215 	stw	ra,8(sp)
  8012ec:	df000115 	stw	fp,4(sp)
  8012f0:	df000104 	addi	fp,sp,4
  8012f4:	e13fff15 	stw	r4,-4(fp)
			delete[] _x;
		}
  8012f8:	00c02074 	movhi	r3,129
  8012fc:	18c28d04 	addi	r3,r3,2612
  801300:	e0bfff17 	ldw	r2,-4(fp)
  801304:	10c00015 	stw	r3,0(r2)
			_r = 0;
			_w = 0;
		}

		virtual ~FIFO<T>() {
			delete[] _x;
  801308:	e0bfff17 	ldw	r2,-4(fp)
  80130c:	10800417 	ldw	r2,16(r2)
  801310:	1005003a 	cmpeq	r2,r2,zero
  801314:	1000031e 	bne	r2,zero,801324 <_ZN4FIFOIcED1Ev+0x40>
  801318:	e0bfff17 	ldw	r2,-4(fp)
  80131c:	11000417 	ldw	r4,16(r2)
  801320:	080195c0 	call	80195c <_ZdaPv>
  801324:	0005883a 	mov	r2,zero
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	1005003a 	cmpeq	r2,r2,zero
  801330:	1000021e 	bne	r2,zero,80133c <_ZN4FIFOIcED1Ev+0x58>
  801334:	e13fff17 	ldw	r4,-4(fp)
  801338:	08019500 	call	801950 <_ZdlPv>
  80133c:	e037883a 	mov	sp,fp
  801340:	dfc00117 	ldw	ra,4(sp)
  801344:	df000017 	ldw	fp,0(sp)
  801348:	dec00204 	addi	sp,sp,8
  80134c:	f800283a 	ret

00801350 <main>:
#include "system.h"
#include "controller/UART.h"
#include "controller/SPI.h"

int main() {
  801350:	deffdf04 	addi	sp,sp,-132
  801354:	dfc02015 	stw	ra,128(sp)
  801358:	df001f15 	stw	fp,124(sp)
  80135c:	ddc01e15 	stw	r23,120(sp)
  801360:	dd801d15 	stw	r22,116(sp)
  801364:	dd401c15 	stw	r21,112(sp)
  801368:	dd001b15 	stw	r20,108(sp)
  80136c:	dcc01a15 	stw	r19,104(sp)
  801370:	dc801915 	stw	r18,100(sp)
  801374:	dc401815 	stw	r17,96(sp)
  801378:	dc001715 	stw	r16,92(sp)
  80137c:	df001704 	addi	fp,sp,92
  801380:	00802034 	movhi	r2,128
  801384:	10881b04 	addi	r2,r2,8300
  801388:	e0bff315 	stw	r2,-52(fp)
  80138c:	00802074 	movhi	r2,129
  801390:	10825284 	addi	r2,r2,2378
  801394:	e0bff415 	stw	r2,-48(fp)
  801398:	e0bff504 	addi	r2,fp,-44
  80139c:	e0ffea04 	addi	r3,fp,-88
  8013a0:	10c00015 	stw	r3,0(r2)
  8013a4:	00c02034 	movhi	r3,128
  8013a8:	18c51904 	addi	r3,r3,5220
  8013ac:	10c00115 	stw	r3,4(r2)
  8013b0:	16c00215 	stw	sp,8(r2)
  8013b4:	e13fed04 	addi	r4,fp,-76
  8013b8:	08030540 	call	803054 <_Unwind_SjLj_Register>

	UART* uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  8013bc:	00bfffc4 	movi	r2,-1
  8013c0:	e0bfee15 	stw	r2,-72(fp)
  8013c4:	01000704 	movi	r4,28
  8013c8:	08029ec0 	call	8029ec <_Znwm>
  8013cc:	e0bffe15 	stw	r2,-8(fp)
  8013d0:	00801004 	movi	r2,64
  8013d4:	d8800015 	stw	r2,0(sp)
  8013d8:	00800084 	movi	r2,2
  8013dc:	e0bfee15 	stw	r2,-72(fp)
  8013e0:	e13ffe17 	ldw	r4,-8(fp)
  8013e4:	01404074 	movhi	r5,257
  8013e8:	29641004 	addi	r5,r5,-28608
  8013ec:	01800084 	movi	r6,2
  8013f0:	01c01004 	movi	r7,64
  8013f4:	0800b040 	call	800b04 <_ZN4UARTC1Emmjj>
  8013f8:	e0bffe17 	ldw	r2,-8(fp)
  8013fc:	e0bfec15 	stw	r2,-80(fp)

	SPI* spi= new SPI(SPI_BASE);
  801400:	00bfffc4 	movi	r2,-1
  801404:	e0bfee15 	stw	r2,-72(fp)
  801408:	01000204 	movi	r4,8
  80140c:	08029ec0 	call	8029ec <_Znwm>
  801410:	e0bffd15 	stw	r2,-12(fp)
  801414:	00800044 	movi	r2,1
  801418:	e0bfee15 	stw	r2,-72(fp)
  80141c:	e13ffd17 	ldw	r4,-12(fp)
  801420:	01404074 	movhi	r5,257
  801424:	29641804 	addi	r5,r5,-28576
  801428:	08002200 	call	800220 <_ZN3SPIC1Em>
  80142c:	00000a06 	br	801458 <main+0x108>
  801430:	e0ffff17 	ldw	r3,-4(fp)
  801434:	e0fffb15 	stw	r3,-20(fp)
#include "controller/UART.h"
#include "controller/SPI.h"

int main() {

	UART* uart = new UART(UART_BASE, UART_IRQ, 64, 64);
  801438:	e13ffe17 	ldw	r4,-8(fp)
  80143c:	08019500 	call	801950 <_ZdlPv>
  801440:	e0bffb17 	ldw	r2,-20(fp)
  801444:	e0bfff15 	stw	r2,-4(fp)
  801448:	00bfffc4 	movi	r2,-1
  80144c:	e0bfee15 	stw	r2,-72(fp)
  801450:	e13fff17 	ldw	r4,-4(fp)
  801454:	08033200 	call	803320 <_Unwind_SjLj_Resume>

	SPI* spi= new SPI(SPI_BASE);
  801458:	e0fffd17 	ldw	r3,-12(fp)
  80145c:	e0ffeb15 	stw	r3,-84(fp)
  801460:	00001006 	br	8014a4 <main+0x154>
  801464:	e7001604 	addi	fp,fp,88
  801468:	e0bfee17 	ldw	r2,-72(fp)
  80146c:	e0ffef17 	ldw	r3,-68(fp)
  801470:	e0ffff15 	stw	r3,-4(fp)
  801474:	10800060 	cmpeqi	r2,r2,1
  801478:	103fed1e 	bne	r2,zero,801430 <main+0xe0>
  80147c:	e0bfff17 	ldw	r2,-4(fp)
  801480:	e0bffa15 	stw	r2,-24(fp)
  801484:	e13ffd17 	ldw	r4,-12(fp)
  801488:	08019500 	call	801950 <_ZdlPv>
  80148c:	e0fffa17 	ldw	r3,-24(fp)
  801490:	e0ffff15 	stw	r3,-4(fp)
  801494:	00bfffc4 	movi	r2,-1
  801498:	e0bfee15 	stw	r2,-72(fp)
  80149c:	e13fff17 	ldw	r4,-4(fp)
  8014a0:	08033200 	call	803320 <_Unwind_SjLj_Resume>



	while (1) {
		if (!uart->inBuffer_isEmpty()) {
  8014a4:	00bfffc4 	movi	r2,-1
  8014a8:	e0bfee15 	stw	r2,-72(fp)
  8014ac:	e13fec17 	ldw	r4,-80(fp)
  8014b0:	08004780 	call	800478 <_ZN4UART16inBuffer_isEmptyEv>
  8014b4:	1080005c 	xori	r2,r2,1
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1005003a 	cmpeq	r2,r2,zero
  8014c0:	10002b1e 	bne	r2,zero,801570 <main+0x220>
			char c = uart->buffer_getchar();
  8014c4:	e13fec17 	ldw	r4,-80(fp)
  8014c8:	08005700 	call	800570 <_ZN4UART14buffer_getcharEv>
  8014cc:	e0bfea85 	stb	r2,-86(fp)
			unsigned char value;


			value = spi->readCMVRegister(72);
  8014d0:	e13feb17 	ldw	r4,-84(fp)
  8014d4:	01401204 	movi	r5,72
  8014d8:	08002600 	call	800260 <_ZN3SPI15readCMVRegisterEh>
  8014dc:	e0bfea45 	stb	r2,-87(fp)


			uart->buffer_printf("Avant reg(72)=%d ,", value);
  8014e0:	e1bfea43 	ldbu	r6,-87(fp)
  8014e4:	e13fec17 	ldw	r4,-80(fp)
  8014e8:	01402074 	movhi	r5,129
  8014ec:	29429404 	addi	r5,r5,2640
  8014f0:	08005b00 	call	8005b0 <_ZN4UART13buffer_printfEPKcz>


			bool suc = spi->writeCMVRegister(72, 3);
  8014f4:	e13feb17 	ldw	r4,-84(fp)
  8014f8:	01401204 	movi	r5,72
  8014fc:	018000c4 	movi	r6,3
  801500:	08002cc0 	call	8002cc <_ZN3SPI16writeCMVRegisterEhh>
  801504:	e0bfea05 	stb	r2,-88(fp)

			uart->buffer_printf("%s", suc==true?"ok":"fail");
  801508:	e0bfea03 	ldbu	r2,-88(fp)
  80150c:	1005003a 	cmpeq	r2,r2,zero
  801510:	1000041e 	bne	r2,zero,801524 <main+0x1d4>
  801514:	00802074 	movhi	r2,129
  801518:	10829904 	addi	r2,r2,2660
  80151c:	e0bffc15 	stw	r2,-16(fp)
  801520:	00000306 	br	801530 <main+0x1e0>
  801524:	00c02074 	movhi	r3,129
  801528:	18c29a04 	addi	r3,r3,2664
  80152c:	e0fffc15 	stw	r3,-16(fp)
  801530:	00bfffc4 	movi	r2,-1
  801534:	e0bfee15 	stw	r2,-72(fp)
  801538:	e13fec17 	ldw	r4,-80(fp)
  80153c:	01402074 	movhi	r5,129
  801540:	29429c04 	addi	r5,r5,2672
  801544:	e1bffc17 	ldw	r6,-16(fp)
  801548:	08005b00 	call	8005b0 <_ZN4UART13buffer_printfEPKcz>

			value = spi->readCMVRegister(72);
  80154c:	e13feb17 	ldw	r4,-84(fp)
  801550:	01401204 	movi	r5,72
  801554:	08002600 	call	800260 <_ZN3SPI15readCMVRegisterEh>
  801558:	e0bfea45 	stb	r2,-87(fp)

			uart->buffer_printf("Apres reg(72)=%d \r\n", value);
  80155c:	e1bfea43 	ldbu	r6,-87(fp)
  801560:	e13fec17 	ldw	r4,-80(fp)
  801564:	01402074 	movhi	r5,129
  801568:	29429d04 	addi	r5,r5,2676
  80156c:	08005b00 	call	8005b0 <_ZN4UART13buffer_printfEPKcz>



		}
		uart->send();
  801570:	00bfffc4 	movi	r2,-1
  801574:	e0bfee15 	stw	r2,-72(fp)
  801578:	e13fec17 	ldw	r4,-80(fp)
  80157c:	08007700 	call	800770 <_ZN4UART4sendEv>

	SPI* spi= new SPI(SPI_BASE);



	while (1) {
  801580:	003fc806 	br	8014a4 <main+0x154>

00801584 <__cxa_rethrow>:
  801584:	defffe04 	addi	sp,sp,-8
  801588:	dc400015 	stw	r17,0(sp)
  80158c:	dfc00115 	stw	ra,4(sp)
  801590:	08028d80 	call	8028d8 <__cxa_get_globals>
  801594:	100b883a 	mov	r5,r2
  801598:	10800117 	ldw	r2,4(r2)
  80159c:	2c400017 	ldw	r17,0(r5)
  8015a0:	10800044 	addi	r2,r2,1
  8015a4:	28800115 	stw	r2,4(r5)
  8015a8:	88000b26 	beq	r17,zero,8015d8 <__cxa_rethrow+0x54>
  8015ac:	88c00b17 	ldw	r3,44(r17)
  8015b0:	0090caf4 	movhi	r2,17195
  8015b4:	108ac004 	addi	r2,r2,11008
  8015b8:	89000c17 	ldw	r4,48(r17)
  8015bc:	18800726 	beq	r3,r2,8015dc <__cxa_rethrow+0x58>
  8015c0:	28000015 	stw	zero,0(r5)
  8015c4:	8c400b04 	addi	r17,r17,44
  8015c8:	8809883a 	mov	r4,r17
  8015cc:	08035440 	call	803544 <_Unwind_SjLj_Resume_or_Rethrow>
  8015d0:	8809883a 	mov	r4,r17
  8015d4:	08018380 	call	801838 <__cxa_begin_catch>
  8015d8:	08029ac0 	call	8029ac <_ZSt9terminatev>
  8015dc:	0091d3b4 	movhi	r2,18254
  8015e0:	109550c4 	addi	r2,r2,21827
  8015e4:	20bff61e 	bne	r4,r2,8015c0 <__cxa_rethrow+0x3c>
  8015e8:	88800517 	ldw	r2,20(r17)
  8015ec:	0085c83a 	sub	r2,zero,r2
  8015f0:	88800515 	stw	r2,20(r17)
  8015f4:	003ff306 	br	8015c4 <__cxa_rethrow+0x40>

008015f8 <__cxa_throw>:
  8015f8:	00802074 	movhi	r2,129
  8015fc:	108b5a04 	addi	r2,r2,11624
  801600:	00c02074 	movhi	r3,129
  801604:	18cb5904 	addi	r3,r3,11620
  801608:	12000017 	ldw	r8,0(r2)
  80160c:	19c00017 	ldw	r7,0(r3)
  801610:	defffe04 	addi	sp,sp,-8
  801614:	213ff004 	addi	r4,r4,-64
  801618:	dfc00115 	stw	ra,4(sp)
  80161c:	dc400015 	stw	r17,0(sp)
  801620:	0090caf4 	movhi	r2,17195
  801624:	108ac004 	addi	r2,r2,11008
  801628:	20800b15 	stw	r2,44(r4)
  80162c:	00d1d3b4 	movhi	r3,18254
  801630:	18d550c4 	addi	r3,r3,21827
  801634:	24400b04 	addi	r17,r4,44
  801638:	00802034 	movhi	r2,128
  80163c:	10859b04 	addi	r2,r2,5740
  801640:	21400015 	stw	r5,0(r4)
  801644:	21800115 	stw	r6,4(r4)
  801648:	22000215 	stw	r8,8(r4)
  80164c:	21c00315 	stw	r7,12(r4)
  801650:	20c00c15 	stw	r3,48(r4)
  801654:	20800d15 	stw	r2,52(r4)
  801658:	8809883a 	mov	r4,r17
  80165c:	080337c0 	call	80337c <_Unwind_SjLj_RaiseException>
  801660:	8809883a 	mov	r4,r17
  801664:	08018380 	call	801838 <__cxa_begin_catch>
  801668:	08029ac0 	call	8029ac <_ZSt9terminatev>

0080166c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
  80166c:	defffe04 	addi	sp,sp,-8
  801670:	00800044 	movi	r2,1
  801674:	dfc00115 	stw	ra,4(sp)
  801678:	dc000015 	stw	r16,0(sp)
  80167c:	28fff504 	addi	r3,r5,-44
  801680:	11001036 	bltu	r2,r4,8016c4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
  801684:	18800117 	ldw	r2,4(r3)
  801688:	10000826 	beq	r2,zero,8016ac <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
  80168c:	2c000504 	addi	r16,r5,20
  801690:	8009883a 	mov	r4,r16
  801694:	103ee83a 	callr	r2
  801698:	8009883a 	mov	r4,r16
  80169c:	dfc00117 	ldw	ra,4(sp)
  8016a0:	dc000017 	ldw	r16,0(sp)
  8016a4:	dec00204 	addi	sp,sp,8
  8016a8:	0802c781 	jmpi	802c78 <__cxa_free_exception>
  8016ac:	2c000504 	addi	r16,r5,20
  8016b0:	8009883a 	mov	r4,r16
  8016b4:	dfc00117 	ldw	ra,4(sp)
  8016b8:	dc000017 	ldw	r16,0(sp)
  8016bc:	dec00204 	addi	sp,sp,8
  8016c0:	0802c781 	jmpi	802c78 <__cxa_free_exception>
  8016c4:	19000317 	ldw	r4,12(r3)
  8016c8:	08029080 	call	802908 <_ZN10__cxxabiv111__terminateEPFvvE>

008016cc <_Znam>:
  8016cc:	deffee04 	addi	sp,sp,-72
  8016d0:	00802034 	movhi	r2,128
  8016d4:	10881b04 	addi	r2,r2,8300
  8016d8:	d8800615 	stw	r2,24(sp)
  8016dc:	00c02074 	movhi	r3,129
  8016e0:	18c25504 	addi	r3,r3,2388
  8016e4:	00802034 	movhi	r2,128
  8016e8:	1085d204 	addi	r2,r2,5960
  8016ec:	d9000e15 	stw	r4,56(sp)
  8016f0:	d809883a 	mov	r4,sp
  8016f4:	d8800915 	stw	r2,36(sp)
  8016f8:	dfc01115 	stw	ra,68(sp)
  8016fc:	df001015 	stw	fp,64(sp)
  801700:	ddc00f15 	stw	r23,60(sp)
  801704:	d8c00715 	stw	r3,28(sp)
  801708:	dec00815 	stw	sp,32(sp)
  80170c:	dec00a15 	stw	sp,40(sp)
  801710:	08030540 	call	803054 <_Unwind_SjLj_Register>
  801714:	00800044 	movi	r2,1
  801718:	d8800115 	stw	r2,4(sp)
  80171c:	d9000e17 	ldw	r4,56(sp)
  801720:	08029ec0 	call	8029ec <_Znwm>
  801724:	d809883a 	mov	r4,sp
  801728:	d8800d15 	stw	r2,52(sp)
  80172c:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  801730:	d8800d17 	ldw	r2,52(sp)
  801734:	dfc01117 	ldw	ra,68(sp)
  801738:	df001017 	ldw	fp,64(sp)
  80173c:	ddc00f17 	ldw	r23,60(sp)
  801740:	dec01204 	addi	sp,sp,72
  801744:	f800283a 	ret
  801748:	d8800317 	ldw	r2,12(sp)
  80174c:	00ffffc4 	movi	r3,-1
  801750:	d9000217 	ldw	r4,8(sp)
  801754:	10c00226 	beq	r2,r3,801760 <_Znam+0x94>
  801758:	d8c00115 	stw	r3,4(sp)
  80175c:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  801760:	00bfffc4 	movi	r2,-1
  801764:	d8800115 	stw	r2,4(sp)
  801768:	0801eec0 	call	801eec <__cxa_call_unexpected>

0080176c <__cxa_get_exception_ptr>:
  80176c:	20bfff17 	ldw	r2,-4(r4)
  801770:	f800283a 	ret

00801774 <_ZSt18uncaught_exceptionv>:
  801774:	deffff04 	addi	sp,sp,-4
  801778:	dfc00015 	stw	ra,0(sp)
  80177c:	08028d80 	call	8028d8 <__cxa_get_globals>
  801780:	10800117 	ldw	r2,4(r2)
  801784:	1004c03a 	cmpne	r2,r2,zero
  801788:	dfc00017 	ldw	ra,0(sp)
  80178c:	dec00104 	addi	sp,sp,4
  801790:	f800283a 	ret

00801794 <__cxa_end_catch>:
  801794:	deffff04 	addi	sp,sp,-4
  801798:	dfc00015 	stw	ra,0(sp)
  80179c:	08028d00 	call	8028d0 <__cxa_get_globals_fast>
  8017a0:	11000017 	ldw	r4,0(r2)
  8017a4:	1007883a 	mov	r3,r2
  8017a8:	20001326 	beq	r4,zero,8017f8 <__cxa_end_catch+0x64>
  8017ac:	21400b17 	ldw	r5,44(r4)
  8017b0:	0090caf4 	movhi	r2,17195
  8017b4:	108ac004 	addi	r2,r2,11008
  8017b8:	21800c17 	ldw	r6,48(r4)
  8017bc:	28800526 	beq	r5,r2,8017d4 <__cxa_end_catch+0x40>
  8017c0:	21000b04 	addi	r4,r4,44
  8017c4:	18000015 	stw	zero,0(r3)
  8017c8:	dfc00017 	ldw	ra,0(sp)
  8017cc:	dec00104 	addi	sp,sp,4
  8017d0:	08032141 	jmpi	803214 <_Unwind_DeleteException>
  8017d4:	0091d3b4 	movhi	r2,18254
  8017d8:	109550c4 	addi	r2,r2,21827
  8017dc:	30bff81e 	bne	r6,r2,8017c0 <__cxa_end_catch+0x2c>
  8017e0:	20800517 	ldw	r2,20(r4)
  8017e4:	10000e16 	blt	r2,zero,801820 <__cxa_end_catch+0x8c>
  8017e8:	117fffc4 	addi	r5,r2,-1
  8017ec:	28000526 	beq	r5,zero,801804 <__cxa_end_catch+0x70>
  8017f0:	28000a16 	blt	r5,zero,80181c <__cxa_end_catch+0x88>
  8017f4:	21400515 	stw	r5,20(r4)
  8017f8:	dfc00017 	ldw	ra,0(sp)
  8017fc:	dec00104 	addi	sp,sp,4
  801800:	f800283a 	ret
  801804:	20800417 	ldw	r2,16(r4)
  801808:	21000b04 	addi	r4,r4,44
  80180c:	18800015 	stw	r2,0(r3)
  801810:	dfc00017 	ldw	ra,0(sp)
  801814:	dec00104 	addi	sp,sp,4
  801818:	08032141 	jmpi	803214 <_Unwind_DeleteException>
  80181c:	08029ac0 	call	8029ac <_ZSt9terminatev>
  801820:	11400044 	addi	r5,r2,1
  801824:	283ff31e 	bne	r5,zero,8017f4 <__cxa_end_catch+0x60>
  801828:	20800417 	ldw	r2,16(r4)
  80182c:	21400515 	stw	r5,20(r4)
  801830:	18800015 	stw	r2,0(r3)
  801834:	003ff006 	br	8017f8 <__cxa_end_catch+0x64>

00801838 <__cxa_begin_catch>:
  801838:	deffee04 	addi	sp,sp,-72
  80183c:	00802034 	movhi	r2,128
  801840:	10881b04 	addi	r2,r2,8300
  801844:	00c02074 	movhi	r3,129
  801848:	18c25a04 	addi	r3,r3,2408
  80184c:	d8800615 	stw	r2,24(sp)
  801850:	d9000e15 	stw	r4,56(sp)
  801854:	00802034 	movhi	r2,128
  801858:	10864b04 	addi	r2,r2,6444
  80185c:	d809883a 	mov	r4,sp
  801860:	d8c00715 	stw	r3,28(sp)
  801864:	dfc01115 	stw	ra,68(sp)
  801868:	d8800915 	stw	r2,36(sp)
  80186c:	df001015 	stw	fp,64(sp)
  801870:	ddc00f15 	stw	r23,60(sp)
  801874:	dec00815 	stw	sp,32(sp)
  801878:	dec00a15 	stw	sp,40(sp)
  80187c:	08030540 	call	803054 <_Unwind_SjLj_Register>
  801880:	08028d80 	call	8028d8 <__cxa_get_globals>
  801884:	100d883a 	mov	r6,r2
  801888:	d8800e17 	ldw	r2,56(sp)
  80188c:	31c00017 	ldw	r7,0(r6)
  801890:	117ff504 	addi	r5,r2,-44
  801894:	28c00b17 	ldw	r3,44(r5)
  801898:	0090caf4 	movhi	r2,17195
  80189c:	108ac004 	addi	r2,r2,11008
  8018a0:	29000c17 	ldw	r4,48(r5)
  8018a4:	18800b26 	beq	r3,r2,8018d4 <__cxa_begin_catch+0x9c>
  8018a8:	38001d1e 	bne	r7,zero,801920 <__cxa_begin_catch+0xe8>
  8018ac:	d8000d15 	stw	zero,52(sp)
  8018b0:	31400015 	stw	r5,0(r6)
  8018b4:	d809883a 	mov	r4,sp
  8018b8:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  8018bc:	d8800d17 	ldw	r2,52(sp)
  8018c0:	dfc01117 	ldw	ra,68(sp)
  8018c4:	df001017 	ldw	fp,64(sp)
  8018c8:	ddc00f17 	ldw	r23,60(sp)
  8018cc:	dec01204 	addi	sp,sp,72
  8018d0:	f800283a 	ret
  8018d4:	0091d3b4 	movhi	r2,18254
  8018d8:	109550c4 	addi	r2,r2,21827
  8018dc:	20bff21e 	bne	r4,r2,8018a8 <__cxa_begin_catch+0x70>
  8018e0:	28c00517 	ldw	r3,20(r5)
  8018e4:	18000b16 	blt	r3,zero,801914 <__cxa_begin_catch+0xdc>
  8018e8:	18800044 	addi	r2,r3,1
  8018ec:	28800515 	stw	r2,20(r5)
  8018f0:	30800117 	ldw	r2,4(r6)
  8018f4:	10bfffc4 	addi	r2,r2,-1
  8018f8:	30800115 	stw	r2,4(r6)
  8018fc:	39400226 	beq	r7,r5,801908 <__cxa_begin_catch+0xd0>
  801900:	29c00415 	stw	r7,16(r5)
  801904:	31400015 	stw	r5,0(r6)
  801908:	29400a17 	ldw	r5,40(r5)
  80190c:	d9400d15 	stw	r5,52(sp)
  801910:	003fe806 	br	8018b4 <__cxa_begin_catch+0x7c>
  801914:	00800044 	movi	r2,1
  801918:	10c5c83a 	sub	r2,r2,r3
  80191c:	003ff306 	br	8018ec <__cxa_begin_catch+0xb4>
  801920:	00800044 	movi	r2,1
  801924:	d8800115 	stw	r2,4(sp)
  801928:	08029ac0 	call	8029ac <_ZSt9terminatev>
  80192c:	d8800317 	ldw	r2,12(sp)
  801930:	00ffffc4 	movi	r3,-1
  801934:	d9000217 	ldw	r4,8(sp)
  801938:	10c00226 	beq	r2,r3,801944 <__cxa_begin_catch+0x10c>
  80193c:	d8c00115 	stw	r3,4(sp)
  801940:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  801944:	00bfffc4 	movi	r2,-1
  801948:	d8800115 	stw	r2,4(sp)
  80194c:	0801eec0 	call	801eec <__cxa_call_unexpected>

00801950 <_ZdlPv>:
  801950:	20000126 	beq	r4,zero,801958 <_ZdlPv+0x8>
  801954:	08035b41 	jmpi	8035b4 <free>
  801958:	f800283a 	ret

0080195c <_ZdaPv>:
  80195c:	08019501 	jmpi	801950 <_ZdlPv>

00801960 <_Z12read_uleb128PKhPj>:
  801960:	000d883a 	mov	r6,zero
  801964:	000f883a 	mov	r7,zero
  801968:	20c00007 	ldb	r3,0(r4)
  80196c:	21000044 	addi	r4,r4,1
  801970:	18801fcc 	andi	r2,r3,127
  801974:	1184983a 	sll	r2,r2,r6
  801978:	318001c4 	addi	r6,r6,7
  80197c:	388eb03a 	or	r7,r7,r2
  801980:	183ff916 	blt	r3,zero,801968 <_Z12read_uleb128PKhPj+0x8>
  801984:	2005883a 	mov	r2,r4
  801988:	29c00015 	stw	r7,0(r5)
  80198c:	f800283a 	ret

00801990 <_Z12read_sleb128PKhPi>:
  801990:	000f883a 	mov	r7,zero
  801994:	0011883a 	mov	r8,zero
  801998:	20c00007 	ldb	r3,0(r4)
  80199c:	21000044 	addi	r4,r4,1
  8019a0:	19803fcc 	andi	r6,r3,255
  8019a4:	30801fcc 	andi	r2,r6,127
  8019a8:	11c4983a 	sll	r2,r2,r7
  8019ac:	39c001c4 	addi	r7,r7,7
  8019b0:	4090b03a 	or	r8,r8,r2
  8019b4:	183ff816 	blt	r3,zero,801998 <_Z12read_sleb128PKhPi+0x8>
  8019b8:	008007c4 	movi	r2,31
  8019bc:	11c00636 	bltu	r2,r7,8019d8 <_Z12read_sleb128PKhPi+0x48>
  8019c0:	3080100c 	andi	r2,r6,64
  8019c4:	10000426 	beq	r2,zero,8019d8 <_Z12read_sleb128PKhPi+0x48>
  8019c8:	00800044 	movi	r2,1
  8019cc:	11c4983a 	sll	r2,r2,r7
  8019d0:	0085c83a 	sub	r2,zero,r2
  8019d4:	4090b03a 	or	r8,r8,r2
  8019d8:	2005883a 	mov	r2,r4
  8019dc:	2a000015 	stw	r8,0(r5)
  8019e0:	f800283a 	ret

008019e4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
  8019e4:	28800017 	ldw	r2,0(r5)
  8019e8:	defffb04 	addi	sp,sp,-20
  8019ec:	30c00017 	ldw	r3,0(r6)
  8019f0:	dc400215 	stw	r17,8(sp)
  8019f4:	2823883a 	mov	r17,r5
  8019f8:	11400217 	ldw	r5,8(r2)
  8019fc:	dc800315 	stw	r18,12(sp)
  801a00:	dc000115 	stw	r16,4(sp)
  801a04:	dfc00415 	stw	ra,16(sp)
  801a08:	2021883a 	mov	r16,r4
  801a0c:	d8c00015 	stw	r3,0(sp)
  801a10:	8809883a 	mov	r4,r17
  801a14:	3025883a 	mov	r18,r6
  801a18:	283ee83a 	callr	r5
  801a1c:	10803fcc 	andi	r2,r2,255
  801a20:	880b883a 	mov	r5,r17
  801a24:	8009883a 	mov	r4,r16
  801a28:	d80d883a 	mov	r6,sp
  801a2c:	01c00044 	movi	r7,1
  801a30:	10000326 	beq	r2,zero,801a40 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
  801a34:	d8800017 	ldw	r2,0(sp)
  801a38:	10c00017 	ldw	r3,0(r2)
  801a3c:	d8c00015 	stw	r3,0(sp)
  801a40:	80800017 	ldw	r2,0(r16)
  801a44:	10c00417 	ldw	r3,16(r2)
  801a48:	183ee83a 	callr	r3
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	0007883a 	mov	r3,zero
  801a54:	10000326 	beq	r2,zero,801a64 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
  801a58:	d8800017 	ldw	r2,0(sp)
  801a5c:	00c00044 	movi	r3,1
  801a60:	90800015 	stw	r2,0(r18)
  801a64:	1805883a 	mov	r2,r3
  801a68:	dfc00417 	ldw	ra,16(sp)
  801a6c:	dc800317 	ldw	r18,12(sp)
  801a70:	dc400217 	ldw	r17,8(sp)
  801a74:	dc000117 	ldw	r16,4(sp)
  801a78:	dec00504 	addi	sp,sp,20
  801a7c:	f800283a 	ret

00801a80 <_Z28read_encoded_value_with_basehjPKhPj>:
  801a80:	defff904 	addi	sp,sp,-28
  801a84:	dc400215 	stw	r17,8(sp)
  801a88:	00801404 	movi	r2,80
  801a8c:	24403fcc 	andi	r17,r4,255
  801a90:	dd000515 	stw	r20,20(sp)
  801a94:	dcc00415 	stw	r19,16(sp)
  801a98:	dc800315 	stw	r18,12(sp)
  801a9c:	dc000115 	stw	r16,4(sp)
  801aa0:	dfc00615 	stw	ra,24(sp)
  801aa4:	2025883a 	mov	r18,r4
  801aa8:	2829883a 	mov	r20,r5
  801aac:	3021883a 	mov	r16,r6
  801ab0:	3827883a 	mov	r19,r7
  801ab4:	88801826 	beq	r17,r2,801b18 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
  801ab8:	88c003cc 	andi	r3,r17,15
  801abc:	00800304 	movi	r2,12
  801ac0:	10c0012e 	bgeu	r2,r3,801ac8 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
  801ac4:	080359c0 	call	80359c <abort>
  801ac8:	18c5883a 	add	r2,r3,r3
  801acc:	1085883a 	add	r2,r2,r2
  801ad0:	00c02034 	movhi	r3,128
  801ad4:	18c6b904 	addi	r3,r3,6884
  801ad8:	10c5883a 	add	r2,r2,r3
  801adc:	11000017 	ldw	r4,0(r2)
  801ae0:	2000683a 	jmp	r4
  801ae4:	00801b54 	movui	r2,109
  801ae8:	00801c3c 	xorhi	r2,zero,112
  801aec:	00801be8 	cmpgeui	r2,zero,111
  801af0:	00801b54 	movui	r2,109
  801af4:	00801bac 	andhi	r2,zero,110
  801af8:	00801ac4 	movi	r2,107
  801afc:	00801ac4 	movi	r2,107
  801b00:	00801ac4 	movi	r2,107
  801b04:	00801ac4 	movi	r2,107
  801b08:	00801c24 	muli	r2,zero,112
  801b0c:	00801c00 	call	801c0 <__alt_mem_sdram_controller-0x77fe40>
  801b10:	00801b54 	movui	r2,109
  801b14:	00801bac 	andhi	r2,zero,110
  801b18:	308000c4 	addi	r2,r6,3
  801b1c:	00ffff04 	movi	r3,-4
  801b20:	10c4703a 	and	r2,r2,r3
  801b24:	11000017 	ldw	r4,0(r2)
  801b28:	11400104 	addi	r5,r2,4
  801b2c:	2805883a 	mov	r2,r5
  801b30:	99000015 	stw	r4,0(r19)
  801b34:	dfc00617 	ldw	ra,24(sp)
  801b38:	dd000517 	ldw	r20,20(sp)
  801b3c:	dcc00417 	ldw	r19,16(sp)
  801b40:	dc800317 	ldw	r18,12(sp)
  801b44:	dc400217 	ldw	r17,8(sp)
  801b48:	dc000117 	ldw	r16,4(sp)
  801b4c:	dec00704 	addi	sp,sp,28
  801b50:	f800283a 	ret
  801b54:	30800043 	ldbu	r2,1(r6)
  801b58:	30c00083 	ldbu	r3,2(r6)
  801b5c:	310000c3 	ldbu	r4,3(r6)
  801b60:	31400003 	ldbu	r5,0(r6)
  801b64:	1004923a 	slli	r2,r2,8
  801b68:	1806943a 	slli	r3,r3,16
  801b6c:	2008963a 	slli	r4,r4,24
  801b70:	1144b03a 	or	r2,r2,r5
  801b74:	1886b03a 	or	r3,r3,r2
  801b78:	20c8b03a 	or	r4,r4,r3
  801b7c:	31400104 	addi	r5,r6,4
  801b80:	203fea26 	beq	r4,zero,801b2c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  801b84:	88c01c0c 	andi	r3,r17,112
  801b88:	00800404 	movi	r2,16
  801b8c:	18801426 	beq	r3,r2,801be0 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
  801b90:	90803fcc 	andi	r2,r18,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	2509883a 	add	r4,r4,r20
  801ba0:	103fe20e 	bge	r2,zero,801b2c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  801ba4:	21000017 	ldw	r4,0(r4)
  801ba8:	003fe006 	br	801b2c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
  801bac:	30800043 	ldbu	r2,1(r6)
  801bb0:	31800083 	ldbu	r6,2(r6)
  801bb4:	820000c3 	ldbu	r8,3(r16)
  801bb8:	1004923a 	slli	r2,r2,8
  801bbc:	82400003 	ldbu	r9,0(r16)
  801bc0:	300c943a 	slli	r6,r6,16
  801bc4:	4010963a 	slli	r8,r8,24
  801bc8:	1244b03a 	or	r2,r2,r9
  801bcc:	308cb03a 	or	r6,r6,r2
  801bd0:	4184b03a 	or	r2,r8,r6
  801bd4:	1009883a 	mov	r4,r2
  801bd8:	81400204 	addi	r5,r16,8
  801bdc:	003fe806 	br	801b80 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  801be0:	8029883a 	mov	r20,r16
  801be4:	003fea06 	br	801b90 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
  801be8:	30800043 	ldbu	r2,1(r6)
  801bec:	30c00003 	ldbu	r3,0(r6)
  801bf0:	31400084 	addi	r5,r6,2
  801bf4:	1004923a 	slli	r2,r2,8
  801bf8:	10c8b03a 	or	r4,r2,r3
  801bfc:	003fe006 	br	801b80 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  801c00:	30800043 	ldbu	r2,1(r6)
  801c04:	30c00003 	ldbu	r3,0(r6)
  801c08:	31400084 	addi	r5,r6,2
  801c0c:	1004923a 	slli	r2,r2,8
  801c10:	10c4b03a 	or	r2,r2,r3
  801c14:	113fffcc 	andi	r4,r2,65535
  801c18:	2120001c 	xori	r4,r4,32768
  801c1c:	21200004 	addi	r4,r4,-32768
  801c20:	003fd706 	br	801b80 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  801c24:	3009883a 	mov	r4,r6
  801c28:	d80b883a 	mov	r5,sp
  801c2c:	08019900 	call	801990 <_Z12read_sleb128PKhPi>
  801c30:	d9000017 	ldw	r4,0(sp)
  801c34:	100b883a 	mov	r5,r2
  801c38:	003fd106 	br	801b80 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
  801c3c:	3009883a 	mov	r4,r6
  801c40:	d80b883a 	mov	r5,sp
  801c44:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  801c48:	d9000017 	ldw	r4,0(sp)
  801c4c:	100b883a 	mov	r5,r2
  801c50:	003fcb06 	br	801b80 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

00801c54 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
  801c54:	deffff04 	addi	sp,sp,-4
  801c58:	21003fcc 	andi	r4,r4,255
  801c5c:	00803fc4 	movi	r2,255
  801c60:	dfc00015 	stw	ra,0(sp)
  801c64:	20800c26 	beq	r4,r2,801c98 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  801c68:	21001c0c 	andi	r4,r4,112
  801c6c:	00800804 	movi	r2,32
  801c70:	20800d26 	beq	r4,r2,801ca8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
  801c74:	1100070e 	bge	r2,r4,801c94 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
  801c78:	00801004 	movi	r2,64
  801c7c:	20801126 	beq	r4,r2,801cc4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
  801c80:	00801404 	movi	r2,80
  801c84:	20800426 	beq	r4,r2,801c98 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  801c88:	00800c04 	movi	r2,48
  801c8c:	20801126 	beq	r4,r2,801cd4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
  801c90:	080359c0 	call	80359c <abort>
  801c94:	2000081e 	bne	r4,zero,801cb8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
  801c98:	0005883a 	mov	r2,zero
  801c9c:	dfc00017 	ldw	ra,0(sp)
  801ca0:	dec00104 	addi	sp,sp,4
  801ca4:	f800283a 	ret
  801ca8:	2809883a 	mov	r4,r5
  801cac:	dfc00017 	ldw	ra,0(sp)
  801cb0:	dec00104 	addi	sp,sp,4
  801cb4:	080310c1 	jmpi	80310c <_Unwind_GetTextRelBase>
  801cb8:	00800404 	movi	r2,16
  801cbc:	20bff626 	beq	r4,r2,801c98 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
  801cc0:	080359c0 	call	80359c <abort>
  801cc4:	2809883a 	mov	r4,r5
  801cc8:	dfc00017 	ldw	ra,0(sp)
  801ccc:	dec00104 	addi	sp,sp,4
  801cd0:	08030f41 	jmpi	8030f4 <_Unwind_GetRegionStart>
  801cd4:	2809883a 	mov	r4,r5
  801cd8:	dfc00017 	ldw	ra,0(sp)
  801cdc:	dec00104 	addi	sp,sp,4
  801ce0:	08031041 	jmpi	803104 <_Unwind_GetDataRelBase>

00801ce4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  801ce4:	defffa04 	addi	sp,sp,-24
  801ce8:	dc800415 	stw	r18,16(sp)
  801cec:	dc400315 	stw	r17,12(sp)
  801cf0:	dc000215 	stw	r16,8(sp)
  801cf4:	dfc00515 	stw	ra,20(sp)
  801cf8:	2021883a 	mov	r16,r4
  801cfc:	000f883a 	mov	r7,zero
  801d00:	3023883a 	mov	r17,r6
  801d04:	2825883a 	mov	r18,r5
  801d08:	20000226 	beq	r4,zero,801d14 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
  801d0c:	08030f40 	call	8030f4 <_Unwind_GetRegionStart>
  801d10:	100f883a 	mov	r7,r2
  801d14:	89c00015 	stw	r7,0(r17)
  801d18:	90c00003 	ldbu	r3,0(r18)
  801d1c:	800b883a 	mov	r5,r16
  801d20:	00803fc4 	movi	r2,255
  801d24:	1c003fcc 	andi	r16,r3,255
  801d28:	91800044 	addi	r6,r18,1
  801d2c:	8009883a 	mov	r4,r16
  801d30:	18802226 	beq	r3,r2,801dbc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
  801d34:	d9800115 	stw	r6,4(sp)
  801d38:	0801c540 	call	801c54 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  801d3c:	d9800117 	ldw	r6,4(sp)
  801d40:	8009883a 	mov	r4,r16
  801d44:	100b883a 	mov	r5,r2
  801d48:	89c00104 	addi	r7,r17,4
  801d4c:	0801a800 	call	801a80 <_Z28read_encoded_value_with_basehjPKhPj>
  801d50:	100d883a 	mov	r6,r2
  801d54:	30800003 	ldbu	r2,0(r6)
  801d58:	31c00044 	addi	r7,r6,1
  801d5c:	00c03fc4 	movi	r3,255
  801d60:	d80b883a 	mov	r5,sp
  801d64:	3809883a 	mov	r4,r7
  801d68:	88800505 	stb	r2,20(r17)
  801d6c:	10c01b26 	beq	r2,r3,801ddc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
  801d70:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  801d74:	100f883a 	mov	r7,r2
  801d78:	d8800017 	ldw	r2,0(sp)
  801d7c:	3885883a 	add	r2,r7,r2
  801d80:	88800315 	stw	r2,12(r17)
  801d84:	38800003 	ldbu	r2,0(r7)
  801d88:	39000044 	addi	r4,r7,1
  801d8c:	d80b883a 	mov	r5,sp
  801d90:	88800545 	stb	r2,21(r17)
  801d94:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  801d98:	d8c00017 	ldw	r3,0(sp)
  801d9c:	10c9883a 	add	r4,r2,r3
  801da0:	89000415 	stw	r4,16(r17)
  801da4:	dfc00517 	ldw	ra,20(sp)
  801da8:	dc800417 	ldw	r18,16(sp)
  801dac:	dc400317 	ldw	r17,12(sp)
  801db0:	dc000217 	ldw	r16,8(sp)
  801db4:	dec00604 	addi	sp,sp,24
  801db8:	f800283a 	ret
  801dbc:	89c00115 	stw	r7,4(r17)
  801dc0:	30800003 	ldbu	r2,0(r6)
  801dc4:	31c00044 	addi	r7,r6,1
  801dc8:	00c03fc4 	movi	r3,255
  801dcc:	d80b883a 	mov	r5,sp
  801dd0:	3809883a 	mov	r4,r7
  801dd4:	88800505 	stb	r2,20(r17)
  801dd8:	10ffe51e 	bne	r2,r3,801d70 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
  801ddc:	88000315 	stw	zero,12(r17)
  801de0:	003fe806 	br	801d84 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

00801de4 <_Z15get_ttype_entryP16lsda_header_infoj>:
  801de4:	defffe04 	addi	sp,sp,-8
  801de8:	dfc00115 	stw	ra,4(sp)
  801dec:	21c00503 	ldbu	r7,20(r4)
  801df0:	00803fc4 	movi	r2,255
  801df4:	38801a26 	beq	r7,r2,801e60 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
  801df8:	38c001cc 	andi	r3,r7,7
  801dfc:	00800084 	movi	r2,2
  801e00:	18801326 	beq	r3,r2,801e50 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
  801e04:	10c0050e 	bge	r2,r3,801e1c <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
  801e08:	008000c4 	movi	r2,3
  801e0c:	18800426 	beq	r3,r2,801e20 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
  801e10:	00800104 	movi	r2,4
  801e14:	18801026 	beq	r3,r2,801e58 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
  801e18:	080359c0 	call	80359c <abort>
  801e1c:	183ffe1e 	bne	r3,zero,801e18 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
  801e20:	2945883a 	add	r2,r5,r5
  801e24:	1085883a 	add	r2,r2,r2
  801e28:	21800317 	ldw	r6,12(r4)
  801e2c:	21400217 	ldw	r5,8(r4)
  801e30:	3809883a 	mov	r4,r7
  801e34:	308dc83a 	sub	r6,r6,r2
  801e38:	d80f883a 	mov	r7,sp
  801e3c:	0801a800 	call	801a80 <_Z28read_encoded_value_with_basehjPKhPj>
  801e40:	d8800017 	ldw	r2,0(sp)
  801e44:	dfc00117 	ldw	ra,4(sp)
  801e48:	dec00204 	addi	sp,sp,8
  801e4c:	f800283a 	ret
  801e50:	2945883a 	add	r2,r5,r5
  801e54:	003ff406 	br	801e28 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  801e58:	280490fa 	slli	r2,r5,3
  801e5c:	003ff206 	br	801e28 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
  801e60:	0005883a 	mov	r2,zero
  801e64:	003ff006 	br	801e28 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

00801e68 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
  801e68:	20800317 	ldw	r2,12(r4)
  801e6c:	defffa04 	addi	sp,sp,-24
  801e70:	dc800415 	stw	r18,16(sp)
  801e74:	11c5c83a 	sub	r2,r2,r7
  801e78:	dc400315 	stw	r17,12(sp)
  801e7c:	dc000215 	stw	r16,8(sp)
  801e80:	dfc00515 	stw	ra,20(sp)
  801e84:	2023883a 	mov	r17,r4
  801e88:	d9800115 	stw	r6,4(sp)
  801e8c:	2825883a 	mov	r18,r5
  801e90:	143fffc4 	addi	r16,r2,-1
  801e94:	8009883a 	mov	r4,r16
  801e98:	d80b883a 	mov	r5,sp
  801e9c:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  801ea0:	1021883a 	mov	r16,r2
  801ea4:	d8800017 	ldw	r2,0(sp)
  801ea8:	8809883a 	mov	r4,r17
  801eac:	100b883a 	mov	r5,r2
  801eb0:	10000826 	beq	r2,zero,801ed4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
  801eb4:	0801de40 	call	801de4 <_Z15get_ttype_entryP16lsda_header_infoj>
  801eb8:	1009883a 	mov	r4,r2
  801ebc:	900b883a 	mov	r5,r18
  801ec0:	d9800104 	addi	r6,sp,4
  801ec4:	08019e40 	call	8019e4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  801ec8:	10803fcc 	andi	r2,r2,255
  801ecc:	103ff126 	beq	r2,zero,801e94 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
  801ed0:	00800044 	movi	r2,1
  801ed4:	dfc00517 	ldw	ra,20(sp)
  801ed8:	dc800417 	ldw	r18,16(sp)
  801edc:	dc400317 	ldw	r17,12(sp)
  801ee0:	dc000217 	ldw	r16,8(sp)
  801ee4:	dec00604 	addi	sp,sp,24
  801ee8:	f800283a 	ret

00801eec <__cxa_call_unexpected>:
  801eec:	deffe204 	addi	sp,sp,-120
  801ef0:	00802034 	movhi	r2,128
  801ef4:	10881b04 	addi	r2,r2,8300
  801ef8:	00c02074 	movhi	r3,129
  801efc:	18c25e04 	addi	r3,r3,2424
  801f00:	d8800c15 	stw	r2,48(sp)
  801f04:	d9001815 	stw	r4,96(sp)
  801f08:	00802034 	movhi	r2,128
  801f0c:	1087dd04 	addi	r2,r2,8052
  801f10:	d9000604 	addi	r4,sp,24
  801f14:	d8c00d15 	stw	r3,52(sp)
  801f18:	dfc01d15 	stw	ra,116(sp)
  801f1c:	d8800f15 	stw	r2,60(sp)
  801f20:	df001c15 	stw	fp,112(sp)
  801f24:	ddc01b15 	stw	r23,108(sp)
  801f28:	dec00e15 	stw	sp,56(sp)
  801f2c:	dec01015 	stw	sp,64(sp)
  801f30:	08030540 	call	803054 <_Unwind_SjLj_Register>
  801f34:	d9001817 	ldw	r4,96(sp)
  801f38:	08018380 	call	801838 <__cxa_begin_catch>
  801f3c:	d8801817 	ldw	r2,96(sp)
  801f40:	10fff504 	addi	r3,r2,-44
  801f44:	18800917 	ldw	r2,36(r3)
  801f48:	19400617 	ldw	r5,24(r3)
  801f4c:	19000217 	ldw	r4,8(r3)
  801f50:	d8800215 	stw	r2,8(sp)
  801f54:	18800817 	ldw	r2,32(r3)
  801f58:	18c00317 	ldw	r3,12(r3)
  801f5c:	d9401615 	stw	r5,88(sp)
  801f60:	d8801715 	stw	r2,92(sp)
  801f64:	00800084 	movi	r2,2
  801f68:	d8c01515 	stw	r3,84(sp)
  801f6c:	d8800715 	stw	r2,28(sp)
  801f70:	08029c40 	call	8029c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
  801f74:	d8800717 	ldw	r2,28(sp)
  801f78:	d8c00817 	ldw	r3,32(sp)
  801f7c:	d8801a15 	stw	r2,104(sp)
  801f80:	d9401a17 	ldw	r5,104(sp)
  801f84:	00800044 	movi	r2,1
  801f88:	d8c01915 	stw	r3,100(sp)
  801f8c:	28800826 	beq	r5,r2,801fb0 <__cxa_call_unexpected+0xc4>
  801f90:	d8000715 	stw	zero,28(sp)
  801f94:	08017940 	call	801794 <__cxa_end_catch>
  801f98:	d8000715 	stw	zero,28(sp)
  801f9c:	08017940 	call	801794 <__cxa_end_catch>
  801fa0:	d9001917 	ldw	r4,100(sp)
  801fa4:	00bfffc4 	movi	r2,-1
  801fa8:	d8800715 	stw	r2,28(sp)
  801fac:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  801fb0:	d9001917 	ldw	r4,100(sp)
  801fb4:	08018380 	call	801838 <__cxa_begin_catch>
  801fb8:	08028d00 	call	8028d0 <__cxa_get_globals_fast>
  801fbc:	10800017 	ldw	r2,0(r2)
  801fc0:	d8c01a17 	ldw	r3,104(sp)
  801fc4:	0009883a 	mov	r4,zero
  801fc8:	11401004 	addi	r5,r2,64
  801fcc:	d9401315 	stw	r5,76(sp)
  801fd0:	d8801415 	stw	r2,80(sp)
  801fd4:	d8c00715 	stw	r3,28(sp)
  801fd8:	d9401717 	ldw	r5,92(sp)
  801fdc:	d80d883a 	mov	r6,sp
  801fe0:	0801ce40 	call	801ce4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  801fe4:	d8801417 	ldw	r2,80(sp)
  801fe8:	d809883a 	mov	r4,sp
  801fec:	d9801317 	ldw	r6,76(sp)
  801ff0:	11400017 	ldw	r5,0(r2)
  801ff4:	d9c01617 	ldw	r7,88(sp)
  801ff8:	0801e680 	call	801e68 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  801ffc:	10803fcc 	andi	r2,r2,255
  802000:	1000151e 	bne	r2,zero,802058 <__cxa_call_unexpected+0x16c>
  802004:	d8c01a17 	ldw	r3,104(sp)
  802008:	d809883a 	mov	r4,sp
  80200c:	01402074 	movhi	r5,129
  802010:	2942e004 	addi	r5,r5,2944
  802014:	d8c00715 	stw	r3,28(sp)
  802018:	000d883a 	mov	r6,zero
  80201c:	d9c01617 	ldw	r7,88(sp)
  802020:	0801e680 	call	801e68 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  802024:	10803fcc 	andi	r2,r2,255
  802028:	10000c26 	beq	r2,zero,80205c <__cxa_call_unexpected+0x170>
  80202c:	01000104 	movi	r4,4
  802030:	0802cb80 	call	802cb8 <__cxa_allocate_exception>
  802034:	1009883a 	mov	r4,r2
  802038:	00802074 	movhi	r2,129
  80203c:	1082d304 	addi	r2,r2,2892
  802040:	20800015 	stw	r2,0(r4)
  802044:	01402074 	movhi	r5,129
  802048:	2942e004 	addi	r5,r5,2944
  80204c:	01802034 	movhi	r6,128
  802050:	318ae904 	addi	r6,r6,11172
  802054:	08015f80 	call	8015f8 <__cxa_throw>
  802058:	08015840 	call	801584 <__cxa_rethrow>
  80205c:	d9401a17 	ldw	r5,104(sp)
  802060:	d9001517 	ldw	r4,84(sp)
  802064:	d9400715 	stw	r5,28(sp)
  802068:	08029080 	call	802908 <_ZN10__cxxabiv111__terminateEPFvvE>

0080206c <__gxx_personality_sj0>:
  80206c:	deffd304 	addi	sp,sp,-180
  802070:	00802034 	movhi	r2,128
  802074:	10894204 	addi	r2,r2,9480
  802078:	00c02074 	movhi	r3,129
  80207c:	18c26204 	addi	r3,r3,2440
  802080:	d8801315 	stw	r2,76(sp)
  802084:	d9002315 	stw	r4,140(sp)
  802088:	00802034 	movhi	r2,128
  80208c:	10881b04 	addi	r2,r2,8300
  802090:	d9000a04 	addi	r4,sp,40
  802094:	d8801015 	stw	r2,64(sp)
  802098:	d8c01115 	stw	r3,68(sp)
  80209c:	dfc02c15 	stw	ra,176(sp)
  8020a0:	df002b15 	stw	fp,172(sp)
  8020a4:	ddc02a15 	stw	r23,168(sp)
  8020a8:	dec01215 	stw	sp,72(sp)
  8020ac:	dec01415 	stw	sp,80(sp)
  8020b0:	d9802515 	stw	r6,148(sp)
  8020b4:	d9402415 	stw	r5,144(sp)
  8020b8:	d9c02615 	stw	r7,152(sp)
  8020bc:	08030540 	call	803054 <_Unwind_SjLj_Register>
  8020c0:	d8c02317 	ldw	r3,140(sp)
  8020c4:	00800044 	movi	r2,1
  8020c8:	18800a26 	beq	r3,r2,8020f4 <__gxx_personality_sj0+0x88>
  8020cc:	010000c4 	movi	r4,3
  8020d0:	d9002215 	stw	r4,136(sp)
  8020d4:	d9000a04 	addi	r4,sp,40
  8020d8:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  8020dc:	d8802217 	ldw	r2,136(sp)
  8020e0:	dfc02c17 	ldw	ra,176(sp)
  8020e4:	df002b17 	ldw	fp,172(sp)
  8020e8:	ddc02a17 	ldw	r23,168(sp)
  8020ec:	dec02d04 	addi	sp,sp,180
  8020f0:	f800283a 	ret
  8020f4:	d9402d17 	ldw	r5,180(sp)
  8020f8:	d9002517 	ldw	r4,148(sp)
  8020fc:	0007883a 	mov	r3,zero
  802100:	28800504 	addi	r2,r5,20
  802104:	d8800015 	stw	r2,0(sp)
  802108:	28bff504 	addi	r2,r5,-44
  80210c:	d8801a15 	stw	r2,104(sp)
  802110:	0090caf4 	movhi	r2,17195
  802114:	108ac004 	addi	r2,r2,11008
  802118:	2080ad26 	beq	r4,r2,8023d0 <__gxx_personality_sj0+0x364>
  80211c:	d8c02105 	stb	r3,132(sp)
  802120:	d8c02417 	ldw	r3,144(sp)
  802124:	00800184 	movi	r2,6
  802128:	1880281e 	bne	r3,r2,8021cc <__gxx_personality_sj0+0x160>
  80212c:	d8802103 	ldbu	r2,132(sp)
  802130:	10002626 	beq	r2,zero,8021cc <__gxx_personality_sj0+0x160>
  802134:	d9001a17 	ldw	r4,104(sp)
  802138:	d9401a17 	ldw	r5,104(sp)
  80213c:	d8801a17 	ldw	r2,104(sp)
  802140:	21000917 	ldw	r4,36(r4)
  802144:	29400617 	ldw	r5,24(r5)
  802148:	10800817 	ldw	r2,32(r2)
  80214c:	d9001d15 	stw	r4,116(sp)
  802150:	d9401b15 	stw	r5,108(sp)
  802154:	d8802015 	stw	r2,128(sp)
  802158:	2000ad1e 	bne	r4,zero,802410 <__gxx_personality_sj0+0x3a4>
  80215c:	01000044 	movi	r4,1
  802160:	00800044 	movi	r2,1
  802164:	2080e126 	beq	r4,r2,8024ec <__gxx_personality_sj0+0x480>
  802168:	d8801b17 	ldw	r2,108(sp)
  80216c:	1000d316 	blt	r2,zero,8024bc <__gxx_personality_sj0+0x450>
  802170:	d9802d17 	ldw	r6,180(sp)
  802174:	d9002e17 	ldw	r4,184(sp)
  802178:	00bfffc4 	movi	r2,-1
  80217c:	000b883a 	mov	r5,zero
  802180:	d8800b15 	stw	r2,44(sp)
  802184:	080309c0 	call	80309c <_Unwind_SetGR>
  802188:	d9801b17 	ldw	r6,108(sp)
  80218c:	d9002e17 	ldw	r4,184(sp)
  802190:	01400044 	movi	r5,1
  802194:	080309c0 	call	80309c <_Unwind_SetGR>
  802198:	d9002e17 	ldw	r4,184(sp)
  80219c:	d9401d17 	ldw	r5,116(sp)
  8021a0:	08030d80 	call	8030d8 <_Unwind_SetIP>
  8021a4:	010001c4 	movi	r4,7
  8021a8:	d9002215 	stw	r4,136(sp)
  8021ac:	d9000a04 	addi	r4,sp,40
  8021b0:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  8021b4:	d8802217 	ldw	r2,136(sp)
  8021b8:	dfc02c17 	ldw	ra,176(sp)
  8021bc:	df002b17 	ldw	fp,172(sp)
  8021c0:	ddc02a17 	ldw	r23,168(sp)
  8021c4:	dec02d04 	addi	sp,sp,180
  8021c8:	f800283a 	ret
  8021cc:	d9002e17 	ldw	r4,184(sp)
  8021d0:	00ffffc4 	movi	r3,-1
  8021d4:	d8c00b15 	stw	r3,44(sp)
  8021d8:	08030e80 	call	8030e8 <_Unwind_GetLanguageSpecificData>
  8021dc:	10007226 	beq	r2,zero,8023a8 <__gxx_personality_sj0+0x33c>
  8021e0:	d9002e17 	ldw	r4,184(sp)
  8021e4:	d9800404 	addi	r6,sp,16
  8021e8:	100b883a 	mov	r5,r2
  8021ec:	d8802015 	stw	r2,128(sp)
  8021f0:	0801ce40 	call	801ce4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  8021f4:	d9000903 	ldbu	r4,36(sp)
  8021f8:	d9402e17 	ldw	r5,184(sp)
  8021fc:	d8801e15 	stw	r2,120(sp)
  802200:	0801c540 	call	801c54 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  802204:	d9002e17 	ldw	r4,184(sp)
  802208:	d8800615 	stw	r2,24(sp)
  80220c:	08030b40 	call	8030b4 <_Unwind_GetIP>
  802210:	10bfffc4 	addi	r2,r2,-1
  802214:	d8801c15 	stw	r2,112(sp)
  802218:	10006316 	blt	r2,zero,8023a8 <__gxx_personality_sj0+0x33c>
  80221c:	10001b1e 	bne	r2,zero,80228c <__gxx_personality_sj0+0x220>
  802220:	01000044 	movi	r4,1
  802224:	d8001f15 	stw	zero,124(sp)
  802228:	d8001d15 	stw	zero,116(sp)
  80222c:	d8001b15 	stw	zero,108(sp)
  802230:	d9402417 	ldw	r5,144(sp)
  802234:	00c00044 	movi	r3,1
  802238:	28c4703a 	and	r2,r5,r3
  80223c:	1005003a 	cmpeq	r2,r2,zero
  802240:	10006a1e 	bne	r2,zero,8023ec <__gxx_personality_sj0+0x380>
  802244:	00800084 	movi	r2,2
  802248:	20805726 	beq	r4,r2,8023a8 <__gxx_personality_sj0+0x33c>
  80224c:	d8802103 	ldbu	r2,132(sp)
  802250:	10008626 	beq	r2,zero,80246c <__gxx_personality_sj0+0x400>
  802254:	d9001a17 	ldw	r4,104(sp)
  802258:	d9401d17 	ldw	r5,116(sp)
  80225c:	d8801b17 	ldw	r2,108(sp)
  802260:	00c00184 	movi	r3,6
  802264:	d8c02215 	stw	r3,136(sp)
  802268:	21400915 	stw	r5,36(r4)
  80226c:	20800615 	stw	r2,24(r4)
  802270:	d8c01f17 	ldw	r3,124(sp)
  802274:	d9402017 	ldw	r5,128(sp)
  802278:	d8800017 	ldw	r2,0(sp)
  80227c:	20c00715 	stw	r3,28(r4)
  802280:	21400815 	stw	r5,32(r4)
  802284:	20800a15 	stw	r2,40(r4)
  802288:	003f9206 	br	8020d4 <__gxx_personality_sj0+0x68>
  80228c:	d9001e17 	ldw	r4,120(sp)
  802290:	d9400204 	addi	r5,sp,8
  802294:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  802298:	d9401c17 	ldw	r5,112(sp)
  80229c:	1009883a 	mov	r4,r2
  8022a0:	297fffc4 	addi	r5,r5,-1
  8022a4:	d9401c15 	stw	r5,112(sp)
  8022a8:	d9400104 	addi	r5,sp,4
  8022ac:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  8022b0:	d8801e15 	stw	r2,120(sp)
  8022b4:	d8801c17 	ldw	r2,112(sp)
  8022b8:	103ff41e 	bne	r2,zero,80228c <__gxx_personality_sj0+0x220>
  8022bc:	d8800217 	ldw	r2,8(sp)
  8022c0:	d8c00117 	ldw	r3,4(sp)
  8022c4:	01000044 	movi	r4,1
  8022c8:	1105883a 	add	r2,r2,r4
  8022cc:	d8801d15 	stw	r2,116(sp)
  8022d0:	1800541e 	bne	r3,zero,802424 <__gxx_personality_sj0+0x3b8>
  8022d4:	d8001f15 	stw	zero,124(sp)
  8022d8:	d8c01d17 	ldw	r3,116(sp)
  8022dc:	18003226 	beq	r3,zero,8023a8 <__gxx_personality_sj0+0x33c>
  8022e0:	d9001f17 	ldw	r4,124(sp)
  8022e4:	20007226 	beq	r4,zero,8024b0 <__gxx_personality_sj0+0x444>
  8022e8:	d9402417 	ldw	r5,144(sp)
  8022ec:	2880020c 	andi	r2,r5,8
  8022f0:	10006a1e 	bne	r2,zero,80249c <__gxx_personality_sj0+0x430>
  8022f4:	d8802103 	ldbu	r2,132(sp)
  8022f8:	10006826 	beq	r2,zero,80249c <__gxx_personality_sj0+0x430>
  8022fc:	d8801a17 	ldw	r2,104(sp)
  802300:	10800017 	ldw	r2,0(r2)
  802304:	d8801915 	stw	r2,100(sp)
  802308:	d8c01917 	ldw	r3,100(sp)
  80230c:	d8001805 	stb	zero,96(sp)
  802310:	1807003a 	cmpeq	r3,r3,zero
  802314:	d8c02715 	stw	r3,156(sp)
  802318:	00000706 	br	802338 <__gxx_personality_sj0+0x2cc>
  80231c:	01000044 	movi	r4,1
  802320:	d9001805 	stb	r4,96(sp)
  802324:	d8800217 	ldw	r2,8(sp)
  802328:	10005e26 	beq	r2,zero,8024a4 <__gxx_personality_sj0+0x438>
  80232c:	d8c01717 	ldw	r3,92(sp)
  802330:	1885883a 	add	r2,r3,r2
  802334:	d8801f15 	stw	r2,124(sp)
  802338:	d9001f17 	ldw	r4,124(sp)
  80233c:	d9400104 	addi	r5,sp,4
  802340:	08019900 	call	801990 <_Z12read_sleb128PKhPi>
  802344:	1009883a 	mov	r4,r2
  802348:	d9400204 	addi	r5,sp,8
  80234c:	d8801715 	stw	r2,92(sp)
  802350:	08019900 	call	801990 <_Z12read_sleb128PKhPi>
  802354:	d8800117 	ldw	r2,4(sp)
  802358:	103ff026 	beq	r2,zero,80231c <__gxx_personality_sj0+0x2b0>
  80235c:	0080360e 	bge	zero,r2,802438 <__gxx_personality_sj0+0x3cc>
  802360:	017fffc4 	movi	r5,-1
  802364:	d9400b15 	stw	r5,44(sp)
  802368:	d9000404 	addi	r4,sp,16
  80236c:	100b883a 	mov	r5,r2
  802370:	0801de40 	call	801de4 <_Z15get_ttype_entryP16lsda_header_infoj>
  802374:	10000826 	beq	r2,zero,802398 <__gxx_personality_sj0+0x32c>
  802378:	d8c02717 	ldw	r3,156(sp)
  80237c:	183fe91e 	bne	r3,zero,802324 <__gxx_personality_sj0+0x2b8>
  802380:	d9401917 	ldw	r5,100(sp)
  802384:	1009883a 	mov	r4,r2
  802388:	d80d883a 	mov	r6,sp
  80238c:	08019e40 	call	8019e4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
  802390:	10803fcc 	andi	r2,r2,255
  802394:	103fe326 	beq	r2,zero,802324 <__gxx_personality_sj0+0x2b8>
  802398:	d9000117 	ldw	r4,4(sp)
  80239c:	d9001b15 	stw	r4,108(sp)
  8023a0:	010000c4 	movi	r4,3
  8023a4:	003fa206 	br	802230 <__gxx_personality_sj0+0x1c4>
  8023a8:	01400204 	movi	r5,8
  8023ac:	d9000a04 	addi	r4,sp,40
  8023b0:	d9402215 	stw	r5,136(sp)
  8023b4:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  8023b8:	d8802217 	ldw	r2,136(sp)
  8023bc:	dfc02c17 	ldw	ra,176(sp)
  8023c0:	df002b17 	ldw	fp,172(sp)
  8023c4:	ddc02a17 	ldw	r23,168(sp)
  8023c8:	dec02d04 	addi	sp,sp,180
  8023cc:	f800283a 	ret
  8023d0:	d9402617 	ldw	r5,152(sp)
  8023d4:	0091d3b4 	movhi	r2,18254
  8023d8:	109550c4 	addi	r2,r2,21827
  8023dc:	28bf4f1e 	bne	r5,r2,80211c <__gxx_personality_sj0+0xb0>
  8023e0:	d8802317 	ldw	r2,140(sp)
  8023e4:	1007883a 	mov	r3,r2
  8023e8:	003f4c06 	br	80211c <__gxx_personality_sj0+0xb0>
  8023ec:	d9402417 	ldw	r5,144(sp)
  8023f0:	2880020c 	andi	r2,r5,8
  8023f4:	10000826 	beq	r2,zero,802418 <__gxx_personality_sj0+0x3ac>
  8023f8:	20c04026 	beq	r4,r3,8024fc <__gxx_personality_sj0+0x490>
  8023fc:	d8801b17 	ldw	r2,108(sp)
  802400:	103f5b0e 	bge	r2,zero,802170 <__gxx_personality_sj0+0x104>
  802404:	00800084 	movi	r2,2
  802408:	d8800b15 	stw	r2,44(sp)
  80240c:	08029d40 	call	8029d4 <_ZSt10unexpectedv>
  802410:	010000c4 	movi	r4,3
  802414:	003f5206 	br	802160 <__gxx_personality_sj0+0xf4>
  802418:	d8802103 	ldbu	r2,132(sp)
  80241c:	103f501e 	bne	r2,zero,802160 <__gxx_personality_sj0+0xf4>
  802420:	003ff506 	br	8023f8 <__gxx_personality_sj0+0x38c>
  802424:	d8800817 	ldw	r2,32(sp)
  802428:	1885883a 	add	r2,r3,r2
  80242c:	1105c83a 	sub	r2,r2,r4
  802430:	d8801f15 	stw	r2,124(sp)
  802434:	003fa806 	br	8022d8 <__gxx_personality_sj0+0x26c>
  802438:	d9002717 	ldw	r4,156(sp)
  80243c:	20000e1e 	bne	r4,zero,802478 <__gxx_personality_sj0+0x40c>
  802440:	017fffc4 	movi	r5,-1
  802444:	d9400b15 	stw	r5,44(sp)
  802448:	d9800017 	ldw	r6,0(sp)
  80244c:	d9401917 	ldw	r5,100(sp)
  802450:	100f883a 	mov	r7,r2
  802454:	d9000404 	addi	r4,sp,16
  802458:	0801e680 	call	801e68 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
  80245c:	1080005c 	xori	r2,r2,1
  802460:	10803fcc 	andi	r2,r2,255
  802464:	103faf26 	beq	r2,zero,802324 <__gxx_personality_sj0+0x2b8>
  802468:	003fcb06 	br	802398 <__gxx_personality_sj0+0x32c>
  80246c:	00800184 	movi	r2,6
  802470:	d8802215 	stw	r2,136(sp)
  802474:	003f1706 	br	8020d4 <__gxx_personality_sj0+0x68>
  802478:	d9000717 	ldw	r4,28(sp)
  80247c:	d9400304 	addi	r5,sp,12
  802480:	2089c83a 	sub	r4,r4,r2
  802484:	213fffc4 	addi	r4,r4,-1
  802488:	08019600 	call	801960 <_Z12read_uleb128PKhPj>
  80248c:	d8c00317 	ldw	r3,12(sp)
  802490:	1807003a 	cmpeq	r3,r3,zero
  802494:	1805883a 	mov	r2,r3
  802498:	003ff106 	br	802460 <__gxx_personality_sj0+0x3f4>
  80249c:	d8001915 	stw	zero,100(sp)
  8024a0:	003f9906 	br	802308 <__gxx_personality_sj0+0x29c>
  8024a4:	d8801803 	ldbu	r2,96(sp)
  8024a8:	1004c03a 	cmpne	r2,r2,zero
  8024ac:	103fbe26 	beq	r2,zero,8023a8 <__gxx_personality_sj0+0x33c>
  8024b0:	01000084 	movi	r4,2
  8024b4:	d8001b15 	stw	zero,108(sp)
  8024b8:	003f5d06 	br	802230 <__gxx_personality_sj0+0x1c4>
  8024bc:	d9402017 	ldw	r5,128(sp)
  8024c0:	d9002e17 	ldw	r4,184(sp)
  8024c4:	00bfffc4 	movi	r2,-1
  8024c8:	d9800404 	addi	r6,sp,16
  8024cc:	d8800b15 	stw	r2,44(sp)
  8024d0:	0801ce40 	call	801ce4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  8024d4:	d9000903 	ldbu	r4,36(sp)
  8024d8:	d9402e17 	ldw	r5,184(sp)
  8024dc:	0801c540 	call	801c54 <_Z21base_of_encoded_valuehP15_Unwind_Context>
  8024e0:	d8c01a17 	ldw	r3,104(sp)
  8024e4:	18800915 	stw	r2,36(r3)
  8024e8:	003f2106 	br	802170 <__gxx_personality_sj0+0x104>
  8024ec:	d9002d17 	ldw	r4,180(sp)
  8024f0:	00bfffc4 	movi	r2,-1
  8024f4:	d8800b15 	stw	r2,44(sp)
  8024f8:	0802aec0 	call	802aec <__cxa_call_terminate>
  8024fc:	00bfffc4 	movi	r2,-1
  802500:	d8800b15 	stw	r2,44(sp)
  802504:	08029ac0 	call	8029ac <_ZSt9terminatev>
  802508:	d9000b17 	ldw	r4,44(sp)
  80250c:	d9400c17 	ldw	r5,48(sp)
  802510:	00800044 	movi	r2,1
  802514:	d9002915 	stw	r4,164(sp)
  802518:	d9402815 	stw	r5,160(sp)
  80251c:	20800626 	beq	r4,r2,802538 <__gxx_personality_sj0+0x4cc>
  802520:	d8000b15 	stw	zero,44(sp)
  802524:	08017940 	call	801794 <__cxa_end_catch>
  802528:	d9002817 	ldw	r4,160(sp)
  80252c:	00bfffc4 	movi	r2,-1
  802530:	d8800b15 	stw	r2,44(sp)
  802534:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  802538:	d9002817 	ldw	r4,160(sp)
  80253c:	08018380 	call	801838 <__cxa_begin_catch>
  802540:	d8c02917 	ldw	r3,164(sp)
  802544:	d8c00b15 	stw	r3,44(sp)
  802548:	08029ac0 	call	8029ac <_ZSt9terminatev>

0080254c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  80254c:	20c00017 	ldw	r3,0(r4)
  802550:	defffa04 	addi	sp,sp,-24
  802554:	dc000415 	stw	r16,16(sp)
  802558:	1a000617 	ldw	r8,24(r3)
  80255c:	3021883a 	mov	r16,r6
  802560:	31800017 	ldw	r6,0(r6)
  802564:	00800404 	movi	r2,16
  802568:	dfc00515 	stw	ra,20(sp)
  80256c:	d8800215 	stw	r2,8(sp)
  802570:	d8000015 	stw	zero,0(sp)
  802574:	d8000115 	stw	zero,4(sp)
  802578:	d8000315 	stw	zero,12(sp)
  80257c:	d80f883a 	mov	r7,sp
  802580:	403ee83a 	callr	r8
  802584:	d8800117 	ldw	r2,4(sp)
  802588:	00c00184 	movi	r3,6
  80258c:	0009883a 	mov	r4,zero
  802590:	1080018c 	andi	r2,r2,6
  802594:	10c0031e 	bne	r2,r3,8025a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
  802598:	d8800017 	ldw	r2,0(sp)
  80259c:	01000044 	movi	r4,1
  8025a0:	80800015 	stw	r2,0(r16)
  8025a4:	2005883a 	mov	r2,r4
  8025a8:	dfc00517 	ldw	ra,20(sp)
  8025ac:	dc000417 	ldw	r16,16(sp)
  8025b0:	dec00604 	addi	sp,sp,24
  8025b4:	f800283a 	ret

008025b8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
  8025b8:	d8800017 	ldw	r2,0(sp)
  8025bc:	00c00184 	movi	r3,6
  8025c0:	1180021e 	bne	r2,r6,8025cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
  8025c4:	1805883a 	mov	r2,r3
  8025c8:	f800283a 	ret
  8025cc:	00c00044 	movi	r3,1
  8025d0:	1805883a 	mov	r2,r3
  8025d4:	f800283a 	ret

008025d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  8025d8:	defffe04 	addi	sp,sp,-8
  8025dc:	00802074 	movhi	r2,129
  8025e0:	1082a404 	addi	r2,r2,2704
  8025e4:	dc400015 	stw	r17,0(sp)
  8025e8:	20800015 	stw	r2,0(r4)
  8025ec:	2023883a 	mov	r17,r4
  8025f0:	dfc00115 	stw	ra,4(sp)
  8025f4:	0802e340 	call	802e34 <_ZNSt9type_infoD2Ev>
  8025f8:	8809883a 	mov	r4,r17
  8025fc:	dfc00117 	ldw	ra,4(sp)
  802600:	dc400017 	ldw	r17,0(sp)
  802604:	dec00204 	addi	sp,sp,8
  802608:	08019501 	jmpi	801950 <_ZdlPv>

0080260c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  80260c:	00802074 	movhi	r2,129
  802610:	1082a404 	addi	r2,r2,2704
  802614:	20800015 	stw	r2,0(r4)
  802618:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

0080261c <_ZN10__cxxabiv117__class_type_infoD2Ev>:
  80261c:	00802074 	movhi	r2,129
  802620:	1082a404 	addi	r2,r2,2704
  802624:	20800015 	stw	r2,0(r4)
  802628:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

0080262c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  80262c:	2811883a 	mov	r8,r5
  802630:	20c00117 	ldw	r3,4(r4)
  802634:	40800117 	ldw	r2,4(r8)
  802638:	deffff04 	addi	sp,sp,-4
  80263c:	dfc00015 	stw	ra,0(sp)
  802640:	200b883a 	mov	r5,r4
  802644:	02400044 	movi	r9,1
  802648:	18800426 	beq	r3,r2,80265c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
  80264c:	008000c4 	movi	r2,3
  802650:	4009883a 	mov	r4,r8
  802654:	0013883a 	mov	r9,zero
  802658:	11c0042e 	bgeu	r2,r7,80266c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
  80265c:	4805883a 	mov	r2,r9
  802660:	dfc00017 	ldw	ra,0(sp)
  802664:	dec00104 	addi	sp,sp,4
  802668:	f800283a 	ret
  80266c:	40800017 	ldw	r2,0(r8)
  802670:	10c00517 	ldw	r3,20(r2)
  802674:	183ee83a 	callr	r3
  802678:	12403fcc 	andi	r9,r2,255
  80267c:	4805883a 	mov	r2,r9
  802680:	dfc00017 	ldw	ra,0(sp)
  802684:	dec00104 	addi	sp,sp,4
  802688:	f800283a 	ret

0080268c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  80268c:	20c00117 	ldw	r3,4(r4)
  802690:	28800117 	ldw	r2,4(r5)
  802694:	0009883a 	mov	r4,zero
  802698:	1880061e 	bne	r3,r2,8026b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
  80269c:	00800184 	movi	r2,6
  8026a0:	38800115 	stw	r2,4(r7)
  8026a4:	00800204 	movi	r2,8
  8026a8:	39800015 	stw	r6,0(r7)
  8026ac:	38800315 	stw	r2,12(r7)
  8026b0:	01000044 	movi	r4,1
  8026b4:	2005883a 	mov	r2,r4
  8026b8:	f800283a 	ret

008026bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  8026bc:	da000017 	ldw	r8,0(sp)
  8026c0:	d8800217 	ldw	r2,8(sp)
  8026c4:	d9400317 	ldw	r5,12(sp)
  8026c8:	40800926 	beq	r8,r2,8026f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
  8026cc:	21000117 	ldw	r4,4(r4)
  8026d0:	38800117 	ldw	r2,4(r7)
  8026d4:	2080041e 	bne	r4,r2,8026e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
  8026d8:	00800044 	movi	r2,1
  8026dc:	28800315 	stw	r2,12(r5)
  8026e0:	2a000015 	stw	r8,0(r5)
  8026e4:	29800115 	stw	r6,4(r5)
  8026e8:	0005883a 	mov	r2,zero
  8026ec:	f800283a 	ret
  8026f0:	d8800117 	ldw	r2,4(sp)
  8026f4:	21000117 	ldw	r4,4(r4)
  8026f8:	10c00117 	ldw	r3,4(r2)
  8026fc:	20fff41e 	bne	r4,r3,8026d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
  802700:	29800215 	stw	r6,8(r5)
  802704:	003ff806 	br	8026e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

00802708 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  802708:	defffb04 	addi	sp,sp,-20
  80270c:	dd400315 	stw	r21,12(sp)
  802710:	dcc00215 	stw	r19,8(sp)
  802714:	dc400115 	stw	r17,4(sp)
  802718:	dc000015 	stw	r16,0(sp)
  80271c:	2823883a 	mov	r17,r5
  802720:	3027883a 	mov	r19,r6
  802724:	382b883a 	mov	r21,r7
  802728:	dfc00415 	stw	ra,16(sp)
  80272c:	2021883a 	mov	r16,r4
  802730:	080268c0 	call	80268c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  802734:	10803fcc 	andi	r2,r2,255
  802738:	880b883a 	mov	r5,r17
  80273c:	980d883a 	mov	r6,r19
  802740:	a80f883a 	mov	r7,r21
  802744:	00c00044 	movi	r3,1
  802748:	1000051e 	bne	r2,zero,802760 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
  80274c:	81000217 	ldw	r4,8(r16)
  802750:	20800017 	ldw	r2,0(r4)
  802754:	10c00617 	ldw	r3,24(r2)
  802758:	183ee83a 	callr	r3
  80275c:	10c03fcc 	andi	r3,r2,255
  802760:	1805883a 	mov	r2,r3
  802764:	dfc00417 	ldw	ra,16(sp)
  802768:	dd400317 	ldw	r21,12(sp)
  80276c:	dcc00217 	ldw	r19,8(sp)
  802770:	dc400117 	ldw	r17,4(sp)
  802774:	dc000017 	ldw	r16,0(sp)
  802778:	dec00504 	addi	sp,sp,20
  80277c:	f800283a 	ret

00802780 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  802780:	defffe04 	addi	sp,sp,-8
  802784:	00802074 	movhi	r2,129
  802788:	1082bb04 	addi	r2,r2,2796
  80278c:	dc400015 	stw	r17,0(sp)
  802790:	20800015 	stw	r2,0(r4)
  802794:	2023883a 	mov	r17,r4
  802798:	dfc00115 	stw	ra,4(sp)
  80279c:	080261c0 	call	80261c <_ZN10__cxxabiv117__class_type_infoD2Ev>
  8027a0:	8809883a 	mov	r4,r17
  8027a4:	dfc00117 	ldw	ra,4(sp)
  8027a8:	dc400017 	ldw	r17,0(sp)
  8027ac:	dec00204 	addi	sp,sp,8
  8027b0:	08019501 	jmpi	801950 <_ZdlPv>

008027b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  8027b4:	00802074 	movhi	r2,129
  8027b8:	1082bb04 	addi	r2,r2,2796
  8027bc:	20800015 	stw	r2,0(r4)
  8027c0:	080261c1 	jmpi	80261c <_ZN10__cxxabiv117__class_type_infoD2Ev>

008027c4 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
  8027c4:	00802074 	movhi	r2,129
  8027c8:	1082bb04 	addi	r2,r2,2796
  8027cc:	20800015 	stw	r2,0(r4)
  8027d0:	080261c1 	jmpi	80261c <_ZN10__cxxabiv117__class_type_infoD2Ev>

008027d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
  8027d4:	da400017 	ldw	r9,0(sp)
  8027d8:	2011883a 	mov	r8,r4
  8027dc:	49800526 	beq	r9,r6,8027f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
  8027e0:	41000217 	ldw	r4,8(r8)
  8027e4:	20800017 	ldw	r2,0(r4)
  8027e8:	da400015 	stw	r9,0(sp)
  8027ec:	10c00817 	ldw	r3,32(r2)
  8027f0:	1800683a 	jmp	r3
  8027f4:	39000117 	ldw	r4,4(r7)
  8027f8:	40c00117 	ldw	r3,4(r8)
  8027fc:	00800184 	movi	r2,6
  802800:	193ff71e 	bne	r3,r4,8027e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
  802804:	f800283a 	ret

00802808 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  802808:	20c00117 	ldw	r3,4(r4)
  80280c:	38800117 	ldw	r2,4(r7)
  802810:	defffb04 	addi	sp,sp,-20
  802814:	dfc00415 	stw	ra,16(sp)
  802818:	da000517 	ldw	r8,20(sp)
  80281c:	dac00617 	ldw	r11,24(sp)
  802820:	da400717 	ldw	r9,28(sp)
  802824:	da800817 	ldw	r10,32(sp)
  802828:	18800c1e 	bne	r3,r2,80285c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
  80282c:	51800115 	stw	r6,4(r10)
  802830:	52000015 	stw	r8,0(r10)
  802834:	28001c16 	blt	r5,zero,8028a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
  802838:	4145883a 	add	r2,r8,r5
  80283c:	48801e26 	beq	r9,r2,8028b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
  802840:	00800044 	movi	r2,1
  802844:	0007883a 	mov	r3,zero
  802848:	50800315 	stw	r2,12(r10)
  80284c:	1805883a 	mov	r2,r3
  802850:	dfc00417 	ldw	ra,16(sp)
  802854:	dec00504 	addi	sp,sp,20
  802858:	f800283a 	ret
  80285c:	42400d26 	beq	r8,r9,802894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
  802860:	21000217 	ldw	r4,8(r4)
  802864:	20800017 	ldw	r2,0(r4)
  802868:	da000015 	stw	r8,0(sp)
  80286c:	dac00115 	stw	r11,4(sp)
  802870:	da400215 	stw	r9,8(sp)
  802874:	da800315 	stw	r10,12(sp)
  802878:	10c00717 	ldw	r3,28(r2)
  80287c:	183ee83a 	callr	r3
  802880:	10c03fcc 	andi	r3,r2,255
  802884:	1805883a 	mov	r2,r3
  802888:	dfc00417 	ldw	ra,16(sp)
  80288c:	dec00504 	addi	sp,sp,20
  802890:	f800283a 	ret
  802894:	58800117 	ldw	r2,4(r11)
  802898:	18bff11e 	bne	r3,r2,802860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
  80289c:	0007883a 	mov	r3,zero
  8028a0:	51800215 	stw	r6,8(r10)
  8028a4:	003fe906 	br	80284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  8028a8:	00bfff84 	movi	r2,-2
  8028ac:	28800426 	beq	r5,r2,8028c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
  8028b0:	0007883a 	mov	r3,zero
  8028b4:	003fe506 	br	80284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
  8028b8:	00800184 	movi	r2,6
  8028bc:	003fe106 	br	802844 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
  8028c0:	00800044 	movi	r2,1
  8028c4:	0007883a 	mov	r3,zero
  8028c8:	50800315 	stw	r2,12(r10)
  8028cc:	003fdf06 	br	80284c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

008028d0 <__cxa_get_globals_fast>:
  8028d0:	d0a7a404 	addi	r2,gp,-24944
  8028d4:	f800283a 	ret

008028d8 <__cxa_get_globals>:
  8028d8:	d0a7a404 	addi	r2,gp,-24944
  8028dc:	f800283a 	ret

008028e0 <_ZSt13set_terminatePFvvE>:
  8028e0:	00c02074 	movhi	r3,129
  8028e4:	18cb5904 	addi	r3,r3,11620
  8028e8:	18800017 	ldw	r2,0(r3)
  8028ec:	19000015 	stw	r4,0(r3)
  8028f0:	f800283a 	ret

008028f4 <_ZSt14set_unexpectedPFvvE>:
  8028f4:	00c02074 	movhi	r3,129
  8028f8:	18cb5a04 	addi	r3,r3,11624
  8028fc:	18800017 	ldw	r2,0(r3)
  802900:	19000015 	stw	r4,0(r3)
  802904:	f800283a 	ret

00802908 <_ZN10__cxxabiv111__terminateEPFvvE>:
  802908:	deffed04 	addi	sp,sp,-76
  80290c:	00802034 	movhi	r2,128
  802910:	10881b04 	addi	r2,r2,8300
  802914:	d8800615 	stw	r2,24(sp)
  802918:	00c02074 	movhi	r3,129
  80291c:	18c26604 	addi	r3,r3,2456
  802920:	00802034 	movhi	r2,128
  802924:	108a5904 	addi	r2,r2,10596
  802928:	d9000d15 	stw	r4,52(sp)
  80292c:	d809883a 	mov	r4,sp
  802930:	d8800915 	stw	r2,36(sp)
  802934:	dfc01215 	stw	ra,72(sp)
  802938:	df001115 	stw	fp,68(sp)
  80293c:	ddc01015 	stw	r23,64(sp)
  802940:	d8c00715 	stw	r3,28(sp)
  802944:	dec00815 	stw	sp,32(sp)
  802948:	dec00a15 	stw	sp,40(sp)
  80294c:	08030540 	call	803054 <_Unwind_SjLj_Register>
  802950:	00800084 	movi	r2,2
  802954:	d8800115 	stw	r2,4(sp)
  802958:	d8800d17 	ldw	r2,52(sp)
  80295c:	103ee83a 	callr	r2
  802960:	080359c0 	call	80359c <abort>
  802964:	d8800117 	ldw	r2,4(sp)
  802968:	d8c00217 	ldw	r3,8(sp)
  80296c:	d8800f15 	stw	r2,60(sp)
  802970:	d8c00e15 	stw	r3,56(sp)
  802974:	d8c00f17 	ldw	r3,60(sp)
  802978:	00800044 	movi	r2,1
  80297c:	18800626 	beq	r3,r2,802998 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
  802980:	d8000115 	stw	zero,4(sp)
  802984:	08017940 	call	801794 <__cxa_end_catch>
  802988:	d9000e17 	ldw	r4,56(sp)
  80298c:	00bfffc4 	movi	r2,-1
  802990:	d8800115 	stw	r2,4(sp)
  802994:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  802998:	d9000e17 	ldw	r4,56(sp)
  80299c:	08018380 	call	801838 <__cxa_begin_catch>
  8029a0:	d8c00f17 	ldw	r3,60(sp)
  8029a4:	d8c00115 	stw	r3,4(sp)
  8029a8:	080359c0 	call	80359c <abort>

008029ac <_ZSt9terminatev>:
  8029ac:	00802074 	movhi	r2,129
  8029b0:	108b5904 	addi	r2,r2,11620
  8029b4:	11000017 	ldw	r4,0(r2)
  8029b8:	deffff04 	addi	sp,sp,-4
  8029bc:	dfc00015 	stw	ra,0(sp)
  8029c0:	08029080 	call	802908 <_ZN10__cxxabiv111__terminateEPFvvE>

008029c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  8029c4:	deffff04 	addi	sp,sp,-4
  8029c8:	dfc00015 	stw	ra,0(sp)
  8029cc:	203ee83a 	callr	r4
  8029d0:	08029ac0 	call	8029ac <_ZSt9terminatev>

008029d4 <_ZSt10unexpectedv>:
  8029d4:	00802074 	movhi	r2,129
  8029d8:	108b5a04 	addi	r2,r2,11624
  8029dc:	11000017 	ldw	r4,0(r2)
  8029e0:	deffff04 	addi	sp,sp,-4
  8029e4:	dfc00015 	stw	ra,0(sp)
  8029e8:	08029c40 	call	8029c4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

008029ec <_Znwm>:
  8029ec:	deffee04 	addi	sp,sp,-72
  8029f0:	00802034 	movhi	r2,128
  8029f4:	10881b04 	addi	r2,r2,8300
  8029f8:	d8800615 	stw	r2,24(sp)
  8029fc:	00c02074 	movhi	r3,129
  802a00:	18c26a04 	addi	r3,r3,2472
  802a04:	00802034 	movhi	r2,128
  802a08:	108ab204 	addi	r2,r2,10952
  802a0c:	d9000e15 	stw	r4,56(sp)
  802a10:	d809883a 	mov	r4,sp
  802a14:	d8800915 	stw	r2,36(sp)
  802a18:	dfc01115 	stw	ra,68(sp)
  802a1c:	df001015 	stw	fp,64(sp)
  802a20:	ddc00f15 	stw	r23,60(sp)
  802a24:	d8c00715 	stw	r3,28(sp)
  802a28:	dec00815 	stw	sp,32(sp)
  802a2c:	dec00a15 	stw	sp,40(sp)
  802a30:	08030540 	call	803054 <_Unwind_SjLj_Register>
  802a34:	d8800e17 	ldw	r2,56(sp)
  802a38:	10000a1e 	bne	r2,zero,802a64 <_Znwm+0x78>
  802a3c:	00800044 	movi	r2,1
  802a40:	d8800e15 	stw	r2,56(sp)
  802a44:	00000706 	br	802a64 <_Znwm+0x78>
  802a48:	00802074 	movhi	r2,129
  802a4c:	1092f504 	addi	r2,r2,19412
  802a50:	10c00017 	ldw	r3,0(r2)
  802a54:	18000f26 	beq	r3,zero,802a94 <_Znwm+0xa8>
  802a58:	00800044 	movi	r2,1
  802a5c:	d8800115 	stw	r2,4(sp)
  802a60:	183ee83a 	callr	r3
  802a64:	d9000e17 	ldw	r4,56(sp)
  802a68:	08035c80 	call	8035c8 <malloc>
  802a6c:	d8800d15 	stw	r2,52(sp)
  802a70:	103ff526 	beq	r2,zero,802a48 <_Znwm+0x5c>
  802a74:	d809883a 	mov	r4,sp
  802a78:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  802a7c:	d8800d17 	ldw	r2,52(sp)
  802a80:	dfc01117 	ldw	ra,68(sp)
  802a84:	df001017 	ldw	fp,64(sp)
  802a88:	ddc00f17 	ldw	r23,60(sp)
  802a8c:	dec01204 	addi	sp,sp,72
  802a90:	f800283a 	ret
  802a94:	01000104 	movi	r4,4
  802a98:	0802cb80 	call	802cb8 <__cxa_allocate_exception>
  802a9c:	1009883a 	mov	r4,r2
  802aa0:	00802074 	movhi	r2,129
  802aa4:	10838604 	addi	r2,r2,3608
  802aa8:	20800015 	stw	r2,0(r4)
  802aac:	00c00044 	movi	r3,1
  802ab0:	d8c00115 	stw	r3,4(sp)
  802ab4:	01402074 	movhi	r5,129
  802ab8:	29438d04 	addi	r5,r5,3636
  802abc:	01802034 	movhi	r6,128
  802ac0:	318b1604 	addi	r6,r6,11352
  802ac4:	08015f80 	call	8015f8 <__cxa_throw>
  802ac8:	d8800317 	ldw	r2,12(sp)
  802acc:	00ffffc4 	movi	r3,-1
  802ad0:	d9000217 	ldw	r4,8(sp)
  802ad4:	10c00226 	beq	r2,r3,802ae0 <_Znwm+0xf4>
  802ad8:	d8c00115 	stw	r3,4(sp)
  802adc:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  802ae0:	00bfffc4 	movi	r2,-1
  802ae4:	d8800115 	stw	r2,4(sp)
  802ae8:	0801eec0 	call	801eec <__cxa_call_unexpected>

00802aec <__cxa_call_terminate>:
  802aec:	defffe04 	addi	sp,sp,-8
  802af0:	dc000015 	stw	r16,0(sp)
  802af4:	dfc00115 	stw	ra,4(sp)
  802af8:	2021883a 	mov	r16,r4
  802afc:	20000626 	beq	r4,zero,802b18 <__cxa_call_terminate+0x2c>
  802b00:	08018380 	call	801838 <__cxa_begin_catch>
  802b04:	80c00017 	ldw	r3,0(r16)
  802b08:	0090caf4 	movhi	r2,17195
  802b0c:	108ac004 	addi	r2,r2,11008
  802b10:	81000117 	ldw	r4,4(r16)
  802b14:	18800126 	beq	r3,r2,802b1c <__cxa_call_terminate+0x30>
  802b18:	08029ac0 	call	8029ac <_ZSt9terminatev>
  802b1c:	0091d3b4 	movhi	r2,18254
  802b20:	109550c4 	addi	r2,r2,21827
  802b24:	20bffc1e 	bne	r4,r2,802b18 <__cxa_call_terminate+0x2c>
  802b28:	813ff817 	ldw	r4,-32(r16)
  802b2c:	08029080 	call	802908 <_ZN10__cxxabiv111__terminateEPFvvE>

00802b30 <_ZNKSt9exception4whatEv>:
  802b30:	20800017 	ldw	r2,0(r4)
  802b34:	10ffff17 	ldw	r3,-4(r2)
  802b38:	18800117 	ldw	r2,4(r3)
  802b3c:	f800283a 	ret

00802b40 <_ZNSt9exceptionD0Ev>:
  802b40:	00802074 	movhi	r2,129
  802b44:	1082d804 	addi	r2,r2,2912
  802b48:	20800015 	stw	r2,0(r4)
  802b4c:	08019501 	jmpi	801950 <_ZdlPv>

00802b50 <_ZNSt9exceptionD1Ev>:
  802b50:	00802074 	movhi	r2,129
  802b54:	1082d804 	addi	r2,r2,2912
  802b58:	20800015 	stw	r2,0(r4)
  802b5c:	f800283a 	ret

00802b60 <_ZNSt9exceptionD2Ev>:
  802b60:	00802074 	movhi	r2,129
  802b64:	1082d804 	addi	r2,r2,2912
  802b68:	20800015 	stw	r2,0(r4)
  802b6c:	f800283a 	ret

00802b70 <_ZNSt13bad_exceptionD0Ev>:
  802b70:	defffe04 	addi	sp,sp,-8
  802b74:	00802074 	movhi	r2,129
  802b78:	1082d304 	addi	r2,r2,2892
  802b7c:	dc400015 	stw	r17,0(sp)
  802b80:	20800015 	stw	r2,0(r4)
  802b84:	2023883a 	mov	r17,r4
  802b88:	dfc00115 	stw	ra,4(sp)
  802b8c:	0802b600 	call	802b60 <_ZNSt9exceptionD2Ev>
  802b90:	8809883a 	mov	r4,r17
  802b94:	dfc00117 	ldw	ra,4(sp)
  802b98:	dc400017 	ldw	r17,0(sp)
  802b9c:	dec00204 	addi	sp,sp,8
  802ba0:	08019501 	jmpi	801950 <_ZdlPv>

00802ba4 <_ZNSt13bad_exceptionD1Ev>:
  802ba4:	00802074 	movhi	r2,129
  802ba8:	1082d304 	addi	r2,r2,2892
  802bac:	20800015 	stw	r2,0(r4)
  802bb0:	0802b601 	jmpi	802b60 <_ZNSt9exceptionD2Ev>

00802bb4 <_ZNSt13bad_exceptionD2Ev>:
  802bb4:	00802074 	movhi	r2,129
  802bb8:	1082d304 	addi	r2,r2,2892
  802bbc:	20800015 	stw	r2,0(r4)
  802bc0:	0802b601 	jmpi	802b60 <_ZNSt9exceptionD2Ev>

00802bc4 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
  802bc4:	defffe04 	addi	sp,sp,-8
  802bc8:	00802074 	movhi	r2,129
  802bcc:	1082e904 	addi	r2,r2,2980
  802bd0:	dc400015 	stw	r17,0(sp)
  802bd4:	20800015 	stw	r2,0(r4)
  802bd8:	2023883a 	mov	r17,r4
  802bdc:	dfc00115 	stw	ra,4(sp)
  802be0:	0802e340 	call	802e34 <_ZNSt9type_infoD2Ev>
  802be4:	8809883a 	mov	r4,r17
  802be8:	dfc00117 	ldw	ra,4(sp)
  802bec:	dc400017 	ldw	r17,0(sp)
  802bf0:	dec00204 	addi	sp,sp,8
  802bf4:	08019501 	jmpi	801950 <_ZdlPv>

00802bf8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
  802bf8:	00802074 	movhi	r2,129
  802bfc:	1082e904 	addi	r2,r2,2980
  802c00:	20800015 	stw	r2,0(r4)
  802c04:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

00802c08 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
  802c08:	00802074 	movhi	r2,129
  802c0c:	1082e904 	addi	r2,r2,2980
  802c10:	20800015 	stw	r2,0(r4)
  802c14:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

00802c18 <_ZSt15set_new_handlerPFvvE>:
  802c18:	d0a7a617 	ldw	r2,-24936(gp)
  802c1c:	d127a615 	stw	r4,-24936(gp)
  802c20:	f800283a 	ret

00802c24 <_ZNSt9bad_allocD0Ev>:
  802c24:	defffe04 	addi	sp,sp,-8
  802c28:	00802074 	movhi	r2,129
  802c2c:	10838604 	addi	r2,r2,3608
  802c30:	dc400015 	stw	r17,0(sp)
  802c34:	20800015 	stw	r2,0(r4)
  802c38:	2023883a 	mov	r17,r4
  802c3c:	dfc00115 	stw	ra,4(sp)
  802c40:	0802b600 	call	802b60 <_ZNSt9exceptionD2Ev>
  802c44:	8809883a 	mov	r4,r17
  802c48:	dfc00117 	ldw	ra,4(sp)
  802c4c:	dc400017 	ldw	r17,0(sp)
  802c50:	dec00204 	addi	sp,sp,8
  802c54:	08019501 	jmpi	801950 <_ZdlPv>

00802c58 <_ZNSt9bad_allocD1Ev>:
  802c58:	00802074 	movhi	r2,129
  802c5c:	10838604 	addi	r2,r2,3608
  802c60:	20800015 	stw	r2,0(r4)
  802c64:	0802b601 	jmpi	802b60 <_ZNSt9exceptionD2Ev>

00802c68 <_ZNSt9bad_allocD2Ev>:
  802c68:	00802074 	movhi	r2,129
  802c6c:	10838604 	addi	r2,r2,3608
  802c70:	20800015 	stw	r2,0(r4)
  802c74:	0802b601 	jmpi	802b60 <_ZNSt9exceptionD2Ev>

00802c78 <__cxa_free_exception>:
  802c78:	2007883a 	mov	r3,r4
  802c7c:	00802074 	movhi	r2,129
  802c80:	10930504 	addi	r2,r2,19476
  802c84:	213ff004 	addi	r4,r4,-64
  802c88:	11420004 	addi	r5,r2,2048
  802c8c:	18800336 	bltu	r3,r2,802c9c <__cxa_free_exception+0x24>
  802c90:	1885c83a 	sub	r2,r3,r2
  802c94:	1004d27a 	srli	r2,r2,9
  802c98:	19400136 	bltu	r3,r5,802ca0 <__cxa_free_exception+0x28>
  802c9c:	08035b41 	jmpi	8035b4 <free>
  802ca0:	00ffff84 	movi	r3,-2
  802ca4:	1886183a 	rol	r3,r3,r2
  802ca8:	d0a7a717 	ldw	r2,-24932(gp)
  802cac:	10c4703a 	and	r2,r2,r3
  802cb0:	d0a7a715 	stw	r2,-24932(gp)
  802cb4:	f800283a 	ret

00802cb8 <__cxa_allocate_exception>:
  802cb8:	deffed04 	addi	sp,sp,-76
  802cbc:	00802034 	movhi	r2,128
  802cc0:	10881b04 	addi	r2,r2,8300
  802cc4:	21001004 	addi	r4,r4,64
  802cc8:	00c02074 	movhi	r3,129
  802ccc:	18c26f04 	addi	r3,r3,2492
  802cd0:	d8800615 	stw	r2,24(sp)
  802cd4:	d9000d15 	stw	r4,52(sp)
  802cd8:	00802034 	movhi	r2,128
  802cdc:	108b7204 	addi	r2,r2,11720
  802ce0:	d809883a 	mov	r4,sp
  802ce4:	dfc01215 	stw	ra,72(sp)
  802ce8:	d8c00715 	stw	r3,28(sp)
  802cec:	d8800915 	stw	r2,36(sp)
  802cf0:	df001115 	stw	fp,68(sp)
  802cf4:	ddc01015 	stw	r23,64(sp)
  802cf8:	dec00815 	stw	sp,32(sp)
  802cfc:	dec00a15 	stw	sp,40(sp)
  802d00:	08030540 	call	803054 <_Unwind_SjLj_Register>
  802d04:	d9000d17 	ldw	r4,52(sp)
  802d08:	08035c80 	call	8035c8 <malloc>
  802d0c:	d8800e15 	stw	r2,56(sp)
  802d10:	1000171e 	bne	r2,zero,802d70 <__cxa_allocate_exception+0xb8>
  802d14:	d8c00d17 	ldw	r3,52(sp)
  802d18:	00808004 	movi	r2,512
  802d1c:	d1e7a717 	ldw	r7,-24932(gp)
  802d20:	10c02636 	bltu	r2,r3,802dbc <__cxa_allocate_exception+0x104>
  802d24:	3807883a 	mov	r3,r7
  802d28:	01400044 	movi	r5,1
  802d2c:	1944703a 	and	r2,r3,r5
  802d30:	0009883a 	mov	r4,zero
  802d34:	01800104 	movi	r6,4
  802d38:	10000526 	beq	r2,zero,802d50 <__cxa_allocate_exception+0x98>
  802d3c:	2149883a 	add	r4,r4,r5
  802d40:	21801e26 	beq	r4,r6,802dbc <__cxa_allocate_exception+0x104>
  802d44:	1806d07a 	srli	r3,r3,1
  802d48:	1944703a 	and	r2,r3,r5
  802d4c:	103ffb1e 	bne	r2,zero,802d3c <__cxa_allocate_exception+0x84>
  802d50:	2904983a 	sll	r2,r5,r4
  802d54:	2008927a 	slli	r4,r4,9
  802d58:	00c02074 	movhi	r3,129
  802d5c:	18d30504 	addi	r3,r3,19476
  802d60:	3884b03a 	or	r2,r7,r2
  802d64:	20c9883a 	add	r4,r4,r3
  802d68:	d9000e15 	stw	r4,56(sp)
  802d6c:	d0a7a715 	stw	r2,-24932(gp)
  802d70:	08028d80 	call	8028d8 <__cxa_get_globals>
  802d74:	10c00117 	ldw	r3,4(r2)
  802d78:	d9000e17 	ldw	r4,56(sp)
  802d7c:	000b883a 	mov	r5,zero
  802d80:	18c00044 	addi	r3,r3,1
  802d84:	10c00115 	stw	r3,4(r2)
  802d88:	01801004 	movi	r6,64
  802d8c:	0803d1c0 	call	803d1c <memset>
  802d90:	d8800e17 	ldw	r2,56(sp)
  802d94:	d809883a 	mov	r4,sp
  802d98:	10801004 	addi	r2,r2,64
  802d9c:	d8800f15 	stw	r2,60(sp)
  802da0:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  802da4:	d8800f17 	ldw	r2,60(sp)
  802da8:	dfc01217 	ldw	ra,72(sp)
  802dac:	df001117 	ldw	fp,68(sp)
  802db0:	ddc01017 	ldw	r23,64(sp)
  802db4:	dec01304 	addi	sp,sp,76
  802db8:	f800283a 	ret
  802dbc:	00800044 	movi	r2,1
  802dc0:	d8800115 	stw	r2,4(sp)
  802dc4:	08029ac0 	call	8029ac <_ZSt9terminatev>
  802dc8:	d8800317 	ldw	r2,12(sp)
  802dcc:	00ffffc4 	movi	r3,-1
  802dd0:	d9000217 	ldw	r4,8(sp)
  802dd4:	10c00226 	beq	r2,r3,802de0 <__cxa_allocate_exception+0x128>
  802dd8:	d8c00115 	stw	r3,4(sp)
  802ddc:	08033200 	call	803320 <_Unwind_SjLj_Resume>
  802de0:	00bfffc4 	movi	r2,-1
  802de4:	d8800115 	stw	r2,4(sp)
  802de8:	0801eec0 	call	801eec <__cxa_call_unexpected>

00802dec <_ZNKSt9type_info14__is_pointer_pEv>:
  802dec:	0005883a 	mov	r2,zero
  802df0:	f800283a 	ret

00802df4 <_ZNKSt9type_info15__is_function_pEv>:
  802df4:	0005883a 	mov	r2,zero
  802df8:	f800283a 	ret

00802dfc <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
  802dfc:	20c00117 	ldw	r3,4(r4)
  802e00:	28800117 	ldw	r2,4(r5)
  802e04:	1885003a 	cmpeq	r2,r3,r2
  802e08:	f800283a 	ret

00802e0c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
  802e0c:	0005883a 	mov	r2,zero
  802e10:	f800283a 	ret

00802e14 <_ZNSt9type_infoD0Ev>:
  802e14:	00802074 	movhi	r2,129
  802e18:	10839204 	addi	r2,r2,3656
  802e1c:	20800015 	stw	r2,0(r4)
  802e20:	08019501 	jmpi	801950 <_ZdlPv>

00802e24 <_ZNSt9type_infoD1Ev>:
  802e24:	00802074 	movhi	r2,129
  802e28:	10839204 	addi	r2,r2,3656
  802e2c:	20800015 	stw	r2,0(r4)
  802e30:	f800283a 	ret

00802e34 <_ZNSt9type_infoD2Ev>:
  802e34:	00802074 	movhi	r2,129
  802e38:	10839204 	addi	r2,r2,3656
  802e3c:	20800015 	stw	r2,0(r4)
  802e40:	f800283a 	ret

00802e44 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
  802e44:	00800044 	movi	r2,1
  802e48:	f800283a 	ret

00802e4c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
  802e4c:	deffff04 	addi	sp,sp,-4
  802e50:	3807883a 	mov	r3,r7
  802e54:	2005883a 	mov	r2,r4
  802e58:	01000044 	movi	r4,1
  802e5c:	dfc00015 	stw	ra,0(sp)
  802e60:	39c00084 	addi	r7,r7,2
  802e64:	20c00a2e 	bgeu	r4,r3,802e90 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>
  802e68:	12000317 	ldw	r8,12(r2)
  802e6c:	40800017 	ldw	r2,0(r8)
  802e70:	29400317 	ldw	r5,12(r5)
  802e74:	4009883a 	mov	r4,r8
  802e78:	10c00417 	ldw	r3,16(r2)
  802e7c:	183ee83a 	callr	r3
  802e80:	10803fcc 	andi	r2,r2,255
  802e84:	dfc00017 	ldw	ra,0(sp)
  802e88:	dec00104 	addi	sp,sp,4
  802e8c:	f800283a 	ret
  802e90:	12000317 	ldw	r8,12(r2)
  802e94:	00802074 	movhi	r2,129
  802e98:	108b7d04 	addi	r2,r2,11764
  802e9c:	11000117 	ldw	r4,4(r2)
  802ea0:	40c00117 	ldw	r3,4(r8)
  802ea4:	193ff11e 	bne	r3,r4,802e6c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
  802ea8:	29000317 	ldw	r4,12(r5)
  802eac:	20800017 	ldw	r2,0(r4)
  802eb0:	10c00317 	ldw	r3,12(r2)
  802eb4:	183ee83a 	callr	r3
  802eb8:	1080005c 	xori	r2,r2,1
  802ebc:	10803fcc 	andi	r2,r2,255
  802ec0:	dfc00017 	ldw	ra,0(sp)
  802ec4:	dec00104 	addi	sp,sp,4
  802ec8:	f800283a 	ret

00802ecc <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
  802ecc:	defffe04 	addi	sp,sp,-8
  802ed0:	00802074 	movhi	r2,129
  802ed4:	10839e04 	addi	r2,r2,3704
  802ed8:	dc400015 	stw	r17,0(sp)
  802edc:	20800015 	stw	r2,0(r4)
  802ee0:	2023883a 	mov	r17,r4
  802ee4:	dfc00115 	stw	ra,4(sp)
  802ee8:	08030140 	call	803014 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
  802eec:	8809883a 	mov	r4,r17
  802ef0:	dfc00117 	ldw	ra,4(sp)
  802ef4:	dc400017 	ldw	r17,0(sp)
  802ef8:	dec00204 	addi	sp,sp,8
  802efc:	08019501 	jmpi	801950 <_ZdlPv>

00802f00 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
  802f00:	00802074 	movhi	r2,129
  802f04:	10839e04 	addi	r2,r2,3704
  802f08:	20800015 	stw	r2,0(r4)
  802f0c:	08030141 	jmpi	803014 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00802f10 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
  802f10:	00802074 	movhi	r2,129
  802f14:	10839e04 	addi	r2,r2,3704
  802f18:	20800015 	stw	r2,0(r4)
  802f1c:	08030141 	jmpi	803014 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>

00802f20 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
  802f20:	20c00117 	ldw	r3,4(r4)
  802f24:	28800117 	ldw	r2,4(r5)
  802f28:	deffff04 	addi	sp,sp,-4
  802f2c:	dfc00015 	stw	ra,0(sp)
  802f30:	02000044 	movi	r8,1
  802f34:	3819883a 	mov	r12,r7
  802f38:	18801526 	beq	r3,r2,802f90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
  802f3c:	28800017 	ldw	r2,0(r5)
  802f40:	23400017 	ldw	r13,0(r4)
  802f44:	39c0004c 	andi	r7,r7,1
  802f48:	127fff17 	ldw	r9,-4(r2)
  802f4c:	68ffff17 	ldw	r3,-4(r13)
  802f50:	380f003a 	cmpeq	r7,r7,zero
  802f54:	48800117 	ldw	r2,4(r9)
  802f58:	1a000117 	ldw	r8,4(r3)
  802f5c:	4080101e 	bne	r8,r2,802fa0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  802f60:	38000f1e 	bne	r7,zero,802fa0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  802f64:	21c00217 	ldw	r7,8(r4)
  802f68:	28c00217 	ldw	r3,8(r5)
  802f6c:	01c4303a 	nor	r2,zero,r7
  802f70:	10c4703a 	and	r2,r2,r3
  802f74:	39c0004c 	andi	r7,r7,1
  802f78:	1000091e 	bne	r2,zero,802fa0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
  802f7c:	38000d26 	beq	r7,zero,802fb4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
  802f80:	68c00617 	ldw	r3,24(r13)
  802f84:	600f883a 	mov	r7,r12
  802f88:	183ee83a 	callr	r3
  802f8c:	12003fcc 	andi	r8,r2,255
  802f90:	4005883a 	mov	r2,r8
  802f94:	dfc00017 	ldw	ra,0(sp)
  802f98:	dec00104 	addi	sp,sp,4
  802f9c:	f800283a 	ret
  802fa0:	0011883a 	mov	r8,zero
  802fa4:	4005883a 	mov	r2,r8
  802fa8:	dfc00017 	ldw	ra,0(sp)
  802fac:	dec00104 	addi	sp,sp,4
  802fb0:	f800283a 	ret
  802fb4:	00bfff84 	movi	r2,-2
  802fb8:	68c00617 	ldw	r3,24(r13)
  802fbc:	6098703a 	and	r12,r12,r2
  802fc0:	600f883a 	mov	r7,r12
  802fc4:	183ee83a 	callr	r3
  802fc8:	12003fcc 	andi	r8,r2,255
  802fcc:	003ff006 	br	802f90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x70>

00802fd0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
  802fd0:	defffe04 	addi	sp,sp,-8
  802fd4:	00802074 	movhi	r2,129
  802fd8:	1083b304 	addi	r2,r2,3788
  802fdc:	dc400015 	stw	r17,0(sp)
  802fe0:	20800015 	stw	r2,0(r4)
  802fe4:	2023883a 	mov	r17,r4
  802fe8:	dfc00115 	stw	ra,4(sp)
  802fec:	0802e340 	call	802e34 <_ZNSt9type_infoD2Ev>
  802ff0:	8809883a 	mov	r4,r17
  802ff4:	dfc00117 	ldw	ra,4(sp)
  802ff8:	dc400017 	ldw	r17,0(sp)
  802ffc:	dec00204 	addi	sp,sp,8
  803000:	08019501 	jmpi	801950 <_ZdlPv>

00803004 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
  803004:	00802074 	movhi	r2,129
  803008:	1083b304 	addi	r2,r2,3788
  80300c:	20800015 	stw	r2,0(r4)
  803010:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

00803014 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
  803014:	00802074 	movhi	r2,129
  803018:	1083b304 	addi	r2,r2,3788
  80301c:	20800015 	stw	r2,0(r4)
  803020:	0802e341 	jmpi	802e34 <_ZNSt9type_infoD2Ev>

00803024 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
  803024:	21000317 	ldw	r4,12(r4)
  803028:	29400317 	ldw	r5,12(r5)
  80302c:	deffff04 	addi	sp,sp,-4
  803030:	20800017 	ldw	r2,0(r4)
  803034:	dfc00015 	stw	ra,0(sp)
  803038:	39c00084 	addi	r7,r7,2
  80303c:	10c00417 	ldw	r3,16(r2)
  803040:	183ee83a 	callr	r3
  803044:	10803fcc 	andi	r2,r2,255
  803048:	dfc00017 	ldw	ra,0(sp)
  80304c:	dec00104 	addi	sp,sp,4
  803050:	f800283a 	ret

00803054 <_Unwind_SjLj_Register>:
  803054:	d0a7a817 	ldw	r2,-24928(gp)
  803058:	20800015 	stw	r2,0(r4)
  80305c:	d127a815 	stw	r4,-24928(gp)
  803060:	f800283a 	ret

00803064 <_Unwind_SjLj_Unregister>:
  803064:	20800017 	ldw	r2,0(r4)
  803068:	d0a7a815 	stw	r2,-24928(gp)
  80306c:	f800283a 	ret

00803070 <_Unwind_GetGR>:
  803070:	20800017 	ldw	r2,0(r4)
  803074:	294b883a 	add	r5,r5,r5
  803078:	294b883a 	add	r5,r5,r5
  80307c:	288b883a 	add	r5,r5,r2
  803080:	28800217 	ldw	r2,8(r5)
  803084:	f800283a 	ret

00803088 <_Unwind_GetCFA>:
  803088:	21000017 	ldw	r4,0(r4)
  80308c:	0005883a 	mov	r2,zero
  803090:	20000126 	beq	r4,zero,803098 <_Unwind_GetCFA+0x10>
  803094:	20800a17 	ldw	r2,40(r4)
  803098:	f800283a 	ret

0080309c <_Unwind_SetGR>:
  80309c:	20800017 	ldw	r2,0(r4)
  8030a0:	294b883a 	add	r5,r5,r5
  8030a4:	294b883a 	add	r5,r5,r5
  8030a8:	288b883a 	add	r5,r5,r2
  8030ac:	29800215 	stw	r6,8(r5)
  8030b0:	f800283a 	ret

008030b4 <_Unwind_GetIP>:
  8030b4:	20c00017 	ldw	r3,0(r4)
  8030b8:	18800117 	ldw	r2,4(r3)
  8030bc:	10800044 	addi	r2,r2,1
  8030c0:	f800283a 	ret

008030c4 <_Unwind_GetIPInfo>:
  8030c4:	20c00017 	ldw	r3,0(r4)
  8030c8:	28000015 	stw	zero,0(r5)
  8030cc:	18800117 	ldw	r2,4(r3)
  8030d0:	10800044 	addi	r2,r2,1
  8030d4:	f800283a 	ret

008030d8 <_Unwind_SetIP>:
  8030d8:	20800017 	ldw	r2,0(r4)
  8030dc:	297fffc4 	addi	r5,r5,-1
  8030e0:	11400115 	stw	r5,4(r2)
  8030e4:	f800283a 	ret

008030e8 <_Unwind_GetLanguageSpecificData>:
  8030e8:	20c00017 	ldw	r3,0(r4)
  8030ec:	18800717 	ldw	r2,28(r3)
  8030f0:	f800283a 	ret

008030f4 <_Unwind_GetRegionStart>:
  8030f4:	0005883a 	mov	r2,zero
  8030f8:	f800283a 	ret

008030fc <_Unwind_FindEnclosingFunction>:
  8030fc:	0005883a 	mov	r2,zero
  803100:	f800283a 	ret

00803104 <_Unwind_GetDataRelBase>:
  803104:	0005883a 	mov	r2,zero
  803108:	f800283a 	ret

0080310c <_Unwind_GetTextRelBase>:
  80310c:	0005883a 	mov	r2,zero
  803110:	f800283a 	ret

00803114 <_Unwind_ForcedUnwind_Phase2>:
  803114:	defff604 	addi	sp,sp,-40
  803118:	dd400815 	stw	r21,32(sp)
  80311c:	dd000715 	stw	r20,28(sp)
  803120:	25400317 	ldw	r21,12(r4)
  803124:	25000417 	ldw	r20,16(r4)
  803128:	28800017 	ldw	r2,0(r5)
  80312c:	dc800515 	stw	r18,20(sp)
  803130:	dc000315 	stw	r16,12(sp)
  803134:	2825883a 	mov	r18,r5
  803138:	2021883a 	mov	r16,r4
  80313c:	dfc00915 	stw	ra,36(sp)
  803140:	dcc00615 	stw	r19,24(sp)
  803144:	dc400415 	stw	r17,16(sp)
  803148:	00001406 	br	80319c <_Unwind_ForcedUnwind_Phase2+0x88>
  80314c:	00800144 	movi	r2,5
  803150:	88802626 	beq	r17,r2,8031ec <_Unwind_ForcedUnwind_Phase2+0xd8>
  803154:	98000c26 	beq	r19,zero,803188 <_Unwind_ForcedUnwind_Phase2+0x74>
  803158:	82000017 	ldw	r8,0(r16)
  80315c:	dc000015 	stw	r16,0(sp)
  803160:	dc800115 	stw	r18,4(sp)
  803164:	82400117 	ldw	r9,4(r16)
  803168:	400d883a 	mov	r6,r8
  80316c:	480f883a 	mov	r7,r9
  803170:	983ee83a 	callr	r19
  803174:	1023883a 	mov	r17,r2
  803178:	008001c4 	movi	r2,7
  80317c:	88801b26 	beq	r17,r2,8031ec <_Unwind_ForcedUnwind_Phase2+0xd8>
  803180:	00800204 	movi	r2,8
  803184:	8880181e 	bne	r17,r2,8031e8 <_Unwind_ForcedUnwind_Phase2+0xd4>
  803188:	91000017 	ldw	r4,0(r18)
  80318c:	08030640 	call	803064 <_Unwind_SjLj_Unregister>
  803190:	90800017 	ldw	r2,0(r18)
  803194:	10800017 	ldw	r2,0(r2)
  803198:	90800015 	stw	r2,0(r18)
  80319c:	01400684 	movi	r5,26
  8031a0:	04400144 	movi	r17,5
  8031a4:	0027883a 	mov	r19,zero
  8031a8:	10000326 	beq	r2,zero,8031b8 <_Unwind_ForcedUnwind_Phase2+0xa4>
  8031ac:	14c00617 	ldw	r19,24(r2)
  8031b0:	0023883a 	mov	r17,zero
  8031b4:	01400284 	movi	r5,10
  8031b8:	dc000015 	stw	r16,0(sp)
  8031bc:	dc800115 	stw	r18,4(sp)
  8031c0:	80800017 	ldw	r2,0(r16)
  8031c4:	dd000215 	stw	r20,8(sp)
  8031c8:	80c00117 	ldw	r3,4(r16)
  8031cc:	01000044 	movi	r4,1
  8031d0:	100d883a 	mov	r6,r2
  8031d4:	180f883a 	mov	r7,r3
  8031d8:	a83ee83a 	callr	r21
  8031dc:	01400284 	movi	r5,10
  8031e0:	01000044 	movi	r4,1
  8031e4:	103fd926 	beq	r2,zero,80314c <_Unwind_ForcedUnwind_Phase2+0x38>
  8031e8:	04400084 	movi	r17,2
  8031ec:	8805883a 	mov	r2,r17
  8031f0:	dfc00917 	ldw	ra,36(sp)
  8031f4:	dd400817 	ldw	r21,32(sp)
  8031f8:	dd000717 	ldw	r20,28(sp)
  8031fc:	dcc00617 	ldw	r19,24(sp)
  803200:	dc800517 	ldw	r18,20(sp)
  803204:	dc400417 	ldw	r17,16(sp)
  803208:	dc000317 	ldw	r16,12(sp)
  80320c:	dec00a04 	addi	sp,sp,40
  803210:	f800283a 	ret

00803214 <_Unwind_DeleteException>:
  803214:	20800217 	ldw	r2,8(r4)
  803218:	200b883a 	mov	r5,r4
  80321c:	01000044 	movi	r4,1
  803220:	10000126 	beq	r2,zero,803228 <_Unwind_DeleteException+0x14>
  803224:	1000683a 	jmp	r2
  803228:	f800283a 	ret

0080322c <_Unwind_RaiseException_Phase2>:
  80322c:	defffa04 	addi	sp,sp,-24
  803230:	dc800415 	stw	r18,16(sp)
  803234:	2825883a 	mov	r18,r5
  803238:	29400017 	ldw	r5,0(r5)
  80323c:	dc400315 	stw	r17,12(sp)
  803240:	dfc00515 	stw	ra,20(sp)
  803244:	dc000215 	stw	r16,8(sp)
  803248:	2023883a 	mov	r17,r4
  80324c:	28001b26 	beq	r5,zero,8032bc <_Unwind_RaiseException_Phase2+0x90>
  803250:	88800417 	ldw	r2,16(r17)
  803254:	0007883a 	mov	r3,zero
  803258:	2a000617 	ldw	r8,24(r5)
  80325c:	28a1003a 	cmpeq	r16,r5,r2
  803260:	802090ba 	slli	r16,r16,2
  803264:	18001b1e 	bne	r3,zero,8032d4 <_Unwind_RaiseException_Phase2+0xa8>
  803268:	40000e26 	beq	r8,zero,8032a4 <_Unwind_RaiseException_Phase2+0x78>
  80326c:	88800017 	ldw	r2,0(r17)
  803270:	dc400015 	stw	r17,0(sp)
  803274:	dc800115 	stw	r18,4(sp)
  803278:	88c00117 	ldw	r3,4(r17)
  80327c:	01000044 	movi	r4,1
  803280:	81400094 	ori	r5,r16,2
  803284:	180f883a 	mov	r7,r3
  803288:	100d883a 	mov	r6,r2
  80328c:	403ee83a 	callr	r8
  803290:	1007883a 	mov	r3,r2
  803294:	008001c4 	movi	r2,7
  803298:	18800f26 	beq	r3,r2,8032d8 <_Unwind_RaiseException_Phase2+0xac>
  80329c:	00800204 	movi	r2,8
  8032a0:	18800c1e 	bne	r3,r2,8032d4 <_Unwind_RaiseException_Phase2+0xa8>
  8032a4:	8000131e 	bne	r16,zero,8032f4 <_Unwind_RaiseException_Phase2+0xc8>
  8032a8:	91400017 	ldw	r5,0(r18)
  8032ac:	28800017 	ldw	r2,0(r5)
  8032b0:	100b883a 	mov	r5,r2
  8032b4:	90800015 	stw	r2,0(r18)
  8032b8:	283fe51e 	bne	r5,zero,803250 <_Unwind_RaiseException_Phase2+0x24>
  8032bc:	88800417 	ldw	r2,16(r17)
  8032c0:	00c00144 	movi	r3,5
  8032c4:	0011883a 	mov	r8,zero
  8032c8:	28a1003a 	cmpeq	r16,r5,r2
  8032cc:	802090ba 	slli	r16,r16,2
  8032d0:	183fe526 	beq	r3,zero,803268 <_Unwind_RaiseException_Phase2+0x3c>
  8032d4:	00c00084 	movi	r3,2
  8032d8:	1805883a 	mov	r2,r3
  8032dc:	dfc00517 	ldw	ra,20(sp)
  8032e0:	dc800417 	ldw	r18,16(sp)
  8032e4:	dc400317 	ldw	r17,12(sp)
  8032e8:	dc000217 	ldw	r16,8(sp)
  8032ec:	dec00604 	addi	sp,sp,24
  8032f0:	f800283a 	ret
  8032f4:	080359c0 	call	80359c <abort>

008032f8 <uw_install_context>:
  8032f8:	28800017 	ldw	r2,0(r5)
  8032fc:	deffff04 	addi	sp,sp,-4
  803300:	df000015 	stw	fp,0(sp)
  803304:	10c00804 	addi	r3,r2,32
  803308:	d839883a 	mov	fp,sp
  80330c:	d0a7a815 	stw	r2,-24928(gp)
  803310:	19000117 	ldw	r4,4(r3)
  803314:	1f000017 	ldw	fp,0(r3)
  803318:	1ec00217 	ldw	sp,8(r3)
  80331c:	2000683a 	jmp	r4

00803320 <_Unwind_SjLj_Resume>:
  803320:	d0e7a817 	ldw	r3,-24928(gp)
  803324:	20800317 	ldw	r2,12(r4)
  803328:	defffc04 	addi	sp,sp,-16
  80332c:	dfc00315 	stw	ra,12(sp)
  803330:	dc000215 	stw	r16,8(sp)
  803334:	d8c00015 	stw	r3,0(sp)
  803338:	d8c00115 	stw	r3,4(sp)
  80333c:	1000071e 	bne	r2,zero,80335c <_Unwind_SjLj_Resume+0x3c>
  803340:	dc000104 	addi	r16,sp,4
  803344:	800b883a 	mov	r5,r16
  803348:	080322c0 	call	80322c <_Unwind_RaiseException_Phase2>
  80334c:	1007883a 	mov	r3,r2
  803350:	008001c4 	movi	r2,7
  803354:	18800626 	beq	r3,r2,803370 <_Unwind_SjLj_Resume+0x50>
  803358:	080359c0 	call	80359c <abort>
  80335c:	dc000104 	addi	r16,sp,4
  803360:	800b883a 	mov	r5,r16
  803364:	08031140 	call	803114 <_Unwind_ForcedUnwind_Phase2>
  803368:	1007883a 	mov	r3,r2
  80336c:	003ff806 	br	803350 <_Unwind_SjLj_Resume+0x30>
  803370:	800b883a 	mov	r5,r16
  803374:	d809883a 	mov	r4,sp
  803378:	08032f80 	call	8032f8 <uw_install_context>

0080337c <_Unwind_SjLj_RaiseException>:
  80337c:	d0a7a817 	ldw	r2,-24928(gp)
  803380:	defff804 	addi	sp,sp,-32
  803384:	dc000415 	stw	r16,16(sp)
  803388:	dfc00715 	stw	ra,28(sp)
  80338c:	dc800615 	stw	r18,24(sp)
  803390:	dc400515 	stw	r17,20(sp)
  803394:	2021883a 	mov	r16,r4
  803398:	d8800215 	stw	r2,8(sp)
  80339c:	d8800315 	stw	r2,12(sp)
  8033a0:	10001626 	beq	r2,zero,8033fc <_Unwind_SjLj_RaiseException+0x80>
  8033a4:	dc400304 	addi	r17,sp,12
  8033a8:	04800184 	movi	r18,6
  8033ac:	00000106 	br	8033b4 <_Unwind_SjLj_RaiseException+0x38>
  8033b0:	d8800315 	stw	r2,12(sp)
  8033b4:	12000617 	ldw	r8,24(r2)
  8033b8:	40000d26 	beq	r8,zero,8033f0 <_Unwind_SjLj_RaiseException+0x74>
  8033bc:	80800017 	ldw	r2,0(r16)
  8033c0:	dc000015 	stw	r16,0(sp)
  8033c4:	80c00117 	ldw	r3,4(r16)
  8033c8:	01000044 	movi	r4,1
  8033cc:	dc400115 	stw	r17,4(sp)
  8033d0:	180f883a 	mov	r7,r3
  8033d4:	200b883a 	mov	r5,r4
  8033d8:	100d883a 	mov	r6,r2
  8033dc:	403ee83a 	callr	r8
  8033e0:	1007883a 	mov	r3,r2
  8033e4:	14800d26 	beq	r2,r18,80341c <_Unwind_SjLj_RaiseException+0xa0>
  8033e8:	00800204 	movi	r2,8
  8033ec:	1880191e 	bne	r3,r2,803454 <_Unwind_SjLj_RaiseException+0xd8>
  8033f0:	d8800317 	ldw	r2,12(sp)
  8033f4:	10800017 	ldw	r2,0(r2)
  8033f8:	103fed1e 	bne	r2,zero,8033b0 <_Unwind_SjLj_RaiseException+0x34>
  8033fc:	00c00144 	movi	r3,5
  803400:	1805883a 	mov	r2,r3
  803404:	dfc00717 	ldw	ra,28(sp)
  803408:	dc800617 	ldw	r18,24(sp)
  80340c:	dc400517 	ldw	r17,20(sp)
  803410:	dc000417 	ldw	r16,16(sp)
  803414:	dec00804 	addi	sp,sp,32
  803418:	f800283a 	ret
  80341c:	d8800317 	ldw	r2,12(sp)
  803420:	80000315 	stw	zero,12(r16)
  803424:	8009883a 	mov	r4,r16
  803428:	80800415 	stw	r2,16(r16)
  80342c:	d8800217 	ldw	r2,8(sp)
  803430:	880b883a 	mov	r5,r17
  803434:	d8800315 	stw	r2,12(sp)
  803438:	080322c0 	call	80322c <_Unwind_RaiseException_Phase2>
  80343c:	1007883a 	mov	r3,r2
  803440:	008001c4 	movi	r2,7
  803444:	18bfee1e 	bne	r3,r2,803400 <_Unwind_SjLj_RaiseException+0x84>
  803448:	880b883a 	mov	r5,r17
  80344c:	d9000204 	addi	r4,sp,8
  803450:	08032f80 	call	8032f8 <uw_install_context>
  803454:	00c000c4 	movi	r3,3
  803458:	1805883a 	mov	r2,r3
  80345c:	dfc00717 	ldw	ra,28(sp)
  803460:	dc800617 	ldw	r18,24(sp)
  803464:	dc400517 	ldw	r17,20(sp)
  803468:	dc000417 	ldw	r16,16(sp)
  80346c:	dec00804 	addi	sp,sp,32
  803470:	f800283a 	ret

00803474 <_Unwind_SjLj_ForcedUnwind>:
  803474:	defffc04 	addi	sp,sp,-16
  803478:	d0a7a817 	ldw	r2,-24928(gp)
  80347c:	dc000215 	stw	r16,8(sp)
  803480:	dc000104 	addi	r16,sp,4
  803484:	21400315 	stw	r5,12(r4)
  803488:	21800415 	stw	r6,16(r4)
  80348c:	800b883a 	mov	r5,r16
  803490:	dfc00315 	stw	ra,12(sp)
  803494:	d8800015 	stw	r2,0(sp)
  803498:	d8800115 	stw	r2,4(sp)
  80349c:	08031140 	call	803114 <_Unwind_ForcedUnwind_Phase2>
  8034a0:	00c001c4 	movi	r3,7
  8034a4:	10c00426 	beq	r2,r3,8034b8 <_Unwind_SjLj_ForcedUnwind+0x44>
  8034a8:	dfc00317 	ldw	ra,12(sp)
  8034ac:	dc000217 	ldw	r16,8(sp)
  8034b0:	dec00404 	addi	sp,sp,16
  8034b4:	f800283a 	ret
  8034b8:	800b883a 	mov	r5,r16
  8034bc:	d809883a 	mov	r4,sp
  8034c0:	08032f80 	call	8032f8 <uw_install_context>

008034c4 <_Unwind_Backtrace>:
  8034c4:	d0a7a817 	ldw	r2,-24928(gp)
  8034c8:	defffa04 	addi	sp,sp,-24
  8034cc:	dcc00415 	stw	r19,16(sp)
  8034d0:	dc800315 	stw	r18,12(sp)
  8034d4:	dc400215 	stw	r17,8(sp)
  8034d8:	2025883a 	mov	r18,r4
  8034dc:	2823883a 	mov	r17,r5
  8034e0:	04c00144 	movi	r19,5
  8034e4:	dfc00515 	stw	ra,20(sp)
  8034e8:	dc000115 	stw	r16,4(sp)
  8034ec:	d8800015 	stw	r2,0(sp)
  8034f0:	00000406 	br	803504 <_Unwind_Backtrace+0x40>
  8034f4:	84c00b26 	beq	r16,r19,803524 <_Unwind_Backtrace+0x60>
  8034f8:	d8800017 	ldw	r2,0(sp)
  8034fc:	10800017 	ldw	r2,0(r2)
  803500:	d8800015 	stw	r2,0(sp)
  803504:	04000144 	movi	r16,5
  803508:	10000126 	beq	r2,zero,803510 <_Unwind_Backtrace+0x4c>
  80350c:	0021883a 	mov	r16,zero
  803510:	d809883a 	mov	r4,sp
  803514:	880b883a 	mov	r5,r17
  803518:	903ee83a 	callr	r18
  80351c:	103ff526 	beq	r2,zero,8034f4 <_Unwind_Backtrace+0x30>
  803520:	040000c4 	movi	r16,3
  803524:	8005883a 	mov	r2,r16
  803528:	dfc00517 	ldw	ra,20(sp)
  80352c:	dcc00417 	ldw	r19,16(sp)
  803530:	dc800317 	ldw	r18,12(sp)
  803534:	dc400217 	ldw	r17,8(sp)
  803538:	dc000117 	ldw	r16,4(sp)
  80353c:	dec00604 	addi	sp,sp,24
  803540:	f800283a 	ret

00803544 <_Unwind_SjLj_Resume_or_Rethrow>:
  803544:	20800317 	ldw	r2,12(r4)
  803548:	defffc04 	addi	sp,sp,-16
  80354c:	dfc00315 	stw	ra,12(sp)
  803550:	dc000215 	stw	r16,8(sp)
  803554:	10000926 	beq	r2,zero,80357c <_Unwind_SjLj_Resume_or_Rethrow+0x38>
  803558:	d0a7a817 	ldw	r2,-24928(gp)
  80355c:	dc000104 	addi	r16,sp,4
  803560:	800b883a 	mov	r5,r16
  803564:	d8800015 	stw	r2,0(sp)
  803568:	d8800115 	stw	r2,4(sp)
  80356c:	08031140 	call	803114 <_Unwind_ForcedUnwind_Phase2>
  803570:	00c001c4 	movi	r3,7
  803574:	10c00626 	beq	r2,r3,803590 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
  803578:	080359c0 	call	80359c <abort>
  80357c:	080337c0 	call	80337c <_Unwind_SjLj_RaiseException>
  803580:	dfc00317 	ldw	ra,12(sp)
  803584:	dc000217 	ldw	r16,8(sp)
  803588:	dec00404 	addi	sp,sp,16
  80358c:	f800283a 	ret
  803590:	800b883a 	mov	r5,r16
  803594:	d809883a 	mov	r4,sp
  803598:	08032f80 	call	8032f8 <uw_install_context>

0080359c <abort>:
  80359c:	deffff04 	addi	sp,sp,-4
  8035a0:	01000184 	movi	r4,6
  8035a4:	dfc00015 	stw	ra,0(sp)
  8035a8:	0803ef00 	call	803ef0 <raise>
  8035ac:	01000044 	movi	r4,1
  8035b0:	080d2000 	call	80d200 <_exit>

008035b4 <free>:
  8035b4:	00802074 	movhi	r2,129
  8035b8:	108bb704 	addi	r2,r2,11996
  8035bc:	200b883a 	mov	r5,r4
  8035c0:	11000017 	ldw	r4,0(r2)
  8035c4:	08044081 	jmpi	804408 <_free_r>

008035c8 <malloc>:
  8035c8:	00802074 	movhi	r2,129
  8035cc:	108bb704 	addi	r2,r2,11996
  8035d0:	200b883a 	mov	r5,r4
  8035d4:	11000017 	ldw	r4,0(r2)
  8035d8:	08035dc1 	jmpi	8035dc <_malloc_r>

008035dc <_malloc_r>:
  8035dc:	defff604 	addi	sp,sp,-40
  8035e0:	28c002c4 	addi	r3,r5,11
  8035e4:	00800584 	movi	r2,22
  8035e8:	dc800215 	stw	r18,8(sp)
  8035ec:	dfc00915 	stw	ra,36(sp)
  8035f0:	df000815 	stw	fp,32(sp)
  8035f4:	ddc00715 	stw	r23,28(sp)
  8035f8:	dd800615 	stw	r22,24(sp)
  8035fc:	dd400515 	stw	r21,20(sp)
  803600:	dd000415 	stw	r20,16(sp)
  803604:	dcc00315 	stw	r19,12(sp)
  803608:	dc400115 	stw	r17,4(sp)
  80360c:	dc000015 	stw	r16,0(sp)
  803610:	2025883a 	mov	r18,r4
  803614:	10c01236 	bltu	r2,r3,803660 <_malloc_r+0x84>
  803618:	04400404 	movi	r17,16
  80361c:	8940142e 	bgeu	r17,r5,803670 <_malloc_r+0x94>
  803620:	00800304 	movi	r2,12
  803624:	0007883a 	mov	r3,zero
  803628:	90800015 	stw	r2,0(r18)
  80362c:	1805883a 	mov	r2,r3
  803630:	dfc00917 	ldw	ra,36(sp)
  803634:	df000817 	ldw	fp,32(sp)
  803638:	ddc00717 	ldw	r23,28(sp)
  80363c:	dd800617 	ldw	r22,24(sp)
  803640:	dd400517 	ldw	r21,20(sp)
  803644:	dd000417 	ldw	r20,16(sp)
  803648:	dcc00317 	ldw	r19,12(sp)
  80364c:	dc800217 	ldw	r18,8(sp)
  803650:	dc400117 	ldw	r17,4(sp)
  803654:	dc000017 	ldw	r16,0(sp)
  803658:	dec00a04 	addi	sp,sp,40
  80365c:	f800283a 	ret
  803660:	00bffe04 	movi	r2,-8
  803664:	18a2703a 	and	r17,r3,r2
  803668:	883fed16 	blt	r17,zero,803620 <_malloc_r+0x44>
  80366c:	897fec36 	bltu	r17,r5,803620 <_malloc_r+0x44>
  803670:	9009883a 	mov	r4,r18
  803674:	080da9c0 	call	80da9c <__malloc_lock>
  803678:	00807dc4 	movi	r2,503
  80367c:	14402b2e 	bgeu	r2,r17,80372c <_malloc_r+0x150>
  803680:	8806d27a 	srli	r3,r17,9
  803684:	18003f1e 	bne	r3,zero,803784 <_malloc_r+0x1a8>
  803688:	880cd0fa 	srli	r6,r17,3
  80368c:	300490fa 	slli	r2,r6,3
  803690:	02c02074 	movhi	r11,129
  803694:	5ac49704 	addi	r11,r11,4700
  803698:	12cb883a 	add	r5,r2,r11
  80369c:	2c000317 	ldw	r16,12(r5)
  8036a0:	580f883a 	mov	r7,r11
  8036a4:	2c00041e 	bne	r5,r16,8036b8 <_malloc_r+0xdc>
  8036a8:	00000a06 	br	8036d4 <_malloc_r+0xf8>
  8036ac:	1800860e 	bge	r3,zero,8038c8 <_malloc_r+0x2ec>
  8036b0:	84000317 	ldw	r16,12(r16)
  8036b4:	2c000726 	beq	r5,r16,8036d4 <_malloc_r+0xf8>
  8036b8:	80800117 	ldw	r2,4(r16)
  8036bc:	00ffff04 	movi	r3,-4
  8036c0:	10c8703a 	and	r4,r2,r3
  8036c4:	2447c83a 	sub	r3,r4,r17
  8036c8:	008003c4 	movi	r2,15
  8036cc:	10fff70e 	bge	r2,r3,8036ac <_malloc_r+0xd0>
  8036d0:	31bfffc4 	addi	r6,r6,-1
  8036d4:	32400044 	addi	r9,r6,1
  8036d8:	02802074 	movhi	r10,129
  8036dc:	52849904 	addi	r10,r10,4708
  8036e0:	54000217 	ldw	r16,8(r10)
  8036e4:	8280a026 	beq	r16,r10,803968 <_malloc_r+0x38c>
  8036e8:	80800117 	ldw	r2,4(r16)
  8036ec:	00ffff04 	movi	r3,-4
  8036f0:	10ca703a 	and	r5,r2,r3
  8036f4:	2c4dc83a 	sub	r6,r5,r17
  8036f8:	008003c4 	movi	r2,15
  8036fc:	11808316 	blt	r2,r6,80390c <_malloc_r+0x330>
  803700:	52800315 	stw	r10,12(r10)
  803704:	52800215 	stw	r10,8(r10)
  803708:	30002916 	blt	r6,zero,8037b0 <_malloc_r+0x1d4>
  80370c:	8147883a 	add	r3,r16,r5
  803710:	18800117 	ldw	r2,4(r3)
  803714:	9009883a 	mov	r4,r18
  803718:	10800054 	ori	r2,r2,1
  80371c:	18800115 	stw	r2,4(r3)
  803720:	080dabc0 	call	80dabc <__malloc_unlock>
  803724:	80c00204 	addi	r3,r16,8
  803728:	003fc006 	br	80362c <_malloc_r+0x50>
  80372c:	02c02074 	movhi	r11,129
  803730:	5ac49704 	addi	r11,r11,4700
  803734:	8ac5883a 	add	r2,r17,r11
  803738:	14000317 	ldw	r16,12(r2)
  80373c:	580f883a 	mov	r7,r11
  803740:	8806d0fa 	srli	r3,r17,3
  803744:	14006c26 	beq	r2,r16,8038f8 <_malloc_r+0x31c>
  803748:	80c00117 	ldw	r3,4(r16)
  80374c:	00bfff04 	movi	r2,-4
  803750:	81800317 	ldw	r6,12(r16)
  803754:	1886703a 	and	r3,r3,r2
  803758:	80c7883a 	add	r3,r16,r3
  80375c:	18800117 	ldw	r2,4(r3)
  803760:	81400217 	ldw	r5,8(r16)
  803764:	9009883a 	mov	r4,r18
  803768:	10800054 	ori	r2,r2,1
  80376c:	18800115 	stw	r2,4(r3)
  803770:	31400215 	stw	r5,8(r6)
  803774:	29800315 	stw	r6,12(r5)
  803778:	080dabc0 	call	80dabc <__malloc_unlock>
  80377c:	80c00204 	addi	r3,r16,8
  803780:	003faa06 	br	80362c <_malloc_r+0x50>
  803784:	00800104 	movi	r2,4
  803788:	10c0052e 	bgeu	r2,r3,8037a0 <_malloc_r+0x1c4>
  80378c:	00800504 	movi	r2,20
  803790:	10c07836 	bltu	r2,r3,803974 <_malloc_r+0x398>
  803794:	198016c4 	addi	r6,r3,91
  803798:	300490fa 	slli	r2,r6,3
  80379c:	003fbc06 	br	803690 <_malloc_r+0xb4>
  8037a0:	8804d1ba 	srli	r2,r17,6
  8037a4:	11800e04 	addi	r6,r2,56
  8037a8:	300490fa 	slli	r2,r6,3
  8037ac:	003fb806 	br	803690 <_malloc_r+0xb4>
  8037b0:	00807fc4 	movi	r2,511
  8037b4:	1140bb36 	bltu	r2,r5,803aa4 <_malloc_r+0x4c8>
  8037b8:	2806d0fa 	srli	r3,r5,3
  8037bc:	573ffe04 	addi	fp,r10,-8
  8037c0:	00800044 	movi	r2,1
  8037c4:	180890fa 	slli	r4,r3,3
  8037c8:	1807d0ba 	srai	r3,r3,2
  8037cc:	e1c00117 	ldw	r7,4(fp)
  8037d0:	5909883a 	add	r4,r11,r4
  8037d4:	21400217 	ldw	r5,8(r4)
  8037d8:	10c4983a 	sll	r2,r2,r3
  8037dc:	81000315 	stw	r4,12(r16)
  8037e0:	81400215 	stw	r5,8(r16)
  8037e4:	388eb03a 	or	r7,r7,r2
  8037e8:	2c000315 	stw	r16,12(r5)
  8037ec:	24000215 	stw	r16,8(r4)
  8037f0:	e1c00115 	stw	r7,4(fp)
  8037f4:	4807883a 	mov	r3,r9
  8037f8:	4800cd16 	blt	r9,zero,803b30 <_malloc_r+0x554>
  8037fc:	1807d0ba 	srai	r3,r3,2
  803800:	00800044 	movi	r2,1
  803804:	10c8983a 	sll	r4,r2,r3
  803808:	39004436 	bltu	r7,r4,80391c <_malloc_r+0x340>
  80380c:	21c4703a 	and	r2,r4,r7
  803810:	10000a1e 	bne	r2,zero,80383c <_malloc_r+0x260>
  803814:	2109883a 	add	r4,r4,r4
  803818:	00bfff04 	movi	r2,-4
  80381c:	4884703a 	and	r2,r9,r2
  803820:	3906703a 	and	r3,r7,r4
  803824:	12400104 	addi	r9,r2,4
  803828:	1800041e 	bne	r3,zero,80383c <_malloc_r+0x260>
  80382c:	2109883a 	add	r4,r4,r4
  803830:	3904703a 	and	r2,r7,r4
  803834:	4a400104 	addi	r9,r9,4
  803838:	103ffc26 	beq	r2,zero,80382c <_malloc_r+0x250>
  80383c:	480490fa 	slli	r2,r9,3
  803840:	4819883a 	mov	r12,r9
  803844:	023fff04 	movi	r8,-4
  803848:	589b883a 	add	r13,r11,r2
  80384c:	6807883a 	mov	r3,r13
  803850:	014003c4 	movi	r5,15
  803854:	1c000317 	ldw	r16,12(r3)
  803858:	1c00041e 	bne	r3,r16,80386c <_malloc_r+0x290>
  80385c:	0000a706 	br	803afc <_malloc_r+0x520>
  803860:	3000ab0e 	bge	r6,zero,803b10 <_malloc_r+0x534>
  803864:	84000317 	ldw	r16,12(r16)
  803868:	1c00a426 	beq	r3,r16,803afc <_malloc_r+0x520>
  80386c:	80800117 	ldw	r2,4(r16)
  803870:	1204703a 	and	r2,r2,r8
  803874:	144dc83a 	sub	r6,r2,r17
  803878:	29bff90e 	bge	r5,r6,803860 <_malloc_r+0x284>
  80387c:	81000317 	ldw	r4,12(r16)
  803880:	80c00217 	ldw	r3,8(r16)
  803884:	89400054 	ori	r5,r17,1
  803888:	8445883a 	add	r2,r16,r17
  80388c:	20c00215 	stw	r3,8(r4)
  803890:	19000315 	stw	r4,12(r3)
  803894:	81400115 	stw	r5,4(r16)
  803898:	1187883a 	add	r3,r2,r6
  80389c:	31000054 	ori	r4,r6,1
  8038a0:	50800315 	stw	r2,12(r10)
  8038a4:	50800215 	stw	r2,8(r10)
  8038a8:	19800015 	stw	r6,0(r3)
  8038ac:	11000115 	stw	r4,4(r2)
  8038b0:	12800215 	stw	r10,8(r2)
  8038b4:	12800315 	stw	r10,12(r2)
  8038b8:	9009883a 	mov	r4,r18
  8038bc:	080dabc0 	call	80dabc <__malloc_unlock>
  8038c0:	80c00204 	addi	r3,r16,8
  8038c4:	003f5906 	br	80362c <_malloc_r+0x50>
  8038c8:	8109883a 	add	r4,r16,r4
  8038cc:	20800117 	ldw	r2,4(r4)
  8038d0:	80c00217 	ldw	r3,8(r16)
  8038d4:	81400317 	ldw	r5,12(r16)
  8038d8:	10800054 	ori	r2,r2,1
  8038dc:	20800115 	stw	r2,4(r4)
  8038e0:	28c00215 	stw	r3,8(r5)
  8038e4:	19400315 	stw	r5,12(r3)
  8038e8:	9009883a 	mov	r4,r18
  8038ec:	080dabc0 	call	80dabc <__malloc_unlock>
  8038f0:	80c00204 	addi	r3,r16,8
  8038f4:	003f4d06 	br	80362c <_malloc_r+0x50>
  8038f8:	80800204 	addi	r2,r16,8
  8038fc:	14000317 	ldw	r16,12(r2)
  803900:	143f911e 	bne	r2,r16,803748 <_malloc_r+0x16c>
  803904:	1a400084 	addi	r9,r3,2
  803908:	003f7306 	br	8036d8 <_malloc_r+0xfc>
  80390c:	88c00054 	ori	r3,r17,1
  803910:	8445883a 	add	r2,r16,r17
  803914:	80c00115 	stw	r3,4(r16)
  803918:	003fdf06 	br	803898 <_malloc_r+0x2bc>
  80391c:	e4000217 	ldw	r16,8(fp)
  803920:	00bfff04 	movi	r2,-4
  803924:	80c00117 	ldw	r3,4(r16)
  803928:	802d883a 	mov	r22,r16
  80392c:	18aa703a 	and	r21,r3,r2
  803930:	ac401636 	bltu	r21,r17,80398c <_malloc_r+0x3b0>
  803934:	ac49c83a 	sub	r4,r21,r17
  803938:	008003c4 	movi	r2,15
  80393c:	1100130e 	bge	r2,r4,80398c <_malloc_r+0x3b0>
  803940:	88800054 	ori	r2,r17,1
  803944:	8447883a 	add	r3,r16,r17
  803948:	80800115 	stw	r2,4(r16)
  80394c:	20800054 	ori	r2,r4,1
  803950:	18800115 	stw	r2,4(r3)
  803954:	e0c00215 	stw	r3,8(fp)
  803958:	9009883a 	mov	r4,r18
  80395c:	080dabc0 	call	80dabc <__malloc_unlock>
  803960:	80c00204 	addi	r3,r16,8
  803964:	003f3106 	br	80362c <_malloc_r+0x50>
  803968:	39c00117 	ldw	r7,4(r7)
  80396c:	573ffe04 	addi	fp,r10,-8
  803970:	003fa006 	br	8037f4 <_malloc_r+0x218>
  803974:	00801504 	movi	r2,84
  803978:	10c06736 	bltu	r2,r3,803b18 <_malloc_r+0x53c>
  80397c:	8804d33a 	srli	r2,r17,12
  803980:	11801b84 	addi	r6,r2,110
  803984:	300490fa 	slli	r2,r6,3
  803988:	003f4106 	br	803690 <_malloc_r+0xb4>
  80398c:	d0a7a917 	ldw	r2,-24924(gp)
  803990:	d0e06717 	ldw	r3,-32356(gp)
  803994:	053fffc4 	movi	r20,-1
  803998:	10800404 	addi	r2,r2,16
  80399c:	88a7883a 	add	r19,r17,r2
  8039a0:	1d000326 	beq	r3,r20,8039b0 <_malloc_r+0x3d4>
  8039a4:	98c3ffc4 	addi	r3,r19,4095
  8039a8:	00bc0004 	movi	r2,-4096
  8039ac:	18a6703a 	and	r19,r3,r2
  8039b0:	9009883a 	mov	r4,r18
  8039b4:	980b883a 	mov	r5,r19
  8039b8:	0803db40 	call	803db4 <_sbrk_r>
  8039bc:	1009883a 	mov	r4,r2
  8039c0:	15000426 	beq	r2,r20,8039d4 <_malloc_r+0x3f8>
  8039c4:	854b883a 	add	r5,r16,r21
  8039c8:	1029883a 	mov	r20,r2
  8039cc:	11405a2e 	bgeu	r2,r5,803b38 <_malloc_r+0x55c>
  8039d0:	87000c26 	beq	r16,fp,803a04 <_malloc_r+0x428>
  8039d4:	e4000217 	ldw	r16,8(fp)
  8039d8:	80c00117 	ldw	r3,4(r16)
  8039dc:	00bfff04 	movi	r2,-4
  8039e0:	1884703a 	and	r2,r3,r2
  8039e4:	14400336 	bltu	r2,r17,8039f4 <_malloc_r+0x418>
  8039e8:	1449c83a 	sub	r4,r2,r17
  8039ec:	008003c4 	movi	r2,15
  8039f0:	113fd316 	blt	r2,r4,803940 <_malloc_r+0x364>
  8039f4:	9009883a 	mov	r4,r18
  8039f8:	080dabc0 	call	80dabc <__malloc_unlock>
  8039fc:	0007883a 	mov	r3,zero
  803a00:	003f0a06 	br	80362c <_malloc_r+0x50>
  803a04:	05c02074 	movhi	r23,129
  803a08:	bdd50504 	addi	r23,r23,21524
  803a0c:	b8800017 	ldw	r2,0(r23)
  803a10:	988d883a 	add	r6,r19,r2
  803a14:	b9800015 	stw	r6,0(r23)
  803a18:	d0e06717 	ldw	r3,-32356(gp)
  803a1c:	00bfffc4 	movi	r2,-1
  803a20:	18808e26 	beq	r3,r2,803c5c <_malloc_r+0x680>
  803a24:	2145c83a 	sub	r2,r4,r5
  803a28:	3085883a 	add	r2,r6,r2
  803a2c:	b8800015 	stw	r2,0(r23)
  803a30:	20c001cc 	andi	r3,r4,7
  803a34:	18005f1e 	bne	r3,zero,803bb4 <_malloc_r+0x5d8>
  803a38:	000b883a 	mov	r5,zero
  803a3c:	a4c5883a 	add	r2,r20,r19
  803a40:	1083ffcc 	andi	r2,r2,4095
  803a44:	00c40004 	movi	r3,4096
  803a48:	1887c83a 	sub	r3,r3,r2
  803a4c:	28e7883a 	add	r19,r5,r3
  803a50:	9009883a 	mov	r4,r18
  803a54:	980b883a 	mov	r5,r19
  803a58:	0803db40 	call	803db4 <_sbrk_r>
  803a5c:	1007883a 	mov	r3,r2
  803a60:	00bfffc4 	movi	r2,-1
  803a64:	18807a26 	beq	r3,r2,803c50 <_malloc_r+0x674>
  803a68:	1d05c83a 	sub	r2,r3,r20
  803a6c:	9885883a 	add	r2,r19,r2
  803a70:	10c00054 	ori	r3,r2,1
  803a74:	b8800017 	ldw	r2,0(r23)
  803a78:	a021883a 	mov	r16,r20
  803a7c:	a0c00115 	stw	r3,4(r20)
  803a80:	9885883a 	add	r2,r19,r2
  803a84:	b8800015 	stw	r2,0(r23)
  803a88:	e5000215 	stw	r20,8(fp)
  803a8c:	b7003626 	beq	r22,fp,803b68 <_malloc_r+0x58c>
  803a90:	018003c4 	movi	r6,15
  803a94:	35404b36 	bltu	r6,r21,803bc4 <_malloc_r+0x5e8>
  803a98:	00800044 	movi	r2,1
  803a9c:	a0800115 	stw	r2,4(r20)
  803aa0:	003fcd06 	br	8039d8 <_malloc_r+0x3fc>
  803aa4:	2808d27a 	srli	r4,r5,9
  803aa8:	2000371e 	bne	r4,zero,803b88 <_malloc_r+0x5ac>
  803aac:	2808d0fa 	srli	r4,r5,3
  803ab0:	200690fa 	slli	r3,r4,3
  803ab4:	1ad1883a 	add	r8,r3,r11
  803ab8:	41800217 	ldw	r6,8(r8)
  803abc:	41805b26 	beq	r8,r6,803c2c <_malloc_r+0x650>
  803ac0:	30800117 	ldw	r2,4(r6)
  803ac4:	00ffff04 	movi	r3,-4
  803ac8:	10c4703a 	and	r2,r2,r3
  803acc:	2880022e 	bgeu	r5,r2,803ad8 <_malloc_r+0x4fc>
  803ad0:	31800217 	ldw	r6,8(r6)
  803ad4:	41bffa1e 	bne	r8,r6,803ac0 <_malloc_r+0x4e4>
  803ad8:	32000317 	ldw	r8,12(r6)
  803adc:	39c00117 	ldw	r7,4(r7)
  803ae0:	82000315 	stw	r8,12(r16)
  803ae4:	81800215 	stw	r6,8(r16)
  803ae8:	07002074 	movhi	fp,129
  803aec:	e7049704 	addi	fp,fp,4700
  803af0:	34000315 	stw	r16,12(r6)
  803af4:	44000215 	stw	r16,8(r8)
  803af8:	003f3e06 	br	8037f4 <_malloc_r+0x218>
  803afc:	63000044 	addi	r12,r12,1
  803b00:	608000cc 	andi	r2,r12,3
  803b04:	10005d26 	beq	r2,zero,803c7c <_malloc_r+0x6a0>
  803b08:	18c00204 	addi	r3,r3,8
  803b0c:	003f5106 	br	803854 <_malloc_r+0x278>
  803b10:	8089883a 	add	r4,r16,r2
  803b14:	003f6d06 	br	8038cc <_malloc_r+0x2f0>
  803b18:	00805504 	movi	r2,340
  803b1c:	10c02036 	bltu	r2,r3,803ba0 <_malloc_r+0x5c4>
  803b20:	8804d3fa 	srli	r2,r17,15
  803b24:	11801dc4 	addi	r6,r2,119
  803b28:	300490fa 	slli	r2,r6,3
  803b2c:	003ed806 	br	803690 <_malloc_r+0xb4>
  803b30:	48c000c4 	addi	r3,r9,3
  803b34:	003f3106 	br	8037fc <_malloc_r+0x220>
  803b38:	05c02074 	movhi	r23,129
  803b3c:	bdd50504 	addi	r23,r23,21524
  803b40:	b8800017 	ldw	r2,0(r23)
  803b44:	988d883a 	add	r6,r19,r2
  803b48:	b9800015 	stw	r6,0(r23)
  803b4c:	293fb21e 	bne	r5,r4,803a18 <_malloc_r+0x43c>
  803b50:	2083ffcc 	andi	r2,r4,4095
  803b54:	103fb01e 	bne	r2,zero,803a18 <_malloc_r+0x43c>
  803b58:	e4000217 	ldw	r16,8(fp)
  803b5c:	9d45883a 	add	r2,r19,r21
  803b60:	10800054 	ori	r2,r2,1
  803b64:	80800115 	stw	r2,4(r16)
  803b68:	b8c00017 	ldw	r3,0(r23)
  803b6c:	d0a7aa17 	ldw	r2,-24920(gp)
  803b70:	10c0012e 	bgeu	r2,r3,803b78 <_malloc_r+0x59c>
  803b74:	d0e7aa15 	stw	r3,-24920(gp)
  803b78:	d0a7ab17 	ldw	r2,-24916(gp)
  803b7c:	10ff962e 	bgeu	r2,r3,8039d8 <_malloc_r+0x3fc>
  803b80:	d0e7ab15 	stw	r3,-24916(gp)
  803b84:	003f9406 	br	8039d8 <_malloc_r+0x3fc>
  803b88:	00800104 	movi	r2,4
  803b8c:	11001e36 	bltu	r2,r4,803c08 <_malloc_r+0x62c>
  803b90:	2804d1ba 	srli	r2,r5,6
  803b94:	11000e04 	addi	r4,r2,56
  803b98:	200690fa 	slli	r3,r4,3
  803b9c:	003fc506 	br	803ab4 <_malloc_r+0x4d8>
  803ba0:	00815504 	movi	r2,1364
  803ba4:	10c01d2e 	bgeu	r2,r3,803c1c <_malloc_r+0x640>
  803ba8:	01801f84 	movi	r6,126
  803bac:	0080fc04 	movi	r2,1008
  803bb0:	003eb706 	br	803690 <_malloc_r+0xb4>
  803bb4:	00800204 	movi	r2,8
  803bb8:	10cbc83a 	sub	r5,r2,r3
  803bbc:	2169883a 	add	r20,r4,r5
  803bc0:	003f9e06 	br	803a3c <_malloc_r+0x460>
  803bc4:	00bffe04 	movi	r2,-8
  803bc8:	a93ffd04 	addi	r4,r21,-12
  803bcc:	2088703a 	and	r4,r4,r2
  803bd0:	b10b883a 	add	r5,r22,r4
  803bd4:	00c00144 	movi	r3,5
  803bd8:	28c00215 	stw	r3,8(r5)
  803bdc:	28c00115 	stw	r3,4(r5)
  803be0:	b0800117 	ldw	r2,4(r22)
  803be4:	1080004c 	andi	r2,r2,1
  803be8:	2084b03a 	or	r2,r4,r2
  803bec:	b0800115 	stw	r2,4(r22)
  803bf0:	313fdd2e 	bgeu	r6,r4,803b68 <_malloc_r+0x58c>
  803bf4:	b1400204 	addi	r5,r22,8
  803bf8:	9009883a 	mov	r4,r18
  803bfc:	08044080 	call	804408 <_free_r>
  803c00:	e4000217 	ldw	r16,8(fp)
  803c04:	003fd806 	br	803b68 <_malloc_r+0x58c>
  803c08:	00800504 	movi	r2,20
  803c0c:	11001536 	bltu	r2,r4,803c64 <_malloc_r+0x688>
  803c10:	210016c4 	addi	r4,r4,91
  803c14:	200690fa 	slli	r3,r4,3
  803c18:	003fa606 	br	803ab4 <_malloc_r+0x4d8>
  803c1c:	8804d4ba 	srli	r2,r17,18
  803c20:	11801f04 	addi	r6,r2,124
  803c24:	300490fa 	slli	r2,r6,3
  803c28:	003e9906 	br	803690 <_malloc_r+0xb4>
  803c2c:	2009d0ba 	srai	r4,r4,2
  803c30:	01402074 	movhi	r5,129
  803c34:	29449704 	addi	r5,r5,4700
  803c38:	00c00044 	movi	r3,1
  803c3c:	28800117 	ldw	r2,4(r5)
  803c40:	1906983a 	sll	r3,r3,r4
  803c44:	10c4b03a 	or	r2,r2,r3
  803c48:	28800115 	stw	r2,4(r5)
  803c4c:	003fa306 	br	803adc <_malloc_r+0x500>
  803c50:	0027883a 	mov	r19,zero
  803c54:	00c00044 	movi	r3,1
  803c58:	003f8606 	br	803a74 <_malloc_r+0x498>
  803c5c:	d1206715 	stw	r4,-32356(gp)
  803c60:	003f7306 	br	803a30 <_malloc_r+0x454>
  803c64:	00801504 	movi	r2,84
  803c68:	11001936 	bltu	r2,r4,803cd0 <_malloc_r+0x6f4>
  803c6c:	2804d33a 	srli	r2,r5,12
  803c70:	11001b84 	addi	r4,r2,110
  803c74:	200690fa 	slli	r3,r4,3
  803c78:	003f8e06 	br	803ab4 <_malloc_r+0x4d8>
  803c7c:	480b883a 	mov	r5,r9
  803c80:	6807883a 	mov	r3,r13
  803c84:	288000cc 	andi	r2,r5,3
  803c88:	18fffe04 	addi	r3,r3,-8
  803c8c:	297fffc4 	addi	r5,r5,-1
  803c90:	10001526 	beq	r2,zero,803ce8 <_malloc_r+0x70c>
  803c94:	18800217 	ldw	r2,8(r3)
  803c98:	10fffa26 	beq	r2,r3,803c84 <_malloc_r+0x6a8>
  803c9c:	2109883a 	add	r4,r4,r4
  803ca0:	393f1e36 	bltu	r7,r4,80391c <_malloc_r+0x340>
  803ca4:	203f1d26 	beq	r4,zero,80391c <_malloc_r+0x340>
  803ca8:	21c4703a 	and	r2,r4,r7
  803cac:	10000226 	beq	r2,zero,803cb8 <_malloc_r+0x6dc>
  803cb0:	6013883a 	mov	r9,r12
  803cb4:	003ee106 	br	80383c <_malloc_r+0x260>
  803cb8:	2109883a 	add	r4,r4,r4
  803cbc:	3904703a 	and	r2,r7,r4
  803cc0:	63000104 	addi	r12,r12,4
  803cc4:	103ffc26 	beq	r2,zero,803cb8 <_malloc_r+0x6dc>
  803cc8:	6013883a 	mov	r9,r12
  803ccc:	003edb06 	br	80383c <_malloc_r+0x260>
  803cd0:	00805504 	movi	r2,340
  803cd4:	11000836 	bltu	r2,r4,803cf8 <_malloc_r+0x71c>
  803cd8:	2804d3fa 	srli	r2,r5,15
  803cdc:	11001dc4 	addi	r4,r2,119
  803ce0:	200690fa 	slli	r3,r4,3
  803ce4:	003f7306 	br	803ab4 <_malloc_r+0x4d8>
  803ce8:	0104303a 	nor	r2,zero,r4
  803cec:	388e703a 	and	r7,r7,r2
  803cf0:	e1c00115 	stw	r7,4(fp)
  803cf4:	003fe906 	br	803c9c <_malloc_r+0x6c0>
  803cf8:	00815504 	movi	r2,1364
  803cfc:	1100032e 	bgeu	r2,r4,803d0c <_malloc_r+0x730>
  803d00:	01001f84 	movi	r4,126
  803d04:	00c0fc04 	movi	r3,1008
  803d08:	003f6a06 	br	803ab4 <_malloc_r+0x4d8>
  803d0c:	2804d4ba 	srli	r2,r5,18
  803d10:	11001f04 	addi	r4,r2,124
  803d14:	200690fa 	slli	r3,r4,3
  803d18:	003f6606 	br	803ab4 <_malloc_r+0x4d8>

00803d1c <memset>:
  803d1c:	008000c4 	movi	r2,3
  803d20:	29403fcc 	andi	r5,r5,255
  803d24:	2007883a 	mov	r3,r4
  803d28:	1180022e 	bgeu	r2,r6,803d34 <memset+0x18>
  803d2c:	2084703a 	and	r2,r4,r2
  803d30:	10000826 	beq	r2,zero,803d54 <memset+0x38>
  803d34:	30000526 	beq	r6,zero,803d4c <memset+0x30>
  803d38:	2805883a 	mov	r2,r5
  803d3c:	30cd883a 	add	r6,r6,r3
  803d40:	18800005 	stb	r2,0(r3)
  803d44:	18c00044 	addi	r3,r3,1
  803d48:	19bffd1e 	bne	r3,r6,803d40 <memset+0x24>
  803d4c:	2005883a 	mov	r2,r4
  803d50:	f800283a 	ret
  803d54:	2804923a 	slli	r2,r5,8
  803d58:	020003c4 	movi	r8,15
  803d5c:	200f883a 	mov	r7,r4
  803d60:	2884b03a 	or	r2,r5,r2
  803d64:	1006943a 	slli	r3,r2,16
  803d68:	10c6b03a 	or	r3,r2,r3
  803d6c:	41800a2e 	bgeu	r8,r6,803d98 <memset+0x7c>
  803d70:	4005883a 	mov	r2,r8
  803d74:	31bffc04 	addi	r6,r6,-16
  803d78:	38c00015 	stw	r3,0(r7)
  803d7c:	38c00115 	stw	r3,4(r7)
  803d80:	38c00215 	stw	r3,8(r7)
  803d84:	38c00315 	stw	r3,12(r7)
  803d88:	39c00404 	addi	r7,r7,16
  803d8c:	11bff936 	bltu	r2,r6,803d74 <memset+0x58>
  803d90:	008000c4 	movi	r2,3
  803d94:	1180052e 	bgeu	r2,r6,803dac <memset+0x90>
  803d98:	31bfff04 	addi	r6,r6,-4
  803d9c:	008000c4 	movi	r2,3
  803da0:	38c00015 	stw	r3,0(r7)
  803da4:	39c00104 	addi	r7,r7,4
  803da8:	11bffb36 	bltu	r2,r6,803d98 <memset+0x7c>
  803dac:	3807883a 	mov	r3,r7
  803db0:	003fe006 	br	803d34 <memset+0x18>

00803db4 <_sbrk_r>:
  803db4:	defffd04 	addi	sp,sp,-12
  803db8:	dc000015 	stw	r16,0(sp)
  803dbc:	04002074 	movhi	r16,129
  803dc0:	8412fb04 	addi	r16,r16,19436
  803dc4:	dc400115 	stw	r17,4(sp)
  803dc8:	80000015 	stw	zero,0(r16)
  803dcc:	2023883a 	mov	r17,r4
  803dd0:	2809883a 	mov	r4,r5
  803dd4:	dfc00215 	stw	ra,8(sp)
  803dd8:	080dcbc0 	call	80dcbc <sbrk>
  803ddc:	1007883a 	mov	r3,r2
  803de0:	00bfffc4 	movi	r2,-1
  803de4:	18800626 	beq	r3,r2,803e00 <_sbrk_r+0x4c>
  803de8:	1805883a 	mov	r2,r3
  803dec:	dfc00217 	ldw	ra,8(sp)
  803df0:	dc400117 	ldw	r17,4(sp)
  803df4:	dc000017 	ldw	r16,0(sp)
  803df8:	dec00304 	addi	sp,sp,12
  803dfc:	f800283a 	ret
  803e00:	80800017 	ldw	r2,0(r16)
  803e04:	103ff826 	beq	r2,zero,803de8 <_sbrk_r+0x34>
  803e08:	88800015 	stw	r2,0(r17)
  803e0c:	1805883a 	mov	r2,r3
  803e10:	dfc00217 	ldw	ra,8(sp)
  803e14:	dc400117 	ldw	r17,4(sp)
  803e18:	dc000017 	ldw	r16,0(sp)
  803e1c:	dec00304 	addi	sp,sp,12
  803e20:	f800283a 	ret

00803e24 <_raise_r>:
  803e24:	defffd04 	addi	sp,sp,-12
  803e28:	008007c4 	movi	r2,31
  803e2c:	dc400115 	stw	r17,4(sp)
  803e30:	dc000015 	stw	r16,0(sp)
  803e34:	dfc00215 	stw	ra,8(sp)
  803e38:	2821883a 	mov	r16,r5
  803e3c:	2023883a 	mov	r17,r4
  803e40:	11402736 	bltu	r2,r5,803ee0 <_raise_r+0xbc>
  803e44:	20c0b717 	ldw	r3,732(r4)
  803e48:	18001326 	beq	r3,zero,803e98 <_raise_r+0x74>
  803e4c:	2945883a 	add	r2,r5,r5
  803e50:	1085883a 	add	r2,r2,r2
  803e54:	188b883a 	add	r5,r3,r2
  803e58:	28c00017 	ldw	r3,0(r5)
  803e5c:	18000e26 	beq	r3,zero,803e98 <_raise_r+0x74>
  803e60:	01000044 	movi	r4,1
  803e64:	19000526 	beq	r3,r4,803e7c <_raise_r+0x58>
  803e68:	00bfffc4 	movi	r2,-1
  803e6c:	18801326 	beq	r3,r2,803ebc <_raise_r+0x98>
  803e70:	28000015 	stw	zero,0(r5)
  803e74:	8009883a 	mov	r4,r16
  803e78:	183ee83a 	callr	r3
  803e7c:	0007883a 	mov	r3,zero
  803e80:	1805883a 	mov	r2,r3
  803e84:	dfc00217 	ldw	ra,8(sp)
  803e88:	dc400117 	ldw	r17,4(sp)
  803e8c:	dc000017 	ldw	r16,0(sp)
  803e90:	dec00304 	addi	sp,sp,12
  803e94:	f800283a 	ret
  803e98:	08040fc0 	call	8040fc <_getpid_r>
  803e9c:	100b883a 	mov	r5,r2
  803ea0:	8809883a 	mov	r4,r17
  803ea4:	800d883a 	mov	r6,r16
  803ea8:	dfc00217 	ldw	ra,8(sp)
  803eac:	dc400117 	ldw	r17,4(sp)
  803eb0:	dc000017 	ldw	r16,0(sp)
  803eb4:	dec00304 	addi	sp,sp,12
  803eb8:	08041001 	jmpi	804100 <_kill_r>
  803ebc:	2007883a 	mov	r3,r4
  803ec0:	00800584 	movi	r2,22
  803ec4:	88800015 	stw	r2,0(r17)
  803ec8:	1805883a 	mov	r2,r3
  803ecc:	dfc00217 	ldw	ra,8(sp)
  803ed0:	dc400117 	ldw	r17,4(sp)
  803ed4:	dc000017 	ldw	r16,0(sp)
  803ed8:	dec00304 	addi	sp,sp,12
  803edc:	f800283a 	ret
  803ee0:	00800584 	movi	r2,22
  803ee4:	00ffffc4 	movi	r3,-1
  803ee8:	20800015 	stw	r2,0(r4)
  803eec:	003fe406 	br	803e80 <_raise_r+0x5c>

00803ef0 <raise>:
  803ef0:	00802074 	movhi	r2,129
  803ef4:	108bb704 	addi	r2,r2,11996
  803ef8:	200b883a 	mov	r5,r4
  803efc:	11000017 	ldw	r4,0(r2)
  803f00:	0803e241 	jmpi	803e24 <_raise_r>

00803f04 <_init_signal_r>:
  803f04:	2080b717 	ldw	r2,732(r4)
  803f08:	defffe04 	addi	sp,sp,-8
  803f0c:	dc000015 	stw	r16,0(sp)
  803f10:	dfc00115 	stw	ra,4(sp)
  803f14:	2021883a 	mov	r16,r4
  803f18:	10000526 	beq	r2,zero,803f30 <_init_signal_r+0x2c>
  803f1c:	0005883a 	mov	r2,zero
  803f20:	dfc00117 	ldw	ra,4(sp)
  803f24:	dc000017 	ldw	r16,0(sp)
  803f28:	dec00204 	addi	sp,sp,8
  803f2c:	f800283a 	ret
  803f30:	01402004 	movi	r5,128
  803f34:	08035dc0 	call	8035dc <_malloc_r>
  803f38:	1009883a 	mov	r4,r2
  803f3c:	8080b715 	stw	r2,732(r16)
  803f40:	10000726 	beq	r2,zero,803f60 <_init_signal_r+0x5c>
  803f44:	0007883a 	mov	r3,zero
  803f48:	01402004 	movi	r5,128
  803f4c:	20c5883a 	add	r2,r4,r3
  803f50:	18c00104 	addi	r3,r3,4
  803f54:	10000015 	stw	zero,0(r2)
  803f58:	197ffc1e 	bne	r3,r5,803f4c <_init_signal_r+0x48>
  803f5c:	003fef06 	br	803f1c <_init_signal_r+0x18>
  803f60:	00bfffc4 	movi	r2,-1
  803f64:	003fee06 	br	803f20 <_init_signal_r+0x1c>

00803f68 <_init_signal>:
  803f68:	00802074 	movhi	r2,129
  803f6c:	108bb704 	addi	r2,r2,11996
  803f70:	11000017 	ldw	r4,0(r2)
  803f74:	0803f041 	jmpi	803f04 <_init_signal_r>

00803f78 <__sigtramp_r>:
  803f78:	defffd04 	addi	sp,sp,-12
  803f7c:	008007c4 	movi	r2,31
  803f80:	dc000115 	stw	r16,4(sp)
  803f84:	dfc00215 	stw	ra,8(sp)
  803f88:	2021883a 	mov	r16,r4
  803f8c:	11401336 	bltu	r2,r5,803fdc <__sigtramp_r+0x64>
  803f90:	20c0b717 	ldw	r3,732(r4)
  803f94:	18001f26 	beq	r3,zero,804014 <__sigtramp_r+0x9c>
  803f98:	2945883a 	add	r2,r5,r5
  803f9c:	1085883a 	add	r2,r2,r2
  803fa0:	10c9883a 	add	r4,r2,r3
  803fa4:	20c00017 	ldw	r3,0(r4)
  803fa8:	18001626 	beq	r3,zero,804004 <__sigtramp_r+0x8c>
  803fac:	00bfffc4 	movi	r2,-1
  803fb0:	18801626 	beq	r3,r2,80400c <__sigtramp_r+0x94>
  803fb4:	00800044 	movi	r2,1
  803fb8:	18800d26 	beq	r3,r2,803ff0 <__sigtramp_r+0x78>
  803fbc:	20000015 	stw	zero,0(r4)
  803fc0:	2809883a 	mov	r4,r5
  803fc4:	183ee83a 	callr	r3
  803fc8:	0005883a 	mov	r2,zero
  803fcc:	dfc00217 	ldw	ra,8(sp)
  803fd0:	dc000117 	ldw	r16,4(sp)
  803fd4:	dec00304 	addi	sp,sp,12
  803fd8:	f800283a 	ret
  803fdc:	00bfffc4 	movi	r2,-1
  803fe0:	dfc00217 	ldw	ra,8(sp)
  803fe4:	dc000117 	ldw	r16,4(sp)
  803fe8:	dec00304 	addi	sp,sp,12
  803fec:	f800283a 	ret
  803ff0:	008000c4 	movi	r2,3
  803ff4:	dfc00217 	ldw	ra,8(sp)
  803ff8:	dc000117 	ldw	r16,4(sp)
  803ffc:	dec00304 	addi	sp,sp,12
  804000:	f800283a 	ret
  804004:	00800044 	movi	r2,1
  804008:	003ff006 	br	803fcc <__sigtramp_r+0x54>
  80400c:	00800084 	movi	r2,2
  804010:	003fee06 	br	803fcc <__sigtramp_r+0x54>
  804014:	d9400015 	stw	r5,0(sp)
  804018:	0803f040 	call	803f04 <_init_signal_r>
  80401c:	d9400017 	ldw	r5,0(sp)
  804020:	103fee1e 	bne	r2,zero,803fdc <__sigtramp_r+0x64>
  804024:	80c0b717 	ldw	r3,732(r16)
  804028:	003fdb06 	br	803f98 <__sigtramp_r+0x20>

0080402c <__sigtramp>:
  80402c:	00802074 	movhi	r2,129
  804030:	108bb704 	addi	r2,r2,11996
  804034:	200b883a 	mov	r5,r4
  804038:	11000017 	ldw	r4,0(r2)
  80403c:	0803f781 	jmpi	803f78 <__sigtramp_r>

00804040 <_signal_r>:
  804040:	defffc04 	addi	sp,sp,-16
  804044:	008007c4 	movi	r2,31
  804048:	dc800215 	stw	r18,8(sp)
  80404c:	dc400115 	stw	r17,4(sp)
  804050:	dc000015 	stw	r16,0(sp)
  804054:	dfc00315 	stw	ra,12(sp)
  804058:	2823883a 	mov	r17,r5
  80405c:	00ffffc4 	movi	r3,-1
  804060:	3025883a 	mov	r18,r6
  804064:	2021883a 	mov	r16,r4
  804068:	1140092e 	bgeu	r2,r5,804090 <_signal_r+0x50>
  80406c:	00800584 	movi	r2,22
  804070:	20800015 	stw	r2,0(r4)
  804074:	1805883a 	mov	r2,r3
  804078:	dfc00317 	ldw	ra,12(sp)
  80407c:	dc800217 	ldw	r18,8(sp)
  804080:	dc400117 	ldw	r17,4(sp)
  804084:	dc000017 	ldw	r16,0(sp)
  804088:	dec00404 	addi	sp,sp,16
  80408c:	f800283a 	ret
  804090:	2140b717 	ldw	r5,732(r4)
  804094:	28000c26 	beq	r5,zero,8040c8 <_signal_r+0x88>
  804098:	8c45883a 	add	r2,r17,r17
  80409c:	1085883a 	add	r2,r2,r2
  8040a0:	1145883a 	add	r2,r2,r5
  8040a4:	10c00017 	ldw	r3,0(r2)
  8040a8:	14800015 	stw	r18,0(r2)
  8040ac:	1805883a 	mov	r2,r3
  8040b0:	dfc00317 	ldw	ra,12(sp)
  8040b4:	dc800217 	ldw	r18,8(sp)
  8040b8:	dc400117 	ldw	r17,4(sp)
  8040bc:	dc000017 	ldw	r16,0(sp)
  8040c0:	dec00404 	addi	sp,sp,16
  8040c4:	f800283a 	ret
  8040c8:	0803f040 	call	803f04 <_init_signal_r>
  8040cc:	1000021e 	bne	r2,zero,8040d8 <_signal_r+0x98>
  8040d0:	8140b717 	ldw	r5,732(r16)
  8040d4:	003ff006 	br	804098 <_signal_r+0x58>
  8040d8:	00ffffc4 	movi	r3,-1
  8040dc:	003fe506 	br	804074 <_signal_r+0x34>

008040e0 <signal>:
  8040e0:	01802074 	movhi	r6,129
  8040e4:	318bb704 	addi	r6,r6,11996
  8040e8:	2007883a 	mov	r3,r4
  8040ec:	31000017 	ldw	r4,0(r6)
  8040f0:	280d883a 	mov	r6,r5
  8040f4:	180b883a 	mov	r5,r3
  8040f8:	08040401 	jmpi	804040 <_signal_r>

008040fc <_getpid_r>:
  8040fc:	080d3541 	jmpi	80d354 <getpid>

00804100 <_kill_r>:
  804100:	defffd04 	addi	sp,sp,-12
  804104:	dc000015 	stw	r16,0(sp)
  804108:	04002074 	movhi	r16,129
  80410c:	8412fb04 	addi	r16,r16,19436
  804110:	dc400115 	stw	r17,4(sp)
  804114:	80000015 	stw	zero,0(r16)
  804118:	2023883a 	mov	r17,r4
  80411c:	2809883a 	mov	r4,r5
  804120:	300b883a 	mov	r5,r6
  804124:	dfc00215 	stw	ra,8(sp)
  804128:	080d6540 	call	80d654 <kill>
  80412c:	1007883a 	mov	r3,r2
  804130:	00bfffc4 	movi	r2,-1
  804134:	18800626 	beq	r3,r2,804150 <_kill_r+0x50>
  804138:	1805883a 	mov	r2,r3
  80413c:	dfc00217 	ldw	ra,8(sp)
  804140:	dc400117 	ldw	r17,4(sp)
  804144:	dc000017 	ldw	r16,0(sp)
  804148:	dec00304 	addi	sp,sp,12
  80414c:	f800283a 	ret
  804150:	80800017 	ldw	r2,0(r16)
  804154:	103ff826 	beq	r2,zero,804138 <_kill_r+0x38>
  804158:	88800015 	stw	r2,0(r17)
  80415c:	1805883a 	mov	r2,r3
  804160:	dfc00217 	ldw	ra,8(sp)
  804164:	dc400117 	ldw	r17,4(sp)
  804168:	dc000017 	ldw	r16,0(sp)
  80416c:	dec00304 	addi	sp,sp,12
  804170:	f800283a 	ret

00804174 <strlen>:
  804174:	208000cc 	andi	r2,r4,3
  804178:	2011883a 	mov	r8,r4
  80417c:	1000161e 	bne	r2,zero,8041d8 <strlen+0x64>
  804180:	20c00017 	ldw	r3,0(r4)
  804184:	017fbff4 	movhi	r5,65279
  804188:	297fbfc4 	addi	r5,r5,-257
  80418c:	01e02074 	movhi	r7,32897
  804190:	39e02004 	addi	r7,r7,-32640
  804194:	1945883a 	add	r2,r3,r5
  804198:	11c4703a 	and	r2,r2,r7
  80419c:	00c6303a 	nor	r3,zero,r3
  8041a0:	1886703a 	and	r3,r3,r2
  8041a4:	18000c1e 	bne	r3,zero,8041d8 <strlen+0x64>
  8041a8:	280d883a 	mov	r6,r5
  8041ac:	380b883a 	mov	r5,r7
  8041b0:	21000104 	addi	r4,r4,4
  8041b4:	20800017 	ldw	r2,0(r4)
  8041b8:	1187883a 	add	r3,r2,r6
  8041bc:	1946703a 	and	r3,r3,r5
  8041c0:	0084303a 	nor	r2,zero,r2
  8041c4:	10c4703a 	and	r2,r2,r3
  8041c8:	103ff926 	beq	r2,zero,8041b0 <strlen+0x3c>
  8041cc:	20800007 	ldb	r2,0(r4)
  8041d0:	10000326 	beq	r2,zero,8041e0 <strlen+0x6c>
  8041d4:	21000044 	addi	r4,r4,1
  8041d8:	20800007 	ldb	r2,0(r4)
  8041dc:	103ffd1e 	bne	r2,zero,8041d4 <strlen+0x60>
  8041e0:	2205c83a 	sub	r2,r4,r8
  8041e4:	f800283a 	ret

008041e8 <_vsnprintf_r>:
  8041e8:	deffe604 	addi	sp,sp,-104
  8041ec:	dc401815 	stw	r17,96(sp)
  8041f0:	dc001715 	stw	r16,92(sp)
  8041f4:	dfc01915 	stw	ra,100(sp)
  8041f8:	3021883a 	mov	r16,r6
  8041fc:	00ffffc4 	movi	r3,-1
  804200:	2023883a 	mov	r17,r4
  804204:	2811883a 	mov	r8,r5
  804208:	30002116 	blt	r6,zero,804290 <_vsnprintf_r+0xa8>
  80420c:	0007883a 	mov	r3,zero
  804210:	30000126 	beq	r6,zero,804218 <_vsnprintf_r+0x30>
  804214:	30ffffc4 	addi	r3,r6,-1
  804218:	00802074 	movhi	r2,129
  80421c:	108bb704 	addi	r2,r2,11996
  804220:	380d883a 	mov	r6,r7
  804224:	11000017 	ldw	r4,0(r2)
  804228:	d9c01a17 	ldw	r7,104(sp)
  80422c:	00808204 	movi	r2,520
  804230:	d880030d 	sth	r2,12(sp)
  804234:	d80b883a 	mov	r5,sp
  804238:	00bfffc4 	movi	r2,-1
  80423c:	d8c00515 	stw	r3,20(sp)
  804240:	d8c00215 	stw	r3,8(sp)
  804244:	da000415 	stw	r8,16(sp)
  804248:	d880038d 	sth	r2,14(sp)
  80424c:	da000015 	stw	r8,0(sp)
  804250:	08047740 	call	804774 <___vfprintf_internal_r>
  804254:	1007883a 	mov	r3,r2
  804258:	00bfffc4 	movi	r2,-1
  80425c:	18800916 	blt	r3,r2,804284 <_vsnprintf_r+0x9c>
  804260:	80000226 	beq	r16,zero,80426c <_vsnprintf_r+0x84>
  804264:	d8800017 	ldw	r2,0(sp)
  804268:	10000005 	stb	zero,0(r2)
  80426c:	1805883a 	mov	r2,r3
  804270:	dfc01917 	ldw	ra,100(sp)
  804274:	dc401817 	ldw	r17,96(sp)
  804278:	dc001717 	ldw	r16,92(sp)
  80427c:	dec01a04 	addi	sp,sp,104
  804280:	f800283a 	ret
  804284:	008022c4 	movi	r2,139
  804288:	88800015 	stw	r2,0(r17)
  80428c:	003ff406 	br	804260 <_vsnprintf_r+0x78>
  804290:	008022c4 	movi	r2,139
  804294:	20800015 	stw	r2,0(r4)
  804298:	003ff406 	br	80426c <_vsnprintf_r+0x84>

0080429c <vsnprintf>:
  80429c:	00802074 	movhi	r2,129
  8042a0:	108bb704 	addi	r2,r2,11996
  8042a4:	2017883a 	mov	r11,r4
  8042a8:	11000017 	ldw	r4,0(r2)
  8042ac:	defffe04 	addi	sp,sp,-8
  8042b0:	3013883a 	mov	r9,r6
  8042b4:	2805883a 	mov	r2,r5
  8042b8:	d9c00015 	stw	r7,0(sp)
  8042bc:	580b883a 	mov	r5,r11
  8042c0:	100d883a 	mov	r6,r2
  8042c4:	480f883a 	mov	r7,r9
  8042c8:	dfc00115 	stw	ra,4(sp)
  8042cc:	08041e80 	call	8041e8 <_vsnprintf_r>
  8042d0:	dfc00117 	ldw	ra,4(sp)
  8042d4:	dec00204 	addi	sp,sp,8
  8042d8:	f800283a 	ret

008042dc <_malloc_trim_r>:
  8042dc:	defffb04 	addi	sp,sp,-20
  8042e0:	dcc00315 	stw	r19,12(sp)
  8042e4:	04c02074 	movhi	r19,129
  8042e8:	9cc49704 	addi	r19,r19,4700
  8042ec:	dc800215 	stw	r18,8(sp)
  8042f0:	dc400115 	stw	r17,4(sp)
  8042f4:	dc000015 	stw	r16,0(sp)
  8042f8:	2823883a 	mov	r17,r5
  8042fc:	2025883a 	mov	r18,r4
  804300:	dfc00415 	stw	ra,16(sp)
  804304:	080da9c0 	call	80da9c <__malloc_lock>
  804308:	98800217 	ldw	r2,8(r19)
  80430c:	9009883a 	mov	r4,r18
  804310:	000b883a 	mov	r5,zero
  804314:	10c00117 	ldw	r3,4(r2)
  804318:	00bfff04 	movi	r2,-4
  80431c:	18a0703a 	and	r16,r3,r2
  804320:	8463c83a 	sub	r17,r16,r17
  804324:	8c43fbc4 	addi	r17,r17,4079
  804328:	8822d33a 	srli	r17,r17,12
  80432c:	0083ffc4 	movi	r2,4095
  804330:	8c7fffc4 	addi	r17,r17,-1
  804334:	8822933a 	slli	r17,r17,12
  804338:	1440060e 	bge	r2,r17,804354 <_malloc_trim_r+0x78>
  80433c:	0803db40 	call	803db4 <_sbrk_r>
  804340:	98c00217 	ldw	r3,8(r19)
  804344:	9009883a 	mov	r4,r18
  804348:	044bc83a 	sub	r5,zero,r17
  80434c:	80c7883a 	add	r3,r16,r3
  804350:	10c00926 	beq	r2,r3,804378 <_malloc_trim_r+0x9c>
  804354:	080dabc0 	call	80dabc <__malloc_unlock>
  804358:	0005883a 	mov	r2,zero
  80435c:	dfc00417 	ldw	ra,16(sp)
  804360:	dcc00317 	ldw	r19,12(sp)
  804364:	dc800217 	ldw	r18,8(sp)
  804368:	dc400117 	ldw	r17,4(sp)
  80436c:	dc000017 	ldw	r16,0(sp)
  804370:	dec00504 	addi	sp,sp,20
  804374:	f800283a 	ret
  804378:	9009883a 	mov	r4,r18
  80437c:	0803db40 	call	803db4 <_sbrk_r>
  804380:	844dc83a 	sub	r6,r16,r17
  804384:	00ffffc4 	movi	r3,-1
  804388:	9009883a 	mov	r4,r18
  80438c:	000b883a 	mov	r5,zero
  804390:	01c02074 	movhi	r7,129
  804394:	39d50504 	addi	r7,r7,21524
  804398:	31800054 	ori	r6,r6,1
  80439c:	10c00926 	beq	r2,r3,8043c4 <_malloc_trim_r+0xe8>
  8043a0:	38800017 	ldw	r2,0(r7)
  8043a4:	98c00217 	ldw	r3,8(r19)
  8043a8:	9009883a 	mov	r4,r18
  8043ac:	1445c83a 	sub	r2,r2,r17
  8043b0:	38800015 	stw	r2,0(r7)
  8043b4:	19800115 	stw	r6,4(r3)
  8043b8:	080dabc0 	call	80dabc <__malloc_unlock>
  8043bc:	00800044 	movi	r2,1
  8043c0:	003fe606 	br	80435c <_malloc_trim_r+0x80>
  8043c4:	0803db40 	call	803db4 <_sbrk_r>
  8043c8:	99800217 	ldw	r6,8(r19)
  8043cc:	100f883a 	mov	r7,r2
  8043d0:	9009883a 	mov	r4,r18
  8043d4:	1187c83a 	sub	r3,r2,r6
  8043d8:	008003c4 	movi	r2,15
  8043dc:	19400054 	ori	r5,r3,1
  8043e0:	10ffdc0e 	bge	r2,r3,804354 <_malloc_trim_r+0x78>
  8043e4:	00802074 	movhi	r2,129
  8043e8:	108bb604 	addi	r2,r2,11992
  8043ec:	10c00017 	ldw	r3,0(r2)
  8043f0:	00802074 	movhi	r2,129
  8043f4:	10950504 	addi	r2,r2,21524
  8043f8:	31400115 	stw	r5,4(r6)
  8043fc:	38c7c83a 	sub	r3,r7,r3
  804400:	10c00015 	stw	r3,0(r2)
  804404:	003fd306 	br	804354 <_malloc_trim_r+0x78>

00804408 <_free_r>:
  804408:	defffd04 	addi	sp,sp,-12
  80440c:	dc400115 	stw	r17,4(sp)
  804410:	dc000015 	stw	r16,0(sp)
  804414:	dfc00215 	stw	ra,8(sp)
  804418:	2821883a 	mov	r16,r5
  80441c:	2023883a 	mov	r17,r4
  804420:	28005a26 	beq	r5,zero,80458c <_free_r+0x184>
  804424:	080da9c0 	call	80da9c <__malloc_lock>
  804428:	823ffe04 	addi	r8,r16,-8
  80442c:	41400117 	ldw	r5,4(r8)
  804430:	00bfff84 	movi	r2,-2
  804434:	02802074 	movhi	r10,129
  804438:	52849704 	addi	r10,r10,4700
  80443c:	288e703a 	and	r7,r5,r2
  804440:	41cd883a 	add	r6,r8,r7
  804444:	30c00117 	ldw	r3,4(r6)
  804448:	51000217 	ldw	r4,8(r10)
  80444c:	00bfff04 	movi	r2,-4
  804450:	1892703a 	and	r9,r3,r2
  804454:	5017883a 	mov	r11,r10
  804458:	31006726 	beq	r6,r4,8045f8 <_free_r+0x1f0>
  80445c:	2880004c 	andi	r2,r5,1
  804460:	1005003a 	cmpeq	r2,r2,zero
  804464:	32400115 	stw	r9,4(r6)
  804468:	10001a1e 	bne	r2,zero,8044d4 <_free_r+0xcc>
  80446c:	000b883a 	mov	r5,zero
  804470:	3247883a 	add	r3,r6,r9
  804474:	18800117 	ldw	r2,4(r3)
  804478:	1080004c 	andi	r2,r2,1
  80447c:	1000231e 	bne	r2,zero,80450c <_free_r+0x104>
  804480:	280ac03a 	cmpne	r5,r5,zero
  804484:	3a4f883a 	add	r7,r7,r9
  804488:	2800451e 	bne	r5,zero,8045a0 <_free_r+0x198>
  80448c:	31000217 	ldw	r4,8(r6)
  804490:	00802074 	movhi	r2,129
  804494:	10849904 	addi	r2,r2,4708
  804498:	20807b26 	beq	r4,r2,804688 <_free_r+0x280>
  80449c:	30800317 	ldw	r2,12(r6)
  8044a0:	3a07883a 	add	r3,r7,r8
  8044a4:	19c00015 	stw	r7,0(r3)
  8044a8:	11000215 	stw	r4,8(r2)
  8044ac:	20800315 	stw	r2,12(r4)
  8044b0:	38800054 	ori	r2,r7,1
  8044b4:	40800115 	stw	r2,4(r8)
  8044b8:	28001a26 	beq	r5,zero,804524 <_free_r+0x11c>
  8044bc:	8809883a 	mov	r4,r17
  8044c0:	dfc00217 	ldw	ra,8(sp)
  8044c4:	dc400117 	ldw	r17,4(sp)
  8044c8:	dc000017 	ldw	r16,0(sp)
  8044cc:	dec00304 	addi	sp,sp,12
  8044d0:	080dabc1 	jmpi	80dabc <__malloc_unlock>
  8044d4:	80bffe17 	ldw	r2,-8(r16)
  8044d8:	50c00204 	addi	r3,r10,8
  8044dc:	4091c83a 	sub	r8,r8,r2
  8044e0:	41000217 	ldw	r4,8(r8)
  8044e4:	388f883a 	add	r7,r7,r2
  8044e8:	20c06126 	beq	r4,r3,804670 <_free_r+0x268>
  8044ec:	40800317 	ldw	r2,12(r8)
  8044f0:	3247883a 	add	r3,r6,r9
  8044f4:	000b883a 	mov	r5,zero
  8044f8:	11000215 	stw	r4,8(r2)
  8044fc:	20800315 	stw	r2,12(r4)
  804500:	18800117 	ldw	r2,4(r3)
  804504:	1080004c 	andi	r2,r2,1
  804508:	103fdd26 	beq	r2,zero,804480 <_free_r+0x78>
  80450c:	38800054 	ori	r2,r7,1
  804510:	3a07883a 	add	r3,r7,r8
  804514:	280ac03a 	cmpne	r5,r5,zero
  804518:	40800115 	stw	r2,4(r8)
  80451c:	19c00015 	stw	r7,0(r3)
  804520:	283fe61e 	bne	r5,zero,8044bc <_free_r+0xb4>
  804524:	00807fc4 	movi	r2,511
  804528:	11c01f2e 	bgeu	r2,r7,8045a8 <_free_r+0x1a0>
  80452c:	3806d27a 	srli	r3,r7,9
  804530:	1800481e 	bne	r3,zero,804654 <_free_r+0x24c>
  804534:	3804d0fa 	srli	r2,r7,3
  804538:	100690fa 	slli	r3,r2,3
  80453c:	1acd883a 	add	r6,r3,r11
  804540:	31400217 	ldw	r5,8(r6)
  804544:	31405926 	beq	r6,r5,8046ac <_free_r+0x2a4>
  804548:	28800117 	ldw	r2,4(r5)
  80454c:	00ffff04 	movi	r3,-4
  804550:	10c4703a 	and	r2,r2,r3
  804554:	3880022e 	bgeu	r7,r2,804560 <_free_r+0x158>
  804558:	29400217 	ldw	r5,8(r5)
  80455c:	317ffa1e 	bne	r6,r5,804548 <_free_r+0x140>
  804560:	29800317 	ldw	r6,12(r5)
  804564:	41800315 	stw	r6,12(r8)
  804568:	41400215 	stw	r5,8(r8)
  80456c:	8809883a 	mov	r4,r17
  804570:	2a000315 	stw	r8,12(r5)
  804574:	32000215 	stw	r8,8(r6)
  804578:	dfc00217 	ldw	ra,8(sp)
  80457c:	dc400117 	ldw	r17,4(sp)
  804580:	dc000017 	ldw	r16,0(sp)
  804584:	dec00304 	addi	sp,sp,12
  804588:	080dabc1 	jmpi	80dabc <__malloc_unlock>
  80458c:	dfc00217 	ldw	ra,8(sp)
  804590:	dc400117 	ldw	r17,4(sp)
  804594:	dc000017 	ldw	r16,0(sp)
  804598:	dec00304 	addi	sp,sp,12
  80459c:	f800283a 	ret
  8045a0:	31000217 	ldw	r4,8(r6)
  8045a4:	003fbd06 	br	80449c <_free_r+0x94>
  8045a8:	3806d0fa 	srli	r3,r7,3
  8045ac:	00800044 	movi	r2,1
  8045b0:	51400117 	ldw	r5,4(r10)
  8045b4:	180890fa 	slli	r4,r3,3
  8045b8:	1807d0ba 	srai	r3,r3,2
  8045bc:	22c9883a 	add	r4,r4,r11
  8045c0:	21800217 	ldw	r6,8(r4)
  8045c4:	10c4983a 	sll	r2,r2,r3
  8045c8:	41000315 	stw	r4,12(r8)
  8045cc:	41800215 	stw	r6,8(r8)
  8045d0:	288ab03a 	or	r5,r5,r2
  8045d4:	22000215 	stw	r8,8(r4)
  8045d8:	8809883a 	mov	r4,r17
  8045dc:	51400115 	stw	r5,4(r10)
  8045e0:	32000315 	stw	r8,12(r6)
  8045e4:	dfc00217 	ldw	ra,8(sp)
  8045e8:	dc400117 	ldw	r17,4(sp)
  8045ec:	dc000017 	ldw	r16,0(sp)
  8045f0:	dec00304 	addi	sp,sp,12
  8045f4:	080dabc1 	jmpi	80dabc <__malloc_unlock>
  8045f8:	2880004c 	andi	r2,r5,1
  8045fc:	3a4d883a 	add	r6,r7,r9
  804600:	1000071e 	bne	r2,zero,804620 <_free_r+0x218>
  804604:	80bffe17 	ldw	r2,-8(r16)
  804608:	4091c83a 	sub	r8,r8,r2
  80460c:	41000317 	ldw	r4,12(r8)
  804610:	40c00217 	ldw	r3,8(r8)
  804614:	308d883a 	add	r6,r6,r2
  804618:	20c00215 	stw	r3,8(r4)
  80461c:	19000315 	stw	r4,12(r3)
  804620:	00802074 	movhi	r2,129
  804624:	108bb504 	addi	r2,r2,11988
  804628:	11000017 	ldw	r4,0(r2)
  80462c:	30c00054 	ori	r3,r6,1
  804630:	52000215 	stw	r8,8(r10)
  804634:	40c00115 	stw	r3,4(r8)
  804638:	313fa036 	bltu	r6,r4,8044bc <_free_r+0xb4>
  80463c:	00802074 	movhi	r2,129
  804640:	1092f804 	addi	r2,r2,19424
  804644:	11400017 	ldw	r5,0(r2)
  804648:	8809883a 	mov	r4,r17
  80464c:	08042dc0 	call	8042dc <_malloc_trim_r>
  804650:	003f9a06 	br	8044bc <_free_r+0xb4>
  804654:	00800104 	movi	r2,4
  804658:	10c0072e 	bgeu	r2,r3,804678 <_free_r+0x270>
  80465c:	00800504 	movi	r2,20
  804660:	10c01936 	bltu	r2,r3,8046c8 <_free_r+0x2c0>
  804664:	188016c4 	addi	r2,r3,91
  804668:	100690fa 	slli	r3,r2,3
  80466c:	003fb306 	br	80453c <_free_r+0x134>
  804670:	01400044 	movi	r5,1
  804674:	003f7e06 	br	804470 <_free_r+0x68>
  804678:	3804d1ba 	srli	r2,r7,6
  80467c:	10800e04 	addi	r2,r2,56
  804680:	100690fa 	slli	r3,r2,3
  804684:	003fad06 	br	80453c <_free_r+0x134>
  804688:	22000315 	stw	r8,12(r4)
  80468c:	22000215 	stw	r8,8(r4)
  804690:	3a05883a 	add	r2,r7,r8
  804694:	38c00054 	ori	r3,r7,1
  804698:	11c00015 	stw	r7,0(r2)
  80469c:	41000215 	stw	r4,8(r8)
  8046a0:	40c00115 	stw	r3,4(r8)
  8046a4:	41000315 	stw	r4,12(r8)
  8046a8:	003f8406 	br	8044bc <_free_r+0xb4>
  8046ac:	1005d0ba 	srai	r2,r2,2
  8046b0:	00c00044 	movi	r3,1
  8046b4:	51000117 	ldw	r4,4(r10)
  8046b8:	1886983a 	sll	r3,r3,r2
  8046bc:	20c8b03a 	or	r4,r4,r3
  8046c0:	51000115 	stw	r4,4(r10)
  8046c4:	003fa706 	br	804564 <_free_r+0x15c>
  8046c8:	00801504 	movi	r2,84
  8046cc:	10c00436 	bltu	r2,r3,8046e0 <_free_r+0x2d8>
  8046d0:	3804d33a 	srli	r2,r7,12
  8046d4:	10801b84 	addi	r2,r2,110
  8046d8:	100690fa 	slli	r3,r2,3
  8046dc:	003f9706 	br	80453c <_free_r+0x134>
  8046e0:	00805504 	movi	r2,340
  8046e4:	10c00436 	bltu	r2,r3,8046f8 <_free_r+0x2f0>
  8046e8:	3804d3fa 	srli	r2,r7,15
  8046ec:	10801dc4 	addi	r2,r2,119
  8046f0:	100690fa 	slli	r3,r2,3
  8046f4:	003f9106 	br	80453c <_free_r+0x134>
  8046f8:	00815504 	movi	r2,1364
  8046fc:	10c0032e 	bgeu	r2,r3,80470c <_free_r+0x304>
  804700:	00801f84 	movi	r2,126
  804704:	00c0fc04 	movi	r3,1008
  804708:	003f8c06 	br	80453c <_free_r+0x134>
  80470c:	3804d4ba 	srli	r2,r7,18
  804710:	10801f04 	addi	r2,r2,124
  804714:	100690fa 	slli	r3,r2,3
  804718:	003f8806 	br	80453c <_free_r+0x134>

0080471c <__sprint_r>:
  80471c:	30800217 	ldw	r2,8(r6)
  804720:	defffe04 	addi	sp,sp,-8
  804724:	dc000015 	stw	r16,0(sp)
  804728:	dfc00115 	stw	ra,4(sp)
  80472c:	3021883a 	mov	r16,r6
  804730:	0007883a 	mov	r3,zero
  804734:	1000061e 	bne	r2,zero,804750 <__sprint_r+0x34>
  804738:	1805883a 	mov	r2,r3
  80473c:	30000115 	stw	zero,4(r6)
  804740:	dfc00117 	ldw	ra,4(sp)
  804744:	dc000017 	ldw	r16,0(sp)
  804748:	dec00204 	addi	sp,sp,8
  80474c:	f800283a 	ret
  804750:	080843c0 	call	80843c <__sfvwrite_r>
  804754:	1007883a 	mov	r3,r2
  804758:	1805883a 	mov	r2,r3
  80475c:	80000115 	stw	zero,4(r16)
  804760:	80000215 	stw	zero,8(r16)
  804764:	dfc00117 	ldw	ra,4(sp)
  804768:	dc000017 	ldw	r16,0(sp)
  80476c:	dec00204 	addi	sp,sp,8
  804770:	f800283a 	ret

00804774 <___vfprintf_internal_r>:
  804774:	defea404 	addi	sp,sp,-1392
  804778:	dd815815 	stw	r22,1376(sp)
  80477c:	dc015215 	stw	r16,1352(sp)
  804780:	d9c15115 	stw	r7,1348(sp)
  804784:	dfc15b15 	stw	ra,1388(sp)
  804788:	df015a15 	stw	fp,1384(sp)
  80478c:	ddc15915 	stw	r23,1380(sp)
  804790:	dd415715 	stw	r21,1372(sp)
  804794:	dd015615 	stw	r20,1368(sp)
  804798:	dcc15515 	stw	r19,1364(sp)
  80479c:	dc815415 	stw	r18,1360(sp)
  8047a0:	dc415315 	stw	r17,1356(sp)
  8047a4:	282d883a 	mov	r22,r5
  8047a8:	3021883a 	mov	r16,r6
  8047ac:	d9014f15 	stw	r4,1340(sp)
  8047b0:	0808a600 	call	808a60 <_localeconv_r>
  8047b4:	10800017 	ldw	r2,0(r2)
  8047b8:	d9c15117 	ldw	r7,1348(sp)
  8047bc:	d8814915 	stw	r2,1316(sp)
  8047c0:	d8814f17 	ldw	r2,1340(sp)
  8047c4:	10000226 	beq	r2,zero,8047d0 <___vfprintf_internal_r+0x5c>
  8047c8:	10800e17 	ldw	r2,56(r2)
  8047cc:	10020d26 	beq	r2,zero,805004 <___vfprintf_internal_r+0x890>
  8047d0:	b080030b 	ldhu	r2,12(r22)
  8047d4:	1080020c 	andi	r2,r2,8
  8047d8:	10020e26 	beq	r2,zero,805014 <___vfprintf_internal_r+0x8a0>
  8047dc:	b0800417 	ldw	r2,16(r22)
  8047e0:	10020c26 	beq	r2,zero,805014 <___vfprintf_internal_r+0x8a0>
  8047e4:	b200030b 	ldhu	r8,12(r22)
  8047e8:	00800284 	movi	r2,10
  8047ec:	40c0068c 	andi	r3,r8,26
  8047f0:	18802f1e 	bne	r3,r2,8048b0 <___vfprintf_internal_r+0x13c>
  8047f4:	b080038f 	ldh	r2,14(r22)
  8047f8:	10002d16 	blt	r2,zero,8048b0 <___vfprintf_internal_r+0x13c>
  8047fc:	b240038b 	ldhu	r9,14(r22)
  804800:	b2800717 	ldw	r10,28(r22)
  804804:	b2c00917 	ldw	r11,36(r22)
  804808:	d9014f17 	ldw	r4,1340(sp)
  80480c:	dc402904 	addi	r17,sp,164
  804810:	d8804004 	addi	r2,sp,256
  804814:	00c10004 	movi	r3,1024
  804818:	423fff4c 	andi	r8,r8,65533
  80481c:	800d883a 	mov	r6,r16
  804820:	880b883a 	mov	r5,r17
  804824:	da002c0d 	sth	r8,176(sp)
  804828:	da402c8d 	sth	r9,178(sp)
  80482c:	da803015 	stw	r10,192(sp)
  804830:	dac03215 	stw	r11,200(sp)
  804834:	d8802d15 	stw	r2,180(sp)
  804838:	d8c02e15 	stw	r3,184(sp)
  80483c:	d8802915 	stw	r2,164(sp)
  804840:	d8c02b15 	stw	r3,172(sp)
  804844:	d8002f15 	stw	zero,188(sp)
  804848:	08047740 	call	804774 <___vfprintf_internal_r>
  80484c:	d8814b15 	stw	r2,1324(sp)
  804850:	10000416 	blt	r2,zero,804864 <___vfprintf_internal_r+0xf0>
  804854:	d9014f17 	ldw	r4,1340(sp)
  804858:	880b883a 	mov	r5,r17
  80485c:	0807f4c0 	call	807f4c <_fflush_r>
  804860:	1002321e 	bne	r2,zero,80512c <___vfprintf_internal_r+0x9b8>
  804864:	d8802c0b 	ldhu	r2,176(sp)
  804868:	1080100c 	andi	r2,r2,64
  80486c:	10000326 	beq	r2,zero,80487c <___vfprintf_internal_r+0x108>
  804870:	b080030b 	ldhu	r2,12(r22)
  804874:	10801014 	ori	r2,r2,64
  804878:	b080030d 	sth	r2,12(r22)
  80487c:	d8814b17 	ldw	r2,1324(sp)
  804880:	dfc15b17 	ldw	ra,1388(sp)
  804884:	df015a17 	ldw	fp,1384(sp)
  804888:	ddc15917 	ldw	r23,1380(sp)
  80488c:	dd815817 	ldw	r22,1376(sp)
  804890:	dd415717 	ldw	r21,1372(sp)
  804894:	dd015617 	ldw	r20,1368(sp)
  804898:	dcc15517 	ldw	r19,1364(sp)
  80489c:	dc815417 	ldw	r18,1360(sp)
  8048a0:	dc415317 	ldw	r17,1356(sp)
  8048a4:	dc015217 	ldw	r16,1352(sp)
  8048a8:	dec15c04 	addi	sp,sp,1392
  8048ac:	f800283a 	ret
  8048b0:	0005883a 	mov	r2,zero
  8048b4:	0007883a 	mov	r3,zero
  8048b8:	dd401904 	addi	r21,sp,100
  8048bc:	d8814215 	stw	r2,1288(sp)
  8048c0:	802f883a 	mov	r23,r16
  8048c4:	d8c14315 	stw	r3,1292(sp)
  8048c8:	d8014b15 	stw	zero,1324(sp)
  8048cc:	d8014815 	stw	zero,1312(sp)
  8048d0:	d8014415 	stw	zero,1296(sp)
  8048d4:	d8014715 	stw	zero,1308(sp)
  8048d8:	dd400c15 	stw	r21,48(sp)
  8048dc:	d8000e15 	stw	zero,56(sp)
  8048e0:	d8000d15 	stw	zero,52(sp)
  8048e4:	b8800007 	ldb	r2,0(r23)
  8048e8:	10001926 	beq	r2,zero,804950 <___vfprintf_internal_r+0x1dc>
  8048ec:	00c00944 	movi	r3,37
  8048f0:	10c01726 	beq	r2,r3,804950 <___vfprintf_internal_r+0x1dc>
  8048f4:	b821883a 	mov	r16,r23
  8048f8:	00000106 	br	804900 <___vfprintf_internal_r+0x18c>
  8048fc:	10c00326 	beq	r2,r3,80490c <___vfprintf_internal_r+0x198>
  804900:	84000044 	addi	r16,r16,1
  804904:	80800007 	ldb	r2,0(r16)
  804908:	103ffc1e 	bne	r2,zero,8048fc <___vfprintf_internal_r+0x188>
  80490c:	85e7c83a 	sub	r19,r16,r23
  804910:	98000e26 	beq	r19,zero,80494c <___vfprintf_internal_r+0x1d8>
  804914:	dc800e17 	ldw	r18,56(sp)
  804918:	dc400d17 	ldw	r17,52(sp)
  80491c:	008001c4 	movi	r2,7
  804920:	94e5883a 	add	r18,r18,r19
  804924:	8c400044 	addi	r17,r17,1
  804928:	adc00015 	stw	r23,0(r21)
  80492c:	dc800e15 	stw	r18,56(sp)
  804930:	acc00115 	stw	r19,4(r21)
  804934:	dc400d15 	stw	r17,52(sp)
  804938:	14428b16 	blt	r2,r17,805368 <___vfprintf_internal_r+0xbf4>
  80493c:	ad400204 	addi	r21,r21,8
  804940:	d9014b17 	ldw	r4,1324(sp)
  804944:	24c9883a 	add	r4,r4,r19
  804948:	d9014b15 	stw	r4,1324(sp)
  80494c:	802f883a 	mov	r23,r16
  804950:	b8800007 	ldb	r2,0(r23)
  804954:	10013c26 	beq	r2,zero,804e48 <___vfprintf_internal_r+0x6d4>
  804958:	bdc00044 	addi	r23,r23,1
  80495c:	d8000405 	stb	zero,16(sp)
  804960:	b8c00007 	ldb	r3,0(r23)
  804964:	04ffffc4 	movi	r19,-1
  804968:	d8014c15 	stw	zero,1328(sp)
  80496c:	d8014a15 	stw	zero,1320(sp)
  804970:	d8c14d15 	stw	r3,1332(sp)
  804974:	bdc00044 	addi	r23,r23,1
  804978:	d9414d17 	ldw	r5,1332(sp)
  80497c:	00801604 	movi	r2,88
  804980:	28fff804 	addi	r3,r5,-32
  804984:	10c06036 	bltu	r2,r3,804b08 <___vfprintf_internal_r+0x394>
  804988:	18c5883a 	add	r2,r3,r3
  80498c:	1085883a 	add	r2,r2,r2
  804990:	00c02034 	movhi	r3,128
  804994:	18d26904 	addi	r3,r3,18852
  804998:	10c5883a 	add	r2,r2,r3
  80499c:	11000017 	ldw	r4,0(r2)
  8049a0:	2000683a 	jmp	r4
  8049a4:	00805918 	cmpnei	r2,zero,356
  8049a8:	00804b08 	cmpgei	r2,zero,300
  8049ac:	00804b08 	cmpgei	r2,zero,300
  8049b0:	00805904 	movi	r2,356
  8049b4:	00804b08 	cmpgei	r2,zero,300
  8049b8:	00804b08 	cmpgei	r2,zero,300
  8049bc:	00804b08 	cmpgei	r2,zero,300
  8049c0:	00804b08 	cmpgei	r2,zero,300
  8049c4:	00804b08 	cmpgei	r2,zero,300
  8049c8:	00804b08 	cmpgei	r2,zero,300
  8049cc:	008056e4 	muli	r2,zero,347
  8049d0:	008058f4 	movhi	r2,355
  8049d4:	00804b08 	cmpgei	r2,zero,300
  8049d8:	008056fc 	xorhi	r2,zero,347
  8049dc:	00805990 	cmplti	r2,zero,358
  8049e0:	00804b08 	cmpgei	r2,zero,300
  8049e4:	0080597c 	xorhi	r2,zero,357
  8049e8:	00805944 	movi	r2,357
  8049ec:	00805944 	movi	r2,357
  8049f0:	00805944 	movi	r2,357
  8049f4:	00805944 	movi	r2,357
  8049f8:	00805944 	movi	r2,357
  8049fc:	00805944 	movi	r2,357
  804a00:	00805944 	movi	r2,357
  804a04:	00805944 	movi	r2,357
  804a08:	00805944 	movi	r2,357
  804a0c:	00804b08 	cmpgei	r2,zero,300
  804a10:	00804b08 	cmpgei	r2,zero,300
  804a14:	00804b08 	cmpgei	r2,zero,300
  804a18:	00804b08 	cmpgei	r2,zero,300
  804a1c:	00804b08 	cmpgei	r2,zero,300
  804a20:	00804b08 	cmpgei	r2,zero,300
  804a24:	00804b08 	cmpgei	r2,zero,300
  804a28:	00804b08 	cmpgei	r2,zero,300
  804a2c:	00804b08 	cmpgei	r2,zero,300
  804a30:	00804b08 	cmpgei	r2,zero,300
  804a34:	00805160 	cmpeqi	r2,zero,325
  804a38:	008057cc 	andi	r2,zero,351
  804a3c:	00804b08 	cmpgei	r2,zero,300
  804a40:	008057cc 	andi	r2,zero,351
  804a44:	00804b08 	cmpgei	r2,zero,300
  804a48:	00804b08 	cmpgei	r2,zero,300
  804a4c:	00804b08 	cmpgei	r2,zero,300
  804a50:	00804b08 	cmpgei	r2,zero,300
  804a54:	00805930 	cmpltui	r2,zero,356
  804a58:	00804b08 	cmpgei	r2,zero,300
  804a5c:	00804b08 	cmpgei	r2,zero,300
  804a60:	00805214 	movui	r2,328
  804a64:	00804b08 	cmpgei	r2,zero,300
  804a68:	00804b08 	cmpgei	r2,zero,300
  804a6c:	00804b08 	cmpgei	r2,zero,300
  804a70:	00804b08 	cmpgei	r2,zero,300
  804a74:	00804b08 	cmpgei	r2,zero,300
  804a78:	00805260 	cmpeqi	r2,zero,329
  804a7c:	00804b08 	cmpgei	r2,zero,300
  804a80:	00804b08 	cmpgei	r2,zero,300
  804a84:	00805880 	call	80588 <__alt_mem_sdram_controller-0x77fa78>
  804a88:	00804b08 	cmpgei	r2,zero,300
  804a8c:	00804b08 	cmpgei	r2,zero,300
  804a90:	00804b08 	cmpgei	r2,zero,300
  804a94:	00804b08 	cmpgei	r2,zero,300
  804a98:	00804b08 	cmpgei	r2,zero,300
  804a9c:	00804b08 	cmpgei	r2,zero,300
  804aa0:	00804b08 	cmpgei	r2,zero,300
  804aa4:	00804b08 	cmpgei	r2,zero,300
  804aa8:	00804b08 	cmpgei	r2,zero,300
  804aac:	00804b08 	cmpgei	r2,zero,300
  804ab0:	00805854 	movui	r2,353
  804ab4:	0080516c 	andhi	r2,zero,325
  804ab8:	008057cc 	andi	r2,zero,351
  804abc:	008057cc 	andi	r2,zero,351
  804ac0:	008057cc 	andi	r2,zero,351
  804ac4:	008057b8 	rdprs	r2,zero,350
  804ac8:	0080516c 	andhi	r2,zero,325
  804acc:	00804b08 	cmpgei	r2,zero,300
  804ad0:	00804b08 	cmpgei	r2,zero,300
  804ad4:	00805740 	call	80574 <__alt_mem_sdram_controller-0x77fa8c>
  804ad8:	00804b08 	cmpgei	r2,zero,300
  804adc:	00805710 	cmplti	r2,zero,348
  804ae0:	00805220 	cmpeqi	r2,zero,328
  804ae4:	00805770 	cmpltui	r2,zero,349
  804ae8:	0080575c 	xori	r2,zero,349
  804aec:	00804b08 	cmpgei	r2,zero,300
  804af0:	008059ec 	andhi	r2,zero,359
  804af4:	00804b08 	cmpgei	r2,zero,300
  804af8:	0080526c 	andhi	r2,zero,329
  804afc:	00804b08 	cmpgei	r2,zero,300
  804b00:	00804b08 	cmpgei	r2,zero,300
  804b04:	008058e4 	muli	r2,zero,355
  804b08:	d9014d17 	ldw	r4,1332(sp)
  804b0c:	2000ce26 	beq	r4,zero,804e48 <___vfprintf_internal_r+0x6d4>
  804b10:	01400044 	movi	r5,1
  804b14:	d9800f04 	addi	r6,sp,60
  804b18:	d9c14015 	stw	r7,1280(sp)
  804b1c:	d9414515 	stw	r5,1300(sp)
  804b20:	d9814115 	stw	r6,1284(sp)
  804b24:	280f883a 	mov	r7,r5
  804b28:	d9000f05 	stb	r4,60(sp)
  804b2c:	d8000405 	stb	zero,16(sp)
  804b30:	d8014615 	stw	zero,1304(sp)
  804b34:	d8c14c17 	ldw	r3,1328(sp)
  804b38:	1880008c 	andi	r2,r3,2
  804b3c:	1005003a 	cmpeq	r2,r2,zero
  804b40:	d8815015 	stw	r2,1344(sp)
  804b44:	1000031e 	bne	r2,zero,804b54 <___vfprintf_internal_r+0x3e0>
  804b48:	d9014517 	ldw	r4,1300(sp)
  804b4c:	21000084 	addi	r4,r4,2
  804b50:	d9014515 	stw	r4,1300(sp)
  804b54:	d9414c17 	ldw	r5,1328(sp)
  804b58:	2940210c 	andi	r5,r5,132
  804b5c:	d9414e15 	stw	r5,1336(sp)
  804b60:	28002d1e 	bne	r5,zero,804c18 <___vfprintf_internal_r+0x4a4>
  804b64:	d9814a17 	ldw	r6,1320(sp)
  804b68:	d8814517 	ldw	r2,1300(sp)
  804b6c:	30a1c83a 	sub	r16,r6,r2
  804b70:	0400290e 	bge	zero,r16,804c18 <___vfprintf_internal_r+0x4a4>
  804b74:	00800404 	movi	r2,16
  804b78:	1404580e 	bge	r2,r16,805cdc <___vfprintf_internal_r+0x1568>
  804b7c:	dc800e17 	ldw	r18,56(sp)
  804b80:	dc400d17 	ldw	r17,52(sp)
  804b84:	1027883a 	mov	r19,r2
  804b88:	07002074 	movhi	fp,129
  804b8c:	e703e284 	addi	fp,fp,3978
  804b90:	050001c4 	movi	r20,7
  804b94:	00000306 	br	804ba4 <___vfprintf_internal_r+0x430>
  804b98:	843ffc04 	addi	r16,r16,-16
  804b9c:	ad400204 	addi	r21,r21,8
  804ba0:	9c00130e 	bge	r19,r16,804bf0 <___vfprintf_internal_r+0x47c>
  804ba4:	94800404 	addi	r18,r18,16
  804ba8:	8c400044 	addi	r17,r17,1
  804bac:	af000015 	stw	fp,0(r21)
  804bb0:	acc00115 	stw	r19,4(r21)
  804bb4:	dc800e15 	stw	r18,56(sp)
  804bb8:	dc400d15 	stw	r17,52(sp)
  804bbc:	a47ff60e 	bge	r20,r17,804b98 <___vfprintf_internal_r+0x424>
  804bc0:	d9014f17 	ldw	r4,1340(sp)
  804bc4:	b00b883a 	mov	r5,r22
  804bc8:	d9800c04 	addi	r6,sp,48
  804bcc:	d9c15115 	stw	r7,1348(sp)
  804bd0:	080471c0 	call	80471c <__sprint_r>
  804bd4:	d9c15117 	ldw	r7,1348(sp)
  804bd8:	10009e1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  804bdc:	843ffc04 	addi	r16,r16,-16
  804be0:	dc800e17 	ldw	r18,56(sp)
  804be4:	dc400d17 	ldw	r17,52(sp)
  804be8:	dd401904 	addi	r21,sp,100
  804bec:	9c3fed16 	blt	r19,r16,804ba4 <___vfprintf_internal_r+0x430>
  804bf0:	9425883a 	add	r18,r18,r16
  804bf4:	8c400044 	addi	r17,r17,1
  804bf8:	008001c4 	movi	r2,7
  804bfc:	af000015 	stw	fp,0(r21)
  804c00:	ac000115 	stw	r16,4(r21)
  804c04:	dc800e15 	stw	r18,56(sp)
  804c08:	dc400d15 	stw	r17,52(sp)
  804c0c:	1441f516 	blt	r2,r17,8053e4 <___vfprintf_internal_r+0xc70>
  804c10:	ad400204 	addi	r21,r21,8
  804c14:	00000206 	br	804c20 <___vfprintf_internal_r+0x4ac>
  804c18:	dc800e17 	ldw	r18,56(sp)
  804c1c:	dc400d17 	ldw	r17,52(sp)
  804c20:	d8800407 	ldb	r2,16(sp)
  804c24:	10000b26 	beq	r2,zero,804c54 <___vfprintf_internal_r+0x4e0>
  804c28:	00800044 	movi	r2,1
  804c2c:	94800044 	addi	r18,r18,1
  804c30:	8c400044 	addi	r17,r17,1
  804c34:	a8800115 	stw	r2,4(r21)
  804c38:	d8c00404 	addi	r3,sp,16
  804c3c:	008001c4 	movi	r2,7
  804c40:	a8c00015 	stw	r3,0(r21)
  804c44:	dc800e15 	stw	r18,56(sp)
  804c48:	dc400d15 	stw	r17,52(sp)
  804c4c:	1441da16 	blt	r2,r17,8053b8 <___vfprintf_internal_r+0xc44>
  804c50:	ad400204 	addi	r21,r21,8
  804c54:	d9015017 	ldw	r4,1344(sp)
  804c58:	20000b1e 	bne	r4,zero,804c88 <___vfprintf_internal_r+0x514>
  804c5c:	d8800444 	addi	r2,sp,17
  804c60:	94800084 	addi	r18,r18,2
  804c64:	8c400044 	addi	r17,r17,1
  804c68:	a8800015 	stw	r2,0(r21)
  804c6c:	00c00084 	movi	r3,2
  804c70:	008001c4 	movi	r2,7
  804c74:	a8c00115 	stw	r3,4(r21)
  804c78:	dc800e15 	stw	r18,56(sp)
  804c7c:	dc400d15 	stw	r17,52(sp)
  804c80:	1441c216 	blt	r2,r17,80538c <___vfprintf_internal_r+0xc18>
  804c84:	ad400204 	addi	r21,r21,8
  804c88:	d9414e17 	ldw	r5,1336(sp)
  804c8c:	00802004 	movi	r2,128
  804c90:	2880b126 	beq	r5,r2,804f58 <___vfprintf_internal_r+0x7e4>
  804c94:	d8c14617 	ldw	r3,1304(sp)
  804c98:	19e1c83a 	sub	r16,r3,r7
  804c9c:	0400260e 	bge	zero,r16,804d38 <___vfprintf_internal_r+0x5c4>
  804ca0:	00800404 	movi	r2,16
  804ca4:	1403c90e 	bge	r2,r16,805bcc <___vfprintf_internal_r+0x1458>
  804ca8:	1027883a 	mov	r19,r2
  804cac:	07002074 	movhi	fp,129
  804cb0:	e703de84 	addi	fp,fp,3962
  804cb4:	050001c4 	movi	r20,7
  804cb8:	00000306 	br	804cc8 <___vfprintf_internal_r+0x554>
  804cbc:	843ffc04 	addi	r16,r16,-16
  804cc0:	ad400204 	addi	r21,r21,8
  804cc4:	9c00130e 	bge	r19,r16,804d14 <___vfprintf_internal_r+0x5a0>
  804cc8:	94800404 	addi	r18,r18,16
  804ccc:	8c400044 	addi	r17,r17,1
  804cd0:	af000015 	stw	fp,0(r21)
  804cd4:	acc00115 	stw	r19,4(r21)
  804cd8:	dc800e15 	stw	r18,56(sp)
  804cdc:	dc400d15 	stw	r17,52(sp)
  804ce0:	a47ff60e 	bge	r20,r17,804cbc <___vfprintf_internal_r+0x548>
  804ce4:	d9014f17 	ldw	r4,1340(sp)
  804ce8:	b00b883a 	mov	r5,r22
  804cec:	d9800c04 	addi	r6,sp,48
  804cf0:	d9c15115 	stw	r7,1348(sp)
  804cf4:	080471c0 	call	80471c <__sprint_r>
  804cf8:	d9c15117 	ldw	r7,1348(sp)
  804cfc:	1000551e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  804d00:	843ffc04 	addi	r16,r16,-16
  804d04:	dc800e17 	ldw	r18,56(sp)
  804d08:	dc400d17 	ldw	r17,52(sp)
  804d0c:	dd401904 	addi	r21,sp,100
  804d10:	9c3fed16 	blt	r19,r16,804cc8 <___vfprintf_internal_r+0x554>
  804d14:	9425883a 	add	r18,r18,r16
  804d18:	8c400044 	addi	r17,r17,1
  804d1c:	008001c4 	movi	r2,7
  804d20:	af000015 	stw	fp,0(r21)
  804d24:	ac000115 	stw	r16,4(r21)
  804d28:	dc800e15 	stw	r18,56(sp)
  804d2c:	dc400d15 	stw	r17,52(sp)
  804d30:	14418216 	blt	r2,r17,80533c <___vfprintf_internal_r+0xbc8>
  804d34:	ad400204 	addi	r21,r21,8
  804d38:	d9014c17 	ldw	r4,1328(sp)
  804d3c:	2080400c 	andi	r2,r4,256
  804d40:	10004a1e 	bne	r2,zero,804e6c <___vfprintf_internal_r+0x6f8>
  804d44:	d9414117 	ldw	r5,1284(sp)
  804d48:	91e5883a 	add	r18,r18,r7
  804d4c:	8c400044 	addi	r17,r17,1
  804d50:	008001c4 	movi	r2,7
  804d54:	a9400015 	stw	r5,0(r21)
  804d58:	a9c00115 	stw	r7,4(r21)
  804d5c:	dc800e15 	stw	r18,56(sp)
  804d60:	dc400d15 	stw	r17,52(sp)
  804d64:	14416716 	blt	r2,r17,805304 <___vfprintf_internal_r+0xb90>
  804d68:	a8c00204 	addi	r3,r21,8
  804d6c:	d9814c17 	ldw	r6,1328(sp)
  804d70:	3080010c 	andi	r2,r6,4
  804d74:	10002826 	beq	r2,zero,804e18 <___vfprintf_internal_r+0x6a4>
  804d78:	d8814a17 	ldw	r2,1320(sp)
  804d7c:	d9014517 	ldw	r4,1300(sp)
  804d80:	1121c83a 	sub	r16,r2,r4
  804d84:	0400240e 	bge	zero,r16,804e18 <___vfprintf_internal_r+0x6a4>
  804d88:	00800404 	movi	r2,16
  804d8c:	14044f0e 	bge	r2,r16,805ecc <___vfprintf_internal_r+0x1758>
  804d90:	dc400d17 	ldw	r17,52(sp)
  804d94:	1027883a 	mov	r19,r2
  804d98:	07002074 	movhi	fp,129
  804d9c:	e703e284 	addi	fp,fp,3978
  804da0:	050001c4 	movi	r20,7
  804da4:	00000306 	br	804db4 <___vfprintf_internal_r+0x640>
  804da8:	843ffc04 	addi	r16,r16,-16
  804dac:	18c00204 	addi	r3,r3,8
  804db0:	9c00110e 	bge	r19,r16,804df8 <___vfprintf_internal_r+0x684>
  804db4:	94800404 	addi	r18,r18,16
  804db8:	8c400044 	addi	r17,r17,1
  804dbc:	1f000015 	stw	fp,0(r3)
  804dc0:	1cc00115 	stw	r19,4(r3)
  804dc4:	dc800e15 	stw	r18,56(sp)
  804dc8:	dc400d15 	stw	r17,52(sp)
  804dcc:	a47ff60e 	bge	r20,r17,804da8 <___vfprintf_internal_r+0x634>
  804dd0:	d9014f17 	ldw	r4,1340(sp)
  804dd4:	b00b883a 	mov	r5,r22
  804dd8:	d9800c04 	addi	r6,sp,48
  804ddc:	080471c0 	call	80471c <__sprint_r>
  804de0:	10001c1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  804de4:	843ffc04 	addi	r16,r16,-16
  804de8:	dc800e17 	ldw	r18,56(sp)
  804dec:	dc400d17 	ldw	r17,52(sp)
  804df0:	d8c01904 	addi	r3,sp,100
  804df4:	9c3fef16 	blt	r19,r16,804db4 <___vfprintf_internal_r+0x640>
  804df8:	9425883a 	add	r18,r18,r16
  804dfc:	8c400044 	addi	r17,r17,1
  804e00:	008001c4 	movi	r2,7
  804e04:	1f000015 	stw	fp,0(r3)
  804e08:	1c000115 	stw	r16,4(r3)
  804e0c:	dc800e15 	stw	r18,56(sp)
  804e10:	dc400d15 	stw	r17,52(sp)
  804e14:	1440cb16 	blt	r2,r17,805144 <___vfprintf_internal_r+0x9d0>
  804e18:	d8814a17 	ldw	r2,1320(sp)
  804e1c:	d9414517 	ldw	r5,1300(sp)
  804e20:	1140010e 	bge	r2,r5,804e28 <___vfprintf_internal_r+0x6b4>
  804e24:	2805883a 	mov	r2,r5
  804e28:	d9814b17 	ldw	r6,1324(sp)
  804e2c:	308d883a 	add	r6,r6,r2
  804e30:	d9814b15 	stw	r6,1324(sp)
  804e34:	90013b1e 	bne	r18,zero,805324 <___vfprintf_internal_r+0xbb0>
  804e38:	d9c14017 	ldw	r7,1280(sp)
  804e3c:	dd401904 	addi	r21,sp,100
  804e40:	d8000d15 	stw	zero,52(sp)
  804e44:	003ea706 	br	8048e4 <___vfprintf_internal_r+0x170>
  804e48:	d8800e17 	ldw	r2,56(sp)
  804e4c:	10053f1e 	bne	r2,zero,80634c <___vfprintf_internal_r+0x1bd8>
  804e50:	d8000d15 	stw	zero,52(sp)
  804e54:	b080030b 	ldhu	r2,12(r22)
  804e58:	1080100c 	andi	r2,r2,64
  804e5c:	103e8726 	beq	r2,zero,80487c <___vfprintf_internal_r+0x108>
  804e60:	00bfffc4 	movi	r2,-1
  804e64:	d8814b15 	stw	r2,1324(sp)
  804e68:	003e8406 	br	80487c <___vfprintf_internal_r+0x108>
  804e6c:	d9814d17 	ldw	r6,1332(sp)
  804e70:	00801944 	movi	r2,101
  804e74:	11806e16 	blt	r2,r6,805030 <___vfprintf_internal_r+0x8bc>
  804e78:	d9414717 	ldw	r5,1308(sp)
  804e7c:	00c00044 	movi	r3,1
  804e80:	1943430e 	bge	r3,r5,805b90 <___vfprintf_internal_r+0x141c>
  804e84:	d8814117 	ldw	r2,1284(sp)
  804e88:	94800044 	addi	r18,r18,1
  804e8c:	8c400044 	addi	r17,r17,1
  804e90:	a8800015 	stw	r2,0(r21)
  804e94:	008001c4 	movi	r2,7
  804e98:	a8c00115 	stw	r3,4(r21)
  804e9c:	dc800e15 	stw	r18,56(sp)
  804ea0:	dc400d15 	stw	r17,52(sp)
  804ea4:	1441ca16 	blt	r2,r17,8055d0 <___vfprintf_internal_r+0xe5c>
  804ea8:	a8c00204 	addi	r3,r21,8
  804eac:	d9014917 	ldw	r4,1316(sp)
  804eb0:	00800044 	movi	r2,1
  804eb4:	94800044 	addi	r18,r18,1
  804eb8:	8c400044 	addi	r17,r17,1
  804ebc:	18800115 	stw	r2,4(r3)
  804ec0:	008001c4 	movi	r2,7
  804ec4:	19000015 	stw	r4,0(r3)
  804ec8:	dc800e15 	stw	r18,56(sp)
  804ecc:	dc400d15 	stw	r17,52(sp)
  804ed0:	1441b616 	blt	r2,r17,8055ac <___vfprintf_internal_r+0xe38>
  804ed4:	1cc00204 	addi	r19,r3,8
  804ed8:	d9014217 	ldw	r4,1288(sp)
  804edc:	d9414317 	ldw	r5,1292(sp)
  804ee0:	000d883a 	mov	r6,zero
  804ee4:	000f883a 	mov	r7,zero
  804ee8:	080c33c0 	call	80c33c <__nedf2>
  804eec:	10017426 	beq	r2,zero,8054c0 <___vfprintf_internal_r+0xd4c>
  804ef0:	d9414717 	ldw	r5,1308(sp)
  804ef4:	d9814117 	ldw	r6,1284(sp)
  804ef8:	8c400044 	addi	r17,r17,1
  804efc:	2c85883a 	add	r2,r5,r18
  804f00:	14bfffc4 	addi	r18,r2,-1
  804f04:	28bfffc4 	addi	r2,r5,-1
  804f08:	30c00044 	addi	r3,r6,1
  804f0c:	98800115 	stw	r2,4(r19)
  804f10:	008001c4 	movi	r2,7
  804f14:	98c00015 	stw	r3,0(r19)
  804f18:	dc800e15 	stw	r18,56(sp)
  804f1c:	dc400d15 	stw	r17,52(sp)
  804f20:	14418e16 	blt	r2,r17,80555c <___vfprintf_internal_r+0xde8>
  804f24:	9cc00204 	addi	r19,r19,8
  804f28:	d9414817 	ldw	r5,1312(sp)
  804f2c:	d8800804 	addi	r2,sp,32
  804f30:	8c400044 	addi	r17,r17,1
  804f34:	9165883a 	add	r18,r18,r5
  804f38:	98800015 	stw	r2,0(r19)
  804f3c:	008001c4 	movi	r2,7
  804f40:	99400115 	stw	r5,4(r19)
  804f44:	dc800e15 	stw	r18,56(sp)
  804f48:	dc400d15 	stw	r17,52(sp)
  804f4c:	1440ed16 	blt	r2,r17,805304 <___vfprintf_internal_r+0xb90>
  804f50:	98c00204 	addi	r3,r19,8
  804f54:	003f8506 	br	804d6c <___vfprintf_internal_r+0x5f8>
  804f58:	d9814a17 	ldw	r6,1320(sp)
  804f5c:	d8814517 	ldw	r2,1300(sp)
  804f60:	30a1c83a 	sub	r16,r6,r2
  804f64:	043f4b0e 	bge	zero,r16,804c94 <___vfprintf_internal_r+0x520>
  804f68:	00800404 	movi	r2,16
  804f6c:	1404340e 	bge	r2,r16,806040 <___vfprintf_internal_r+0x18cc>
  804f70:	1027883a 	mov	r19,r2
  804f74:	07002074 	movhi	fp,129
  804f78:	e703de84 	addi	fp,fp,3962
  804f7c:	050001c4 	movi	r20,7
  804f80:	00000306 	br	804f90 <___vfprintf_internal_r+0x81c>
  804f84:	843ffc04 	addi	r16,r16,-16
  804f88:	ad400204 	addi	r21,r21,8
  804f8c:	9c00130e 	bge	r19,r16,804fdc <___vfprintf_internal_r+0x868>
  804f90:	94800404 	addi	r18,r18,16
  804f94:	8c400044 	addi	r17,r17,1
  804f98:	af000015 	stw	fp,0(r21)
  804f9c:	acc00115 	stw	r19,4(r21)
  804fa0:	dc800e15 	stw	r18,56(sp)
  804fa4:	dc400d15 	stw	r17,52(sp)
  804fa8:	a47ff60e 	bge	r20,r17,804f84 <___vfprintf_internal_r+0x810>
  804fac:	d9014f17 	ldw	r4,1340(sp)
  804fb0:	b00b883a 	mov	r5,r22
  804fb4:	d9800c04 	addi	r6,sp,48
  804fb8:	d9c15115 	stw	r7,1348(sp)
  804fbc:	080471c0 	call	80471c <__sprint_r>
  804fc0:	d9c15117 	ldw	r7,1348(sp)
  804fc4:	103fa31e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  804fc8:	843ffc04 	addi	r16,r16,-16
  804fcc:	dc800e17 	ldw	r18,56(sp)
  804fd0:	dc400d17 	ldw	r17,52(sp)
  804fd4:	dd401904 	addi	r21,sp,100
  804fd8:	9c3fed16 	blt	r19,r16,804f90 <___vfprintf_internal_r+0x81c>
  804fdc:	9425883a 	add	r18,r18,r16
  804fe0:	8c400044 	addi	r17,r17,1
  804fe4:	008001c4 	movi	r2,7
  804fe8:	af000015 	stw	fp,0(r21)
  804fec:	ac000115 	stw	r16,4(r21)
  804ff0:	dc800e15 	stw	r18,56(sp)
  804ff4:	dc400d15 	stw	r17,52(sp)
  804ff8:	14416116 	blt	r2,r17,805580 <___vfprintf_internal_r+0xe0c>
  804ffc:	ad400204 	addi	r21,r21,8
  805000:	003f2406 	br	804c94 <___vfprintf_internal_r+0x520>
  805004:	d9014f17 	ldw	r4,1340(sp)
  805008:	08081e40 	call	8081e4 <__sinit>
  80500c:	d9c15117 	ldw	r7,1348(sp)
  805010:	003def06 	br	8047d0 <___vfprintf_internal_r+0x5c>
  805014:	d9014f17 	ldw	r4,1340(sp)
  805018:	b00b883a 	mov	r5,r22
  80501c:	d9c15115 	stw	r7,1348(sp)
  805020:	08066440 	call	806644 <__swsetup_r>
  805024:	d9c15117 	ldw	r7,1348(sp)
  805028:	103dee26 	beq	r2,zero,8047e4 <___vfprintf_internal_r+0x70>
  80502c:	003f8c06 	br	804e60 <___vfprintf_internal_r+0x6ec>
  805030:	d9014217 	ldw	r4,1288(sp)
  805034:	d9414317 	ldw	r5,1292(sp)
  805038:	000d883a 	mov	r6,zero
  80503c:	000f883a 	mov	r7,zero
  805040:	080c2b40 	call	80c2b4 <__eqdf2>
  805044:	1000f21e 	bne	r2,zero,805410 <___vfprintf_internal_r+0xc9c>
  805048:	00802074 	movhi	r2,129
  80504c:	1083de04 	addi	r2,r2,3960
  805050:	94800044 	addi	r18,r18,1
  805054:	8c400044 	addi	r17,r17,1
  805058:	a8800015 	stw	r2,0(r21)
  80505c:	00c00044 	movi	r3,1
  805060:	008001c4 	movi	r2,7
  805064:	a8c00115 	stw	r3,4(r21)
  805068:	dc800e15 	stw	r18,56(sp)
  80506c:	dc400d15 	stw	r17,52(sp)
  805070:	1442fa16 	blt	r2,r17,805c5c <___vfprintf_internal_r+0x14e8>
  805074:	a8c00204 	addi	r3,r21,8
  805078:	d8800517 	ldw	r2,20(sp)
  80507c:	d9014717 	ldw	r4,1308(sp)
  805080:	11015c0e 	bge	r2,r4,8055f4 <___vfprintf_internal_r+0xe80>
  805084:	dc400d17 	ldw	r17,52(sp)
  805088:	d9814917 	ldw	r6,1316(sp)
  80508c:	00800044 	movi	r2,1
  805090:	94800044 	addi	r18,r18,1
  805094:	8c400044 	addi	r17,r17,1
  805098:	18800115 	stw	r2,4(r3)
  80509c:	008001c4 	movi	r2,7
  8050a0:	19800015 	stw	r6,0(r3)
  8050a4:	dc800e15 	stw	r18,56(sp)
  8050a8:	dc400d15 	stw	r17,52(sp)
  8050ac:	14431016 	blt	r2,r17,805cf0 <___vfprintf_internal_r+0x157c>
  8050b0:	18c00204 	addi	r3,r3,8
  8050b4:	d8814717 	ldw	r2,1308(sp)
  8050b8:	143fffc4 	addi	r16,r2,-1
  8050bc:	043f2b0e 	bge	zero,r16,804d6c <___vfprintf_internal_r+0x5f8>
  8050c0:	00800404 	movi	r2,16
  8050c4:	1402a20e 	bge	r2,r16,805b50 <___vfprintf_internal_r+0x13dc>
  8050c8:	dc400d17 	ldw	r17,52(sp)
  8050cc:	1027883a 	mov	r19,r2
  8050d0:	07002074 	movhi	fp,129
  8050d4:	e703de84 	addi	fp,fp,3962
  8050d8:	050001c4 	movi	r20,7
  8050dc:	00000306 	br	8050ec <___vfprintf_internal_r+0x978>
  8050e0:	18c00204 	addi	r3,r3,8
  8050e4:	843ffc04 	addi	r16,r16,-16
  8050e8:	9c029c0e 	bge	r19,r16,805b5c <___vfprintf_internal_r+0x13e8>
  8050ec:	94800404 	addi	r18,r18,16
  8050f0:	8c400044 	addi	r17,r17,1
  8050f4:	1f000015 	stw	fp,0(r3)
  8050f8:	1cc00115 	stw	r19,4(r3)
  8050fc:	dc800e15 	stw	r18,56(sp)
  805100:	dc400d15 	stw	r17,52(sp)
  805104:	a47ff60e 	bge	r20,r17,8050e0 <___vfprintf_internal_r+0x96c>
  805108:	d9014f17 	ldw	r4,1340(sp)
  80510c:	b00b883a 	mov	r5,r22
  805110:	d9800c04 	addi	r6,sp,48
  805114:	080471c0 	call	80471c <__sprint_r>
  805118:	103f4e1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  80511c:	dc800e17 	ldw	r18,56(sp)
  805120:	dc400d17 	ldw	r17,52(sp)
  805124:	d8c01904 	addi	r3,sp,100
  805128:	003fee06 	br	8050e4 <___vfprintf_internal_r+0x970>
  80512c:	d8802c0b 	ldhu	r2,176(sp)
  805130:	00ffffc4 	movi	r3,-1
  805134:	d8c14b15 	stw	r3,1324(sp)
  805138:	1080100c 	andi	r2,r2,64
  80513c:	103dcc1e 	bne	r2,zero,804870 <___vfprintf_internal_r+0xfc>
  805140:	003dce06 	br	80487c <___vfprintf_internal_r+0x108>
  805144:	d9014f17 	ldw	r4,1340(sp)
  805148:	b00b883a 	mov	r5,r22
  80514c:	d9800c04 	addi	r6,sp,48
  805150:	080471c0 	call	80471c <__sprint_r>
  805154:	103f3f1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805158:	dc800e17 	ldw	r18,56(sp)
  80515c:	003f2e06 	br	804e18 <___vfprintf_internal_r+0x6a4>
  805160:	d9414c17 	ldw	r5,1328(sp)
  805164:	29400414 	ori	r5,r5,16
  805168:	d9414c15 	stw	r5,1328(sp)
  80516c:	d9814c17 	ldw	r6,1328(sp)
  805170:	3080080c 	andi	r2,r6,32
  805174:	10014f1e 	bne	r2,zero,8056b4 <___vfprintf_internal_r+0xf40>
  805178:	d8c14c17 	ldw	r3,1328(sp)
  80517c:	1880040c 	andi	r2,r3,16
  805180:	1002ea1e 	bne	r2,zero,805d2c <___vfprintf_internal_r+0x15b8>
  805184:	d9014c17 	ldw	r4,1328(sp)
  805188:	2080100c 	andi	r2,r4,64
  80518c:	1002e726 	beq	r2,zero,805d2c <___vfprintf_internal_r+0x15b8>
  805190:	3880000f 	ldh	r2,0(r7)
  805194:	39c00104 	addi	r7,r7,4
  805198:	d9c14015 	stw	r7,1280(sp)
  80519c:	1023d7fa 	srai	r17,r2,31
  8051a0:	1021883a 	mov	r16,r2
  8051a4:	88037216 	blt	r17,zero,805f70 <___vfprintf_internal_r+0x17fc>
  8051a8:	01000044 	movi	r4,1
  8051ac:	98000416 	blt	r19,zero,8051c0 <___vfprintf_internal_r+0xa4c>
  8051b0:	d8c14c17 	ldw	r3,1328(sp)
  8051b4:	00bfdfc4 	movi	r2,-129
  8051b8:	1886703a 	and	r3,r3,r2
  8051bc:	d8c14c15 	stw	r3,1328(sp)
  8051c0:	8444b03a 	or	r2,r16,r17
  8051c4:	1002261e 	bne	r2,zero,805a60 <___vfprintf_internal_r+0x12ec>
  8051c8:	9802251e 	bne	r19,zero,805a60 <___vfprintf_internal_r+0x12ec>
  8051cc:	20803fcc 	andi	r2,r4,255
  8051d0:	10029b26 	beq	r2,zero,805c40 <___vfprintf_internal_r+0x14cc>
  8051d4:	d8c01904 	addi	r3,sp,100
  8051d8:	dd000f04 	addi	r20,sp,60
  8051dc:	d8c14115 	stw	r3,1284(sp)
  8051e0:	d8c14117 	ldw	r3,1284(sp)
  8051e4:	dcc14515 	stw	r19,1300(sp)
  8051e8:	a0c5c83a 	sub	r2,r20,r3
  8051ec:	11c00a04 	addi	r7,r2,40
  8051f0:	99c0010e 	bge	r19,r7,8051f8 <___vfprintf_internal_r+0xa84>
  8051f4:	d9c14515 	stw	r7,1300(sp)
  8051f8:	dcc14615 	stw	r19,1304(sp)
  8051fc:	d8800407 	ldb	r2,16(sp)
  805200:	103e4c26 	beq	r2,zero,804b34 <___vfprintf_internal_r+0x3c0>
  805204:	d8814517 	ldw	r2,1300(sp)
  805208:	10800044 	addi	r2,r2,1
  80520c:	d8814515 	stw	r2,1300(sp)
  805210:	003e4806 	br	804b34 <___vfprintf_internal_r+0x3c0>
  805214:	d9814c17 	ldw	r6,1328(sp)
  805218:	31800414 	ori	r6,r6,16
  80521c:	d9814c15 	stw	r6,1328(sp)
  805220:	d8c14c17 	ldw	r3,1328(sp)
  805224:	1880080c 	andi	r2,r3,32
  805228:	1001271e 	bne	r2,zero,8056c8 <___vfprintf_internal_r+0xf54>
  80522c:	d9414c17 	ldw	r5,1328(sp)
  805230:	2880040c 	andi	r2,r5,16
  805234:	1002b61e 	bne	r2,zero,805d10 <___vfprintf_internal_r+0x159c>
  805238:	d9814c17 	ldw	r6,1328(sp)
  80523c:	3080100c 	andi	r2,r6,64
  805240:	1002b326 	beq	r2,zero,805d10 <___vfprintf_internal_r+0x159c>
  805244:	3c00000b 	ldhu	r16,0(r7)
  805248:	0009883a 	mov	r4,zero
  80524c:	39c00104 	addi	r7,r7,4
  805250:	0023883a 	mov	r17,zero
  805254:	d9c14015 	stw	r7,1280(sp)
  805258:	d8000405 	stb	zero,16(sp)
  80525c:	003fd306 	br	8051ac <___vfprintf_internal_r+0xa38>
  805260:	d9014c17 	ldw	r4,1328(sp)
  805264:	21000414 	ori	r4,r4,16
  805268:	d9014c15 	stw	r4,1328(sp)
  80526c:	d9414c17 	ldw	r5,1328(sp)
  805270:	2880080c 	andi	r2,r5,32
  805274:	1001081e 	bne	r2,zero,805698 <___vfprintf_internal_r+0xf24>
  805278:	d8c14c17 	ldw	r3,1328(sp)
  80527c:	1880040c 	andi	r2,r3,16
  805280:	1002b01e 	bne	r2,zero,805d44 <___vfprintf_internal_r+0x15d0>
  805284:	d9014c17 	ldw	r4,1328(sp)
  805288:	2080100c 	andi	r2,r4,64
  80528c:	1002ad26 	beq	r2,zero,805d44 <___vfprintf_internal_r+0x15d0>
  805290:	3c00000b 	ldhu	r16,0(r7)
  805294:	01000044 	movi	r4,1
  805298:	39c00104 	addi	r7,r7,4
  80529c:	0023883a 	mov	r17,zero
  8052a0:	d9c14015 	stw	r7,1280(sp)
  8052a4:	d8000405 	stb	zero,16(sp)
  8052a8:	003fc006 	br	8051ac <___vfprintf_internal_r+0xa38>
  8052ac:	d9014f17 	ldw	r4,1340(sp)
  8052b0:	b00b883a 	mov	r5,r22
  8052b4:	d9800c04 	addi	r6,sp,48
  8052b8:	080471c0 	call	80471c <__sprint_r>
  8052bc:	103ee51e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8052c0:	dc800e17 	ldw	r18,56(sp)
  8052c4:	d8c01904 	addi	r3,sp,100
  8052c8:	d9814c17 	ldw	r6,1328(sp)
  8052cc:	3080004c 	andi	r2,r6,1
  8052d0:	1005003a 	cmpeq	r2,r2,zero
  8052d4:	103ea51e 	bne	r2,zero,804d6c <___vfprintf_internal_r+0x5f8>
  8052d8:	00800044 	movi	r2,1
  8052dc:	dc400d17 	ldw	r17,52(sp)
  8052e0:	18800115 	stw	r2,4(r3)
  8052e4:	d8814917 	ldw	r2,1316(sp)
  8052e8:	94800044 	addi	r18,r18,1
  8052ec:	8c400044 	addi	r17,r17,1
  8052f0:	18800015 	stw	r2,0(r3)
  8052f4:	008001c4 	movi	r2,7
  8052f8:	dc800e15 	stw	r18,56(sp)
  8052fc:	dc400d15 	stw	r17,52(sp)
  805300:	14421e0e 	bge	r2,r17,805b7c <___vfprintf_internal_r+0x1408>
  805304:	d9014f17 	ldw	r4,1340(sp)
  805308:	b00b883a 	mov	r5,r22
  80530c:	d9800c04 	addi	r6,sp,48
  805310:	080471c0 	call	80471c <__sprint_r>
  805314:	103ecf1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805318:	dc800e17 	ldw	r18,56(sp)
  80531c:	d8c01904 	addi	r3,sp,100
  805320:	003e9206 	br	804d6c <___vfprintf_internal_r+0x5f8>
  805324:	d9014f17 	ldw	r4,1340(sp)
  805328:	b00b883a 	mov	r5,r22
  80532c:	d9800c04 	addi	r6,sp,48
  805330:	080471c0 	call	80471c <__sprint_r>
  805334:	103ec026 	beq	r2,zero,804e38 <___vfprintf_internal_r+0x6c4>
  805338:	003ec606 	br	804e54 <___vfprintf_internal_r+0x6e0>
  80533c:	d9014f17 	ldw	r4,1340(sp)
  805340:	b00b883a 	mov	r5,r22
  805344:	d9800c04 	addi	r6,sp,48
  805348:	d9c15115 	stw	r7,1348(sp)
  80534c:	080471c0 	call	80471c <__sprint_r>
  805350:	d9c15117 	ldw	r7,1348(sp)
  805354:	103ebf1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805358:	dc800e17 	ldw	r18,56(sp)
  80535c:	dc400d17 	ldw	r17,52(sp)
  805360:	dd401904 	addi	r21,sp,100
  805364:	003e7406 	br	804d38 <___vfprintf_internal_r+0x5c4>
  805368:	d9014f17 	ldw	r4,1340(sp)
  80536c:	b00b883a 	mov	r5,r22
  805370:	d9800c04 	addi	r6,sp,48
  805374:	d9c15115 	stw	r7,1348(sp)
  805378:	080471c0 	call	80471c <__sprint_r>
  80537c:	d9c15117 	ldw	r7,1348(sp)
  805380:	103eb41e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805384:	dd401904 	addi	r21,sp,100
  805388:	003d6d06 	br	804940 <___vfprintf_internal_r+0x1cc>
  80538c:	d9014f17 	ldw	r4,1340(sp)
  805390:	b00b883a 	mov	r5,r22
  805394:	d9800c04 	addi	r6,sp,48
  805398:	d9c15115 	stw	r7,1348(sp)
  80539c:	080471c0 	call	80471c <__sprint_r>
  8053a0:	d9c15117 	ldw	r7,1348(sp)
  8053a4:	103eab1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8053a8:	dc800e17 	ldw	r18,56(sp)
  8053ac:	dc400d17 	ldw	r17,52(sp)
  8053b0:	dd401904 	addi	r21,sp,100
  8053b4:	003e3406 	br	804c88 <___vfprintf_internal_r+0x514>
  8053b8:	d9014f17 	ldw	r4,1340(sp)
  8053bc:	b00b883a 	mov	r5,r22
  8053c0:	d9800c04 	addi	r6,sp,48
  8053c4:	d9c15115 	stw	r7,1348(sp)
  8053c8:	080471c0 	call	80471c <__sprint_r>
  8053cc:	d9c15117 	ldw	r7,1348(sp)
  8053d0:	103ea01e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8053d4:	dc800e17 	ldw	r18,56(sp)
  8053d8:	dc400d17 	ldw	r17,52(sp)
  8053dc:	dd401904 	addi	r21,sp,100
  8053e0:	003e1c06 	br	804c54 <___vfprintf_internal_r+0x4e0>
  8053e4:	d9014f17 	ldw	r4,1340(sp)
  8053e8:	b00b883a 	mov	r5,r22
  8053ec:	d9800c04 	addi	r6,sp,48
  8053f0:	d9c15115 	stw	r7,1348(sp)
  8053f4:	080471c0 	call	80471c <__sprint_r>
  8053f8:	d9c15117 	ldw	r7,1348(sp)
  8053fc:	103e951e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805400:	dc800e17 	ldw	r18,56(sp)
  805404:	dc400d17 	ldw	r17,52(sp)
  805408:	dd401904 	addi	r21,sp,100
  80540c:	003e0406 	br	804c20 <___vfprintf_internal_r+0x4ac>
  805410:	d9000517 	ldw	r4,20(sp)
  805414:	0102520e 	bge	zero,r4,805d60 <___vfprintf_internal_r+0x15ec>
  805418:	d9814717 	ldw	r6,1308(sp)
  80541c:	21807a16 	blt	r4,r6,805608 <___vfprintf_internal_r+0xe94>
  805420:	d8814117 	ldw	r2,1284(sp)
  805424:	91a5883a 	add	r18,r18,r6
  805428:	8c400044 	addi	r17,r17,1
  80542c:	a8800015 	stw	r2,0(r21)
  805430:	008001c4 	movi	r2,7
  805434:	a9800115 	stw	r6,4(r21)
  805438:	dc800e15 	stw	r18,56(sp)
  80543c:	dc400d15 	stw	r17,52(sp)
  805440:	1442f616 	blt	r2,r17,80601c <___vfprintf_internal_r+0x18a8>
  805444:	a8c00204 	addi	r3,r21,8
  805448:	d9414717 	ldw	r5,1308(sp)
  80544c:	2161c83a 	sub	r16,r4,r5
  805450:	043f9d0e 	bge	zero,r16,8052c8 <___vfprintf_internal_r+0xb54>
  805454:	00800404 	movi	r2,16
  805458:	1402130e 	bge	r2,r16,805ca8 <___vfprintf_internal_r+0x1534>
  80545c:	dc400d17 	ldw	r17,52(sp)
  805460:	1027883a 	mov	r19,r2
  805464:	07002074 	movhi	fp,129
  805468:	e703de84 	addi	fp,fp,3962
  80546c:	050001c4 	movi	r20,7
  805470:	00000306 	br	805480 <___vfprintf_internal_r+0xd0c>
  805474:	18c00204 	addi	r3,r3,8
  805478:	843ffc04 	addi	r16,r16,-16
  80547c:	9c020d0e 	bge	r19,r16,805cb4 <___vfprintf_internal_r+0x1540>
  805480:	94800404 	addi	r18,r18,16
  805484:	8c400044 	addi	r17,r17,1
  805488:	1f000015 	stw	fp,0(r3)
  80548c:	1cc00115 	stw	r19,4(r3)
  805490:	dc800e15 	stw	r18,56(sp)
  805494:	dc400d15 	stw	r17,52(sp)
  805498:	a47ff60e 	bge	r20,r17,805474 <___vfprintf_internal_r+0xd00>
  80549c:	d9014f17 	ldw	r4,1340(sp)
  8054a0:	b00b883a 	mov	r5,r22
  8054a4:	d9800c04 	addi	r6,sp,48
  8054a8:	080471c0 	call	80471c <__sprint_r>
  8054ac:	103e691e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8054b0:	dc800e17 	ldw	r18,56(sp)
  8054b4:	dc400d17 	ldw	r17,52(sp)
  8054b8:	d8c01904 	addi	r3,sp,100
  8054bc:	003fee06 	br	805478 <___vfprintf_internal_r+0xd04>
  8054c0:	d8814717 	ldw	r2,1308(sp)
  8054c4:	143fffc4 	addi	r16,r2,-1
  8054c8:	043e970e 	bge	zero,r16,804f28 <___vfprintf_internal_r+0x7b4>
  8054cc:	00800404 	movi	r2,16
  8054d0:	1400180e 	bge	r2,r16,805534 <___vfprintf_internal_r+0xdc0>
  8054d4:	1029883a 	mov	r20,r2
  8054d8:	07002074 	movhi	fp,129
  8054dc:	e703de84 	addi	fp,fp,3962
  8054e0:	054001c4 	movi	r21,7
  8054e4:	00000306 	br	8054f4 <___vfprintf_internal_r+0xd80>
  8054e8:	9cc00204 	addi	r19,r19,8
  8054ec:	843ffc04 	addi	r16,r16,-16
  8054f0:	a400120e 	bge	r20,r16,80553c <___vfprintf_internal_r+0xdc8>
  8054f4:	94800404 	addi	r18,r18,16
  8054f8:	8c400044 	addi	r17,r17,1
  8054fc:	9f000015 	stw	fp,0(r19)
  805500:	9d000115 	stw	r20,4(r19)
  805504:	dc800e15 	stw	r18,56(sp)
  805508:	dc400d15 	stw	r17,52(sp)
  80550c:	ac7ff60e 	bge	r21,r17,8054e8 <___vfprintf_internal_r+0xd74>
  805510:	d9014f17 	ldw	r4,1340(sp)
  805514:	b00b883a 	mov	r5,r22
  805518:	d9800c04 	addi	r6,sp,48
  80551c:	080471c0 	call	80471c <__sprint_r>
  805520:	103e4c1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805524:	dc800e17 	ldw	r18,56(sp)
  805528:	dc400d17 	ldw	r17,52(sp)
  80552c:	dcc01904 	addi	r19,sp,100
  805530:	003fee06 	br	8054ec <___vfprintf_internal_r+0xd78>
  805534:	07002074 	movhi	fp,129
  805538:	e703de84 	addi	fp,fp,3962
  80553c:	9425883a 	add	r18,r18,r16
  805540:	8c400044 	addi	r17,r17,1
  805544:	008001c4 	movi	r2,7
  805548:	9f000015 	stw	fp,0(r19)
  80554c:	9c000115 	stw	r16,4(r19)
  805550:	dc800e15 	stw	r18,56(sp)
  805554:	dc400d15 	stw	r17,52(sp)
  805558:	147e720e 	bge	r2,r17,804f24 <___vfprintf_internal_r+0x7b0>
  80555c:	d9014f17 	ldw	r4,1340(sp)
  805560:	b00b883a 	mov	r5,r22
  805564:	d9800c04 	addi	r6,sp,48
  805568:	080471c0 	call	80471c <__sprint_r>
  80556c:	103e391e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805570:	dc800e17 	ldw	r18,56(sp)
  805574:	dc400d17 	ldw	r17,52(sp)
  805578:	dcc01904 	addi	r19,sp,100
  80557c:	003e6a06 	br	804f28 <___vfprintf_internal_r+0x7b4>
  805580:	d9014f17 	ldw	r4,1340(sp)
  805584:	b00b883a 	mov	r5,r22
  805588:	d9800c04 	addi	r6,sp,48
  80558c:	d9c15115 	stw	r7,1348(sp)
  805590:	080471c0 	call	80471c <__sprint_r>
  805594:	d9c15117 	ldw	r7,1348(sp)
  805598:	103e2e1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  80559c:	dc800e17 	ldw	r18,56(sp)
  8055a0:	dc400d17 	ldw	r17,52(sp)
  8055a4:	dd401904 	addi	r21,sp,100
  8055a8:	003dba06 	br	804c94 <___vfprintf_internal_r+0x520>
  8055ac:	d9014f17 	ldw	r4,1340(sp)
  8055b0:	b00b883a 	mov	r5,r22
  8055b4:	d9800c04 	addi	r6,sp,48
  8055b8:	080471c0 	call	80471c <__sprint_r>
  8055bc:	103e251e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8055c0:	dc800e17 	ldw	r18,56(sp)
  8055c4:	dc400d17 	ldw	r17,52(sp)
  8055c8:	dcc01904 	addi	r19,sp,100
  8055cc:	003e4206 	br	804ed8 <___vfprintf_internal_r+0x764>
  8055d0:	d9014f17 	ldw	r4,1340(sp)
  8055d4:	b00b883a 	mov	r5,r22
  8055d8:	d9800c04 	addi	r6,sp,48
  8055dc:	080471c0 	call	80471c <__sprint_r>
  8055e0:	103e1c1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8055e4:	dc800e17 	ldw	r18,56(sp)
  8055e8:	dc400d17 	ldw	r17,52(sp)
  8055ec:	d8c01904 	addi	r3,sp,100
  8055f0:	003e2e06 	br	804eac <___vfprintf_internal_r+0x738>
  8055f4:	d9414c17 	ldw	r5,1328(sp)
  8055f8:	2880004c 	andi	r2,r5,1
  8055fc:	1005003a 	cmpeq	r2,r2,zero
  805600:	103dda1e 	bne	r2,zero,804d6c <___vfprintf_internal_r+0x5f8>
  805604:	003e9f06 	br	805084 <___vfprintf_internal_r+0x910>
  805608:	d8c14117 	ldw	r3,1284(sp)
  80560c:	9125883a 	add	r18,r18,r4
  805610:	8c400044 	addi	r17,r17,1
  805614:	008001c4 	movi	r2,7
  805618:	a8c00015 	stw	r3,0(r21)
  80561c:	a9000115 	stw	r4,4(r21)
  805620:	dc800e15 	stw	r18,56(sp)
  805624:	dc400d15 	stw	r17,52(sp)
  805628:	14426616 	blt	r2,r17,805fc4 <___vfprintf_internal_r+0x1850>
  80562c:	a8c00204 	addi	r3,r21,8
  805630:	d9414917 	ldw	r5,1316(sp)
  805634:	00800044 	movi	r2,1
  805638:	94800044 	addi	r18,r18,1
  80563c:	8c400044 	addi	r17,r17,1
  805640:	18800115 	stw	r2,4(r3)
  805644:	008001c4 	movi	r2,7
  805648:	19400015 	stw	r5,0(r3)
  80564c:	dc800e15 	stw	r18,56(sp)
  805650:	dc400d15 	stw	r17,52(sp)
  805654:	2021883a 	mov	r16,r4
  805658:	14425016 	blt	r2,r17,805f9c <___vfprintf_internal_r+0x1828>
  80565c:	19400204 	addi	r5,r3,8
  805660:	d9814717 	ldw	r6,1308(sp)
  805664:	8c400044 	addi	r17,r17,1
  805668:	dc400d15 	stw	r17,52(sp)
  80566c:	3107c83a 	sub	r3,r6,r4
  805670:	d9014117 	ldw	r4,1284(sp)
  805674:	90e5883a 	add	r18,r18,r3
  805678:	28c00115 	stw	r3,4(r5)
  80567c:	8105883a 	add	r2,r16,r4
  805680:	28800015 	stw	r2,0(r5)
  805684:	008001c4 	movi	r2,7
  805688:	dc800e15 	stw	r18,56(sp)
  80568c:	147f1d16 	blt	r2,r17,805304 <___vfprintf_internal_r+0xb90>
  805690:	28c00204 	addi	r3,r5,8
  805694:	003db506 	br	804d6c <___vfprintf_internal_r+0x5f8>
  805698:	3c000017 	ldw	r16,0(r7)
  80569c:	3c400117 	ldw	r17,4(r7)
  8056a0:	39800204 	addi	r6,r7,8
  8056a4:	01000044 	movi	r4,1
  8056a8:	d9814015 	stw	r6,1280(sp)
  8056ac:	d8000405 	stb	zero,16(sp)
  8056b0:	003ebe06 	br	8051ac <___vfprintf_internal_r+0xa38>
  8056b4:	3c000017 	ldw	r16,0(r7)
  8056b8:	3c400117 	ldw	r17,4(r7)
  8056bc:	38800204 	addi	r2,r7,8
  8056c0:	d8814015 	stw	r2,1280(sp)
  8056c4:	003eb706 	br	8051a4 <___vfprintf_internal_r+0xa30>
  8056c8:	3c000017 	ldw	r16,0(r7)
  8056cc:	3c400117 	ldw	r17,4(r7)
  8056d0:	39000204 	addi	r4,r7,8
  8056d4:	d9014015 	stw	r4,1280(sp)
  8056d8:	0009883a 	mov	r4,zero
  8056dc:	d8000405 	stb	zero,16(sp)
  8056e0:	003eb206 	br	8051ac <___vfprintf_internal_r+0xa38>
  8056e4:	38c00017 	ldw	r3,0(r7)
  8056e8:	39c00104 	addi	r7,r7,4
  8056ec:	d8c14a15 	stw	r3,1320(sp)
  8056f0:	1800d10e 	bge	r3,zero,805a38 <___vfprintf_internal_r+0x12c4>
  8056f4:	00c7c83a 	sub	r3,zero,r3
  8056f8:	d8c14a15 	stw	r3,1320(sp)
  8056fc:	d9014c17 	ldw	r4,1328(sp)
  805700:	b8c00007 	ldb	r3,0(r23)
  805704:	21000114 	ori	r4,r4,4
  805708:	d9014c15 	stw	r4,1328(sp)
  80570c:	003c9806 	br	804970 <___vfprintf_internal_r+0x1fc>
  805710:	d9814c17 	ldw	r6,1328(sp)
  805714:	3080080c 	andi	r2,r6,32
  805718:	1001f026 	beq	r2,zero,805edc <___vfprintf_internal_r+0x1768>
  80571c:	d9014b17 	ldw	r4,1324(sp)
  805720:	38800017 	ldw	r2,0(r7)
  805724:	39c00104 	addi	r7,r7,4
  805728:	d9c14015 	stw	r7,1280(sp)
  80572c:	2007d7fa 	srai	r3,r4,31
  805730:	d9c14017 	ldw	r7,1280(sp)
  805734:	11000015 	stw	r4,0(r2)
  805738:	10c00115 	stw	r3,4(r2)
  80573c:	003c6906 	br	8048e4 <___vfprintf_internal_r+0x170>
  805740:	b8c00007 	ldb	r3,0(r23)
  805744:	00801b04 	movi	r2,108
  805748:	18824f26 	beq	r3,r2,806088 <___vfprintf_internal_r+0x1914>
  80574c:	d9414c17 	ldw	r5,1328(sp)
  805750:	29400414 	ori	r5,r5,16
  805754:	d9414c15 	stw	r5,1328(sp)
  805758:	003c8506 	br	804970 <___vfprintf_internal_r+0x1fc>
  80575c:	d9814c17 	ldw	r6,1328(sp)
  805760:	b8c00007 	ldb	r3,0(r23)
  805764:	31800814 	ori	r6,r6,32
  805768:	d9814c15 	stw	r6,1328(sp)
  80576c:	003c8006 	br	804970 <___vfprintf_internal_r+0x1fc>
  805770:	d8814c17 	ldw	r2,1328(sp)
  805774:	3c000017 	ldw	r16,0(r7)
  805778:	00c01e04 	movi	r3,120
  80577c:	10800094 	ori	r2,r2,2
  805780:	d8814c15 	stw	r2,1328(sp)
  805784:	39c00104 	addi	r7,r7,4
  805788:	01402074 	movhi	r5,129
  80578c:	2943c704 	addi	r5,r5,3868
  805790:	00800c04 	movi	r2,48
  805794:	0023883a 	mov	r17,zero
  805798:	01000084 	movi	r4,2
  80579c:	d9c14015 	stw	r7,1280(sp)
  8057a0:	d8c14d15 	stw	r3,1332(sp)
  8057a4:	d9414415 	stw	r5,1296(sp)
  8057a8:	d8800445 	stb	r2,17(sp)
  8057ac:	d8c00485 	stb	r3,18(sp)
  8057b0:	d8000405 	stb	zero,16(sp)
  8057b4:	003e7d06 	br	8051ac <___vfprintf_internal_r+0xa38>
  8057b8:	d8814c17 	ldw	r2,1328(sp)
  8057bc:	b8c00007 	ldb	r3,0(r23)
  8057c0:	10801014 	ori	r2,r2,64
  8057c4:	d8814c15 	stw	r2,1328(sp)
  8057c8:	003c6906 	br	804970 <___vfprintf_internal_r+0x1fc>
  8057cc:	d9414c17 	ldw	r5,1328(sp)
  8057d0:	2880020c 	andi	r2,r5,8
  8057d4:	1001df26 	beq	r2,zero,805f54 <___vfprintf_internal_r+0x17e0>
  8057d8:	39800017 	ldw	r6,0(r7)
  8057dc:	38800204 	addi	r2,r7,8
  8057e0:	d8814015 	stw	r2,1280(sp)
  8057e4:	d9814215 	stw	r6,1288(sp)
  8057e8:	39c00117 	ldw	r7,4(r7)
  8057ec:	d9c14315 	stw	r7,1292(sp)
  8057f0:	d9014217 	ldw	r4,1288(sp)
  8057f4:	d9414317 	ldw	r5,1292(sp)
  8057f8:	080a4fc0 	call	80a4fc <__isinfd>
  8057fc:	10021726 	beq	r2,zero,80605c <___vfprintf_internal_r+0x18e8>
  805800:	d9014217 	ldw	r4,1288(sp)
  805804:	d9414317 	ldw	r5,1292(sp)
  805808:	000d883a 	mov	r6,zero
  80580c:	000f883a 	mov	r7,zero
  805810:	080c4d40 	call	80c4d4 <__ltdf2>
  805814:	1002ca16 	blt	r2,zero,806340 <___vfprintf_internal_r+0x1bcc>
  805818:	d9414d17 	ldw	r5,1332(sp)
  80581c:	008011c4 	movi	r2,71
  805820:	11420a16 	blt	r2,r5,80604c <___vfprintf_internal_r+0x18d8>
  805824:	01802074 	movhi	r6,129
  805828:	3183cc04 	addi	r6,r6,3888
  80582c:	d9814115 	stw	r6,1284(sp)
  805830:	d9014c17 	ldw	r4,1328(sp)
  805834:	00c000c4 	movi	r3,3
  805838:	00bfdfc4 	movi	r2,-129
  80583c:	2088703a 	and	r4,r4,r2
  805840:	180f883a 	mov	r7,r3
  805844:	d8c14515 	stw	r3,1300(sp)
  805848:	d9014c15 	stw	r4,1328(sp)
  80584c:	d8014615 	stw	zero,1304(sp)
  805850:	003e6a06 	br	8051fc <___vfprintf_internal_r+0xa88>
  805854:	38800017 	ldw	r2,0(r7)
  805858:	00c00044 	movi	r3,1
  80585c:	39c00104 	addi	r7,r7,4
  805860:	d9c14015 	stw	r7,1280(sp)
  805864:	d9000f04 	addi	r4,sp,60
  805868:	180f883a 	mov	r7,r3
  80586c:	d8c14515 	stw	r3,1300(sp)
  805870:	d9014115 	stw	r4,1284(sp)
  805874:	d8800f05 	stb	r2,60(sp)
  805878:	d8000405 	stb	zero,16(sp)
  80587c:	003cac06 	br	804b30 <___vfprintf_internal_r+0x3bc>
  805880:	01402074 	movhi	r5,129
  805884:	2943d204 	addi	r5,r5,3912
  805888:	d9414415 	stw	r5,1296(sp)
  80588c:	d9814c17 	ldw	r6,1328(sp)
  805890:	3080080c 	andi	r2,r6,32
  805894:	1000f926 	beq	r2,zero,805c7c <___vfprintf_internal_r+0x1508>
  805898:	3c000017 	ldw	r16,0(r7)
  80589c:	3c400117 	ldw	r17,4(r7)
  8058a0:	38800204 	addi	r2,r7,8
  8058a4:	d8814015 	stw	r2,1280(sp)
  8058a8:	d9414c17 	ldw	r5,1328(sp)
  8058ac:	2880004c 	andi	r2,r5,1
  8058b0:	1005003a 	cmpeq	r2,r2,zero
  8058b4:	1000b31e 	bne	r2,zero,805b84 <___vfprintf_internal_r+0x1410>
  8058b8:	8444b03a 	or	r2,r16,r17
  8058bc:	1000b126 	beq	r2,zero,805b84 <___vfprintf_internal_r+0x1410>
  8058c0:	d9814d17 	ldw	r6,1332(sp)
  8058c4:	29400094 	ori	r5,r5,2
  8058c8:	00800c04 	movi	r2,48
  8058cc:	01000084 	movi	r4,2
  8058d0:	d9414c15 	stw	r5,1328(sp)
  8058d4:	d8800445 	stb	r2,17(sp)
  8058d8:	d9800485 	stb	r6,18(sp)
  8058dc:	d8000405 	stb	zero,16(sp)
  8058e0:	003e3206 	br	8051ac <___vfprintf_internal_r+0xa38>
  8058e4:	01802074 	movhi	r6,129
  8058e8:	3183c704 	addi	r6,r6,3868
  8058ec:	d9814415 	stw	r6,1296(sp)
  8058f0:	003fe606 	br	80588c <___vfprintf_internal_r+0x1118>
  8058f4:	00800ac4 	movi	r2,43
  8058f8:	d8800405 	stb	r2,16(sp)
  8058fc:	b8c00007 	ldb	r3,0(r23)
  805900:	003c1b06 	br	804970 <___vfprintf_internal_r+0x1fc>
  805904:	d8814c17 	ldw	r2,1328(sp)
  805908:	b8c00007 	ldb	r3,0(r23)
  80590c:	10800054 	ori	r2,r2,1
  805910:	d8814c15 	stw	r2,1328(sp)
  805914:	003c1606 	br	804970 <___vfprintf_internal_r+0x1fc>
  805918:	d8800407 	ldb	r2,16(sp)
  80591c:	1000461e 	bne	r2,zero,805a38 <___vfprintf_internal_r+0x12c4>
  805920:	00800804 	movi	r2,32
  805924:	d8800405 	stb	r2,16(sp)
  805928:	b8c00007 	ldb	r3,0(r23)
  80592c:	003c1006 	br	804970 <___vfprintf_internal_r+0x1fc>
  805930:	d9814c17 	ldw	r6,1328(sp)
  805934:	b8c00007 	ldb	r3,0(r23)
  805938:	31800214 	ori	r6,r6,8
  80593c:	d9814c15 	stw	r6,1328(sp)
  805940:	003c0b06 	br	804970 <___vfprintf_internal_r+0x1fc>
  805944:	0007883a 	mov	r3,zero
  805948:	01000244 	movi	r4,9
  80594c:	188002a4 	muli	r2,r3,10
  805950:	b8c00007 	ldb	r3,0(r23)
  805954:	d9814d17 	ldw	r6,1332(sp)
  805958:	bdc00044 	addi	r23,r23,1
  80595c:	d8c14d15 	stw	r3,1332(sp)
  805960:	d9414d17 	ldw	r5,1332(sp)
  805964:	3085883a 	add	r2,r6,r2
  805968:	10fff404 	addi	r3,r2,-48
  80596c:	28bff404 	addi	r2,r5,-48
  805970:	20bff62e 	bgeu	r4,r2,80594c <___vfprintf_internal_r+0x11d8>
  805974:	d8c14a15 	stw	r3,1320(sp)
  805978:	003bff06 	br	804978 <___vfprintf_internal_r+0x204>
  80597c:	d9414c17 	ldw	r5,1328(sp)
  805980:	b8c00007 	ldb	r3,0(r23)
  805984:	29402014 	ori	r5,r5,128
  805988:	d9414c15 	stw	r5,1328(sp)
  80598c:	003bf806 	br	804970 <___vfprintf_internal_r+0x1fc>
  805990:	b8c00007 	ldb	r3,0(r23)
  805994:	00800a84 	movi	r2,42
  805998:	bdc00044 	addi	r23,r23,1
  80599c:	18831526 	beq	r3,r2,8065f4 <___vfprintf_internal_r+0x1e80>
  8059a0:	d8c14d15 	stw	r3,1332(sp)
  8059a4:	18bff404 	addi	r2,r3,-48
  8059a8:	00c00244 	movi	r3,9
  8059ac:	18827836 	bltu	r3,r2,806390 <___vfprintf_internal_r+0x1c1c>
  8059b0:	000d883a 	mov	r6,zero
  8059b4:	308002a4 	muli	r2,r6,10
  8059b8:	b9800007 	ldb	r6,0(r23)
  8059bc:	d9414d17 	ldw	r5,1332(sp)
  8059c0:	bdc00044 	addi	r23,r23,1
  8059c4:	d9814d15 	stw	r6,1332(sp)
  8059c8:	d9014d17 	ldw	r4,1332(sp)
  8059cc:	1145883a 	add	r2,r2,r5
  8059d0:	11bff404 	addi	r6,r2,-48
  8059d4:	20bff404 	addi	r2,r4,-48
  8059d8:	18bff62e 	bgeu	r3,r2,8059b4 <___vfprintf_internal_r+0x1240>
  8059dc:	3027883a 	mov	r19,r6
  8059e0:	303be50e 	bge	r6,zero,804978 <___vfprintf_internal_r+0x204>
  8059e4:	04ffffc4 	movi	r19,-1
  8059e8:	003be306 	br	804978 <___vfprintf_internal_r+0x204>
  8059ec:	d8000405 	stb	zero,16(sp)
  8059f0:	39800017 	ldw	r6,0(r7)
  8059f4:	39c00104 	addi	r7,r7,4
  8059f8:	d9c14015 	stw	r7,1280(sp)
  8059fc:	d9814115 	stw	r6,1284(sp)
  805a00:	3001c926 	beq	r6,zero,806128 <___vfprintf_internal_r+0x19b4>
  805a04:	98000e16 	blt	r19,zero,805a40 <___vfprintf_internal_r+0x12cc>
  805a08:	d9014117 	ldw	r4,1284(sp)
  805a0c:	000b883a 	mov	r5,zero
  805a10:	980d883a 	mov	r6,r19
  805a14:	0808cb00 	call	808cb0 <memchr>
  805a18:	10025926 	beq	r2,zero,806380 <___vfprintf_internal_r+0x1c0c>
  805a1c:	d8c14117 	ldw	r3,1284(sp)
  805a20:	10cfc83a 	sub	r7,r2,r3
  805a24:	99c19e16 	blt	r19,r7,8060a0 <___vfprintf_internal_r+0x192c>
  805a28:	d9c14515 	stw	r7,1300(sp)
  805a2c:	38000916 	blt	r7,zero,805a54 <___vfprintf_internal_r+0x12e0>
  805a30:	d8014615 	stw	zero,1304(sp)
  805a34:	003df106 	br	8051fc <___vfprintf_internal_r+0xa88>
  805a38:	b8c00007 	ldb	r3,0(r23)
  805a3c:	003bcc06 	br	804970 <___vfprintf_internal_r+0x1fc>
  805a40:	d9014117 	ldw	r4,1284(sp)
  805a44:	08041740 	call	804174 <strlen>
  805a48:	d8814515 	stw	r2,1300(sp)
  805a4c:	100f883a 	mov	r7,r2
  805a50:	103ff70e 	bge	r2,zero,805a30 <___vfprintf_internal_r+0x12bc>
  805a54:	d8014515 	stw	zero,1300(sp)
  805a58:	d8014615 	stw	zero,1304(sp)
  805a5c:	003de706 	br	8051fc <___vfprintf_internal_r+0xa88>
  805a60:	20c03fcc 	andi	r3,r4,255
  805a64:	00800044 	movi	r2,1
  805a68:	18802d26 	beq	r3,r2,805b20 <___vfprintf_internal_r+0x13ac>
  805a6c:	18800e36 	bltu	r3,r2,805aa8 <___vfprintf_internal_r+0x1334>
  805a70:	00800084 	movi	r2,2
  805a74:	1880fa26 	beq	r3,r2,805e60 <___vfprintf_internal_r+0x16ec>
  805a78:	01002074 	movhi	r4,129
  805a7c:	2103d704 	addi	r4,r4,3932
  805a80:	08041740 	call	804174 <strlen>
  805a84:	100f883a 	mov	r7,r2
  805a88:	dcc14515 	stw	r19,1300(sp)
  805a8c:	9880010e 	bge	r19,r2,805a94 <___vfprintf_internal_r+0x1320>
  805a90:	d8814515 	stw	r2,1300(sp)
  805a94:	00802074 	movhi	r2,129
  805a98:	1083d704 	addi	r2,r2,3932
  805a9c:	dcc14615 	stw	r19,1304(sp)
  805aa0:	d8814115 	stw	r2,1284(sp)
  805aa4:	003dd506 	br	8051fc <___vfprintf_internal_r+0xa88>
  805aa8:	d9401904 	addi	r5,sp,100
  805aac:	dd000f04 	addi	r20,sp,60
  805ab0:	d9414115 	stw	r5,1284(sp)
  805ab4:	880a977a 	slli	r5,r17,29
  805ab8:	d9814117 	ldw	r6,1284(sp)
  805abc:	8004d0fa 	srli	r2,r16,3
  805ac0:	8806d0fa 	srli	r3,r17,3
  805ac4:	810001cc 	andi	r4,r16,7
  805ac8:	2884b03a 	or	r2,r5,r2
  805acc:	31bfffc4 	addi	r6,r6,-1
  805ad0:	21000c04 	addi	r4,r4,48
  805ad4:	d9814115 	stw	r6,1284(sp)
  805ad8:	10cab03a 	or	r5,r2,r3
  805adc:	31000005 	stb	r4,0(r6)
  805ae0:	1021883a 	mov	r16,r2
  805ae4:	1823883a 	mov	r17,r3
  805ae8:	283ff21e 	bne	r5,zero,805ab4 <___vfprintf_internal_r+0x1340>
  805aec:	d8c14c17 	ldw	r3,1328(sp)
  805af0:	1880004c 	andi	r2,r3,1
  805af4:	1005003a 	cmpeq	r2,r2,zero
  805af8:	103db91e 	bne	r2,zero,8051e0 <___vfprintf_internal_r+0xa6c>
  805afc:	20803fcc 	andi	r2,r4,255
  805b00:	1080201c 	xori	r2,r2,128
  805b04:	10bfe004 	addi	r2,r2,-128
  805b08:	00c00c04 	movi	r3,48
  805b0c:	10fdb426 	beq	r2,r3,8051e0 <___vfprintf_internal_r+0xa6c>
  805b10:	31bfffc4 	addi	r6,r6,-1
  805b14:	d9814115 	stw	r6,1284(sp)
  805b18:	30c00005 	stb	r3,0(r6)
  805b1c:	003db006 	br	8051e0 <___vfprintf_internal_r+0xa6c>
  805b20:	88800068 	cmpgeui	r2,r17,1
  805b24:	10002c1e 	bne	r2,zero,805bd8 <___vfprintf_internal_r+0x1464>
  805b28:	8800021e 	bne	r17,zero,805b34 <___vfprintf_internal_r+0x13c0>
  805b2c:	00800244 	movi	r2,9
  805b30:	14002936 	bltu	r2,r16,805bd8 <___vfprintf_internal_r+0x1464>
  805b34:	d90018c4 	addi	r4,sp,99
  805b38:	dd000f04 	addi	r20,sp,60
  805b3c:	d9014115 	stw	r4,1284(sp)
  805b40:	d9014117 	ldw	r4,1284(sp)
  805b44:	80800c04 	addi	r2,r16,48
  805b48:	20800005 	stb	r2,0(r4)
  805b4c:	003da406 	br	8051e0 <___vfprintf_internal_r+0xa6c>
  805b50:	dc400d17 	ldw	r17,52(sp)
  805b54:	07002074 	movhi	fp,129
  805b58:	e703de84 	addi	fp,fp,3962
  805b5c:	9425883a 	add	r18,r18,r16
  805b60:	8c400044 	addi	r17,r17,1
  805b64:	008001c4 	movi	r2,7
  805b68:	1f000015 	stw	fp,0(r3)
  805b6c:	1c000115 	stw	r16,4(r3)
  805b70:	dc800e15 	stw	r18,56(sp)
  805b74:	dc400d15 	stw	r17,52(sp)
  805b78:	147de216 	blt	r2,r17,805304 <___vfprintf_internal_r+0xb90>
  805b7c:	18c00204 	addi	r3,r3,8
  805b80:	003c7a06 	br	804d6c <___vfprintf_internal_r+0x5f8>
  805b84:	01000084 	movi	r4,2
  805b88:	d8000405 	stb	zero,16(sp)
  805b8c:	003d8706 	br	8051ac <___vfprintf_internal_r+0xa38>
  805b90:	d9814c17 	ldw	r6,1328(sp)
  805b94:	30c4703a 	and	r2,r6,r3
  805b98:	1005003a 	cmpeq	r2,r2,zero
  805b9c:	103cb926 	beq	r2,zero,804e84 <___vfprintf_internal_r+0x710>
  805ba0:	d9014117 	ldw	r4,1284(sp)
  805ba4:	94800044 	addi	r18,r18,1
  805ba8:	8c400044 	addi	r17,r17,1
  805bac:	008001c4 	movi	r2,7
  805bb0:	a9000015 	stw	r4,0(r21)
  805bb4:	a8c00115 	stw	r3,4(r21)
  805bb8:	dc800e15 	stw	r18,56(sp)
  805bbc:	dc400d15 	stw	r17,52(sp)
  805bc0:	147e6616 	blt	r2,r17,80555c <___vfprintf_internal_r+0xde8>
  805bc4:	acc00204 	addi	r19,r21,8
  805bc8:	003cd706 	br	804f28 <___vfprintf_internal_r+0x7b4>
  805bcc:	07002074 	movhi	fp,129
  805bd0:	e703de84 	addi	fp,fp,3962
  805bd4:	003c4f06 	br	804d14 <___vfprintf_internal_r+0x5a0>
  805bd8:	dd000f04 	addi	r20,sp,60
  805bdc:	dc801904 	addi	r18,sp,100
  805be0:	8009883a 	mov	r4,r16
  805be4:	880b883a 	mov	r5,r17
  805be8:	01800284 	movi	r6,10
  805bec:	000f883a 	mov	r7,zero
  805bf0:	080b1e40 	call	80b1e4 <__umoddi3>
  805bf4:	12000c04 	addi	r8,r2,48
  805bf8:	94bfffc4 	addi	r18,r18,-1
  805bfc:	8009883a 	mov	r4,r16
  805c00:	880b883a 	mov	r5,r17
  805c04:	01800284 	movi	r6,10
  805c08:	000f883a 	mov	r7,zero
  805c0c:	92000005 	stb	r8,0(r18)
  805c10:	080ac080 	call	80ac08 <__udivdi3>
  805c14:	1009883a 	mov	r4,r2
  805c18:	1021883a 	mov	r16,r2
  805c1c:	18800068 	cmpgeui	r2,r3,1
  805c20:	1823883a 	mov	r17,r3
  805c24:	103fee1e 	bne	r2,zero,805be0 <___vfprintf_internal_r+0x146c>
  805c28:	1800021e 	bne	r3,zero,805c34 <___vfprintf_internal_r+0x14c0>
  805c2c:	00800244 	movi	r2,9
  805c30:	113feb36 	bltu	r2,r4,805be0 <___vfprintf_internal_r+0x146c>
  805c34:	94bfffc4 	addi	r18,r18,-1
  805c38:	dc814115 	stw	r18,1284(sp)
  805c3c:	003fc006 	br	805b40 <___vfprintf_internal_r+0x13cc>
  805c40:	d9014c17 	ldw	r4,1328(sp)
  805c44:	2080004c 	andi	r2,r4,1
  805c48:	10009a1e 	bne	r2,zero,805eb4 <___vfprintf_internal_r+0x1740>
  805c4c:	d9401904 	addi	r5,sp,100
  805c50:	dd000f04 	addi	r20,sp,60
  805c54:	d9414115 	stw	r5,1284(sp)
  805c58:	003d6106 	br	8051e0 <___vfprintf_internal_r+0xa6c>
  805c5c:	d9014f17 	ldw	r4,1340(sp)
  805c60:	b00b883a 	mov	r5,r22
  805c64:	d9800c04 	addi	r6,sp,48
  805c68:	080471c0 	call	80471c <__sprint_r>
  805c6c:	103c791e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805c70:	dc800e17 	ldw	r18,56(sp)
  805c74:	d8c01904 	addi	r3,sp,100
  805c78:	003cff06 	br	805078 <___vfprintf_internal_r+0x904>
  805c7c:	d8c14c17 	ldw	r3,1328(sp)
  805c80:	1880040c 	andi	r2,r3,16
  805c84:	1000711e 	bne	r2,zero,805e4c <___vfprintf_internal_r+0x16d8>
  805c88:	d9014c17 	ldw	r4,1328(sp)
  805c8c:	2080100c 	andi	r2,r4,64
  805c90:	10006e26 	beq	r2,zero,805e4c <___vfprintf_internal_r+0x16d8>
  805c94:	3c00000b 	ldhu	r16,0(r7)
  805c98:	0023883a 	mov	r17,zero
  805c9c:	39c00104 	addi	r7,r7,4
  805ca0:	d9c14015 	stw	r7,1280(sp)
  805ca4:	003f0006 	br	8058a8 <___vfprintf_internal_r+0x1134>
  805ca8:	dc400d17 	ldw	r17,52(sp)
  805cac:	07002074 	movhi	fp,129
  805cb0:	e703de84 	addi	fp,fp,3962
  805cb4:	9425883a 	add	r18,r18,r16
  805cb8:	8c400044 	addi	r17,r17,1
  805cbc:	008001c4 	movi	r2,7
  805cc0:	1f000015 	stw	fp,0(r3)
  805cc4:	1c000115 	stw	r16,4(r3)
  805cc8:	dc800e15 	stw	r18,56(sp)
  805ccc:	dc400d15 	stw	r17,52(sp)
  805cd0:	147d7616 	blt	r2,r17,8052ac <___vfprintf_internal_r+0xb38>
  805cd4:	18c00204 	addi	r3,r3,8
  805cd8:	003d7b06 	br	8052c8 <___vfprintf_internal_r+0xb54>
  805cdc:	dc800e17 	ldw	r18,56(sp)
  805ce0:	dc400d17 	ldw	r17,52(sp)
  805ce4:	07002074 	movhi	fp,129
  805ce8:	e703e284 	addi	fp,fp,3978
  805cec:	003bc006 	br	804bf0 <___vfprintf_internal_r+0x47c>
  805cf0:	d9014f17 	ldw	r4,1340(sp)
  805cf4:	b00b883a 	mov	r5,r22
  805cf8:	d9800c04 	addi	r6,sp,48
  805cfc:	080471c0 	call	80471c <__sprint_r>
  805d00:	103c541e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805d04:	dc800e17 	ldw	r18,56(sp)
  805d08:	d8c01904 	addi	r3,sp,100
  805d0c:	003ce906 	br	8050b4 <___vfprintf_internal_r+0x940>
  805d10:	3c000017 	ldw	r16,0(r7)
  805d14:	0009883a 	mov	r4,zero
  805d18:	39c00104 	addi	r7,r7,4
  805d1c:	0023883a 	mov	r17,zero
  805d20:	d9c14015 	stw	r7,1280(sp)
  805d24:	d8000405 	stb	zero,16(sp)
  805d28:	003d2006 	br	8051ac <___vfprintf_internal_r+0xa38>
  805d2c:	38800017 	ldw	r2,0(r7)
  805d30:	39c00104 	addi	r7,r7,4
  805d34:	d9c14015 	stw	r7,1280(sp)
  805d38:	1023d7fa 	srai	r17,r2,31
  805d3c:	1021883a 	mov	r16,r2
  805d40:	003d1806 	br	8051a4 <___vfprintf_internal_r+0xa30>
  805d44:	3c000017 	ldw	r16,0(r7)
  805d48:	01000044 	movi	r4,1
  805d4c:	39c00104 	addi	r7,r7,4
  805d50:	0023883a 	mov	r17,zero
  805d54:	d9c14015 	stw	r7,1280(sp)
  805d58:	d8000405 	stb	zero,16(sp)
  805d5c:	003d1306 	br	8051ac <___vfprintf_internal_r+0xa38>
  805d60:	00802074 	movhi	r2,129
  805d64:	1083de04 	addi	r2,r2,3960
  805d68:	94800044 	addi	r18,r18,1
  805d6c:	8c400044 	addi	r17,r17,1
  805d70:	a8800015 	stw	r2,0(r21)
  805d74:	00c00044 	movi	r3,1
  805d78:	008001c4 	movi	r2,7
  805d7c:	a8c00115 	stw	r3,4(r21)
  805d80:	dc800e15 	stw	r18,56(sp)
  805d84:	dc400d15 	stw	r17,52(sp)
  805d88:	1440ca16 	blt	r2,r17,8060b4 <___vfprintf_internal_r+0x1940>
  805d8c:	a8c00204 	addi	r3,r21,8
  805d90:	2000061e 	bne	r4,zero,805dac <___vfprintf_internal_r+0x1638>
  805d94:	d9414717 	ldw	r5,1308(sp)
  805d98:	2800041e 	bne	r5,zero,805dac <___vfprintf_internal_r+0x1638>
  805d9c:	d9814c17 	ldw	r6,1328(sp)
  805da0:	3080004c 	andi	r2,r6,1
  805da4:	1005003a 	cmpeq	r2,r2,zero
  805da8:	103bf01e 	bne	r2,zero,804d6c <___vfprintf_internal_r+0x5f8>
  805dac:	00800044 	movi	r2,1
  805db0:	dc400d17 	ldw	r17,52(sp)
  805db4:	18800115 	stw	r2,4(r3)
  805db8:	d8814917 	ldw	r2,1316(sp)
  805dbc:	94800044 	addi	r18,r18,1
  805dc0:	8c400044 	addi	r17,r17,1
  805dc4:	18800015 	stw	r2,0(r3)
  805dc8:	008001c4 	movi	r2,7
  805dcc:	dc800e15 	stw	r18,56(sp)
  805dd0:	dc400d15 	stw	r17,52(sp)
  805dd4:	1440ca16 	blt	r2,r17,806100 <___vfprintf_internal_r+0x198c>
  805dd8:	18c00204 	addi	r3,r3,8
  805ddc:	0121c83a 	sub	r16,zero,r4
  805de0:	0400500e 	bge	zero,r16,805f24 <___vfprintf_internal_r+0x17b0>
  805de4:	00800404 	movi	r2,16
  805de8:	1400800e 	bge	r2,r16,805fec <___vfprintf_internal_r+0x1878>
  805dec:	1027883a 	mov	r19,r2
  805df0:	07002074 	movhi	fp,129
  805df4:	e703de84 	addi	fp,fp,3962
  805df8:	050001c4 	movi	r20,7
  805dfc:	00000306 	br	805e0c <___vfprintf_internal_r+0x1698>
  805e00:	18c00204 	addi	r3,r3,8
  805e04:	843ffc04 	addi	r16,r16,-16
  805e08:	9c007a0e 	bge	r19,r16,805ff4 <___vfprintf_internal_r+0x1880>
  805e0c:	94800404 	addi	r18,r18,16
  805e10:	8c400044 	addi	r17,r17,1
  805e14:	1f000015 	stw	fp,0(r3)
  805e18:	1cc00115 	stw	r19,4(r3)
  805e1c:	dc800e15 	stw	r18,56(sp)
  805e20:	dc400d15 	stw	r17,52(sp)
  805e24:	a47ff60e 	bge	r20,r17,805e00 <___vfprintf_internal_r+0x168c>
  805e28:	d9014f17 	ldw	r4,1340(sp)
  805e2c:	b00b883a 	mov	r5,r22
  805e30:	d9800c04 	addi	r6,sp,48
  805e34:	080471c0 	call	80471c <__sprint_r>
  805e38:	103c061e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805e3c:	dc800e17 	ldw	r18,56(sp)
  805e40:	dc400d17 	ldw	r17,52(sp)
  805e44:	d8c01904 	addi	r3,sp,100
  805e48:	003fee06 	br	805e04 <___vfprintf_internal_r+0x1690>
  805e4c:	3c000017 	ldw	r16,0(r7)
  805e50:	0023883a 	mov	r17,zero
  805e54:	39c00104 	addi	r7,r7,4
  805e58:	d9c14015 	stw	r7,1280(sp)
  805e5c:	003e9206 	br	8058a8 <___vfprintf_internal_r+0x1134>
  805e60:	d9401904 	addi	r5,sp,100
  805e64:	dd000f04 	addi	r20,sp,60
  805e68:	d9414115 	stw	r5,1284(sp)
  805e6c:	d9814417 	ldw	r6,1296(sp)
  805e70:	880a973a 	slli	r5,r17,28
  805e74:	8004d13a 	srli	r2,r16,4
  805e78:	810003cc 	andi	r4,r16,15
  805e7c:	3109883a 	add	r4,r6,r4
  805e80:	2884b03a 	or	r2,r5,r2
  805e84:	21400003 	ldbu	r5,0(r4)
  805e88:	d9014117 	ldw	r4,1284(sp)
  805e8c:	8806d13a 	srli	r3,r17,4
  805e90:	1021883a 	mov	r16,r2
  805e94:	213fffc4 	addi	r4,r4,-1
  805e98:	d9014115 	stw	r4,1284(sp)
  805e9c:	d9814117 	ldw	r6,1284(sp)
  805ea0:	10c8b03a 	or	r4,r2,r3
  805ea4:	1823883a 	mov	r17,r3
  805ea8:	31400005 	stb	r5,0(r6)
  805eac:	203fef1e 	bne	r4,zero,805e6c <___vfprintf_internal_r+0x16f8>
  805eb0:	003ccb06 	br	8051e0 <___vfprintf_internal_r+0xa6c>
  805eb4:	00800c04 	movi	r2,48
  805eb8:	d98018c4 	addi	r6,sp,99
  805ebc:	dd000f04 	addi	r20,sp,60
  805ec0:	d88018c5 	stb	r2,99(sp)
  805ec4:	d9814115 	stw	r6,1284(sp)
  805ec8:	003cc506 	br	8051e0 <___vfprintf_internal_r+0xa6c>
  805ecc:	dc400d17 	ldw	r17,52(sp)
  805ed0:	07002074 	movhi	fp,129
  805ed4:	e703e284 	addi	fp,fp,3978
  805ed8:	003bc706 	br	804df8 <___vfprintf_internal_r+0x684>
  805edc:	d9414c17 	ldw	r5,1328(sp)
  805ee0:	2880040c 	andi	r2,r5,16
  805ee4:	10007c26 	beq	r2,zero,8060d8 <___vfprintf_internal_r+0x1964>
  805ee8:	38800017 	ldw	r2,0(r7)
  805eec:	39c00104 	addi	r7,r7,4
  805ef0:	d9c14015 	stw	r7,1280(sp)
  805ef4:	d9814b17 	ldw	r6,1324(sp)
  805ef8:	d9c14017 	ldw	r7,1280(sp)
  805efc:	11800015 	stw	r6,0(r2)
  805f00:	003a7806 	br	8048e4 <___vfprintf_internal_r+0x170>
  805f04:	d9014f17 	ldw	r4,1340(sp)
  805f08:	b00b883a 	mov	r5,r22
  805f0c:	d9800c04 	addi	r6,sp,48
  805f10:	080471c0 	call	80471c <__sprint_r>
  805f14:	103bcf1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805f18:	dc800e17 	ldw	r18,56(sp)
  805f1c:	dc400d17 	ldw	r17,52(sp)
  805f20:	d8c01904 	addi	r3,sp,100
  805f24:	d9014717 	ldw	r4,1308(sp)
  805f28:	d9414117 	ldw	r5,1284(sp)
  805f2c:	8c400044 	addi	r17,r17,1
  805f30:	9125883a 	add	r18,r18,r4
  805f34:	008001c4 	movi	r2,7
  805f38:	19400015 	stw	r5,0(r3)
  805f3c:	19000115 	stw	r4,4(r3)
  805f40:	dc800e15 	stw	r18,56(sp)
  805f44:	dc400d15 	stw	r17,52(sp)
  805f48:	147cee16 	blt	r2,r17,805304 <___vfprintf_internal_r+0xb90>
  805f4c:	18c00204 	addi	r3,r3,8
  805f50:	003b8606 	br	804d6c <___vfprintf_internal_r+0x5f8>
  805f54:	38c00017 	ldw	r3,0(r7)
  805f58:	39000204 	addi	r4,r7,8
  805f5c:	d9014015 	stw	r4,1280(sp)
  805f60:	d8c14215 	stw	r3,1288(sp)
  805f64:	39c00117 	ldw	r7,4(r7)
  805f68:	d9c14315 	stw	r7,1292(sp)
  805f6c:	003e2006 	br	8057f0 <___vfprintf_internal_r+0x107c>
  805f70:	0005883a 	mov	r2,zero
  805f74:	1409c83a 	sub	r4,r2,r16
  805f78:	1105803a 	cmpltu	r2,r2,r4
  805f7c:	044bc83a 	sub	r5,zero,r17
  805f80:	2885c83a 	sub	r2,r5,r2
  805f84:	2021883a 	mov	r16,r4
  805f88:	1023883a 	mov	r17,r2
  805f8c:	01000044 	movi	r4,1
  805f90:	00800b44 	movi	r2,45
  805f94:	d8800405 	stb	r2,16(sp)
  805f98:	003c8406 	br	8051ac <___vfprintf_internal_r+0xa38>
  805f9c:	d9014f17 	ldw	r4,1340(sp)
  805fa0:	b00b883a 	mov	r5,r22
  805fa4:	d9800c04 	addi	r6,sp,48
  805fa8:	080471c0 	call	80471c <__sprint_r>
  805fac:	103ba91e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805fb0:	dc800e17 	ldw	r18,56(sp)
  805fb4:	dc400d17 	ldw	r17,52(sp)
  805fb8:	d9000517 	ldw	r4,20(sp)
  805fbc:	d9401904 	addi	r5,sp,100
  805fc0:	003da706 	br	805660 <___vfprintf_internal_r+0xeec>
  805fc4:	d9014f17 	ldw	r4,1340(sp)
  805fc8:	b00b883a 	mov	r5,r22
  805fcc:	d9800c04 	addi	r6,sp,48
  805fd0:	080471c0 	call	80471c <__sprint_r>
  805fd4:	103b9f1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  805fd8:	dc800e17 	ldw	r18,56(sp)
  805fdc:	dc400d17 	ldw	r17,52(sp)
  805fe0:	d9000517 	ldw	r4,20(sp)
  805fe4:	d8c01904 	addi	r3,sp,100
  805fe8:	003d9106 	br	805630 <___vfprintf_internal_r+0xebc>
  805fec:	07002074 	movhi	fp,129
  805ff0:	e703de84 	addi	fp,fp,3962
  805ff4:	9425883a 	add	r18,r18,r16
  805ff8:	8c400044 	addi	r17,r17,1
  805ffc:	008001c4 	movi	r2,7
  806000:	1f000015 	stw	fp,0(r3)
  806004:	1c000115 	stw	r16,4(r3)
  806008:	dc800e15 	stw	r18,56(sp)
  80600c:	dc400d15 	stw	r17,52(sp)
  806010:	147fbc16 	blt	r2,r17,805f04 <___vfprintf_internal_r+0x1790>
  806014:	18c00204 	addi	r3,r3,8
  806018:	003fc206 	br	805f24 <___vfprintf_internal_r+0x17b0>
  80601c:	d9014f17 	ldw	r4,1340(sp)
  806020:	b00b883a 	mov	r5,r22
  806024:	d9800c04 	addi	r6,sp,48
  806028:	080471c0 	call	80471c <__sprint_r>
  80602c:	103b891e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  806030:	dc800e17 	ldw	r18,56(sp)
  806034:	d9000517 	ldw	r4,20(sp)
  806038:	d8c01904 	addi	r3,sp,100
  80603c:	003d0206 	br	805448 <___vfprintf_internal_r+0xcd4>
  806040:	07002074 	movhi	fp,129
  806044:	e703de84 	addi	fp,fp,3962
  806048:	003be406 	br	804fdc <___vfprintf_internal_r+0x868>
  80604c:	00802074 	movhi	r2,129
  806050:	1083cd04 	addi	r2,r2,3892
  806054:	d8814115 	stw	r2,1284(sp)
  806058:	003df506 	br	805830 <___vfprintf_internal_r+0x10bc>
  80605c:	d9014217 	ldw	r4,1288(sp)
  806060:	d9414317 	ldw	r5,1292(sp)
  806064:	080a53c0 	call	80a53c <__isnand>
  806068:	10003926 	beq	r2,zero,806150 <___vfprintf_internal_r+0x19dc>
  80606c:	d9414d17 	ldw	r5,1332(sp)
  806070:	008011c4 	movi	r2,71
  806074:	1140ce16 	blt	r2,r5,8063b0 <___vfprintf_internal_r+0x1c3c>
  806078:	01802074 	movhi	r6,129
  80607c:	3183ce04 	addi	r6,r6,3896
  806080:	d9814115 	stw	r6,1284(sp)
  806084:	003dea06 	br	805830 <___vfprintf_internal_r+0x10bc>
  806088:	d9014c17 	ldw	r4,1328(sp)
  80608c:	bdc00044 	addi	r23,r23,1
  806090:	b8c00007 	ldb	r3,0(r23)
  806094:	21000814 	ori	r4,r4,32
  806098:	d9014c15 	stw	r4,1328(sp)
  80609c:	003a3406 	br	804970 <___vfprintf_internal_r+0x1fc>
  8060a0:	dcc14515 	stw	r19,1300(sp)
  8060a4:	98011016 	blt	r19,zero,8064e8 <___vfprintf_internal_r+0x1d74>
  8060a8:	980f883a 	mov	r7,r19
  8060ac:	d8014615 	stw	zero,1304(sp)
  8060b0:	003c5206 	br	8051fc <___vfprintf_internal_r+0xa88>
  8060b4:	d9014f17 	ldw	r4,1340(sp)
  8060b8:	b00b883a 	mov	r5,r22
  8060bc:	d9800c04 	addi	r6,sp,48
  8060c0:	080471c0 	call	80471c <__sprint_r>
  8060c4:	103b631e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  8060c8:	dc800e17 	ldw	r18,56(sp)
  8060cc:	d9000517 	ldw	r4,20(sp)
  8060d0:	d8c01904 	addi	r3,sp,100
  8060d4:	003f2e06 	br	805d90 <___vfprintf_internal_r+0x161c>
  8060d8:	d8c14c17 	ldw	r3,1328(sp)
  8060dc:	1880100c 	andi	r2,r3,64
  8060e0:	1000a026 	beq	r2,zero,806364 <___vfprintf_internal_r+0x1bf0>
  8060e4:	38800017 	ldw	r2,0(r7)
  8060e8:	39c00104 	addi	r7,r7,4
  8060ec:	d9c14015 	stw	r7,1280(sp)
  8060f0:	d9014b17 	ldw	r4,1324(sp)
  8060f4:	d9c14017 	ldw	r7,1280(sp)
  8060f8:	1100000d 	sth	r4,0(r2)
  8060fc:	0039f906 	br	8048e4 <___vfprintf_internal_r+0x170>
  806100:	d9014f17 	ldw	r4,1340(sp)
  806104:	b00b883a 	mov	r5,r22
  806108:	d9800c04 	addi	r6,sp,48
  80610c:	080471c0 	call	80471c <__sprint_r>
  806110:	103b501e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  806114:	dc800e17 	ldw	r18,56(sp)
  806118:	dc400d17 	ldw	r17,52(sp)
  80611c:	d9000517 	ldw	r4,20(sp)
  806120:	d8c01904 	addi	r3,sp,100
  806124:	003f2d06 	br	805ddc <___vfprintf_internal_r+0x1668>
  806128:	00800184 	movi	r2,6
  80612c:	14c09a36 	bltu	r2,r19,806398 <___vfprintf_internal_r+0x1c24>
  806130:	dcc14515 	stw	r19,1300(sp)
  806134:	9800010e 	bge	r19,zero,80613c <___vfprintf_internal_r+0x19c8>
  806138:	d8014515 	stw	zero,1300(sp)
  80613c:	00802074 	movhi	r2,129
  806140:	1083d004 	addi	r2,r2,3904
  806144:	980f883a 	mov	r7,r19
  806148:	d8814115 	stw	r2,1284(sp)
  80614c:	003a7806 	br	804b30 <___vfprintf_internal_r+0x3bc>
  806150:	00bfffc4 	movi	r2,-1
  806154:	9880e226 	beq	r19,r2,8064e0 <___vfprintf_internal_r+0x1d6c>
  806158:	d9414d17 	ldw	r5,1332(sp)
  80615c:	008019c4 	movi	r2,103
  806160:	2880dc26 	beq	r5,r2,8064d4 <___vfprintf_internal_r+0x1d60>
  806164:	008011c4 	movi	r2,71
  806168:	2880da26 	beq	r5,r2,8064d4 <___vfprintf_internal_r+0x1d60>
  80616c:	d9414c17 	ldw	r5,1328(sp)
  806170:	d9014317 	ldw	r4,1292(sp)
  806174:	d9814217 	ldw	r6,1288(sp)
  806178:	29404014 	ori	r5,r5,256
  80617c:	d9414c15 	stw	r5,1328(sp)
  806180:	2000cc16 	blt	r4,zero,8064b4 <___vfprintf_internal_r+0x1d40>
  806184:	3021883a 	mov	r16,r6
  806188:	2023883a 	mov	r17,r4
  80618c:	0039883a 	mov	fp,zero
  806190:	d9414d17 	ldw	r5,1332(sp)
  806194:	00801984 	movi	r2,102
  806198:	2880b726 	beq	r5,r2,806478 <___vfprintf_internal_r+0x1d04>
  80619c:	00801184 	movi	r2,70
  8061a0:	2880b526 	beq	r5,r2,806478 <___vfprintf_internal_r+0x1d04>
  8061a4:	00801944 	movi	r2,101
  8061a8:	2880c826 	beq	r5,r2,8064cc <___vfprintf_internal_r+0x1d58>
  8061ac:	00801144 	movi	r2,69
  8061b0:	2880c626 	beq	r5,r2,8064cc <___vfprintf_internal_r+0x1d58>
  8061b4:	9829883a 	mov	r20,r19
  8061b8:	d9014f17 	ldw	r4,1340(sp)
  8061bc:	d8800504 	addi	r2,sp,20
  8061c0:	880d883a 	mov	r6,r17
  8061c4:	d8800115 	stw	r2,4(sp)
  8061c8:	d8c00604 	addi	r3,sp,24
  8061cc:	d8800704 	addi	r2,sp,28
  8061d0:	800b883a 	mov	r5,r16
  8061d4:	01c00084 	movi	r7,2
  8061d8:	d8c00215 	stw	r3,8(sp)
  8061dc:	d8800315 	stw	r2,12(sp)
  8061e0:	dd000015 	stw	r20,0(sp)
  8061e4:	08069980 	call	806998 <_dtoa_r>
  8061e8:	d9814d17 	ldw	r6,1332(sp)
  8061ec:	d8814115 	stw	r2,1284(sp)
  8061f0:	008019c4 	movi	r2,103
  8061f4:	30809526 	beq	r6,r2,80644c <___vfprintf_internal_r+0x1cd8>
  8061f8:	d8c14d17 	ldw	r3,1332(sp)
  8061fc:	008011c4 	movi	r2,71
  806200:	18809226 	beq	r3,r2,80644c <___vfprintf_internal_r+0x1cd8>
  806204:	d9414117 	ldw	r5,1284(sp)
  806208:	d9814d17 	ldw	r6,1332(sp)
  80620c:	00801984 	movi	r2,102
  806210:	2d25883a 	add	r18,r5,r20
  806214:	30808626 	beq	r6,r2,806430 <___vfprintf_internal_r+0x1cbc>
  806218:	00801184 	movi	r2,70
  80621c:	30808426 	beq	r6,r2,806430 <___vfprintf_internal_r+0x1cbc>
  806220:	000d883a 	mov	r6,zero
  806224:	000f883a 	mov	r7,zero
  806228:	880b883a 	mov	r5,r17
  80622c:	8009883a 	mov	r4,r16
  806230:	080c2b40 	call	80c2b4 <__eqdf2>
  806234:	1000751e 	bne	r2,zero,80640c <___vfprintf_internal_r+0x1c98>
  806238:	9005883a 	mov	r2,r18
  80623c:	dc800715 	stw	r18,28(sp)
  806240:	d9014117 	ldw	r4,1284(sp)
  806244:	d9414d17 	ldw	r5,1332(sp)
  806248:	00c019c4 	movi	r3,103
  80624c:	1125c83a 	sub	r18,r2,r4
  806250:	28c06826 	beq	r5,r3,8063f4 <___vfprintf_internal_r+0x1c80>
  806254:	008011c4 	movi	r2,71
  806258:	28806626 	beq	r5,r2,8063f4 <___vfprintf_internal_r+0x1c80>
  80625c:	d9000517 	ldw	r4,20(sp)
  806260:	d8c14d17 	ldw	r3,1332(sp)
  806264:	00801944 	movi	r2,101
  806268:	10c05516 	blt	r2,r3,8063c0 <___vfprintf_internal_r+0x1c4c>
  80626c:	213fffc4 	addi	r4,r4,-1
  806270:	d9000515 	stw	r4,20(sp)
  806274:	d8c00805 	stb	r3,32(sp)
  806278:	2021883a 	mov	r16,r4
  80627c:	2000c116 	blt	r4,zero,806584 <___vfprintf_internal_r+0x1e10>
  806280:	00800ac4 	movi	r2,43
  806284:	d8800845 	stb	r2,33(sp)
  806288:	00800244 	movi	r2,9
  80628c:	1400af0e 	bge	r2,r16,80654c <___vfprintf_internal_r+0x1dd8>
  806290:	1027883a 	mov	r19,r2
  806294:	dc400b84 	addi	r17,sp,46
  806298:	8009883a 	mov	r4,r16
  80629c:	01400284 	movi	r5,10
  8062a0:	080c99c0 	call	80c99c <__modsi3>
  8062a4:	10800c04 	addi	r2,r2,48
  8062a8:	8c7fffc4 	addi	r17,r17,-1
  8062ac:	8009883a 	mov	r4,r16
  8062b0:	01400284 	movi	r5,10
  8062b4:	88800005 	stb	r2,0(r17)
  8062b8:	080c93c0 	call	80c93c <__divsi3>
  8062bc:	1021883a 	mov	r16,r2
  8062c0:	98bff516 	blt	r19,r2,806298 <___vfprintf_internal_r+0x1b24>
  8062c4:	10c00c04 	addi	r3,r2,48
  8062c8:	d88009c4 	addi	r2,sp,39
  8062cc:	108001c4 	addi	r2,r2,7
  8062d0:	897fffc4 	addi	r5,r17,-1
  8062d4:	88ffffc5 	stb	r3,-1(r17)
  8062d8:	2880a72e 	bgeu	r5,r2,806578 <___vfprintf_internal_r+0x1e04>
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	d9800804 	addi	r6,sp,32
  8062e4:	d8c00884 	addi	r3,sp,34
  8062e8:	28800003 	ldbu	r2,0(r5)
  8062ec:	29400044 	addi	r5,r5,1
  8062f0:	18800005 	stb	r2,0(r3)
  8062f4:	18c00044 	addi	r3,r3,1
  8062f8:	293ffb36 	bltu	r5,r4,8062e8 <___vfprintf_internal_r+0x1b74>
  8062fc:	1987c83a 	sub	r3,r3,r6
  806300:	00800044 	movi	r2,1
  806304:	d8c14815 	stw	r3,1312(sp)
  806308:	90cf883a 	add	r7,r18,r3
  80630c:	1480960e 	bge	r2,r18,806568 <___vfprintf_internal_r+0x1df4>
  806310:	39c00044 	addi	r7,r7,1
  806314:	d9c14515 	stw	r7,1300(sp)
  806318:	38003416 	blt	r7,zero,8063ec <___vfprintf_internal_r+0x1c78>
  80631c:	e0803fcc 	andi	r2,fp,255
  806320:	1080201c 	xori	r2,r2,128
  806324:	10bfe004 	addi	r2,r2,-128
  806328:	10004e26 	beq	r2,zero,806464 <___vfprintf_internal_r+0x1cf0>
  80632c:	00800b44 	movi	r2,45
  806330:	dc814715 	stw	r18,1308(sp)
  806334:	d8014615 	stw	zero,1304(sp)
  806338:	d8800405 	stb	r2,16(sp)
  80633c:	003bb106 	br	805204 <___vfprintf_internal_r+0xa90>
  806340:	00800b44 	movi	r2,45
  806344:	d8800405 	stb	r2,16(sp)
  806348:	003d3306 	br	805818 <___vfprintf_internal_r+0x10a4>
  80634c:	d9014f17 	ldw	r4,1340(sp)
  806350:	b00b883a 	mov	r5,r22
  806354:	d9800c04 	addi	r6,sp,48
  806358:	080471c0 	call	80471c <__sprint_r>
  80635c:	103abd1e 	bne	r2,zero,804e54 <___vfprintf_internal_r+0x6e0>
  806360:	003abb06 	br	804e50 <___vfprintf_internal_r+0x6dc>
  806364:	38800017 	ldw	r2,0(r7)
  806368:	39c00104 	addi	r7,r7,4
  80636c:	d9c14015 	stw	r7,1280(sp)
  806370:	d9414b17 	ldw	r5,1324(sp)
  806374:	d9c14017 	ldw	r7,1280(sp)
  806378:	11400015 	stw	r5,0(r2)
  80637c:	00395906 	br	8048e4 <___vfprintf_internal_r+0x170>
  806380:	980f883a 	mov	r7,r19
  806384:	dcc14515 	stw	r19,1300(sp)
  806388:	d8014615 	stw	zero,1304(sp)
  80638c:	003b9b06 	br	8051fc <___vfprintf_internal_r+0xa88>
  806390:	0027883a 	mov	r19,zero
  806394:	00397806 	br	804978 <___vfprintf_internal_r+0x204>
  806398:	00c02074 	movhi	r3,129
  80639c:	18c3d004 	addi	r3,r3,3904
  8063a0:	100f883a 	mov	r7,r2
  8063a4:	d8814515 	stw	r2,1300(sp)
  8063a8:	d8c14115 	stw	r3,1284(sp)
  8063ac:	0039e006 	br	804b30 <___vfprintf_internal_r+0x3bc>
  8063b0:	00802074 	movhi	r2,129
  8063b4:	1083cf04 	addi	r2,r2,3900
  8063b8:	d8814115 	stw	r2,1284(sp)
  8063bc:	003d1c06 	br	805830 <___vfprintf_internal_r+0x10bc>
  8063c0:	d9414d17 	ldw	r5,1332(sp)
  8063c4:	00801984 	movi	r2,102
  8063c8:	28804926 	beq	r5,r2,8064f0 <___vfprintf_internal_r+0x1d7c>
  8063cc:	200f883a 	mov	r7,r4
  8063d0:	24805716 	blt	r4,r18,806530 <___vfprintf_internal_r+0x1dbc>
  8063d4:	d9414c17 	ldw	r5,1328(sp)
  8063d8:	2880004c 	andi	r2,r5,1
  8063dc:	10000126 	beq	r2,zero,8063e4 <___vfprintf_internal_r+0x1c70>
  8063e0:	21c00044 	addi	r7,r4,1
  8063e4:	d9c14515 	stw	r7,1300(sp)
  8063e8:	383fcc0e 	bge	r7,zero,80631c <___vfprintf_internal_r+0x1ba8>
  8063ec:	d8014515 	stw	zero,1300(sp)
  8063f0:	003fca06 	br	80631c <___vfprintf_internal_r+0x1ba8>
  8063f4:	d9000517 	ldw	r4,20(sp)
  8063f8:	00bfff04 	movi	r2,-4
  8063fc:	1100480e 	bge	r2,r4,806520 <___vfprintf_internal_r+0x1dac>
  806400:	99004716 	blt	r19,r4,806520 <___vfprintf_internal_r+0x1dac>
  806404:	d8c14d15 	stw	r3,1332(sp)
  806408:	003ff006 	br	8063cc <___vfprintf_internal_r+0x1c58>
  80640c:	d8800717 	ldw	r2,28(sp)
  806410:	14bf8b2e 	bgeu	r2,r18,806240 <___vfprintf_internal_r+0x1acc>
  806414:	9007883a 	mov	r3,r18
  806418:	01000c04 	movi	r4,48
  80641c:	11000005 	stb	r4,0(r2)
  806420:	10800044 	addi	r2,r2,1
  806424:	d8800715 	stw	r2,28(sp)
  806428:	18bffc1e 	bne	r3,r2,80641c <___vfprintf_internal_r+0x1ca8>
  80642c:	003f8406 	br	806240 <___vfprintf_internal_r+0x1acc>
  806430:	d8814117 	ldw	r2,1284(sp)
  806434:	10c00007 	ldb	r3,0(r2)
  806438:	00800c04 	movi	r2,48
  80643c:	18805b26 	beq	r3,r2,8065ac <___vfprintf_internal_r+0x1e38>
  806440:	d9000517 	ldw	r4,20(sp)
  806444:	9125883a 	add	r18,r18,r4
  806448:	003f7506 	br	806220 <___vfprintf_internal_r+0x1aac>
  80644c:	d9014c17 	ldw	r4,1328(sp)
  806450:	2080004c 	andi	r2,r4,1
  806454:	1005003a 	cmpeq	r2,r2,zero
  806458:	103f6a26 	beq	r2,zero,806204 <___vfprintf_internal_r+0x1a90>
  80645c:	d8800717 	ldw	r2,28(sp)
  806460:	003f7706 	br	806240 <___vfprintf_internal_r+0x1acc>
  806464:	d9c14515 	stw	r7,1300(sp)
  806468:	38004d16 	blt	r7,zero,8065a0 <___vfprintf_internal_r+0x1e2c>
  80646c:	dc814715 	stw	r18,1308(sp)
  806470:	d8014615 	stw	zero,1304(sp)
  806474:	003b6106 	br	8051fc <___vfprintf_internal_r+0xa88>
  806478:	d9014f17 	ldw	r4,1340(sp)
  80647c:	d8800504 	addi	r2,sp,20
  806480:	d8800115 	stw	r2,4(sp)
  806484:	d8c00604 	addi	r3,sp,24
  806488:	d8800704 	addi	r2,sp,28
  80648c:	800b883a 	mov	r5,r16
  806490:	880d883a 	mov	r6,r17
  806494:	01c000c4 	movi	r7,3
  806498:	d8c00215 	stw	r3,8(sp)
  80649c:	d8800315 	stw	r2,12(sp)
  8064a0:	dcc00015 	stw	r19,0(sp)
  8064a4:	9829883a 	mov	r20,r19
  8064a8:	08069980 	call	806998 <_dtoa_r>
  8064ac:	d8814115 	stw	r2,1284(sp)
  8064b0:	003f5106 	br	8061f8 <___vfprintf_internal_r+0x1a84>
  8064b4:	d8c14217 	ldw	r3,1288(sp)
  8064b8:	d9014317 	ldw	r4,1292(sp)
  8064bc:	07000b44 	movi	fp,45
  8064c0:	1821883a 	mov	r16,r3
  8064c4:	2460003c 	xorhi	r17,r4,32768
  8064c8:	003f3106 	br	806190 <___vfprintf_internal_r+0x1a1c>
  8064cc:	9d000044 	addi	r20,r19,1
  8064d0:	003f3906 	br	8061b8 <___vfprintf_internal_r+0x1a44>
  8064d4:	983f251e 	bne	r19,zero,80616c <___vfprintf_internal_r+0x19f8>
  8064d8:	04c00044 	movi	r19,1
  8064dc:	003f2306 	br	80616c <___vfprintf_internal_r+0x19f8>
  8064e0:	04c00184 	movi	r19,6
  8064e4:	003f2106 	br	80616c <___vfprintf_internal_r+0x19f8>
  8064e8:	d8014515 	stw	zero,1300(sp)
  8064ec:	003eee06 	br	8060a8 <___vfprintf_internal_r+0x1934>
  8064f0:	200f883a 	mov	r7,r4
  8064f4:	0100370e 	bge	zero,r4,8065d4 <___vfprintf_internal_r+0x1e60>
  8064f8:	9800031e 	bne	r19,zero,806508 <___vfprintf_internal_r+0x1d94>
  8064fc:	d9814c17 	ldw	r6,1328(sp)
  806500:	3080004c 	andi	r2,r6,1
  806504:	103fb726 	beq	r2,zero,8063e4 <___vfprintf_internal_r+0x1c70>
  806508:	20800044 	addi	r2,r4,1
  80650c:	98a7883a 	add	r19,r19,r2
  806510:	dcc14515 	stw	r19,1300(sp)
  806514:	980f883a 	mov	r7,r19
  806518:	983f800e 	bge	r19,zero,80631c <___vfprintf_internal_r+0x1ba8>
  80651c:	003fb306 	br	8063ec <___vfprintf_internal_r+0x1c78>
  806520:	d9814d17 	ldw	r6,1332(sp)
  806524:	31bfff84 	addi	r6,r6,-2
  806528:	d9814d15 	stw	r6,1332(sp)
  80652c:	003f4c06 	br	806260 <___vfprintf_internal_r+0x1aec>
  806530:	0100180e 	bge	zero,r4,806594 <___vfprintf_internal_r+0x1e20>
  806534:	00800044 	movi	r2,1
  806538:	1485883a 	add	r2,r2,r18
  80653c:	d8814515 	stw	r2,1300(sp)
  806540:	100f883a 	mov	r7,r2
  806544:	103f750e 	bge	r2,zero,80631c <___vfprintf_internal_r+0x1ba8>
  806548:	003fa806 	br	8063ec <___vfprintf_internal_r+0x1c78>
  80654c:	80c00c04 	addi	r3,r16,48
  806550:	00800c04 	movi	r2,48
  806554:	d8c008c5 	stb	r3,35(sp)
  806558:	d9800804 	addi	r6,sp,32
  80655c:	d8c00904 	addi	r3,sp,36
  806560:	d8800885 	stb	r2,34(sp)
  806564:	003f6506 	br	8062fc <___vfprintf_internal_r+0x1b88>
  806568:	d9014c17 	ldw	r4,1328(sp)
  80656c:	2084703a 	and	r2,r4,r2
  806570:	103f9c26 	beq	r2,zero,8063e4 <___vfprintf_internal_r+0x1c70>
  806574:	003f6606 	br	806310 <___vfprintf_internal_r+0x1b9c>
  806578:	d9800804 	addi	r6,sp,32
  80657c:	d8c00884 	addi	r3,sp,34
  806580:	003f5e06 	br	8062fc <___vfprintf_internal_r+0x1b88>
  806584:	00800b44 	movi	r2,45
  806588:	0121c83a 	sub	r16,zero,r4
  80658c:	d8800845 	stb	r2,33(sp)
  806590:	003f3d06 	br	806288 <___vfprintf_internal_r+0x1b14>
  806594:	00800084 	movi	r2,2
  806598:	1105c83a 	sub	r2,r2,r4
  80659c:	003fe606 	br	806538 <___vfprintf_internal_r+0x1dc4>
  8065a0:	d8014515 	stw	zero,1300(sp)
  8065a4:	dc814715 	stw	r18,1308(sp)
  8065a8:	003fb106 	br	806470 <___vfprintf_internal_r+0x1cfc>
  8065ac:	000d883a 	mov	r6,zero
  8065b0:	000f883a 	mov	r7,zero
  8065b4:	8009883a 	mov	r4,r16
  8065b8:	880b883a 	mov	r5,r17
  8065bc:	080c33c0 	call	80c33c <__nedf2>
  8065c0:	103f9f26 	beq	r2,zero,806440 <___vfprintf_internal_r+0x1ccc>
  8065c4:	00800044 	movi	r2,1
  8065c8:	1509c83a 	sub	r4,r2,r20
  8065cc:	d9000515 	stw	r4,20(sp)
  8065d0:	003f9b06 	br	806440 <___vfprintf_internal_r+0x1ccc>
  8065d4:	98000d1e 	bne	r19,zero,80660c <___vfprintf_internal_r+0x1e98>
  8065d8:	d8c14c17 	ldw	r3,1328(sp)
  8065dc:	1880004c 	andi	r2,r3,1
  8065e0:	10000a1e 	bne	r2,zero,80660c <___vfprintf_internal_r+0x1e98>
  8065e4:	01000044 	movi	r4,1
  8065e8:	200f883a 	mov	r7,r4
  8065ec:	d9014515 	stw	r4,1300(sp)
  8065f0:	003f4a06 	br	80631c <___vfprintf_internal_r+0x1ba8>
  8065f4:	3cc00017 	ldw	r19,0(r7)
  8065f8:	39c00104 	addi	r7,r7,4
  8065fc:	983d0e0e 	bge	r19,zero,805a38 <___vfprintf_internal_r+0x12c4>
  806600:	b8c00007 	ldb	r3,0(r23)
  806604:	04ffffc4 	movi	r19,-1
  806608:	0038d906 	br	804970 <___vfprintf_internal_r+0x1fc>
  80660c:	9cc00084 	addi	r19,r19,2
  806610:	dcc14515 	stw	r19,1300(sp)
  806614:	980f883a 	mov	r7,r19
  806618:	983f400e 	bge	r19,zero,80631c <___vfprintf_internal_r+0x1ba8>
  80661c:	003f7306 	br	8063ec <___vfprintf_internal_r+0x1c78>

00806620 <__vfprintf_internal>:
  806620:	00802074 	movhi	r2,129
  806624:	108bb704 	addi	r2,r2,11996
  806628:	2013883a 	mov	r9,r4
  80662c:	11000017 	ldw	r4,0(r2)
  806630:	2805883a 	mov	r2,r5
  806634:	300f883a 	mov	r7,r6
  806638:	480b883a 	mov	r5,r9
  80663c:	100d883a 	mov	r6,r2
  806640:	08047741 	jmpi	804774 <___vfprintf_internal_r>

00806644 <__swsetup_r>:
  806644:	00802074 	movhi	r2,129
  806648:	108bb704 	addi	r2,r2,11996
  80664c:	10c00017 	ldw	r3,0(r2)
  806650:	defffd04 	addi	sp,sp,-12
  806654:	dc400115 	stw	r17,4(sp)
  806658:	dc000015 	stw	r16,0(sp)
  80665c:	dfc00215 	stw	ra,8(sp)
  806660:	2023883a 	mov	r17,r4
  806664:	2821883a 	mov	r16,r5
  806668:	18000226 	beq	r3,zero,806674 <__swsetup_r+0x30>
  80666c:	18800e17 	ldw	r2,56(r3)
  806670:	10001f26 	beq	r2,zero,8066f0 <__swsetup_r+0xac>
  806674:	8100030b 	ldhu	r4,12(r16)
  806678:	2080020c 	andi	r2,r4,8
  80667c:	10002826 	beq	r2,zero,806720 <__swsetup_r+0xdc>
  806680:	81400417 	ldw	r5,16(r16)
  806684:	28001d26 	beq	r5,zero,8066fc <__swsetup_r+0xb8>
  806688:	2080004c 	andi	r2,r4,1
  80668c:	1005003a 	cmpeq	r2,r2,zero
  806690:	10000b26 	beq	r2,zero,8066c0 <__swsetup_r+0x7c>
  806694:	2080008c 	andi	r2,r4,2
  806698:	10001226 	beq	r2,zero,8066e4 <__swsetup_r+0xa0>
  80669c:	0005883a 	mov	r2,zero
  8066a0:	80800215 	stw	r2,8(r16)
  8066a4:	28000b26 	beq	r5,zero,8066d4 <__swsetup_r+0x90>
  8066a8:	0005883a 	mov	r2,zero
  8066ac:	dfc00217 	ldw	ra,8(sp)
  8066b0:	dc400117 	ldw	r17,4(sp)
  8066b4:	dc000017 	ldw	r16,0(sp)
  8066b8:	dec00304 	addi	sp,sp,12
  8066bc:	f800283a 	ret
  8066c0:	80800517 	ldw	r2,20(r16)
  8066c4:	80000215 	stw	zero,8(r16)
  8066c8:	0085c83a 	sub	r2,zero,r2
  8066cc:	80800615 	stw	r2,24(r16)
  8066d0:	283ff51e 	bne	r5,zero,8066a8 <__swsetup_r+0x64>
  8066d4:	2080200c 	andi	r2,r4,128
  8066d8:	103ff326 	beq	r2,zero,8066a8 <__swsetup_r+0x64>
  8066dc:	00bfffc4 	movi	r2,-1
  8066e0:	003ff206 	br	8066ac <__swsetup_r+0x68>
  8066e4:	80800517 	ldw	r2,20(r16)
  8066e8:	80800215 	stw	r2,8(r16)
  8066ec:	003fed06 	br	8066a4 <__swsetup_r+0x60>
  8066f0:	1809883a 	mov	r4,r3
  8066f4:	08081e40 	call	8081e4 <__sinit>
  8066f8:	003fde06 	br	806674 <__swsetup_r+0x30>
  8066fc:	20c0a00c 	andi	r3,r4,640
  806700:	00808004 	movi	r2,512
  806704:	18bfe026 	beq	r3,r2,806688 <__swsetup_r+0x44>
  806708:	8809883a 	mov	r4,r17
  80670c:	800b883a 	mov	r5,r16
  806710:	0808b1c0 	call	808b1c <__smakebuf_r>
  806714:	8100030b 	ldhu	r4,12(r16)
  806718:	81400417 	ldw	r5,16(r16)
  80671c:	003fda06 	br	806688 <__swsetup_r+0x44>
  806720:	2080040c 	andi	r2,r4,16
  806724:	103fed26 	beq	r2,zero,8066dc <__swsetup_r+0x98>
  806728:	2080010c 	andi	r2,r4,4
  80672c:	10001226 	beq	r2,zero,806778 <__swsetup_r+0x134>
  806730:	81400c17 	ldw	r5,48(r16)
  806734:	28000526 	beq	r5,zero,80674c <__swsetup_r+0x108>
  806738:	80801004 	addi	r2,r16,64
  80673c:	28800226 	beq	r5,r2,806748 <__swsetup_r+0x104>
  806740:	8809883a 	mov	r4,r17
  806744:	08044080 	call	804408 <_free_r>
  806748:	80000c15 	stw	zero,48(r16)
  80674c:	8080030b 	ldhu	r2,12(r16)
  806750:	81400417 	ldw	r5,16(r16)
  806754:	80000115 	stw	zero,4(r16)
  806758:	10bff6cc 	andi	r2,r2,65499
  80675c:	8080030d 	sth	r2,12(r16)
  806760:	81400015 	stw	r5,0(r16)
  806764:	8080030b 	ldhu	r2,12(r16)
  806768:	10800214 	ori	r2,r2,8
  80676c:	113fffcc 	andi	r4,r2,65535
  806770:	8080030d 	sth	r2,12(r16)
  806774:	003fc306 	br	806684 <__swsetup_r+0x40>
  806778:	81400417 	ldw	r5,16(r16)
  80677c:	003ff906 	br	806764 <__swsetup_r+0x120>

00806780 <quorem>:
  806780:	28c00417 	ldw	r3,16(r5)
  806784:	20800417 	ldw	r2,16(r4)
  806788:	defff604 	addi	sp,sp,-40
  80678c:	ddc00715 	stw	r23,28(sp)
  806790:	dd400515 	stw	r21,20(sp)
  806794:	dfc00915 	stw	ra,36(sp)
  806798:	df000815 	stw	fp,32(sp)
  80679c:	dd800615 	stw	r22,24(sp)
  8067a0:	dd000415 	stw	r20,16(sp)
  8067a4:	dcc00315 	stw	r19,12(sp)
  8067a8:	dc800215 	stw	r18,8(sp)
  8067ac:	dc400115 	stw	r17,4(sp)
  8067b0:	dc000015 	stw	r16,0(sp)
  8067b4:	202f883a 	mov	r23,r4
  8067b8:	282b883a 	mov	r21,r5
  8067bc:	10c07416 	blt	r2,r3,806990 <quorem+0x210>
  8067c0:	1c7fffc4 	addi	r17,r3,-1
  8067c4:	8c45883a 	add	r2,r17,r17
  8067c8:	1085883a 	add	r2,r2,r2
  8067cc:	2c000504 	addi	r16,r5,20
  8067d0:	24c00504 	addi	r19,r4,20
  8067d4:	14ed883a 	add	r22,r2,r19
  8067d8:	80a5883a 	add	r18,r16,r2
  8067dc:	b7000017 	ldw	fp,0(r22)
  8067e0:	91400017 	ldw	r5,0(r18)
  8067e4:	e009883a 	mov	r4,fp
  8067e8:	29400044 	addi	r5,r5,1
  8067ec:	080c9fc0 	call	80c9fc <__udivsi3>
  8067f0:	1029883a 	mov	r20,r2
  8067f4:	10003c1e 	bne	r2,zero,8068e8 <quorem+0x168>
  8067f8:	a80b883a 	mov	r5,r21
  8067fc:	b809883a 	mov	r4,r23
  806800:	08090700 	call	809070 <__mcmp>
  806804:	10002b16 	blt	r2,zero,8068b4 <quorem+0x134>
  806808:	a5000044 	addi	r20,r20,1
  80680c:	980f883a 	mov	r7,r19
  806810:	0011883a 	mov	r8,zero
  806814:	0009883a 	mov	r4,zero
  806818:	81400017 	ldw	r5,0(r16)
  80681c:	38c00017 	ldw	r3,0(r7)
  806820:	84000104 	addi	r16,r16,4
  806824:	28bfffcc 	andi	r2,r5,65535
  806828:	2085883a 	add	r2,r4,r2
  80682c:	11bfffcc 	andi	r6,r2,65535
  806830:	193fffcc 	andi	r4,r3,65535
  806834:	1004d43a 	srli	r2,r2,16
  806838:	280ad43a 	srli	r5,r5,16
  80683c:	2189c83a 	sub	r4,r4,r6
  806840:	2209883a 	add	r4,r4,r8
  806844:	1806d43a 	srli	r3,r3,16
  806848:	288b883a 	add	r5,r5,r2
  80684c:	200dd43a 	srai	r6,r4,16
  806850:	28bfffcc 	andi	r2,r5,65535
  806854:	1887c83a 	sub	r3,r3,r2
  806858:	1987883a 	add	r3,r3,r6
  80685c:	3900000d 	sth	r4,0(r7)
  806860:	38c0008d 	sth	r3,2(r7)
  806864:	2808d43a 	srli	r4,r5,16
  806868:	39c00104 	addi	r7,r7,4
  80686c:	1811d43a 	srai	r8,r3,16
  806870:	943fe92e 	bgeu	r18,r16,806818 <quorem+0x98>
  806874:	8c45883a 	add	r2,r17,r17
  806878:	1085883a 	add	r2,r2,r2
  80687c:	9885883a 	add	r2,r19,r2
  806880:	10c00017 	ldw	r3,0(r2)
  806884:	18000b1e 	bne	r3,zero,8068b4 <quorem+0x134>
  806888:	113fff04 	addi	r4,r2,-4
  80688c:	9900082e 	bgeu	r19,r4,8068b0 <quorem+0x130>
  806890:	10bfff17 	ldw	r2,-4(r2)
  806894:	10000326 	beq	r2,zero,8068a4 <quorem+0x124>
  806898:	00000506 	br	8068b0 <quorem+0x130>
  80689c:	20800017 	ldw	r2,0(r4)
  8068a0:	1000031e 	bne	r2,zero,8068b0 <quorem+0x130>
  8068a4:	213fff04 	addi	r4,r4,-4
  8068a8:	8c7fffc4 	addi	r17,r17,-1
  8068ac:	993ffb36 	bltu	r19,r4,80689c <quorem+0x11c>
  8068b0:	bc400415 	stw	r17,16(r23)
  8068b4:	a005883a 	mov	r2,r20
  8068b8:	dfc00917 	ldw	ra,36(sp)
  8068bc:	df000817 	ldw	fp,32(sp)
  8068c0:	ddc00717 	ldw	r23,28(sp)
  8068c4:	dd800617 	ldw	r22,24(sp)
  8068c8:	dd400517 	ldw	r21,20(sp)
  8068cc:	dd000417 	ldw	r20,16(sp)
  8068d0:	dcc00317 	ldw	r19,12(sp)
  8068d4:	dc800217 	ldw	r18,8(sp)
  8068d8:	dc400117 	ldw	r17,4(sp)
  8068dc:	dc000017 	ldw	r16,0(sp)
  8068e0:	dec00a04 	addi	sp,sp,40
  8068e4:	f800283a 	ret
  8068e8:	980f883a 	mov	r7,r19
  8068ec:	8011883a 	mov	r8,r16
  8068f0:	0013883a 	mov	r9,zero
  8068f4:	000d883a 	mov	r6,zero
  8068f8:	40c00017 	ldw	r3,0(r8)
  8068fc:	39000017 	ldw	r4,0(r7)
  806900:	42000104 	addi	r8,r8,4
  806904:	18bfffcc 	andi	r2,r3,65535
  806908:	a085383a 	mul	r2,r20,r2
  80690c:	1806d43a 	srli	r3,r3,16
  806910:	217fffcc 	andi	r5,r4,65535
  806914:	3085883a 	add	r2,r6,r2
  806918:	11bfffcc 	andi	r6,r2,65535
  80691c:	a0c7383a 	mul	r3,r20,r3
  806920:	1004d43a 	srli	r2,r2,16
  806924:	298bc83a 	sub	r5,r5,r6
  806928:	2a4b883a 	add	r5,r5,r9
  80692c:	2008d43a 	srli	r4,r4,16
  806930:	1887883a 	add	r3,r3,r2
  806934:	280dd43a 	srai	r6,r5,16
  806938:	18bfffcc 	andi	r2,r3,65535
  80693c:	2089c83a 	sub	r4,r4,r2
  806940:	2189883a 	add	r4,r4,r6
  806944:	3900008d 	sth	r4,2(r7)
  806948:	3940000d 	sth	r5,0(r7)
  80694c:	180cd43a 	srli	r6,r3,16
  806950:	39c00104 	addi	r7,r7,4
  806954:	2013d43a 	srai	r9,r4,16
  806958:	923fe72e 	bgeu	r18,r8,8068f8 <quorem+0x178>
  80695c:	e03fa61e 	bne	fp,zero,8067f8 <quorem+0x78>
  806960:	b0ffff04 	addi	r3,r22,-4
  806964:	98c0082e 	bgeu	r19,r3,806988 <quorem+0x208>
  806968:	b0bfff17 	ldw	r2,-4(r22)
  80696c:	10000326 	beq	r2,zero,80697c <quorem+0x1fc>
  806970:	00000506 	br	806988 <quorem+0x208>
  806974:	18800017 	ldw	r2,0(r3)
  806978:	1000031e 	bne	r2,zero,806988 <quorem+0x208>
  80697c:	18ffff04 	addi	r3,r3,-4
  806980:	8c7fffc4 	addi	r17,r17,-1
  806984:	98fffb36 	bltu	r19,r3,806974 <quorem+0x1f4>
  806988:	bc400415 	stw	r17,16(r23)
  80698c:	003f9a06 	br	8067f8 <quorem+0x78>
  806990:	0005883a 	mov	r2,zero
  806994:	003fc806 	br	8068b8 <quorem+0x138>

00806998 <_dtoa_r>:
  806998:	22001017 	ldw	r8,64(r4)
  80699c:	deffda04 	addi	sp,sp,-152
  8069a0:	dd402115 	stw	r21,132(sp)
  8069a4:	dd002015 	stw	r20,128(sp)
  8069a8:	dc801e15 	stw	r18,120(sp)
  8069ac:	dc401d15 	stw	r17,116(sp)
  8069b0:	dfc02515 	stw	ra,148(sp)
  8069b4:	df002415 	stw	fp,144(sp)
  8069b8:	ddc02315 	stw	r23,140(sp)
  8069bc:	dd802215 	stw	r22,136(sp)
  8069c0:	dcc01f15 	stw	r19,124(sp)
  8069c4:	dc001c15 	stw	r16,112(sp)
  8069c8:	d9001615 	stw	r4,88(sp)
  8069cc:	3023883a 	mov	r17,r6
  8069d0:	2829883a 	mov	r20,r5
  8069d4:	d9c01715 	stw	r7,92(sp)
  8069d8:	dc802817 	ldw	r18,160(sp)
  8069dc:	302b883a 	mov	r21,r6
  8069e0:	40000a26 	beq	r8,zero,806a0c <_dtoa_r+0x74>
  8069e4:	20801117 	ldw	r2,68(r4)
  8069e8:	400b883a 	mov	r5,r8
  8069ec:	40800115 	stw	r2,4(r8)
  8069f0:	20c01117 	ldw	r3,68(r4)
  8069f4:	00800044 	movi	r2,1
  8069f8:	10c4983a 	sll	r2,r2,r3
  8069fc:	40800215 	stw	r2,8(r8)
  806a00:	0808f140 	call	808f14 <_Bfree>
  806a04:	d8c01617 	ldw	r3,88(sp)
  806a08:	18001015 	stw	zero,64(r3)
  806a0c:	8800a316 	blt	r17,zero,806c9c <_dtoa_r+0x304>
  806a10:	90000015 	stw	zero,0(r18)
  806a14:	a8dffc2c 	andhi	r3,r21,32752
  806a18:	009ffc34 	movhi	r2,32752
  806a1c:	18809126 	beq	r3,r2,806c64 <_dtoa_r+0x2cc>
  806a20:	000d883a 	mov	r6,zero
  806a24:	000f883a 	mov	r7,zero
  806a28:	a009883a 	mov	r4,r20
  806a2c:	a80b883a 	mov	r5,r21
  806a30:	dd001215 	stw	r20,72(sp)
  806a34:	dd401315 	stw	r21,76(sp)
  806a38:	080c33c0 	call	80c33c <__nedf2>
  806a3c:	1000171e 	bne	r2,zero,806a9c <_dtoa_r+0x104>
  806a40:	d9802717 	ldw	r6,156(sp)
  806a44:	00800044 	movi	r2,1
  806a48:	30800015 	stw	r2,0(r6)
  806a4c:	d8802917 	ldw	r2,164(sp)
  806a50:	10029b26 	beq	r2,zero,8074c0 <_dtoa_r+0xb28>
  806a54:	d9002917 	ldw	r4,164(sp)
  806a58:	00802074 	movhi	r2,129
  806a5c:	1083de44 	addi	r2,r2,3961
  806a60:	10ffffc4 	addi	r3,r2,-1
  806a64:	20800015 	stw	r2,0(r4)
  806a68:	1805883a 	mov	r2,r3
  806a6c:	dfc02517 	ldw	ra,148(sp)
  806a70:	df002417 	ldw	fp,144(sp)
  806a74:	ddc02317 	ldw	r23,140(sp)
  806a78:	dd802217 	ldw	r22,136(sp)
  806a7c:	dd402117 	ldw	r21,132(sp)
  806a80:	dd002017 	ldw	r20,128(sp)
  806a84:	dcc01f17 	ldw	r19,124(sp)
  806a88:	dc801e17 	ldw	r18,120(sp)
  806a8c:	dc401d17 	ldw	r17,116(sp)
  806a90:	dc001c17 	ldw	r16,112(sp)
  806a94:	dec02604 	addi	sp,sp,152
  806a98:	f800283a 	ret
  806a9c:	d9001617 	ldw	r4,88(sp)
  806aa0:	d9401217 	ldw	r5,72(sp)
  806aa4:	d8800104 	addi	r2,sp,4
  806aa8:	a80d883a 	mov	r6,r21
  806aac:	d9c00204 	addi	r7,sp,8
  806ab0:	d8800015 	stw	r2,0(sp)
  806ab4:	08095500 	call	809550 <__d2b>
  806ab8:	d8800715 	stw	r2,28(sp)
  806abc:	a804d53a 	srli	r2,r21,20
  806ac0:	1101ffcc 	andi	r4,r2,2047
  806ac4:	20008626 	beq	r4,zero,806ce0 <_dtoa_r+0x348>
  806ac8:	d8c01217 	ldw	r3,72(sp)
  806acc:	00800434 	movhi	r2,16
  806ad0:	10bfffc4 	addi	r2,r2,-1
  806ad4:	ddc00117 	ldw	r23,4(sp)
  806ad8:	a884703a 	and	r2,r21,r2
  806adc:	1811883a 	mov	r8,r3
  806ae0:	124ffc34 	orhi	r9,r2,16368
  806ae4:	25bf0044 	addi	r22,r4,-1023
  806ae8:	d8000815 	stw	zero,32(sp)
  806aec:	0005883a 	mov	r2,zero
  806af0:	00cffe34 	movhi	r3,16376
  806af4:	480b883a 	mov	r5,r9
  806af8:	4009883a 	mov	r4,r8
  806afc:	180f883a 	mov	r7,r3
  806b00:	100d883a 	mov	r6,r2
  806b04:	080bba40 	call	80bba4 <__subdf3>
  806b08:	0218dbf4 	movhi	r8,25455
  806b0c:	4210d844 	addi	r8,r8,17249
  806b10:	024ff4f4 	movhi	r9,16339
  806b14:	4a61e9c4 	addi	r9,r9,-30809
  806b18:	480f883a 	mov	r7,r9
  806b1c:	400d883a 	mov	r6,r8
  806b20:	180b883a 	mov	r5,r3
  806b24:	1009883a 	mov	r4,r2
  806b28:	080bc980 	call	80bc98 <__muldf3>
  806b2c:	0222d874 	movhi	r8,35681
  806b30:	42322cc4 	addi	r8,r8,-14157
  806b34:	024ff1f4 	movhi	r9,16327
  806b38:	4a628a04 	addi	r9,r9,-30168
  806b3c:	480f883a 	mov	r7,r9
  806b40:	400d883a 	mov	r6,r8
  806b44:	180b883a 	mov	r5,r3
  806b48:	1009883a 	mov	r4,r2
  806b4c:	080bc240 	call	80bc24 <__adddf3>
  806b50:	b009883a 	mov	r4,r22
  806b54:	1021883a 	mov	r16,r2
  806b58:	1823883a 	mov	r17,r3
  806b5c:	080c55c0 	call	80c55c <__floatsidf>
  806b60:	021427f4 	movhi	r8,20639
  806b64:	421e7ec4 	addi	r8,r8,31227
  806b68:	024ff4f4 	movhi	r9,16339
  806b6c:	4a5104c4 	addi	r9,r9,17427
  806b70:	480f883a 	mov	r7,r9
  806b74:	400d883a 	mov	r6,r8
  806b78:	180b883a 	mov	r5,r3
  806b7c:	1009883a 	mov	r4,r2
  806b80:	080bc980 	call	80bc98 <__muldf3>
  806b84:	180f883a 	mov	r7,r3
  806b88:	880b883a 	mov	r5,r17
  806b8c:	100d883a 	mov	r6,r2
  806b90:	8009883a 	mov	r4,r16
  806b94:	080bc240 	call	80bc24 <__adddf3>
  806b98:	1009883a 	mov	r4,r2
  806b9c:	180b883a 	mov	r5,r3
  806ba0:	1021883a 	mov	r16,r2
  806ba4:	1823883a 	mov	r17,r3
  806ba8:	080c6540 	call	80c654 <__fixdfsi>
  806bac:	000d883a 	mov	r6,zero
  806bb0:	000f883a 	mov	r7,zero
  806bb4:	8009883a 	mov	r4,r16
  806bb8:	880b883a 	mov	r5,r17
  806bbc:	d8800d15 	stw	r2,52(sp)
  806bc0:	080c4d40 	call	80c4d4 <__ltdf2>
  806bc4:	10031716 	blt	r2,zero,807824 <_dtoa_r+0xe8c>
  806bc8:	d8c00d17 	ldw	r3,52(sp)
  806bcc:	00800584 	movi	r2,22
  806bd0:	10c1482e 	bgeu	r2,r3,8070f4 <_dtoa_r+0x75c>
  806bd4:	01000044 	movi	r4,1
  806bd8:	d9000c15 	stw	r4,48(sp)
  806bdc:	bd85c83a 	sub	r2,r23,r22
  806be0:	11bfffc4 	addi	r6,r2,-1
  806be4:	30030b16 	blt	r6,zero,807814 <_dtoa_r+0xe7c>
  806be8:	d9800a15 	stw	r6,40(sp)
  806bec:	d8001115 	stw	zero,68(sp)
  806bf0:	d8c00d17 	ldw	r3,52(sp)
  806bf4:	1802ff16 	blt	r3,zero,8077f4 <_dtoa_r+0xe5c>
  806bf8:	d9000a17 	ldw	r4,40(sp)
  806bfc:	d8c00915 	stw	r3,36(sp)
  806c00:	d8001015 	stw	zero,64(sp)
  806c04:	20c9883a 	add	r4,r4,r3
  806c08:	d9000a15 	stw	r4,40(sp)
  806c0c:	d9001717 	ldw	r4,92(sp)
  806c10:	00800244 	movi	r2,9
  806c14:	11004636 	bltu	r2,r4,806d30 <_dtoa_r+0x398>
  806c18:	00800144 	movi	r2,5
  806c1c:	11020416 	blt	r2,r4,807430 <_dtoa_r+0xa98>
  806c20:	04400044 	movi	r17,1
  806c24:	d8c01717 	ldw	r3,92(sp)
  806c28:	00800144 	movi	r2,5
  806c2c:	10c1ed36 	bltu	r2,r3,8073e4 <_dtoa_r+0xa4c>
  806c30:	18c5883a 	add	r2,r3,r3
  806c34:	1085883a 	add	r2,r2,r2
  806c38:	00c02034 	movhi	r3,128
  806c3c:	18db1304 	addi	r3,r3,27724
  806c40:	10c5883a 	add	r2,r2,r3
  806c44:	11000017 	ldw	r4,0(r2)
  806c48:	2000683a 	jmp	r4
  806c4c:	00806d38 	rdprs	r2,zero,436
  806c50:	00806d38 	rdprs	r2,zero,436
  806c54:	00807738 	rdprs	r2,zero,476
  806c58:	00807710 	cmplti	r2,zero,476
  806c5c:	00807754 	movui	r2,477
  806c60:	00807760 	cmpeqi	r2,zero,477
  806c64:	d9002717 	ldw	r4,156(sp)
  806c68:	0089c3c4 	movi	r2,9999
  806c6c:	20800015 	stw	r2,0(r4)
  806c70:	a0001026 	beq	r20,zero,806cb4 <_dtoa_r+0x31c>
  806c74:	00c02074 	movhi	r3,129
  806c78:	18c3ea04 	addi	r3,r3,4008
  806c7c:	d9802917 	ldw	r6,164(sp)
  806c80:	303f7926 	beq	r6,zero,806a68 <_dtoa_r+0xd0>
  806c84:	188000c7 	ldb	r2,3(r3)
  806c88:	190000c4 	addi	r4,r3,3
  806c8c:	1000101e 	bne	r2,zero,806cd0 <_dtoa_r+0x338>
  806c90:	d8802917 	ldw	r2,164(sp)
  806c94:	11000015 	stw	r4,0(r2)
  806c98:	003f7306 	br	806a68 <_dtoa_r+0xd0>
  806c9c:	00a00034 	movhi	r2,32768
  806ca0:	10bfffc4 	addi	r2,r2,-1
  806ca4:	00c00044 	movi	r3,1
  806ca8:	88aa703a 	and	r21,r17,r2
  806cac:	90c00015 	stw	r3,0(r18)
  806cb0:	003f5806 	br	806a14 <_dtoa_r+0x7c>
  806cb4:	00800434 	movhi	r2,16
  806cb8:	10bfffc4 	addi	r2,r2,-1
  806cbc:	a884703a 	and	r2,r21,r2
  806cc0:	103fec1e 	bne	r2,zero,806c74 <_dtoa_r+0x2dc>
  806cc4:	00c02074 	movhi	r3,129
  806cc8:	18c3e704 	addi	r3,r3,3996
  806ccc:	003feb06 	br	806c7c <_dtoa_r+0x2e4>
  806cd0:	d8802917 	ldw	r2,164(sp)
  806cd4:	19000204 	addi	r4,r3,8
  806cd8:	11000015 	stw	r4,0(r2)
  806cdc:	003f6206 	br	806a68 <_dtoa_r+0xd0>
  806ce0:	ddc00117 	ldw	r23,4(sp)
  806ce4:	d8800217 	ldw	r2,8(sp)
  806ce8:	01000804 	movi	r4,32
  806cec:	b8c10c84 	addi	r3,r23,1074
  806cf0:	18a3883a 	add	r17,r3,r2
  806cf4:	2441b80e 	bge	r4,r17,8073d8 <_dtoa_r+0xa40>
  806cf8:	00c01004 	movi	r3,64
  806cfc:	1c47c83a 	sub	r3,r3,r17
  806d00:	88bff804 	addi	r2,r17,-32
  806d04:	a8c6983a 	sll	r3,r21,r3
  806d08:	a084d83a 	srl	r2,r20,r2
  806d0c:	1888b03a 	or	r4,r3,r2
  806d10:	080c72c0 	call	80c72c <__floatunsidf>
  806d14:	1011883a 	mov	r8,r2
  806d18:	00bf8434 	movhi	r2,65040
  806d1c:	01000044 	movi	r4,1
  806d20:	10d3883a 	add	r9,r2,r3
  806d24:	8dbef344 	addi	r22,r17,-1075
  806d28:	d9000815 	stw	r4,32(sp)
  806d2c:	003f6f06 	br	806aec <_dtoa_r+0x154>
  806d30:	d8001715 	stw	zero,92(sp)
  806d34:	04400044 	movi	r17,1
  806d38:	00bfffc4 	movi	r2,-1
  806d3c:	00c00044 	movi	r3,1
  806d40:	d8800e15 	stw	r2,56(sp)
  806d44:	d8002615 	stw	zero,152(sp)
  806d48:	d8800f15 	stw	r2,60(sp)
  806d4c:	d8c00b15 	stw	r3,44(sp)
  806d50:	1021883a 	mov	r16,r2
  806d54:	d8801617 	ldw	r2,88(sp)
  806d58:	10001115 	stw	zero,68(r2)
  806d5c:	d8801617 	ldw	r2,88(sp)
  806d60:	11401117 	ldw	r5,68(r2)
  806d64:	1009883a 	mov	r4,r2
  806d68:	08094940 	call	809494 <_Balloc>
  806d6c:	d8c01617 	ldw	r3,88(sp)
  806d70:	d8800515 	stw	r2,20(sp)
  806d74:	18801015 	stw	r2,64(r3)
  806d78:	00800384 	movi	r2,14
  806d7c:	14006836 	bltu	r2,r16,806f20 <_dtoa_r+0x588>
  806d80:	8805003a 	cmpeq	r2,r17,zero
  806d84:	1000661e 	bne	r2,zero,806f20 <_dtoa_r+0x588>
  806d88:	d9000d17 	ldw	r4,52(sp)
  806d8c:	0102300e 	bge	zero,r4,807650 <_dtoa_r+0xcb8>
  806d90:	208003cc 	andi	r2,r4,15
  806d94:	100490fa 	slli	r2,r2,3
  806d98:	2025d13a 	srai	r18,r4,4
  806d9c:	00c02074 	movhi	r3,129
  806da0:	18c3fb04 	addi	r3,r3,4076
  806da4:	10c5883a 	add	r2,r2,r3
  806da8:	90c0040c 	andi	r3,r18,16
  806dac:	14000017 	ldw	r16,0(r2)
  806db0:	14400117 	ldw	r17,4(r2)
  806db4:	18036a1e 	bne	r3,zero,807b60 <_dtoa_r+0x11c8>
  806db8:	05800084 	movi	r22,2
  806dbc:	90001026 	beq	r18,zero,806e00 <_dtoa_r+0x468>
  806dc0:	04c02074 	movhi	r19,129
  806dc4:	9cc42d04 	addi	r19,r19,4276
  806dc8:	9080004c 	andi	r2,r18,1
  806dcc:	1005003a 	cmpeq	r2,r2,zero
  806dd0:	1000081e 	bne	r2,zero,806df4 <_dtoa_r+0x45c>
  806dd4:	99800017 	ldw	r6,0(r19)
  806dd8:	99c00117 	ldw	r7,4(r19)
  806ddc:	880b883a 	mov	r5,r17
  806de0:	8009883a 	mov	r4,r16
  806de4:	080bc980 	call	80bc98 <__muldf3>
  806de8:	1021883a 	mov	r16,r2
  806dec:	b5800044 	addi	r22,r22,1
  806df0:	1823883a 	mov	r17,r3
  806df4:	9025d07a 	srai	r18,r18,1
  806df8:	9cc00204 	addi	r19,r19,8
  806dfc:	903ff21e 	bne	r18,zero,806dc8 <_dtoa_r+0x430>
  806e00:	a80b883a 	mov	r5,r21
  806e04:	a009883a 	mov	r4,r20
  806e08:	880f883a 	mov	r7,r17
  806e0c:	800d883a 	mov	r6,r16
  806e10:	080c05c0 	call	80c05c <__divdf3>
  806e14:	1029883a 	mov	r20,r2
  806e18:	182b883a 	mov	r21,r3
  806e1c:	d8c00c17 	ldw	r3,48(sp)
  806e20:	1805003a 	cmpeq	r2,r3,zero
  806e24:	1000081e 	bne	r2,zero,806e48 <_dtoa_r+0x4b0>
  806e28:	0005883a 	mov	r2,zero
  806e2c:	00cffc34 	movhi	r3,16368
  806e30:	180f883a 	mov	r7,r3
  806e34:	a009883a 	mov	r4,r20
  806e38:	a80b883a 	mov	r5,r21
  806e3c:	100d883a 	mov	r6,r2
  806e40:	080c4d40 	call	80c4d4 <__ltdf2>
  806e44:	1003fe16 	blt	r2,zero,807e40 <_dtoa_r+0x14a8>
  806e48:	b009883a 	mov	r4,r22
  806e4c:	080c55c0 	call	80c55c <__floatsidf>
  806e50:	180b883a 	mov	r5,r3
  806e54:	1009883a 	mov	r4,r2
  806e58:	a00d883a 	mov	r6,r20
  806e5c:	a80f883a 	mov	r7,r21
  806e60:	080bc980 	call	80bc98 <__muldf3>
  806e64:	0011883a 	mov	r8,zero
  806e68:	02500734 	movhi	r9,16412
  806e6c:	1009883a 	mov	r4,r2
  806e70:	180b883a 	mov	r5,r3
  806e74:	480f883a 	mov	r7,r9
  806e78:	400d883a 	mov	r6,r8
  806e7c:	080bc240 	call	80bc24 <__adddf3>
  806e80:	d9000f17 	ldw	r4,60(sp)
  806e84:	102d883a 	mov	r22,r2
  806e88:	00bf3034 	movhi	r2,64704
  806e8c:	18b9883a 	add	fp,r3,r2
  806e90:	e02f883a 	mov	r23,fp
  806e94:	20028f1e 	bne	r4,zero,8078d4 <_dtoa_r+0xf3c>
  806e98:	0005883a 	mov	r2,zero
  806e9c:	00d00534 	movhi	r3,16404
  806ea0:	a009883a 	mov	r4,r20
  806ea4:	a80b883a 	mov	r5,r21
  806ea8:	180f883a 	mov	r7,r3
  806eac:	100d883a 	mov	r6,r2
  806eb0:	080bba40 	call	80bba4 <__subdf3>
  806eb4:	1009883a 	mov	r4,r2
  806eb8:	e00f883a 	mov	r7,fp
  806ebc:	180b883a 	mov	r5,r3
  806ec0:	b00d883a 	mov	r6,r22
  806ec4:	1025883a 	mov	r18,r2
  806ec8:	1827883a 	mov	r19,r3
  806ecc:	080c3c40 	call	80c3c4 <__gtdf2>
  806ed0:	00834f16 	blt	zero,r2,807c10 <_dtoa_r+0x1278>
  806ed4:	e0e0003c 	xorhi	r3,fp,32768
  806ed8:	9009883a 	mov	r4,r18
  806edc:	980b883a 	mov	r5,r19
  806ee0:	180f883a 	mov	r7,r3
  806ee4:	b00d883a 	mov	r6,r22
  806ee8:	080c4d40 	call	80c4d4 <__ltdf2>
  806eec:	1000080e 	bge	r2,zero,806f10 <_dtoa_r+0x578>
  806ef0:	0027883a 	mov	r19,zero
  806ef4:	0025883a 	mov	r18,zero
  806ef8:	d8802617 	ldw	r2,152(sp)
  806efc:	df000517 	ldw	fp,20(sp)
  806f00:	d8000615 	stw	zero,24(sp)
  806f04:	0084303a 	nor	r2,zero,r2
  806f08:	d8800d15 	stw	r2,52(sp)
  806f0c:	00019b06 	br	80757c <_dtoa_r+0xbe4>
  806f10:	d9801217 	ldw	r6,72(sp)
  806f14:	d8801317 	ldw	r2,76(sp)
  806f18:	3029883a 	mov	r20,r6
  806f1c:	102b883a 	mov	r21,r2
  806f20:	d8c00217 	ldw	r3,8(sp)
  806f24:	18008516 	blt	r3,zero,80713c <_dtoa_r+0x7a4>
  806f28:	d9000d17 	ldw	r4,52(sp)
  806f2c:	00800384 	movi	r2,14
  806f30:	11008216 	blt	r2,r4,80713c <_dtoa_r+0x7a4>
  806f34:	200490fa 	slli	r2,r4,3
  806f38:	d9802617 	ldw	r6,152(sp)
  806f3c:	00c02074 	movhi	r3,129
  806f40:	18c3fb04 	addi	r3,r3,4076
  806f44:	10c5883a 	add	r2,r2,r3
  806f48:	14800017 	ldw	r18,0(r2)
  806f4c:	14c00117 	ldw	r19,4(r2)
  806f50:	30031e16 	blt	r6,zero,807bcc <_dtoa_r+0x1234>
  806f54:	d9000517 	ldw	r4,20(sp)
  806f58:	d8c00f17 	ldw	r3,60(sp)
  806f5c:	a823883a 	mov	r17,r21
  806f60:	a021883a 	mov	r16,r20
  806f64:	192b883a 	add	r21,r3,r4
  806f68:	2039883a 	mov	fp,r4
  806f6c:	00000f06 	br	806fac <_dtoa_r+0x614>
  806f70:	0005883a 	mov	r2,zero
  806f74:	00d00934 	movhi	r3,16420
  806f78:	5009883a 	mov	r4,r10
  806f7c:	580b883a 	mov	r5,r11
  806f80:	180f883a 	mov	r7,r3
  806f84:	100d883a 	mov	r6,r2
  806f88:	080bc980 	call	80bc98 <__muldf3>
  806f8c:	180b883a 	mov	r5,r3
  806f90:	000d883a 	mov	r6,zero
  806f94:	000f883a 	mov	r7,zero
  806f98:	1009883a 	mov	r4,r2
  806f9c:	1021883a 	mov	r16,r2
  806fa0:	1823883a 	mov	r17,r3
  806fa4:	080c33c0 	call	80c33c <__nedf2>
  806fa8:	10004526 	beq	r2,zero,8070c0 <_dtoa_r+0x728>
  806fac:	900d883a 	mov	r6,r18
  806fb0:	980f883a 	mov	r7,r19
  806fb4:	8009883a 	mov	r4,r16
  806fb8:	880b883a 	mov	r5,r17
  806fbc:	080c05c0 	call	80c05c <__divdf3>
  806fc0:	180b883a 	mov	r5,r3
  806fc4:	1009883a 	mov	r4,r2
  806fc8:	080c6540 	call	80c654 <__fixdfsi>
  806fcc:	1009883a 	mov	r4,r2
  806fd0:	1029883a 	mov	r20,r2
  806fd4:	080c55c0 	call	80c55c <__floatsidf>
  806fd8:	180f883a 	mov	r7,r3
  806fdc:	9009883a 	mov	r4,r18
  806fe0:	980b883a 	mov	r5,r19
  806fe4:	100d883a 	mov	r6,r2
  806fe8:	080bc980 	call	80bc98 <__muldf3>
  806fec:	180f883a 	mov	r7,r3
  806ff0:	880b883a 	mov	r5,r17
  806ff4:	8009883a 	mov	r4,r16
  806ff8:	100d883a 	mov	r6,r2
  806ffc:	080bba40 	call	80bba4 <__subdf3>
  807000:	1015883a 	mov	r10,r2
  807004:	a0800c04 	addi	r2,r20,48
  807008:	e0800005 	stb	r2,0(fp)
  80700c:	e7000044 	addi	fp,fp,1
  807010:	1817883a 	mov	r11,r3
  807014:	e57fd61e 	bne	fp,r21,806f70 <_dtoa_r+0x5d8>
  807018:	500d883a 	mov	r6,r10
  80701c:	180f883a 	mov	r7,r3
  807020:	5009883a 	mov	r4,r10
  807024:	180b883a 	mov	r5,r3
  807028:	080bc240 	call	80bc24 <__adddf3>
  80702c:	100d883a 	mov	r6,r2
  807030:	9009883a 	mov	r4,r18
  807034:	980b883a 	mov	r5,r19
  807038:	180f883a 	mov	r7,r3
  80703c:	1021883a 	mov	r16,r2
  807040:	1823883a 	mov	r17,r3
  807044:	080c4d40 	call	80c4d4 <__ltdf2>
  807048:	10000816 	blt	r2,zero,80706c <_dtoa_r+0x6d4>
  80704c:	980b883a 	mov	r5,r19
  807050:	800d883a 	mov	r6,r16
  807054:	880f883a 	mov	r7,r17
  807058:	9009883a 	mov	r4,r18
  80705c:	080c2b40 	call	80c2b4 <__eqdf2>
  807060:	1000171e 	bne	r2,zero,8070c0 <_dtoa_r+0x728>
  807064:	a080004c 	andi	r2,r20,1
  807068:	10001526 	beq	r2,zero,8070c0 <_dtoa_r+0x728>
  80706c:	d8800d17 	ldw	r2,52(sp)
  807070:	d8800415 	stw	r2,16(sp)
  807074:	e009883a 	mov	r4,fp
  807078:	213fffc4 	addi	r4,r4,-1
  80707c:	20c00007 	ldb	r3,0(r4)
  807080:	00800e44 	movi	r2,57
  807084:	1880081e 	bne	r3,r2,8070a8 <_dtoa_r+0x710>
  807088:	d8800517 	ldw	r2,20(sp)
  80708c:	113ffa1e 	bne	r2,r4,807078 <_dtoa_r+0x6e0>
  807090:	d8c00417 	ldw	r3,16(sp)
  807094:	d9800517 	ldw	r6,20(sp)
  807098:	00800c04 	movi	r2,48
  80709c:	18c00044 	addi	r3,r3,1
  8070a0:	d8c00415 	stw	r3,16(sp)
  8070a4:	30800005 	stb	r2,0(r6)
  8070a8:	20800003 	ldbu	r2,0(r4)
  8070ac:	d8c00417 	ldw	r3,16(sp)
  8070b0:	27000044 	addi	fp,r4,1
  8070b4:	10800044 	addi	r2,r2,1
  8070b8:	d8c00d15 	stw	r3,52(sp)
  8070bc:	20800005 	stb	r2,0(r4)
  8070c0:	d9001617 	ldw	r4,88(sp)
  8070c4:	d9400717 	ldw	r5,28(sp)
  8070c8:	0808f140 	call	808f14 <_Bfree>
  8070cc:	e0000005 	stb	zero,0(fp)
  8070d0:	d9800d17 	ldw	r6,52(sp)
  8070d4:	d8c02717 	ldw	r3,156(sp)
  8070d8:	d9002917 	ldw	r4,164(sp)
  8070dc:	30800044 	addi	r2,r6,1
  8070e0:	18800015 	stw	r2,0(r3)
  8070e4:	20029c26 	beq	r4,zero,807b58 <_dtoa_r+0x11c0>
  8070e8:	d8c00517 	ldw	r3,20(sp)
  8070ec:	27000015 	stw	fp,0(r4)
  8070f0:	003e5d06 	br	806a68 <_dtoa_r+0xd0>
  8070f4:	d9800d17 	ldw	r6,52(sp)
  8070f8:	00c02074 	movhi	r3,129
  8070fc:	18c3fb04 	addi	r3,r3,4076
  807100:	d9001217 	ldw	r4,72(sp)
  807104:	300490fa 	slli	r2,r6,3
  807108:	d9401317 	ldw	r5,76(sp)
  80710c:	10c5883a 	add	r2,r2,r3
  807110:	12000017 	ldw	r8,0(r2)
  807114:	12400117 	ldw	r9,4(r2)
  807118:	400d883a 	mov	r6,r8
  80711c:	480f883a 	mov	r7,r9
  807120:	080c4d40 	call	80c4d4 <__ltdf2>
  807124:	1000030e 	bge	r2,zero,807134 <_dtoa_r+0x79c>
  807128:	d8800d17 	ldw	r2,52(sp)
  80712c:	10bfffc4 	addi	r2,r2,-1
  807130:	d8800d15 	stw	r2,52(sp)
  807134:	d8000c15 	stw	zero,48(sp)
  807138:	003ea806 	br	806bdc <_dtoa_r+0x244>
  80713c:	d9000b17 	ldw	r4,44(sp)
  807140:	202cc03a 	cmpne	r22,r4,zero
  807144:	b000c71e 	bne	r22,zero,807464 <_dtoa_r+0xacc>
  807148:	dc001117 	ldw	r16,68(sp)
  80714c:	dc801017 	ldw	r18,64(sp)
  807150:	0027883a 	mov	r19,zero
  807154:	04000b0e 	bge	zero,r16,807184 <_dtoa_r+0x7ec>
  807158:	d8c00a17 	ldw	r3,40(sp)
  80715c:	00c0090e 	bge	zero,r3,807184 <_dtoa_r+0x7ec>
  807160:	8005883a 	mov	r2,r16
  807164:	1c011316 	blt	r3,r16,8075b4 <_dtoa_r+0xc1c>
  807168:	d9000a17 	ldw	r4,40(sp)
  80716c:	d9801117 	ldw	r6,68(sp)
  807170:	80a1c83a 	sub	r16,r16,r2
  807174:	2089c83a 	sub	r4,r4,r2
  807178:	308dc83a 	sub	r6,r6,r2
  80717c:	d9000a15 	stw	r4,40(sp)
  807180:	d9801115 	stw	r6,68(sp)
  807184:	d8801017 	ldw	r2,64(sp)
  807188:	0080150e 	bge	zero,r2,8071e0 <_dtoa_r+0x848>
  80718c:	d8c00b17 	ldw	r3,44(sp)
  807190:	1805003a 	cmpeq	r2,r3,zero
  807194:	1001c91e 	bne	r2,zero,8078bc <_dtoa_r+0xf24>
  807198:	04800e0e 	bge	zero,r18,8071d4 <_dtoa_r+0x83c>
  80719c:	d9001617 	ldw	r4,88(sp)
  8071a0:	980b883a 	mov	r5,r19
  8071a4:	900d883a 	mov	r6,r18
  8071a8:	0809cc80 	call	809cc8 <__pow5mult>
  8071ac:	d9001617 	ldw	r4,88(sp)
  8071b0:	d9800717 	ldw	r6,28(sp)
  8071b4:	100b883a 	mov	r5,r2
  8071b8:	1027883a 	mov	r19,r2
  8071bc:	08099a40 	call	8099a4 <__multiply>
  8071c0:	d9001617 	ldw	r4,88(sp)
  8071c4:	d9400717 	ldw	r5,28(sp)
  8071c8:	1023883a 	mov	r17,r2
  8071cc:	0808f140 	call	808f14 <_Bfree>
  8071d0:	dc400715 	stw	r17,28(sp)
  8071d4:	d9001017 	ldw	r4,64(sp)
  8071d8:	248dc83a 	sub	r6,r4,r18
  8071dc:	30010e1e 	bne	r6,zero,807618 <_dtoa_r+0xc80>
  8071e0:	d9001617 	ldw	r4,88(sp)
  8071e4:	04400044 	movi	r17,1
  8071e8:	880b883a 	mov	r5,r17
  8071ec:	0809b8c0 	call	809b8c <__i2b>
  8071f0:	d9800917 	ldw	r6,36(sp)
  8071f4:	1025883a 	mov	r18,r2
  8071f8:	0180040e 	bge	zero,r6,80720c <_dtoa_r+0x874>
  8071fc:	d9001617 	ldw	r4,88(sp)
  807200:	100b883a 	mov	r5,r2
  807204:	0809cc80 	call	809cc8 <__pow5mult>
  807208:	1025883a 	mov	r18,r2
  80720c:	d8801717 	ldw	r2,92(sp)
  807210:	8880f30e 	bge	r17,r2,8075e0 <_dtoa_r+0xc48>
  807214:	0023883a 	mov	r17,zero
  807218:	d9800917 	ldw	r6,36(sp)
  80721c:	30019e1e 	bne	r6,zero,807898 <_dtoa_r+0xf00>
  807220:	00c00044 	movi	r3,1
  807224:	d9000a17 	ldw	r4,40(sp)
  807228:	20c5883a 	add	r2,r4,r3
  80722c:	10c007cc 	andi	r3,r2,31
  807230:	1800841e 	bne	r3,zero,807444 <_dtoa_r+0xaac>
  807234:	00800704 	movi	r2,28
  807238:	d9000a17 	ldw	r4,40(sp)
  80723c:	d9801117 	ldw	r6,68(sp)
  807240:	80a1883a 	add	r16,r16,r2
  807244:	2089883a 	add	r4,r4,r2
  807248:	308d883a 	add	r6,r6,r2
  80724c:	d9000a15 	stw	r4,40(sp)
  807250:	d9801115 	stw	r6,68(sp)
  807254:	d8801117 	ldw	r2,68(sp)
  807258:	0080050e 	bge	zero,r2,807270 <_dtoa_r+0x8d8>
  80725c:	d9400717 	ldw	r5,28(sp)
  807260:	d9001617 	ldw	r4,88(sp)
  807264:	100d883a 	mov	r6,r2
  807268:	08098580 	call	809858 <__lshift>
  80726c:	d8800715 	stw	r2,28(sp)
  807270:	d8c00a17 	ldw	r3,40(sp)
  807274:	00c0050e 	bge	zero,r3,80728c <_dtoa_r+0x8f4>
  807278:	d9001617 	ldw	r4,88(sp)
  80727c:	900b883a 	mov	r5,r18
  807280:	180d883a 	mov	r6,r3
  807284:	08098580 	call	809858 <__lshift>
  807288:	1025883a 	mov	r18,r2
  80728c:	d9000c17 	ldw	r4,48(sp)
  807290:	2005003a 	cmpeq	r2,r4,zero
  807294:	10016f26 	beq	r2,zero,807854 <_dtoa_r+0xebc>
  807298:	d9000f17 	ldw	r4,60(sp)
  80729c:	0102170e 	bge	zero,r4,807afc <_dtoa_r+0x1164>
  8072a0:	d9800b17 	ldw	r6,44(sp)
  8072a4:	3005003a 	cmpeq	r2,r6,zero
  8072a8:	1000881e 	bne	r2,zero,8074cc <_dtoa_r+0xb34>
  8072ac:	0400050e 	bge	zero,r16,8072c4 <_dtoa_r+0x92c>
  8072b0:	d9001617 	ldw	r4,88(sp)
  8072b4:	980b883a 	mov	r5,r19
  8072b8:	800d883a 	mov	r6,r16
  8072bc:	08098580 	call	809858 <__lshift>
  8072c0:	1027883a 	mov	r19,r2
  8072c4:	8804c03a 	cmpne	r2,r17,zero
  8072c8:	1002541e 	bne	r2,zero,807c1c <_dtoa_r+0x1284>
  8072cc:	980b883a 	mov	r5,r19
  8072d0:	dd800517 	ldw	r22,20(sp)
  8072d4:	dcc00615 	stw	r19,24(sp)
  8072d8:	a700004c 	andi	fp,r20,1
  8072dc:	2827883a 	mov	r19,r5
  8072e0:	d9000717 	ldw	r4,28(sp)
  8072e4:	900b883a 	mov	r5,r18
  8072e8:	08067800 	call	806780 <quorem>
  8072ec:	d9000717 	ldw	r4,28(sp)
  8072f0:	d9400617 	ldw	r5,24(sp)
  8072f4:	1023883a 	mov	r17,r2
  8072f8:	8dc00c04 	addi	r23,r17,48
  8072fc:	08090700 	call	809070 <__mcmp>
  807300:	d9001617 	ldw	r4,88(sp)
  807304:	900b883a 	mov	r5,r18
  807308:	980d883a 	mov	r6,r19
  80730c:	1029883a 	mov	r20,r2
  807310:	08096cc0 	call	8096cc <__mdiff>
  807314:	102b883a 	mov	r21,r2
  807318:	10800317 	ldw	r2,12(r2)
  80731c:	1001281e 	bne	r2,zero,8077c0 <_dtoa_r+0xe28>
  807320:	d9000717 	ldw	r4,28(sp)
  807324:	a80b883a 	mov	r5,r21
  807328:	08090700 	call	809070 <__mcmp>
  80732c:	d9001617 	ldw	r4,88(sp)
  807330:	1021883a 	mov	r16,r2
  807334:	a80b883a 	mov	r5,r21
  807338:	0808f140 	call	808f14 <_Bfree>
  80733c:	8000041e 	bne	r16,zero,807350 <_dtoa_r+0x9b8>
  807340:	d8801717 	ldw	r2,92(sp)
  807344:	1000021e 	bne	r2,zero,807350 <_dtoa_r+0x9b8>
  807348:	e004c03a 	cmpne	r2,fp,zero
  80734c:	10011726 	beq	r2,zero,8077ac <_dtoa_r+0xe14>
  807350:	a0010616 	blt	r20,zero,80776c <_dtoa_r+0xdd4>
  807354:	a000041e 	bne	r20,zero,807368 <_dtoa_r+0x9d0>
  807358:	d8c01717 	ldw	r3,92(sp)
  80735c:	1800021e 	bne	r3,zero,807368 <_dtoa_r+0x9d0>
  807360:	e004c03a 	cmpne	r2,fp,zero
  807364:	10010126 	beq	r2,zero,80776c <_dtoa_r+0xdd4>
  807368:	04023d16 	blt	zero,r16,807c60 <_dtoa_r+0x12c8>
  80736c:	b5c00005 	stb	r23,0(r22)
  807370:	d9800517 	ldw	r6,20(sp)
  807374:	d9000f17 	ldw	r4,60(sp)
  807378:	b5800044 	addi	r22,r22,1
  80737c:	3105883a 	add	r2,r6,r4
  807380:	b0806526 	beq	r22,r2,807518 <_dtoa_r+0xb80>
  807384:	d9400717 	ldw	r5,28(sp)
  807388:	d9001617 	ldw	r4,88(sp)
  80738c:	01800284 	movi	r6,10
  807390:	000f883a 	mov	r7,zero
  807394:	0809bc80 	call	809bc8 <__multadd>
  807398:	d8800715 	stw	r2,28(sp)
  80739c:	d8800617 	ldw	r2,24(sp)
  8073a0:	14c10c26 	beq	r2,r19,8077d4 <_dtoa_r+0xe3c>
  8073a4:	d9400617 	ldw	r5,24(sp)
  8073a8:	d9001617 	ldw	r4,88(sp)
  8073ac:	01800284 	movi	r6,10
  8073b0:	000f883a 	mov	r7,zero
  8073b4:	0809bc80 	call	809bc8 <__multadd>
  8073b8:	d9001617 	ldw	r4,88(sp)
  8073bc:	980b883a 	mov	r5,r19
  8073c0:	01800284 	movi	r6,10
  8073c4:	000f883a 	mov	r7,zero
  8073c8:	d8800615 	stw	r2,24(sp)
  8073cc:	0809bc80 	call	809bc8 <__multadd>
  8073d0:	1027883a 	mov	r19,r2
  8073d4:	003fc206 	br	8072e0 <_dtoa_r+0x948>
  8073d8:	2445c83a 	sub	r2,r4,r17
  8073dc:	a088983a 	sll	r4,r20,r2
  8073e0:	003e4b06 	br	806d10 <_dtoa_r+0x378>
  8073e4:	01bfffc4 	movi	r6,-1
  8073e8:	00800044 	movi	r2,1
  8073ec:	d9800e15 	stw	r6,56(sp)
  8073f0:	d9800f15 	stw	r6,60(sp)
  8073f4:	d8800b15 	stw	r2,44(sp)
  8073f8:	d8c01617 	ldw	r3,88(sp)
  8073fc:	008005c4 	movi	r2,23
  807400:	18001115 	stw	zero,68(r3)
  807404:	1580082e 	bgeu	r2,r22,807428 <_dtoa_r+0xa90>
  807408:	00c00104 	movi	r3,4
  80740c:	0009883a 	mov	r4,zero
  807410:	18c7883a 	add	r3,r3,r3
  807414:	18800504 	addi	r2,r3,20
  807418:	21000044 	addi	r4,r4,1
  80741c:	b0bffc2e 	bgeu	r22,r2,807410 <_dtoa_r+0xa78>
  807420:	d9801617 	ldw	r6,88(sp)
  807424:	31001115 	stw	r4,68(r6)
  807428:	dc000f17 	ldw	r16,60(sp)
  80742c:	003e4b06 	br	806d5c <_dtoa_r+0x3c4>
  807430:	d9801717 	ldw	r6,92(sp)
  807434:	0023883a 	mov	r17,zero
  807438:	31bfff04 	addi	r6,r6,-4
  80743c:	d9801715 	stw	r6,92(sp)
  807440:	003df806 	br	806c24 <_dtoa_r+0x28c>
  807444:	00800804 	movi	r2,32
  807448:	10c9c83a 	sub	r4,r2,r3
  80744c:	00c00104 	movi	r3,4
  807450:	19005a16 	blt	r3,r4,8075bc <_dtoa_r+0xc24>
  807454:	008000c4 	movi	r2,3
  807458:	113f7e16 	blt	r2,r4,807254 <_dtoa_r+0x8bc>
  80745c:	20800704 	addi	r2,r4,28
  807460:	003f7506 	br	807238 <_dtoa_r+0x8a0>
  807464:	d9801717 	ldw	r6,92(sp)
  807468:	00800044 	movi	r2,1
  80746c:	1180a10e 	bge	r2,r6,8076f4 <_dtoa_r+0xd5c>
  807470:	d9800f17 	ldw	r6,60(sp)
  807474:	d8c01017 	ldw	r3,64(sp)
  807478:	30bfffc4 	addi	r2,r6,-1
  80747c:	1881c616 	blt	r3,r2,807b98 <_dtoa_r+0x1200>
  807480:	18a5c83a 	sub	r18,r3,r2
  807484:	d8800f17 	ldw	r2,60(sp)
  807488:	10026216 	blt	r2,zero,807e14 <_dtoa_r+0x147c>
  80748c:	dc001117 	ldw	r16,68(sp)
  807490:	1007883a 	mov	r3,r2
  807494:	d9800a17 	ldw	r6,40(sp)
  807498:	d8801117 	ldw	r2,68(sp)
  80749c:	d9001617 	ldw	r4,88(sp)
  8074a0:	30cd883a 	add	r6,r6,r3
  8074a4:	10c5883a 	add	r2,r2,r3
  8074a8:	01400044 	movi	r5,1
  8074ac:	d9800a15 	stw	r6,40(sp)
  8074b0:	d8801115 	stw	r2,68(sp)
  8074b4:	0809b8c0 	call	809b8c <__i2b>
  8074b8:	1027883a 	mov	r19,r2
  8074bc:	003f2506 	br	807154 <_dtoa_r+0x7bc>
  8074c0:	00c02074 	movhi	r3,129
  8074c4:	18c3de04 	addi	r3,r3,3960
  8074c8:	003d6706 	br	806a68 <_dtoa_r+0xd0>
  8074cc:	dd800517 	ldw	r22,20(sp)
  8074d0:	04000044 	movi	r16,1
  8074d4:	00000706 	br	8074f4 <_dtoa_r+0xb5c>
  8074d8:	d9400717 	ldw	r5,28(sp)
  8074dc:	d9001617 	ldw	r4,88(sp)
  8074e0:	01800284 	movi	r6,10
  8074e4:	000f883a 	mov	r7,zero
  8074e8:	0809bc80 	call	809bc8 <__multadd>
  8074ec:	d8800715 	stw	r2,28(sp)
  8074f0:	84000044 	addi	r16,r16,1
  8074f4:	d9000717 	ldw	r4,28(sp)
  8074f8:	900b883a 	mov	r5,r18
  8074fc:	08067800 	call	806780 <quorem>
  807500:	15c00c04 	addi	r23,r2,48
  807504:	b5c00005 	stb	r23,0(r22)
  807508:	d8c00f17 	ldw	r3,60(sp)
  80750c:	b5800044 	addi	r22,r22,1
  807510:	80fff116 	blt	r16,r3,8074d8 <_dtoa_r+0xb40>
  807514:	d8000615 	stw	zero,24(sp)
  807518:	d9400717 	ldw	r5,28(sp)
  80751c:	d9001617 	ldw	r4,88(sp)
  807520:	01800044 	movi	r6,1
  807524:	08098580 	call	809858 <__lshift>
  807528:	1009883a 	mov	r4,r2
  80752c:	900b883a 	mov	r5,r18
  807530:	d8800715 	stw	r2,28(sp)
  807534:	08090700 	call	809070 <__mcmp>
  807538:	00803c0e 	bge	zero,r2,80762c <_dtoa_r+0xc94>
  80753c:	b009883a 	mov	r4,r22
  807540:	213fffc4 	addi	r4,r4,-1
  807544:	21400003 	ldbu	r5,0(r4)
  807548:	00800e44 	movi	r2,57
  80754c:	28c03fcc 	andi	r3,r5,255
  807550:	18c0201c 	xori	r3,r3,128
  807554:	18ffe004 	addi	r3,r3,-128
  807558:	1881981e 	bne	r3,r2,807bbc <_dtoa_r+0x1224>
  80755c:	d9800517 	ldw	r6,20(sp)
  807560:	21bff71e 	bne	r4,r6,807540 <_dtoa_r+0xba8>
  807564:	d8800d17 	ldw	r2,52(sp)
  807568:	37000044 	addi	fp,r6,1
  80756c:	10800044 	addi	r2,r2,1
  807570:	d8800d15 	stw	r2,52(sp)
  807574:	00800c44 	movi	r2,49
  807578:	30800005 	stb	r2,0(r6)
  80757c:	d9001617 	ldw	r4,88(sp)
  807580:	900b883a 	mov	r5,r18
  807584:	0808f140 	call	808f14 <_Bfree>
  807588:	983ecd26 	beq	r19,zero,8070c0 <_dtoa_r+0x728>
  80758c:	d8c00617 	ldw	r3,24(sp)
  807590:	18000426 	beq	r3,zero,8075a4 <_dtoa_r+0xc0c>
  807594:	1cc00326 	beq	r3,r19,8075a4 <_dtoa_r+0xc0c>
  807598:	d9001617 	ldw	r4,88(sp)
  80759c:	180b883a 	mov	r5,r3
  8075a0:	0808f140 	call	808f14 <_Bfree>
  8075a4:	d9001617 	ldw	r4,88(sp)
  8075a8:	980b883a 	mov	r5,r19
  8075ac:	0808f140 	call	808f14 <_Bfree>
  8075b0:	003ec306 	br	8070c0 <_dtoa_r+0x728>
  8075b4:	1805883a 	mov	r2,r3
  8075b8:	003eeb06 	br	807168 <_dtoa_r+0x7d0>
  8075bc:	d9800a17 	ldw	r6,40(sp)
  8075c0:	d8c01117 	ldw	r3,68(sp)
  8075c4:	20bfff04 	addi	r2,r4,-4
  8075c8:	308d883a 	add	r6,r6,r2
  8075cc:	1887883a 	add	r3,r3,r2
  8075d0:	80a1883a 	add	r16,r16,r2
  8075d4:	d9800a15 	stw	r6,40(sp)
  8075d8:	d8c01115 	stw	r3,68(sp)
  8075dc:	003f1d06 	br	807254 <_dtoa_r+0x8bc>
  8075e0:	a03f0c1e 	bne	r20,zero,807214 <_dtoa_r+0x87c>
  8075e4:	00800434 	movhi	r2,16
  8075e8:	10bfffc4 	addi	r2,r2,-1
  8075ec:	a884703a 	and	r2,r21,r2
  8075f0:	103f081e 	bne	r2,zero,807214 <_dtoa_r+0x87c>
  8075f4:	a89ffc2c 	andhi	r2,r21,32752
  8075f8:	103f0626 	beq	r2,zero,807214 <_dtoa_r+0x87c>
  8075fc:	d8c01117 	ldw	r3,68(sp)
  807600:	d9000a17 	ldw	r4,40(sp)
  807604:	18c00044 	addi	r3,r3,1
  807608:	21000044 	addi	r4,r4,1
  80760c:	d8c01115 	stw	r3,68(sp)
  807610:	d9000a15 	stw	r4,40(sp)
  807614:	003f0006 	br	807218 <_dtoa_r+0x880>
  807618:	d9400717 	ldw	r5,28(sp)
  80761c:	d9001617 	ldw	r4,88(sp)
  807620:	0809cc80 	call	809cc8 <__pow5mult>
  807624:	d8800715 	stw	r2,28(sp)
  807628:	003eed06 	br	8071e0 <_dtoa_r+0x848>
  80762c:	1000021e 	bne	r2,zero,807638 <_dtoa_r+0xca0>
  807630:	b880004c 	andi	r2,r23,1
  807634:	103fc11e 	bne	r2,zero,80753c <_dtoa_r+0xba4>
  807638:	b5bfffc4 	addi	r22,r22,-1
  80763c:	b0c00007 	ldb	r3,0(r22)
  807640:	00800c04 	movi	r2,48
  807644:	18bffc26 	beq	r3,r2,807638 <_dtoa_r+0xca0>
  807648:	b7000044 	addi	fp,r22,1
  80764c:	003fcb06 	br	80757c <_dtoa_r+0xbe4>
  807650:	d9800d17 	ldw	r6,52(sp)
  807654:	018fc83a 	sub	r7,zero,r6
  807658:	3801f726 	beq	r7,zero,807e38 <_dtoa_r+0x14a0>
  80765c:	398003cc 	andi	r6,r7,15
  807660:	300c90fa 	slli	r6,r6,3
  807664:	01402074 	movhi	r5,129
  807668:	2943fb04 	addi	r5,r5,4076
  80766c:	d9001217 	ldw	r4,72(sp)
  807670:	314d883a 	add	r6,r6,r5
  807674:	30c00117 	ldw	r3,4(r6)
  807678:	30800017 	ldw	r2,0(r6)
  80767c:	d9401317 	ldw	r5,76(sp)
  807680:	3821d13a 	srai	r16,r7,4
  807684:	100d883a 	mov	r6,r2
  807688:	180f883a 	mov	r7,r3
  80768c:	080bc980 	call	80bc98 <__muldf3>
  807690:	1011883a 	mov	r8,r2
  807694:	1813883a 	mov	r9,r3
  807698:	1029883a 	mov	r20,r2
  80769c:	182b883a 	mov	r21,r3
  8076a0:	8001e526 	beq	r16,zero,807e38 <_dtoa_r+0x14a0>
  8076a4:	05800084 	movi	r22,2
  8076a8:	04402074 	movhi	r17,129
  8076ac:	8c442d04 	addi	r17,r17,4276
  8076b0:	8080004c 	andi	r2,r16,1
  8076b4:	1005003a 	cmpeq	r2,r2,zero
  8076b8:	1000081e 	bne	r2,zero,8076dc <_dtoa_r+0xd44>
  8076bc:	89800017 	ldw	r6,0(r17)
  8076c0:	89c00117 	ldw	r7,4(r17)
  8076c4:	480b883a 	mov	r5,r9
  8076c8:	4009883a 	mov	r4,r8
  8076cc:	080bc980 	call	80bc98 <__muldf3>
  8076d0:	1011883a 	mov	r8,r2
  8076d4:	b5800044 	addi	r22,r22,1
  8076d8:	1813883a 	mov	r9,r3
  8076dc:	8021d07a 	srai	r16,r16,1
  8076e0:	8c400204 	addi	r17,r17,8
  8076e4:	803ff21e 	bne	r16,zero,8076b0 <_dtoa_r+0xd18>
  8076e8:	4029883a 	mov	r20,r8
  8076ec:	482b883a 	mov	r21,r9
  8076f0:	003dca06 	br	806e1c <_dtoa_r+0x484>
  8076f4:	d9000817 	ldw	r4,32(sp)
  8076f8:	2005003a 	cmpeq	r2,r4,zero
  8076fc:	1001f61e 	bne	r2,zero,807ed8 <_dtoa_r+0x1540>
  807700:	dc001117 	ldw	r16,68(sp)
  807704:	dc801017 	ldw	r18,64(sp)
  807708:	18c10cc4 	addi	r3,r3,1075
  80770c:	003f6106 	br	807494 <_dtoa_r+0xafc>
  807710:	d8000b15 	stw	zero,44(sp)
  807714:	d9802617 	ldw	r6,152(sp)
  807718:	d8c00d17 	ldw	r3,52(sp)
  80771c:	30800044 	addi	r2,r6,1
  807720:	18ad883a 	add	r22,r3,r2
  807724:	b13fffc4 	addi	r4,r22,-1
  807728:	d9000e15 	stw	r4,56(sp)
  80772c:	0581f60e 	bge	zero,r22,807f08 <_dtoa_r+0x1570>
  807730:	dd800f15 	stw	r22,60(sp)
  807734:	003f3006 	br	8073f8 <_dtoa_r+0xa60>
  807738:	d8000b15 	stw	zero,44(sp)
  80773c:	d9002617 	ldw	r4,152(sp)
  807740:	0101eb0e 	bge	zero,r4,807ef0 <_dtoa_r+0x1558>
  807744:	202d883a 	mov	r22,r4
  807748:	d9000e15 	stw	r4,56(sp)
  80774c:	d9000f15 	stw	r4,60(sp)
  807750:	003f2906 	br	8073f8 <_dtoa_r+0xa60>
  807754:	01800044 	movi	r6,1
  807758:	d9800b15 	stw	r6,44(sp)
  80775c:	003ff706 	br	80773c <_dtoa_r+0xda4>
  807760:	01000044 	movi	r4,1
  807764:	d9000b15 	stw	r4,44(sp)
  807768:	003fea06 	br	807714 <_dtoa_r+0xd7c>
  80776c:	04000c0e 	bge	zero,r16,8077a0 <_dtoa_r+0xe08>
  807770:	d9400717 	ldw	r5,28(sp)
  807774:	d9001617 	ldw	r4,88(sp)
  807778:	01800044 	movi	r6,1
  80777c:	08098580 	call	809858 <__lshift>
  807780:	1009883a 	mov	r4,r2
  807784:	900b883a 	mov	r5,r18
  807788:	d8800715 	stw	r2,28(sp)
  80778c:	08090700 	call	809070 <__mcmp>
  807790:	0081e00e 	bge	zero,r2,807f14 <_dtoa_r+0x157c>
  807794:	bdc00044 	addi	r23,r23,1
  807798:	00800e84 	movi	r2,58
  80779c:	b881a226 	beq	r23,r2,807e28 <_dtoa_r+0x1490>
  8077a0:	b7000044 	addi	fp,r22,1
  8077a4:	b5c00005 	stb	r23,0(r22)
  8077a8:	003f7406 	br	80757c <_dtoa_r+0xbe4>
  8077ac:	00800e44 	movi	r2,57
  8077b0:	b8819d26 	beq	r23,r2,807e28 <_dtoa_r+0x1490>
  8077b4:	053ffa0e 	bge	zero,r20,8077a0 <_dtoa_r+0xe08>
  8077b8:	8dc00c44 	addi	r23,r17,49
  8077bc:	003ff806 	br	8077a0 <_dtoa_r+0xe08>
  8077c0:	d9001617 	ldw	r4,88(sp)
  8077c4:	a80b883a 	mov	r5,r21
  8077c8:	04000044 	movi	r16,1
  8077cc:	0808f140 	call	808f14 <_Bfree>
  8077d0:	003edf06 	br	807350 <_dtoa_r+0x9b8>
  8077d4:	d9001617 	ldw	r4,88(sp)
  8077d8:	980b883a 	mov	r5,r19
  8077dc:	01800284 	movi	r6,10
  8077e0:	000f883a 	mov	r7,zero
  8077e4:	0809bc80 	call	809bc8 <__multadd>
  8077e8:	1027883a 	mov	r19,r2
  8077ec:	d8800615 	stw	r2,24(sp)
  8077f0:	003ebb06 	br	8072e0 <_dtoa_r+0x948>
  8077f4:	d9801117 	ldw	r6,68(sp)
  8077f8:	d8800d17 	ldw	r2,52(sp)
  8077fc:	d8000915 	stw	zero,36(sp)
  807800:	308dc83a 	sub	r6,r6,r2
  807804:	0087c83a 	sub	r3,zero,r2
  807808:	d9801115 	stw	r6,68(sp)
  80780c:	d8c01015 	stw	r3,64(sp)
  807810:	003cfe06 	br	806c0c <_dtoa_r+0x274>
  807814:	018dc83a 	sub	r6,zero,r6
  807818:	d9801115 	stw	r6,68(sp)
  80781c:	d8000a15 	stw	zero,40(sp)
  807820:	003cf306 	br	806bf0 <_dtoa_r+0x258>
  807824:	d9000d17 	ldw	r4,52(sp)
  807828:	080c55c0 	call	80c55c <__floatsidf>
  80782c:	880b883a 	mov	r5,r17
  807830:	8009883a 	mov	r4,r16
  807834:	180f883a 	mov	r7,r3
  807838:	100d883a 	mov	r6,r2
  80783c:	080c33c0 	call	80c33c <__nedf2>
  807840:	103ce126 	beq	r2,zero,806bc8 <_dtoa_r+0x230>
  807844:	d9800d17 	ldw	r6,52(sp)
  807848:	31bfffc4 	addi	r6,r6,-1
  80784c:	d9800d15 	stw	r6,52(sp)
  807850:	003cdd06 	br	806bc8 <_dtoa_r+0x230>
  807854:	d9000717 	ldw	r4,28(sp)
  807858:	900b883a 	mov	r5,r18
  80785c:	08090700 	call	809070 <__mcmp>
  807860:	103e8d0e 	bge	r2,zero,807298 <_dtoa_r+0x900>
  807864:	d9400717 	ldw	r5,28(sp)
  807868:	d9001617 	ldw	r4,88(sp)
  80786c:	01800284 	movi	r6,10
  807870:	000f883a 	mov	r7,zero
  807874:	0809bc80 	call	809bc8 <__multadd>
  807878:	d9800d17 	ldw	r6,52(sp)
  80787c:	d8800715 	stw	r2,28(sp)
  807880:	31bfffc4 	addi	r6,r6,-1
  807884:	d9800d15 	stw	r6,52(sp)
  807888:	b001a71e 	bne	r22,zero,807f28 <_dtoa_r+0x1590>
  80788c:	d8800e17 	ldw	r2,56(sp)
  807890:	d8800f15 	stw	r2,60(sp)
  807894:	003e8006 	br	807298 <_dtoa_r+0x900>
  807898:	90800417 	ldw	r2,16(r18)
  80789c:	1085883a 	add	r2,r2,r2
  8078a0:	1085883a 	add	r2,r2,r2
  8078a4:	1485883a 	add	r2,r2,r18
  8078a8:	11000417 	ldw	r4,16(r2)
  8078ac:	0808f3c0 	call	808f3c <__hi0bits>
  8078b0:	00c00804 	movi	r3,32
  8078b4:	1887c83a 	sub	r3,r3,r2
  8078b8:	003e5a06 	br	807224 <_dtoa_r+0x88c>
  8078bc:	d9400717 	ldw	r5,28(sp)
  8078c0:	d9801017 	ldw	r6,64(sp)
  8078c4:	d9001617 	ldw	r4,88(sp)
  8078c8:	0809cc80 	call	809cc8 <__pow5mult>
  8078cc:	d8800715 	stw	r2,28(sp)
  8078d0:	003e4306 	br	8071e0 <_dtoa_r+0x848>
  8078d4:	d9800f17 	ldw	r6,60(sp)
  8078d8:	d8800d17 	ldw	r2,52(sp)
  8078dc:	d9800315 	stw	r6,12(sp)
  8078e0:	d8800415 	stw	r2,16(sp)
  8078e4:	d8c00b17 	ldw	r3,44(sp)
  8078e8:	1805003a 	cmpeq	r2,r3,zero
  8078ec:	1000e21e 	bne	r2,zero,807c78 <_dtoa_r+0x12e0>
  8078f0:	d9000317 	ldw	r4,12(sp)
  8078f4:	0005883a 	mov	r2,zero
  8078f8:	00cff834 	movhi	r3,16352
  8078fc:	200c90fa 	slli	r6,r4,3
  807900:	01002074 	movhi	r4,129
  807904:	2103fb04 	addi	r4,r4,4076
  807908:	180b883a 	mov	r5,r3
  80790c:	310d883a 	add	r6,r6,r4
  807910:	327fff17 	ldw	r9,-4(r6)
  807914:	323ffe17 	ldw	r8,-8(r6)
  807918:	1009883a 	mov	r4,r2
  80791c:	480f883a 	mov	r7,r9
  807920:	400d883a 	mov	r6,r8
  807924:	080c05c0 	call	80c05c <__divdf3>
  807928:	180b883a 	mov	r5,r3
  80792c:	b00d883a 	mov	r6,r22
  807930:	b80f883a 	mov	r7,r23
  807934:	1009883a 	mov	r4,r2
  807938:	080bba40 	call	80bba4 <__subdf3>
  80793c:	a80b883a 	mov	r5,r21
  807940:	a009883a 	mov	r4,r20
  807944:	d8c01915 	stw	r3,100(sp)
  807948:	d8801815 	stw	r2,96(sp)
  80794c:	080c6540 	call	80c654 <__fixdfsi>
  807950:	1009883a 	mov	r4,r2
  807954:	1027883a 	mov	r19,r2
  807958:	080c55c0 	call	80c55c <__floatsidf>
  80795c:	a80b883a 	mov	r5,r21
  807960:	a009883a 	mov	r4,r20
  807964:	180f883a 	mov	r7,r3
  807968:	100d883a 	mov	r6,r2
  80796c:	080bba40 	call	80bba4 <__subdf3>
  807970:	d9801817 	ldw	r6,96(sp)
  807974:	1823883a 	mov	r17,r3
  807978:	d8801415 	stw	r2,80(sp)
  80797c:	302d883a 	mov	r22,r6
  807980:	d9800517 	ldw	r6,20(sp)
  807984:	9cc00c04 	addi	r19,r19,48
  807988:	dc401515 	stw	r17,84(sp)
  80798c:	d8c01917 	ldw	r3,100(sp)
  807990:	34c00005 	stb	r19,0(r6)
  807994:	d8800517 	ldw	r2,20(sp)
  807998:	d9401917 	ldw	r5,100(sp)
  80799c:	d9801417 	ldw	r6,80(sp)
  8079a0:	b009883a 	mov	r4,r22
  8079a4:	880f883a 	mov	r7,r17
  8079a8:	182f883a 	mov	r23,r3
  8079ac:	17000044 	addi	fp,r2,1
  8079b0:	080c3c40 	call	80c3c4 <__gtdf2>
  8079b4:	00804e16 	blt	zero,r2,807af0 <_dtoa_r+0x1158>
  8079b8:	d9801417 	ldw	r6,80(sp)
  8079bc:	0005883a 	mov	r2,zero
  8079c0:	00cffc34 	movhi	r3,16368
  8079c4:	180b883a 	mov	r5,r3
  8079c8:	880f883a 	mov	r7,r17
  8079cc:	1009883a 	mov	r4,r2
  8079d0:	080bba40 	call	80bba4 <__subdf3>
  8079d4:	d9401917 	ldw	r5,100(sp)
  8079d8:	180f883a 	mov	r7,r3
  8079dc:	b009883a 	mov	r4,r22
  8079e0:	100d883a 	mov	r6,r2
  8079e4:	080c3c40 	call	80c3c4 <__gtdf2>
  8079e8:	00bda216 	blt	zero,r2,807074 <_dtoa_r+0x6dc>
  8079ec:	d8c00317 	ldw	r3,12(sp)
  8079f0:	00800044 	movi	r2,1
  8079f4:	10c01216 	blt	r2,r3,807a40 <_dtoa_r+0x10a8>
  8079f8:	003d4506 	br	806f10 <_dtoa_r+0x578>
  8079fc:	d9801417 	ldw	r6,80(sp)
  807a00:	0005883a 	mov	r2,zero
  807a04:	00cffc34 	movhi	r3,16368
  807a08:	180b883a 	mov	r5,r3
  807a0c:	880f883a 	mov	r7,r17
  807a10:	1009883a 	mov	r4,r2
  807a14:	080bba40 	call	80bba4 <__subdf3>
  807a18:	d9c01b17 	ldw	r7,108(sp)
  807a1c:	180b883a 	mov	r5,r3
  807a20:	1009883a 	mov	r4,r2
  807a24:	b00d883a 	mov	r6,r22
  807a28:	080c4d40 	call	80c4d4 <__ltdf2>
  807a2c:	103d9116 	blt	r2,zero,807074 <_dtoa_r+0x6dc>
  807a30:	d9800517 	ldw	r6,20(sp)
  807a34:	d9000317 	ldw	r4,12(sp)
  807a38:	3105883a 	add	r2,r6,r4
  807a3c:	e0bd3426 	beq	fp,r2,806f10 <_dtoa_r+0x578>
  807a40:	04500934 	movhi	r17,16420
  807a44:	0021883a 	mov	r16,zero
  807a48:	b80b883a 	mov	r5,r23
  807a4c:	b009883a 	mov	r4,r22
  807a50:	800d883a 	mov	r6,r16
  807a54:	880f883a 	mov	r7,r17
  807a58:	080bc980 	call	80bc98 <__muldf3>
  807a5c:	d9401517 	ldw	r5,84(sp)
  807a60:	d9001417 	ldw	r4,80(sp)
  807a64:	880f883a 	mov	r7,r17
  807a68:	000d883a 	mov	r6,zero
  807a6c:	d8801a15 	stw	r2,104(sp)
  807a70:	d8c01b15 	stw	r3,108(sp)
  807a74:	080bc980 	call	80bc98 <__muldf3>
  807a78:	180b883a 	mov	r5,r3
  807a7c:	1009883a 	mov	r4,r2
  807a80:	1823883a 	mov	r17,r3
  807a84:	1021883a 	mov	r16,r2
  807a88:	080c6540 	call	80c654 <__fixdfsi>
  807a8c:	1009883a 	mov	r4,r2
  807a90:	102b883a 	mov	r21,r2
  807a94:	080c55c0 	call	80c55c <__floatsidf>
  807a98:	880b883a 	mov	r5,r17
  807a9c:	8009883a 	mov	r4,r16
  807aa0:	180f883a 	mov	r7,r3
  807aa4:	100d883a 	mov	r6,r2
  807aa8:	080bba40 	call	80bba4 <__subdf3>
  807aac:	1021883a 	mov	r16,r2
  807ab0:	d9001b17 	ldw	r4,108(sp)
  807ab4:	1823883a 	mov	r17,r3
  807ab8:	dc001415 	stw	r16,80(sp)
  807abc:	ad400c04 	addi	r21,r21,48
  807ac0:	dc401515 	stw	r17,84(sp)
  807ac4:	d8801a17 	ldw	r2,104(sp)
  807ac8:	e5400005 	stb	r21,0(fp)
  807acc:	202f883a 	mov	r23,r4
  807ad0:	d9c01b17 	ldw	r7,108(sp)
  807ad4:	d9001417 	ldw	r4,80(sp)
  807ad8:	880b883a 	mov	r5,r17
  807adc:	100d883a 	mov	r6,r2
  807ae0:	102d883a 	mov	r22,r2
  807ae4:	e7000044 	addi	fp,fp,1
  807ae8:	080c4d40 	call	80c4d4 <__ltdf2>
  807aec:	103fc30e 	bge	r2,zero,8079fc <_dtoa_r+0x1064>
  807af0:	d9000417 	ldw	r4,16(sp)
  807af4:	d9000d15 	stw	r4,52(sp)
  807af8:	003d7106 	br	8070c0 <_dtoa_r+0x728>
  807afc:	d9801717 	ldw	r6,92(sp)
  807b00:	00800084 	movi	r2,2
  807b04:	11bde60e 	bge	r2,r6,8072a0 <_dtoa_r+0x908>
  807b08:	203cfb1e 	bne	r4,zero,806ef8 <_dtoa_r+0x560>
  807b0c:	d9001617 	ldw	r4,88(sp)
  807b10:	900b883a 	mov	r5,r18
  807b14:	01800144 	movi	r6,5
  807b18:	000f883a 	mov	r7,zero
  807b1c:	0809bc80 	call	809bc8 <__multadd>
  807b20:	d9000717 	ldw	r4,28(sp)
  807b24:	100b883a 	mov	r5,r2
  807b28:	1025883a 	mov	r18,r2
  807b2c:	08090700 	call	809070 <__mcmp>
  807b30:	00bcf10e 	bge	zero,r2,806ef8 <_dtoa_r+0x560>
  807b34:	d8c00d17 	ldw	r3,52(sp)
  807b38:	d9000517 	ldw	r4,20(sp)
  807b3c:	d8000615 	stw	zero,24(sp)
  807b40:	18c00044 	addi	r3,r3,1
  807b44:	d8c00d15 	stw	r3,52(sp)
  807b48:	00800c44 	movi	r2,49
  807b4c:	27000044 	addi	fp,r4,1
  807b50:	20800005 	stb	r2,0(r4)
  807b54:	003e8906 	br	80757c <_dtoa_r+0xbe4>
  807b58:	d8c00517 	ldw	r3,20(sp)
  807b5c:	003bc206 	br	806a68 <_dtoa_r+0xd0>
  807b60:	01802074 	movhi	r6,129
  807b64:	31842d04 	addi	r6,r6,4276
  807b68:	30c00917 	ldw	r3,36(r6)
  807b6c:	30800817 	ldw	r2,32(r6)
  807b70:	d9001217 	ldw	r4,72(sp)
  807b74:	d9401317 	ldw	r5,76(sp)
  807b78:	180f883a 	mov	r7,r3
  807b7c:	100d883a 	mov	r6,r2
  807b80:	080c05c0 	call	80c05c <__divdf3>
  807b84:	948003cc 	andi	r18,r18,15
  807b88:	058000c4 	movi	r22,3
  807b8c:	1029883a 	mov	r20,r2
  807b90:	182b883a 	mov	r21,r3
  807b94:	003c8906 	br	806dbc <_dtoa_r+0x424>
  807b98:	d9001017 	ldw	r4,64(sp)
  807b9c:	d9800917 	ldw	r6,36(sp)
  807ba0:	0025883a 	mov	r18,zero
  807ba4:	1105c83a 	sub	r2,r2,r4
  807ba8:	2089883a 	add	r4,r4,r2
  807bac:	308d883a 	add	r6,r6,r2
  807bb0:	d9001015 	stw	r4,64(sp)
  807bb4:	d9800915 	stw	r6,36(sp)
  807bb8:	003e3206 	br	807484 <_dtoa_r+0xaec>
  807bbc:	28800044 	addi	r2,r5,1
  807bc0:	27000044 	addi	fp,r4,1
  807bc4:	20800005 	stb	r2,0(r4)
  807bc8:	003e6c06 	br	80757c <_dtoa_r+0xbe4>
  807bcc:	d8800f17 	ldw	r2,60(sp)
  807bd0:	00bce016 	blt	zero,r2,806f54 <_dtoa_r+0x5bc>
  807bd4:	d9800f17 	ldw	r6,60(sp)
  807bd8:	303cc51e 	bne	r6,zero,806ef0 <_dtoa_r+0x558>
  807bdc:	0005883a 	mov	r2,zero
  807be0:	00d00534 	movhi	r3,16404
  807be4:	980b883a 	mov	r5,r19
  807be8:	180f883a 	mov	r7,r3
  807bec:	9009883a 	mov	r4,r18
  807bf0:	100d883a 	mov	r6,r2
  807bf4:	080bc980 	call	80bc98 <__muldf3>
  807bf8:	180b883a 	mov	r5,r3
  807bfc:	a80f883a 	mov	r7,r21
  807c00:	1009883a 	mov	r4,r2
  807c04:	a00d883a 	mov	r6,r20
  807c08:	080c44c0 	call	80c44c <__gedf2>
  807c0c:	103cb80e 	bge	r2,zero,806ef0 <_dtoa_r+0x558>
  807c10:	0027883a 	mov	r19,zero
  807c14:	0025883a 	mov	r18,zero
  807c18:	003fc606 	br	807b34 <_dtoa_r+0x119c>
  807c1c:	99400117 	ldw	r5,4(r19)
  807c20:	d9001617 	ldw	r4,88(sp)
  807c24:	08094940 	call	809494 <_Balloc>
  807c28:	99800417 	ldw	r6,16(r19)
  807c2c:	11000304 	addi	r4,r2,12
  807c30:	99400304 	addi	r5,r19,12
  807c34:	318d883a 	add	r6,r6,r6
  807c38:	318d883a 	add	r6,r6,r6
  807c3c:	31800204 	addi	r6,r6,8
  807c40:	1023883a 	mov	r17,r2
  807c44:	0808d940 	call	808d94 <memcpy>
  807c48:	d9001617 	ldw	r4,88(sp)
  807c4c:	880b883a 	mov	r5,r17
  807c50:	01800044 	movi	r6,1
  807c54:	08098580 	call	809858 <__lshift>
  807c58:	100b883a 	mov	r5,r2
  807c5c:	003d9c06 	br	8072d0 <_dtoa_r+0x938>
  807c60:	00800e44 	movi	r2,57
  807c64:	b8807026 	beq	r23,r2,807e28 <_dtoa_r+0x1490>
  807c68:	b8800044 	addi	r2,r23,1
  807c6c:	b7000044 	addi	fp,r22,1
  807c70:	b0800005 	stb	r2,0(r22)
  807c74:	003e4106 	br	80757c <_dtoa_r+0xbe4>
  807c78:	d8800317 	ldw	r2,12(sp)
  807c7c:	01802074 	movhi	r6,129
  807c80:	3183fb04 	addi	r6,r6,4076
  807c84:	b009883a 	mov	r4,r22
  807c88:	100e90fa 	slli	r7,r2,3
  807c8c:	b80b883a 	mov	r5,r23
  807c90:	398f883a 	add	r7,r7,r6
  807c94:	38bffe17 	ldw	r2,-8(r7)
  807c98:	d9800517 	ldw	r6,20(sp)
  807c9c:	38ffff17 	ldw	r3,-4(r7)
  807ca0:	37000044 	addi	fp,r6,1
  807ca4:	180f883a 	mov	r7,r3
  807ca8:	100d883a 	mov	r6,r2
  807cac:	080bc980 	call	80bc98 <__muldf3>
  807cb0:	a80b883a 	mov	r5,r21
  807cb4:	a009883a 	mov	r4,r20
  807cb8:	182f883a 	mov	r23,r3
  807cbc:	102d883a 	mov	r22,r2
  807cc0:	080c6540 	call	80c654 <__fixdfsi>
  807cc4:	1009883a 	mov	r4,r2
  807cc8:	1027883a 	mov	r19,r2
  807ccc:	080c55c0 	call	80c55c <__floatsidf>
  807cd0:	a80b883a 	mov	r5,r21
  807cd4:	a009883a 	mov	r4,r20
  807cd8:	180f883a 	mov	r7,r3
  807cdc:	100d883a 	mov	r6,r2
  807ce0:	080bba40 	call	80bba4 <__subdf3>
  807ce4:	180b883a 	mov	r5,r3
  807ce8:	d8c00517 	ldw	r3,20(sp)
  807cec:	9cc00c04 	addi	r19,r19,48
  807cf0:	1009883a 	mov	r4,r2
  807cf4:	1cc00005 	stb	r19,0(r3)
  807cf8:	2021883a 	mov	r16,r4
  807cfc:	d9000317 	ldw	r4,12(sp)
  807d00:	00800044 	movi	r2,1
  807d04:	2823883a 	mov	r17,r5
  807d08:	20802226 	beq	r4,r2,807d94 <_dtoa_r+0x13fc>
  807d0c:	1029883a 	mov	r20,r2
  807d10:	0005883a 	mov	r2,zero
  807d14:	00d00934 	movhi	r3,16420
  807d18:	180f883a 	mov	r7,r3
  807d1c:	100d883a 	mov	r6,r2
  807d20:	880b883a 	mov	r5,r17
  807d24:	8009883a 	mov	r4,r16
  807d28:	080bc980 	call	80bc98 <__muldf3>
  807d2c:	180b883a 	mov	r5,r3
  807d30:	1009883a 	mov	r4,r2
  807d34:	1823883a 	mov	r17,r3
  807d38:	1021883a 	mov	r16,r2
  807d3c:	080c6540 	call	80c654 <__fixdfsi>
  807d40:	1009883a 	mov	r4,r2
  807d44:	102b883a 	mov	r21,r2
  807d48:	080c55c0 	call	80c55c <__floatsidf>
  807d4c:	880b883a 	mov	r5,r17
  807d50:	8009883a 	mov	r4,r16
  807d54:	180f883a 	mov	r7,r3
  807d58:	100d883a 	mov	r6,r2
  807d5c:	080bba40 	call	80bba4 <__subdf3>
  807d60:	180b883a 	mov	r5,r3
  807d64:	d8c00517 	ldw	r3,20(sp)
  807d68:	1009883a 	mov	r4,r2
  807d6c:	ad400c04 	addi	r21,r21,48
  807d70:	1d05883a 	add	r2,r3,r20
  807d74:	15400005 	stb	r21,0(r2)
  807d78:	2021883a 	mov	r16,r4
  807d7c:	d9000317 	ldw	r4,12(sp)
  807d80:	a5000044 	addi	r20,r20,1
  807d84:	2823883a 	mov	r17,r5
  807d88:	a13fe11e 	bne	r20,r4,807d10 <_dtoa_r+0x1378>
  807d8c:	e505883a 	add	r2,fp,r20
  807d90:	173fffc4 	addi	fp,r2,-1
  807d94:	0025883a 	mov	r18,zero
  807d98:	04cff834 	movhi	r19,16352
  807d9c:	b009883a 	mov	r4,r22
  807da0:	b80b883a 	mov	r5,r23
  807da4:	900d883a 	mov	r6,r18
  807da8:	980f883a 	mov	r7,r19
  807dac:	080bc240 	call	80bc24 <__adddf3>
  807db0:	180b883a 	mov	r5,r3
  807db4:	1009883a 	mov	r4,r2
  807db8:	800d883a 	mov	r6,r16
  807dbc:	880f883a 	mov	r7,r17
  807dc0:	080c4d40 	call	80c4d4 <__ltdf2>
  807dc4:	103cab16 	blt	r2,zero,807074 <_dtoa_r+0x6dc>
  807dc8:	0009883a 	mov	r4,zero
  807dcc:	980b883a 	mov	r5,r19
  807dd0:	b80f883a 	mov	r7,r23
  807dd4:	b00d883a 	mov	r6,r22
  807dd8:	080bba40 	call	80bba4 <__subdf3>
  807ddc:	180b883a 	mov	r5,r3
  807de0:	880f883a 	mov	r7,r17
  807de4:	1009883a 	mov	r4,r2
  807de8:	800d883a 	mov	r6,r16
  807dec:	080c3c40 	call	80c3c4 <__gtdf2>
  807df0:	00bc470e 	bge	zero,r2,806f10 <_dtoa_r+0x578>
  807df4:	00c00c04 	movi	r3,48
  807df8:	e73fffc4 	addi	fp,fp,-1
  807dfc:	e0800007 	ldb	r2,0(fp)
  807e00:	10fffd26 	beq	r2,r3,807df8 <_dtoa_r+0x1460>
  807e04:	d9800417 	ldw	r6,16(sp)
  807e08:	e7000044 	addi	fp,fp,1
  807e0c:	d9800d15 	stw	r6,52(sp)
  807e10:	003cab06 	br	8070c0 <_dtoa_r+0x728>
  807e14:	d8c00f17 	ldw	r3,60(sp)
  807e18:	d9001117 	ldw	r4,68(sp)
  807e1c:	20e1c83a 	sub	r16,r4,r3
  807e20:	0007883a 	mov	r3,zero
  807e24:	003d9b06 	br	807494 <_dtoa_r+0xafc>
  807e28:	00800e44 	movi	r2,57
  807e2c:	b0800005 	stb	r2,0(r22)
  807e30:	b5800044 	addi	r22,r22,1
  807e34:	003dc106 	br	80753c <_dtoa_r+0xba4>
  807e38:	05800084 	movi	r22,2
  807e3c:	003bf706 	br	806e1c <_dtoa_r+0x484>
  807e40:	d9000f17 	ldw	r4,60(sp)
  807e44:	013c000e 	bge	zero,r4,806e48 <_dtoa_r+0x4b0>
  807e48:	d9800e17 	ldw	r6,56(sp)
  807e4c:	01bc300e 	bge	zero,r6,806f10 <_dtoa_r+0x578>
  807e50:	0005883a 	mov	r2,zero
  807e54:	00d00934 	movhi	r3,16420
  807e58:	a80b883a 	mov	r5,r21
  807e5c:	180f883a 	mov	r7,r3
  807e60:	a009883a 	mov	r4,r20
  807e64:	100d883a 	mov	r6,r2
  807e68:	080bc980 	call	80bc98 <__muldf3>
  807e6c:	b1000044 	addi	r4,r22,1
  807e70:	1021883a 	mov	r16,r2
  807e74:	1823883a 	mov	r17,r3
  807e78:	080c55c0 	call	80c55c <__floatsidf>
  807e7c:	880b883a 	mov	r5,r17
  807e80:	8009883a 	mov	r4,r16
  807e84:	180f883a 	mov	r7,r3
  807e88:	100d883a 	mov	r6,r2
  807e8c:	080bc980 	call	80bc98 <__muldf3>
  807e90:	0011883a 	mov	r8,zero
  807e94:	02500734 	movhi	r9,16412
  807e98:	180b883a 	mov	r5,r3
  807e9c:	480f883a 	mov	r7,r9
  807ea0:	1009883a 	mov	r4,r2
  807ea4:	400d883a 	mov	r6,r8
  807ea8:	080bc240 	call	80bc24 <__adddf3>
  807eac:	102d883a 	mov	r22,r2
  807eb0:	00bf3034 	movhi	r2,64704
  807eb4:	10ef883a 	add	r23,r2,r3
  807eb8:	d8800d17 	ldw	r2,52(sp)
  807ebc:	d8c00e17 	ldw	r3,56(sp)
  807ec0:	8029883a 	mov	r20,r16
  807ec4:	10bfffc4 	addi	r2,r2,-1
  807ec8:	882b883a 	mov	r21,r17
  807ecc:	d8800415 	stw	r2,16(sp)
  807ed0:	d8c00315 	stw	r3,12(sp)
  807ed4:	003e8306 	br	8078e4 <_dtoa_r+0xf4c>
  807ed8:	d8800117 	ldw	r2,4(sp)
  807edc:	dc001117 	ldw	r16,68(sp)
  807ee0:	dc801017 	ldw	r18,64(sp)
  807ee4:	00c00d84 	movi	r3,54
  807ee8:	1887c83a 	sub	r3,r3,r2
  807eec:	003d6906 	br	807494 <_dtoa_r+0xafc>
  807ef0:	01800044 	movi	r6,1
  807ef4:	3021883a 	mov	r16,r6
  807ef8:	d9800f15 	stw	r6,60(sp)
  807efc:	d9802615 	stw	r6,152(sp)
  807f00:	d9800e15 	stw	r6,56(sp)
  807f04:	003b9306 	br	806d54 <_dtoa_r+0x3bc>
  807f08:	b021883a 	mov	r16,r22
  807f0c:	dd800f15 	stw	r22,60(sp)
  807f10:	003b9006 	br	806d54 <_dtoa_r+0x3bc>
  807f14:	103e221e 	bne	r2,zero,8077a0 <_dtoa_r+0xe08>
  807f18:	b880004c 	andi	r2,r23,1
  807f1c:	1005003a 	cmpeq	r2,r2,zero
  807f20:	103e1f1e 	bne	r2,zero,8077a0 <_dtoa_r+0xe08>
  807f24:	003e1b06 	br	807794 <_dtoa_r+0xdfc>
  807f28:	d9001617 	ldw	r4,88(sp)
  807f2c:	980b883a 	mov	r5,r19
  807f30:	01800284 	movi	r6,10
  807f34:	000f883a 	mov	r7,zero
  807f38:	0809bc80 	call	809bc8 <__multadd>
  807f3c:	d8c00e17 	ldw	r3,56(sp)
  807f40:	1027883a 	mov	r19,r2
  807f44:	d8c00f15 	stw	r3,60(sp)
  807f48:	003cd306 	br	807298 <_dtoa_r+0x900>

00807f4c <_fflush_r>:
  807f4c:	defffb04 	addi	sp,sp,-20
  807f50:	dcc00315 	stw	r19,12(sp)
  807f54:	dc800215 	stw	r18,8(sp)
  807f58:	dfc00415 	stw	ra,16(sp)
  807f5c:	dc400115 	stw	r17,4(sp)
  807f60:	dc000015 	stw	r16,0(sp)
  807f64:	2027883a 	mov	r19,r4
  807f68:	2825883a 	mov	r18,r5
  807f6c:	20000226 	beq	r4,zero,807f78 <_fflush_r+0x2c>
  807f70:	20800e17 	ldw	r2,56(r4)
  807f74:	10005626 	beq	r2,zero,8080d0 <_fflush_r+0x184>
  807f78:	9100030b 	ldhu	r4,12(r18)
  807f7c:	20ffffcc 	andi	r3,r4,65535
  807f80:	18e0001c 	xori	r3,r3,32768
  807f84:	18e00004 	addi	r3,r3,-32768
  807f88:	1880020c 	andi	r2,r3,8
  807f8c:	1000261e 	bne	r2,zero,808028 <_fflush_r+0xdc>
  807f90:	90c00117 	ldw	r3,4(r18)
  807f94:	20820014 	ori	r2,r4,2048
  807f98:	9080030d 	sth	r2,12(r18)
  807f9c:	1009883a 	mov	r4,r2
  807fa0:	00c0400e 	bge	zero,r3,8080a4 <_fflush_r+0x158>
  807fa4:	92000a17 	ldw	r8,40(r18)
  807fa8:	40004026 	beq	r8,zero,8080ac <_fflush_r+0x160>
  807fac:	2084000c 	andi	r2,r4,4096
  807fb0:	10005326 	beq	r2,zero,808100 <_fflush_r+0x1b4>
  807fb4:	94001417 	ldw	r16,80(r18)
  807fb8:	9080030b 	ldhu	r2,12(r18)
  807fbc:	1080010c 	andi	r2,r2,4
  807fc0:	1000481e 	bne	r2,zero,8080e4 <_fflush_r+0x198>
  807fc4:	91400717 	ldw	r5,28(r18)
  807fc8:	9809883a 	mov	r4,r19
  807fcc:	800d883a 	mov	r6,r16
  807fd0:	000f883a 	mov	r7,zero
  807fd4:	403ee83a 	callr	r8
  807fd8:	8080261e 	bne	r16,r2,808074 <_fflush_r+0x128>
  807fdc:	9080030b 	ldhu	r2,12(r18)
  807fe0:	91000417 	ldw	r4,16(r18)
  807fe4:	90000115 	stw	zero,4(r18)
  807fe8:	10bdffcc 	andi	r2,r2,63487
  807fec:	10ffffcc 	andi	r3,r2,65535
  807ff0:	18c4000c 	andi	r3,r3,4096
  807ff4:	9080030d 	sth	r2,12(r18)
  807ff8:	91000015 	stw	r4,0(r18)
  807ffc:	18002b26 	beq	r3,zero,8080ac <_fflush_r+0x160>
  808000:	0007883a 	mov	r3,zero
  808004:	1805883a 	mov	r2,r3
  808008:	94001415 	stw	r16,80(r18)
  80800c:	dfc00417 	ldw	ra,16(sp)
  808010:	dcc00317 	ldw	r19,12(sp)
  808014:	dc800217 	ldw	r18,8(sp)
  808018:	dc400117 	ldw	r17,4(sp)
  80801c:	dc000017 	ldw	r16,0(sp)
  808020:	dec00504 	addi	sp,sp,20
  808024:	f800283a 	ret
  808028:	94400417 	ldw	r17,16(r18)
  80802c:	88001f26 	beq	r17,zero,8080ac <_fflush_r+0x160>
  808030:	90800017 	ldw	r2,0(r18)
  808034:	18c000cc 	andi	r3,r3,3
  808038:	94400015 	stw	r17,0(r18)
  80803c:	1461c83a 	sub	r16,r2,r17
  808040:	18002526 	beq	r3,zero,8080d8 <_fflush_r+0x18c>
  808044:	0005883a 	mov	r2,zero
  808048:	90800215 	stw	r2,8(r18)
  80804c:	0400170e 	bge	zero,r16,8080ac <_fflush_r+0x160>
  808050:	90c00917 	ldw	r3,36(r18)
  808054:	91400717 	ldw	r5,28(r18)
  808058:	880d883a 	mov	r6,r17
  80805c:	800f883a 	mov	r7,r16
  808060:	9809883a 	mov	r4,r19
  808064:	183ee83a 	callr	r3
  808068:	88a3883a 	add	r17,r17,r2
  80806c:	80a1c83a 	sub	r16,r16,r2
  808070:	00bff616 	blt	zero,r2,80804c <_fflush_r+0x100>
  808074:	9080030b 	ldhu	r2,12(r18)
  808078:	00ffffc4 	movi	r3,-1
  80807c:	10801014 	ori	r2,r2,64
  808080:	9080030d 	sth	r2,12(r18)
  808084:	1805883a 	mov	r2,r3
  808088:	dfc00417 	ldw	ra,16(sp)
  80808c:	dcc00317 	ldw	r19,12(sp)
  808090:	dc800217 	ldw	r18,8(sp)
  808094:	dc400117 	ldw	r17,4(sp)
  808098:	dc000017 	ldw	r16,0(sp)
  80809c:	dec00504 	addi	sp,sp,20
  8080a0:	f800283a 	ret
  8080a4:	90800f17 	ldw	r2,60(r18)
  8080a8:	00bfbe16 	blt	zero,r2,807fa4 <_fflush_r+0x58>
  8080ac:	0007883a 	mov	r3,zero
  8080b0:	1805883a 	mov	r2,r3
  8080b4:	dfc00417 	ldw	ra,16(sp)
  8080b8:	dcc00317 	ldw	r19,12(sp)
  8080bc:	dc800217 	ldw	r18,8(sp)
  8080c0:	dc400117 	ldw	r17,4(sp)
  8080c4:	dc000017 	ldw	r16,0(sp)
  8080c8:	dec00504 	addi	sp,sp,20
  8080cc:	f800283a 	ret
  8080d0:	08081e40 	call	8081e4 <__sinit>
  8080d4:	003fa806 	br	807f78 <_fflush_r+0x2c>
  8080d8:	90800517 	ldw	r2,20(r18)
  8080dc:	90800215 	stw	r2,8(r18)
  8080e0:	003fda06 	br	80804c <_fflush_r+0x100>
  8080e4:	90800117 	ldw	r2,4(r18)
  8080e8:	90c00c17 	ldw	r3,48(r18)
  8080ec:	80a1c83a 	sub	r16,r16,r2
  8080f0:	183fb426 	beq	r3,zero,807fc4 <_fflush_r+0x78>
  8080f4:	90800f17 	ldw	r2,60(r18)
  8080f8:	80a1c83a 	sub	r16,r16,r2
  8080fc:	003fb106 	br	807fc4 <_fflush_r+0x78>
  808100:	91400717 	ldw	r5,28(r18)
  808104:	9809883a 	mov	r4,r19
  808108:	000d883a 	mov	r6,zero
  80810c:	01c00044 	movi	r7,1
  808110:	403ee83a 	callr	r8
  808114:	1021883a 	mov	r16,r2
  808118:	00bfffc4 	movi	r2,-1
  80811c:	80800226 	beq	r16,r2,808128 <_fflush_r+0x1dc>
  808120:	92000a17 	ldw	r8,40(r18)
  808124:	003fa406 	br	807fb8 <_fflush_r+0x6c>
  808128:	98c00017 	ldw	r3,0(r19)
  80812c:	00800744 	movi	r2,29
  808130:	18bfde26 	beq	r3,r2,8080ac <_fflush_r+0x160>
  808134:	9080030b 	ldhu	r2,12(r18)
  808138:	8007883a 	mov	r3,r16
  80813c:	10801014 	ori	r2,r2,64
  808140:	9080030d 	sth	r2,12(r18)
  808144:	003fcf06 	br	808084 <_fflush_r+0x138>

00808148 <fflush>:
  808148:	01402034 	movhi	r5,128
  80814c:	295fd304 	addi	r5,r5,32588
  808150:	2007883a 	mov	r3,r4
  808154:	20000526 	beq	r4,zero,80816c <fflush+0x24>
  808158:	00802074 	movhi	r2,129
  80815c:	108bb704 	addi	r2,r2,11996
  808160:	11000017 	ldw	r4,0(r2)
  808164:	180b883a 	mov	r5,r3
  808168:	0807f4c1 	jmpi	807f4c <_fflush_r>
  80816c:	00802074 	movhi	r2,129
  808170:	108bb804 	addi	r2,r2,12000
  808174:	11000017 	ldw	r4,0(r2)
  808178:	08088d81 	jmpi	8088d8 <_fwalk_reent>

0080817c <std>:
  80817c:	00802074 	movhi	r2,129
  808180:	10a95b04 	addi	r2,r2,-23188
  808184:	20800b15 	stw	r2,44(r4)
  808188:	00802074 	movhi	r2,129
  80818c:	10a99604 	addi	r2,r2,-22952
  808190:	20800815 	stw	r2,32(r4)
  808194:	00c02074 	movhi	r3,129
  808198:	18e97704 	addi	r3,r3,-23076
  80819c:	00802074 	movhi	r2,129
  8081a0:	10a95d04 	addi	r2,r2,-23180
  8081a4:	2140030d 	sth	r5,12(r4)
  8081a8:	2180038d 	sth	r6,14(r4)
  8081ac:	20c00915 	stw	r3,36(r4)
  8081b0:	20800a15 	stw	r2,40(r4)
  8081b4:	20000015 	stw	zero,0(r4)
  8081b8:	20000115 	stw	zero,4(r4)
  8081bc:	20000215 	stw	zero,8(r4)
  8081c0:	20000415 	stw	zero,16(r4)
  8081c4:	20000515 	stw	zero,20(r4)
  8081c8:	20000615 	stw	zero,24(r4)
  8081cc:	21000715 	stw	r4,28(r4)
  8081d0:	f800283a 	ret

008081d4 <__sfp_lock_acquire>:
  8081d4:	f800283a 	ret

008081d8 <__sfp_lock_release>:
  8081d8:	f800283a 	ret

008081dc <__sinit_lock_acquire>:
  8081dc:	f800283a 	ret

008081e0 <__sinit_lock_release>:
  8081e0:	f800283a 	ret

008081e4 <__sinit>:
  8081e4:	20800e17 	ldw	r2,56(r4)
  8081e8:	defffd04 	addi	sp,sp,-12
  8081ec:	dc400115 	stw	r17,4(sp)
  8081f0:	dc000015 	stw	r16,0(sp)
  8081f4:	dfc00215 	stw	ra,8(sp)
  8081f8:	04400044 	movi	r17,1
  8081fc:	01400104 	movi	r5,4
  808200:	000d883a 	mov	r6,zero
  808204:	2021883a 	mov	r16,r4
  808208:	2200bb04 	addi	r8,r4,748
  80820c:	200f883a 	mov	r7,r4
  808210:	10000526 	beq	r2,zero,808228 <__sinit+0x44>
  808214:	dfc00217 	ldw	ra,8(sp)
  808218:	dc400117 	ldw	r17,4(sp)
  80821c:	dc000017 	ldw	r16,0(sp)
  808220:	dec00304 	addi	sp,sp,12
  808224:	f800283a 	ret
  808228:	21000117 	ldw	r4,4(r4)
  80822c:	00802074 	movhi	r2,129
  808230:	10a0b204 	addi	r2,r2,-32056
  808234:	00c000c4 	movi	r3,3
  808238:	80800f15 	stw	r2,60(r16)
  80823c:	80c0b915 	stw	r3,740(r16)
  808240:	8200ba15 	stw	r8,744(r16)
  808244:	84400e15 	stw	r17,56(r16)
  808248:	8000b815 	stw	zero,736(r16)
  80824c:	080817c0 	call	80817c <std>
  808250:	81000217 	ldw	r4,8(r16)
  808254:	880d883a 	mov	r6,r17
  808258:	800f883a 	mov	r7,r16
  80825c:	01400284 	movi	r5,10
  808260:	080817c0 	call	80817c <std>
  808264:	81000317 	ldw	r4,12(r16)
  808268:	800f883a 	mov	r7,r16
  80826c:	01400484 	movi	r5,18
  808270:	01800084 	movi	r6,2
  808274:	dfc00217 	ldw	ra,8(sp)
  808278:	dc400117 	ldw	r17,4(sp)
  80827c:	dc000017 	ldw	r16,0(sp)
  808280:	dec00304 	addi	sp,sp,12
  808284:	080817c1 	jmpi	80817c <std>

00808288 <__fp_lock>:
  808288:	0005883a 	mov	r2,zero
  80828c:	f800283a 	ret

00808290 <__fp_unlock>:
  808290:	0005883a 	mov	r2,zero
  808294:	f800283a 	ret

00808298 <__fp_unlock_all>:
  808298:	00802074 	movhi	r2,129
  80829c:	108bb704 	addi	r2,r2,11996
  8082a0:	11000017 	ldw	r4,0(r2)
  8082a4:	01402074 	movhi	r5,129
  8082a8:	2960a404 	addi	r5,r5,-32112
  8082ac:	08089a01 	jmpi	8089a0 <_fwalk>

008082b0 <__fp_lock_all>:
  8082b0:	00802074 	movhi	r2,129
  8082b4:	108bb704 	addi	r2,r2,11996
  8082b8:	11000017 	ldw	r4,0(r2)
  8082bc:	01402074 	movhi	r5,129
  8082c0:	2960a204 	addi	r5,r5,-32120
  8082c4:	08089a01 	jmpi	8089a0 <_fwalk>

008082c8 <_cleanup_r>:
  8082c8:	01402074 	movhi	r5,129
  8082cc:	296a8804 	addi	r5,r5,-21984
  8082d0:	08089a01 	jmpi	8089a0 <_fwalk>

008082d4 <_cleanup>:
  8082d4:	00802074 	movhi	r2,129
  8082d8:	108bb804 	addi	r2,r2,12000
  8082dc:	11000017 	ldw	r4,0(r2)
  8082e0:	08082c81 	jmpi	8082c8 <_cleanup_r>

008082e4 <__sfmoreglue>:
  8082e4:	defffc04 	addi	sp,sp,-16
  8082e8:	dc400115 	stw	r17,4(sp)
  8082ec:	2c401724 	muli	r17,r5,92
  8082f0:	dc800215 	stw	r18,8(sp)
  8082f4:	2825883a 	mov	r18,r5
  8082f8:	89400304 	addi	r5,r17,12
  8082fc:	dc000015 	stw	r16,0(sp)
  808300:	dfc00315 	stw	ra,12(sp)
  808304:	08035dc0 	call	8035dc <_malloc_r>
  808308:	0021883a 	mov	r16,zero
  80830c:	880d883a 	mov	r6,r17
  808310:	000b883a 	mov	r5,zero
  808314:	10000626 	beq	r2,zero,808330 <__sfmoreglue+0x4c>
  808318:	11000304 	addi	r4,r2,12
  80831c:	14800115 	stw	r18,4(r2)
  808320:	10000015 	stw	zero,0(r2)
  808324:	11000215 	stw	r4,8(r2)
  808328:	1021883a 	mov	r16,r2
  80832c:	0803d1c0 	call	803d1c <memset>
  808330:	8005883a 	mov	r2,r16
  808334:	dfc00317 	ldw	ra,12(sp)
  808338:	dc800217 	ldw	r18,8(sp)
  80833c:	dc400117 	ldw	r17,4(sp)
  808340:	dc000017 	ldw	r16,0(sp)
  808344:	dec00404 	addi	sp,sp,16
  808348:	f800283a 	ret

0080834c <__sfp>:
  80834c:	defffd04 	addi	sp,sp,-12
  808350:	00802074 	movhi	r2,129
  808354:	108bb804 	addi	r2,r2,12000
  808358:	dc000015 	stw	r16,0(sp)
  80835c:	14000017 	ldw	r16,0(r2)
  808360:	dc400115 	stw	r17,4(sp)
  808364:	dfc00215 	stw	ra,8(sp)
  808368:	80800e17 	ldw	r2,56(r16)
  80836c:	2023883a 	mov	r17,r4
  808370:	10002626 	beq	r2,zero,80840c <__sfp+0xc0>
  808374:	8400b804 	addi	r16,r16,736
  808378:	80800117 	ldw	r2,4(r16)
  80837c:	81000217 	ldw	r4,8(r16)
  808380:	10ffffc4 	addi	r3,r2,-1
  808384:	18000916 	blt	r3,zero,8083ac <__sfp+0x60>
  808388:	2080030f 	ldh	r2,12(r4)
  80838c:	10000b26 	beq	r2,zero,8083bc <__sfp+0x70>
  808390:	017fffc4 	movi	r5,-1
  808394:	00000206 	br	8083a0 <__sfp+0x54>
  808398:	2080030f 	ldh	r2,12(r4)
  80839c:	10000726 	beq	r2,zero,8083bc <__sfp+0x70>
  8083a0:	18ffffc4 	addi	r3,r3,-1
  8083a4:	21001704 	addi	r4,r4,92
  8083a8:	197ffb1e 	bne	r3,r5,808398 <__sfp+0x4c>
  8083ac:	80800017 	ldw	r2,0(r16)
  8083b0:	10001926 	beq	r2,zero,808418 <__sfp+0xcc>
  8083b4:	1021883a 	mov	r16,r2
  8083b8:	003fef06 	br	808378 <__sfp+0x2c>
  8083bc:	00bfffc4 	movi	r2,-1
  8083c0:	00c00044 	movi	r3,1
  8083c4:	2080038d 	sth	r2,14(r4)
  8083c8:	20c0030d 	sth	r3,12(r4)
  8083cc:	20000015 	stw	zero,0(r4)
  8083d0:	20000215 	stw	zero,8(r4)
  8083d4:	20000115 	stw	zero,4(r4)
  8083d8:	20000415 	stw	zero,16(r4)
  8083dc:	20000515 	stw	zero,20(r4)
  8083e0:	20000615 	stw	zero,24(r4)
  8083e4:	20000c15 	stw	zero,48(r4)
  8083e8:	20000d15 	stw	zero,52(r4)
  8083ec:	20001115 	stw	zero,68(r4)
  8083f0:	20001215 	stw	zero,72(r4)
  8083f4:	2005883a 	mov	r2,r4
  8083f8:	dfc00217 	ldw	ra,8(sp)
  8083fc:	dc400117 	ldw	r17,4(sp)
  808400:	dc000017 	ldw	r16,0(sp)
  808404:	dec00304 	addi	sp,sp,12
  808408:	f800283a 	ret
  80840c:	8009883a 	mov	r4,r16
  808410:	08081e40 	call	8081e4 <__sinit>
  808414:	003fd706 	br	808374 <__sfp+0x28>
  808418:	8809883a 	mov	r4,r17
  80841c:	01400104 	movi	r5,4
  808420:	08082e40 	call	8082e4 <__sfmoreglue>
  808424:	80800015 	stw	r2,0(r16)
  808428:	103fe21e 	bne	r2,zero,8083b4 <__sfp+0x68>
  80842c:	00800304 	movi	r2,12
  808430:	0009883a 	mov	r4,zero
  808434:	88800015 	stw	r2,0(r17)
  808438:	003fee06 	br	8083f4 <__sfp+0xa8>

0080843c <__sfvwrite_r>:
  80843c:	30800217 	ldw	r2,8(r6)
  808440:	defff504 	addi	sp,sp,-44
  808444:	df000915 	stw	fp,36(sp)
  808448:	dd800715 	stw	r22,28(sp)
  80844c:	dc800315 	stw	r18,12(sp)
  808450:	dfc00a15 	stw	ra,40(sp)
  808454:	ddc00815 	stw	r23,32(sp)
  808458:	dd400615 	stw	r21,24(sp)
  80845c:	dd000515 	stw	r20,20(sp)
  808460:	dcc00415 	stw	r19,16(sp)
  808464:	dc400215 	stw	r17,8(sp)
  808468:	dc000115 	stw	r16,4(sp)
  80846c:	302d883a 	mov	r22,r6
  808470:	2039883a 	mov	fp,r4
  808474:	2825883a 	mov	r18,r5
  808478:	10001c26 	beq	r2,zero,8084ec <__sfvwrite_r+0xb0>
  80847c:	29c0030b 	ldhu	r7,12(r5)
  808480:	3880020c 	andi	r2,r7,8
  808484:	10002726 	beq	r2,zero,808524 <__sfvwrite_r+0xe8>
  808488:	28800417 	ldw	r2,16(r5)
  80848c:	10002526 	beq	r2,zero,808524 <__sfvwrite_r+0xe8>
  808490:	3880008c 	andi	r2,r7,2
  808494:	b5400017 	ldw	r21,0(r22)
  808498:	10002826 	beq	r2,zero,80853c <__sfvwrite_r+0x100>
  80849c:	0021883a 	mov	r16,zero
  8084a0:	0023883a 	mov	r17,zero
  8084a4:	880d883a 	mov	r6,r17
  8084a8:	e009883a 	mov	r4,fp
  8084ac:	00810004 	movi	r2,1024
  8084b0:	80006e26 	beq	r16,zero,80866c <__sfvwrite_r+0x230>
  8084b4:	800f883a 	mov	r7,r16
  8084b8:	91400717 	ldw	r5,28(r18)
  8084bc:	1400012e 	bgeu	r2,r16,8084c4 <__sfvwrite_r+0x88>
  8084c0:	100f883a 	mov	r7,r2
  8084c4:	90c00917 	ldw	r3,36(r18)
  8084c8:	183ee83a 	callr	r3
  8084cc:	1007883a 	mov	r3,r2
  8084d0:	80a1c83a 	sub	r16,r16,r2
  8084d4:	88a3883a 	add	r17,r17,r2
  8084d8:	00806d0e 	bge	zero,r2,808690 <__sfvwrite_r+0x254>
  8084dc:	b0800217 	ldw	r2,8(r22)
  8084e0:	10c5c83a 	sub	r2,r2,r3
  8084e4:	b0800215 	stw	r2,8(r22)
  8084e8:	103fee1e 	bne	r2,zero,8084a4 <__sfvwrite_r+0x68>
  8084ec:	0009883a 	mov	r4,zero
  8084f0:	2005883a 	mov	r2,r4
  8084f4:	dfc00a17 	ldw	ra,40(sp)
  8084f8:	df000917 	ldw	fp,36(sp)
  8084fc:	ddc00817 	ldw	r23,32(sp)
  808500:	dd800717 	ldw	r22,28(sp)
  808504:	dd400617 	ldw	r21,24(sp)
  808508:	dd000517 	ldw	r20,20(sp)
  80850c:	dcc00417 	ldw	r19,16(sp)
  808510:	dc800317 	ldw	r18,12(sp)
  808514:	dc400217 	ldw	r17,8(sp)
  808518:	dc000117 	ldw	r16,4(sp)
  80851c:	dec00b04 	addi	sp,sp,44
  808520:	f800283a 	ret
  808524:	08066440 	call	806644 <__swsetup_r>
  808528:	1000e41e 	bne	r2,zero,8088bc <__sfvwrite_r+0x480>
  80852c:	91c0030b 	ldhu	r7,12(r18)
  808530:	b5400017 	ldw	r21,0(r22)
  808534:	3880008c 	andi	r2,r7,2
  808538:	103fd81e 	bne	r2,zero,80849c <__sfvwrite_r+0x60>
  80853c:	3880004c 	andi	r2,r7,1
  808540:	1005003a 	cmpeq	r2,r2,zero
  808544:	10005726 	beq	r2,zero,8086a4 <__sfvwrite_r+0x268>
  808548:	0029883a 	mov	r20,zero
  80854c:	002f883a 	mov	r23,zero
  808550:	a0004226 	beq	r20,zero,80865c <__sfvwrite_r+0x220>
  808554:	3880800c 	andi	r2,r7,512
  808558:	94000217 	ldw	r16,8(r18)
  80855c:	10008b26 	beq	r2,zero,80878c <__sfvwrite_r+0x350>
  808560:	800d883a 	mov	r6,r16
  808564:	a400a536 	bltu	r20,r16,8087fc <__sfvwrite_r+0x3c0>
  808568:	3881200c 	andi	r2,r7,1152
  80856c:	10002726 	beq	r2,zero,80860c <__sfvwrite_r+0x1d0>
  808570:	90800517 	ldw	r2,20(r18)
  808574:	92000417 	ldw	r8,16(r18)
  808578:	91400017 	ldw	r5,0(r18)
  80857c:	1087883a 	add	r3,r2,r2
  808580:	1887883a 	add	r3,r3,r2
  808584:	1808d7fa 	srli	r4,r3,31
  808588:	2a21c83a 	sub	r16,r5,r8
  80858c:	80800044 	addi	r2,r16,1
  808590:	20c9883a 	add	r4,r4,r3
  808594:	2027d07a 	srai	r19,r4,1
  808598:	a085883a 	add	r2,r20,r2
  80859c:	980d883a 	mov	r6,r19
  8085a0:	9880022e 	bgeu	r19,r2,8085ac <__sfvwrite_r+0x170>
  8085a4:	1027883a 	mov	r19,r2
  8085a8:	100d883a 	mov	r6,r2
  8085ac:	3881000c 	andi	r2,r7,1024
  8085b0:	1000b826 	beq	r2,zero,808894 <__sfvwrite_r+0x458>
  8085b4:	300b883a 	mov	r5,r6
  8085b8:	e009883a 	mov	r4,fp
  8085bc:	08035dc0 	call	8035dc <_malloc_r>
  8085c0:	10003126 	beq	r2,zero,808688 <__sfvwrite_r+0x24c>
  8085c4:	91400417 	ldw	r5,16(r18)
  8085c8:	1009883a 	mov	r4,r2
  8085cc:	800d883a 	mov	r6,r16
  8085d0:	1023883a 	mov	r17,r2
  8085d4:	0808d940 	call	808d94 <memcpy>
  8085d8:	90c0030b 	ldhu	r3,12(r18)
  8085dc:	00beffc4 	movi	r2,-1025
  8085e0:	1886703a 	and	r3,r3,r2
  8085e4:	18c02014 	ori	r3,r3,128
  8085e8:	90c0030d 	sth	r3,12(r18)
  8085ec:	9c07c83a 	sub	r3,r19,r16
  8085f0:	8c05883a 	add	r2,r17,r16
  8085f4:	a00d883a 	mov	r6,r20
  8085f8:	a021883a 	mov	r16,r20
  8085fc:	90800015 	stw	r2,0(r18)
  808600:	90c00215 	stw	r3,8(r18)
  808604:	94400415 	stw	r17,16(r18)
  808608:	94c00515 	stw	r19,20(r18)
  80860c:	91000017 	ldw	r4,0(r18)
  808610:	b80b883a 	mov	r5,r23
  808614:	a023883a 	mov	r17,r20
  808618:	0808e340 	call	808e34 <memmove>
  80861c:	90c00217 	ldw	r3,8(r18)
  808620:	90800017 	ldw	r2,0(r18)
  808624:	a027883a 	mov	r19,r20
  808628:	1c07c83a 	sub	r3,r3,r16
  80862c:	1405883a 	add	r2,r2,r16
  808630:	90c00215 	stw	r3,8(r18)
  808634:	a021883a 	mov	r16,r20
  808638:	90800015 	stw	r2,0(r18)
  80863c:	b0800217 	ldw	r2,8(r22)
  808640:	1405c83a 	sub	r2,r2,r16
  808644:	b0800215 	stw	r2,8(r22)
  808648:	103fa826 	beq	r2,zero,8084ec <__sfvwrite_r+0xb0>
  80864c:	a469c83a 	sub	r20,r20,r17
  808650:	91c0030b 	ldhu	r7,12(r18)
  808654:	bcef883a 	add	r23,r23,r19
  808658:	a03fbe1e 	bne	r20,zero,808554 <__sfvwrite_r+0x118>
  80865c:	adc00017 	ldw	r23,0(r21)
  808660:	ad000117 	ldw	r20,4(r21)
  808664:	ad400204 	addi	r21,r21,8
  808668:	003fb906 	br	808550 <__sfvwrite_r+0x114>
  80866c:	ac400017 	ldw	r17,0(r21)
  808670:	ac000117 	ldw	r16,4(r21)
  808674:	ad400204 	addi	r21,r21,8
  808678:	003f8a06 	br	8084a4 <__sfvwrite_r+0x68>
  80867c:	91400417 	ldw	r5,16(r18)
  808680:	e009883a 	mov	r4,fp
  808684:	08044080 	call	804408 <_free_r>
  808688:	00800304 	movi	r2,12
  80868c:	e0800015 	stw	r2,0(fp)
  808690:	9080030b 	ldhu	r2,12(r18)
  808694:	013fffc4 	movi	r4,-1
  808698:	10801014 	ori	r2,r2,64
  80869c:	9080030d 	sth	r2,12(r18)
  8086a0:	003f9306 	br	8084f0 <__sfvwrite_r+0xb4>
  8086a4:	0027883a 	mov	r19,zero
  8086a8:	002f883a 	mov	r23,zero
  8086ac:	d8000015 	stw	zero,0(sp)
  8086b0:	0029883a 	mov	r20,zero
  8086b4:	98001e26 	beq	r19,zero,808730 <__sfvwrite_r+0x2f4>
  8086b8:	d8c00017 	ldw	r3,0(sp)
  8086bc:	1804c03a 	cmpne	r2,r3,zero
  8086c0:	10005e26 	beq	r2,zero,80883c <__sfvwrite_r+0x400>
  8086c4:	9821883a 	mov	r16,r19
  8086c8:	a4c0012e 	bgeu	r20,r19,8086d0 <__sfvwrite_r+0x294>
  8086cc:	a021883a 	mov	r16,r20
  8086d0:	91000017 	ldw	r4,0(r18)
  8086d4:	90800417 	ldw	r2,16(r18)
  8086d8:	91800217 	ldw	r6,8(r18)
  8086dc:	91c00517 	ldw	r7,20(r18)
  8086e0:	1100022e 	bgeu	r2,r4,8086ec <__sfvwrite_r+0x2b0>
  8086e4:	31e3883a 	add	r17,r6,r7
  8086e8:	8c001616 	blt	r17,r16,808744 <__sfvwrite_r+0x308>
  8086ec:	81c03816 	blt	r16,r7,8087d0 <__sfvwrite_r+0x394>
  8086f0:	90c00917 	ldw	r3,36(r18)
  8086f4:	91400717 	ldw	r5,28(r18)
  8086f8:	e009883a 	mov	r4,fp
  8086fc:	b80d883a 	mov	r6,r23
  808700:	183ee83a 	callr	r3
  808704:	1023883a 	mov	r17,r2
  808708:	00bfe10e 	bge	zero,r2,808690 <__sfvwrite_r+0x254>
  80870c:	a469c83a 	sub	r20,r20,r17
  808710:	a0001826 	beq	r20,zero,808774 <__sfvwrite_r+0x338>
  808714:	b0800217 	ldw	r2,8(r22)
  808718:	1445c83a 	sub	r2,r2,r17
  80871c:	b0800215 	stw	r2,8(r22)
  808720:	103f7226 	beq	r2,zero,8084ec <__sfvwrite_r+0xb0>
  808724:	9c67c83a 	sub	r19,r19,r17
  808728:	bc6f883a 	add	r23,r23,r17
  80872c:	983fe21e 	bne	r19,zero,8086b8 <__sfvwrite_r+0x27c>
  808730:	adc00017 	ldw	r23,0(r21)
  808734:	acc00117 	ldw	r19,4(r21)
  808738:	ad400204 	addi	r21,r21,8
  80873c:	d8000015 	stw	zero,0(sp)
  808740:	003fdc06 	br	8086b4 <__sfvwrite_r+0x278>
  808744:	b80b883a 	mov	r5,r23
  808748:	880d883a 	mov	r6,r17
  80874c:	0808e340 	call	808e34 <memmove>
  808750:	90c00017 	ldw	r3,0(r18)
  808754:	e009883a 	mov	r4,fp
  808758:	900b883a 	mov	r5,r18
  80875c:	1c47883a 	add	r3,r3,r17
  808760:	90c00015 	stw	r3,0(r18)
  808764:	0807f4c0 	call	807f4c <_fflush_r>
  808768:	103fc91e 	bne	r2,zero,808690 <__sfvwrite_r+0x254>
  80876c:	a469c83a 	sub	r20,r20,r17
  808770:	a03fe81e 	bne	r20,zero,808714 <__sfvwrite_r+0x2d8>
  808774:	e009883a 	mov	r4,fp
  808778:	900b883a 	mov	r5,r18
  80877c:	0807f4c0 	call	807f4c <_fflush_r>
  808780:	103fc31e 	bne	r2,zero,808690 <__sfvwrite_r+0x254>
  808784:	d8000015 	stw	zero,0(sp)
  808788:	003fe206 	br	808714 <__sfvwrite_r+0x2d8>
  80878c:	91000017 	ldw	r4,0(r18)
  808790:	90800417 	ldw	r2,16(r18)
  808794:	1100022e 	bgeu	r2,r4,8087a0 <__sfvwrite_r+0x364>
  808798:	8023883a 	mov	r17,r16
  80879c:	85003136 	bltu	r16,r20,808864 <__sfvwrite_r+0x428>
  8087a0:	91c00517 	ldw	r7,20(r18)
  8087a4:	a1c01836 	bltu	r20,r7,808808 <__sfvwrite_r+0x3cc>
  8087a8:	90c00917 	ldw	r3,36(r18)
  8087ac:	91400717 	ldw	r5,28(r18)
  8087b0:	e009883a 	mov	r4,fp
  8087b4:	b80d883a 	mov	r6,r23
  8087b8:	183ee83a 	callr	r3
  8087bc:	1021883a 	mov	r16,r2
  8087c0:	00bfb30e 	bge	zero,r2,808690 <__sfvwrite_r+0x254>
  8087c4:	1023883a 	mov	r17,r2
  8087c8:	1027883a 	mov	r19,r2
  8087cc:	003f9b06 	br	80863c <__sfvwrite_r+0x200>
  8087d0:	b80b883a 	mov	r5,r23
  8087d4:	800d883a 	mov	r6,r16
  8087d8:	0808e340 	call	808e34 <memmove>
  8087dc:	90c00217 	ldw	r3,8(r18)
  8087e0:	90800017 	ldw	r2,0(r18)
  8087e4:	8023883a 	mov	r17,r16
  8087e8:	1c07c83a 	sub	r3,r3,r16
  8087ec:	1405883a 	add	r2,r2,r16
  8087f0:	90c00215 	stw	r3,8(r18)
  8087f4:	90800015 	stw	r2,0(r18)
  8087f8:	003fc406 	br	80870c <__sfvwrite_r+0x2d0>
  8087fc:	a00d883a 	mov	r6,r20
  808800:	a021883a 	mov	r16,r20
  808804:	003f8106 	br	80860c <__sfvwrite_r+0x1d0>
  808808:	b80b883a 	mov	r5,r23
  80880c:	a00d883a 	mov	r6,r20
  808810:	0808e340 	call	808e34 <memmove>
  808814:	90c00217 	ldw	r3,8(r18)
  808818:	90800017 	ldw	r2,0(r18)
  80881c:	a021883a 	mov	r16,r20
  808820:	1d07c83a 	sub	r3,r3,r20
  808824:	1505883a 	add	r2,r2,r20
  808828:	a023883a 	mov	r17,r20
  80882c:	a027883a 	mov	r19,r20
  808830:	90c00215 	stw	r3,8(r18)
  808834:	90800015 	stw	r2,0(r18)
  808838:	003f8006 	br	80863c <__sfvwrite_r+0x200>
  80883c:	b809883a 	mov	r4,r23
  808840:	01400284 	movi	r5,10
  808844:	980d883a 	mov	r6,r19
  808848:	0808cb00 	call	808cb0 <memchr>
  80884c:	10001726 	beq	r2,zero,8088ac <__sfvwrite_r+0x470>
  808850:	15c5c83a 	sub	r2,r2,r23
  808854:	15000044 	addi	r20,r2,1
  808858:	00800044 	movi	r2,1
  80885c:	d8800015 	stw	r2,0(sp)
  808860:	003f9806 	br	8086c4 <__sfvwrite_r+0x288>
  808864:	b80b883a 	mov	r5,r23
  808868:	800d883a 	mov	r6,r16
  80886c:	0808e340 	call	808e34 <memmove>
  808870:	90c00017 	ldw	r3,0(r18)
  808874:	e009883a 	mov	r4,fp
  808878:	900b883a 	mov	r5,r18
  80887c:	1c07883a 	add	r3,r3,r16
  808880:	90c00015 	stw	r3,0(r18)
  808884:	8027883a 	mov	r19,r16
  808888:	0807f4c0 	call	807f4c <_fflush_r>
  80888c:	103f6b26 	beq	r2,zero,80863c <__sfvwrite_r+0x200>
  808890:	003f7f06 	br	808690 <__sfvwrite_r+0x254>
  808894:	400b883a 	mov	r5,r8
  808898:	e009883a 	mov	r4,fp
  80889c:	0809f080 	call	809f08 <_realloc_r>
  8088a0:	103f7626 	beq	r2,zero,80867c <__sfvwrite_r+0x240>
  8088a4:	1023883a 	mov	r17,r2
  8088a8:	003f5006 	br	8085ec <__sfvwrite_r+0x1b0>
  8088ac:	00c00044 	movi	r3,1
  8088b0:	9d000044 	addi	r20,r19,1
  8088b4:	d8c00015 	stw	r3,0(sp)
  8088b8:	003f8206 	br	8086c4 <__sfvwrite_r+0x288>
  8088bc:	9080030b 	ldhu	r2,12(r18)
  8088c0:	00c00244 	movi	r3,9
  8088c4:	013fffc4 	movi	r4,-1
  8088c8:	10801014 	ori	r2,r2,64
  8088cc:	9080030d 	sth	r2,12(r18)
  8088d0:	e0c00015 	stw	r3,0(fp)
  8088d4:	003f0606 	br	8084f0 <__sfvwrite_r+0xb4>

008088d8 <_fwalk_reent>:
  8088d8:	defff704 	addi	sp,sp,-36
  8088dc:	dcc00315 	stw	r19,12(sp)
  8088e0:	24c0b804 	addi	r19,r4,736
  8088e4:	dd800615 	stw	r22,24(sp)
  8088e8:	dd400515 	stw	r21,20(sp)
  8088ec:	dfc00815 	stw	ra,32(sp)
  8088f0:	ddc00715 	stw	r23,28(sp)
  8088f4:	dd000415 	stw	r20,16(sp)
  8088f8:	dc800215 	stw	r18,8(sp)
  8088fc:	dc400115 	stw	r17,4(sp)
  808900:	dc000015 	stw	r16,0(sp)
  808904:	202b883a 	mov	r21,r4
  808908:	282d883a 	mov	r22,r5
  80890c:	08081d40 	call	8081d4 <__sfp_lock_acquire>
  808910:	98002126 	beq	r19,zero,808998 <_fwalk_reent+0xc0>
  808914:	002f883a 	mov	r23,zero
  808918:	9c800117 	ldw	r18,4(r19)
  80891c:	9c000217 	ldw	r16,8(r19)
  808920:	90bfffc4 	addi	r2,r18,-1
  808924:	10000d16 	blt	r2,zero,80895c <_fwalk_reent+0x84>
  808928:	0023883a 	mov	r17,zero
  80892c:	053fffc4 	movi	r20,-1
  808930:	8080030f 	ldh	r2,12(r16)
  808934:	8c400044 	addi	r17,r17,1
  808938:	10000626 	beq	r2,zero,808954 <_fwalk_reent+0x7c>
  80893c:	8080038f 	ldh	r2,14(r16)
  808940:	800b883a 	mov	r5,r16
  808944:	a809883a 	mov	r4,r21
  808948:	15000226 	beq	r2,r20,808954 <_fwalk_reent+0x7c>
  80894c:	b03ee83a 	callr	r22
  808950:	b8aeb03a 	or	r23,r23,r2
  808954:	84001704 	addi	r16,r16,92
  808958:	947ff51e 	bne	r18,r17,808930 <_fwalk_reent+0x58>
  80895c:	9cc00017 	ldw	r19,0(r19)
  808960:	983fed1e 	bne	r19,zero,808918 <_fwalk_reent+0x40>
  808964:	08081d80 	call	8081d8 <__sfp_lock_release>
  808968:	b805883a 	mov	r2,r23
  80896c:	dfc00817 	ldw	ra,32(sp)
  808970:	ddc00717 	ldw	r23,28(sp)
  808974:	dd800617 	ldw	r22,24(sp)
  808978:	dd400517 	ldw	r21,20(sp)
  80897c:	dd000417 	ldw	r20,16(sp)
  808980:	dcc00317 	ldw	r19,12(sp)
  808984:	dc800217 	ldw	r18,8(sp)
  808988:	dc400117 	ldw	r17,4(sp)
  80898c:	dc000017 	ldw	r16,0(sp)
  808990:	dec00904 	addi	sp,sp,36
  808994:	f800283a 	ret
  808998:	002f883a 	mov	r23,zero
  80899c:	003ff106 	br	808964 <_fwalk_reent+0x8c>

008089a0 <_fwalk>:
  8089a0:	defff804 	addi	sp,sp,-32
  8089a4:	dcc00315 	stw	r19,12(sp)
  8089a8:	24c0b804 	addi	r19,r4,736
  8089ac:	dd400515 	stw	r21,20(sp)
  8089b0:	dfc00715 	stw	ra,28(sp)
  8089b4:	dd800615 	stw	r22,24(sp)
  8089b8:	dd000415 	stw	r20,16(sp)
  8089bc:	dc800215 	stw	r18,8(sp)
  8089c0:	dc400115 	stw	r17,4(sp)
  8089c4:	dc000015 	stw	r16,0(sp)
  8089c8:	282b883a 	mov	r21,r5
  8089cc:	08081d40 	call	8081d4 <__sfp_lock_acquire>
  8089d0:	98001f26 	beq	r19,zero,808a50 <_fwalk+0xb0>
  8089d4:	002d883a 	mov	r22,zero
  8089d8:	9c800117 	ldw	r18,4(r19)
  8089dc:	9c000217 	ldw	r16,8(r19)
  8089e0:	90bfffc4 	addi	r2,r18,-1
  8089e4:	10000c16 	blt	r2,zero,808a18 <_fwalk+0x78>
  8089e8:	0023883a 	mov	r17,zero
  8089ec:	053fffc4 	movi	r20,-1
  8089f0:	8080030f 	ldh	r2,12(r16)
  8089f4:	8c400044 	addi	r17,r17,1
  8089f8:	10000526 	beq	r2,zero,808a10 <_fwalk+0x70>
  8089fc:	8080038f 	ldh	r2,14(r16)
  808a00:	8009883a 	mov	r4,r16
  808a04:	15000226 	beq	r2,r20,808a10 <_fwalk+0x70>
  808a08:	a83ee83a 	callr	r21
  808a0c:	b0acb03a 	or	r22,r22,r2
  808a10:	84001704 	addi	r16,r16,92
  808a14:	947ff61e 	bne	r18,r17,8089f0 <_fwalk+0x50>
  808a18:	9cc00017 	ldw	r19,0(r19)
  808a1c:	983fee1e 	bne	r19,zero,8089d8 <_fwalk+0x38>
  808a20:	08081d80 	call	8081d8 <__sfp_lock_release>
  808a24:	b005883a 	mov	r2,r22
  808a28:	dfc00717 	ldw	ra,28(sp)
  808a2c:	dd800617 	ldw	r22,24(sp)
  808a30:	dd400517 	ldw	r21,20(sp)
  808a34:	dd000417 	ldw	r20,16(sp)
  808a38:	dcc00317 	ldw	r19,12(sp)
  808a3c:	dc800217 	ldw	r18,8(sp)
  808a40:	dc400117 	ldw	r17,4(sp)
  808a44:	dc000017 	ldw	r16,0(sp)
  808a48:	dec00804 	addi	sp,sp,32
  808a4c:	f800283a 	ret
  808a50:	002d883a 	mov	r22,zero
  808a54:	003ff206 	br	808a20 <_fwalk+0x80>

00808a58 <__locale_charset>:
  808a58:	d0a06b17 	ldw	r2,-32340(gp)
  808a5c:	f800283a 	ret

00808a60 <_localeconv_r>:
  808a60:	00802074 	movhi	r2,129
  808a64:	1083ef04 	addi	r2,r2,4028
  808a68:	f800283a 	ret

00808a6c <localeconv>:
  808a6c:	00802074 	movhi	r2,129
  808a70:	108bb704 	addi	r2,r2,11996
  808a74:	11000017 	ldw	r4,0(r2)
  808a78:	0808a601 	jmpi	808a60 <_localeconv_r>

00808a7c <_setlocale_r>:
  808a7c:	defffc04 	addi	sp,sp,-16
  808a80:	00c02074 	movhi	r3,129
  808a84:	18c3c604 	addi	r3,r3,3864
  808a88:	dc800215 	stw	r18,8(sp)
  808a8c:	dc400115 	stw	r17,4(sp)
  808a90:	dc000015 	stw	r16,0(sp)
  808a94:	2023883a 	mov	r17,r4
  808a98:	2825883a 	mov	r18,r5
  808a9c:	dfc00315 	stw	ra,12(sp)
  808aa0:	3021883a 	mov	r16,r6
  808aa4:	3009883a 	mov	r4,r6
  808aa8:	180b883a 	mov	r5,r3
  808aac:	30000926 	beq	r6,zero,808ad4 <_setlocale_r+0x58>
  808ab0:	080a6b80 	call	80a6b8 <strcmp>
  808ab4:	8009883a 	mov	r4,r16
  808ab8:	01402074 	movhi	r5,129
  808abc:	2943d604 	addi	r5,r5,3928
  808ac0:	10000b1e 	bne	r2,zero,808af0 <_setlocale_r+0x74>
  808ac4:	8c000d15 	stw	r16,52(r17)
  808ac8:	8c800c15 	stw	r18,48(r17)
  808acc:	00c02074 	movhi	r3,129
  808ad0:	18c3c604 	addi	r3,r3,3864
  808ad4:	1805883a 	mov	r2,r3
  808ad8:	dfc00317 	ldw	ra,12(sp)
  808adc:	dc800217 	ldw	r18,8(sp)
  808ae0:	dc400117 	ldw	r17,4(sp)
  808ae4:	dc000017 	ldw	r16,0(sp)
  808ae8:	dec00404 	addi	sp,sp,16
  808aec:	f800283a 	ret
  808af0:	080a6b80 	call	80a6b8 <strcmp>
  808af4:	0007883a 	mov	r3,zero
  808af8:	103ff226 	beq	r2,zero,808ac4 <_setlocale_r+0x48>
  808afc:	003ff506 	br	808ad4 <_setlocale_r+0x58>

00808b00 <setlocale>:
  808b00:	01802074 	movhi	r6,129
  808b04:	318bb704 	addi	r6,r6,11996
  808b08:	2007883a 	mov	r3,r4
  808b0c:	31000017 	ldw	r4,0(r6)
  808b10:	280d883a 	mov	r6,r5
  808b14:	180b883a 	mov	r5,r3
  808b18:	0808a7c1 	jmpi	808a7c <_setlocale_r>

00808b1c <__smakebuf_r>:
  808b1c:	2880030b 	ldhu	r2,12(r5)
  808b20:	deffed04 	addi	sp,sp,-76
  808b24:	dc401015 	stw	r17,64(sp)
  808b28:	1080008c 	andi	r2,r2,2
  808b2c:	dc000f15 	stw	r16,60(sp)
  808b30:	dfc01215 	stw	ra,72(sp)
  808b34:	dc801115 	stw	r18,68(sp)
  808b38:	2821883a 	mov	r16,r5
  808b3c:	2023883a 	mov	r17,r4
  808b40:	10000b26 	beq	r2,zero,808b70 <__smakebuf_r+0x54>
  808b44:	28c010c4 	addi	r3,r5,67
  808b48:	00800044 	movi	r2,1
  808b4c:	28800515 	stw	r2,20(r5)
  808b50:	28c00415 	stw	r3,16(r5)
  808b54:	28c00015 	stw	r3,0(r5)
  808b58:	dfc01217 	ldw	ra,72(sp)
  808b5c:	dc801117 	ldw	r18,68(sp)
  808b60:	dc401017 	ldw	r17,64(sp)
  808b64:	dc000f17 	ldw	r16,60(sp)
  808b68:	dec01304 	addi	sp,sp,76
  808b6c:	f800283a 	ret
  808b70:	2940038f 	ldh	r5,14(r5)
  808b74:	28002116 	blt	r5,zero,808bfc <__smakebuf_r+0xe0>
  808b78:	d80d883a 	mov	r6,sp
  808b7c:	080aa340 	call	80aa34 <_fstat_r>
  808b80:	10001e16 	blt	r2,zero,808bfc <__smakebuf_r+0xe0>
  808b84:	d8800117 	ldw	r2,4(sp)
  808b88:	00e00014 	movui	r3,32768
  808b8c:	113c000c 	andi	r4,r2,61440
  808b90:	20c03126 	beq	r4,r3,808c58 <__smakebuf_r+0x13c>
  808b94:	8080030b 	ldhu	r2,12(r16)
  808b98:	00c80004 	movi	r3,8192
  808b9c:	10820014 	ori	r2,r2,2048
  808ba0:	8080030d 	sth	r2,12(r16)
  808ba4:	20c01e26 	beq	r4,r3,808c20 <__smakebuf_r+0x104>
  808ba8:	04810004 	movi	r18,1024
  808bac:	8809883a 	mov	r4,r17
  808bb0:	900b883a 	mov	r5,r18
  808bb4:	08035dc0 	call	8035dc <_malloc_r>
  808bb8:	1009883a 	mov	r4,r2
  808bbc:	10003126 	beq	r2,zero,808c84 <__smakebuf_r+0x168>
  808bc0:	80c0030b 	ldhu	r3,12(r16)
  808bc4:	00802074 	movhi	r2,129
  808bc8:	10a0b204 	addi	r2,r2,-32056
  808bcc:	88800f15 	stw	r2,60(r17)
  808bd0:	18c02014 	ori	r3,r3,128
  808bd4:	84800515 	stw	r18,20(r16)
  808bd8:	80c0030d 	sth	r3,12(r16)
  808bdc:	81000415 	stw	r4,16(r16)
  808be0:	81000015 	stw	r4,0(r16)
  808be4:	dfc01217 	ldw	ra,72(sp)
  808be8:	dc801117 	ldw	r18,68(sp)
  808bec:	dc401017 	ldw	r17,64(sp)
  808bf0:	dc000f17 	ldw	r16,60(sp)
  808bf4:	dec01304 	addi	sp,sp,76
  808bf8:	f800283a 	ret
  808bfc:	80c0030b 	ldhu	r3,12(r16)
  808c00:	1880200c 	andi	r2,r3,128
  808c04:	10000426 	beq	r2,zero,808c18 <__smakebuf_r+0xfc>
  808c08:	04801004 	movi	r18,64
  808c0c:	18820014 	ori	r2,r3,2048
  808c10:	8080030d 	sth	r2,12(r16)
  808c14:	003fe506 	br	808bac <__smakebuf_r+0x90>
  808c18:	04810004 	movi	r18,1024
  808c1c:	003ffb06 	br	808c0c <__smakebuf_r+0xf0>
  808c20:	8140038f 	ldh	r5,14(r16)
  808c24:	8809883a 	mov	r4,r17
  808c28:	080aaa80 	call	80aaa8 <_isatty_r>
  808c2c:	103fde26 	beq	r2,zero,808ba8 <__smakebuf_r+0x8c>
  808c30:	8080030b 	ldhu	r2,12(r16)
  808c34:	80c010c4 	addi	r3,r16,67
  808c38:	04810004 	movi	r18,1024
  808c3c:	10800054 	ori	r2,r2,1
  808c40:	8080030d 	sth	r2,12(r16)
  808c44:	00800044 	movi	r2,1
  808c48:	80c00415 	stw	r3,16(r16)
  808c4c:	80800515 	stw	r2,20(r16)
  808c50:	80c00015 	stw	r3,0(r16)
  808c54:	003fd506 	br	808bac <__smakebuf_r+0x90>
  808c58:	80c00a17 	ldw	r3,40(r16)
  808c5c:	00802074 	movhi	r2,129
  808c60:	10a95d04 	addi	r2,r2,-23180
  808c64:	18bfcb1e 	bne	r3,r2,808b94 <__smakebuf_r+0x78>
  808c68:	8080030b 	ldhu	r2,12(r16)
  808c6c:	00c10004 	movi	r3,1024
  808c70:	1825883a 	mov	r18,r3
  808c74:	10c4b03a 	or	r2,r2,r3
  808c78:	8080030d 	sth	r2,12(r16)
  808c7c:	80c01315 	stw	r3,76(r16)
  808c80:	003fca06 	br	808bac <__smakebuf_r+0x90>
  808c84:	8100030b 	ldhu	r4,12(r16)
  808c88:	2080800c 	andi	r2,r4,512
  808c8c:	103fb21e 	bne	r2,zero,808b58 <__smakebuf_r+0x3c>
  808c90:	80c010c4 	addi	r3,r16,67
  808c94:	21000094 	ori	r4,r4,2
  808c98:	00800044 	movi	r2,1
  808c9c:	80800515 	stw	r2,20(r16)
  808ca0:	8100030d 	sth	r4,12(r16)
  808ca4:	80c00415 	stw	r3,16(r16)
  808ca8:	80c00015 	stw	r3,0(r16)
  808cac:	003faa06 	br	808b58 <__smakebuf_r+0x3c>

00808cb0 <memchr>:
  808cb0:	008000c4 	movi	r2,3
  808cb4:	29403fcc 	andi	r5,r5,255
  808cb8:	2007883a 	mov	r3,r4
  808cbc:	1180022e 	bgeu	r2,r6,808cc8 <memchr+0x18>
  808cc0:	2084703a 	and	r2,r4,r2
  808cc4:	10000b26 	beq	r2,zero,808cf4 <memchr+0x44>
  808cc8:	313fffc4 	addi	r4,r6,-1
  808ccc:	3000051e 	bne	r6,zero,808ce4 <memchr+0x34>
  808cd0:	00002c06 	br	808d84 <memchr+0xd4>
  808cd4:	213fffc4 	addi	r4,r4,-1
  808cd8:	00bfffc4 	movi	r2,-1
  808cdc:	18c00044 	addi	r3,r3,1
  808ce0:	20802826 	beq	r4,r2,808d84 <memchr+0xd4>
  808ce4:	18800003 	ldbu	r2,0(r3)
  808ce8:	28bffa1e 	bne	r5,r2,808cd4 <memchr+0x24>
  808cec:	1805883a 	mov	r2,r3
  808cf0:	f800283a 	ret
  808cf4:	0011883a 	mov	r8,zero
  808cf8:	0007883a 	mov	r3,zero
  808cfc:	01c00104 	movi	r7,4
  808d00:	4004923a 	slli	r2,r8,8
  808d04:	18c00044 	addi	r3,r3,1
  808d08:	1151883a 	add	r8,r2,r5
  808d0c:	19fffc1e 	bne	r3,r7,808d00 <memchr+0x50>
  808d10:	02bfbff4 	movhi	r10,65279
  808d14:	52bfbfc4 	addi	r10,r10,-257
  808d18:	02602074 	movhi	r9,32897
  808d1c:	4a602004 	addi	r9,r9,-32640
  808d20:	02c000c4 	movi	r11,3
  808d24:	20800017 	ldw	r2,0(r4)
  808d28:	31bfff04 	addi	r6,r6,-4
  808d2c:	200f883a 	mov	r7,r4
  808d30:	1204f03a 	xor	r2,r2,r8
  808d34:	1287883a 	add	r3,r2,r10
  808d38:	1a46703a 	and	r3,r3,r9
  808d3c:	0084303a 	nor	r2,zero,r2
  808d40:	10c4703a 	and	r2,r2,r3
  808d44:	10000b26 	beq	r2,zero,808d74 <memchr+0xc4>
  808d48:	20800003 	ldbu	r2,0(r4)
  808d4c:	28800f26 	beq	r5,r2,808d8c <memchr+0xdc>
  808d50:	20800043 	ldbu	r2,1(r4)
  808d54:	21c00044 	addi	r7,r4,1
  808d58:	28800c26 	beq	r5,r2,808d8c <memchr+0xdc>
  808d5c:	20800083 	ldbu	r2,2(r4)
  808d60:	21c00084 	addi	r7,r4,2
  808d64:	28800926 	beq	r5,r2,808d8c <memchr+0xdc>
  808d68:	208000c3 	ldbu	r2,3(r4)
  808d6c:	21c000c4 	addi	r7,r4,3
  808d70:	28800626 	beq	r5,r2,808d8c <memchr+0xdc>
  808d74:	21000104 	addi	r4,r4,4
  808d78:	59bfea36 	bltu	r11,r6,808d24 <memchr+0x74>
  808d7c:	2007883a 	mov	r3,r4
  808d80:	003fd106 	br	808cc8 <memchr+0x18>
  808d84:	0005883a 	mov	r2,zero
  808d88:	f800283a 	ret
  808d8c:	3805883a 	mov	r2,r7
  808d90:	f800283a 	ret

00808d94 <memcpy>:
  808d94:	01c003c4 	movi	r7,15
  808d98:	2007883a 	mov	r3,r4
  808d9c:	3980032e 	bgeu	r7,r6,808dac <memcpy+0x18>
  808da0:	2904b03a 	or	r2,r5,r4
  808da4:	108000cc 	andi	r2,r2,3
  808da8:	10000926 	beq	r2,zero,808dd0 <memcpy+0x3c>
  808dac:	30000626 	beq	r6,zero,808dc8 <memcpy+0x34>
  808db0:	30cd883a 	add	r6,r6,r3
  808db4:	28800003 	ldbu	r2,0(r5)
  808db8:	29400044 	addi	r5,r5,1
  808dbc:	18800005 	stb	r2,0(r3)
  808dc0:	18c00044 	addi	r3,r3,1
  808dc4:	30fffb1e 	bne	r6,r3,808db4 <memcpy+0x20>
  808dc8:	2005883a 	mov	r2,r4
  808dcc:	f800283a 	ret
  808dd0:	3811883a 	mov	r8,r7
  808dd4:	200f883a 	mov	r7,r4
  808dd8:	28c00017 	ldw	r3,0(r5)
  808ddc:	31bffc04 	addi	r6,r6,-16
  808de0:	38c00015 	stw	r3,0(r7)
  808de4:	28800117 	ldw	r2,4(r5)
  808de8:	38800115 	stw	r2,4(r7)
  808dec:	28c00217 	ldw	r3,8(r5)
  808df0:	38c00215 	stw	r3,8(r7)
  808df4:	28800317 	ldw	r2,12(r5)
  808df8:	29400404 	addi	r5,r5,16
  808dfc:	38800315 	stw	r2,12(r7)
  808e00:	39c00404 	addi	r7,r7,16
  808e04:	41bff436 	bltu	r8,r6,808dd8 <memcpy+0x44>
  808e08:	008000c4 	movi	r2,3
  808e0c:	1180072e 	bgeu	r2,r6,808e2c <memcpy+0x98>
  808e10:	1007883a 	mov	r3,r2
  808e14:	28800017 	ldw	r2,0(r5)
  808e18:	31bfff04 	addi	r6,r6,-4
  808e1c:	29400104 	addi	r5,r5,4
  808e20:	38800015 	stw	r2,0(r7)
  808e24:	39c00104 	addi	r7,r7,4
  808e28:	19bffa36 	bltu	r3,r6,808e14 <memcpy+0x80>
  808e2c:	3807883a 	mov	r3,r7
  808e30:	003fde06 	br	808dac <memcpy+0x18>

00808e34 <memmove>:
  808e34:	2807883a 	mov	r3,r5
  808e38:	2011883a 	mov	r8,r4
  808e3c:	29000c2e 	bgeu	r5,r4,808e70 <memmove+0x3c>
  808e40:	298f883a 	add	r7,r5,r6
  808e44:	21c00a2e 	bgeu	r4,r7,808e70 <memmove+0x3c>
  808e48:	30000726 	beq	r6,zero,808e68 <memmove+0x34>
  808e4c:	2187883a 	add	r3,r4,r6
  808e50:	198dc83a 	sub	r6,r3,r6
  808e54:	39ffffc4 	addi	r7,r7,-1
  808e58:	38800003 	ldbu	r2,0(r7)
  808e5c:	18ffffc4 	addi	r3,r3,-1
  808e60:	18800005 	stb	r2,0(r3)
  808e64:	19bffb1e 	bne	r3,r6,808e54 <memmove+0x20>
  808e68:	2005883a 	mov	r2,r4
  808e6c:	f800283a 	ret
  808e70:	01c003c4 	movi	r7,15
  808e74:	39800a36 	bltu	r7,r6,808ea0 <memmove+0x6c>
  808e78:	303ffb26 	beq	r6,zero,808e68 <memmove+0x34>
  808e7c:	400f883a 	mov	r7,r8
  808e80:	320d883a 	add	r6,r6,r8
  808e84:	28800003 	ldbu	r2,0(r5)
  808e88:	29400044 	addi	r5,r5,1
  808e8c:	38800005 	stb	r2,0(r7)
  808e90:	39c00044 	addi	r7,r7,1
  808e94:	39bffb1e 	bne	r7,r6,808e84 <memmove+0x50>
  808e98:	2005883a 	mov	r2,r4
  808e9c:	f800283a 	ret
  808ea0:	1904b03a 	or	r2,r3,r4
  808ea4:	108000cc 	andi	r2,r2,3
  808ea8:	103ff31e 	bne	r2,zero,808e78 <memmove+0x44>
  808eac:	3811883a 	mov	r8,r7
  808eb0:	180b883a 	mov	r5,r3
  808eb4:	200f883a 	mov	r7,r4
  808eb8:	28c00017 	ldw	r3,0(r5)
  808ebc:	31bffc04 	addi	r6,r6,-16
  808ec0:	38c00015 	stw	r3,0(r7)
  808ec4:	28800117 	ldw	r2,4(r5)
  808ec8:	38800115 	stw	r2,4(r7)
  808ecc:	28c00217 	ldw	r3,8(r5)
  808ed0:	38c00215 	stw	r3,8(r7)
  808ed4:	28800317 	ldw	r2,12(r5)
  808ed8:	29400404 	addi	r5,r5,16
  808edc:	38800315 	stw	r2,12(r7)
  808ee0:	39c00404 	addi	r7,r7,16
  808ee4:	41bff436 	bltu	r8,r6,808eb8 <memmove+0x84>
  808ee8:	008000c4 	movi	r2,3
  808eec:	1180072e 	bgeu	r2,r6,808f0c <memmove+0xd8>
  808ef0:	1007883a 	mov	r3,r2
  808ef4:	28800017 	ldw	r2,0(r5)
  808ef8:	31bfff04 	addi	r6,r6,-4
  808efc:	29400104 	addi	r5,r5,4
  808f00:	38800015 	stw	r2,0(r7)
  808f04:	39c00104 	addi	r7,r7,4
  808f08:	19bffa36 	bltu	r3,r6,808ef4 <memmove+0xc0>
  808f0c:	3811883a 	mov	r8,r7
  808f10:	003fd906 	br	808e78 <memmove+0x44>

00808f14 <_Bfree>:
  808f14:	28000826 	beq	r5,zero,808f38 <_Bfree+0x24>
  808f18:	28800117 	ldw	r2,4(r5)
  808f1c:	21001317 	ldw	r4,76(r4)
  808f20:	1085883a 	add	r2,r2,r2
  808f24:	1085883a 	add	r2,r2,r2
  808f28:	1105883a 	add	r2,r2,r4
  808f2c:	10c00017 	ldw	r3,0(r2)
  808f30:	28c00015 	stw	r3,0(r5)
  808f34:	11400015 	stw	r5,0(r2)
  808f38:	f800283a 	ret

00808f3c <__hi0bits>:
  808f3c:	20bfffec 	andhi	r2,r4,65535
  808f40:	10001426 	beq	r2,zero,808f94 <__hi0bits+0x58>
  808f44:	0007883a 	mov	r3,zero
  808f48:	20bfc02c 	andhi	r2,r4,65280
  808f4c:	1000021e 	bne	r2,zero,808f58 <__hi0bits+0x1c>
  808f50:	2008923a 	slli	r4,r4,8
  808f54:	18c00204 	addi	r3,r3,8
  808f58:	20bc002c 	andhi	r2,r4,61440
  808f5c:	1000021e 	bne	r2,zero,808f68 <__hi0bits+0x2c>
  808f60:	2008913a 	slli	r4,r4,4
  808f64:	18c00104 	addi	r3,r3,4
  808f68:	20b0002c 	andhi	r2,r4,49152
  808f6c:	1000031e 	bne	r2,zero,808f7c <__hi0bits+0x40>
  808f70:	2105883a 	add	r2,r4,r4
  808f74:	18c00084 	addi	r3,r3,2
  808f78:	1089883a 	add	r4,r2,r2
  808f7c:	20000316 	blt	r4,zero,808f8c <__hi0bits+0x50>
  808f80:	2090002c 	andhi	r2,r4,16384
  808f84:	10000626 	beq	r2,zero,808fa0 <__hi0bits+0x64>
  808f88:	18c00044 	addi	r3,r3,1
  808f8c:	1805883a 	mov	r2,r3
  808f90:	f800283a 	ret
  808f94:	2008943a 	slli	r4,r4,16
  808f98:	00c00404 	movi	r3,16
  808f9c:	003fea06 	br	808f48 <__hi0bits+0xc>
  808fa0:	00c00804 	movi	r3,32
  808fa4:	1805883a 	mov	r2,r3
  808fa8:	f800283a 	ret

00808fac <__lo0bits>:
  808fac:	20c00017 	ldw	r3,0(r4)
  808fb0:	188001cc 	andi	r2,r3,7
  808fb4:	10000a26 	beq	r2,zero,808fe0 <__lo0bits+0x34>
  808fb8:	1880004c 	andi	r2,r3,1
  808fbc:	1005003a 	cmpeq	r2,r2,zero
  808fc0:	10002126 	beq	r2,zero,809048 <__lo0bits+0x9c>
  808fc4:	1880008c 	andi	r2,r3,2
  808fc8:	1000251e 	bne	r2,zero,809060 <__lo0bits+0xb4>
  808fcc:	1804d0ba 	srli	r2,r3,2
  808fd0:	01400084 	movi	r5,2
  808fd4:	20800015 	stw	r2,0(r4)
  808fd8:	2805883a 	mov	r2,r5
  808fdc:	f800283a 	ret
  808fe0:	18bfffcc 	andi	r2,r3,65535
  808fe4:	10001526 	beq	r2,zero,80903c <__lo0bits+0x90>
  808fe8:	000b883a 	mov	r5,zero
  808fec:	18803fcc 	andi	r2,r3,255
  808ff0:	1000021e 	bne	r2,zero,808ffc <__lo0bits+0x50>
  808ff4:	1806d23a 	srli	r3,r3,8
  808ff8:	29400204 	addi	r5,r5,8
  808ffc:	188003cc 	andi	r2,r3,15
  809000:	1000021e 	bne	r2,zero,80900c <__lo0bits+0x60>
  809004:	1806d13a 	srli	r3,r3,4
  809008:	29400104 	addi	r5,r5,4
  80900c:	188000cc 	andi	r2,r3,3
  809010:	1000021e 	bne	r2,zero,80901c <__lo0bits+0x70>
  809014:	1806d0ba 	srli	r3,r3,2
  809018:	29400084 	addi	r5,r5,2
  80901c:	1880004c 	andi	r2,r3,1
  809020:	1000031e 	bne	r2,zero,809030 <__lo0bits+0x84>
  809024:	1806d07a 	srli	r3,r3,1
  809028:	18000a26 	beq	r3,zero,809054 <__lo0bits+0xa8>
  80902c:	29400044 	addi	r5,r5,1
  809030:	2805883a 	mov	r2,r5
  809034:	20c00015 	stw	r3,0(r4)
  809038:	f800283a 	ret
  80903c:	1806d43a 	srli	r3,r3,16
  809040:	01400404 	movi	r5,16
  809044:	003fe906 	br	808fec <__lo0bits+0x40>
  809048:	000b883a 	mov	r5,zero
  80904c:	2805883a 	mov	r2,r5
  809050:	f800283a 	ret
  809054:	01400804 	movi	r5,32
  809058:	2805883a 	mov	r2,r5
  80905c:	f800283a 	ret
  809060:	1804d07a 	srli	r2,r3,1
  809064:	01400044 	movi	r5,1
  809068:	20800015 	stw	r2,0(r4)
  80906c:	003fda06 	br	808fd8 <__lo0bits+0x2c>

00809070 <__mcmp>:
  809070:	20800417 	ldw	r2,16(r4)
  809074:	28c00417 	ldw	r3,16(r5)
  809078:	10cfc83a 	sub	r7,r2,r3
  80907c:	38000c1e 	bne	r7,zero,8090b0 <__mcmp+0x40>
  809080:	18c5883a 	add	r2,r3,r3
  809084:	1085883a 	add	r2,r2,r2
  809088:	10c00504 	addi	r3,r2,20
  80908c:	21000504 	addi	r4,r4,20
  809090:	28cb883a 	add	r5,r5,r3
  809094:	2085883a 	add	r2,r4,r2
  809098:	10bfff04 	addi	r2,r2,-4
  80909c:	297fff04 	addi	r5,r5,-4
  8090a0:	11800017 	ldw	r6,0(r2)
  8090a4:	28c00017 	ldw	r3,0(r5)
  8090a8:	30c0031e 	bne	r6,r3,8090b8 <__mcmp+0x48>
  8090ac:	20bffa36 	bltu	r4,r2,809098 <__mcmp+0x28>
  8090b0:	3805883a 	mov	r2,r7
  8090b4:	f800283a 	ret
  8090b8:	30c00336 	bltu	r6,r3,8090c8 <__mcmp+0x58>
  8090bc:	01c00044 	movi	r7,1
  8090c0:	3805883a 	mov	r2,r7
  8090c4:	f800283a 	ret
  8090c8:	01ffffc4 	movi	r7,-1
  8090cc:	003ff806 	br	8090b0 <__mcmp+0x40>

008090d0 <__ulp>:
  8090d0:	295ffc2c 	andhi	r5,r5,32752
  8090d4:	013f3034 	movhi	r4,64704
  8090d8:	290b883a 	add	r5,r5,r4
  8090dc:	0145c83a 	sub	r2,zero,r5
  8090e0:	1007d53a 	srai	r3,r2,20
  8090e4:	000d883a 	mov	r6,zero
  8090e8:	0140040e 	bge	zero,r5,8090fc <__ulp+0x2c>
  8090ec:	280f883a 	mov	r7,r5
  8090f0:	3807883a 	mov	r3,r7
  8090f4:	3005883a 	mov	r2,r6
  8090f8:	f800283a 	ret
  8090fc:	008004c4 	movi	r2,19
  809100:	193ffb04 	addi	r4,r3,-20
  809104:	10c00c0e 	bge	r2,r3,809138 <__ulp+0x68>
  809108:	008007c4 	movi	r2,31
  80910c:	1107c83a 	sub	r3,r2,r4
  809110:	00800784 	movi	r2,30
  809114:	01400044 	movi	r5,1
  809118:	11000216 	blt	r2,r4,809124 <__ulp+0x54>
  80911c:	00800044 	movi	r2,1
  809120:	10ca983a 	sll	r5,r2,r3
  809124:	000f883a 	mov	r7,zero
  809128:	280d883a 	mov	r6,r5
  80912c:	3807883a 	mov	r3,r7
  809130:	3005883a 	mov	r2,r6
  809134:	f800283a 	ret
  809138:	00800234 	movhi	r2,8
  80913c:	10cfd83a 	sra	r7,r2,r3
  809140:	000d883a 	mov	r6,zero
  809144:	3005883a 	mov	r2,r6
  809148:	3807883a 	mov	r3,r7
  80914c:	f800283a 	ret

00809150 <__b2d>:
  809150:	20800417 	ldw	r2,16(r4)
  809154:	defff904 	addi	sp,sp,-28
  809158:	dd000415 	stw	r20,16(sp)
  80915c:	1085883a 	add	r2,r2,r2
  809160:	25000504 	addi	r20,r4,20
  809164:	1085883a 	add	r2,r2,r2
  809168:	dc000015 	stw	r16,0(sp)
  80916c:	a0a1883a 	add	r16,r20,r2
  809170:	dd400515 	stw	r21,20(sp)
  809174:	857fff17 	ldw	r21,-4(r16)
  809178:	dc400115 	stw	r17,4(sp)
  80917c:	dfc00615 	stw	ra,24(sp)
  809180:	a809883a 	mov	r4,r21
  809184:	2823883a 	mov	r17,r5
  809188:	dcc00315 	stw	r19,12(sp)
  80918c:	dc800215 	stw	r18,8(sp)
  809190:	0808f3c0 	call	808f3c <__hi0bits>
  809194:	100b883a 	mov	r5,r2
  809198:	00800804 	movi	r2,32
  80919c:	1145c83a 	sub	r2,r2,r5
  8091a0:	88800015 	stw	r2,0(r17)
  8091a4:	00800284 	movi	r2,10
  8091a8:	80ffff04 	addi	r3,r16,-4
  8091ac:	11401416 	blt	r2,r5,809200 <__b2d+0xb0>
  8091b0:	008002c4 	movi	r2,11
  8091b4:	1149c83a 	sub	r4,r2,r5
  8091b8:	a0c02736 	bltu	r20,r3,809258 <__b2d+0x108>
  8091bc:	000d883a 	mov	r6,zero
  8091c0:	28800544 	addi	r2,r5,21
  8091c4:	a906d83a 	srl	r3,r21,r4
  8091c8:	a884983a 	sll	r2,r21,r2
  8091cc:	1ccffc34 	orhi	r19,r3,16368
  8091d0:	11a4b03a 	or	r18,r2,r6
  8091d4:	9005883a 	mov	r2,r18
  8091d8:	9807883a 	mov	r3,r19
  8091dc:	dfc00617 	ldw	ra,24(sp)
  8091e0:	dd400517 	ldw	r21,20(sp)
  8091e4:	dd000417 	ldw	r20,16(sp)
  8091e8:	dcc00317 	ldw	r19,12(sp)
  8091ec:	dc800217 	ldw	r18,8(sp)
  8091f0:	dc400117 	ldw	r17,4(sp)
  8091f4:	dc000017 	ldw	r16,0(sp)
  8091f8:	dec00704 	addi	sp,sp,28
  8091fc:	f800283a 	ret
  809200:	a0c00e36 	bltu	r20,r3,80923c <__b2d+0xec>
  809204:	293ffd44 	addi	r4,r5,-11
  809208:	000d883a 	mov	r6,zero
  80920c:	20000f26 	beq	r4,zero,80924c <__b2d+0xfc>
  809210:	00800804 	movi	r2,32
  809214:	110bc83a 	sub	r5,r2,r4
  809218:	a0c01236 	bltu	r20,r3,809264 <__b2d+0x114>
  80921c:	000f883a 	mov	r7,zero
  809220:	a904983a 	sll	r2,r21,r4
  809224:	3146d83a 	srl	r3,r6,r5
  809228:	3108983a 	sll	r4,r6,r4
  80922c:	108ffc34 	orhi	r2,r2,16368
  809230:	18a6b03a 	or	r19,r3,r2
  809234:	3924b03a 	or	r18,r7,r4
  809238:	003fe606 	br	8091d4 <__b2d+0x84>
  80923c:	293ffd44 	addi	r4,r5,-11
  809240:	81bffe17 	ldw	r6,-8(r16)
  809244:	80fffe04 	addi	r3,r16,-8
  809248:	203ff11e 	bne	r4,zero,809210 <__b2d+0xc0>
  80924c:	accffc34 	orhi	r19,r21,16368
  809250:	3025883a 	mov	r18,r6
  809254:	003fdf06 	br	8091d4 <__b2d+0x84>
  809258:	18bfff17 	ldw	r2,-4(r3)
  80925c:	110cd83a 	srl	r6,r2,r4
  809260:	003fd706 	br	8091c0 <__b2d+0x70>
  809264:	18bfff17 	ldw	r2,-4(r3)
  809268:	114ed83a 	srl	r7,r2,r5
  80926c:	003fec06 	br	809220 <__b2d+0xd0>

00809270 <__ratio>:
  809270:	defff904 	addi	sp,sp,-28
  809274:	dc400215 	stw	r17,8(sp)
  809278:	2823883a 	mov	r17,r5
  80927c:	d80b883a 	mov	r5,sp
  809280:	dfc00615 	stw	ra,24(sp)
  809284:	dd000515 	stw	r20,20(sp)
  809288:	dcc00415 	stw	r19,16(sp)
  80928c:	dc800315 	stw	r18,12(sp)
  809290:	2025883a 	mov	r18,r4
  809294:	08091500 	call	809150 <__b2d>
  809298:	8809883a 	mov	r4,r17
  80929c:	d9400104 	addi	r5,sp,4
  8092a0:	1027883a 	mov	r19,r2
  8092a4:	1829883a 	mov	r20,r3
  8092a8:	08091500 	call	809150 <__b2d>
  8092ac:	89000417 	ldw	r4,16(r17)
  8092b0:	91c00417 	ldw	r7,16(r18)
  8092b4:	d9800117 	ldw	r6,4(sp)
  8092b8:	180b883a 	mov	r5,r3
  8092bc:	390fc83a 	sub	r7,r7,r4
  8092c0:	1009883a 	mov	r4,r2
  8092c4:	d8800017 	ldw	r2,0(sp)
  8092c8:	380e917a 	slli	r7,r7,5
  8092cc:	2011883a 	mov	r8,r4
  8092d0:	1185c83a 	sub	r2,r2,r6
  8092d4:	11c5883a 	add	r2,r2,r7
  8092d8:	1006953a 	slli	r3,r2,20
  8092dc:	2813883a 	mov	r9,r5
  8092e0:	00800d0e 	bge	zero,r2,809318 <__ratio+0xa8>
  8092e4:	1d29883a 	add	r20,r3,r20
  8092e8:	a00b883a 	mov	r5,r20
  8092ec:	480f883a 	mov	r7,r9
  8092f0:	9809883a 	mov	r4,r19
  8092f4:	400d883a 	mov	r6,r8
  8092f8:	080c05c0 	call	80c05c <__divdf3>
  8092fc:	dfc00617 	ldw	ra,24(sp)
  809300:	dd000517 	ldw	r20,20(sp)
  809304:	dcc00417 	ldw	r19,16(sp)
  809308:	dc800317 	ldw	r18,12(sp)
  80930c:	dc400217 	ldw	r17,8(sp)
  809310:	dec00704 	addi	sp,sp,28
  809314:	f800283a 	ret
  809318:	28d3c83a 	sub	r9,r5,r3
  80931c:	003ff206 	br	8092e8 <__ratio+0x78>

00809320 <_mprec_log10>:
  809320:	defffe04 	addi	sp,sp,-8
  809324:	008005c4 	movi	r2,23
  809328:	dc000015 	stw	r16,0(sp)
  80932c:	dfc00115 	stw	ra,4(sp)
  809330:	2021883a 	mov	r16,r4
  809334:	11000c16 	blt	r2,r4,809368 <_mprec_log10+0x48>
  809338:	200490fa 	slli	r2,r4,3
  80933c:	00c02074 	movhi	r3,129
  809340:	18c3fb04 	addi	r3,r3,4076
  809344:	10c5883a 	add	r2,r2,r3
  809348:	12400117 	ldw	r9,4(r2)
  80934c:	12000017 	ldw	r8,0(r2)
  809350:	4807883a 	mov	r3,r9
  809354:	4005883a 	mov	r2,r8
  809358:	dfc00117 	ldw	ra,4(sp)
  80935c:	dc000017 	ldw	r16,0(sp)
  809360:	dec00204 	addi	sp,sp,8
  809364:	f800283a 	ret
  809368:	0011883a 	mov	r8,zero
  80936c:	024ffc34 	movhi	r9,16368
  809370:	0005883a 	mov	r2,zero
  809374:	00d00934 	movhi	r3,16420
  809378:	480b883a 	mov	r5,r9
  80937c:	4009883a 	mov	r4,r8
  809380:	180f883a 	mov	r7,r3
  809384:	100d883a 	mov	r6,r2
  809388:	080bc980 	call	80bc98 <__muldf3>
  80938c:	843fffc4 	addi	r16,r16,-1
  809390:	1011883a 	mov	r8,r2
  809394:	1813883a 	mov	r9,r3
  809398:	803ff51e 	bne	r16,zero,809370 <_mprec_log10+0x50>
  80939c:	4005883a 	mov	r2,r8
  8093a0:	4807883a 	mov	r3,r9
  8093a4:	dfc00117 	ldw	ra,4(sp)
  8093a8:	dc000017 	ldw	r16,0(sp)
  8093ac:	dec00204 	addi	sp,sp,8
  8093b0:	f800283a 	ret

008093b4 <__copybits>:
  8093b4:	297fffc4 	addi	r5,r5,-1
  8093b8:	30800417 	ldw	r2,16(r6)
  8093bc:	280bd17a 	srai	r5,r5,5
  8093c0:	31800504 	addi	r6,r6,20
  8093c4:	1085883a 	add	r2,r2,r2
  8093c8:	294b883a 	add	r5,r5,r5
  8093cc:	294b883a 	add	r5,r5,r5
  8093d0:	1085883a 	add	r2,r2,r2
  8093d4:	290b883a 	add	r5,r5,r4
  8093d8:	3087883a 	add	r3,r6,r2
  8093dc:	29400104 	addi	r5,r5,4
  8093e0:	30c0052e 	bgeu	r6,r3,8093f8 <__copybits+0x44>
  8093e4:	30800017 	ldw	r2,0(r6)
  8093e8:	31800104 	addi	r6,r6,4
  8093ec:	20800015 	stw	r2,0(r4)
  8093f0:	21000104 	addi	r4,r4,4
  8093f4:	30fffb36 	bltu	r6,r3,8093e4 <__copybits+0x30>
  8093f8:	2140032e 	bgeu	r4,r5,809408 <__copybits+0x54>
  8093fc:	20000015 	stw	zero,0(r4)
  809400:	21000104 	addi	r4,r4,4
  809404:	217ffd36 	bltu	r4,r5,8093fc <__copybits+0x48>
  809408:	f800283a 	ret

0080940c <__any_on>:
  80940c:	20800417 	ldw	r2,16(r4)
  809410:	2807d17a 	srai	r3,r5,5
  809414:	21000504 	addi	r4,r4,20
  809418:	10c00d0e 	bge	r2,r3,809450 <__any_on+0x44>
  80941c:	1085883a 	add	r2,r2,r2
  809420:	1085883a 	add	r2,r2,r2
  809424:	208d883a 	add	r6,r4,r2
  809428:	2180182e 	bgeu	r4,r6,80948c <__any_on+0x80>
  80942c:	30bfff17 	ldw	r2,-4(r6)
  809430:	30ffff04 	addi	r3,r6,-4
  809434:	1000041e 	bne	r2,zero,809448 <__any_on+0x3c>
  809438:	20c0142e 	bgeu	r4,r3,80948c <__any_on+0x80>
  80943c:	18ffff04 	addi	r3,r3,-4
  809440:	18800017 	ldw	r2,0(r3)
  809444:	103ffc26 	beq	r2,zero,809438 <__any_on+0x2c>
  809448:	00800044 	movi	r2,1
  80944c:	f800283a 	ret
  809450:	18800a0e 	bge	r3,r2,80947c <__any_on+0x70>
  809454:	294007cc 	andi	r5,r5,31
  809458:	28000826 	beq	r5,zero,80947c <__any_on+0x70>
  80945c:	18c5883a 	add	r2,r3,r3
  809460:	1085883a 	add	r2,r2,r2
  809464:	208d883a 	add	r6,r4,r2
  809468:	30c00017 	ldw	r3,0(r6)
  80946c:	1944d83a 	srl	r2,r3,r5
  809470:	1144983a 	sll	r2,r2,r5
  809474:	18bff41e 	bne	r3,r2,809448 <__any_on+0x3c>
  809478:	003feb06 	br	809428 <__any_on+0x1c>
  80947c:	18c5883a 	add	r2,r3,r3
  809480:	1085883a 	add	r2,r2,r2
  809484:	208d883a 	add	r6,r4,r2
  809488:	003fe706 	br	809428 <__any_on+0x1c>
  80948c:	0005883a 	mov	r2,zero
  809490:	f800283a 	ret

00809494 <_Balloc>:
  809494:	20c01317 	ldw	r3,76(r4)
  809498:	defffb04 	addi	sp,sp,-20
  80949c:	dcc00315 	stw	r19,12(sp)
  8094a0:	dc800215 	stw	r18,8(sp)
  8094a4:	dfc00415 	stw	ra,16(sp)
  8094a8:	2825883a 	mov	r18,r5
  8094ac:	dc400115 	stw	r17,4(sp)
  8094b0:	dc000015 	stw	r16,0(sp)
  8094b4:	2027883a 	mov	r19,r4
  8094b8:	01800404 	movi	r6,16
  8094bc:	01400104 	movi	r5,4
  8094c0:	18001726 	beq	r3,zero,809520 <_Balloc+0x8c>
  8094c4:	01400044 	movi	r5,1
  8094c8:	9485883a 	add	r2,r18,r18
  8094cc:	2ca2983a 	sll	r17,r5,r18
  8094d0:	1085883a 	add	r2,r2,r2
  8094d4:	10c7883a 	add	r3,r2,r3
  8094d8:	1c000017 	ldw	r16,0(r3)
  8094dc:	8c4d883a 	add	r6,r17,r17
  8094e0:	318d883a 	add	r6,r6,r6
  8094e4:	9809883a 	mov	r4,r19
  8094e8:	31800504 	addi	r6,r6,20
  8094ec:	80001226 	beq	r16,zero,809538 <_Balloc+0xa4>
  8094f0:	80800017 	ldw	r2,0(r16)
  8094f4:	18800015 	stw	r2,0(r3)
  8094f8:	80000415 	stw	zero,16(r16)
  8094fc:	80000315 	stw	zero,12(r16)
  809500:	8005883a 	mov	r2,r16
  809504:	dfc00417 	ldw	ra,16(sp)
  809508:	dcc00317 	ldw	r19,12(sp)
  80950c:	dc800217 	ldw	r18,8(sp)
  809510:	dc400117 	ldw	r17,4(sp)
  809514:	dc000017 	ldw	r16,0(sp)
  809518:	dec00504 	addi	sp,sp,20
  80951c:	f800283a 	ret
  809520:	080a7ec0 	call	80a7ec <_calloc_r>
  809524:	1007883a 	mov	r3,r2
  809528:	0021883a 	mov	r16,zero
  80952c:	98801315 	stw	r2,76(r19)
  809530:	103fe41e 	bne	r2,zero,8094c4 <_Balloc+0x30>
  809534:	003ff206 	br	809500 <_Balloc+0x6c>
  809538:	080a7ec0 	call	80a7ec <_calloc_r>
  80953c:	103ff026 	beq	r2,zero,809500 <_Balloc+0x6c>
  809540:	1021883a 	mov	r16,r2
  809544:	14800115 	stw	r18,4(r2)
  809548:	14400215 	stw	r17,8(r2)
  80954c:	003fea06 	br	8094f8 <_Balloc+0x64>

00809550 <__d2b>:
  809550:	defff504 	addi	sp,sp,-44
  809554:	dcc00515 	stw	r19,20(sp)
  809558:	04c00044 	movi	r19,1
  80955c:	dc000215 	stw	r16,8(sp)
  809560:	2821883a 	mov	r16,r5
  809564:	980b883a 	mov	r5,r19
  809568:	ddc00915 	stw	r23,36(sp)
  80956c:	dd800815 	stw	r22,32(sp)
  809570:	dd400715 	stw	r21,28(sp)
  809574:	dd000615 	stw	r20,24(sp)
  809578:	dc800415 	stw	r18,16(sp)
  80957c:	dc400315 	stw	r17,12(sp)
  809580:	dfc00a15 	stw	ra,40(sp)
  809584:	3023883a 	mov	r17,r6
  809588:	382d883a 	mov	r22,r7
  80958c:	ddc00b17 	ldw	r23,44(sp)
  809590:	08094940 	call	809494 <_Balloc>
  809594:	1025883a 	mov	r18,r2
  809598:	00a00034 	movhi	r2,32768
  80959c:	10bfffc4 	addi	r2,r2,-1
  8095a0:	8888703a 	and	r4,r17,r2
  8095a4:	202ad53a 	srli	r21,r4,20
  8095a8:	00800434 	movhi	r2,16
  8095ac:	10bfffc4 	addi	r2,r2,-1
  8095b0:	8886703a 	and	r3,r17,r2
  8095b4:	a829003a 	cmpeq	r20,r21,zero
  8095b8:	800b883a 	mov	r5,r16
  8095bc:	d8c00115 	stw	r3,4(sp)
  8095c0:	94000504 	addi	r16,r18,20
  8095c4:	a000021e 	bne	r20,zero,8095d0 <__d2b+0x80>
  8095c8:	18c00434 	orhi	r3,r3,16
  8095cc:	d8c00115 	stw	r3,4(sp)
  8095d0:	28002726 	beq	r5,zero,809670 <__d2b+0x120>
  8095d4:	d809883a 	mov	r4,sp
  8095d8:	d9400015 	stw	r5,0(sp)
  8095dc:	0808fac0 	call	808fac <__lo0bits>
  8095e0:	100d883a 	mov	r6,r2
  8095e4:	10003526 	beq	r2,zero,8096bc <__d2b+0x16c>
  8095e8:	d8c00117 	ldw	r3,4(sp)
  8095ec:	00800804 	movi	r2,32
  8095f0:	1185c83a 	sub	r2,r2,r6
  8095f4:	d9000017 	ldw	r4,0(sp)
  8095f8:	1886983a 	sll	r3,r3,r2
  8095fc:	1906b03a 	or	r3,r3,r4
  809600:	90c00515 	stw	r3,20(r18)
  809604:	d8c00117 	ldw	r3,4(sp)
  809608:	1986d83a 	srl	r3,r3,r6
  80960c:	d8c00115 	stw	r3,4(sp)
  809610:	180b003a 	cmpeq	r5,r3,zero
  809614:	00800084 	movi	r2,2
  809618:	114bc83a 	sub	r5,r2,r5
  80961c:	80c00115 	stw	r3,4(r16)
  809620:	91400415 	stw	r5,16(r18)
  809624:	a0001a1e 	bne	r20,zero,809690 <__d2b+0x140>
  809628:	3545883a 	add	r2,r6,r21
  80962c:	10bef344 	addi	r2,r2,-1075
  809630:	00c00d44 	movi	r3,53
  809634:	b0800015 	stw	r2,0(r22)
  809638:	1987c83a 	sub	r3,r3,r6
  80963c:	b8c00015 	stw	r3,0(r23)
  809640:	9005883a 	mov	r2,r18
  809644:	dfc00a17 	ldw	ra,40(sp)
  809648:	ddc00917 	ldw	r23,36(sp)
  80964c:	dd800817 	ldw	r22,32(sp)
  809650:	dd400717 	ldw	r21,28(sp)
  809654:	dd000617 	ldw	r20,24(sp)
  809658:	dcc00517 	ldw	r19,20(sp)
  80965c:	dc800417 	ldw	r18,16(sp)
  809660:	dc400317 	ldw	r17,12(sp)
  809664:	dc000217 	ldw	r16,8(sp)
  809668:	dec00b04 	addi	sp,sp,44
  80966c:	f800283a 	ret
  809670:	d9000104 	addi	r4,sp,4
  809674:	0808fac0 	call	808fac <__lo0bits>
  809678:	11800804 	addi	r6,r2,32
  80967c:	d8800117 	ldw	r2,4(sp)
  809680:	94c00415 	stw	r19,16(r18)
  809684:	980b883a 	mov	r5,r19
  809688:	90800515 	stw	r2,20(r18)
  80968c:	a03fe626 	beq	r20,zero,809628 <__d2b+0xd8>
  809690:	2945883a 	add	r2,r5,r5
  809694:	1085883a 	add	r2,r2,r2
  809698:	1405883a 	add	r2,r2,r16
  80969c:	113fff17 	ldw	r4,-4(r2)
  8096a0:	30fef384 	addi	r3,r6,-1074
  8096a4:	2820917a 	slli	r16,r5,5
  8096a8:	b0c00015 	stw	r3,0(r22)
  8096ac:	0808f3c0 	call	808f3c <__hi0bits>
  8096b0:	80a1c83a 	sub	r16,r16,r2
  8096b4:	bc000015 	stw	r16,0(r23)
  8096b8:	003fe106 	br	809640 <__d2b+0xf0>
  8096bc:	d8800017 	ldw	r2,0(sp)
  8096c0:	90800515 	stw	r2,20(r18)
  8096c4:	d8c00117 	ldw	r3,4(sp)
  8096c8:	003fd106 	br	809610 <__d2b+0xc0>

008096cc <__mdiff>:
  8096cc:	defffb04 	addi	sp,sp,-20
  8096d0:	dc000015 	stw	r16,0(sp)
  8096d4:	2821883a 	mov	r16,r5
  8096d8:	dc800215 	stw	r18,8(sp)
  8096dc:	300b883a 	mov	r5,r6
  8096e0:	2025883a 	mov	r18,r4
  8096e4:	8009883a 	mov	r4,r16
  8096e8:	dc400115 	stw	r17,4(sp)
  8096ec:	dfc00415 	stw	ra,16(sp)
  8096f0:	dcc00315 	stw	r19,12(sp)
  8096f4:	3023883a 	mov	r17,r6
  8096f8:	08090700 	call	809070 <__mcmp>
  8096fc:	10004226 	beq	r2,zero,809808 <__mdiff+0x13c>
  809700:	10005016 	blt	r2,zero,809844 <__mdiff+0x178>
  809704:	0027883a 	mov	r19,zero
  809708:	81400117 	ldw	r5,4(r16)
  80970c:	9009883a 	mov	r4,r18
  809710:	08094940 	call	809494 <_Balloc>
  809714:	1019883a 	mov	r12,r2
  809718:	82800417 	ldw	r10,16(r16)
  80971c:	88800417 	ldw	r2,16(r17)
  809720:	81800504 	addi	r6,r16,20
  809724:	5287883a 	add	r3,r10,r10
  809728:	1085883a 	add	r2,r2,r2
  80972c:	18c7883a 	add	r3,r3,r3
  809730:	1085883a 	add	r2,r2,r2
  809734:	8a000504 	addi	r8,r17,20
  809738:	64c00315 	stw	r19,12(r12)
  80973c:	30db883a 	add	r13,r6,r3
  809740:	4097883a 	add	r11,r8,r2
  809744:	61c00504 	addi	r7,r12,20
  809748:	0013883a 	mov	r9,zero
  80974c:	31000017 	ldw	r4,0(r6)
  809750:	41400017 	ldw	r5,0(r8)
  809754:	42000104 	addi	r8,r8,4
  809758:	20bfffcc 	andi	r2,r4,65535
  80975c:	28ffffcc 	andi	r3,r5,65535
  809760:	10c5c83a 	sub	r2,r2,r3
  809764:	1245883a 	add	r2,r2,r9
  809768:	2008d43a 	srli	r4,r4,16
  80976c:	280ad43a 	srli	r5,r5,16
  809770:	1007d43a 	srai	r3,r2,16
  809774:	3880000d 	sth	r2,0(r7)
  809778:	2149c83a 	sub	r4,r4,r5
  80977c:	20c9883a 	add	r4,r4,r3
  809780:	3900008d 	sth	r4,2(r7)
  809784:	31800104 	addi	r6,r6,4
  809788:	39c00104 	addi	r7,r7,4
  80978c:	2013d43a 	srai	r9,r4,16
  809790:	42ffee36 	bltu	r8,r11,80974c <__mdiff+0x80>
  809794:	33400c2e 	bgeu	r6,r13,8097c8 <__mdiff+0xfc>
  809798:	30800017 	ldw	r2,0(r6)
  80979c:	31800104 	addi	r6,r6,4
  8097a0:	10ffffcc 	andi	r3,r2,65535
  8097a4:	1a47883a 	add	r3,r3,r9
  8097a8:	1004d43a 	srli	r2,r2,16
  8097ac:	1809d43a 	srai	r4,r3,16
  8097b0:	38c0000d 	sth	r3,0(r7)
  8097b4:	1105883a 	add	r2,r2,r4
  8097b8:	3880008d 	sth	r2,2(r7)
  8097bc:	1013d43a 	srai	r9,r2,16
  8097c0:	39c00104 	addi	r7,r7,4
  8097c4:	337ff436 	bltu	r6,r13,809798 <__mdiff+0xcc>
  8097c8:	38bfff17 	ldw	r2,-4(r7)
  8097cc:	38ffff04 	addi	r3,r7,-4
  8097d0:	1000041e 	bne	r2,zero,8097e4 <__mdiff+0x118>
  8097d4:	18ffff04 	addi	r3,r3,-4
  8097d8:	18800017 	ldw	r2,0(r3)
  8097dc:	52bfffc4 	addi	r10,r10,-1
  8097e0:	103ffc26 	beq	r2,zero,8097d4 <__mdiff+0x108>
  8097e4:	6005883a 	mov	r2,r12
  8097e8:	62800415 	stw	r10,16(r12)
  8097ec:	dfc00417 	ldw	ra,16(sp)
  8097f0:	dcc00317 	ldw	r19,12(sp)
  8097f4:	dc800217 	ldw	r18,8(sp)
  8097f8:	dc400117 	ldw	r17,4(sp)
  8097fc:	dc000017 	ldw	r16,0(sp)
  809800:	dec00504 	addi	sp,sp,20
  809804:	f800283a 	ret
  809808:	9009883a 	mov	r4,r18
  80980c:	000b883a 	mov	r5,zero
  809810:	08094940 	call	809494 <_Balloc>
  809814:	1019883a 	mov	r12,r2
  809818:	00800044 	movi	r2,1
  80981c:	60800415 	stw	r2,16(r12)
  809820:	6005883a 	mov	r2,r12
  809824:	60000515 	stw	zero,20(r12)
  809828:	dfc00417 	ldw	ra,16(sp)
  80982c:	dcc00317 	ldw	r19,12(sp)
  809830:	dc800217 	ldw	r18,8(sp)
  809834:	dc400117 	ldw	r17,4(sp)
  809838:	dc000017 	ldw	r16,0(sp)
  80983c:	dec00504 	addi	sp,sp,20
  809840:	f800283a 	ret
  809844:	880d883a 	mov	r6,r17
  809848:	04c00044 	movi	r19,1
  80984c:	8023883a 	mov	r17,r16
  809850:	3021883a 	mov	r16,r6
  809854:	003fac06 	br	809708 <__mdiff+0x3c>

00809858 <__lshift>:
  809858:	defff904 	addi	sp,sp,-28
  80985c:	28800417 	ldw	r2,16(r5)
  809860:	dc000015 	stw	r16,0(sp)
  809864:	3021d17a 	srai	r16,r6,5
  809868:	28c00217 	ldw	r3,8(r5)
  80986c:	10800044 	addi	r2,r2,1
  809870:	dc400115 	stw	r17,4(sp)
  809874:	80a3883a 	add	r17,r16,r2
  809878:	dd400515 	stw	r21,20(sp)
  80987c:	dd000415 	stw	r20,16(sp)
  809880:	dc800215 	stw	r18,8(sp)
  809884:	dfc00615 	stw	ra,24(sp)
  809888:	2825883a 	mov	r18,r5
  80988c:	dcc00315 	stw	r19,12(sp)
  809890:	3029883a 	mov	r20,r6
  809894:	202b883a 	mov	r21,r4
  809898:	29400117 	ldw	r5,4(r5)
  80989c:	1c40030e 	bge	r3,r17,8098ac <__lshift+0x54>
  8098a0:	18c7883a 	add	r3,r3,r3
  8098a4:	29400044 	addi	r5,r5,1
  8098a8:	1c7ffd16 	blt	r3,r17,8098a0 <__lshift+0x48>
  8098ac:	a809883a 	mov	r4,r21
  8098b0:	08094940 	call	809494 <_Balloc>
  8098b4:	1027883a 	mov	r19,r2
  8098b8:	11400504 	addi	r5,r2,20
  8098bc:	0400090e 	bge	zero,r16,8098e4 <__lshift+0x8c>
  8098c0:	2805883a 	mov	r2,r5
  8098c4:	0007883a 	mov	r3,zero
  8098c8:	18c00044 	addi	r3,r3,1
  8098cc:	10000015 	stw	zero,0(r2)
  8098d0:	10800104 	addi	r2,r2,4
  8098d4:	80fffc1e 	bne	r16,r3,8098c8 <__lshift+0x70>
  8098d8:	8405883a 	add	r2,r16,r16
  8098dc:	1085883a 	add	r2,r2,r2
  8098e0:	288b883a 	add	r5,r5,r2
  8098e4:	90800417 	ldw	r2,16(r18)
  8098e8:	91000504 	addi	r4,r18,20
  8098ec:	a18007cc 	andi	r6,r20,31
  8098f0:	1085883a 	add	r2,r2,r2
  8098f4:	1085883a 	add	r2,r2,r2
  8098f8:	208f883a 	add	r7,r4,r2
  8098fc:	30001e26 	beq	r6,zero,809978 <__lshift+0x120>
  809900:	00800804 	movi	r2,32
  809904:	1191c83a 	sub	r8,r2,r6
  809908:	0007883a 	mov	r3,zero
  80990c:	20800017 	ldw	r2,0(r4)
  809910:	1184983a 	sll	r2,r2,r6
  809914:	1884b03a 	or	r2,r3,r2
  809918:	28800015 	stw	r2,0(r5)
  80991c:	20c00017 	ldw	r3,0(r4)
  809920:	21000104 	addi	r4,r4,4
  809924:	29400104 	addi	r5,r5,4
  809928:	1a06d83a 	srl	r3,r3,r8
  80992c:	21fff736 	bltu	r4,r7,80990c <__lshift+0xb4>
  809930:	28c00015 	stw	r3,0(r5)
  809934:	18000126 	beq	r3,zero,80993c <__lshift+0xe4>
  809938:	8c400044 	addi	r17,r17,1
  80993c:	88bfffc4 	addi	r2,r17,-1
  809940:	98800415 	stw	r2,16(r19)
  809944:	a809883a 	mov	r4,r21
  809948:	900b883a 	mov	r5,r18
  80994c:	0808f140 	call	808f14 <_Bfree>
  809950:	9805883a 	mov	r2,r19
  809954:	dfc00617 	ldw	ra,24(sp)
  809958:	dd400517 	ldw	r21,20(sp)
  80995c:	dd000417 	ldw	r20,16(sp)
  809960:	dcc00317 	ldw	r19,12(sp)
  809964:	dc800217 	ldw	r18,8(sp)
  809968:	dc400117 	ldw	r17,4(sp)
  80996c:	dc000017 	ldw	r16,0(sp)
  809970:	dec00704 	addi	sp,sp,28
  809974:	f800283a 	ret
  809978:	20800017 	ldw	r2,0(r4)
  80997c:	21000104 	addi	r4,r4,4
  809980:	28800015 	stw	r2,0(r5)
  809984:	29400104 	addi	r5,r5,4
  809988:	21ffec2e 	bgeu	r4,r7,80993c <__lshift+0xe4>
  80998c:	20800017 	ldw	r2,0(r4)
  809990:	21000104 	addi	r4,r4,4
  809994:	28800015 	stw	r2,0(r5)
  809998:	29400104 	addi	r5,r5,4
  80999c:	21fff636 	bltu	r4,r7,809978 <__lshift+0x120>
  8099a0:	003fe606 	br	80993c <__lshift+0xe4>

008099a4 <__multiply>:
  8099a4:	defff904 	addi	sp,sp,-28
  8099a8:	dcc00315 	stw	r19,12(sp)
  8099ac:	dc800215 	stw	r18,8(sp)
  8099b0:	2cc00417 	ldw	r19,16(r5)
  8099b4:	34800417 	ldw	r18,16(r6)
  8099b8:	dd000415 	stw	r20,16(sp)
  8099bc:	dc400115 	stw	r17,4(sp)
  8099c0:	dfc00615 	stw	ra,24(sp)
  8099c4:	dd400515 	stw	r21,20(sp)
  8099c8:	dc000015 	stw	r16,0(sp)
  8099cc:	2823883a 	mov	r17,r5
  8099d0:	3029883a 	mov	r20,r6
  8099d4:	9c80040e 	bge	r19,r18,8099e8 <__multiply+0x44>
  8099d8:	9027883a 	mov	r19,r18
  8099dc:	2c800417 	ldw	r18,16(r5)
  8099e0:	2829883a 	mov	r20,r5
  8099e4:	3023883a 	mov	r17,r6
  8099e8:	88800217 	ldw	r2,8(r17)
  8099ec:	9ca1883a 	add	r16,r19,r18
  8099f0:	89400117 	ldw	r5,4(r17)
  8099f4:	1400010e 	bge	r2,r16,8099fc <__multiply+0x58>
  8099f8:	29400044 	addi	r5,r5,1
  8099fc:	08094940 	call	809494 <_Balloc>
  809a00:	102b883a 	mov	r21,r2
  809a04:	8405883a 	add	r2,r16,r16
  809a08:	1085883a 	add	r2,r2,r2
  809a0c:	a9000504 	addi	r4,r21,20
  809a10:	209d883a 	add	r14,r4,r2
  809a14:	2380042e 	bgeu	r4,r14,809a28 <__multiply+0x84>
  809a18:	2005883a 	mov	r2,r4
  809a1c:	10000015 	stw	zero,0(r2)
  809a20:	10800104 	addi	r2,r2,4
  809a24:	13bffd36 	bltu	r2,r14,809a1c <__multiply+0x78>
  809a28:	9485883a 	add	r2,r18,r18
  809a2c:	9cc7883a 	add	r3,r19,r19
  809a30:	a1800504 	addi	r6,r20,20
  809a34:	1085883a 	add	r2,r2,r2
  809a38:	8b400504 	addi	r13,r17,20
  809a3c:	18c7883a 	add	r3,r3,r3
  809a40:	309f883a 	add	r15,r6,r2
  809a44:	68d7883a 	add	r11,r13,r3
  809a48:	33c03b2e 	bgeu	r6,r15,809b38 <__multiply+0x194>
  809a4c:	2019883a 	mov	r12,r4
  809a50:	30800017 	ldw	r2,0(r6)
  809a54:	127fffcc 	andi	r9,r2,65535
  809a58:	48001826 	beq	r9,zero,809abc <__multiply+0x118>
  809a5c:	6811883a 	mov	r8,r13
  809a60:	600f883a 	mov	r7,r12
  809a64:	0015883a 	mov	r10,zero
  809a68:	40c00017 	ldw	r3,0(r8)
  809a6c:	39400017 	ldw	r5,0(r7)
  809a70:	42000104 	addi	r8,r8,4
  809a74:	193fffcc 	andi	r4,r3,65535
  809a78:	4909383a 	mul	r4,r9,r4
  809a7c:	1806d43a 	srli	r3,r3,16
  809a80:	28bfffcc 	andi	r2,r5,65535
  809a84:	5085883a 	add	r2,r10,r2
  809a88:	2089883a 	add	r4,r4,r2
  809a8c:	48c7383a 	mul	r3,r9,r3
  809a90:	280ad43a 	srli	r5,r5,16
  809a94:	2004d43a 	srli	r2,r4,16
  809a98:	3900000d 	sth	r4,0(r7)
  809a9c:	1947883a 	add	r3,r3,r5
  809aa0:	10c5883a 	add	r2,r2,r3
  809aa4:	3880008d 	sth	r2,2(r7)
  809aa8:	1014d43a 	srli	r10,r2,16
  809aac:	39c00104 	addi	r7,r7,4
  809ab0:	42ffed36 	bltu	r8,r11,809a68 <__multiply+0xc4>
  809ab4:	3a800015 	stw	r10,0(r7)
  809ab8:	30800017 	ldw	r2,0(r6)
  809abc:	1012d43a 	srli	r9,r2,16
  809ac0:	48001926 	beq	r9,zero,809b28 <__multiply+0x184>
  809ac4:	60800017 	ldw	r2,0(r12)
  809ac8:	6811883a 	mov	r8,r13
  809acc:	600f883a 	mov	r7,r12
  809ad0:	0015883a 	mov	r10,zero
  809ad4:	100b883a 	mov	r5,r2
  809ad8:	41000017 	ldw	r4,0(r8)
  809adc:	2806d43a 	srli	r3,r5,16
  809ae0:	3880000d 	sth	r2,0(r7)
  809ae4:	20bfffcc 	andi	r2,r4,65535
  809ae8:	4885383a 	mul	r2,r9,r2
  809aec:	50c7883a 	add	r3,r10,r3
  809af0:	2008d43a 	srli	r4,r4,16
  809af4:	10c5883a 	add	r2,r2,r3
  809af8:	3880008d 	sth	r2,2(r7)
  809afc:	39c00104 	addi	r7,r7,4
  809b00:	39400017 	ldw	r5,0(r7)
  809b04:	4909383a 	mul	r4,r9,r4
  809b08:	1004d43a 	srli	r2,r2,16
  809b0c:	28ffffcc 	andi	r3,r5,65535
  809b10:	20c9883a 	add	r4,r4,r3
  809b14:	1105883a 	add	r2,r2,r4
  809b18:	42000104 	addi	r8,r8,4
  809b1c:	1014d43a 	srli	r10,r2,16
  809b20:	42ffed36 	bltu	r8,r11,809ad8 <__multiply+0x134>
  809b24:	38800015 	stw	r2,0(r7)
  809b28:	31800104 	addi	r6,r6,4
  809b2c:	33c0022e 	bgeu	r6,r15,809b38 <__multiply+0x194>
  809b30:	63000104 	addi	r12,r12,4
  809b34:	003fc606 	br	809a50 <__multiply+0xac>
  809b38:	0400090e 	bge	zero,r16,809b60 <__multiply+0x1bc>
  809b3c:	70bfff17 	ldw	r2,-4(r14)
  809b40:	70ffff04 	addi	r3,r14,-4
  809b44:	10000326 	beq	r2,zero,809b54 <__multiply+0x1b0>
  809b48:	00000506 	br	809b60 <__multiply+0x1bc>
  809b4c:	18800017 	ldw	r2,0(r3)
  809b50:	1000031e 	bne	r2,zero,809b60 <__multiply+0x1bc>
  809b54:	843fffc4 	addi	r16,r16,-1
  809b58:	18ffff04 	addi	r3,r3,-4
  809b5c:	803ffb1e 	bne	r16,zero,809b4c <__multiply+0x1a8>
  809b60:	a805883a 	mov	r2,r21
  809b64:	ac000415 	stw	r16,16(r21)
  809b68:	dfc00617 	ldw	ra,24(sp)
  809b6c:	dd400517 	ldw	r21,20(sp)
  809b70:	dd000417 	ldw	r20,16(sp)
  809b74:	dcc00317 	ldw	r19,12(sp)
  809b78:	dc800217 	ldw	r18,8(sp)
  809b7c:	dc400117 	ldw	r17,4(sp)
  809b80:	dc000017 	ldw	r16,0(sp)
  809b84:	dec00704 	addi	sp,sp,28
  809b88:	f800283a 	ret

00809b8c <__i2b>:
  809b8c:	defffd04 	addi	sp,sp,-12
  809b90:	dc000015 	stw	r16,0(sp)
  809b94:	04000044 	movi	r16,1
  809b98:	dc800115 	stw	r18,4(sp)
  809b9c:	2825883a 	mov	r18,r5
  809ba0:	800b883a 	mov	r5,r16
  809ba4:	dfc00215 	stw	ra,8(sp)
  809ba8:	08094940 	call	809494 <_Balloc>
  809bac:	14000415 	stw	r16,16(r2)
  809bb0:	14800515 	stw	r18,20(r2)
  809bb4:	dfc00217 	ldw	ra,8(sp)
  809bb8:	dc800117 	ldw	r18,4(sp)
  809bbc:	dc000017 	ldw	r16,0(sp)
  809bc0:	dec00304 	addi	sp,sp,12
  809bc4:	f800283a 	ret

00809bc8 <__multadd>:
  809bc8:	defffa04 	addi	sp,sp,-24
  809bcc:	dc800215 	stw	r18,8(sp)
  809bd0:	2c800417 	ldw	r18,16(r5)
  809bd4:	dd000415 	stw	r20,16(sp)
  809bd8:	dcc00315 	stw	r19,12(sp)
  809bdc:	dc000015 	stw	r16,0(sp)
  809be0:	dfc00515 	stw	ra,20(sp)
  809be4:	3821883a 	mov	r16,r7
  809be8:	dc400115 	stw	r17,4(sp)
  809bec:	2827883a 	mov	r19,r5
  809bf0:	2029883a 	mov	r20,r4
  809bf4:	2a000504 	addi	r8,r5,20
  809bf8:	000f883a 	mov	r7,zero
  809bfc:	40800017 	ldw	r2,0(r8)
  809c00:	39c00044 	addi	r7,r7,1
  809c04:	10ffffcc 	andi	r3,r2,65535
  809c08:	1987383a 	mul	r3,r3,r6
  809c0c:	1004d43a 	srli	r2,r2,16
  809c10:	1c07883a 	add	r3,r3,r16
  809c14:	180ad43a 	srli	r5,r3,16
  809c18:	1185383a 	mul	r2,r2,r6
  809c1c:	18ffffcc 	andi	r3,r3,65535
  809c20:	1145883a 	add	r2,r2,r5
  809c24:	1008943a 	slli	r4,r2,16
  809c28:	1020d43a 	srli	r16,r2,16
  809c2c:	20c9883a 	add	r4,r4,r3
  809c30:	41000015 	stw	r4,0(r8)
  809c34:	42000104 	addi	r8,r8,4
  809c38:	3cbff016 	blt	r7,r18,809bfc <__multadd+0x34>
  809c3c:	80000826 	beq	r16,zero,809c60 <__multadd+0x98>
  809c40:	98800217 	ldw	r2,8(r19)
  809c44:	90800f0e 	bge	r18,r2,809c84 <__multadd+0xbc>
  809c48:	9485883a 	add	r2,r18,r18
  809c4c:	1085883a 	add	r2,r2,r2
  809c50:	14c5883a 	add	r2,r2,r19
  809c54:	90c00044 	addi	r3,r18,1
  809c58:	14000515 	stw	r16,20(r2)
  809c5c:	98c00415 	stw	r3,16(r19)
  809c60:	9805883a 	mov	r2,r19
  809c64:	dfc00517 	ldw	ra,20(sp)
  809c68:	dd000417 	ldw	r20,16(sp)
  809c6c:	dcc00317 	ldw	r19,12(sp)
  809c70:	dc800217 	ldw	r18,8(sp)
  809c74:	dc400117 	ldw	r17,4(sp)
  809c78:	dc000017 	ldw	r16,0(sp)
  809c7c:	dec00604 	addi	sp,sp,24
  809c80:	f800283a 	ret
  809c84:	99400117 	ldw	r5,4(r19)
  809c88:	a009883a 	mov	r4,r20
  809c8c:	29400044 	addi	r5,r5,1
  809c90:	08094940 	call	809494 <_Balloc>
  809c94:	99800417 	ldw	r6,16(r19)
  809c98:	99400304 	addi	r5,r19,12
  809c9c:	11000304 	addi	r4,r2,12
  809ca0:	318d883a 	add	r6,r6,r6
  809ca4:	318d883a 	add	r6,r6,r6
  809ca8:	31800204 	addi	r6,r6,8
  809cac:	1023883a 	mov	r17,r2
  809cb0:	0808d940 	call	808d94 <memcpy>
  809cb4:	980b883a 	mov	r5,r19
  809cb8:	a009883a 	mov	r4,r20
  809cbc:	0808f140 	call	808f14 <_Bfree>
  809cc0:	8827883a 	mov	r19,r17
  809cc4:	003fe006 	br	809c48 <__multadd+0x80>

00809cc8 <__pow5mult>:
  809cc8:	defffa04 	addi	sp,sp,-24
  809ccc:	308000cc 	andi	r2,r6,3
  809cd0:	dd000415 	stw	r20,16(sp)
  809cd4:	dcc00315 	stw	r19,12(sp)
  809cd8:	dc000015 	stw	r16,0(sp)
  809cdc:	dfc00515 	stw	ra,20(sp)
  809ce0:	dc800215 	stw	r18,8(sp)
  809ce4:	dc400115 	stw	r17,4(sp)
  809ce8:	3021883a 	mov	r16,r6
  809cec:	2027883a 	mov	r19,r4
  809cf0:	2829883a 	mov	r20,r5
  809cf4:	10002b1e 	bne	r2,zero,809da4 <__pow5mult+0xdc>
  809cf8:	8025d0ba 	srai	r18,r16,2
  809cfc:	90001b26 	beq	r18,zero,809d6c <__pow5mult+0xa4>
  809d00:	9c001217 	ldw	r16,72(r19)
  809d04:	8000081e 	bne	r16,zero,809d28 <__pow5mult+0x60>
  809d08:	00003006 	br	809dcc <__pow5mult+0x104>
  809d0c:	800b883a 	mov	r5,r16
  809d10:	800d883a 	mov	r6,r16
  809d14:	9809883a 	mov	r4,r19
  809d18:	90001426 	beq	r18,zero,809d6c <__pow5mult+0xa4>
  809d1c:	80800017 	ldw	r2,0(r16)
  809d20:	10001b26 	beq	r2,zero,809d90 <__pow5mult+0xc8>
  809d24:	1021883a 	mov	r16,r2
  809d28:	9080004c 	andi	r2,r18,1
  809d2c:	1005003a 	cmpeq	r2,r2,zero
  809d30:	9025d07a 	srai	r18,r18,1
  809d34:	800d883a 	mov	r6,r16
  809d38:	9809883a 	mov	r4,r19
  809d3c:	a00b883a 	mov	r5,r20
  809d40:	103ff21e 	bne	r2,zero,809d0c <__pow5mult+0x44>
  809d44:	08099a40 	call	8099a4 <__multiply>
  809d48:	a00b883a 	mov	r5,r20
  809d4c:	9809883a 	mov	r4,r19
  809d50:	1023883a 	mov	r17,r2
  809d54:	0808f140 	call	808f14 <_Bfree>
  809d58:	8829883a 	mov	r20,r17
  809d5c:	800b883a 	mov	r5,r16
  809d60:	800d883a 	mov	r6,r16
  809d64:	9809883a 	mov	r4,r19
  809d68:	903fec1e 	bne	r18,zero,809d1c <__pow5mult+0x54>
  809d6c:	a005883a 	mov	r2,r20
  809d70:	dfc00517 	ldw	ra,20(sp)
  809d74:	dd000417 	ldw	r20,16(sp)
  809d78:	dcc00317 	ldw	r19,12(sp)
  809d7c:	dc800217 	ldw	r18,8(sp)
  809d80:	dc400117 	ldw	r17,4(sp)
  809d84:	dc000017 	ldw	r16,0(sp)
  809d88:	dec00604 	addi	sp,sp,24
  809d8c:	f800283a 	ret
  809d90:	08099a40 	call	8099a4 <__multiply>
  809d94:	80800015 	stw	r2,0(r16)
  809d98:	1021883a 	mov	r16,r2
  809d9c:	10000015 	stw	zero,0(r2)
  809da0:	003fe106 	br	809d28 <__pow5mult+0x60>
  809da4:	1085883a 	add	r2,r2,r2
  809da8:	00c02074 	movhi	r3,129
  809dac:	18c44104 	addi	r3,r3,4356
  809db0:	1085883a 	add	r2,r2,r2
  809db4:	10c5883a 	add	r2,r2,r3
  809db8:	11bfff17 	ldw	r6,-4(r2)
  809dbc:	000f883a 	mov	r7,zero
  809dc0:	0809bc80 	call	809bc8 <__multadd>
  809dc4:	1029883a 	mov	r20,r2
  809dc8:	003fcb06 	br	809cf8 <__pow5mult+0x30>
  809dcc:	9809883a 	mov	r4,r19
  809dd0:	01409c44 	movi	r5,625
  809dd4:	0809b8c0 	call	809b8c <__i2b>
  809dd8:	98801215 	stw	r2,72(r19)
  809ddc:	1021883a 	mov	r16,r2
  809de0:	10000015 	stw	zero,0(r2)
  809de4:	003fd006 	br	809d28 <__pow5mult+0x60>

00809de8 <__s2b>:
  809de8:	defff904 	addi	sp,sp,-28
  809dec:	dcc00315 	stw	r19,12(sp)
  809df0:	dc800215 	stw	r18,8(sp)
  809df4:	2827883a 	mov	r19,r5
  809df8:	2025883a 	mov	r18,r4
  809dfc:	01400244 	movi	r5,9
  809e00:	39000204 	addi	r4,r7,8
  809e04:	dd000415 	stw	r20,16(sp)
  809e08:	dc400115 	stw	r17,4(sp)
  809e0c:	dfc00615 	stw	ra,24(sp)
  809e10:	dd400515 	stw	r21,20(sp)
  809e14:	dc000015 	stw	r16,0(sp)
  809e18:	3829883a 	mov	r20,r7
  809e1c:	3023883a 	mov	r17,r6
  809e20:	080c93c0 	call	80c93c <__divsi3>
  809e24:	00c00044 	movi	r3,1
  809e28:	1880350e 	bge	r3,r2,809f00 <__s2b+0x118>
  809e2c:	000b883a 	mov	r5,zero
  809e30:	18c7883a 	add	r3,r3,r3
  809e34:	29400044 	addi	r5,r5,1
  809e38:	18bffd16 	blt	r3,r2,809e30 <__s2b+0x48>
  809e3c:	9009883a 	mov	r4,r18
  809e40:	08094940 	call	809494 <_Balloc>
  809e44:	1011883a 	mov	r8,r2
  809e48:	d8800717 	ldw	r2,28(sp)
  809e4c:	00c00044 	movi	r3,1
  809e50:	01800244 	movi	r6,9
  809e54:	40800515 	stw	r2,20(r8)
  809e58:	40c00415 	stw	r3,16(r8)
  809e5c:	3440260e 	bge	r6,r17,809ef8 <__s2b+0x110>
  809e60:	3021883a 	mov	r16,r6
  809e64:	99ab883a 	add	r21,r19,r6
  809e68:	9c05883a 	add	r2,r19,r16
  809e6c:	11c00007 	ldb	r7,0(r2)
  809e70:	400b883a 	mov	r5,r8
  809e74:	9009883a 	mov	r4,r18
  809e78:	39fff404 	addi	r7,r7,-48
  809e7c:	01800284 	movi	r6,10
  809e80:	0809bc80 	call	809bc8 <__multadd>
  809e84:	84000044 	addi	r16,r16,1
  809e88:	1011883a 	mov	r8,r2
  809e8c:	8c3ff61e 	bne	r17,r16,809e68 <__s2b+0x80>
  809e90:	ac45883a 	add	r2,r21,r17
  809e94:	117ffe04 	addi	r5,r2,-8
  809e98:	880d883a 	mov	r6,r17
  809e9c:	35000c0e 	bge	r6,r20,809ed0 <__s2b+0xe8>
  809ea0:	a185c83a 	sub	r2,r20,r6
  809ea4:	2821883a 	mov	r16,r5
  809ea8:	28a3883a 	add	r17,r5,r2
  809eac:	81c00007 	ldb	r7,0(r16)
  809eb0:	400b883a 	mov	r5,r8
  809eb4:	9009883a 	mov	r4,r18
  809eb8:	39fff404 	addi	r7,r7,-48
  809ebc:	01800284 	movi	r6,10
  809ec0:	0809bc80 	call	809bc8 <__multadd>
  809ec4:	84000044 	addi	r16,r16,1
  809ec8:	1011883a 	mov	r8,r2
  809ecc:	847ff71e 	bne	r16,r17,809eac <__s2b+0xc4>
  809ed0:	4005883a 	mov	r2,r8
  809ed4:	dfc00617 	ldw	ra,24(sp)
  809ed8:	dd400517 	ldw	r21,20(sp)
  809edc:	dd000417 	ldw	r20,16(sp)
  809ee0:	dcc00317 	ldw	r19,12(sp)
  809ee4:	dc800217 	ldw	r18,8(sp)
  809ee8:	dc400117 	ldw	r17,4(sp)
  809eec:	dc000017 	ldw	r16,0(sp)
  809ef0:	dec00704 	addi	sp,sp,28
  809ef4:	f800283a 	ret
  809ef8:	99400284 	addi	r5,r19,10
  809efc:	003fe706 	br	809e9c <__s2b+0xb4>
  809f00:	000b883a 	mov	r5,zero
  809f04:	003fcd06 	br	809e3c <__s2b+0x54>

00809f08 <_realloc_r>:
  809f08:	defff404 	addi	sp,sp,-48
  809f0c:	dd800815 	stw	r22,32(sp)
  809f10:	dc800415 	stw	r18,16(sp)
  809f14:	dc400315 	stw	r17,12(sp)
  809f18:	dfc00b15 	stw	ra,44(sp)
  809f1c:	df000a15 	stw	fp,40(sp)
  809f20:	ddc00915 	stw	r23,36(sp)
  809f24:	dd400715 	stw	r21,28(sp)
  809f28:	dd000615 	stw	r20,24(sp)
  809f2c:	dcc00515 	stw	r19,20(sp)
  809f30:	dc000215 	stw	r16,8(sp)
  809f34:	2825883a 	mov	r18,r5
  809f38:	3023883a 	mov	r17,r6
  809f3c:	202d883a 	mov	r22,r4
  809f40:	2800c926 	beq	r5,zero,80a268 <_realloc_r+0x360>
  809f44:	080da9c0 	call	80da9c <__malloc_lock>
  809f48:	943ffe04 	addi	r16,r18,-8
  809f4c:	88c002c4 	addi	r3,r17,11
  809f50:	00800584 	movi	r2,22
  809f54:	82000117 	ldw	r8,4(r16)
  809f58:	10c01b2e 	bgeu	r2,r3,809fc8 <_realloc_r+0xc0>
  809f5c:	00bffe04 	movi	r2,-8
  809f60:	188e703a 	and	r7,r3,r2
  809f64:	3839883a 	mov	fp,r7
  809f68:	38001a16 	blt	r7,zero,809fd4 <_realloc_r+0xcc>
  809f6c:	e4401936 	bltu	fp,r17,809fd4 <_realloc_r+0xcc>
  809f70:	013fff04 	movi	r4,-4
  809f74:	4126703a 	and	r19,r8,r4
  809f78:	99c02616 	blt	r19,r7,80a014 <_realloc_r+0x10c>
  809f7c:	802b883a 	mov	r21,r16
  809f80:	9829883a 	mov	r20,r19
  809f84:	84000204 	addi	r16,r16,8
  809f88:	a80f883a 	mov	r7,r21
  809f8c:	a70dc83a 	sub	r6,r20,fp
  809f90:	008003c4 	movi	r2,15
  809f94:	1180c136 	bltu	r2,r6,80a29c <_realloc_r+0x394>
  809f98:	38800117 	ldw	r2,4(r7)
  809f9c:	a549883a 	add	r4,r20,r21
  809fa0:	1080004c 	andi	r2,r2,1
  809fa4:	a084b03a 	or	r2,r20,r2
  809fa8:	38800115 	stw	r2,4(r7)
  809fac:	20c00117 	ldw	r3,4(r4)
  809fb0:	18c00054 	ori	r3,r3,1
  809fb4:	20c00115 	stw	r3,4(r4)
  809fb8:	b009883a 	mov	r4,r22
  809fbc:	080dabc0 	call	80dabc <__malloc_unlock>
  809fc0:	8023883a 	mov	r17,r16
  809fc4:	00000606 	br	809fe0 <_realloc_r+0xd8>
  809fc8:	01c00404 	movi	r7,16
  809fcc:	3839883a 	mov	fp,r7
  809fd0:	e47fe72e 	bgeu	fp,r17,809f70 <_realloc_r+0x68>
  809fd4:	00800304 	movi	r2,12
  809fd8:	0023883a 	mov	r17,zero
  809fdc:	b0800015 	stw	r2,0(r22)
  809fe0:	8805883a 	mov	r2,r17
  809fe4:	dfc00b17 	ldw	ra,44(sp)
  809fe8:	df000a17 	ldw	fp,40(sp)
  809fec:	ddc00917 	ldw	r23,36(sp)
  809ff0:	dd800817 	ldw	r22,32(sp)
  809ff4:	dd400717 	ldw	r21,28(sp)
  809ff8:	dd000617 	ldw	r20,24(sp)
  809ffc:	dcc00517 	ldw	r19,20(sp)
  80a000:	dc800417 	ldw	r18,16(sp)
  80a004:	dc400317 	ldw	r17,12(sp)
  80a008:	dc000217 	ldw	r16,8(sp)
  80a00c:	dec00c04 	addi	sp,sp,48
  80a010:	f800283a 	ret
  80a014:	00802074 	movhi	r2,129
  80a018:	10849704 	addi	r2,r2,4700
  80a01c:	12400217 	ldw	r9,8(r2)
  80a020:	84cd883a 	add	r6,r16,r19
  80a024:	802b883a 	mov	r21,r16
  80a028:	3240b926 	beq	r6,r9,80a310 <_realloc_r+0x408>
  80a02c:	31400117 	ldw	r5,4(r6)
  80a030:	00bfff84 	movi	r2,-2
  80a034:	2884703a 	and	r2,r5,r2
  80a038:	1185883a 	add	r2,r2,r6
  80a03c:	10c00117 	ldw	r3,4(r2)
  80a040:	18c0004c 	andi	r3,r3,1
  80a044:	1807003a 	cmpeq	r3,r3,zero
  80a048:	1800a326 	beq	r3,zero,80a2d8 <_realloc_r+0x3d0>
  80a04c:	2908703a 	and	r4,r5,r4
  80a050:	9929883a 	add	r20,r19,r4
  80a054:	a1c0a30e 	bge	r20,r7,80a2e4 <_realloc_r+0x3dc>
  80a058:	4080004c 	andi	r2,r8,1
  80a05c:	1000551e 	bne	r2,zero,80a1b4 <_realloc_r+0x2ac>
  80a060:	80800017 	ldw	r2,0(r16)
  80a064:	80afc83a 	sub	r23,r16,r2
  80a068:	b8c00117 	ldw	r3,4(r23)
  80a06c:	00bfff04 	movi	r2,-4
  80a070:	1884703a 	and	r2,r3,r2
  80a074:	30002e26 	beq	r6,zero,80a130 <_realloc_r+0x228>
  80a078:	3240b926 	beq	r6,r9,80a360 <_realloc_r+0x458>
  80a07c:	98a9883a 	add	r20,r19,r2
  80a080:	2509883a 	add	r4,r4,r20
  80a084:	d9000015 	stw	r4,0(sp)
  80a088:	21c02a16 	blt	r4,r7,80a134 <_realloc_r+0x22c>
  80a08c:	30800317 	ldw	r2,12(r6)
  80a090:	30c00217 	ldw	r3,8(r6)
  80a094:	01400904 	movi	r5,36
  80a098:	99bfff04 	addi	r6,r19,-4
  80a09c:	18800315 	stw	r2,12(r3)
  80a0a0:	10c00215 	stw	r3,8(r2)
  80a0a4:	b9000317 	ldw	r4,12(r23)
  80a0a8:	b8800217 	ldw	r2,8(r23)
  80a0ac:	b82b883a 	mov	r21,r23
  80a0b0:	bc000204 	addi	r16,r23,8
  80a0b4:	20800215 	stw	r2,8(r4)
  80a0b8:	11000315 	stw	r4,12(r2)
  80a0bc:	2980e436 	bltu	r5,r6,80a450 <_realloc_r+0x548>
  80a0c0:	008004c4 	movi	r2,19
  80a0c4:	9009883a 	mov	r4,r18
  80a0c8:	8011883a 	mov	r8,r16
  80a0cc:	11800f2e 	bgeu	r2,r6,80a10c <_realloc_r+0x204>
  80a0d0:	90800017 	ldw	r2,0(r18)
  80a0d4:	ba000404 	addi	r8,r23,16
  80a0d8:	91000204 	addi	r4,r18,8
  80a0dc:	b8800215 	stw	r2,8(r23)
  80a0e0:	90c00117 	ldw	r3,4(r18)
  80a0e4:	008006c4 	movi	r2,27
  80a0e8:	b8c00315 	stw	r3,12(r23)
  80a0ec:	1180072e 	bgeu	r2,r6,80a10c <_realloc_r+0x204>
  80a0f0:	90c00217 	ldw	r3,8(r18)
  80a0f4:	ba000604 	addi	r8,r23,24
  80a0f8:	91000404 	addi	r4,r18,16
  80a0fc:	b8c00415 	stw	r3,16(r23)
  80a100:	90800317 	ldw	r2,12(r18)
  80a104:	b8800515 	stw	r2,20(r23)
  80a108:	3140e726 	beq	r6,r5,80a4a8 <_realloc_r+0x5a0>
  80a10c:	20800017 	ldw	r2,0(r4)
  80a110:	dd000017 	ldw	r20,0(sp)
  80a114:	b80f883a 	mov	r7,r23
  80a118:	40800015 	stw	r2,0(r8)
  80a11c:	20c00117 	ldw	r3,4(r4)
  80a120:	40c00115 	stw	r3,4(r8)
  80a124:	20800217 	ldw	r2,8(r4)
  80a128:	40800215 	stw	r2,8(r8)
  80a12c:	003f9706 	br	809f8c <_realloc_r+0x84>
  80a130:	98a9883a 	add	r20,r19,r2
  80a134:	a1c01f16 	blt	r20,r7,80a1b4 <_realloc_r+0x2ac>
  80a138:	b8c00317 	ldw	r3,12(r23)
  80a13c:	b8800217 	ldw	r2,8(r23)
  80a140:	99bfff04 	addi	r6,r19,-4
  80a144:	01400904 	movi	r5,36
  80a148:	b82b883a 	mov	r21,r23
  80a14c:	18800215 	stw	r2,8(r3)
  80a150:	10c00315 	stw	r3,12(r2)
  80a154:	bc000204 	addi	r16,r23,8
  80a158:	2980c336 	bltu	r5,r6,80a468 <_realloc_r+0x560>
  80a15c:	008004c4 	movi	r2,19
  80a160:	9009883a 	mov	r4,r18
  80a164:	8011883a 	mov	r8,r16
  80a168:	11800f2e 	bgeu	r2,r6,80a1a8 <_realloc_r+0x2a0>
  80a16c:	90800017 	ldw	r2,0(r18)
  80a170:	ba000404 	addi	r8,r23,16
  80a174:	91000204 	addi	r4,r18,8
  80a178:	b8800215 	stw	r2,8(r23)
  80a17c:	90c00117 	ldw	r3,4(r18)
  80a180:	008006c4 	movi	r2,27
  80a184:	b8c00315 	stw	r3,12(r23)
  80a188:	1180072e 	bgeu	r2,r6,80a1a8 <_realloc_r+0x2a0>
  80a18c:	90c00217 	ldw	r3,8(r18)
  80a190:	ba000604 	addi	r8,r23,24
  80a194:	91000404 	addi	r4,r18,16
  80a198:	b8c00415 	stw	r3,16(r23)
  80a19c:	90800317 	ldw	r2,12(r18)
  80a1a0:	b8800515 	stw	r2,20(r23)
  80a1a4:	3140c726 	beq	r6,r5,80a4c4 <_realloc_r+0x5bc>
  80a1a8:	20800017 	ldw	r2,0(r4)
  80a1ac:	b80f883a 	mov	r7,r23
  80a1b0:	003fd906 	br	80a118 <_realloc_r+0x210>
  80a1b4:	880b883a 	mov	r5,r17
  80a1b8:	b009883a 	mov	r4,r22
  80a1bc:	08035dc0 	call	8035dc <_malloc_r>
  80a1c0:	1023883a 	mov	r17,r2
  80a1c4:	10002526 	beq	r2,zero,80a25c <_realloc_r+0x354>
  80a1c8:	80800117 	ldw	r2,4(r16)
  80a1cc:	00ffff84 	movi	r3,-2
  80a1d0:	893ffe04 	addi	r4,r17,-8
  80a1d4:	10c4703a 	and	r2,r2,r3
  80a1d8:	8085883a 	add	r2,r16,r2
  80a1dc:	20809526 	beq	r4,r2,80a434 <_realloc_r+0x52c>
  80a1e0:	99bfff04 	addi	r6,r19,-4
  80a1e4:	01c00904 	movi	r7,36
  80a1e8:	39804536 	bltu	r7,r6,80a300 <_realloc_r+0x3f8>
  80a1ec:	008004c4 	movi	r2,19
  80a1f0:	9009883a 	mov	r4,r18
  80a1f4:	880b883a 	mov	r5,r17
  80a1f8:	11800f2e 	bgeu	r2,r6,80a238 <_realloc_r+0x330>
  80a1fc:	90800017 	ldw	r2,0(r18)
  80a200:	89400204 	addi	r5,r17,8
  80a204:	91000204 	addi	r4,r18,8
  80a208:	88800015 	stw	r2,0(r17)
  80a20c:	90c00117 	ldw	r3,4(r18)
  80a210:	008006c4 	movi	r2,27
  80a214:	88c00115 	stw	r3,4(r17)
  80a218:	1180072e 	bgeu	r2,r6,80a238 <_realloc_r+0x330>
  80a21c:	90c00217 	ldw	r3,8(r18)
  80a220:	89400404 	addi	r5,r17,16
  80a224:	91000404 	addi	r4,r18,16
  80a228:	88c00215 	stw	r3,8(r17)
  80a22c:	90800317 	ldw	r2,12(r18)
  80a230:	88800315 	stw	r2,12(r17)
  80a234:	31c09126 	beq	r6,r7,80a47c <_realloc_r+0x574>
  80a238:	20800017 	ldw	r2,0(r4)
  80a23c:	28800015 	stw	r2,0(r5)
  80a240:	20c00117 	ldw	r3,4(r4)
  80a244:	28c00115 	stw	r3,4(r5)
  80a248:	20800217 	ldw	r2,8(r4)
  80a24c:	28800215 	stw	r2,8(r5)
  80a250:	900b883a 	mov	r5,r18
  80a254:	b009883a 	mov	r4,r22
  80a258:	08044080 	call	804408 <_free_r>
  80a25c:	b009883a 	mov	r4,r22
  80a260:	080dabc0 	call	80dabc <__malloc_unlock>
  80a264:	003f5e06 	br	809fe0 <_realloc_r+0xd8>
  80a268:	300b883a 	mov	r5,r6
  80a26c:	dfc00b17 	ldw	ra,44(sp)
  80a270:	df000a17 	ldw	fp,40(sp)
  80a274:	ddc00917 	ldw	r23,36(sp)
  80a278:	dd800817 	ldw	r22,32(sp)
  80a27c:	dd400717 	ldw	r21,28(sp)
  80a280:	dd000617 	ldw	r20,24(sp)
  80a284:	dcc00517 	ldw	r19,20(sp)
  80a288:	dc800417 	ldw	r18,16(sp)
  80a28c:	dc400317 	ldw	r17,12(sp)
  80a290:	dc000217 	ldw	r16,8(sp)
  80a294:	dec00c04 	addi	sp,sp,48
  80a298:	08035dc1 	jmpi	8035dc <_malloc_r>
  80a29c:	38800117 	ldw	r2,4(r7)
  80a2a0:	e54b883a 	add	r5,fp,r21
  80a2a4:	31000054 	ori	r4,r6,1
  80a2a8:	1080004c 	andi	r2,r2,1
  80a2ac:	1704b03a 	or	r2,r2,fp
  80a2b0:	38800115 	stw	r2,4(r7)
  80a2b4:	29000115 	stw	r4,4(r5)
  80a2b8:	2987883a 	add	r3,r5,r6
  80a2bc:	18800117 	ldw	r2,4(r3)
  80a2c0:	29400204 	addi	r5,r5,8
  80a2c4:	b009883a 	mov	r4,r22
  80a2c8:	10800054 	ori	r2,r2,1
  80a2cc:	18800115 	stw	r2,4(r3)
  80a2d0:	08044080 	call	804408 <_free_r>
  80a2d4:	003f3806 	br	809fb8 <_realloc_r+0xb0>
  80a2d8:	000d883a 	mov	r6,zero
  80a2dc:	0009883a 	mov	r4,zero
  80a2e0:	003f5d06 	br	80a058 <_realloc_r+0x150>
  80a2e4:	30c00217 	ldw	r3,8(r6)
  80a2e8:	30800317 	ldw	r2,12(r6)
  80a2ec:	800f883a 	mov	r7,r16
  80a2f0:	84000204 	addi	r16,r16,8
  80a2f4:	10c00215 	stw	r3,8(r2)
  80a2f8:	18800315 	stw	r2,12(r3)
  80a2fc:	003f2306 	br	809f8c <_realloc_r+0x84>
  80a300:	8809883a 	mov	r4,r17
  80a304:	900b883a 	mov	r5,r18
  80a308:	0808e340 	call	808e34 <memmove>
  80a30c:	003fd006 	br	80a250 <_realloc_r+0x348>
  80a310:	30800117 	ldw	r2,4(r6)
  80a314:	e0c00404 	addi	r3,fp,16
  80a318:	1108703a 	and	r4,r2,r4
  80a31c:	9905883a 	add	r2,r19,r4
  80a320:	10ff4d16 	blt	r2,r3,80a058 <_realloc_r+0x150>
  80a324:	1705c83a 	sub	r2,r2,fp
  80a328:	870b883a 	add	r5,r16,fp
  80a32c:	10800054 	ori	r2,r2,1
  80a330:	28800115 	stw	r2,4(r5)
  80a334:	80c00117 	ldw	r3,4(r16)
  80a338:	00802074 	movhi	r2,129
  80a33c:	10849704 	addi	r2,r2,4700
  80a340:	b009883a 	mov	r4,r22
  80a344:	18c0004c 	andi	r3,r3,1
  80a348:	e0c6b03a 	or	r3,fp,r3
  80a34c:	11400215 	stw	r5,8(r2)
  80a350:	80c00115 	stw	r3,4(r16)
  80a354:	080dabc0 	call	80dabc <__malloc_unlock>
  80a358:	84400204 	addi	r17,r16,8
  80a35c:	003f2006 	br	809fe0 <_realloc_r+0xd8>
  80a360:	98a9883a 	add	r20,r19,r2
  80a364:	2509883a 	add	r4,r4,r20
  80a368:	e0800404 	addi	r2,fp,16
  80a36c:	d9000115 	stw	r4,4(sp)
  80a370:	20bf7016 	blt	r4,r2,80a134 <_realloc_r+0x22c>
  80a374:	b8c00317 	ldw	r3,12(r23)
  80a378:	b8800217 	ldw	r2,8(r23)
  80a37c:	99bfff04 	addi	r6,r19,-4
  80a380:	01400904 	movi	r5,36
  80a384:	18800215 	stw	r2,8(r3)
  80a388:	10c00315 	stw	r3,12(r2)
  80a38c:	bc400204 	addi	r17,r23,8
  80a390:	29804136 	bltu	r5,r6,80a498 <_realloc_r+0x590>
  80a394:	008004c4 	movi	r2,19
  80a398:	9009883a 	mov	r4,r18
  80a39c:	880f883a 	mov	r7,r17
  80a3a0:	11800f2e 	bgeu	r2,r6,80a3e0 <_realloc_r+0x4d8>
  80a3a4:	90800017 	ldw	r2,0(r18)
  80a3a8:	b9c00404 	addi	r7,r23,16
  80a3ac:	91000204 	addi	r4,r18,8
  80a3b0:	b8800215 	stw	r2,8(r23)
  80a3b4:	90c00117 	ldw	r3,4(r18)
  80a3b8:	008006c4 	movi	r2,27
  80a3bc:	b8c00315 	stw	r3,12(r23)
  80a3c0:	1180072e 	bgeu	r2,r6,80a3e0 <_realloc_r+0x4d8>
  80a3c4:	90c00217 	ldw	r3,8(r18)
  80a3c8:	b9c00604 	addi	r7,r23,24
  80a3cc:	91000404 	addi	r4,r18,16
  80a3d0:	b8c00415 	stw	r3,16(r23)
  80a3d4:	90800317 	ldw	r2,12(r18)
  80a3d8:	b8800515 	stw	r2,20(r23)
  80a3dc:	31404026 	beq	r6,r5,80a4e0 <_realloc_r+0x5d8>
  80a3e0:	20800017 	ldw	r2,0(r4)
  80a3e4:	38800015 	stw	r2,0(r7)
  80a3e8:	20c00117 	ldw	r3,4(r4)
  80a3ec:	38c00115 	stw	r3,4(r7)
  80a3f0:	20800217 	ldw	r2,8(r4)
  80a3f4:	38800215 	stw	r2,8(r7)
  80a3f8:	d8c00117 	ldw	r3,4(sp)
  80a3fc:	bf0b883a 	add	r5,r23,fp
  80a400:	b009883a 	mov	r4,r22
  80a404:	1f05c83a 	sub	r2,r3,fp
  80a408:	10800054 	ori	r2,r2,1
  80a40c:	28800115 	stw	r2,4(r5)
  80a410:	b8c00117 	ldw	r3,4(r23)
  80a414:	00802074 	movhi	r2,129
  80a418:	10849704 	addi	r2,r2,4700
  80a41c:	11400215 	stw	r5,8(r2)
  80a420:	18c0004c 	andi	r3,r3,1
  80a424:	e0c6b03a 	or	r3,fp,r3
  80a428:	b8c00115 	stw	r3,4(r23)
  80a42c:	080dabc0 	call	80dabc <__malloc_unlock>
  80a430:	003eeb06 	br	809fe0 <_realloc_r+0xd8>
  80a434:	20800117 	ldw	r2,4(r4)
  80a438:	00ffff04 	movi	r3,-4
  80a43c:	800f883a 	mov	r7,r16
  80a440:	10c4703a 	and	r2,r2,r3
  80a444:	98a9883a 	add	r20,r19,r2
  80a448:	84000204 	addi	r16,r16,8
  80a44c:	003ecf06 	br	809f8c <_realloc_r+0x84>
  80a450:	900b883a 	mov	r5,r18
  80a454:	8009883a 	mov	r4,r16
  80a458:	0808e340 	call	808e34 <memmove>
  80a45c:	dd000017 	ldw	r20,0(sp)
  80a460:	b80f883a 	mov	r7,r23
  80a464:	003ec906 	br	809f8c <_realloc_r+0x84>
  80a468:	900b883a 	mov	r5,r18
  80a46c:	8009883a 	mov	r4,r16
  80a470:	0808e340 	call	808e34 <memmove>
  80a474:	b80f883a 	mov	r7,r23
  80a478:	003ec406 	br	809f8c <_realloc_r+0x84>
  80a47c:	90c00417 	ldw	r3,16(r18)
  80a480:	89400604 	addi	r5,r17,24
  80a484:	91000604 	addi	r4,r18,24
  80a488:	88c00415 	stw	r3,16(r17)
  80a48c:	90800517 	ldw	r2,20(r18)
  80a490:	88800515 	stw	r2,20(r17)
  80a494:	003f6806 	br	80a238 <_realloc_r+0x330>
  80a498:	900b883a 	mov	r5,r18
  80a49c:	8809883a 	mov	r4,r17
  80a4a0:	0808e340 	call	808e34 <memmove>
  80a4a4:	003fd406 	br	80a3f8 <_realloc_r+0x4f0>
  80a4a8:	90c00417 	ldw	r3,16(r18)
  80a4ac:	91000604 	addi	r4,r18,24
  80a4b0:	ba000804 	addi	r8,r23,32
  80a4b4:	b8c00615 	stw	r3,24(r23)
  80a4b8:	90800517 	ldw	r2,20(r18)
  80a4bc:	b8800715 	stw	r2,28(r23)
  80a4c0:	003f1206 	br	80a10c <_realloc_r+0x204>
  80a4c4:	90c00417 	ldw	r3,16(r18)
  80a4c8:	91000604 	addi	r4,r18,24
  80a4cc:	ba000804 	addi	r8,r23,32
  80a4d0:	b8c00615 	stw	r3,24(r23)
  80a4d4:	90800517 	ldw	r2,20(r18)
  80a4d8:	b8800715 	stw	r2,28(r23)
  80a4dc:	003f3206 	br	80a1a8 <_realloc_r+0x2a0>
  80a4e0:	90c00417 	ldw	r3,16(r18)
  80a4e4:	91000604 	addi	r4,r18,24
  80a4e8:	b9c00804 	addi	r7,r23,32
  80a4ec:	b8c00615 	stw	r3,24(r23)
  80a4f0:	90800517 	ldw	r2,20(r18)
  80a4f4:	b8800715 	stw	r2,28(r23)
  80a4f8:	003fb906 	br	80a3e0 <_realloc_r+0x4d8>

0080a4fc <__isinfd>:
  80a4fc:	200d883a 	mov	r6,r4
  80a500:	0109c83a 	sub	r4,zero,r4
  80a504:	2188b03a 	or	r4,r4,r6
  80a508:	2008d7fa 	srli	r4,r4,31
  80a50c:	00a00034 	movhi	r2,32768
  80a510:	10bfffc4 	addi	r2,r2,-1
  80a514:	1144703a 	and	r2,r2,r5
  80a518:	2088b03a 	or	r4,r4,r2
  80a51c:	009ffc34 	movhi	r2,32752
  80a520:	1105c83a 	sub	r2,r2,r4
  80a524:	0087c83a 	sub	r3,zero,r2
  80a528:	10c4b03a 	or	r2,r2,r3
  80a52c:	1004d7fa 	srli	r2,r2,31
  80a530:	00c00044 	movi	r3,1
  80a534:	1885c83a 	sub	r2,r3,r2
  80a538:	f800283a 	ret

0080a53c <__isnand>:
  80a53c:	200d883a 	mov	r6,r4
  80a540:	0109c83a 	sub	r4,zero,r4
  80a544:	2188b03a 	or	r4,r4,r6
  80a548:	2008d7fa 	srli	r4,r4,31
  80a54c:	00a00034 	movhi	r2,32768
  80a550:	10bfffc4 	addi	r2,r2,-1
  80a554:	1144703a 	and	r2,r2,r5
  80a558:	2088b03a 	or	r4,r4,r2
  80a55c:	009ffc34 	movhi	r2,32752
  80a560:	1105c83a 	sub	r2,r2,r4
  80a564:	1004d7fa 	srli	r2,r2,31
  80a568:	f800283a 	ret

0080a56c <__sclose>:
  80a56c:	2940038f 	ldh	r5,14(r5)
  80a570:	080a8a01 	jmpi	80a8a0 <_close_r>

0080a574 <__sseek>:
  80a574:	defffe04 	addi	sp,sp,-8
  80a578:	dc000015 	stw	r16,0(sp)
  80a57c:	2821883a 	mov	r16,r5
  80a580:	2940038f 	ldh	r5,14(r5)
  80a584:	dfc00115 	stw	ra,4(sp)
  80a588:	080ab180 	call	80ab18 <_lseek_r>
  80a58c:	1007883a 	mov	r3,r2
  80a590:	00bfffc4 	movi	r2,-1
  80a594:	18800926 	beq	r3,r2,80a5bc <__sseek+0x48>
  80a598:	8080030b 	ldhu	r2,12(r16)
  80a59c:	80c01415 	stw	r3,80(r16)
  80a5a0:	10840014 	ori	r2,r2,4096
  80a5a4:	8080030d 	sth	r2,12(r16)
  80a5a8:	1805883a 	mov	r2,r3
  80a5ac:	dfc00117 	ldw	ra,4(sp)
  80a5b0:	dc000017 	ldw	r16,0(sp)
  80a5b4:	dec00204 	addi	sp,sp,8
  80a5b8:	f800283a 	ret
  80a5bc:	8080030b 	ldhu	r2,12(r16)
  80a5c0:	10bbffcc 	andi	r2,r2,61439
  80a5c4:	8080030d 	sth	r2,12(r16)
  80a5c8:	1805883a 	mov	r2,r3
  80a5cc:	dfc00117 	ldw	ra,4(sp)
  80a5d0:	dc000017 	ldw	r16,0(sp)
  80a5d4:	dec00204 	addi	sp,sp,8
  80a5d8:	f800283a 	ret

0080a5dc <__swrite>:
  80a5dc:	2880030b 	ldhu	r2,12(r5)
  80a5e0:	defffb04 	addi	sp,sp,-20
  80a5e4:	dcc00315 	stw	r19,12(sp)
  80a5e8:	1080400c 	andi	r2,r2,256
  80a5ec:	dc800215 	stw	r18,8(sp)
  80a5f0:	dc400115 	stw	r17,4(sp)
  80a5f4:	dc000015 	stw	r16,0(sp)
  80a5f8:	3027883a 	mov	r19,r6
  80a5fc:	3825883a 	mov	r18,r7
  80a600:	dfc00415 	stw	ra,16(sp)
  80a604:	2821883a 	mov	r16,r5
  80a608:	000d883a 	mov	r6,zero
  80a60c:	01c00084 	movi	r7,2
  80a610:	2023883a 	mov	r17,r4
  80a614:	10000226 	beq	r2,zero,80a620 <__swrite+0x44>
  80a618:	2940038f 	ldh	r5,14(r5)
  80a61c:	080ab180 	call	80ab18 <_lseek_r>
  80a620:	8080030b 	ldhu	r2,12(r16)
  80a624:	8140038f 	ldh	r5,14(r16)
  80a628:	8809883a 	mov	r4,r17
  80a62c:	10bbffcc 	andi	r2,r2,61439
  80a630:	980d883a 	mov	r6,r19
  80a634:	900f883a 	mov	r7,r18
  80a638:	8080030d 	sth	r2,12(r16)
  80a63c:	dfc00417 	ldw	ra,16(sp)
  80a640:	dcc00317 	ldw	r19,12(sp)
  80a644:	dc800217 	ldw	r18,8(sp)
  80a648:	dc400117 	ldw	r17,4(sp)
  80a64c:	dc000017 	ldw	r16,0(sp)
  80a650:	dec00504 	addi	sp,sp,20
  80a654:	080a7741 	jmpi	80a774 <_write_r>

0080a658 <__sread>:
  80a658:	defffe04 	addi	sp,sp,-8
  80a65c:	dc000015 	stw	r16,0(sp)
  80a660:	2821883a 	mov	r16,r5
  80a664:	2940038f 	ldh	r5,14(r5)
  80a668:	dfc00115 	stw	ra,4(sp)
  80a66c:	080ab900 	call	80ab90 <_read_r>
  80a670:	1007883a 	mov	r3,r2
  80a674:	10000816 	blt	r2,zero,80a698 <__sread+0x40>
  80a678:	80801417 	ldw	r2,80(r16)
  80a67c:	10c5883a 	add	r2,r2,r3
  80a680:	80801415 	stw	r2,80(r16)
  80a684:	1805883a 	mov	r2,r3
  80a688:	dfc00117 	ldw	ra,4(sp)
  80a68c:	dc000017 	ldw	r16,0(sp)
  80a690:	dec00204 	addi	sp,sp,8
  80a694:	f800283a 	ret
  80a698:	8080030b 	ldhu	r2,12(r16)
  80a69c:	10bbffcc 	andi	r2,r2,61439
  80a6a0:	8080030d 	sth	r2,12(r16)
  80a6a4:	1805883a 	mov	r2,r3
  80a6a8:	dfc00117 	ldw	ra,4(sp)
  80a6ac:	dc000017 	ldw	r16,0(sp)
  80a6b0:	dec00204 	addi	sp,sp,8
  80a6b4:	f800283a 	ret

0080a6b8 <strcmp>:
  80a6b8:	2144b03a 	or	r2,r4,r5
  80a6bc:	108000cc 	andi	r2,r2,3
  80a6c0:	10001d1e 	bne	r2,zero,80a738 <strcmp+0x80>
  80a6c4:	200f883a 	mov	r7,r4
  80a6c8:	28800017 	ldw	r2,0(r5)
  80a6cc:	21000017 	ldw	r4,0(r4)
  80a6d0:	280d883a 	mov	r6,r5
  80a6d4:	2080161e 	bne	r4,r2,80a730 <strcmp+0x78>
  80a6d8:	023fbff4 	movhi	r8,65279
  80a6dc:	423fbfc4 	addi	r8,r8,-257
  80a6e0:	2207883a 	add	r3,r4,r8
  80a6e4:	01602074 	movhi	r5,32897
  80a6e8:	29602004 	addi	r5,r5,-32640
  80a6ec:	1946703a 	and	r3,r3,r5
  80a6f0:	0104303a 	nor	r2,zero,r4
  80a6f4:	10c4703a 	and	r2,r2,r3
  80a6f8:	10001c1e 	bne	r2,zero,80a76c <strcmp+0xb4>
  80a6fc:	4013883a 	mov	r9,r8
  80a700:	2811883a 	mov	r8,r5
  80a704:	00000106 	br	80a70c <strcmp+0x54>
  80a708:	1800181e 	bne	r3,zero,80a76c <strcmp+0xb4>
  80a70c:	39c00104 	addi	r7,r7,4
  80a710:	39000017 	ldw	r4,0(r7)
  80a714:	31800104 	addi	r6,r6,4
  80a718:	31400017 	ldw	r5,0(r6)
  80a71c:	2245883a 	add	r2,r4,r9
  80a720:	1204703a 	and	r2,r2,r8
  80a724:	0106303a 	nor	r3,zero,r4
  80a728:	1886703a 	and	r3,r3,r2
  80a72c:	217ff626 	beq	r4,r5,80a708 <strcmp+0x50>
  80a730:	3809883a 	mov	r4,r7
  80a734:	300b883a 	mov	r5,r6
  80a738:	20c00007 	ldb	r3,0(r4)
  80a73c:	1800051e 	bne	r3,zero,80a754 <strcmp+0x9c>
  80a740:	00000606 	br	80a75c <strcmp+0xa4>
  80a744:	21000044 	addi	r4,r4,1
  80a748:	20c00007 	ldb	r3,0(r4)
  80a74c:	29400044 	addi	r5,r5,1
  80a750:	18000226 	beq	r3,zero,80a75c <strcmp+0xa4>
  80a754:	28800007 	ldb	r2,0(r5)
  80a758:	18bffa26 	beq	r3,r2,80a744 <strcmp+0x8c>
  80a75c:	20c00003 	ldbu	r3,0(r4)
  80a760:	28800003 	ldbu	r2,0(r5)
  80a764:	1885c83a 	sub	r2,r3,r2
  80a768:	f800283a 	ret
  80a76c:	0005883a 	mov	r2,zero
  80a770:	f800283a 	ret

0080a774 <_write_r>:
  80a774:	defffd04 	addi	sp,sp,-12
  80a778:	dc000015 	stw	r16,0(sp)
  80a77c:	04002074 	movhi	r16,129
  80a780:	8412fb04 	addi	r16,r16,19436
  80a784:	dc400115 	stw	r17,4(sp)
  80a788:	80000015 	stw	zero,0(r16)
  80a78c:	2023883a 	mov	r17,r4
  80a790:	2809883a 	mov	r4,r5
  80a794:	300b883a 	mov	r5,r6
  80a798:	380d883a 	mov	r6,r7
  80a79c:	dfc00215 	stw	ra,8(sp)
  80a7a0:	080dd780 	call	80dd78 <write>
  80a7a4:	1007883a 	mov	r3,r2
  80a7a8:	00bfffc4 	movi	r2,-1
  80a7ac:	18800626 	beq	r3,r2,80a7c8 <_write_r+0x54>
  80a7b0:	1805883a 	mov	r2,r3
  80a7b4:	dfc00217 	ldw	ra,8(sp)
  80a7b8:	dc400117 	ldw	r17,4(sp)
  80a7bc:	dc000017 	ldw	r16,0(sp)
  80a7c0:	dec00304 	addi	sp,sp,12
  80a7c4:	f800283a 	ret
  80a7c8:	80800017 	ldw	r2,0(r16)
  80a7cc:	103ff826 	beq	r2,zero,80a7b0 <_write_r+0x3c>
  80a7d0:	88800015 	stw	r2,0(r17)
  80a7d4:	1805883a 	mov	r2,r3
  80a7d8:	dfc00217 	ldw	ra,8(sp)
  80a7dc:	dc400117 	ldw	r17,4(sp)
  80a7e0:	dc000017 	ldw	r16,0(sp)
  80a7e4:	dec00304 	addi	sp,sp,12
  80a7e8:	f800283a 	ret

0080a7ec <_calloc_r>:
  80a7ec:	298b383a 	mul	r5,r5,r6
  80a7f0:	defffe04 	addi	sp,sp,-8
  80a7f4:	dc000015 	stw	r16,0(sp)
  80a7f8:	dfc00115 	stw	ra,4(sp)
  80a7fc:	08035dc0 	call	8035dc <_malloc_r>
  80a800:	1021883a 	mov	r16,r2
  80a804:	01c00904 	movi	r7,36
  80a808:	10000d26 	beq	r2,zero,80a840 <_calloc_r+0x54>
  80a80c:	10ffff17 	ldw	r3,-4(r2)
  80a810:	1009883a 	mov	r4,r2
  80a814:	00bfff04 	movi	r2,-4
  80a818:	1886703a 	and	r3,r3,r2
  80a81c:	1887883a 	add	r3,r3,r2
  80a820:	180d883a 	mov	r6,r3
  80a824:	000b883a 	mov	r5,zero
  80a828:	38c01736 	bltu	r7,r3,80a888 <_calloc_r+0x9c>
  80a82c:	008004c4 	movi	r2,19
  80a830:	10c00836 	bltu	r2,r3,80a854 <_calloc_r+0x68>
  80a834:	20000215 	stw	zero,8(r4)
  80a838:	20000015 	stw	zero,0(r4)
  80a83c:	20000115 	stw	zero,4(r4)
  80a840:	8005883a 	mov	r2,r16
  80a844:	dfc00117 	ldw	ra,4(sp)
  80a848:	dc000017 	ldw	r16,0(sp)
  80a84c:	dec00204 	addi	sp,sp,8
  80a850:	f800283a 	ret
  80a854:	008006c4 	movi	r2,27
  80a858:	80000015 	stw	zero,0(r16)
  80a85c:	80000115 	stw	zero,4(r16)
  80a860:	81000204 	addi	r4,r16,8
  80a864:	10fff32e 	bgeu	r2,r3,80a834 <_calloc_r+0x48>
  80a868:	80000215 	stw	zero,8(r16)
  80a86c:	80000315 	stw	zero,12(r16)
  80a870:	81000404 	addi	r4,r16,16
  80a874:	19ffef1e 	bne	r3,r7,80a834 <_calloc_r+0x48>
  80a878:	81000604 	addi	r4,r16,24
  80a87c:	80000415 	stw	zero,16(r16)
  80a880:	80000515 	stw	zero,20(r16)
  80a884:	003feb06 	br	80a834 <_calloc_r+0x48>
  80a888:	0803d1c0 	call	803d1c <memset>
  80a88c:	8005883a 	mov	r2,r16
  80a890:	dfc00117 	ldw	ra,4(sp)
  80a894:	dc000017 	ldw	r16,0(sp)
  80a898:	dec00204 	addi	sp,sp,8
  80a89c:	f800283a 	ret

0080a8a0 <_close_r>:
  80a8a0:	defffd04 	addi	sp,sp,-12
  80a8a4:	dc000015 	stw	r16,0(sp)
  80a8a8:	04002074 	movhi	r16,129
  80a8ac:	8412fb04 	addi	r16,r16,19436
  80a8b0:	dc400115 	stw	r17,4(sp)
  80a8b4:	80000015 	stw	zero,0(r16)
  80a8b8:	2023883a 	mov	r17,r4
  80a8bc:	2809883a 	mov	r4,r5
  80a8c0:	dfc00215 	stw	ra,8(sp)
  80a8c4:	080d0380 	call	80d038 <close>
  80a8c8:	1007883a 	mov	r3,r2
  80a8cc:	00bfffc4 	movi	r2,-1
  80a8d0:	18800626 	beq	r3,r2,80a8ec <_close_r+0x4c>
  80a8d4:	1805883a 	mov	r2,r3
  80a8d8:	dfc00217 	ldw	ra,8(sp)
  80a8dc:	dc400117 	ldw	r17,4(sp)
  80a8e0:	dc000017 	ldw	r16,0(sp)
  80a8e4:	dec00304 	addi	sp,sp,12
  80a8e8:	f800283a 	ret
  80a8ec:	80800017 	ldw	r2,0(r16)
  80a8f0:	103ff826 	beq	r2,zero,80a8d4 <_close_r+0x34>
  80a8f4:	88800015 	stw	r2,0(r17)
  80a8f8:	1805883a 	mov	r2,r3
  80a8fc:	dfc00217 	ldw	ra,8(sp)
  80a900:	dc400117 	ldw	r17,4(sp)
  80a904:	dc000017 	ldw	r16,0(sp)
  80a908:	dec00304 	addi	sp,sp,12
  80a90c:	f800283a 	ret

0080a910 <_fclose_r>:
  80a910:	defffc04 	addi	sp,sp,-16
  80a914:	dc400115 	stw	r17,4(sp)
  80a918:	dc000015 	stw	r16,0(sp)
  80a91c:	dfc00315 	stw	ra,12(sp)
  80a920:	dc800215 	stw	r18,8(sp)
  80a924:	2821883a 	mov	r16,r5
  80a928:	2023883a 	mov	r17,r4
  80a92c:	28002926 	beq	r5,zero,80a9d4 <_fclose_r+0xc4>
  80a930:	08081d40 	call	8081d4 <__sfp_lock_acquire>
  80a934:	88000226 	beq	r17,zero,80a940 <_fclose_r+0x30>
  80a938:	88800e17 	ldw	r2,56(r17)
  80a93c:	10002d26 	beq	r2,zero,80a9f4 <_fclose_r+0xe4>
  80a940:	8080030f 	ldh	r2,12(r16)
  80a944:	10002226 	beq	r2,zero,80a9d0 <_fclose_r+0xc0>
  80a948:	8809883a 	mov	r4,r17
  80a94c:	800b883a 	mov	r5,r16
  80a950:	0807f4c0 	call	807f4c <_fflush_r>
  80a954:	1025883a 	mov	r18,r2
  80a958:	80800b17 	ldw	r2,44(r16)
  80a95c:	10000426 	beq	r2,zero,80a970 <_fclose_r+0x60>
  80a960:	81400717 	ldw	r5,28(r16)
  80a964:	8809883a 	mov	r4,r17
  80a968:	103ee83a 	callr	r2
  80a96c:	10002a16 	blt	r2,zero,80aa18 <_fclose_r+0x108>
  80a970:	8080030b 	ldhu	r2,12(r16)
  80a974:	1080200c 	andi	r2,r2,128
  80a978:	1000231e 	bne	r2,zero,80aa08 <_fclose_r+0xf8>
  80a97c:	81400c17 	ldw	r5,48(r16)
  80a980:	28000526 	beq	r5,zero,80a998 <_fclose_r+0x88>
  80a984:	80801004 	addi	r2,r16,64
  80a988:	28800226 	beq	r5,r2,80a994 <_fclose_r+0x84>
  80a98c:	8809883a 	mov	r4,r17
  80a990:	08044080 	call	804408 <_free_r>
  80a994:	80000c15 	stw	zero,48(r16)
  80a998:	81401117 	ldw	r5,68(r16)
  80a99c:	28000326 	beq	r5,zero,80a9ac <_fclose_r+0x9c>
  80a9a0:	8809883a 	mov	r4,r17
  80a9a4:	08044080 	call	804408 <_free_r>
  80a9a8:	80001115 	stw	zero,68(r16)
  80a9ac:	8000030d 	sth	zero,12(r16)
  80a9b0:	08081d80 	call	8081d8 <__sfp_lock_release>
  80a9b4:	9005883a 	mov	r2,r18
  80a9b8:	dfc00317 	ldw	ra,12(sp)
  80a9bc:	dc800217 	ldw	r18,8(sp)
  80a9c0:	dc400117 	ldw	r17,4(sp)
  80a9c4:	dc000017 	ldw	r16,0(sp)
  80a9c8:	dec00404 	addi	sp,sp,16
  80a9cc:	f800283a 	ret
  80a9d0:	08081d80 	call	8081d8 <__sfp_lock_release>
  80a9d4:	0025883a 	mov	r18,zero
  80a9d8:	9005883a 	mov	r2,r18
  80a9dc:	dfc00317 	ldw	ra,12(sp)
  80a9e0:	dc800217 	ldw	r18,8(sp)
  80a9e4:	dc400117 	ldw	r17,4(sp)
  80a9e8:	dc000017 	ldw	r16,0(sp)
  80a9ec:	dec00404 	addi	sp,sp,16
  80a9f0:	f800283a 	ret
  80a9f4:	8809883a 	mov	r4,r17
  80a9f8:	08081e40 	call	8081e4 <__sinit>
  80a9fc:	8080030f 	ldh	r2,12(r16)
  80aa00:	103fd11e 	bne	r2,zero,80a948 <_fclose_r+0x38>
  80aa04:	003ff206 	br	80a9d0 <_fclose_r+0xc0>
  80aa08:	81400417 	ldw	r5,16(r16)
  80aa0c:	8809883a 	mov	r4,r17
  80aa10:	08044080 	call	804408 <_free_r>
  80aa14:	003fd906 	br	80a97c <_fclose_r+0x6c>
  80aa18:	04bfffc4 	movi	r18,-1
  80aa1c:	003fd406 	br	80a970 <_fclose_r+0x60>

0080aa20 <fclose>:
  80aa20:	00802074 	movhi	r2,129
  80aa24:	108bb704 	addi	r2,r2,11996
  80aa28:	200b883a 	mov	r5,r4
  80aa2c:	11000017 	ldw	r4,0(r2)
  80aa30:	080a9101 	jmpi	80a910 <_fclose_r>

0080aa34 <_fstat_r>:
  80aa34:	defffd04 	addi	sp,sp,-12
  80aa38:	dc000015 	stw	r16,0(sp)
  80aa3c:	04002074 	movhi	r16,129
  80aa40:	8412fb04 	addi	r16,r16,19436
  80aa44:	dc400115 	stw	r17,4(sp)
  80aa48:	80000015 	stw	zero,0(r16)
  80aa4c:	2023883a 	mov	r17,r4
  80aa50:	2809883a 	mov	r4,r5
  80aa54:	300b883a 	mov	r5,r6
  80aa58:	dfc00215 	stw	ra,8(sp)
  80aa5c:	080d2200 	call	80d220 <fstat>
  80aa60:	1007883a 	mov	r3,r2
  80aa64:	00bfffc4 	movi	r2,-1
  80aa68:	18800626 	beq	r3,r2,80aa84 <_fstat_r+0x50>
  80aa6c:	1805883a 	mov	r2,r3
  80aa70:	dfc00217 	ldw	ra,8(sp)
  80aa74:	dc400117 	ldw	r17,4(sp)
  80aa78:	dc000017 	ldw	r16,0(sp)
  80aa7c:	dec00304 	addi	sp,sp,12
  80aa80:	f800283a 	ret
  80aa84:	80800017 	ldw	r2,0(r16)
  80aa88:	103ff826 	beq	r2,zero,80aa6c <_fstat_r+0x38>
  80aa8c:	88800015 	stw	r2,0(r17)
  80aa90:	1805883a 	mov	r2,r3
  80aa94:	dfc00217 	ldw	ra,8(sp)
  80aa98:	dc400117 	ldw	r17,4(sp)
  80aa9c:	dc000017 	ldw	r16,0(sp)
  80aaa0:	dec00304 	addi	sp,sp,12
  80aaa4:	f800283a 	ret

0080aaa8 <_isatty_r>:
  80aaa8:	defffd04 	addi	sp,sp,-12
  80aaac:	dc000015 	stw	r16,0(sp)
  80aab0:	04002074 	movhi	r16,129
  80aab4:	8412fb04 	addi	r16,r16,19436
  80aab8:	dc400115 	stw	r17,4(sp)
  80aabc:	80000015 	stw	zero,0(r16)
  80aac0:	2023883a 	mov	r17,r4
  80aac4:	2809883a 	mov	r4,r5
  80aac8:	dfc00215 	stw	ra,8(sp)
  80aacc:	080d5340 	call	80d534 <isatty>
  80aad0:	1007883a 	mov	r3,r2
  80aad4:	00bfffc4 	movi	r2,-1
  80aad8:	18800626 	beq	r3,r2,80aaf4 <_isatty_r+0x4c>
  80aadc:	1805883a 	mov	r2,r3
  80aae0:	dfc00217 	ldw	ra,8(sp)
  80aae4:	dc400117 	ldw	r17,4(sp)
  80aae8:	dc000017 	ldw	r16,0(sp)
  80aaec:	dec00304 	addi	sp,sp,12
  80aaf0:	f800283a 	ret
  80aaf4:	80800017 	ldw	r2,0(r16)
  80aaf8:	103ff826 	beq	r2,zero,80aadc <_isatty_r+0x34>
  80aafc:	88800015 	stw	r2,0(r17)
  80ab00:	1805883a 	mov	r2,r3
  80ab04:	dfc00217 	ldw	ra,8(sp)
  80ab08:	dc400117 	ldw	r17,4(sp)
  80ab0c:	dc000017 	ldw	r16,0(sp)
  80ab10:	dec00304 	addi	sp,sp,12
  80ab14:	f800283a 	ret

0080ab18 <_lseek_r>:
  80ab18:	defffd04 	addi	sp,sp,-12
  80ab1c:	dc000015 	stw	r16,0(sp)
  80ab20:	04002074 	movhi	r16,129
  80ab24:	8412fb04 	addi	r16,r16,19436
  80ab28:	dc400115 	stw	r17,4(sp)
  80ab2c:	80000015 	stw	zero,0(r16)
  80ab30:	2023883a 	mov	r17,r4
  80ab34:	2809883a 	mov	r4,r5
  80ab38:	300b883a 	mov	r5,r6
  80ab3c:	380d883a 	mov	r6,r7
  80ab40:	dfc00215 	stw	ra,8(sp)
  80ab44:	080d8e00 	call	80d8e0 <lseek>
  80ab48:	1007883a 	mov	r3,r2
  80ab4c:	00bfffc4 	movi	r2,-1
  80ab50:	18800626 	beq	r3,r2,80ab6c <_lseek_r+0x54>
  80ab54:	1805883a 	mov	r2,r3
  80ab58:	dfc00217 	ldw	ra,8(sp)
  80ab5c:	dc400117 	ldw	r17,4(sp)
  80ab60:	dc000017 	ldw	r16,0(sp)
  80ab64:	dec00304 	addi	sp,sp,12
  80ab68:	f800283a 	ret
  80ab6c:	80800017 	ldw	r2,0(r16)
  80ab70:	103ff826 	beq	r2,zero,80ab54 <_lseek_r+0x3c>
  80ab74:	88800015 	stw	r2,0(r17)
  80ab78:	1805883a 	mov	r2,r3
  80ab7c:	dfc00217 	ldw	ra,8(sp)
  80ab80:	dc400117 	ldw	r17,4(sp)
  80ab84:	dc000017 	ldw	r16,0(sp)
  80ab88:	dec00304 	addi	sp,sp,12
  80ab8c:	f800283a 	ret

0080ab90 <_read_r>:
  80ab90:	defffd04 	addi	sp,sp,-12
  80ab94:	dc000015 	stw	r16,0(sp)
  80ab98:	04002074 	movhi	r16,129
  80ab9c:	8412fb04 	addi	r16,r16,19436
  80aba0:	dc400115 	stw	r17,4(sp)
  80aba4:	80000015 	stw	zero,0(r16)
  80aba8:	2023883a 	mov	r17,r4
  80abac:	2809883a 	mov	r4,r5
  80abb0:	300b883a 	mov	r5,r6
  80abb4:	380d883a 	mov	r6,r7
  80abb8:	dfc00215 	stw	ra,8(sp)
  80abbc:	080dadc0 	call	80dadc <read>
  80abc0:	1007883a 	mov	r3,r2
  80abc4:	00bfffc4 	movi	r2,-1
  80abc8:	18800626 	beq	r3,r2,80abe4 <_read_r+0x54>
  80abcc:	1805883a 	mov	r2,r3
  80abd0:	dfc00217 	ldw	ra,8(sp)
  80abd4:	dc400117 	ldw	r17,4(sp)
  80abd8:	dc000017 	ldw	r16,0(sp)
  80abdc:	dec00304 	addi	sp,sp,12
  80abe0:	f800283a 	ret
  80abe4:	80800017 	ldw	r2,0(r16)
  80abe8:	103ff826 	beq	r2,zero,80abcc <_read_r+0x3c>
  80abec:	88800015 	stw	r2,0(r17)
  80abf0:	1805883a 	mov	r2,r3
  80abf4:	dfc00217 	ldw	ra,8(sp)
  80abf8:	dc400117 	ldw	r17,4(sp)
  80abfc:	dc000017 	ldw	r16,0(sp)
  80ac00:	dec00304 	addi	sp,sp,12
  80ac04:	f800283a 	ret

0080ac08 <__udivdi3>:
  80ac08:	defff004 	addi	sp,sp,-64
  80ac0c:	2005883a 	mov	r2,r4
  80ac10:	3011883a 	mov	r8,r6
  80ac14:	df000e15 	stw	fp,56(sp)
  80ac18:	dd000a15 	stw	r20,40(sp)
  80ac1c:	dc000615 	stw	r16,24(sp)
  80ac20:	dfc00f15 	stw	ra,60(sp)
  80ac24:	ddc00d15 	stw	r23,52(sp)
  80ac28:	dd800c15 	stw	r22,48(sp)
  80ac2c:	dd400b15 	stw	r21,44(sp)
  80ac30:	dcc00915 	stw	r19,36(sp)
  80ac34:	dc800815 	stw	r18,32(sp)
  80ac38:	dc400715 	stw	r17,28(sp)
  80ac3c:	4021883a 	mov	r16,r8
  80ac40:	1039883a 	mov	fp,r2
  80ac44:	2829883a 	mov	r20,r5
  80ac48:	38003b1e 	bne	r7,zero,80ad38 <__udivdi3+0x130>
  80ac4c:	2a005c36 	bltu	r5,r8,80adc0 <__udivdi3+0x1b8>
  80ac50:	4000a626 	beq	r8,zero,80aeec <__udivdi3+0x2e4>
  80ac54:	00bfffd4 	movui	r2,65535
  80ac58:	14009e36 	bltu	r2,r16,80aed4 <__udivdi3+0x2cc>
  80ac5c:	00803fc4 	movi	r2,255
  80ac60:	14013d36 	bltu	r2,r16,80b158 <__udivdi3+0x550>
  80ac64:	000b883a 	mov	r5,zero
  80ac68:	0005883a 	mov	r2,zero
  80ac6c:	8084d83a 	srl	r2,r16,r2
  80ac70:	01002074 	movhi	r4,129
  80ac74:	21044904 	addi	r4,r4,4388
  80ac78:	01800804 	movi	r6,32
  80ac7c:	1105883a 	add	r2,r2,r4
  80ac80:	10c00003 	ldbu	r3,0(r2)
  80ac84:	28c7883a 	add	r3,r5,r3
  80ac88:	30edc83a 	sub	r22,r6,r3
  80ac8c:	b000ee1e 	bne	r22,zero,80b048 <__udivdi3+0x440>
  80ac90:	802ad43a 	srli	r21,r16,16
  80ac94:	00800044 	movi	r2,1
  80ac98:	a423c83a 	sub	r17,r20,r16
  80ac9c:	85ffffcc 	andi	r23,r16,65535
  80aca0:	d8800315 	stw	r2,12(sp)
  80aca4:	8809883a 	mov	r4,r17
  80aca8:	a80b883a 	mov	r5,r21
  80acac:	080c9fc0 	call	80c9fc <__udivsi3>
  80acb0:	8809883a 	mov	r4,r17
  80acb4:	a80b883a 	mov	r5,r21
  80acb8:	102d883a 	mov	r22,r2
  80acbc:	080ca040 	call	80ca04 <__umodsi3>
  80acc0:	1004943a 	slli	r2,r2,16
  80acc4:	e006d43a 	srli	r3,fp,16
  80acc8:	bda3383a 	mul	r17,r23,r22
  80accc:	10c4b03a 	or	r2,r2,r3
  80acd0:	1440042e 	bgeu	r2,r17,80ace4 <__udivdi3+0xdc>
  80acd4:	1405883a 	add	r2,r2,r16
  80acd8:	b5bfffc4 	addi	r22,r22,-1
  80acdc:	14000136 	bltu	r2,r16,80ace4 <__udivdi3+0xdc>
  80ace0:	14413d36 	bltu	r2,r17,80b1d8 <__udivdi3+0x5d0>
  80ace4:	1463c83a 	sub	r17,r2,r17
  80ace8:	8809883a 	mov	r4,r17
  80acec:	a80b883a 	mov	r5,r21
  80acf0:	080c9fc0 	call	80c9fc <__udivsi3>
  80acf4:	8809883a 	mov	r4,r17
  80acf8:	a80b883a 	mov	r5,r21
  80acfc:	1029883a 	mov	r20,r2
  80ad00:	080ca040 	call	80ca04 <__umodsi3>
  80ad04:	1004943a 	slli	r2,r2,16
  80ad08:	bd09383a 	mul	r4,r23,r20
  80ad0c:	e0ffffcc 	andi	r3,fp,65535
  80ad10:	10c4b03a 	or	r2,r2,r3
  80ad14:	1100042e 	bgeu	r2,r4,80ad28 <__udivdi3+0x120>
  80ad18:	8085883a 	add	r2,r16,r2
  80ad1c:	a53fffc4 	addi	r20,r20,-1
  80ad20:	14000136 	bltu	r2,r16,80ad28 <__udivdi3+0x120>
  80ad24:	11012036 	bltu	r2,r4,80b1a8 <__udivdi3+0x5a0>
  80ad28:	b004943a 	slli	r2,r22,16
  80ad2c:	d9000317 	ldw	r4,12(sp)
  80ad30:	a084b03a 	or	r2,r20,r2
  80ad34:	00001506 	br	80ad8c <__udivdi3+0x184>
  80ad38:	380d883a 	mov	r6,r7
  80ad3c:	29c06236 	bltu	r5,r7,80aec8 <__udivdi3+0x2c0>
  80ad40:	00bfffd4 	movui	r2,65535
  80ad44:	11c05a36 	bltu	r2,r7,80aeb0 <__udivdi3+0x2a8>
  80ad48:	00803fc4 	movi	r2,255
  80ad4c:	11c0fc36 	bltu	r2,r7,80b140 <__udivdi3+0x538>
  80ad50:	000b883a 	mov	r5,zero
  80ad54:	0005883a 	mov	r2,zero
  80ad58:	3084d83a 	srl	r2,r6,r2
  80ad5c:	01002074 	movhi	r4,129
  80ad60:	21044904 	addi	r4,r4,4388
  80ad64:	01c00804 	movi	r7,32
  80ad68:	1105883a 	add	r2,r2,r4
  80ad6c:	10c00003 	ldbu	r3,0(r2)
  80ad70:	28c7883a 	add	r3,r5,r3
  80ad74:	38efc83a 	sub	r23,r7,r3
  80ad78:	b800691e 	bne	r23,zero,80af20 <__udivdi3+0x318>
  80ad7c:	35000136 	bltu	r6,r20,80ad84 <__udivdi3+0x17c>
  80ad80:	e4005136 	bltu	fp,r16,80aec8 <__udivdi3+0x2c0>
  80ad84:	00800044 	movi	r2,1
  80ad88:	0009883a 	mov	r4,zero
  80ad8c:	2007883a 	mov	r3,r4
  80ad90:	dfc00f17 	ldw	ra,60(sp)
  80ad94:	df000e17 	ldw	fp,56(sp)
  80ad98:	ddc00d17 	ldw	r23,52(sp)
  80ad9c:	dd800c17 	ldw	r22,48(sp)
  80ada0:	dd400b17 	ldw	r21,44(sp)
  80ada4:	dd000a17 	ldw	r20,40(sp)
  80ada8:	dcc00917 	ldw	r19,36(sp)
  80adac:	dc800817 	ldw	r18,32(sp)
  80adb0:	dc400717 	ldw	r17,28(sp)
  80adb4:	dc000617 	ldw	r16,24(sp)
  80adb8:	dec01004 	addi	sp,sp,64
  80adbc:	f800283a 	ret
  80adc0:	00bfffd4 	movui	r2,65535
  80adc4:	12005036 	bltu	r2,r8,80af08 <__udivdi3+0x300>
  80adc8:	00803fc4 	movi	r2,255
  80adcc:	1200e836 	bltu	r2,r8,80b170 <__udivdi3+0x568>
  80add0:	000b883a 	mov	r5,zero
  80add4:	0005883a 	mov	r2,zero
  80add8:	8084d83a 	srl	r2,r16,r2
  80addc:	01002074 	movhi	r4,129
  80ade0:	21044904 	addi	r4,r4,4388
  80ade4:	01800804 	movi	r6,32
  80ade8:	1105883a 	add	r2,r2,r4
  80adec:	10c00003 	ldbu	r3,0(r2)
  80adf0:	28c7883a 	add	r3,r5,r3
  80adf4:	30cbc83a 	sub	r5,r6,r3
  80adf8:	28000626 	beq	r5,zero,80ae14 <__udivdi3+0x20c>
  80adfc:	3145c83a 	sub	r2,r6,r5
  80ae00:	e084d83a 	srl	r2,fp,r2
  80ae04:	a146983a 	sll	r3,r20,r5
  80ae08:	e178983a 	sll	fp,fp,r5
  80ae0c:	8160983a 	sll	r16,r16,r5
  80ae10:	18a8b03a 	or	r20,r3,r2
  80ae14:	802ad43a 	srli	r21,r16,16
  80ae18:	a009883a 	mov	r4,r20
  80ae1c:	85ffffcc 	andi	r23,r16,65535
  80ae20:	a80b883a 	mov	r5,r21
  80ae24:	080c9fc0 	call	80c9fc <__udivsi3>
  80ae28:	a009883a 	mov	r4,r20
  80ae2c:	a80b883a 	mov	r5,r21
  80ae30:	102d883a 	mov	r22,r2
  80ae34:	080ca040 	call	80ca04 <__umodsi3>
  80ae38:	1004943a 	slli	r2,r2,16
  80ae3c:	e006d43a 	srli	r3,fp,16
  80ae40:	bda3383a 	mul	r17,r23,r22
  80ae44:	10c4b03a 	or	r2,r2,r3
  80ae48:	1440042e 	bgeu	r2,r17,80ae5c <__udivdi3+0x254>
  80ae4c:	1405883a 	add	r2,r2,r16
  80ae50:	b5bfffc4 	addi	r22,r22,-1
  80ae54:	14000136 	bltu	r2,r16,80ae5c <__udivdi3+0x254>
  80ae58:	1440d536 	bltu	r2,r17,80b1b0 <__udivdi3+0x5a8>
  80ae5c:	1463c83a 	sub	r17,r2,r17
  80ae60:	8809883a 	mov	r4,r17
  80ae64:	a80b883a 	mov	r5,r21
  80ae68:	080c9fc0 	call	80c9fc <__udivsi3>
  80ae6c:	8809883a 	mov	r4,r17
  80ae70:	a80b883a 	mov	r5,r21
  80ae74:	1029883a 	mov	r20,r2
  80ae78:	080ca040 	call	80ca04 <__umodsi3>
  80ae7c:	1004943a 	slli	r2,r2,16
  80ae80:	bd09383a 	mul	r4,r23,r20
  80ae84:	e0ffffcc 	andi	r3,fp,65535
  80ae88:	10c4b03a 	or	r2,r2,r3
  80ae8c:	1100042e 	bgeu	r2,r4,80aea0 <__udivdi3+0x298>
  80ae90:	8085883a 	add	r2,r16,r2
  80ae94:	a53fffc4 	addi	r20,r20,-1
  80ae98:	14000136 	bltu	r2,r16,80aea0 <__udivdi3+0x298>
  80ae9c:	1100c736 	bltu	r2,r4,80b1bc <__udivdi3+0x5b4>
  80aea0:	b004943a 	slli	r2,r22,16
  80aea4:	0009883a 	mov	r4,zero
  80aea8:	a084b03a 	or	r2,r20,r2
  80aeac:	003fb706 	br	80ad8c <__udivdi3+0x184>
  80aeb0:	00804034 	movhi	r2,256
  80aeb4:	10bfffc4 	addi	r2,r2,-1
  80aeb8:	11c0a436 	bltu	r2,r7,80b14c <__udivdi3+0x544>
  80aebc:	01400404 	movi	r5,16
  80aec0:	2805883a 	mov	r2,r5
  80aec4:	003fa406 	br	80ad58 <__udivdi3+0x150>
  80aec8:	0005883a 	mov	r2,zero
  80aecc:	0009883a 	mov	r4,zero
  80aed0:	003fae06 	br	80ad8c <__udivdi3+0x184>
  80aed4:	00804034 	movhi	r2,256
  80aed8:	10bfffc4 	addi	r2,r2,-1
  80aedc:	1400a136 	bltu	r2,r16,80b164 <__udivdi3+0x55c>
  80aee0:	01400404 	movi	r5,16
  80aee4:	2805883a 	mov	r2,r5
  80aee8:	003f6006 	br	80ac6c <__udivdi3+0x64>
  80aeec:	01000044 	movi	r4,1
  80aef0:	000b883a 	mov	r5,zero
  80aef4:	080c9fc0 	call	80c9fc <__udivsi3>
  80aef8:	1021883a 	mov	r16,r2
  80aefc:	00bfffd4 	movui	r2,65535
  80af00:	143ff436 	bltu	r2,r16,80aed4 <__udivdi3+0x2cc>
  80af04:	003f5506 	br	80ac5c <__udivdi3+0x54>
  80af08:	00804034 	movhi	r2,256
  80af0c:	10bfffc4 	addi	r2,r2,-1
  80af10:	12009a36 	bltu	r2,r8,80b17c <__udivdi3+0x574>
  80af14:	01400404 	movi	r5,16
  80af18:	2805883a 	mov	r2,r5
  80af1c:	003fae06 	br	80add8 <__udivdi3+0x1d0>
  80af20:	3dc5c83a 	sub	r2,r7,r23
  80af24:	35c8983a 	sll	r4,r6,r23
  80af28:	8086d83a 	srl	r3,r16,r2
  80af2c:	a0a2d83a 	srl	r17,r20,r2
  80af30:	e084d83a 	srl	r2,fp,r2
  80af34:	20eab03a 	or	r21,r4,r3
  80af38:	a82cd43a 	srli	r22,r21,16
  80af3c:	a5c6983a 	sll	r3,r20,r23
  80af40:	8809883a 	mov	r4,r17
  80af44:	b00b883a 	mov	r5,r22
  80af48:	1886b03a 	or	r3,r3,r2
  80af4c:	d8c00215 	stw	r3,8(sp)
  80af50:	080c9fc0 	call	80c9fc <__udivsi3>
  80af54:	8809883a 	mov	r4,r17
  80af58:	b00b883a 	mov	r5,r22
  80af5c:	1029883a 	mov	r20,r2
  80af60:	080ca040 	call	80ca04 <__umodsi3>
  80af64:	a8ffffcc 	andi	r3,r21,65535
  80af68:	d8c00515 	stw	r3,20(sp)
  80af6c:	d9000217 	ldw	r4,8(sp)
  80af70:	d9400517 	ldw	r5,20(sp)
  80af74:	1004943a 	slli	r2,r2,16
  80af78:	2006d43a 	srli	r3,r4,16
  80af7c:	85e0983a 	sll	r16,r16,r23
  80af80:	2d23383a 	mul	r17,r5,r20
  80af84:	10c4b03a 	or	r2,r2,r3
  80af88:	dc000015 	stw	r16,0(sp)
  80af8c:	1440032e 	bgeu	r2,r17,80af9c <__udivdi3+0x394>
  80af90:	1545883a 	add	r2,r2,r21
  80af94:	a53fffc4 	addi	r20,r20,-1
  80af98:	15407f2e 	bgeu	r2,r21,80b198 <__udivdi3+0x590>
  80af9c:	1463c83a 	sub	r17,r2,r17
  80afa0:	8809883a 	mov	r4,r17
  80afa4:	b00b883a 	mov	r5,r22
  80afa8:	080c9fc0 	call	80c9fc <__udivsi3>
  80afac:	8809883a 	mov	r4,r17
  80afb0:	b00b883a 	mov	r5,r22
  80afb4:	1021883a 	mov	r16,r2
  80afb8:	080ca040 	call	80ca04 <__umodsi3>
  80afbc:	d8c00517 	ldw	r3,20(sp)
  80afc0:	d9000217 	ldw	r4,8(sp)
  80afc4:	1004943a 	slli	r2,r2,16
  80afc8:	1c0f383a 	mul	r7,r3,r16
  80afcc:	20ffffcc 	andi	r3,r4,65535
  80afd0:	10e2b03a 	or	r17,r2,r3
  80afd4:	89c0032e 	bgeu	r17,r7,80afe4 <__udivdi3+0x3dc>
  80afd8:	8d63883a 	add	r17,r17,r21
  80afdc:	843fffc4 	addi	r16,r16,-1
  80afe0:	8d40692e 	bgeu	r17,r21,80b188 <__udivdi3+0x580>
  80afe4:	a008943a 	slli	r4,r20,16
  80afe8:	d9400017 	ldw	r5,0(sp)
  80afec:	89e3c83a 	sub	r17,r17,r7
  80aff0:	8110b03a 	or	r8,r16,r4
  80aff4:	280cd43a 	srli	r6,r5,16
  80aff8:	28ffffcc 	andi	r3,r5,65535
  80affc:	40bfffcc 	andi	r2,r8,65535
  80b000:	400ad43a 	srli	r5,r8,16
  80b004:	10d3383a 	mul	r9,r2,r3
  80b008:	1185383a 	mul	r2,r2,r6
  80b00c:	28c7383a 	mul	r3,r5,r3
  80b010:	4808d43a 	srli	r4,r9,16
  80b014:	298b383a 	mul	r5,r5,r6
  80b018:	10c5883a 	add	r2,r2,r3
  80b01c:	2089883a 	add	r4,r4,r2
  80b020:	20c0022e 	bgeu	r4,r3,80b02c <__udivdi3+0x424>
  80b024:	00800074 	movhi	r2,1
  80b028:	288b883a 	add	r5,r5,r2
  80b02c:	2004d43a 	srli	r2,r4,16
  80b030:	288b883a 	add	r5,r5,r2
  80b034:	89403f36 	bltu	r17,r5,80b134 <__udivdi3+0x52c>
  80b038:	89403926 	beq	r17,r5,80b120 <__udivdi3+0x518>
  80b03c:	4005883a 	mov	r2,r8
  80b040:	0009883a 	mov	r4,zero
  80b044:	003f5106 	br	80ad8c <__udivdi3+0x184>
  80b048:	85a0983a 	sll	r16,r16,r22
  80b04c:	3585c83a 	sub	r2,r6,r22
  80b050:	a0a2d83a 	srl	r17,r20,r2
  80b054:	802ad43a 	srli	r21,r16,16
  80b058:	e084d83a 	srl	r2,fp,r2
  80b05c:	a586983a 	sll	r3,r20,r22
  80b060:	8809883a 	mov	r4,r17
  80b064:	a80b883a 	mov	r5,r21
  80b068:	1886b03a 	or	r3,r3,r2
  80b06c:	d8c00115 	stw	r3,4(sp)
  80b070:	080c9fc0 	call	80c9fc <__udivsi3>
  80b074:	8809883a 	mov	r4,r17
  80b078:	a80b883a 	mov	r5,r21
  80b07c:	d8800415 	stw	r2,16(sp)
  80b080:	080ca040 	call	80ca04 <__umodsi3>
  80b084:	d9000117 	ldw	r4,4(sp)
  80b088:	d9400417 	ldw	r5,16(sp)
  80b08c:	1004943a 	slli	r2,r2,16
  80b090:	85ffffcc 	andi	r23,r16,65535
  80b094:	2006d43a 	srli	r3,r4,16
  80b098:	b963383a 	mul	r17,r23,r5
  80b09c:	10c4b03a 	or	r2,r2,r3
  80b0a0:	1440042e 	bgeu	r2,r17,80b0b4 <__udivdi3+0x4ac>
  80b0a4:	297fffc4 	addi	r5,r5,-1
  80b0a8:	1405883a 	add	r2,r2,r16
  80b0ac:	d9400415 	stw	r5,16(sp)
  80b0b0:	1400442e 	bgeu	r2,r16,80b1c4 <__udivdi3+0x5bc>
  80b0b4:	1463c83a 	sub	r17,r2,r17
  80b0b8:	8809883a 	mov	r4,r17
  80b0bc:	a80b883a 	mov	r5,r21
  80b0c0:	080c9fc0 	call	80c9fc <__udivsi3>
  80b0c4:	8809883a 	mov	r4,r17
  80b0c8:	a80b883a 	mov	r5,r21
  80b0cc:	1029883a 	mov	r20,r2
  80b0d0:	080ca040 	call	80ca04 <__umodsi3>
  80b0d4:	d9400117 	ldw	r5,4(sp)
  80b0d8:	1004943a 	slli	r2,r2,16
  80b0dc:	bd09383a 	mul	r4,r23,r20
  80b0e0:	28ffffcc 	andi	r3,r5,65535
  80b0e4:	10c6b03a 	or	r3,r2,r3
  80b0e8:	1900062e 	bgeu	r3,r4,80b104 <__udivdi3+0x4fc>
  80b0ec:	1c07883a 	add	r3,r3,r16
  80b0f0:	a53fffc4 	addi	r20,r20,-1
  80b0f4:	1c000336 	bltu	r3,r16,80b104 <__udivdi3+0x4fc>
  80b0f8:	1900022e 	bgeu	r3,r4,80b104 <__udivdi3+0x4fc>
  80b0fc:	a53fffc4 	addi	r20,r20,-1
  80b100:	1c07883a 	add	r3,r3,r16
  80b104:	d9400417 	ldw	r5,16(sp)
  80b108:	e5b8983a 	sll	fp,fp,r22
  80b10c:	1923c83a 	sub	r17,r3,r4
  80b110:	2804943a 	slli	r2,r5,16
  80b114:	a0a8b03a 	or	r20,r20,r2
  80b118:	dd000315 	stw	r20,12(sp)
  80b11c:	003ee106 	br	80aca4 <__udivdi3+0x9c>
  80b120:	2004943a 	slli	r2,r4,16
  80b124:	e5c8983a 	sll	r4,fp,r23
  80b128:	48ffffcc 	andi	r3,r9,65535
  80b12c:	10c5883a 	add	r2,r2,r3
  80b130:	20bfc22e 	bgeu	r4,r2,80b03c <__udivdi3+0x434>
  80b134:	40bfffc4 	addi	r2,r8,-1
  80b138:	0009883a 	mov	r4,zero
  80b13c:	003f1306 	br	80ad8c <__udivdi3+0x184>
  80b140:	01400204 	movi	r5,8
  80b144:	2805883a 	mov	r2,r5
  80b148:	003f0306 	br	80ad58 <__udivdi3+0x150>
  80b14c:	01400604 	movi	r5,24
  80b150:	2805883a 	mov	r2,r5
  80b154:	003f0006 	br	80ad58 <__udivdi3+0x150>
  80b158:	01400204 	movi	r5,8
  80b15c:	2805883a 	mov	r2,r5
  80b160:	003ec206 	br	80ac6c <__udivdi3+0x64>
  80b164:	01400604 	movi	r5,24
  80b168:	2805883a 	mov	r2,r5
  80b16c:	003ebf06 	br	80ac6c <__udivdi3+0x64>
  80b170:	01400204 	movi	r5,8
  80b174:	2805883a 	mov	r2,r5
  80b178:	003f1706 	br	80add8 <__udivdi3+0x1d0>
  80b17c:	01400604 	movi	r5,24
  80b180:	2805883a 	mov	r2,r5
  80b184:	003f1406 	br	80add8 <__udivdi3+0x1d0>
  80b188:	89ff962e 	bgeu	r17,r7,80afe4 <__udivdi3+0x3dc>
  80b18c:	8d63883a 	add	r17,r17,r21
  80b190:	843fffc4 	addi	r16,r16,-1
  80b194:	003f9306 	br	80afe4 <__udivdi3+0x3dc>
  80b198:	147f802e 	bgeu	r2,r17,80af9c <__udivdi3+0x394>
  80b19c:	a53fffc4 	addi	r20,r20,-1
  80b1a0:	1545883a 	add	r2,r2,r21
  80b1a4:	003f7d06 	br	80af9c <__udivdi3+0x394>
  80b1a8:	a53fffc4 	addi	r20,r20,-1
  80b1ac:	003ede06 	br	80ad28 <__udivdi3+0x120>
  80b1b0:	b5bfffc4 	addi	r22,r22,-1
  80b1b4:	1405883a 	add	r2,r2,r16
  80b1b8:	003f2806 	br	80ae5c <__udivdi3+0x254>
  80b1bc:	a53fffc4 	addi	r20,r20,-1
  80b1c0:	003f3706 	br	80aea0 <__udivdi3+0x298>
  80b1c4:	147fbb2e 	bgeu	r2,r17,80b0b4 <__udivdi3+0x4ac>
  80b1c8:	297fffc4 	addi	r5,r5,-1
  80b1cc:	1405883a 	add	r2,r2,r16
  80b1d0:	d9400415 	stw	r5,16(sp)
  80b1d4:	003fb706 	br	80b0b4 <__udivdi3+0x4ac>
  80b1d8:	b5bfffc4 	addi	r22,r22,-1
  80b1dc:	1405883a 	add	r2,r2,r16
  80b1e0:	003ec006 	br	80ace4 <__udivdi3+0xdc>

0080b1e4 <__umoddi3>:
  80b1e4:	defff104 	addi	sp,sp,-60
  80b1e8:	dd800b15 	stw	r22,44(sp)
  80b1ec:	dd000915 	stw	r20,36(sp)
  80b1f0:	dc000515 	stw	r16,20(sp)
  80b1f4:	dfc00e15 	stw	ra,56(sp)
  80b1f8:	df000d15 	stw	fp,52(sp)
  80b1fc:	ddc00c15 	stw	r23,48(sp)
  80b200:	dd400a15 	stw	r21,40(sp)
  80b204:	dcc00815 	stw	r19,32(sp)
  80b208:	dc800715 	stw	r18,28(sp)
  80b20c:	dc400615 	stw	r17,24(sp)
  80b210:	3021883a 	mov	r16,r6
  80b214:	202d883a 	mov	r22,r4
  80b218:	2829883a 	mov	r20,r5
  80b21c:	38002b1e 	bne	r7,zero,80b2cc <__umoddi3+0xe8>
  80b220:	29805036 	bltu	r5,r6,80b364 <__umoddi3+0x180>
  80b224:	30008a26 	beq	r6,zero,80b450 <__umoddi3+0x26c>
  80b228:	00bfffd4 	movui	r2,65535
  80b22c:	14008236 	bltu	r2,r16,80b438 <__umoddi3+0x254>
  80b230:	00803fc4 	movi	r2,255
  80b234:	14013636 	bltu	r2,r16,80b710 <__umoddi3+0x52c>
  80b238:	000b883a 	mov	r5,zero
  80b23c:	0005883a 	mov	r2,zero
  80b240:	8084d83a 	srl	r2,r16,r2
  80b244:	01002074 	movhi	r4,129
  80b248:	21044904 	addi	r4,r4,4388
  80b24c:	01800804 	movi	r6,32
  80b250:	1105883a 	add	r2,r2,r4
  80b254:	10c00003 	ldbu	r3,0(r2)
  80b258:	28c7883a 	add	r3,r5,r3
  80b25c:	30efc83a 	sub	r23,r6,r3
  80b260:	b800941e 	bne	r23,zero,80b4b4 <__umoddi3+0x2d0>
  80b264:	802ad43a 	srli	r21,r16,16
  80b268:	a423c83a 	sub	r17,r20,r16
  80b26c:	0039883a 	mov	fp,zero
  80b270:	853fffcc 	andi	r20,r16,65535
  80b274:	8809883a 	mov	r4,r17
  80b278:	a80b883a 	mov	r5,r21
  80b27c:	080c9fc0 	call	80c9fc <__udivsi3>
  80b280:	8809883a 	mov	r4,r17
  80b284:	a80b883a 	mov	r5,r21
  80b288:	a0a3383a 	mul	r17,r20,r2
  80b28c:	080ca040 	call	80ca04 <__umodsi3>
  80b290:	1004943a 	slli	r2,r2,16
  80b294:	b006d43a 	srli	r3,r22,16
  80b298:	10c4b03a 	or	r2,r2,r3
  80b29c:	1440032e 	bgeu	r2,r17,80b2ac <__umoddi3+0xc8>
  80b2a0:	1405883a 	add	r2,r2,r16
  80b2a4:	14000136 	bltu	r2,r16,80b2ac <__umoddi3+0xc8>
  80b2a8:	14413536 	bltu	r2,r17,80b780 <__umoddi3+0x59c>
  80b2ac:	1463c83a 	sub	r17,r2,r17
  80b2b0:	8809883a 	mov	r4,r17
  80b2b4:	a80b883a 	mov	r5,r21
  80b2b8:	080c9fc0 	call	80c9fc <__udivsi3>
  80b2bc:	8809883a 	mov	r4,r17
  80b2c0:	a0a3383a 	mul	r17,r20,r2
  80b2c4:	a80b883a 	mov	r5,r21
  80b2c8:	00004d06 	br	80b400 <__umoddi3+0x21c>
  80b2cc:	380d883a 	mov	r6,r7
  80b2d0:	29c0102e 	bgeu	r5,r7,80b314 <__umoddi3+0x130>
  80b2d4:	2011883a 	mov	r8,r4
  80b2d8:	2813883a 	mov	r9,r5
  80b2dc:	4005883a 	mov	r2,r8
  80b2e0:	4807883a 	mov	r3,r9
  80b2e4:	dfc00e17 	ldw	ra,56(sp)
  80b2e8:	df000d17 	ldw	fp,52(sp)
  80b2ec:	ddc00c17 	ldw	r23,48(sp)
  80b2f0:	dd800b17 	ldw	r22,44(sp)
  80b2f4:	dd400a17 	ldw	r21,40(sp)
  80b2f8:	dd000917 	ldw	r20,36(sp)
  80b2fc:	dcc00817 	ldw	r19,32(sp)
  80b300:	dc800717 	ldw	r18,28(sp)
  80b304:	dc400617 	ldw	r17,24(sp)
  80b308:	dc000517 	ldw	r16,20(sp)
  80b30c:	dec00f04 	addi	sp,sp,60
  80b310:	f800283a 	ret
  80b314:	00bfffd4 	movui	r2,65535
  80b318:	11c05a36 	bltu	r2,r7,80b484 <__umoddi3+0x2a0>
  80b31c:	00803fc4 	movi	r2,255
  80b320:	11c0fe36 	bltu	r2,r7,80b71c <__umoddi3+0x538>
  80b324:	000b883a 	mov	r5,zero
  80b328:	0005883a 	mov	r2,zero
  80b32c:	3084d83a 	srl	r2,r6,r2
  80b330:	01002074 	movhi	r4,129
  80b334:	21044904 	addi	r4,r4,4388
  80b338:	01c00804 	movi	r7,32
  80b33c:	1105883a 	add	r2,r2,r4
  80b340:	10c00003 	ldbu	r3,0(r2)
  80b344:	28c7883a 	add	r3,r5,r3
  80b348:	38ebc83a 	sub	r21,r7,r3
  80b34c:	a800851e 	bne	r21,zero,80b564 <__umoddi3+0x380>
  80b350:	35005236 	bltu	r6,r20,80b49c <__umoddi3+0x2b8>
  80b354:	b400512e 	bgeu	r22,r16,80b49c <__umoddi3+0x2b8>
  80b358:	b011883a 	mov	r8,r22
  80b35c:	a013883a 	mov	r9,r20
  80b360:	003fde06 	br	80b2dc <__umoddi3+0xf8>
  80b364:	00bfffd4 	movui	r2,65535
  80b368:	11804036 	bltu	r2,r6,80b46c <__umoddi3+0x288>
  80b36c:	00803fc4 	movi	r2,255
  80b370:	1180ed36 	bltu	r2,r6,80b728 <__umoddi3+0x544>
  80b374:	000b883a 	mov	r5,zero
  80b378:	0005883a 	mov	r2,zero
  80b37c:	8084d83a 	srl	r2,r16,r2
  80b380:	01002074 	movhi	r4,129
  80b384:	21044904 	addi	r4,r4,4388
  80b388:	01800804 	movi	r6,32
  80b38c:	1105883a 	add	r2,r2,r4
  80b390:	10c00003 	ldbu	r3,0(r2)
  80b394:	28c7883a 	add	r3,r5,r3
  80b398:	30c7c83a 	sub	r3,r6,r3
  80b39c:	1800bf1e 	bne	r3,zero,80b69c <__umoddi3+0x4b8>
  80b3a0:	0039883a 	mov	fp,zero
  80b3a4:	802ad43a 	srli	r21,r16,16
  80b3a8:	a009883a 	mov	r4,r20
  80b3ac:	85ffffcc 	andi	r23,r16,65535
  80b3b0:	a80b883a 	mov	r5,r21
  80b3b4:	080c9fc0 	call	80c9fc <__udivsi3>
  80b3b8:	a009883a 	mov	r4,r20
  80b3bc:	a80b883a 	mov	r5,r21
  80b3c0:	b8a3383a 	mul	r17,r23,r2
  80b3c4:	080ca040 	call	80ca04 <__umodsi3>
  80b3c8:	1004943a 	slli	r2,r2,16
  80b3cc:	b006d43a 	srli	r3,r22,16
  80b3d0:	10c4b03a 	or	r2,r2,r3
  80b3d4:	1440032e 	bgeu	r2,r17,80b3e4 <__umoddi3+0x200>
  80b3d8:	1405883a 	add	r2,r2,r16
  80b3dc:	14000136 	bltu	r2,r16,80b3e4 <__umoddi3+0x200>
  80b3e0:	1440e536 	bltu	r2,r17,80b778 <__umoddi3+0x594>
  80b3e4:	1463c83a 	sub	r17,r2,r17
  80b3e8:	8809883a 	mov	r4,r17
  80b3ec:	a80b883a 	mov	r5,r21
  80b3f0:	080c9fc0 	call	80c9fc <__udivsi3>
  80b3f4:	8809883a 	mov	r4,r17
  80b3f8:	b8a3383a 	mul	r17,r23,r2
  80b3fc:	a80b883a 	mov	r5,r21
  80b400:	080ca040 	call	80ca04 <__umodsi3>
  80b404:	1004943a 	slli	r2,r2,16
  80b408:	b0ffffcc 	andi	r3,r22,65535
  80b40c:	10c4b03a 	or	r2,r2,r3
  80b410:	1440042e 	bgeu	r2,r17,80b424 <__umoddi3+0x240>
  80b414:	1405883a 	add	r2,r2,r16
  80b418:	14000236 	bltu	r2,r16,80b424 <__umoddi3+0x240>
  80b41c:	1440012e 	bgeu	r2,r17,80b424 <__umoddi3+0x240>
  80b420:	1405883a 	add	r2,r2,r16
  80b424:	1445c83a 	sub	r2,r2,r17
  80b428:	1724d83a 	srl	r18,r2,fp
  80b42c:	0013883a 	mov	r9,zero
  80b430:	9011883a 	mov	r8,r18
  80b434:	003fa906 	br	80b2dc <__umoddi3+0xf8>
  80b438:	00804034 	movhi	r2,256
  80b43c:	10bfffc4 	addi	r2,r2,-1
  80b440:	1400b036 	bltu	r2,r16,80b704 <__umoddi3+0x520>
  80b444:	01400404 	movi	r5,16
  80b448:	2805883a 	mov	r2,r5
  80b44c:	003f7c06 	br	80b240 <__umoddi3+0x5c>
  80b450:	01000044 	movi	r4,1
  80b454:	000b883a 	mov	r5,zero
  80b458:	080c9fc0 	call	80c9fc <__udivsi3>
  80b45c:	1021883a 	mov	r16,r2
  80b460:	00bfffd4 	movui	r2,65535
  80b464:	143ff436 	bltu	r2,r16,80b438 <__umoddi3+0x254>
  80b468:	003f7106 	br	80b230 <__umoddi3+0x4c>
  80b46c:	00804034 	movhi	r2,256
  80b470:	10bfffc4 	addi	r2,r2,-1
  80b474:	1180af36 	bltu	r2,r6,80b734 <__umoddi3+0x550>
  80b478:	01400404 	movi	r5,16
  80b47c:	2805883a 	mov	r2,r5
  80b480:	003fbe06 	br	80b37c <__umoddi3+0x198>
  80b484:	00804034 	movhi	r2,256
  80b488:	10bfffc4 	addi	r2,r2,-1
  80b48c:	11c0ac36 	bltu	r2,r7,80b740 <__umoddi3+0x55c>
  80b490:	01400404 	movi	r5,16
  80b494:	2805883a 	mov	r2,r5
  80b498:	003fa406 	br	80b32c <__umoddi3+0x148>
  80b49c:	b409c83a 	sub	r4,r22,r16
  80b4a0:	b105803a 	cmpltu	r2,r22,r4
  80b4a4:	a187c83a 	sub	r3,r20,r6
  80b4a8:	18a9c83a 	sub	r20,r3,r2
  80b4ac:	202d883a 	mov	r22,r4
  80b4b0:	003fa906 	br	80b358 <__umoddi3+0x174>
  80b4b4:	85e0983a 	sll	r16,r16,r23
  80b4b8:	35c5c83a 	sub	r2,r6,r23
  80b4bc:	a0a2d83a 	srl	r17,r20,r2
  80b4c0:	802ad43a 	srli	r21,r16,16
  80b4c4:	b084d83a 	srl	r2,r22,r2
  80b4c8:	a5c6983a 	sll	r3,r20,r23
  80b4cc:	8809883a 	mov	r4,r17
  80b4d0:	a80b883a 	mov	r5,r21
  80b4d4:	1886b03a 	or	r3,r3,r2
  80b4d8:	d8c00115 	stw	r3,4(sp)
  80b4dc:	853fffcc 	andi	r20,r16,65535
  80b4e0:	080c9fc0 	call	80c9fc <__udivsi3>
  80b4e4:	8809883a 	mov	r4,r17
  80b4e8:	a80b883a 	mov	r5,r21
  80b4ec:	a0a3383a 	mul	r17,r20,r2
  80b4f0:	080ca040 	call	80ca04 <__umodsi3>
  80b4f4:	d9000117 	ldw	r4,4(sp)
  80b4f8:	1004943a 	slli	r2,r2,16
  80b4fc:	b839883a 	mov	fp,r23
  80b500:	2006d43a 	srli	r3,r4,16
  80b504:	10c4b03a 	or	r2,r2,r3
  80b508:	1440022e 	bgeu	r2,r17,80b514 <__umoddi3+0x330>
  80b50c:	1405883a 	add	r2,r2,r16
  80b510:	1400962e 	bgeu	r2,r16,80b76c <__umoddi3+0x588>
  80b514:	1463c83a 	sub	r17,r2,r17
  80b518:	8809883a 	mov	r4,r17
  80b51c:	a80b883a 	mov	r5,r21
  80b520:	080c9fc0 	call	80c9fc <__udivsi3>
  80b524:	8809883a 	mov	r4,r17
  80b528:	a80b883a 	mov	r5,r21
  80b52c:	a0a3383a 	mul	r17,r20,r2
  80b530:	080ca040 	call	80ca04 <__umodsi3>
  80b534:	d9400117 	ldw	r5,4(sp)
  80b538:	1004943a 	slli	r2,r2,16
  80b53c:	28ffffcc 	andi	r3,r5,65535
  80b540:	10c4b03a 	or	r2,r2,r3
  80b544:	1440042e 	bgeu	r2,r17,80b558 <__umoddi3+0x374>
  80b548:	1405883a 	add	r2,r2,r16
  80b54c:	14000236 	bltu	r2,r16,80b558 <__umoddi3+0x374>
  80b550:	1440012e 	bgeu	r2,r17,80b558 <__umoddi3+0x374>
  80b554:	1405883a 	add	r2,r2,r16
  80b558:	b5ec983a 	sll	r22,r22,r23
  80b55c:	1463c83a 	sub	r17,r2,r17
  80b560:	003f4406 	br	80b274 <__umoddi3+0x90>
  80b564:	3d4fc83a 	sub	r7,r7,r21
  80b568:	3546983a 	sll	r3,r6,r21
  80b56c:	81c4d83a 	srl	r2,r16,r7
  80b570:	a1e2d83a 	srl	r17,r20,r7
  80b574:	a54c983a 	sll	r6,r20,r21
  80b578:	18aeb03a 	or	r23,r3,r2
  80b57c:	b828d43a 	srli	r20,r23,16
  80b580:	b1c4d83a 	srl	r2,r22,r7
  80b584:	8809883a 	mov	r4,r17
  80b588:	a00b883a 	mov	r5,r20
  80b58c:	308cb03a 	or	r6,r6,r2
  80b590:	d9c00315 	stw	r7,12(sp)
  80b594:	d9800215 	stw	r6,8(sp)
  80b598:	080c9fc0 	call	80c9fc <__udivsi3>
  80b59c:	8809883a 	mov	r4,r17
  80b5a0:	a00b883a 	mov	r5,r20
  80b5a4:	1039883a 	mov	fp,r2
  80b5a8:	080ca040 	call	80ca04 <__umodsi3>
  80b5ac:	b8ffffcc 	andi	r3,r23,65535
  80b5b0:	d8c00415 	stw	r3,16(sp)
  80b5b4:	d9000217 	ldw	r4,8(sp)
  80b5b8:	d9400417 	ldw	r5,16(sp)
  80b5bc:	1004943a 	slli	r2,r2,16
  80b5c0:	2006d43a 	srli	r3,r4,16
  80b5c4:	8560983a 	sll	r16,r16,r21
  80b5c8:	2f23383a 	mul	r17,r5,fp
  80b5cc:	10c4b03a 	or	r2,r2,r3
  80b5d0:	dc000015 	stw	r16,0(sp)
  80b5d4:	b56c983a 	sll	r22,r22,r21
  80b5d8:	1440032e 	bgeu	r2,r17,80b5e8 <__umoddi3+0x404>
  80b5dc:	15c5883a 	add	r2,r2,r23
  80b5e0:	e73fffc4 	addi	fp,fp,-1
  80b5e4:	15c05d2e 	bgeu	r2,r23,80b75c <__umoddi3+0x578>
  80b5e8:	1463c83a 	sub	r17,r2,r17
  80b5ec:	8809883a 	mov	r4,r17
  80b5f0:	a00b883a 	mov	r5,r20
  80b5f4:	080c9fc0 	call	80c9fc <__udivsi3>
  80b5f8:	8809883a 	mov	r4,r17
  80b5fc:	a00b883a 	mov	r5,r20
  80b600:	1021883a 	mov	r16,r2
  80b604:	080ca040 	call	80ca04 <__umodsi3>
  80b608:	d8c00417 	ldw	r3,16(sp)
  80b60c:	d9000217 	ldw	r4,8(sp)
  80b610:	1004943a 	slli	r2,r2,16
  80b614:	1c23383a 	mul	r17,r3,r16
  80b618:	20ffffcc 	andi	r3,r4,65535
  80b61c:	10ceb03a 	or	r7,r2,r3
  80b620:	3c40032e 	bgeu	r7,r17,80b630 <__umoddi3+0x44c>
  80b624:	3dcf883a 	add	r7,r7,r23
  80b628:	843fffc4 	addi	r16,r16,-1
  80b62c:	3dc0472e 	bgeu	r7,r23,80b74c <__umoddi3+0x568>
  80b630:	e004943a 	slli	r2,fp,16
  80b634:	d9400017 	ldw	r5,0(sp)
  80b638:	3c4fc83a 	sub	r7,r7,r17
  80b63c:	8084b03a 	or	r2,r16,r2
  80b640:	28ffffcc 	andi	r3,r5,65535
  80b644:	280cd43a 	srli	r6,r5,16
  80b648:	100ad43a 	srli	r5,r2,16
  80b64c:	10bfffcc 	andi	r2,r2,65535
  80b650:	10d1383a 	mul	r8,r2,r3
  80b654:	28c7383a 	mul	r3,r5,r3
  80b658:	1185383a 	mul	r2,r2,r6
  80b65c:	4008d43a 	srli	r4,r8,16
  80b660:	298b383a 	mul	r5,r5,r6
  80b664:	10c5883a 	add	r2,r2,r3
  80b668:	2089883a 	add	r4,r4,r2
  80b66c:	20c0022e 	bgeu	r4,r3,80b678 <__umoddi3+0x494>
  80b670:	00800074 	movhi	r2,1
  80b674:	288b883a 	add	r5,r5,r2
  80b678:	2004d43a 	srli	r2,r4,16
  80b67c:	2008943a 	slli	r4,r4,16
  80b680:	40ffffcc 	andi	r3,r8,65535
  80b684:	288b883a 	add	r5,r5,r2
  80b688:	20c9883a 	add	r4,r4,r3
  80b68c:	39400b36 	bltu	r7,r5,80b6bc <__umoddi3+0x4d8>
  80b690:	39403d26 	beq	r7,r5,80b788 <__umoddi3+0x5a4>
  80b694:	394bc83a 	sub	r5,r7,r5
  80b698:	00000f06 	br	80b6d8 <__umoddi3+0x4f4>
  80b69c:	30c5c83a 	sub	r2,r6,r3
  80b6a0:	1839883a 	mov	fp,r3
  80b6a4:	b084d83a 	srl	r2,r22,r2
  80b6a8:	a0c6983a 	sll	r3,r20,r3
  80b6ac:	8720983a 	sll	r16,r16,fp
  80b6b0:	b72c983a 	sll	r22,r22,fp
  80b6b4:	18a8b03a 	or	r20,r3,r2
  80b6b8:	003f3a06 	br	80b3a4 <__umoddi3+0x1c0>
  80b6bc:	d8c00017 	ldw	r3,0(sp)
  80b6c0:	20c5c83a 	sub	r2,r4,r3
  80b6c4:	2089803a 	cmpltu	r4,r4,r2
  80b6c8:	2dc7c83a 	sub	r3,r5,r23
  80b6cc:	1907c83a 	sub	r3,r3,r4
  80b6d0:	38cbc83a 	sub	r5,r7,r3
  80b6d4:	1009883a 	mov	r4,r2
  80b6d8:	b105c83a 	sub	r2,r22,r4
  80b6dc:	b087803a 	cmpltu	r3,r22,r2
  80b6e0:	28c7c83a 	sub	r3,r5,r3
  80b6e4:	d9400317 	ldw	r5,12(sp)
  80b6e8:	1544d83a 	srl	r2,r2,r21
  80b6ec:	1948983a 	sll	r4,r3,r5
  80b6f0:	1d46d83a 	srl	r3,r3,r21
  80b6f4:	20a4b03a 	or	r18,r4,r2
  80b6f8:	9011883a 	mov	r8,r18
  80b6fc:	1813883a 	mov	r9,r3
  80b700:	003ef606 	br	80b2dc <__umoddi3+0xf8>
  80b704:	01400604 	movi	r5,24
  80b708:	2805883a 	mov	r2,r5
  80b70c:	003ecc06 	br	80b240 <__umoddi3+0x5c>
  80b710:	01400204 	movi	r5,8
  80b714:	2805883a 	mov	r2,r5
  80b718:	003ec906 	br	80b240 <__umoddi3+0x5c>
  80b71c:	01400204 	movi	r5,8
  80b720:	2805883a 	mov	r2,r5
  80b724:	003f0106 	br	80b32c <__umoddi3+0x148>
  80b728:	01400204 	movi	r5,8
  80b72c:	2805883a 	mov	r2,r5
  80b730:	003f1206 	br	80b37c <__umoddi3+0x198>
  80b734:	01400604 	movi	r5,24
  80b738:	2805883a 	mov	r2,r5
  80b73c:	003f0f06 	br	80b37c <__umoddi3+0x198>
  80b740:	01400604 	movi	r5,24
  80b744:	2805883a 	mov	r2,r5
  80b748:	003ef806 	br	80b32c <__umoddi3+0x148>
  80b74c:	3c7fb82e 	bgeu	r7,r17,80b630 <__umoddi3+0x44c>
  80b750:	843fffc4 	addi	r16,r16,-1
  80b754:	3dcf883a 	add	r7,r7,r23
  80b758:	003fb506 	br	80b630 <__umoddi3+0x44c>
  80b75c:	147fa22e 	bgeu	r2,r17,80b5e8 <__umoddi3+0x404>
  80b760:	e73fffc4 	addi	fp,fp,-1
  80b764:	15c5883a 	add	r2,r2,r23
  80b768:	003f9f06 	br	80b5e8 <__umoddi3+0x404>
  80b76c:	147f692e 	bgeu	r2,r17,80b514 <__umoddi3+0x330>
  80b770:	1405883a 	add	r2,r2,r16
  80b774:	003f6706 	br	80b514 <__umoddi3+0x330>
  80b778:	1405883a 	add	r2,r2,r16
  80b77c:	003f1906 	br	80b3e4 <__umoddi3+0x200>
  80b780:	1405883a 	add	r2,r2,r16
  80b784:	003ec906 	br	80b2ac <__umoddi3+0xc8>
  80b788:	b13fcc36 	bltu	r22,r4,80b6bc <__umoddi3+0x4d8>
  80b78c:	000b883a 	mov	r5,zero
  80b790:	003fd106 	br	80b6d8 <__umoddi3+0x4f4>

0080b794 <_fpadd_parts>:
  80b794:	defff804 	addi	sp,sp,-32
  80b798:	dcc00315 	stw	r19,12(sp)
  80b79c:	2027883a 	mov	r19,r4
  80b7a0:	21000017 	ldw	r4,0(r4)
  80b7a4:	00c00044 	movi	r3,1
  80b7a8:	dd400515 	stw	r21,20(sp)
  80b7ac:	dd000415 	stw	r20,16(sp)
  80b7b0:	ddc00715 	stw	r23,28(sp)
  80b7b4:	dd800615 	stw	r22,24(sp)
  80b7b8:	dc800215 	stw	r18,8(sp)
  80b7bc:	dc400115 	stw	r17,4(sp)
  80b7c0:	dc000015 	stw	r16,0(sp)
  80b7c4:	282b883a 	mov	r21,r5
  80b7c8:	3029883a 	mov	r20,r6
  80b7cc:	1900632e 	bgeu	r3,r4,80b95c <_fpadd_parts+0x1c8>
  80b7d0:	28800017 	ldw	r2,0(r5)
  80b7d4:	1880812e 	bgeu	r3,r2,80b9dc <_fpadd_parts+0x248>
  80b7d8:	00c00104 	movi	r3,4
  80b7dc:	20c0dc26 	beq	r4,r3,80bb50 <_fpadd_parts+0x3bc>
  80b7e0:	10c07e26 	beq	r2,r3,80b9dc <_fpadd_parts+0x248>
  80b7e4:	00c00084 	movi	r3,2
  80b7e8:	10c06726 	beq	r2,r3,80b988 <_fpadd_parts+0x1f4>
  80b7ec:	20c07b26 	beq	r4,r3,80b9dc <_fpadd_parts+0x248>
  80b7f0:	9dc00217 	ldw	r23,8(r19)
  80b7f4:	28c00217 	ldw	r3,8(r5)
  80b7f8:	9c400317 	ldw	r17,12(r19)
  80b7fc:	2bc00317 	ldw	r15,12(r5)
  80b800:	b8cdc83a 	sub	r6,r23,r3
  80b804:	9c800417 	ldw	r18,16(r19)
  80b808:	2c000417 	ldw	r16,16(r5)
  80b80c:	3009883a 	mov	r4,r6
  80b810:	30009716 	blt	r6,zero,80ba70 <_fpadd_parts+0x2dc>
  80b814:	00800fc4 	movi	r2,63
  80b818:	11806b16 	blt	r2,r6,80b9c8 <_fpadd_parts+0x234>
  80b81c:	0100a40e 	bge	zero,r4,80bab0 <_fpadd_parts+0x31c>
  80b820:	35bff804 	addi	r22,r6,-32
  80b824:	b000bc16 	blt	r22,zero,80bb18 <_fpadd_parts+0x384>
  80b828:	8596d83a 	srl	r11,r16,r22
  80b82c:	0019883a 	mov	r12,zero
  80b830:	0013883a 	mov	r9,zero
  80b834:	01000044 	movi	r4,1
  80b838:	0015883a 	mov	r10,zero
  80b83c:	b000be16 	blt	r22,zero,80bb38 <_fpadd_parts+0x3a4>
  80b840:	2590983a 	sll	r8,r4,r22
  80b844:	000f883a 	mov	r7,zero
  80b848:	00bfffc4 	movi	r2,-1
  80b84c:	3889883a 	add	r4,r7,r2
  80b850:	408b883a 	add	r5,r8,r2
  80b854:	21cd803a 	cmpltu	r6,r4,r7
  80b858:	314b883a 	add	r5,r6,r5
  80b85c:	7904703a 	and	r2,r15,r4
  80b860:	8146703a 	and	r3,r16,r5
  80b864:	10c4b03a 	or	r2,r2,r3
  80b868:	10000226 	beq	r2,zero,80b874 <_fpadd_parts+0xe0>
  80b86c:	02400044 	movi	r9,1
  80b870:	0015883a 	mov	r10,zero
  80b874:	5a5eb03a 	or	r15,r11,r9
  80b878:	62a0b03a 	or	r16,r12,r10
  80b87c:	99400117 	ldw	r5,4(r19)
  80b880:	a8800117 	ldw	r2,4(r21)
  80b884:	28806e26 	beq	r5,r2,80ba40 <_fpadd_parts+0x2ac>
  80b888:	28006626 	beq	r5,zero,80ba24 <_fpadd_parts+0x290>
  80b88c:	7c45c83a 	sub	r2,r15,r17
  80b890:	7889803a 	cmpltu	r4,r15,r2
  80b894:	8487c83a 	sub	r3,r16,r18
  80b898:	1909c83a 	sub	r4,r3,r4
  80b89c:	100d883a 	mov	r6,r2
  80b8a0:	200f883a 	mov	r7,r4
  80b8a4:	38007716 	blt	r7,zero,80ba84 <_fpadd_parts+0x2f0>
  80b8a8:	a5c00215 	stw	r23,8(r20)
  80b8ac:	a1c00415 	stw	r7,16(r20)
  80b8b0:	a0000115 	stw	zero,4(r20)
  80b8b4:	a1800315 	stw	r6,12(r20)
  80b8b8:	a2000317 	ldw	r8,12(r20)
  80b8bc:	a2400417 	ldw	r9,16(r20)
  80b8c0:	00bfffc4 	movi	r2,-1
  80b8c4:	408b883a 	add	r5,r8,r2
  80b8c8:	2a09803a 	cmpltu	r4,r5,r8
  80b8cc:	488d883a 	add	r6,r9,r2
  80b8d0:	01c40034 	movhi	r7,4096
  80b8d4:	39ffffc4 	addi	r7,r7,-1
  80b8d8:	218d883a 	add	r6,r4,r6
  80b8dc:	39801736 	bltu	r7,r6,80b93c <_fpadd_parts+0x1a8>
  80b8e0:	31c06526 	beq	r6,r7,80ba78 <_fpadd_parts+0x2e4>
  80b8e4:	a3000217 	ldw	r12,8(r20)
  80b8e8:	4209883a 	add	r4,r8,r8
  80b8ec:	00bfffc4 	movi	r2,-1
  80b8f0:	220f803a 	cmpltu	r7,r4,r8
  80b8f4:	4a4b883a 	add	r5,r9,r9
  80b8f8:	394f883a 	add	r7,r7,r5
  80b8fc:	2095883a 	add	r10,r4,r2
  80b900:	3897883a 	add	r11,r7,r2
  80b904:	510d803a 	cmpltu	r6,r10,r4
  80b908:	6099883a 	add	r12,r12,r2
  80b90c:	32d7883a 	add	r11,r6,r11
  80b910:	00840034 	movhi	r2,4096
  80b914:	10bfffc4 	addi	r2,r2,-1
  80b918:	2011883a 	mov	r8,r4
  80b91c:	3813883a 	mov	r9,r7
  80b920:	a1000315 	stw	r4,12(r20)
  80b924:	a1c00415 	stw	r7,16(r20)
  80b928:	a3000215 	stw	r12,8(r20)
  80b92c:	12c00336 	bltu	r2,r11,80b93c <_fpadd_parts+0x1a8>
  80b930:	58bfed1e 	bne	r11,r2,80b8e8 <_fpadd_parts+0x154>
  80b934:	00bfff84 	movi	r2,-2
  80b938:	12bfeb2e 	bgeu	r2,r10,80b8e8 <_fpadd_parts+0x154>
  80b93c:	a2800417 	ldw	r10,16(r20)
  80b940:	008000c4 	movi	r2,3
  80b944:	00c80034 	movhi	r3,8192
  80b948:	18ffffc4 	addi	r3,r3,-1
  80b94c:	a2400317 	ldw	r9,12(r20)
  80b950:	a0800015 	stw	r2,0(r20)
  80b954:	1a802336 	bltu	r3,r10,80b9e4 <_fpadd_parts+0x250>
  80b958:	a027883a 	mov	r19,r20
  80b95c:	9805883a 	mov	r2,r19
  80b960:	ddc00717 	ldw	r23,28(sp)
  80b964:	dd800617 	ldw	r22,24(sp)
  80b968:	dd400517 	ldw	r21,20(sp)
  80b96c:	dd000417 	ldw	r20,16(sp)
  80b970:	dcc00317 	ldw	r19,12(sp)
  80b974:	dc800217 	ldw	r18,8(sp)
  80b978:	dc400117 	ldw	r17,4(sp)
  80b97c:	dc000017 	ldw	r16,0(sp)
  80b980:	dec00804 	addi	sp,sp,32
  80b984:	f800283a 	ret
  80b988:	20fff41e 	bne	r4,r3,80b95c <_fpadd_parts+0x1c8>
  80b98c:	31000015 	stw	r4,0(r6)
  80b990:	98800117 	ldw	r2,4(r19)
  80b994:	30800115 	stw	r2,4(r6)
  80b998:	98c00217 	ldw	r3,8(r19)
  80b99c:	30c00215 	stw	r3,8(r6)
  80b9a0:	98800317 	ldw	r2,12(r19)
  80b9a4:	30800315 	stw	r2,12(r6)
  80b9a8:	98c00417 	ldw	r3,16(r19)
  80b9ac:	30c00415 	stw	r3,16(r6)
  80b9b0:	98800117 	ldw	r2,4(r19)
  80b9b4:	28c00117 	ldw	r3,4(r5)
  80b9b8:	3027883a 	mov	r19,r6
  80b9bc:	10c4703a 	and	r2,r2,r3
  80b9c0:	30800115 	stw	r2,4(r6)
  80b9c4:	003fe506 	br	80b95c <_fpadd_parts+0x1c8>
  80b9c8:	1dc02616 	blt	r3,r23,80ba64 <_fpadd_parts+0x2d0>
  80b9cc:	0023883a 	mov	r17,zero
  80b9d0:	182f883a 	mov	r23,r3
  80b9d4:	0025883a 	mov	r18,zero
  80b9d8:	003fa806 	br	80b87c <_fpadd_parts+0xe8>
  80b9dc:	a827883a 	mov	r19,r21
  80b9e0:	003fde06 	br	80b95c <_fpadd_parts+0x1c8>
  80b9e4:	01800044 	movi	r6,1
  80b9e8:	500497fa 	slli	r2,r10,31
  80b9ec:	4808d07a 	srli	r4,r9,1
  80b9f0:	518ad83a 	srl	r5,r10,r6
  80b9f4:	a2000217 	ldw	r8,8(r20)
  80b9f8:	1108b03a 	or	r4,r2,r4
  80b9fc:	0007883a 	mov	r3,zero
  80ba00:	4984703a 	and	r2,r9,r6
  80ba04:	208cb03a 	or	r6,r4,r2
  80ba08:	28ceb03a 	or	r7,r5,r3
  80ba0c:	42000044 	addi	r8,r8,1
  80ba10:	a027883a 	mov	r19,r20
  80ba14:	a1c00415 	stw	r7,16(r20)
  80ba18:	a2000215 	stw	r8,8(r20)
  80ba1c:	a1800315 	stw	r6,12(r20)
  80ba20:	003fce06 	br	80b95c <_fpadd_parts+0x1c8>
  80ba24:	8bc5c83a 	sub	r2,r17,r15
  80ba28:	8889803a 	cmpltu	r4,r17,r2
  80ba2c:	9407c83a 	sub	r3,r18,r16
  80ba30:	1909c83a 	sub	r4,r3,r4
  80ba34:	100d883a 	mov	r6,r2
  80ba38:	200f883a 	mov	r7,r4
  80ba3c:	003f9906 	br	80b8a4 <_fpadd_parts+0x110>
  80ba40:	7c45883a 	add	r2,r15,r17
  80ba44:	13c9803a 	cmpltu	r4,r2,r15
  80ba48:	8487883a 	add	r3,r16,r18
  80ba4c:	20c9883a 	add	r4,r4,r3
  80ba50:	a1400115 	stw	r5,4(r20)
  80ba54:	a5c00215 	stw	r23,8(r20)
  80ba58:	a0800315 	stw	r2,12(r20)
  80ba5c:	a1000415 	stw	r4,16(r20)
  80ba60:	003fb606 	br	80b93c <_fpadd_parts+0x1a8>
  80ba64:	001f883a 	mov	r15,zero
  80ba68:	0021883a 	mov	r16,zero
  80ba6c:	003f8306 	br	80b87c <_fpadd_parts+0xe8>
  80ba70:	018dc83a 	sub	r6,zero,r6
  80ba74:	003f6706 	br	80b814 <_fpadd_parts+0x80>
  80ba78:	00bfff84 	movi	r2,-2
  80ba7c:	117faf36 	bltu	r2,r5,80b93c <_fpadd_parts+0x1a8>
  80ba80:	003f9806 	br	80b8e4 <_fpadd_parts+0x150>
  80ba84:	0005883a 	mov	r2,zero
  80ba88:	1189c83a 	sub	r4,r2,r6
  80ba8c:	1105803a 	cmpltu	r2,r2,r4
  80ba90:	01cbc83a 	sub	r5,zero,r7
  80ba94:	2885c83a 	sub	r2,r5,r2
  80ba98:	01800044 	movi	r6,1
  80ba9c:	a1800115 	stw	r6,4(r20)
  80baa0:	a5c00215 	stw	r23,8(r20)
  80baa4:	a1000315 	stw	r4,12(r20)
  80baa8:	a0800415 	stw	r2,16(r20)
  80baac:	003f8206 	br	80b8b8 <_fpadd_parts+0x124>
  80bab0:	203f7226 	beq	r4,zero,80b87c <_fpadd_parts+0xe8>
  80bab4:	35bff804 	addi	r22,r6,-32
  80bab8:	b9af883a 	add	r23,r23,r6
  80babc:	b0003116 	blt	r22,zero,80bb84 <_fpadd_parts+0x3f0>
  80bac0:	959ad83a 	srl	r13,r18,r22
  80bac4:	001d883a 	mov	r14,zero
  80bac8:	000f883a 	mov	r7,zero
  80bacc:	01000044 	movi	r4,1
  80bad0:	0011883a 	mov	r8,zero
  80bad4:	b0002516 	blt	r22,zero,80bb6c <_fpadd_parts+0x3d8>
  80bad8:	2594983a 	sll	r10,r4,r22
  80badc:	0013883a 	mov	r9,zero
  80bae0:	00bfffc4 	movi	r2,-1
  80bae4:	4889883a 	add	r4,r9,r2
  80bae8:	508b883a 	add	r5,r10,r2
  80baec:	224d803a 	cmpltu	r6,r4,r9
  80baf0:	314b883a 	add	r5,r6,r5
  80baf4:	8904703a 	and	r2,r17,r4
  80baf8:	9146703a 	and	r3,r18,r5
  80bafc:	10c4b03a 	or	r2,r2,r3
  80bb00:	10000226 	beq	r2,zero,80bb0c <_fpadd_parts+0x378>
  80bb04:	01c00044 	movi	r7,1
  80bb08:	0011883a 	mov	r8,zero
  80bb0c:	69e2b03a 	or	r17,r13,r7
  80bb10:	7224b03a 	or	r18,r14,r8
  80bb14:	003f5906 	br	80b87c <_fpadd_parts+0xe8>
  80bb18:	8407883a 	add	r3,r16,r16
  80bb1c:	008007c4 	movi	r2,31
  80bb20:	1185c83a 	sub	r2,r2,r6
  80bb24:	1886983a 	sll	r3,r3,r2
  80bb28:	7996d83a 	srl	r11,r15,r6
  80bb2c:	8198d83a 	srl	r12,r16,r6
  80bb30:	1ad6b03a 	or	r11,r3,r11
  80bb34:	003f3e06 	br	80b830 <_fpadd_parts+0x9c>
  80bb38:	2006d07a 	srli	r3,r4,1
  80bb3c:	008007c4 	movi	r2,31
  80bb40:	1185c83a 	sub	r2,r2,r6
  80bb44:	1890d83a 	srl	r8,r3,r2
  80bb48:	218e983a 	sll	r7,r4,r6
  80bb4c:	003f3e06 	br	80b848 <_fpadd_parts+0xb4>
  80bb50:	113f821e 	bne	r2,r4,80b95c <_fpadd_parts+0x1c8>
  80bb54:	28c00117 	ldw	r3,4(r5)
  80bb58:	98800117 	ldw	r2,4(r19)
  80bb5c:	10ff7f26 	beq	r2,r3,80b95c <_fpadd_parts+0x1c8>
  80bb60:	04c02074 	movhi	r19,129
  80bb64:	9cc44404 	addi	r19,r19,4368
  80bb68:	003f7c06 	br	80b95c <_fpadd_parts+0x1c8>
  80bb6c:	2006d07a 	srli	r3,r4,1
  80bb70:	008007c4 	movi	r2,31
  80bb74:	1185c83a 	sub	r2,r2,r6
  80bb78:	1894d83a 	srl	r10,r3,r2
  80bb7c:	2192983a 	sll	r9,r4,r6
  80bb80:	003fd706 	br	80bae0 <_fpadd_parts+0x34c>
  80bb84:	9487883a 	add	r3,r18,r18
  80bb88:	008007c4 	movi	r2,31
  80bb8c:	1185c83a 	sub	r2,r2,r6
  80bb90:	1886983a 	sll	r3,r3,r2
  80bb94:	899ad83a 	srl	r13,r17,r6
  80bb98:	919cd83a 	srl	r14,r18,r6
  80bb9c:	1b5ab03a 	or	r13,r3,r13
  80bba0:	003fc906 	br	80bac8 <_fpadd_parts+0x334>

0080bba4 <__subdf3>:
  80bba4:	deffea04 	addi	sp,sp,-88
  80bba8:	dcc01415 	stw	r19,80(sp)
  80bbac:	dcc00404 	addi	r19,sp,16
  80bbb0:	2011883a 	mov	r8,r4
  80bbb4:	2813883a 	mov	r9,r5
  80bbb8:	dc401315 	stw	r17,76(sp)
  80bbbc:	d809883a 	mov	r4,sp
  80bbc0:	980b883a 	mov	r5,r19
  80bbc4:	dc400904 	addi	r17,sp,36
  80bbc8:	dfc01515 	stw	ra,84(sp)
  80bbcc:	da400115 	stw	r9,4(sp)
  80bbd0:	d9c00315 	stw	r7,12(sp)
  80bbd4:	da000015 	stw	r8,0(sp)
  80bbd8:	d9800215 	stw	r6,8(sp)
  80bbdc:	080ce380 	call	80ce38 <__unpack_d>
  80bbe0:	d9000204 	addi	r4,sp,8
  80bbe4:	880b883a 	mov	r5,r17
  80bbe8:	080ce380 	call	80ce38 <__unpack_d>
  80bbec:	d8800a17 	ldw	r2,40(sp)
  80bbf0:	880b883a 	mov	r5,r17
  80bbf4:	9809883a 	mov	r4,r19
  80bbf8:	d9800e04 	addi	r6,sp,56
  80bbfc:	1080005c 	xori	r2,r2,1
  80bc00:	d8800a15 	stw	r2,40(sp)
  80bc04:	080b7940 	call	80b794 <_fpadd_parts>
  80bc08:	1009883a 	mov	r4,r2
  80bc0c:	080cb240 	call	80cb24 <__pack_d>
  80bc10:	dfc01517 	ldw	ra,84(sp)
  80bc14:	dcc01417 	ldw	r19,80(sp)
  80bc18:	dc401317 	ldw	r17,76(sp)
  80bc1c:	dec01604 	addi	sp,sp,88
  80bc20:	f800283a 	ret

0080bc24 <__adddf3>:
  80bc24:	deffea04 	addi	sp,sp,-88
  80bc28:	dcc01415 	stw	r19,80(sp)
  80bc2c:	dcc00404 	addi	r19,sp,16
  80bc30:	2011883a 	mov	r8,r4
  80bc34:	2813883a 	mov	r9,r5
  80bc38:	dc401315 	stw	r17,76(sp)
  80bc3c:	d809883a 	mov	r4,sp
  80bc40:	980b883a 	mov	r5,r19
  80bc44:	dc400904 	addi	r17,sp,36
  80bc48:	dfc01515 	stw	ra,84(sp)
  80bc4c:	da400115 	stw	r9,4(sp)
  80bc50:	d9c00315 	stw	r7,12(sp)
  80bc54:	da000015 	stw	r8,0(sp)
  80bc58:	d9800215 	stw	r6,8(sp)
  80bc5c:	080ce380 	call	80ce38 <__unpack_d>
  80bc60:	d9000204 	addi	r4,sp,8
  80bc64:	880b883a 	mov	r5,r17
  80bc68:	080ce380 	call	80ce38 <__unpack_d>
  80bc6c:	d9800e04 	addi	r6,sp,56
  80bc70:	9809883a 	mov	r4,r19
  80bc74:	880b883a 	mov	r5,r17
  80bc78:	080b7940 	call	80b794 <_fpadd_parts>
  80bc7c:	1009883a 	mov	r4,r2
  80bc80:	080cb240 	call	80cb24 <__pack_d>
  80bc84:	dfc01517 	ldw	ra,84(sp)
  80bc88:	dcc01417 	ldw	r19,80(sp)
  80bc8c:	dc401317 	ldw	r17,76(sp)
  80bc90:	dec01604 	addi	sp,sp,88
  80bc94:	f800283a 	ret

0080bc98 <__muldf3>:
  80bc98:	deffe004 	addi	sp,sp,-128
  80bc9c:	dc401815 	stw	r17,96(sp)
  80bca0:	dc400404 	addi	r17,sp,16
  80bca4:	2011883a 	mov	r8,r4
  80bca8:	2813883a 	mov	r9,r5
  80bcac:	dc001715 	stw	r16,92(sp)
  80bcb0:	d809883a 	mov	r4,sp
  80bcb4:	880b883a 	mov	r5,r17
  80bcb8:	dc000904 	addi	r16,sp,36
  80bcbc:	dfc01f15 	stw	ra,124(sp)
  80bcc0:	da400115 	stw	r9,4(sp)
  80bcc4:	d9c00315 	stw	r7,12(sp)
  80bcc8:	da000015 	stw	r8,0(sp)
  80bccc:	d9800215 	stw	r6,8(sp)
  80bcd0:	ddc01e15 	stw	r23,120(sp)
  80bcd4:	dd801d15 	stw	r22,116(sp)
  80bcd8:	dd401c15 	stw	r21,112(sp)
  80bcdc:	dd001b15 	stw	r20,108(sp)
  80bce0:	dcc01a15 	stw	r19,104(sp)
  80bce4:	dc801915 	stw	r18,100(sp)
  80bce8:	080ce380 	call	80ce38 <__unpack_d>
  80bcec:	d9000204 	addi	r4,sp,8
  80bcf0:	800b883a 	mov	r5,r16
  80bcf4:	080ce380 	call	80ce38 <__unpack_d>
  80bcf8:	d9000417 	ldw	r4,16(sp)
  80bcfc:	00800044 	movi	r2,1
  80bd00:	1100102e 	bgeu	r2,r4,80bd44 <__muldf3+0xac>
  80bd04:	d8c00917 	ldw	r3,36(sp)
  80bd08:	10c0062e 	bgeu	r2,r3,80bd24 <__muldf3+0x8c>
  80bd0c:	00800104 	movi	r2,4
  80bd10:	20800a26 	beq	r4,r2,80bd3c <__muldf3+0xa4>
  80bd14:	1880cc26 	beq	r3,r2,80c048 <__muldf3+0x3b0>
  80bd18:	00800084 	movi	r2,2
  80bd1c:	20800926 	beq	r4,r2,80bd44 <__muldf3+0xac>
  80bd20:	1880191e 	bne	r3,r2,80bd88 <__muldf3+0xf0>
  80bd24:	d8c00a17 	ldw	r3,40(sp)
  80bd28:	d8800517 	ldw	r2,20(sp)
  80bd2c:	8009883a 	mov	r4,r16
  80bd30:	10c4c03a 	cmpne	r2,r2,r3
  80bd34:	d8800a15 	stw	r2,40(sp)
  80bd38:	00000706 	br	80bd58 <__muldf3+0xc0>
  80bd3c:	00800084 	movi	r2,2
  80bd40:	1880c326 	beq	r3,r2,80c050 <__muldf3+0x3b8>
  80bd44:	d8800517 	ldw	r2,20(sp)
  80bd48:	d8c00a17 	ldw	r3,40(sp)
  80bd4c:	8809883a 	mov	r4,r17
  80bd50:	10c4c03a 	cmpne	r2,r2,r3
  80bd54:	d8800515 	stw	r2,20(sp)
  80bd58:	080cb240 	call	80cb24 <__pack_d>
  80bd5c:	dfc01f17 	ldw	ra,124(sp)
  80bd60:	ddc01e17 	ldw	r23,120(sp)
  80bd64:	dd801d17 	ldw	r22,116(sp)
  80bd68:	dd401c17 	ldw	r21,112(sp)
  80bd6c:	dd001b17 	ldw	r20,108(sp)
  80bd70:	dcc01a17 	ldw	r19,104(sp)
  80bd74:	dc801917 	ldw	r18,100(sp)
  80bd78:	dc401817 	ldw	r17,96(sp)
  80bd7c:	dc001717 	ldw	r16,92(sp)
  80bd80:	dec02004 	addi	sp,sp,128
  80bd84:	f800283a 	ret
  80bd88:	dd800717 	ldw	r22,28(sp)
  80bd8c:	dc800c17 	ldw	r18,48(sp)
  80bd90:	002b883a 	mov	r21,zero
  80bd94:	0023883a 	mov	r17,zero
  80bd98:	a80b883a 	mov	r5,r21
  80bd9c:	b00d883a 	mov	r6,r22
  80bda0:	880f883a 	mov	r7,r17
  80bda4:	ddc00817 	ldw	r23,32(sp)
  80bda8:	dcc00d17 	ldw	r19,52(sp)
  80bdac:	9009883a 	mov	r4,r18
  80bdb0:	080ca0c0 	call	80ca0c <__muldi3>
  80bdb4:	001b883a 	mov	r13,zero
  80bdb8:	680f883a 	mov	r7,r13
  80bdbc:	b009883a 	mov	r4,r22
  80bdc0:	000b883a 	mov	r5,zero
  80bdc4:	980d883a 	mov	r6,r19
  80bdc8:	b82d883a 	mov	r22,r23
  80bdcc:	002f883a 	mov	r23,zero
  80bdd0:	db401615 	stw	r13,88(sp)
  80bdd4:	d8801315 	stw	r2,76(sp)
  80bdd8:	d8c01415 	stw	r3,80(sp)
  80bddc:	dcc01515 	stw	r19,84(sp)
  80bde0:	080ca0c0 	call	80ca0c <__muldi3>
  80bde4:	b00d883a 	mov	r6,r22
  80bde8:	000b883a 	mov	r5,zero
  80bdec:	9009883a 	mov	r4,r18
  80bdf0:	b80f883a 	mov	r7,r23
  80bdf4:	1021883a 	mov	r16,r2
  80bdf8:	1823883a 	mov	r17,r3
  80bdfc:	080ca0c0 	call	80ca0c <__muldi3>
  80be00:	8085883a 	add	r2,r16,r2
  80be04:	140d803a 	cmpltu	r6,r2,r16
  80be08:	88c7883a 	add	r3,r17,r3
  80be0c:	30cd883a 	add	r6,r6,r3
  80be10:	1029883a 	mov	r20,r2
  80be14:	302b883a 	mov	r21,r6
  80be18:	da801317 	ldw	r10,76(sp)
  80be1c:	dac01417 	ldw	r11,80(sp)
  80be20:	db001517 	ldw	r12,84(sp)
  80be24:	db401617 	ldw	r13,88(sp)
  80be28:	3440612e 	bgeu	r6,r17,80bfb0 <__muldf3+0x318>
  80be2c:	0009883a 	mov	r4,zero
  80be30:	5105883a 	add	r2,r10,r4
  80be34:	128d803a 	cmpltu	r6,r2,r10
  80be38:	5d07883a 	add	r3,r11,r20
  80be3c:	30cd883a 	add	r6,r6,r3
  80be40:	0021883a 	mov	r16,zero
  80be44:	04400044 	movi	r17,1
  80be48:	1025883a 	mov	r18,r2
  80be4c:	3027883a 	mov	r19,r6
  80be50:	32c06236 	bltu	r6,r11,80bfdc <__muldf3+0x344>
  80be54:	59807a26 	beq	r11,r6,80c040 <__muldf3+0x3a8>
  80be58:	680b883a 	mov	r5,r13
  80be5c:	b80f883a 	mov	r7,r23
  80be60:	6009883a 	mov	r4,r12
  80be64:	b00d883a 	mov	r6,r22
  80be68:	080ca0c0 	call	80ca0c <__muldi3>
  80be6c:	1009883a 	mov	r4,r2
  80be70:	000f883a 	mov	r7,zero
  80be74:	1545883a 	add	r2,r2,r21
  80be78:	1111803a 	cmpltu	r8,r2,r4
  80be7c:	19c7883a 	add	r3,r3,r7
  80be80:	40c7883a 	add	r3,r8,r3
  80be84:	88cb883a 	add	r5,r17,r3
  80be88:	d8c00617 	ldw	r3,24(sp)
  80be8c:	8089883a 	add	r4,r16,r2
  80be90:	d8800b17 	ldw	r2,44(sp)
  80be94:	18c00104 	addi	r3,r3,4
  80be98:	240d803a 	cmpltu	r6,r4,r16
  80be9c:	10c7883a 	add	r3,r2,r3
  80bea0:	2013883a 	mov	r9,r4
  80bea4:	d8800a17 	ldw	r2,40(sp)
  80bea8:	d9000517 	ldw	r4,20(sp)
  80beac:	314d883a 	add	r6,r6,r5
  80beb0:	3015883a 	mov	r10,r6
  80beb4:	2088c03a 	cmpne	r4,r4,r2
  80beb8:	00880034 	movhi	r2,8192
  80bebc:	10bfffc4 	addi	r2,r2,-1
  80bec0:	d9000f15 	stw	r4,60(sp)
  80bec4:	d8c01015 	stw	r3,64(sp)
  80bec8:	1180162e 	bgeu	r2,r6,80bf24 <__muldf3+0x28c>
  80becc:	1811883a 	mov	r8,r3
  80bed0:	101f883a 	mov	r15,r2
  80bed4:	980497fa 	slli	r2,r19,31
  80bed8:	9016d07a 	srli	r11,r18,1
  80bedc:	500697fa 	slli	r3,r10,31
  80bee0:	480cd07a 	srli	r6,r9,1
  80bee4:	500ed07a 	srli	r7,r10,1
  80bee8:	12d6b03a 	or	r11,r2,r11
  80beec:	00800044 	movi	r2,1
  80bef0:	198cb03a 	or	r6,r3,r6
  80bef4:	4888703a 	and	r4,r9,r2
  80bef8:	9818d07a 	srli	r12,r19,1
  80befc:	001b883a 	mov	r13,zero
  80bf00:	03a00034 	movhi	r14,32768
  80bf04:	3013883a 	mov	r9,r6
  80bf08:	3815883a 	mov	r10,r7
  80bf0c:	4091883a 	add	r8,r8,r2
  80bf10:	20000226 	beq	r4,zero,80bf1c <__muldf3+0x284>
  80bf14:	5b64b03a 	or	r18,r11,r13
  80bf18:	63a6b03a 	or	r19,r12,r14
  80bf1c:	7abfed36 	bltu	r15,r10,80bed4 <__muldf3+0x23c>
  80bf20:	da001015 	stw	r8,64(sp)
  80bf24:	00840034 	movhi	r2,4096
  80bf28:	10bfffc4 	addi	r2,r2,-1
  80bf2c:	12801436 	bltu	r2,r10,80bf80 <__muldf3+0x2e8>
  80bf30:	da001017 	ldw	r8,64(sp)
  80bf34:	101f883a 	mov	r15,r2
  80bf38:	4a45883a 	add	r2,r9,r9
  80bf3c:	124d803a 	cmpltu	r6,r2,r9
  80bf40:	5287883a 	add	r3,r10,r10
  80bf44:	9497883a 	add	r11,r18,r18
  80bf48:	5c8f803a 	cmpltu	r7,r11,r18
  80bf4c:	9cd9883a 	add	r12,r19,r19
  80bf50:	01000044 	movi	r4,1
  80bf54:	30cd883a 	add	r6,r6,r3
  80bf58:	3b0f883a 	add	r7,r7,r12
  80bf5c:	423fffc4 	addi	r8,r8,-1
  80bf60:	1013883a 	mov	r9,r2
  80bf64:	3015883a 	mov	r10,r6
  80bf68:	111ab03a 	or	r13,r2,r4
  80bf6c:	98003016 	blt	r19,zero,80c030 <__muldf3+0x398>
  80bf70:	5825883a 	mov	r18,r11
  80bf74:	3827883a 	mov	r19,r7
  80bf78:	7abfef2e 	bgeu	r15,r10,80bf38 <__muldf3+0x2a0>
  80bf7c:	da001015 	stw	r8,64(sp)
  80bf80:	00803fc4 	movi	r2,255
  80bf84:	488e703a 	and	r7,r9,r2
  80bf88:	00802004 	movi	r2,128
  80bf8c:	0007883a 	mov	r3,zero
  80bf90:	0011883a 	mov	r8,zero
  80bf94:	38801826 	beq	r7,r2,80bff8 <__muldf3+0x360>
  80bf98:	008000c4 	movi	r2,3
  80bf9c:	d9000e04 	addi	r4,sp,56
  80bfa0:	da801215 	stw	r10,72(sp)
  80bfa4:	d8800e15 	stw	r2,56(sp)
  80bfa8:	da401115 	stw	r9,68(sp)
  80bfac:	003f6a06 	br	80bd58 <__muldf3+0xc0>
  80bfb0:	89802126 	beq	r17,r6,80c038 <__muldf3+0x3a0>
  80bfb4:	0009883a 	mov	r4,zero
  80bfb8:	5105883a 	add	r2,r10,r4
  80bfbc:	128d803a 	cmpltu	r6,r2,r10
  80bfc0:	5d07883a 	add	r3,r11,r20
  80bfc4:	30cd883a 	add	r6,r6,r3
  80bfc8:	0021883a 	mov	r16,zero
  80bfcc:	0023883a 	mov	r17,zero
  80bfd0:	1025883a 	mov	r18,r2
  80bfd4:	3027883a 	mov	r19,r6
  80bfd8:	32ff9e2e 	bgeu	r6,r11,80be54 <__muldf3+0x1bc>
  80bfdc:	00800044 	movi	r2,1
  80bfe0:	8089883a 	add	r4,r16,r2
  80bfe4:	240d803a 	cmpltu	r6,r4,r16
  80bfe8:	344d883a 	add	r6,r6,r17
  80bfec:	2021883a 	mov	r16,r4
  80bff0:	3023883a 	mov	r17,r6
  80bff4:	003f9806 	br	80be58 <__muldf3+0x1c0>
  80bff8:	403fe71e 	bne	r8,zero,80bf98 <__muldf3+0x300>
  80bffc:	01004004 	movi	r4,256
  80c000:	4904703a 	and	r2,r9,r4
  80c004:	10c4b03a 	or	r2,r2,r3
  80c008:	103fe31e 	bne	r2,zero,80bf98 <__muldf3+0x300>
  80c00c:	94c4b03a 	or	r2,r18,r19
  80c010:	103fe126 	beq	r2,zero,80bf98 <__muldf3+0x300>
  80c014:	49c5883a 	add	r2,r9,r7
  80c018:	1251803a 	cmpltu	r8,r2,r9
  80c01c:	4291883a 	add	r8,r8,r10
  80c020:	013fc004 	movi	r4,-256
  80c024:	1112703a 	and	r9,r2,r4
  80c028:	4015883a 	mov	r10,r8
  80c02c:	003fda06 	br	80bf98 <__muldf3+0x300>
  80c030:	6813883a 	mov	r9,r13
  80c034:	003fce06 	br	80bf70 <__muldf3+0x2d8>
  80c038:	143f7c36 	bltu	r2,r16,80be2c <__muldf3+0x194>
  80c03c:	003fdd06 	br	80bfb4 <__muldf3+0x31c>
  80c040:	12bf852e 	bgeu	r2,r10,80be58 <__muldf3+0x1c0>
  80c044:	003fe506 	br	80bfdc <__muldf3+0x344>
  80c048:	00800084 	movi	r2,2
  80c04c:	20bf351e 	bne	r4,r2,80bd24 <__muldf3+0x8c>
  80c050:	01002074 	movhi	r4,129
  80c054:	21044404 	addi	r4,r4,4368
  80c058:	003f3f06 	br	80bd58 <__muldf3+0xc0>

0080c05c <__divdf3>:
  80c05c:	deffed04 	addi	sp,sp,-76
  80c060:	dcc01115 	stw	r19,68(sp)
  80c064:	dcc00404 	addi	r19,sp,16
  80c068:	2011883a 	mov	r8,r4
  80c06c:	2813883a 	mov	r9,r5
  80c070:	dc000e15 	stw	r16,56(sp)
  80c074:	d809883a 	mov	r4,sp
  80c078:	980b883a 	mov	r5,r19
  80c07c:	dc000904 	addi	r16,sp,36
  80c080:	dfc01215 	stw	ra,72(sp)
  80c084:	da400115 	stw	r9,4(sp)
  80c088:	d9c00315 	stw	r7,12(sp)
  80c08c:	da000015 	stw	r8,0(sp)
  80c090:	d9800215 	stw	r6,8(sp)
  80c094:	dc801015 	stw	r18,64(sp)
  80c098:	dc400f15 	stw	r17,60(sp)
  80c09c:	080ce380 	call	80ce38 <__unpack_d>
  80c0a0:	d9000204 	addi	r4,sp,8
  80c0a4:	800b883a 	mov	r5,r16
  80c0a8:	080ce380 	call	80ce38 <__unpack_d>
  80c0ac:	d9000417 	ldw	r4,16(sp)
  80c0b0:	00800044 	movi	r2,1
  80c0b4:	11000b2e 	bgeu	r2,r4,80c0e4 <__divdf3+0x88>
  80c0b8:	d9400917 	ldw	r5,36(sp)
  80c0bc:	1140762e 	bgeu	r2,r5,80c298 <__divdf3+0x23c>
  80c0c0:	d8800517 	ldw	r2,20(sp)
  80c0c4:	d8c00a17 	ldw	r3,40(sp)
  80c0c8:	01800104 	movi	r6,4
  80c0cc:	10c4f03a 	xor	r2,r2,r3
  80c0d0:	d8800515 	stw	r2,20(sp)
  80c0d4:	21800226 	beq	r4,r6,80c0e0 <__divdf3+0x84>
  80c0d8:	00800084 	movi	r2,2
  80c0dc:	2080141e 	bne	r4,r2,80c130 <__divdf3+0xd4>
  80c0e0:	29000926 	beq	r5,r4,80c108 <__divdf3+0xac>
  80c0e4:	9809883a 	mov	r4,r19
  80c0e8:	080cb240 	call	80cb24 <__pack_d>
  80c0ec:	dfc01217 	ldw	ra,72(sp)
  80c0f0:	dcc01117 	ldw	r19,68(sp)
  80c0f4:	dc801017 	ldw	r18,64(sp)
  80c0f8:	dc400f17 	ldw	r17,60(sp)
  80c0fc:	dc000e17 	ldw	r16,56(sp)
  80c100:	dec01304 	addi	sp,sp,76
  80c104:	f800283a 	ret
  80c108:	01002074 	movhi	r4,129
  80c10c:	21044404 	addi	r4,r4,4368
  80c110:	080cb240 	call	80cb24 <__pack_d>
  80c114:	dfc01217 	ldw	ra,72(sp)
  80c118:	dcc01117 	ldw	r19,68(sp)
  80c11c:	dc801017 	ldw	r18,64(sp)
  80c120:	dc400f17 	ldw	r17,60(sp)
  80c124:	dc000e17 	ldw	r16,56(sp)
  80c128:	dec01304 	addi	sp,sp,76
  80c12c:	f800283a 	ret
  80c130:	29805b26 	beq	r5,r6,80c2a0 <__divdf3+0x244>
  80c134:	28802d26 	beq	r5,r2,80c1ec <__divdf3+0x190>
  80c138:	d8c00617 	ldw	r3,24(sp)
  80c13c:	d8800b17 	ldw	r2,44(sp)
  80c140:	d9c00817 	ldw	r7,32(sp)
  80c144:	dc400d17 	ldw	r17,52(sp)
  80c148:	188bc83a 	sub	r5,r3,r2
  80c14c:	d9800717 	ldw	r6,28(sp)
  80c150:	dc000c17 	ldw	r16,48(sp)
  80c154:	d9400615 	stw	r5,24(sp)
  80c158:	3c403836 	bltu	r7,r17,80c23c <__divdf3+0x1e0>
  80c15c:	89c03626 	beq	r17,r7,80c238 <__divdf3+0x1dc>
  80c160:	0015883a 	mov	r10,zero
  80c164:	001d883a 	mov	r14,zero
  80c168:	02c40034 	movhi	r11,4096
  80c16c:	001f883a 	mov	r15,zero
  80c170:	003f883a 	mov	ra,zero
  80c174:	04800f44 	movi	r18,61
  80c178:	00000f06 	br	80c1b8 <__divdf3+0x15c>
  80c17c:	601d883a 	mov	r14,r12
  80c180:	681f883a 	mov	r15,r13
  80c184:	400d883a 	mov	r6,r8
  80c188:	100f883a 	mov	r7,r2
  80c18c:	3191883a 	add	r8,r6,r6
  80c190:	5808d07a 	srli	r4,r11,1
  80c194:	4185803a 	cmpltu	r2,r8,r6
  80c198:	39d3883a 	add	r9,r7,r7
  80c19c:	28c6b03a 	or	r3,r5,r3
  80c1a0:	1245883a 	add	r2,r2,r9
  80c1a4:	1815883a 	mov	r10,r3
  80c1a8:	2017883a 	mov	r11,r4
  80c1ac:	400d883a 	mov	r6,r8
  80c1b0:	100f883a 	mov	r7,r2
  80c1b4:	fc801726 	beq	ra,r18,80c214 <__divdf3+0x1b8>
  80c1b8:	580a97fa 	slli	r5,r11,31
  80c1bc:	5006d07a 	srli	r3,r10,1
  80c1c0:	ffc00044 	addi	ra,ra,1
  80c1c4:	3c7ff136 	bltu	r7,r17,80c18c <__divdf3+0x130>
  80c1c8:	3411c83a 	sub	r8,r6,r16
  80c1cc:	3205803a 	cmpltu	r2,r6,r8
  80c1d0:	3c53c83a 	sub	r9,r7,r17
  80c1d4:	7298b03a 	or	r12,r14,r10
  80c1d8:	7adab03a 	or	r13,r15,r11
  80c1dc:	4885c83a 	sub	r2,r9,r2
  80c1e0:	89ffe61e 	bne	r17,r7,80c17c <__divdf3+0x120>
  80c1e4:	343fe936 	bltu	r6,r16,80c18c <__divdf3+0x130>
  80c1e8:	003fe406 	br	80c17c <__divdf3+0x120>
  80c1ec:	9809883a 	mov	r4,r19
  80c1f0:	d9800415 	stw	r6,16(sp)
  80c1f4:	080cb240 	call	80cb24 <__pack_d>
  80c1f8:	dfc01217 	ldw	ra,72(sp)
  80c1fc:	dcc01117 	ldw	r19,68(sp)
  80c200:	dc801017 	ldw	r18,64(sp)
  80c204:	dc400f17 	ldw	r17,60(sp)
  80c208:	dc000e17 	ldw	r16,56(sp)
  80c20c:	dec01304 	addi	sp,sp,76
  80c210:	f800283a 	ret
  80c214:	00803fc4 	movi	r2,255
  80c218:	7090703a 	and	r8,r14,r2
  80c21c:	00802004 	movi	r2,128
  80c220:	0007883a 	mov	r3,zero
  80c224:	0013883a 	mov	r9,zero
  80c228:	40800d26 	beq	r8,r2,80c260 <__divdf3+0x204>
  80c22c:	dbc00815 	stw	r15,32(sp)
  80c230:	db800715 	stw	r14,28(sp)
  80c234:	003fab06 	br	80c0e4 <__divdf3+0x88>
  80c238:	343fc92e 	bgeu	r6,r16,80c160 <__divdf3+0x104>
  80c23c:	3185883a 	add	r2,r6,r6
  80c240:	1189803a 	cmpltu	r4,r2,r6
  80c244:	39c7883a 	add	r3,r7,r7
  80c248:	20c9883a 	add	r4,r4,r3
  80c24c:	297fffc4 	addi	r5,r5,-1
  80c250:	100d883a 	mov	r6,r2
  80c254:	200f883a 	mov	r7,r4
  80c258:	d9400615 	stw	r5,24(sp)
  80c25c:	003fc006 	br	80c160 <__divdf3+0x104>
  80c260:	483ff21e 	bne	r9,zero,80c22c <__divdf3+0x1d0>
  80c264:	01004004 	movi	r4,256
  80c268:	7104703a 	and	r2,r14,r4
  80c26c:	10c4b03a 	or	r2,r2,r3
  80c270:	103fee1e 	bne	r2,zero,80c22c <__divdf3+0x1d0>
  80c274:	31c4b03a 	or	r2,r6,r7
  80c278:	103fec26 	beq	r2,zero,80c22c <__divdf3+0x1d0>
  80c27c:	7205883a 	add	r2,r14,r8
  80c280:	1391803a 	cmpltu	r8,r2,r14
  80c284:	43d1883a 	add	r8,r8,r15
  80c288:	013fc004 	movi	r4,-256
  80c28c:	111c703a 	and	r14,r2,r4
  80c290:	401f883a 	mov	r15,r8
  80c294:	003fe506 	br	80c22c <__divdf3+0x1d0>
  80c298:	8009883a 	mov	r4,r16
  80c29c:	003f9206 	br	80c0e8 <__divdf3+0x8c>
  80c2a0:	9809883a 	mov	r4,r19
  80c2a4:	d8000715 	stw	zero,28(sp)
  80c2a8:	d8000815 	stw	zero,32(sp)
  80c2ac:	d8000615 	stw	zero,24(sp)
  80c2b0:	003f8d06 	br	80c0e8 <__divdf3+0x8c>

0080c2b4 <__eqdf2>:
  80c2b4:	deffef04 	addi	sp,sp,-68
  80c2b8:	dc400f15 	stw	r17,60(sp)
  80c2bc:	dc400404 	addi	r17,sp,16
  80c2c0:	2005883a 	mov	r2,r4
  80c2c4:	2807883a 	mov	r3,r5
  80c2c8:	dc000e15 	stw	r16,56(sp)
  80c2cc:	d809883a 	mov	r4,sp
  80c2d0:	880b883a 	mov	r5,r17
  80c2d4:	dc000904 	addi	r16,sp,36
  80c2d8:	d8c00115 	stw	r3,4(sp)
  80c2dc:	d8800015 	stw	r2,0(sp)
  80c2e0:	d9800215 	stw	r6,8(sp)
  80c2e4:	dfc01015 	stw	ra,64(sp)
  80c2e8:	d9c00315 	stw	r7,12(sp)
  80c2ec:	080ce380 	call	80ce38 <__unpack_d>
  80c2f0:	d9000204 	addi	r4,sp,8
  80c2f4:	800b883a 	mov	r5,r16
  80c2f8:	080ce380 	call	80ce38 <__unpack_d>
  80c2fc:	d8800417 	ldw	r2,16(sp)
  80c300:	00c00044 	movi	r3,1
  80c304:	180d883a 	mov	r6,r3
  80c308:	1880062e 	bgeu	r3,r2,80c324 <__eqdf2+0x70>
  80c30c:	d8800917 	ldw	r2,36(sp)
  80c310:	8809883a 	mov	r4,r17
  80c314:	800b883a 	mov	r5,r16
  80c318:	1880022e 	bgeu	r3,r2,80c324 <__eqdf2+0x70>
  80c31c:	080cf700 	call	80cf70 <__fpcmp_parts_d>
  80c320:	100d883a 	mov	r6,r2
  80c324:	3005883a 	mov	r2,r6
  80c328:	dfc01017 	ldw	ra,64(sp)
  80c32c:	dc400f17 	ldw	r17,60(sp)
  80c330:	dc000e17 	ldw	r16,56(sp)
  80c334:	dec01104 	addi	sp,sp,68
  80c338:	f800283a 	ret

0080c33c <__nedf2>:
  80c33c:	deffef04 	addi	sp,sp,-68
  80c340:	dc400f15 	stw	r17,60(sp)
  80c344:	dc400404 	addi	r17,sp,16
  80c348:	2005883a 	mov	r2,r4
  80c34c:	2807883a 	mov	r3,r5
  80c350:	dc000e15 	stw	r16,56(sp)
  80c354:	d809883a 	mov	r4,sp
  80c358:	880b883a 	mov	r5,r17
  80c35c:	dc000904 	addi	r16,sp,36
  80c360:	d8c00115 	stw	r3,4(sp)
  80c364:	d8800015 	stw	r2,0(sp)
  80c368:	d9800215 	stw	r6,8(sp)
  80c36c:	dfc01015 	stw	ra,64(sp)
  80c370:	d9c00315 	stw	r7,12(sp)
  80c374:	080ce380 	call	80ce38 <__unpack_d>
  80c378:	d9000204 	addi	r4,sp,8
  80c37c:	800b883a 	mov	r5,r16
  80c380:	080ce380 	call	80ce38 <__unpack_d>
  80c384:	d8800417 	ldw	r2,16(sp)
  80c388:	00c00044 	movi	r3,1
  80c38c:	180d883a 	mov	r6,r3
  80c390:	1880062e 	bgeu	r3,r2,80c3ac <__nedf2+0x70>
  80c394:	d8800917 	ldw	r2,36(sp)
  80c398:	8809883a 	mov	r4,r17
  80c39c:	800b883a 	mov	r5,r16
  80c3a0:	1880022e 	bgeu	r3,r2,80c3ac <__nedf2+0x70>
  80c3a4:	080cf700 	call	80cf70 <__fpcmp_parts_d>
  80c3a8:	100d883a 	mov	r6,r2
  80c3ac:	3005883a 	mov	r2,r6
  80c3b0:	dfc01017 	ldw	ra,64(sp)
  80c3b4:	dc400f17 	ldw	r17,60(sp)
  80c3b8:	dc000e17 	ldw	r16,56(sp)
  80c3bc:	dec01104 	addi	sp,sp,68
  80c3c0:	f800283a 	ret

0080c3c4 <__gtdf2>:
  80c3c4:	deffef04 	addi	sp,sp,-68
  80c3c8:	dc400f15 	stw	r17,60(sp)
  80c3cc:	dc400404 	addi	r17,sp,16
  80c3d0:	2005883a 	mov	r2,r4
  80c3d4:	2807883a 	mov	r3,r5
  80c3d8:	dc000e15 	stw	r16,56(sp)
  80c3dc:	d809883a 	mov	r4,sp
  80c3e0:	880b883a 	mov	r5,r17
  80c3e4:	dc000904 	addi	r16,sp,36
  80c3e8:	d8c00115 	stw	r3,4(sp)
  80c3ec:	d8800015 	stw	r2,0(sp)
  80c3f0:	d9800215 	stw	r6,8(sp)
  80c3f4:	dfc01015 	stw	ra,64(sp)
  80c3f8:	d9c00315 	stw	r7,12(sp)
  80c3fc:	080ce380 	call	80ce38 <__unpack_d>
  80c400:	d9000204 	addi	r4,sp,8
  80c404:	800b883a 	mov	r5,r16
  80c408:	080ce380 	call	80ce38 <__unpack_d>
  80c40c:	d8800417 	ldw	r2,16(sp)
  80c410:	00c00044 	movi	r3,1
  80c414:	01bfffc4 	movi	r6,-1
  80c418:	1880062e 	bgeu	r3,r2,80c434 <__gtdf2+0x70>
  80c41c:	d8800917 	ldw	r2,36(sp)
  80c420:	8809883a 	mov	r4,r17
  80c424:	800b883a 	mov	r5,r16
  80c428:	1880022e 	bgeu	r3,r2,80c434 <__gtdf2+0x70>
  80c42c:	080cf700 	call	80cf70 <__fpcmp_parts_d>
  80c430:	100d883a 	mov	r6,r2
  80c434:	3005883a 	mov	r2,r6
  80c438:	dfc01017 	ldw	ra,64(sp)
  80c43c:	dc400f17 	ldw	r17,60(sp)
  80c440:	dc000e17 	ldw	r16,56(sp)
  80c444:	dec01104 	addi	sp,sp,68
  80c448:	f800283a 	ret

0080c44c <__gedf2>:
  80c44c:	deffef04 	addi	sp,sp,-68
  80c450:	dc400f15 	stw	r17,60(sp)
  80c454:	dc400404 	addi	r17,sp,16
  80c458:	2005883a 	mov	r2,r4
  80c45c:	2807883a 	mov	r3,r5
  80c460:	dc000e15 	stw	r16,56(sp)
  80c464:	d809883a 	mov	r4,sp
  80c468:	880b883a 	mov	r5,r17
  80c46c:	dc000904 	addi	r16,sp,36
  80c470:	d8c00115 	stw	r3,4(sp)
  80c474:	d8800015 	stw	r2,0(sp)
  80c478:	d9800215 	stw	r6,8(sp)
  80c47c:	dfc01015 	stw	ra,64(sp)
  80c480:	d9c00315 	stw	r7,12(sp)
  80c484:	080ce380 	call	80ce38 <__unpack_d>
  80c488:	d9000204 	addi	r4,sp,8
  80c48c:	800b883a 	mov	r5,r16
  80c490:	080ce380 	call	80ce38 <__unpack_d>
  80c494:	d8800417 	ldw	r2,16(sp)
  80c498:	00c00044 	movi	r3,1
  80c49c:	01bfffc4 	movi	r6,-1
  80c4a0:	1880062e 	bgeu	r3,r2,80c4bc <__gedf2+0x70>
  80c4a4:	d8800917 	ldw	r2,36(sp)
  80c4a8:	8809883a 	mov	r4,r17
  80c4ac:	800b883a 	mov	r5,r16
  80c4b0:	1880022e 	bgeu	r3,r2,80c4bc <__gedf2+0x70>
  80c4b4:	080cf700 	call	80cf70 <__fpcmp_parts_d>
  80c4b8:	100d883a 	mov	r6,r2
  80c4bc:	3005883a 	mov	r2,r6
  80c4c0:	dfc01017 	ldw	ra,64(sp)
  80c4c4:	dc400f17 	ldw	r17,60(sp)
  80c4c8:	dc000e17 	ldw	r16,56(sp)
  80c4cc:	dec01104 	addi	sp,sp,68
  80c4d0:	f800283a 	ret

0080c4d4 <__ltdf2>:
  80c4d4:	deffef04 	addi	sp,sp,-68
  80c4d8:	dc400f15 	stw	r17,60(sp)
  80c4dc:	dc400404 	addi	r17,sp,16
  80c4e0:	2005883a 	mov	r2,r4
  80c4e4:	2807883a 	mov	r3,r5
  80c4e8:	dc000e15 	stw	r16,56(sp)
  80c4ec:	d809883a 	mov	r4,sp
  80c4f0:	880b883a 	mov	r5,r17
  80c4f4:	dc000904 	addi	r16,sp,36
  80c4f8:	d8c00115 	stw	r3,4(sp)
  80c4fc:	d8800015 	stw	r2,0(sp)
  80c500:	d9800215 	stw	r6,8(sp)
  80c504:	dfc01015 	stw	ra,64(sp)
  80c508:	d9c00315 	stw	r7,12(sp)
  80c50c:	080ce380 	call	80ce38 <__unpack_d>
  80c510:	d9000204 	addi	r4,sp,8
  80c514:	800b883a 	mov	r5,r16
  80c518:	080ce380 	call	80ce38 <__unpack_d>
  80c51c:	d8800417 	ldw	r2,16(sp)
  80c520:	00c00044 	movi	r3,1
  80c524:	180d883a 	mov	r6,r3
  80c528:	1880062e 	bgeu	r3,r2,80c544 <__ltdf2+0x70>
  80c52c:	d8800917 	ldw	r2,36(sp)
  80c530:	8809883a 	mov	r4,r17
  80c534:	800b883a 	mov	r5,r16
  80c538:	1880022e 	bgeu	r3,r2,80c544 <__ltdf2+0x70>
  80c53c:	080cf700 	call	80cf70 <__fpcmp_parts_d>
  80c540:	100d883a 	mov	r6,r2
  80c544:	3005883a 	mov	r2,r6
  80c548:	dfc01017 	ldw	ra,64(sp)
  80c54c:	dc400f17 	ldw	r17,60(sp)
  80c550:	dc000e17 	ldw	r16,56(sp)
  80c554:	dec01104 	addi	sp,sp,68
  80c558:	f800283a 	ret

0080c55c <__floatsidf>:
  80c55c:	2006d7fa 	srli	r3,r4,31
  80c560:	defff604 	addi	sp,sp,-40
  80c564:	008000c4 	movi	r2,3
  80c568:	dfc00915 	stw	ra,36(sp)
  80c56c:	dcc00815 	stw	r19,32(sp)
  80c570:	dc800715 	stw	r18,28(sp)
  80c574:	dc400615 	stw	r17,24(sp)
  80c578:	dc000515 	stw	r16,20(sp)
  80c57c:	d8800015 	stw	r2,0(sp)
  80c580:	d8c00115 	stw	r3,4(sp)
  80c584:	20000f1e 	bne	r4,zero,80c5c4 <__floatsidf+0x68>
  80c588:	00800084 	movi	r2,2
  80c58c:	d8800015 	stw	r2,0(sp)
  80c590:	d809883a 	mov	r4,sp
  80c594:	080cb240 	call	80cb24 <__pack_d>
  80c598:	1009883a 	mov	r4,r2
  80c59c:	180b883a 	mov	r5,r3
  80c5a0:	2005883a 	mov	r2,r4
  80c5a4:	2807883a 	mov	r3,r5
  80c5a8:	dfc00917 	ldw	ra,36(sp)
  80c5ac:	dcc00817 	ldw	r19,32(sp)
  80c5b0:	dc800717 	ldw	r18,28(sp)
  80c5b4:	dc400617 	ldw	r17,24(sp)
  80c5b8:	dc000517 	ldw	r16,20(sp)
  80c5bc:	dec00a04 	addi	sp,sp,40
  80c5c0:	f800283a 	ret
  80c5c4:	00800f04 	movi	r2,60
  80c5c8:	1807003a 	cmpeq	r3,r3,zero
  80c5cc:	d8800215 	stw	r2,8(sp)
  80c5d0:	18001126 	beq	r3,zero,80c618 <__floatsidf+0xbc>
  80c5d4:	0027883a 	mov	r19,zero
  80c5d8:	2025883a 	mov	r18,r4
  80c5dc:	d9000315 	stw	r4,12(sp)
  80c5e0:	dcc00415 	stw	r19,16(sp)
  80c5e4:	080caa40 	call	80caa4 <__clzsi2>
  80c5e8:	11000744 	addi	r4,r2,29
  80c5ec:	013fe80e 	bge	zero,r4,80c590 <__floatsidf+0x34>
  80c5f0:	10bfff44 	addi	r2,r2,-3
  80c5f4:	10000c16 	blt	r2,zero,80c628 <__floatsidf+0xcc>
  80c5f8:	90a2983a 	sll	r17,r18,r2
  80c5fc:	0021883a 	mov	r16,zero
  80c600:	d8800217 	ldw	r2,8(sp)
  80c604:	dc400415 	stw	r17,16(sp)
  80c608:	dc000315 	stw	r16,12(sp)
  80c60c:	1105c83a 	sub	r2,r2,r4
  80c610:	d8800215 	stw	r2,8(sp)
  80c614:	003fde06 	br	80c590 <__floatsidf+0x34>
  80c618:	00a00034 	movhi	r2,32768
  80c61c:	20800a26 	beq	r4,r2,80c648 <__floatsidf+0xec>
  80c620:	0109c83a 	sub	r4,zero,r4
  80c624:	003feb06 	br	80c5d4 <__floatsidf+0x78>
  80c628:	9006d07a 	srli	r3,r18,1
  80c62c:	008007c4 	movi	r2,31
  80c630:	1105c83a 	sub	r2,r2,r4
  80c634:	1886d83a 	srl	r3,r3,r2
  80c638:	9922983a 	sll	r17,r19,r4
  80c63c:	9120983a 	sll	r16,r18,r4
  80c640:	1c62b03a 	or	r17,r3,r17
  80c644:	003fee06 	br	80c600 <__floatsidf+0xa4>
  80c648:	0009883a 	mov	r4,zero
  80c64c:	01707834 	movhi	r5,49632
  80c650:	003fd306 	br	80c5a0 <__floatsidf+0x44>

0080c654 <__fixdfsi>:
  80c654:	defff804 	addi	sp,sp,-32
  80c658:	2005883a 	mov	r2,r4
  80c65c:	2807883a 	mov	r3,r5
  80c660:	d809883a 	mov	r4,sp
  80c664:	d9400204 	addi	r5,sp,8
  80c668:	d8c00115 	stw	r3,4(sp)
  80c66c:	d8800015 	stw	r2,0(sp)
  80c670:	dfc00715 	stw	ra,28(sp)
  80c674:	080ce380 	call	80ce38 <__unpack_d>
  80c678:	d8c00217 	ldw	r3,8(sp)
  80c67c:	00800084 	movi	r2,2
  80c680:	1880051e 	bne	r3,r2,80c698 <__fixdfsi+0x44>
  80c684:	0007883a 	mov	r3,zero
  80c688:	1805883a 	mov	r2,r3
  80c68c:	dfc00717 	ldw	ra,28(sp)
  80c690:	dec00804 	addi	sp,sp,32
  80c694:	f800283a 	ret
  80c698:	00800044 	movi	r2,1
  80c69c:	10fff92e 	bgeu	r2,r3,80c684 <__fixdfsi+0x30>
  80c6a0:	00800104 	movi	r2,4
  80c6a4:	18800426 	beq	r3,r2,80c6b8 <__fixdfsi+0x64>
  80c6a8:	d8c00417 	ldw	r3,16(sp)
  80c6ac:	183ff516 	blt	r3,zero,80c684 <__fixdfsi+0x30>
  80c6b0:	00800784 	movi	r2,30
  80c6b4:	10c0080e 	bge	r2,r3,80c6d8 <__fixdfsi+0x84>
  80c6b8:	d8800317 	ldw	r2,12(sp)
  80c6bc:	1000121e 	bne	r2,zero,80c708 <__fixdfsi+0xb4>
  80c6c0:	00e00034 	movhi	r3,32768
  80c6c4:	18ffffc4 	addi	r3,r3,-1
  80c6c8:	1805883a 	mov	r2,r3
  80c6cc:	dfc00717 	ldw	ra,28(sp)
  80c6d0:	dec00804 	addi	sp,sp,32
  80c6d4:	f800283a 	ret
  80c6d8:	00800f04 	movi	r2,60
  80c6dc:	10d1c83a 	sub	r8,r2,r3
  80c6e0:	40bff804 	addi	r2,r8,-32
  80c6e4:	d9800517 	ldw	r6,20(sp)
  80c6e8:	d9c00617 	ldw	r7,24(sp)
  80c6ec:	10000816 	blt	r2,zero,80c710 <__fixdfsi+0xbc>
  80c6f0:	3888d83a 	srl	r4,r7,r2
  80c6f4:	d8800317 	ldw	r2,12(sp)
  80c6f8:	2007883a 	mov	r3,r4
  80c6fc:	103fe226 	beq	r2,zero,80c688 <__fixdfsi+0x34>
  80c700:	0107c83a 	sub	r3,zero,r4
  80c704:	003fe006 	br	80c688 <__fixdfsi+0x34>
  80c708:	00e00034 	movhi	r3,32768
  80c70c:	003fde06 	br	80c688 <__fixdfsi+0x34>
  80c710:	39c7883a 	add	r3,r7,r7
  80c714:	008007c4 	movi	r2,31
  80c718:	1205c83a 	sub	r2,r2,r8
  80c71c:	1886983a 	sll	r3,r3,r2
  80c720:	3208d83a 	srl	r4,r6,r8
  80c724:	1908b03a 	or	r4,r3,r4
  80c728:	003ff206 	br	80c6f4 <__fixdfsi+0xa0>

0080c72c <__floatunsidf>:
  80c72c:	defff204 	addi	sp,sp,-56
  80c730:	dfc00d15 	stw	ra,52(sp)
  80c734:	ddc00c15 	stw	r23,48(sp)
  80c738:	dd800b15 	stw	r22,44(sp)
  80c73c:	dd400a15 	stw	r21,40(sp)
  80c740:	dd000915 	stw	r20,36(sp)
  80c744:	dcc00815 	stw	r19,32(sp)
  80c748:	dc800715 	stw	r18,28(sp)
  80c74c:	dc400615 	stw	r17,24(sp)
  80c750:	dc000515 	stw	r16,20(sp)
  80c754:	d8000115 	stw	zero,4(sp)
  80c758:	20000f1e 	bne	r4,zero,80c798 <__floatunsidf+0x6c>
  80c75c:	00800084 	movi	r2,2
  80c760:	d8800015 	stw	r2,0(sp)
  80c764:	d809883a 	mov	r4,sp
  80c768:	080cb240 	call	80cb24 <__pack_d>
  80c76c:	dfc00d17 	ldw	ra,52(sp)
  80c770:	ddc00c17 	ldw	r23,48(sp)
  80c774:	dd800b17 	ldw	r22,44(sp)
  80c778:	dd400a17 	ldw	r21,40(sp)
  80c77c:	dd000917 	ldw	r20,36(sp)
  80c780:	dcc00817 	ldw	r19,32(sp)
  80c784:	dc800717 	ldw	r18,28(sp)
  80c788:	dc400617 	ldw	r17,24(sp)
  80c78c:	dc000517 	ldw	r16,20(sp)
  80c790:	dec00e04 	addi	sp,sp,56
  80c794:	f800283a 	ret
  80c798:	008000c4 	movi	r2,3
  80c79c:	00c00f04 	movi	r3,60
  80c7a0:	002f883a 	mov	r23,zero
  80c7a4:	202d883a 	mov	r22,r4
  80c7a8:	d8800015 	stw	r2,0(sp)
  80c7ac:	d8c00215 	stw	r3,8(sp)
  80c7b0:	d9000315 	stw	r4,12(sp)
  80c7b4:	ddc00415 	stw	r23,16(sp)
  80c7b8:	080caa40 	call	80caa4 <__clzsi2>
  80c7bc:	12400744 	addi	r9,r2,29
  80c7c0:	48000b16 	blt	r9,zero,80c7f0 <__floatunsidf+0xc4>
  80c7c4:	483fe726 	beq	r9,zero,80c764 <__floatunsidf+0x38>
  80c7c8:	10bfff44 	addi	r2,r2,-3
  80c7cc:	10002e16 	blt	r2,zero,80c888 <__floatunsidf+0x15c>
  80c7d0:	b0a2983a 	sll	r17,r22,r2
  80c7d4:	0021883a 	mov	r16,zero
  80c7d8:	d8800217 	ldw	r2,8(sp)
  80c7dc:	dc400415 	stw	r17,16(sp)
  80c7e0:	dc000315 	stw	r16,12(sp)
  80c7e4:	1245c83a 	sub	r2,r2,r9
  80c7e8:	d8800215 	stw	r2,8(sp)
  80c7ec:	003fdd06 	br	80c764 <__floatunsidf+0x38>
  80c7f0:	0255c83a 	sub	r10,zero,r9
  80c7f4:	51bff804 	addi	r6,r10,-32
  80c7f8:	30001b16 	blt	r6,zero,80c868 <__floatunsidf+0x13c>
  80c7fc:	b9a8d83a 	srl	r20,r23,r6
  80c800:	002b883a 	mov	r21,zero
  80c804:	000f883a 	mov	r7,zero
  80c808:	01000044 	movi	r4,1
  80c80c:	0011883a 	mov	r8,zero
  80c810:	30002516 	blt	r6,zero,80c8a8 <__floatunsidf+0x17c>
  80c814:	21a6983a 	sll	r19,r4,r6
  80c818:	0025883a 	mov	r18,zero
  80c81c:	00bfffc4 	movi	r2,-1
  80c820:	9089883a 	add	r4,r18,r2
  80c824:	988b883a 	add	r5,r19,r2
  80c828:	248d803a 	cmpltu	r6,r4,r18
  80c82c:	314b883a 	add	r5,r6,r5
  80c830:	b104703a 	and	r2,r22,r4
  80c834:	b946703a 	and	r3,r23,r5
  80c838:	10c4b03a 	or	r2,r2,r3
  80c83c:	10000226 	beq	r2,zero,80c848 <__floatunsidf+0x11c>
  80c840:	01c00044 	movi	r7,1
  80c844:	0011883a 	mov	r8,zero
  80c848:	d9000217 	ldw	r4,8(sp)
  80c84c:	a1c4b03a 	or	r2,r20,r7
  80c850:	aa06b03a 	or	r3,r21,r8
  80c854:	2249c83a 	sub	r4,r4,r9
  80c858:	d8c00415 	stw	r3,16(sp)
  80c85c:	d9000215 	stw	r4,8(sp)
  80c860:	d8800315 	stw	r2,12(sp)
  80c864:	003fbf06 	br	80c764 <__floatunsidf+0x38>
  80c868:	bdc7883a 	add	r3,r23,r23
  80c86c:	008007c4 	movi	r2,31
  80c870:	1285c83a 	sub	r2,r2,r10
  80c874:	1886983a 	sll	r3,r3,r2
  80c878:	b2a8d83a 	srl	r20,r22,r10
  80c87c:	baaad83a 	srl	r21,r23,r10
  80c880:	1d28b03a 	or	r20,r3,r20
  80c884:	003fdf06 	br	80c804 <__floatunsidf+0xd8>
  80c888:	b006d07a 	srli	r3,r22,1
  80c88c:	008007c4 	movi	r2,31
  80c890:	1245c83a 	sub	r2,r2,r9
  80c894:	1886d83a 	srl	r3,r3,r2
  80c898:	ba62983a 	sll	r17,r23,r9
  80c89c:	b260983a 	sll	r16,r22,r9
  80c8a0:	1c62b03a 	or	r17,r3,r17
  80c8a4:	003fcc06 	br	80c7d8 <__floatunsidf+0xac>
  80c8a8:	2006d07a 	srli	r3,r4,1
  80c8ac:	008007c4 	movi	r2,31
  80c8b0:	1285c83a 	sub	r2,r2,r10
  80c8b4:	18a6d83a 	srl	r19,r3,r2
  80c8b8:	22a4983a 	sll	r18,r4,r10
  80c8bc:	003fd706 	br	80c81c <__floatunsidf+0xf0>

0080c8c0 <udivmodsi4>:
  80c8c0:	29001b2e 	bgeu	r5,r4,80c930 <udivmodsi4+0x70>
  80c8c4:	28001a16 	blt	r5,zero,80c930 <udivmodsi4+0x70>
  80c8c8:	00800044 	movi	r2,1
  80c8cc:	0007883a 	mov	r3,zero
  80c8d0:	01c007c4 	movi	r7,31
  80c8d4:	00000306 	br	80c8e4 <udivmodsi4+0x24>
  80c8d8:	19c01326 	beq	r3,r7,80c928 <udivmodsi4+0x68>
  80c8dc:	18c00044 	addi	r3,r3,1
  80c8e0:	28000416 	blt	r5,zero,80c8f4 <udivmodsi4+0x34>
  80c8e4:	294b883a 	add	r5,r5,r5
  80c8e8:	1085883a 	add	r2,r2,r2
  80c8ec:	293ffa36 	bltu	r5,r4,80c8d8 <udivmodsi4+0x18>
  80c8f0:	10000d26 	beq	r2,zero,80c928 <udivmodsi4+0x68>
  80c8f4:	0007883a 	mov	r3,zero
  80c8f8:	21400236 	bltu	r4,r5,80c904 <udivmodsi4+0x44>
  80c8fc:	2149c83a 	sub	r4,r4,r5
  80c900:	1886b03a 	or	r3,r3,r2
  80c904:	1004d07a 	srli	r2,r2,1
  80c908:	280ad07a 	srli	r5,r5,1
  80c90c:	103ffa1e 	bne	r2,zero,80c8f8 <udivmodsi4+0x38>
  80c910:	30000226 	beq	r6,zero,80c91c <udivmodsi4+0x5c>
  80c914:	2005883a 	mov	r2,r4
  80c918:	f800283a 	ret
  80c91c:	1809883a 	mov	r4,r3
  80c920:	2005883a 	mov	r2,r4
  80c924:	f800283a 	ret
  80c928:	0007883a 	mov	r3,zero
  80c92c:	003ff806 	br	80c910 <udivmodsi4+0x50>
  80c930:	00800044 	movi	r2,1
  80c934:	0007883a 	mov	r3,zero
  80c938:	003fef06 	br	80c8f8 <udivmodsi4+0x38>

0080c93c <__divsi3>:
  80c93c:	defffe04 	addi	sp,sp,-8
  80c940:	dc000015 	stw	r16,0(sp)
  80c944:	dfc00115 	stw	ra,4(sp)
  80c948:	0021883a 	mov	r16,zero
  80c94c:	20000c16 	blt	r4,zero,80c980 <__divsi3+0x44>
  80c950:	000d883a 	mov	r6,zero
  80c954:	28000e16 	blt	r5,zero,80c990 <__divsi3+0x54>
  80c958:	080c8c00 	call	80c8c0 <udivmodsi4>
  80c95c:	1007883a 	mov	r3,r2
  80c960:	8005003a 	cmpeq	r2,r16,zero
  80c964:	1000011e 	bne	r2,zero,80c96c <__divsi3+0x30>
  80c968:	00c7c83a 	sub	r3,zero,r3
  80c96c:	1805883a 	mov	r2,r3
  80c970:	dfc00117 	ldw	ra,4(sp)
  80c974:	dc000017 	ldw	r16,0(sp)
  80c978:	dec00204 	addi	sp,sp,8
  80c97c:	f800283a 	ret
  80c980:	0109c83a 	sub	r4,zero,r4
  80c984:	04000044 	movi	r16,1
  80c988:	000d883a 	mov	r6,zero
  80c98c:	283ff20e 	bge	r5,zero,80c958 <__divsi3+0x1c>
  80c990:	014bc83a 	sub	r5,zero,r5
  80c994:	8021003a 	cmpeq	r16,r16,zero
  80c998:	003fef06 	br	80c958 <__divsi3+0x1c>

0080c99c <__modsi3>:
  80c99c:	deffff04 	addi	sp,sp,-4
  80c9a0:	dfc00015 	stw	ra,0(sp)
  80c9a4:	01800044 	movi	r6,1
  80c9a8:	2807883a 	mov	r3,r5
  80c9ac:	20000416 	blt	r4,zero,80c9c0 <__modsi3+0x24>
  80c9b0:	28000c16 	blt	r5,zero,80c9e4 <__modsi3+0x48>
  80c9b4:	dfc00017 	ldw	ra,0(sp)
  80c9b8:	dec00104 	addi	sp,sp,4
  80c9bc:	080c8c01 	jmpi	80c8c0 <udivmodsi4>
  80c9c0:	0109c83a 	sub	r4,zero,r4
  80c9c4:	28000b16 	blt	r5,zero,80c9f4 <__modsi3+0x58>
  80c9c8:	180b883a 	mov	r5,r3
  80c9cc:	01800044 	movi	r6,1
  80c9d0:	080c8c00 	call	80c8c0 <udivmodsi4>
  80c9d4:	0085c83a 	sub	r2,zero,r2
  80c9d8:	dfc00017 	ldw	ra,0(sp)
  80c9dc:	dec00104 	addi	sp,sp,4
  80c9e0:	f800283a 	ret
  80c9e4:	014bc83a 	sub	r5,zero,r5
  80c9e8:	dfc00017 	ldw	ra,0(sp)
  80c9ec:	dec00104 	addi	sp,sp,4
  80c9f0:	080c8c01 	jmpi	80c8c0 <udivmodsi4>
  80c9f4:	0147c83a 	sub	r3,zero,r5
  80c9f8:	003ff306 	br	80c9c8 <__modsi3+0x2c>

0080c9fc <__udivsi3>:
  80c9fc:	000d883a 	mov	r6,zero
  80ca00:	080c8c01 	jmpi	80c8c0 <udivmodsi4>

0080ca04 <__umodsi3>:
  80ca04:	01800044 	movi	r6,1
  80ca08:	080c8c01 	jmpi	80c8c0 <udivmodsi4>

0080ca0c <__muldi3>:
  80ca0c:	2011883a 	mov	r8,r4
  80ca10:	427fffcc 	andi	r9,r8,65535
  80ca14:	4018d43a 	srli	r12,r8,16
  80ca18:	32bfffcc 	andi	r10,r6,65535
  80ca1c:	3016d43a 	srli	r11,r6,16
  80ca20:	4a85383a 	mul	r2,r9,r10
  80ca24:	6295383a 	mul	r10,r12,r10
  80ca28:	4ad3383a 	mul	r9,r9,r11
  80ca2c:	113fffcc 	andi	r4,r2,65535
  80ca30:	1004d43a 	srli	r2,r2,16
  80ca34:	4a93883a 	add	r9,r9,r10
  80ca38:	3807883a 	mov	r3,r7
  80ca3c:	1245883a 	add	r2,r2,r9
  80ca40:	280f883a 	mov	r7,r5
  80ca44:	180b883a 	mov	r5,r3
  80ca48:	1006943a 	slli	r3,r2,16
  80ca4c:	defffd04 	addi	sp,sp,-12
  80ca50:	dc800215 	stw	r18,8(sp)
  80ca54:	1907883a 	add	r3,r3,r4
  80ca58:	dc400115 	stw	r17,4(sp)
  80ca5c:	dc000015 	stw	r16,0(sp)
  80ca60:	4165383a 	mul	r18,r8,r5
  80ca64:	31e3383a 	mul	r17,r6,r7
  80ca68:	1012d43a 	srli	r9,r2,16
  80ca6c:	62d9383a 	mul	r12,r12,r11
  80ca70:	181f883a 	mov	r15,r3
  80ca74:	1280022e 	bgeu	r2,r10,80ca80 <__muldi3+0x74>
  80ca78:	00800074 	movhi	r2,1
  80ca7c:	6099883a 	add	r12,r12,r2
  80ca80:	624d883a 	add	r6,r12,r9
  80ca84:	9187883a 	add	r3,r18,r6
  80ca88:	88c7883a 	add	r3,r17,r3
  80ca8c:	7805883a 	mov	r2,r15
  80ca90:	dc800217 	ldw	r18,8(sp)
  80ca94:	dc400117 	ldw	r17,4(sp)
  80ca98:	dc000017 	ldw	r16,0(sp)
  80ca9c:	dec00304 	addi	sp,sp,12
  80caa0:	f800283a 	ret

0080caa4 <__clzsi2>:
  80caa4:	00bfffd4 	movui	r2,65535
  80caa8:	11000e36 	bltu	r2,r4,80cae4 <__clzsi2+0x40>
  80caac:	00803fc4 	movi	r2,255
  80cab0:	01400204 	movi	r5,8
  80cab4:	0007883a 	mov	r3,zero
  80cab8:	11001036 	bltu	r2,r4,80cafc <__clzsi2+0x58>
  80cabc:	000b883a 	mov	r5,zero
  80cac0:	20c6d83a 	srl	r3,r4,r3
  80cac4:	00802074 	movhi	r2,129
  80cac8:	10844904 	addi	r2,r2,4388
  80cacc:	1887883a 	add	r3,r3,r2
  80cad0:	18800003 	ldbu	r2,0(r3)
  80cad4:	00c00804 	movi	r3,32
  80cad8:	2885883a 	add	r2,r5,r2
  80cadc:	1885c83a 	sub	r2,r3,r2
  80cae0:	f800283a 	ret
  80cae4:	01400404 	movi	r5,16
  80cae8:	00804034 	movhi	r2,256
  80caec:	10bfffc4 	addi	r2,r2,-1
  80caf0:	2807883a 	mov	r3,r5
  80caf4:	113ff22e 	bgeu	r2,r4,80cac0 <__clzsi2+0x1c>
  80caf8:	01400604 	movi	r5,24
  80cafc:	2807883a 	mov	r3,r5
  80cb00:	20c6d83a 	srl	r3,r4,r3
  80cb04:	00802074 	movhi	r2,129
  80cb08:	10844904 	addi	r2,r2,4388
  80cb0c:	1887883a 	add	r3,r3,r2
  80cb10:	18800003 	ldbu	r2,0(r3)
  80cb14:	00c00804 	movi	r3,32
  80cb18:	2885883a 	add	r2,r5,r2
  80cb1c:	1885c83a 	sub	r2,r3,r2
  80cb20:	f800283a 	ret

0080cb24 <__pack_d>:
  80cb24:	20c00017 	ldw	r3,0(r4)
  80cb28:	defffd04 	addi	sp,sp,-12
  80cb2c:	dc000015 	stw	r16,0(sp)
  80cb30:	dc800215 	stw	r18,8(sp)
  80cb34:	dc400115 	stw	r17,4(sp)
  80cb38:	00800044 	movi	r2,1
  80cb3c:	22000317 	ldw	r8,12(r4)
  80cb40:	001f883a 	mov	r15,zero
  80cb44:	22400417 	ldw	r9,16(r4)
  80cb48:	24000117 	ldw	r16,4(r4)
  80cb4c:	10c0552e 	bgeu	r2,r3,80cca4 <__pack_d+0x180>
  80cb50:	00800104 	movi	r2,4
  80cb54:	18804f26 	beq	r3,r2,80cc94 <__pack_d+0x170>
  80cb58:	00800084 	movi	r2,2
  80cb5c:	18800226 	beq	r3,r2,80cb68 <__pack_d+0x44>
  80cb60:	4244b03a 	or	r2,r8,r9
  80cb64:	10001a1e 	bne	r2,zero,80cbd0 <__pack_d+0xac>
  80cb68:	000d883a 	mov	r6,zero
  80cb6c:	000f883a 	mov	r7,zero
  80cb70:	0011883a 	mov	r8,zero
  80cb74:	00800434 	movhi	r2,16
  80cb78:	10bfffc4 	addi	r2,r2,-1
  80cb7c:	301d883a 	mov	r14,r6
  80cb80:	3884703a 	and	r2,r7,r2
  80cb84:	400a953a 	slli	r5,r8,20
  80cb88:	79bffc2c 	andhi	r6,r15,65520
  80cb8c:	308cb03a 	or	r6,r6,r2
  80cb90:	00e00434 	movhi	r3,32784
  80cb94:	18ffffc4 	addi	r3,r3,-1
  80cb98:	800497fa 	slli	r2,r16,31
  80cb9c:	30c6703a 	and	r3,r6,r3
  80cba0:	1946b03a 	or	r3,r3,r5
  80cba4:	01600034 	movhi	r5,32768
  80cba8:	297fffc4 	addi	r5,r5,-1
  80cbac:	194a703a 	and	r5,r3,r5
  80cbb0:	288ab03a 	or	r5,r5,r2
  80cbb4:	2807883a 	mov	r3,r5
  80cbb8:	7005883a 	mov	r2,r14
  80cbbc:	dc800217 	ldw	r18,8(sp)
  80cbc0:	dc400117 	ldw	r17,4(sp)
  80cbc4:	dc000017 	ldw	r16,0(sp)
  80cbc8:	dec00304 	addi	sp,sp,12
  80cbcc:	f800283a 	ret
  80cbd0:	21000217 	ldw	r4,8(r4)
  80cbd4:	00bf0084 	movi	r2,-1022
  80cbd8:	20803f16 	blt	r4,r2,80ccd8 <__pack_d+0x1b4>
  80cbdc:	0080ffc4 	movi	r2,1023
  80cbe0:	11002c16 	blt	r2,r4,80cc94 <__pack_d+0x170>
  80cbe4:	00803fc4 	movi	r2,255
  80cbe8:	408c703a 	and	r6,r8,r2
  80cbec:	00802004 	movi	r2,128
  80cbf0:	0007883a 	mov	r3,zero
  80cbf4:	000f883a 	mov	r7,zero
  80cbf8:	2280ffc4 	addi	r10,r4,1023
  80cbfc:	30801e26 	beq	r6,r2,80cc78 <__pack_d+0x154>
  80cc00:	00801fc4 	movi	r2,127
  80cc04:	4089883a 	add	r4,r8,r2
  80cc08:	220d803a 	cmpltu	r6,r4,r8
  80cc0c:	324d883a 	add	r6,r6,r9
  80cc10:	2011883a 	mov	r8,r4
  80cc14:	3013883a 	mov	r9,r6
  80cc18:	00880034 	movhi	r2,8192
  80cc1c:	10bfffc4 	addi	r2,r2,-1
  80cc20:	12400d36 	bltu	r2,r9,80cc58 <__pack_d+0x134>
  80cc24:	4804963a 	slli	r2,r9,24
  80cc28:	400cd23a 	srli	r6,r8,8
  80cc2c:	480ed23a 	srli	r7,r9,8
  80cc30:	013fffc4 	movi	r4,-1
  80cc34:	118cb03a 	or	r6,r2,r6
  80cc38:	01400434 	movhi	r5,16
  80cc3c:	297fffc4 	addi	r5,r5,-1
  80cc40:	3104703a 	and	r2,r6,r4
  80cc44:	3946703a 	and	r3,r7,r5
  80cc48:	5201ffcc 	andi	r8,r10,2047
  80cc4c:	100d883a 	mov	r6,r2
  80cc50:	180f883a 	mov	r7,r3
  80cc54:	003fc706 	br	80cb74 <__pack_d+0x50>
  80cc58:	480897fa 	slli	r4,r9,31
  80cc5c:	4004d07a 	srli	r2,r8,1
  80cc60:	4806d07a 	srli	r3,r9,1
  80cc64:	52800044 	addi	r10,r10,1
  80cc68:	2084b03a 	or	r2,r4,r2
  80cc6c:	1011883a 	mov	r8,r2
  80cc70:	1813883a 	mov	r9,r3
  80cc74:	003feb06 	br	80cc24 <__pack_d+0x100>
  80cc78:	383fe11e 	bne	r7,zero,80cc00 <__pack_d+0xdc>
  80cc7c:	01004004 	movi	r4,256
  80cc80:	4104703a 	and	r2,r8,r4
  80cc84:	10c4b03a 	or	r2,r2,r3
  80cc88:	103fe326 	beq	r2,zero,80cc18 <__pack_d+0xf4>
  80cc8c:	3005883a 	mov	r2,r6
  80cc90:	003fdc06 	br	80cc04 <__pack_d+0xe0>
  80cc94:	000d883a 	mov	r6,zero
  80cc98:	000f883a 	mov	r7,zero
  80cc9c:	0201ffc4 	movi	r8,2047
  80cca0:	003fb406 	br	80cb74 <__pack_d+0x50>
  80cca4:	0005883a 	mov	r2,zero
  80cca8:	00c00234 	movhi	r3,8
  80ccac:	408cb03a 	or	r6,r8,r2
  80ccb0:	48ceb03a 	or	r7,r9,r3
  80ccb4:	013fffc4 	movi	r4,-1
  80ccb8:	01400434 	movhi	r5,16
  80ccbc:	297fffc4 	addi	r5,r5,-1
  80ccc0:	3104703a 	and	r2,r6,r4
  80ccc4:	3946703a 	and	r3,r7,r5
  80ccc8:	100d883a 	mov	r6,r2
  80cccc:	180f883a 	mov	r7,r3
  80ccd0:	0201ffc4 	movi	r8,2047
  80ccd4:	003fa706 	br	80cb74 <__pack_d+0x50>
  80ccd8:	1109c83a 	sub	r4,r2,r4
  80ccdc:	00800e04 	movi	r2,56
  80cce0:	11004316 	blt	r2,r4,80cdf0 <__pack_d+0x2cc>
  80cce4:	21fff804 	addi	r7,r4,-32
  80cce8:	38004516 	blt	r7,zero,80ce00 <__pack_d+0x2dc>
  80ccec:	49d8d83a 	srl	r12,r9,r7
  80ccf0:	001b883a 	mov	r13,zero
  80ccf4:	0023883a 	mov	r17,zero
  80ccf8:	01400044 	movi	r5,1
  80ccfc:	0025883a 	mov	r18,zero
  80cd00:	38004716 	blt	r7,zero,80ce20 <__pack_d+0x2fc>
  80cd04:	29d6983a 	sll	r11,r5,r7
  80cd08:	0015883a 	mov	r10,zero
  80cd0c:	00bfffc4 	movi	r2,-1
  80cd10:	5089883a 	add	r4,r10,r2
  80cd14:	588b883a 	add	r5,r11,r2
  80cd18:	228d803a 	cmpltu	r6,r4,r10
  80cd1c:	314b883a 	add	r5,r6,r5
  80cd20:	4104703a 	and	r2,r8,r4
  80cd24:	4946703a 	and	r3,r9,r5
  80cd28:	10c4b03a 	or	r2,r2,r3
  80cd2c:	10000226 	beq	r2,zero,80cd38 <__pack_d+0x214>
  80cd30:	04400044 	movi	r17,1
  80cd34:	0025883a 	mov	r18,zero
  80cd38:	00803fc4 	movi	r2,255
  80cd3c:	644eb03a 	or	r7,r12,r17
  80cd40:	3892703a 	and	r9,r7,r2
  80cd44:	00802004 	movi	r2,128
  80cd48:	6c90b03a 	or	r8,r13,r18
  80cd4c:	0015883a 	mov	r10,zero
  80cd50:	48801626 	beq	r9,r2,80cdac <__pack_d+0x288>
  80cd54:	01001fc4 	movi	r4,127
  80cd58:	3905883a 	add	r2,r7,r4
  80cd5c:	11cd803a 	cmpltu	r6,r2,r7
  80cd60:	320d883a 	add	r6,r6,r8
  80cd64:	100f883a 	mov	r7,r2
  80cd68:	00840034 	movhi	r2,4096
  80cd6c:	10bfffc4 	addi	r2,r2,-1
  80cd70:	3011883a 	mov	r8,r6
  80cd74:	0007883a 	mov	r3,zero
  80cd78:	11801b36 	bltu	r2,r6,80cde8 <__pack_d+0x2c4>
  80cd7c:	4004963a 	slli	r2,r8,24
  80cd80:	3808d23a 	srli	r4,r7,8
  80cd84:	400ad23a 	srli	r5,r8,8
  80cd88:	1813883a 	mov	r9,r3
  80cd8c:	1108b03a 	or	r4,r2,r4
  80cd90:	00bfffc4 	movi	r2,-1
  80cd94:	00c00434 	movhi	r3,16
  80cd98:	18ffffc4 	addi	r3,r3,-1
  80cd9c:	208c703a 	and	r6,r4,r2
  80cda0:	28ce703a 	and	r7,r5,r3
  80cda4:	4a01ffcc 	andi	r8,r9,2047
  80cda8:	003f7206 	br	80cb74 <__pack_d+0x50>
  80cdac:	503fe91e 	bne	r10,zero,80cd54 <__pack_d+0x230>
  80cdb0:	01004004 	movi	r4,256
  80cdb4:	3904703a 	and	r2,r7,r4
  80cdb8:	0007883a 	mov	r3,zero
  80cdbc:	10c4b03a 	or	r2,r2,r3
  80cdc0:	10000626 	beq	r2,zero,80cddc <__pack_d+0x2b8>
  80cdc4:	3a45883a 	add	r2,r7,r9
  80cdc8:	11cd803a 	cmpltu	r6,r2,r7
  80cdcc:	320d883a 	add	r6,r6,r8
  80cdd0:	100f883a 	mov	r7,r2
  80cdd4:	3011883a 	mov	r8,r6
  80cdd8:	0007883a 	mov	r3,zero
  80cddc:	00840034 	movhi	r2,4096
  80cde0:	10bfffc4 	addi	r2,r2,-1
  80cde4:	123fe52e 	bgeu	r2,r8,80cd7c <__pack_d+0x258>
  80cde8:	00c00044 	movi	r3,1
  80cdec:	003fe306 	br	80cd7c <__pack_d+0x258>
  80cdf0:	0009883a 	mov	r4,zero
  80cdf4:	0013883a 	mov	r9,zero
  80cdf8:	000b883a 	mov	r5,zero
  80cdfc:	003fe406 	br	80cd90 <__pack_d+0x26c>
  80ce00:	4a47883a 	add	r3,r9,r9
  80ce04:	008007c4 	movi	r2,31
  80ce08:	1105c83a 	sub	r2,r2,r4
  80ce0c:	1886983a 	sll	r3,r3,r2
  80ce10:	4118d83a 	srl	r12,r8,r4
  80ce14:	491ad83a 	srl	r13,r9,r4
  80ce18:	1b18b03a 	or	r12,r3,r12
  80ce1c:	003fb506 	br	80ccf4 <__pack_d+0x1d0>
  80ce20:	2806d07a 	srli	r3,r5,1
  80ce24:	008007c4 	movi	r2,31
  80ce28:	1105c83a 	sub	r2,r2,r4
  80ce2c:	1896d83a 	srl	r11,r3,r2
  80ce30:	2914983a 	sll	r10,r5,r4
  80ce34:	003fb506 	br	80cd0c <__pack_d+0x1e8>

0080ce38 <__unpack_d>:
  80ce38:	20c00117 	ldw	r3,4(r4)
  80ce3c:	22400017 	ldw	r9,0(r4)
  80ce40:	00800434 	movhi	r2,16
  80ce44:	10bfffc4 	addi	r2,r2,-1
  80ce48:	1808d53a 	srli	r4,r3,20
  80ce4c:	180cd7fa 	srli	r6,r3,31
  80ce50:	1894703a 	and	r10,r3,r2
  80ce54:	2201ffcc 	andi	r8,r4,2047
  80ce58:	281b883a 	mov	r13,r5
  80ce5c:	4817883a 	mov	r11,r9
  80ce60:	29800115 	stw	r6,4(r5)
  80ce64:	5019883a 	mov	r12,r10
  80ce68:	40001e1e 	bne	r8,zero,80cee4 <__unpack_d+0xac>
  80ce6c:	4a84b03a 	or	r2,r9,r10
  80ce70:	10001926 	beq	r2,zero,80ced8 <__unpack_d+0xa0>
  80ce74:	4804d63a 	srli	r2,r9,24
  80ce78:	500c923a 	slli	r6,r10,8
  80ce7c:	013f0084 	movi	r4,-1022
  80ce80:	00c40034 	movhi	r3,4096
  80ce84:	18ffffc4 	addi	r3,r3,-1
  80ce88:	118cb03a 	or	r6,r2,r6
  80ce8c:	008000c4 	movi	r2,3
  80ce90:	480a923a 	slli	r5,r9,8
  80ce94:	68800015 	stw	r2,0(r13)
  80ce98:	69000215 	stw	r4,8(r13)
  80ce9c:	19800b36 	bltu	r3,r6,80cecc <__unpack_d+0x94>
  80cea0:	200f883a 	mov	r7,r4
  80cea4:	1811883a 	mov	r8,r3
  80cea8:	2945883a 	add	r2,r5,r5
  80ceac:	1149803a 	cmpltu	r4,r2,r5
  80ceb0:	3187883a 	add	r3,r6,r6
  80ceb4:	20c9883a 	add	r4,r4,r3
  80ceb8:	100b883a 	mov	r5,r2
  80cebc:	200d883a 	mov	r6,r4
  80cec0:	39ffffc4 	addi	r7,r7,-1
  80cec4:	413ff82e 	bgeu	r8,r4,80cea8 <__unpack_d+0x70>
  80cec8:	69c00215 	stw	r7,8(r13)
  80cecc:	69800415 	stw	r6,16(r13)
  80ced0:	69400315 	stw	r5,12(r13)
  80ced4:	f800283a 	ret
  80ced8:	00800084 	movi	r2,2
  80cedc:	28800015 	stw	r2,0(r5)
  80cee0:	f800283a 	ret
  80cee4:	0081ffc4 	movi	r2,2047
  80cee8:	40800f26 	beq	r8,r2,80cf28 <__unpack_d+0xf0>
  80ceec:	480cd63a 	srli	r6,r9,24
  80cef0:	5006923a 	slli	r3,r10,8
  80cef4:	4804923a 	slli	r2,r9,8
  80cef8:	0009883a 	mov	r4,zero
  80cefc:	30c6b03a 	or	r3,r6,r3
  80cf00:	01440034 	movhi	r5,4096
  80cf04:	110cb03a 	or	r6,r2,r4
  80cf08:	423f0044 	addi	r8,r8,-1023
  80cf0c:	194eb03a 	or	r7,r3,r5
  80cf10:	008000c4 	movi	r2,3
  80cf14:	69c00415 	stw	r7,16(r13)
  80cf18:	6a000215 	stw	r8,8(r13)
  80cf1c:	68800015 	stw	r2,0(r13)
  80cf20:	69800315 	stw	r6,12(r13)
  80cf24:	f800283a 	ret
  80cf28:	4a84b03a 	or	r2,r9,r10
  80cf2c:	1000031e 	bne	r2,zero,80cf3c <__unpack_d+0x104>
  80cf30:	00800104 	movi	r2,4
  80cf34:	28800015 	stw	r2,0(r5)
  80cf38:	f800283a 	ret
  80cf3c:	0009883a 	mov	r4,zero
  80cf40:	01400234 	movhi	r5,8
  80cf44:	4904703a 	and	r2,r9,r4
  80cf48:	5146703a 	and	r3,r10,r5
  80cf4c:	10c4b03a 	or	r2,r2,r3
  80cf50:	10000526 	beq	r2,zero,80cf68 <__unpack_d+0x130>
  80cf54:	00800044 	movi	r2,1
  80cf58:	68800015 	stw	r2,0(r13)
  80cf5c:	6b000415 	stw	r12,16(r13)
  80cf60:	6ac00315 	stw	r11,12(r13)
  80cf64:	f800283a 	ret
  80cf68:	68000015 	stw	zero,0(r13)
  80cf6c:	003ffb06 	br	80cf5c <__unpack_d+0x124>

0080cf70 <__fpcmp_parts_d>:
  80cf70:	21800017 	ldw	r6,0(r4)
  80cf74:	00c00044 	movi	r3,1
  80cf78:	19800a2e 	bgeu	r3,r6,80cfa4 <__fpcmp_parts_d+0x34>
  80cf7c:	28800017 	ldw	r2,0(r5)
  80cf80:	1880082e 	bgeu	r3,r2,80cfa4 <__fpcmp_parts_d+0x34>
  80cf84:	00c00104 	movi	r3,4
  80cf88:	30c02626 	beq	r6,r3,80d024 <__fpcmp_parts_d+0xb4>
  80cf8c:	10c02226 	beq	r2,r3,80d018 <__fpcmp_parts_d+0xa8>
  80cf90:	00c00084 	movi	r3,2
  80cf94:	30c00526 	beq	r6,r3,80cfac <__fpcmp_parts_d+0x3c>
  80cf98:	10c0071e 	bne	r2,r3,80cfb8 <__fpcmp_parts_d+0x48>
  80cf9c:	20800117 	ldw	r2,4(r4)
  80cfa0:	1000091e 	bne	r2,zero,80cfc8 <__fpcmp_parts_d+0x58>
  80cfa4:	00800044 	movi	r2,1
  80cfa8:	f800283a 	ret
  80cfac:	10c01a1e 	bne	r2,r3,80d018 <__fpcmp_parts_d+0xa8>
  80cfb0:	0005883a 	mov	r2,zero
  80cfb4:	f800283a 	ret
  80cfb8:	22000117 	ldw	r8,4(r4)
  80cfbc:	28800117 	ldw	r2,4(r5)
  80cfc0:	40800326 	beq	r8,r2,80cfd0 <__fpcmp_parts_d+0x60>
  80cfc4:	403ff726 	beq	r8,zero,80cfa4 <__fpcmp_parts_d+0x34>
  80cfc8:	00bfffc4 	movi	r2,-1
  80cfcc:	f800283a 	ret
  80cfd0:	20c00217 	ldw	r3,8(r4)
  80cfd4:	28800217 	ldw	r2,8(r5)
  80cfd8:	10fffa16 	blt	r2,r3,80cfc4 <__fpcmp_parts_d+0x54>
  80cfdc:	18800916 	blt	r3,r2,80d004 <__fpcmp_parts_d+0x94>
  80cfe0:	21c00417 	ldw	r7,16(r4)
  80cfe4:	28c00417 	ldw	r3,16(r5)
  80cfe8:	21800317 	ldw	r6,12(r4)
  80cfec:	28800317 	ldw	r2,12(r5)
  80cff0:	19fff436 	bltu	r3,r7,80cfc4 <__fpcmp_parts_d+0x54>
  80cff4:	38c00526 	beq	r7,r3,80d00c <__fpcmp_parts_d+0x9c>
  80cff8:	38c00236 	bltu	r7,r3,80d004 <__fpcmp_parts_d+0x94>
  80cffc:	19ffec1e 	bne	r3,r7,80cfb0 <__fpcmp_parts_d+0x40>
  80d000:	30bfeb2e 	bgeu	r6,r2,80cfb0 <__fpcmp_parts_d+0x40>
  80d004:	403fe71e 	bne	r8,zero,80cfa4 <__fpcmp_parts_d+0x34>
  80d008:	003fef06 	br	80cfc8 <__fpcmp_parts_d+0x58>
  80d00c:	11bffa2e 	bgeu	r2,r6,80cff8 <__fpcmp_parts_d+0x88>
  80d010:	403fe426 	beq	r8,zero,80cfa4 <__fpcmp_parts_d+0x34>
  80d014:	003fec06 	br	80cfc8 <__fpcmp_parts_d+0x58>
  80d018:	28800117 	ldw	r2,4(r5)
  80d01c:	103fe11e 	bne	r2,zero,80cfa4 <__fpcmp_parts_d+0x34>
  80d020:	003fe906 	br	80cfc8 <__fpcmp_parts_d+0x58>
  80d024:	11bfdd1e 	bne	r2,r6,80cf9c <__fpcmp_parts_d+0x2c>
  80d028:	28c00117 	ldw	r3,4(r5)
  80d02c:	20800117 	ldw	r2,4(r4)
  80d030:	1885c83a 	sub	r2,r3,r2
  80d034:	f800283a 	ret

0080d038 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80d038:	defff804 	addi	sp,sp,-32
  80d03c:	dfc00715 	stw	ra,28(sp)
  80d040:	df000615 	stw	fp,24(sp)
  80d044:	df000604 	addi	fp,sp,24
  80d048:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80d04c:	e0bffc17 	ldw	r2,-16(fp)
  80d050:	1004803a 	cmplt	r2,r2,zero
  80d054:	1000081e 	bne	r2,zero,80d078 <close+0x40>
  80d058:	e0bffc17 	ldw	r2,-16(fp)
  80d05c:	10800324 	muli	r2,r2,12
  80d060:	1007883a 	mov	r3,r2
  80d064:	00802074 	movhi	r2,129
  80d068:	1086a604 	addi	r2,r2,6808
  80d06c:	1887883a 	add	r3,r3,r2
  80d070:	e0ffff15 	stw	r3,-4(fp)
  80d074:	00000106 	br	80d07c <close+0x44>
  80d078:	e03fff15 	stw	zero,-4(fp)
  80d07c:	e0bfff17 	ldw	r2,-4(fp)
  80d080:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80d084:	e0bffb17 	ldw	r2,-20(fp)
  80d088:	1005003a 	cmpeq	r2,r2,zero
  80d08c:	10001d1e 	bne	r2,zero,80d104 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80d090:	e0bffb17 	ldw	r2,-20(fp)
  80d094:	10800017 	ldw	r2,0(r2)
  80d098:	10800417 	ldw	r2,16(r2)
  80d09c:	1005003a 	cmpeq	r2,r2,zero
  80d0a0:	1000071e 	bne	r2,zero,80d0c0 <close+0x88>
  80d0a4:	e0bffb17 	ldw	r2,-20(fp)
  80d0a8:	10800017 	ldw	r2,0(r2)
  80d0ac:	10800417 	ldw	r2,16(r2)
  80d0b0:	e13ffb17 	ldw	r4,-20(fp)
  80d0b4:	103ee83a 	callr	r2
  80d0b8:	e0bffe15 	stw	r2,-8(fp)
  80d0bc:	00000106 	br	80d0c4 <close+0x8c>
  80d0c0:	e03ffe15 	stw	zero,-8(fp)
  80d0c4:	e0bffe17 	ldw	r2,-8(fp)
  80d0c8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80d0cc:	e13ffc17 	ldw	r4,-16(fp)
  80d0d0:	080dc5c0 	call	80dc5c <alt_release_fd>
    if (rval < 0)
  80d0d4:	e0bffa17 	ldw	r2,-24(fp)
  80d0d8:	1004403a 	cmpge	r2,r2,zero
  80d0dc:	1000071e 	bne	r2,zero,80d0fc <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80d0e0:	080d1340 	call	80d134 <alt_get_errno>
  80d0e4:	e0fffa17 	ldw	r3,-24(fp)
  80d0e8:	00c7c83a 	sub	r3,zero,r3
  80d0ec:	10c00015 	stw	r3,0(r2)
      return -1;
  80d0f0:	00bfffc4 	movi	r2,-1
  80d0f4:	e0bffd15 	stw	r2,-12(fp)
  80d0f8:	00000806 	br	80d11c <close+0xe4>
    }
    return 0;
  80d0fc:	e03ffd15 	stw	zero,-12(fp)
  80d100:	00000606 	br	80d11c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d104:	080d1340 	call	80d134 <alt_get_errno>
  80d108:	1007883a 	mov	r3,r2
  80d10c:	00801444 	movi	r2,81
  80d110:	18800015 	stw	r2,0(r3)
    return -1;
  80d114:	00bfffc4 	movi	r2,-1
  80d118:	e0bffd15 	stw	r2,-12(fp)
  80d11c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80d120:	e037883a 	mov	sp,fp
  80d124:	dfc00117 	ldw	ra,4(sp)
  80d128:	df000017 	ldw	fp,0(sp)
  80d12c:	dec00204 	addi	sp,sp,8
  80d130:	f800283a 	ret

0080d134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d134:	defffd04 	addi	sp,sp,-12
  80d138:	dfc00215 	stw	ra,8(sp)
  80d13c:	df000115 	stw	fp,4(sp)
  80d140:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d144:	00802074 	movhi	r2,129
  80d148:	108bc004 	addi	r2,r2,12032
  80d14c:	10800017 	ldw	r2,0(r2)
  80d150:	1005003a 	cmpeq	r2,r2,zero
  80d154:	1000061e 	bne	r2,zero,80d170 <alt_get_errno+0x3c>
  80d158:	00802074 	movhi	r2,129
  80d15c:	108bc004 	addi	r2,r2,12032
  80d160:	10800017 	ldw	r2,0(r2)
  80d164:	103ee83a 	callr	r2
  80d168:	e0bfff15 	stw	r2,-4(fp)
  80d16c:	00000306 	br	80d17c <alt_get_errno+0x48>
  80d170:	00802074 	movhi	r2,129
  80d174:	1092fb04 	addi	r2,r2,19436
  80d178:	e0bfff15 	stw	r2,-4(fp)
  80d17c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d180:	e037883a 	mov	sp,fp
  80d184:	dfc00117 	ldw	ra,4(sp)
  80d188:	df000017 	ldw	fp,0(sp)
  80d18c:	dec00204 	addi	sp,sp,8
  80d190:	f800283a 	ret

0080d194 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80d194:	defffc04 	addi	sp,sp,-16
  80d198:	df000315 	stw	fp,12(sp)
  80d19c:	df000304 	addi	fp,sp,12
  80d1a0:	e13ffd15 	stw	r4,-12(fp)
  80d1a4:	e17ffe15 	stw	r5,-8(fp)
  80d1a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80d1ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80d1b0:	e037883a 	mov	sp,fp
  80d1b4:	df000017 	ldw	fp,0(sp)
  80d1b8:	dec00104 	addi	sp,sp,4
  80d1bc:	f800283a 	ret

0080d1c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80d1c0:	defffd04 	addi	sp,sp,-12
  80d1c4:	df000215 	stw	fp,8(sp)
  80d1c8:	df000204 	addi	fp,sp,8
  80d1cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80d1d0:	e0bfff17 	ldw	r2,-4(fp)
  80d1d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d1d8:	e0bffe17 	ldw	r2,-8(fp)
  80d1dc:	1005003a 	cmpeq	r2,r2,zero
  80d1e0:	1000021e 	bne	r2,zero,80d1ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80d1e4:	002af070 	cmpltui	zero,zero,43969
  80d1e8:	00000106 	br	80d1f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80d1ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80d1f0:	e037883a 	mov	sp,fp
  80d1f4:	df000017 	ldw	fp,0(sp)
  80d1f8:	dec00104 	addi	sp,sp,4
  80d1fc:	f800283a 	ret

0080d200 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d200:	defffd04 	addi	sp,sp,-12
  80d204:	dfc00215 	stw	ra,8(sp)
  80d208:	df000115 	stw	fp,4(sp)
  80d20c:	df000104 	addi	fp,sp,4
  80d210:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80d214:	e13fff17 	ldw	r4,-4(fp)
  80d218:	080d1c00 	call	80d1c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80d21c:	003fff06 	br	80d21c <_exit+0x1c>

0080d220 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80d220:	defff904 	addi	sp,sp,-28
  80d224:	dfc00615 	stw	ra,24(sp)
  80d228:	df000515 	stw	fp,20(sp)
  80d22c:	df000504 	addi	fp,sp,20
  80d230:	e13ffc15 	stw	r4,-16(fp)
  80d234:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d238:	e0bffc17 	ldw	r2,-16(fp)
  80d23c:	1004803a 	cmplt	r2,r2,zero
  80d240:	1000081e 	bne	r2,zero,80d264 <fstat+0x44>
  80d244:	e0bffc17 	ldw	r2,-16(fp)
  80d248:	10800324 	muli	r2,r2,12
  80d24c:	1007883a 	mov	r3,r2
  80d250:	00802074 	movhi	r2,129
  80d254:	1086a604 	addi	r2,r2,6808
  80d258:	1887883a 	add	r3,r3,r2
  80d25c:	e0ffff15 	stw	r3,-4(fp)
  80d260:	00000106 	br	80d268 <fstat+0x48>
  80d264:	e03fff15 	stw	zero,-4(fp)
  80d268:	e0bfff17 	ldw	r2,-4(fp)
  80d26c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d270:	e0bffb17 	ldw	r2,-20(fp)
  80d274:	1005003a 	cmpeq	r2,r2,zero
  80d278:	1000121e 	bne	r2,zero,80d2c4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80d27c:	e0bffb17 	ldw	r2,-20(fp)
  80d280:	10800017 	ldw	r2,0(r2)
  80d284:	10800817 	ldw	r2,32(r2)
  80d288:	1005003a 	cmpeq	r2,r2,zero
  80d28c:	1000081e 	bne	r2,zero,80d2b0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80d290:	e0bffb17 	ldw	r2,-20(fp)
  80d294:	10800017 	ldw	r2,0(r2)
  80d298:	10800817 	ldw	r2,32(r2)
  80d29c:	e13ffb17 	ldw	r4,-20(fp)
  80d2a0:	e17ffd17 	ldw	r5,-12(fp)
  80d2a4:	103ee83a 	callr	r2
  80d2a8:	e0bffe15 	stw	r2,-8(fp)
  80d2ac:	00000b06 	br	80d2dc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80d2b0:	e0fffd17 	ldw	r3,-12(fp)
  80d2b4:	00880004 	movi	r2,8192
  80d2b8:	18800115 	stw	r2,4(r3)
      return 0;
  80d2bc:	e03ffe15 	stw	zero,-8(fp)
  80d2c0:	00000606 	br	80d2dc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d2c4:	080d2f40 	call	80d2f4 <alt_get_errno>
  80d2c8:	1007883a 	mov	r3,r2
  80d2cc:	00801444 	movi	r2,81
  80d2d0:	18800015 	stw	r2,0(r3)
    return -1;
  80d2d4:	00bfffc4 	movi	r2,-1
  80d2d8:	e0bffe15 	stw	r2,-8(fp)
  80d2dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80d2e0:	e037883a 	mov	sp,fp
  80d2e4:	dfc00117 	ldw	ra,4(sp)
  80d2e8:	df000017 	ldw	fp,0(sp)
  80d2ec:	dec00204 	addi	sp,sp,8
  80d2f0:	f800283a 	ret

0080d2f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d2f4:	defffd04 	addi	sp,sp,-12
  80d2f8:	dfc00215 	stw	ra,8(sp)
  80d2fc:	df000115 	stw	fp,4(sp)
  80d300:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d304:	00802074 	movhi	r2,129
  80d308:	108bc004 	addi	r2,r2,12032
  80d30c:	10800017 	ldw	r2,0(r2)
  80d310:	1005003a 	cmpeq	r2,r2,zero
  80d314:	1000061e 	bne	r2,zero,80d330 <alt_get_errno+0x3c>
  80d318:	00802074 	movhi	r2,129
  80d31c:	108bc004 	addi	r2,r2,12032
  80d320:	10800017 	ldw	r2,0(r2)
  80d324:	103ee83a 	callr	r2
  80d328:	e0bfff15 	stw	r2,-4(fp)
  80d32c:	00000306 	br	80d33c <alt_get_errno+0x48>
  80d330:	00802074 	movhi	r2,129
  80d334:	1092fb04 	addi	r2,r2,19436
  80d338:	e0bfff15 	stw	r2,-4(fp)
  80d33c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d340:	e037883a 	mov	sp,fp
  80d344:	dfc00117 	ldw	ra,4(sp)
  80d348:	df000017 	ldw	fp,0(sp)
  80d34c:	dec00204 	addi	sp,sp,8
  80d350:	f800283a 	ret

0080d354 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80d354:	deffff04 	addi	sp,sp,-4
  80d358:	df000015 	stw	fp,0(sp)
  80d35c:	d839883a 	mov	fp,sp
  return 0;
  80d360:	0005883a 	mov	r2,zero
}
  80d364:	e037883a 	mov	sp,fp
  80d368:	df000017 	ldw	fp,0(sp)
  80d36c:	dec00104 	addi	sp,sp,4
  80d370:	f800283a 	ret

0080d374 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80d374:	deffef04 	addi	sp,sp,-68
  80d378:	df001015 	stw	fp,64(sp)
  80d37c:	df001004 	addi	fp,sp,64
  80d380:	e13ffc15 	stw	r4,-16(fp)
  80d384:	e17ffd15 	stw	r5,-12(fp)
  80d388:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80d38c:	00bffa84 	movi	r2,-22
  80d390:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d394:	e0bffc17 	ldw	r2,-16(fp)
  80d398:	10800828 	cmpgeui	r2,r2,32
  80d39c:	1000601e 	bne	r2,zero,80d520 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d3a0:	0005303a 	rdctl	r2,status
  80d3a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d3a8:	e0fff917 	ldw	r3,-28(fp)
  80d3ac:	00bfff84 	movi	r2,-2
  80d3b0:	1884703a 	and	r2,r3,r2
  80d3b4:	1001703a 	wrctl	status,r2
  
  return context;
  80d3b8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80d3bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80d3c0:	e0bffc17 	ldw	r2,-16(fp)
  80d3c4:	00c02074 	movhi	r3,129
  80d3c8:	18d50f04 	addi	r3,r3,21564
  80d3cc:	100490fa 	slli	r2,r2,3
  80d3d0:	10c7883a 	add	r3,r2,r3
  80d3d4:	e0bffe17 	ldw	r2,-8(fp)
  80d3d8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80d3dc:	e0bffc17 	ldw	r2,-16(fp)
  80d3e0:	00c02074 	movhi	r3,129
  80d3e4:	18d50f04 	addi	r3,r3,21564
  80d3e8:	100490fa 	slli	r2,r2,3
  80d3ec:	10c5883a 	add	r2,r2,r3
  80d3f0:	10c00104 	addi	r3,r2,4
  80d3f4:	e0bffd17 	ldw	r2,-12(fp)
  80d3f8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80d3fc:	e0bffe17 	ldw	r2,-8(fp)
  80d400:	1005003a 	cmpeq	r2,r2,zero
  80d404:	1000201e 	bne	r2,zero,80d488 <alt_irq_register+0x114>
  80d408:	e0bffc17 	ldw	r2,-16(fp)
  80d40c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d410:	0005303a 	rdctl	r2,status
  80d414:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d418:	e0fff617 	ldw	r3,-40(fp)
  80d41c:	00bfff84 	movi	r2,-2
  80d420:	1884703a 	and	r2,r3,r2
  80d424:	1001703a 	wrctl	status,r2
  
  return context;
  80d428:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d42c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80d430:	e0fff717 	ldw	r3,-36(fp)
  80d434:	00800044 	movi	r2,1
  80d438:	10c4983a 	sll	r2,r2,r3
  80d43c:	1007883a 	mov	r3,r2
  80d440:	00802074 	movhi	r2,129
  80d444:	1092ff04 	addi	r2,r2,19452
  80d448:	10800017 	ldw	r2,0(r2)
  80d44c:	1886b03a 	or	r3,r3,r2
  80d450:	00802074 	movhi	r2,129
  80d454:	1092ff04 	addi	r2,r2,19452
  80d458:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d45c:	00802074 	movhi	r2,129
  80d460:	1092ff04 	addi	r2,r2,19452
  80d464:	10800017 	ldw	r2,0(r2)
  80d468:	100170fa 	wrctl	ienable,r2
  80d46c:	e0bff817 	ldw	r2,-32(fp)
  80d470:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d474:	e0bff517 	ldw	r2,-44(fp)
  80d478:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d47c:	0005883a 	mov	r2,zero
  80d480:	e0bfff15 	stw	r2,-4(fp)
  80d484:	00002006 	br	80d508 <alt_irq_register+0x194>
  80d488:	e0bffc17 	ldw	r2,-16(fp)
  80d48c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d490:	0005303a 	rdctl	r2,status
  80d494:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d498:	e0fff217 	ldw	r3,-56(fp)
  80d49c:	00bfff84 	movi	r2,-2
  80d4a0:	1884703a 	and	r2,r3,r2
  80d4a4:	1001703a 	wrctl	status,r2
  
  return context;
  80d4a8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d4ac:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80d4b0:	e0fff317 	ldw	r3,-52(fp)
  80d4b4:	00800044 	movi	r2,1
  80d4b8:	10c4983a 	sll	r2,r2,r3
  80d4bc:	0084303a 	nor	r2,zero,r2
  80d4c0:	1007883a 	mov	r3,r2
  80d4c4:	00802074 	movhi	r2,129
  80d4c8:	1092ff04 	addi	r2,r2,19452
  80d4cc:	10800017 	ldw	r2,0(r2)
  80d4d0:	1886703a 	and	r3,r3,r2
  80d4d4:	00802074 	movhi	r2,129
  80d4d8:	1092ff04 	addi	r2,r2,19452
  80d4dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d4e0:	00802074 	movhi	r2,129
  80d4e4:	1092ff04 	addi	r2,r2,19452
  80d4e8:	10800017 	ldw	r2,0(r2)
  80d4ec:	100170fa 	wrctl	ienable,r2
  80d4f0:	e0bff417 	ldw	r2,-48(fp)
  80d4f4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d4f8:	e0bff117 	ldw	r2,-60(fp)
  80d4fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d500:	0005883a 	mov	r2,zero
  80d504:	e0bfff15 	stw	r2,-4(fp)
  80d508:	e0bfff17 	ldw	r2,-4(fp)
  80d50c:	e0bffb15 	stw	r2,-20(fp)
  80d510:	e0bffa17 	ldw	r2,-24(fp)
  80d514:	e0bff015 	stw	r2,-64(fp)
  80d518:	e0bff017 	ldw	r2,-64(fp)
  80d51c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80d520:	e0bffb17 	ldw	r2,-20(fp)
}
  80d524:	e037883a 	mov	sp,fp
  80d528:	df000017 	ldw	fp,0(sp)
  80d52c:	dec00104 	addi	sp,sp,4
  80d530:	f800283a 	ret

0080d534 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80d534:	deffeb04 	addi	sp,sp,-84
  80d538:	dfc01415 	stw	ra,80(sp)
  80d53c:	df001315 	stw	fp,76(sp)
  80d540:	df001304 	addi	fp,sp,76
  80d544:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d548:	e0bffd17 	ldw	r2,-12(fp)
  80d54c:	1004803a 	cmplt	r2,r2,zero
  80d550:	1000081e 	bne	r2,zero,80d574 <isatty+0x40>
  80d554:	e0bffd17 	ldw	r2,-12(fp)
  80d558:	10800324 	muli	r2,r2,12
  80d55c:	1007883a 	mov	r3,r2
  80d560:	00802074 	movhi	r2,129
  80d564:	1086a604 	addi	r2,r2,6808
  80d568:	1887883a 	add	r3,r3,r2
  80d56c:	e0ffff15 	stw	r3,-4(fp)
  80d570:	00000106 	br	80d578 <isatty+0x44>
  80d574:	e03fff15 	stw	zero,-4(fp)
  80d578:	e0bfff17 	ldw	r2,-4(fp)
  80d57c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80d580:	e0bfed17 	ldw	r2,-76(fp)
  80d584:	1005003a 	cmpeq	r2,r2,zero
  80d588:	10000f1e 	bne	r2,zero,80d5c8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80d58c:	e0bfed17 	ldw	r2,-76(fp)
  80d590:	10800017 	ldw	r2,0(r2)
  80d594:	10800817 	ldw	r2,32(r2)
  80d598:	1004c03a 	cmpne	r2,r2,zero
  80d59c:	1000031e 	bne	r2,zero,80d5ac <isatty+0x78>
    {
      return 1;
  80d5a0:	00800044 	movi	r2,1
  80d5a4:	e0bffe15 	stw	r2,-8(fp)
  80d5a8:	00000c06 	br	80d5dc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80d5ac:	e17fee04 	addi	r5,fp,-72
  80d5b0:	e13ffd17 	ldw	r4,-12(fp)
  80d5b4:	080d2200 	call	80d220 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80d5b8:	e0bfef17 	ldw	r2,-68(fp)
  80d5bc:	10880020 	cmpeqi	r2,r2,8192
  80d5c0:	e0bffe15 	stw	r2,-8(fp)
  80d5c4:	00000506 	br	80d5dc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d5c8:	080d5f40 	call	80d5f4 <alt_get_errno>
  80d5cc:	1007883a 	mov	r3,r2
  80d5d0:	00801444 	movi	r2,81
  80d5d4:	18800015 	stw	r2,0(r3)
    return 0;
  80d5d8:	e03ffe15 	stw	zero,-8(fp)
  80d5dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80d5e0:	e037883a 	mov	sp,fp
  80d5e4:	dfc00117 	ldw	ra,4(sp)
  80d5e8:	df000017 	ldw	fp,0(sp)
  80d5ec:	dec00204 	addi	sp,sp,8
  80d5f0:	f800283a 	ret

0080d5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d5f4:	defffd04 	addi	sp,sp,-12
  80d5f8:	dfc00215 	stw	ra,8(sp)
  80d5fc:	df000115 	stw	fp,4(sp)
  80d600:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d604:	00802074 	movhi	r2,129
  80d608:	108bc004 	addi	r2,r2,12032
  80d60c:	10800017 	ldw	r2,0(r2)
  80d610:	1005003a 	cmpeq	r2,r2,zero
  80d614:	1000061e 	bne	r2,zero,80d630 <alt_get_errno+0x3c>
  80d618:	00802074 	movhi	r2,129
  80d61c:	108bc004 	addi	r2,r2,12032
  80d620:	10800017 	ldw	r2,0(r2)
  80d624:	103ee83a 	callr	r2
  80d628:	e0bfff15 	stw	r2,-4(fp)
  80d62c:	00000306 	br	80d63c <alt_get_errno+0x48>
  80d630:	00802074 	movhi	r2,129
  80d634:	1092fb04 	addi	r2,r2,19436
  80d638:	e0bfff15 	stw	r2,-4(fp)
  80d63c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d640:	e037883a 	mov	sp,fp
  80d644:	dfc00117 	ldw	ra,4(sp)
  80d648:	df000017 	ldw	fp,0(sp)
  80d64c:	dec00204 	addi	sp,sp,8
  80d650:	f800283a 	ret

0080d654 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80d654:	defffa04 	addi	sp,sp,-24
  80d658:	dfc00515 	stw	ra,20(sp)
  80d65c:	df000415 	stw	fp,16(sp)
  80d660:	df000404 	addi	fp,sp,16
  80d664:	e13ffd15 	stw	r4,-12(fp)
  80d668:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
  80d66c:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
  80d670:	e0bffd17 	ldw	r2,-12(fp)
  80d674:	10800048 	cmpgei	r2,r2,1
  80d678:	1000301e 	bne	r2,zero,80d73c <kill+0xe8>
  {
    switch (sig)
  80d67c:	e0bffe17 	ldw	r2,-8(fp)
  80d680:	10800828 	cmpgeui	r2,r2,32
  80d684:	10002a1e 	bne	r2,zero,80d730 <kill+0xdc>
  80d688:	e0bffe17 	ldw	r2,-8(fp)
  80d68c:	1085883a 	add	r2,r2,r2
  80d690:	1087883a 	add	r3,r2,r2
  80d694:	00802074 	movhi	r2,129
  80d698:	10b5aa04 	addi	r2,r2,-10584
  80d69c:	1885883a 	add	r2,r3,r2
  80d6a0:	10800017 	ldw	r2,0(r2)
  80d6a4:	1000683a 	jmp	r2
  80d6a8:	0080d750 	cmplti	r2,zero,861
  80d6ac:	0080d730 	cmpltui	r2,zero,860
  80d6b0:	0080d730 	cmpltui	r2,zero,860
  80d6b4:	0080d728 	cmpgeui	r2,zero,860
  80d6b8:	0080d728 	cmpgeui	r2,zero,860
  80d6bc:	0080d728 	cmpgeui	r2,zero,860
  80d6c0:	0080d728 	cmpgeui	r2,zero,860
  80d6c4:	0080d730 	cmpltui	r2,zero,860
  80d6c8:	0080d728 	cmpgeui	r2,zero,860
  80d6cc:	0080d728 	cmpgeui	r2,zero,860
  80d6d0:	0080d728 	cmpgeui	r2,zero,860
  80d6d4:	0080d728 	cmpgeui	r2,zero,860
  80d6d8:	0080d728 	cmpgeui	r2,zero,860
  80d6dc:	0080d728 	cmpgeui	r2,zero,860
  80d6e0:	0080d728 	cmpgeui	r2,zero,860
  80d6e4:	0080d728 	cmpgeui	r2,zero,860
  80d6e8:	0080d750 	cmplti	r2,zero,861
  80d6ec:	0080d730 	cmpltui	r2,zero,860
  80d6f0:	0080d730 	cmpltui	r2,zero,860
  80d6f4:	0080d730 	cmpltui	r2,zero,860
  80d6f8:	0080d750 	cmplti	r2,zero,861
  80d6fc:	0080d730 	cmpltui	r2,zero,860
  80d700:	0080d730 	cmpltui	r2,zero,860
  80d704:	0080d728 	cmpgeui	r2,zero,860
  80d708:	0080d728 	cmpgeui	r2,zero,860
  80d70c:	0080d728 	cmpgeui	r2,zero,860
  80d710:	0080d728 	cmpgeui	r2,zero,860
  80d714:	0080d728 	cmpgeui	r2,zero,860
  80d718:	0080d730 	cmpltui	r2,zero,860
  80d71c:	0080d730 	cmpltui	r2,zero,860
  80d720:	0080d728 	cmpgeui	r2,zero,860
  80d724:	0080d728 	cmpgeui	r2,zero,860
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80d728:	0009883a 	mov	r4,zero
  80d72c:	080d2000 	call	80d200 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80d730:	00800584 	movi	r2,22
  80d734:	e0bffc15 	stw	r2,-16(fp)
  80d738:	00000506 	br	80d750 <kill+0xfc>
    }
  }

  else if (pid > 0)
  80d73c:	e0bffd17 	ldw	r2,-12(fp)
  80d740:	10800050 	cmplti	r2,r2,1
  80d744:	1000021e 	bne	r2,zero,80d750 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80d748:	008000c4 	movi	r2,3
  80d74c:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
  80d750:	e0bffc17 	ldw	r2,-16(fp)
  80d754:	1005003a 	cmpeq	r2,r2,zero
  80d758:	1000071e 	bne	r2,zero,80d778 <kill+0x124>
  {
    ALT_ERRNO = status;
  80d75c:	080d7940 	call	80d794 <alt_get_errno>
  80d760:	1007883a 	mov	r3,r2
  80d764:	e0bffc17 	ldw	r2,-16(fp)
  80d768:	18800015 	stw	r2,0(r3)
    return -1;
  80d76c:	00bfffc4 	movi	r2,-1
  80d770:	e0bfff15 	stw	r2,-4(fp)
  80d774:	00000106 	br	80d77c <kill+0x128>
  }

  return 0;
  80d778:	e03fff15 	stw	zero,-4(fp)
  80d77c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d780:	e037883a 	mov	sp,fp
  80d784:	dfc00117 	ldw	ra,4(sp)
  80d788:	df000017 	ldw	fp,0(sp)
  80d78c:	dec00204 	addi	sp,sp,8
  80d790:	f800283a 	ret

0080d794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d794:	defffd04 	addi	sp,sp,-12
  80d798:	dfc00215 	stw	ra,8(sp)
  80d79c:	df000115 	stw	fp,4(sp)
  80d7a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d7a4:	00802074 	movhi	r2,129
  80d7a8:	108bc004 	addi	r2,r2,12032
  80d7ac:	10800017 	ldw	r2,0(r2)
  80d7b0:	1005003a 	cmpeq	r2,r2,zero
  80d7b4:	1000061e 	bne	r2,zero,80d7d0 <alt_get_errno+0x3c>
  80d7b8:	00802074 	movhi	r2,129
  80d7bc:	108bc004 	addi	r2,r2,12032
  80d7c0:	10800017 	ldw	r2,0(r2)
  80d7c4:	103ee83a 	callr	r2
  80d7c8:	e0bfff15 	stw	r2,-4(fp)
  80d7cc:	00000306 	br	80d7dc <alt_get_errno+0x48>
  80d7d0:	00802074 	movhi	r2,129
  80d7d4:	1092fb04 	addi	r2,r2,19436
  80d7d8:	e0bfff15 	stw	r2,-4(fp)
  80d7dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7e0:	e037883a 	mov	sp,fp
  80d7e4:	dfc00117 	ldw	ra,4(sp)
  80d7e8:	df000017 	ldw	fp,0(sp)
  80d7ec:	dec00204 	addi	sp,sp,8
  80d7f0:	f800283a 	ret

0080d7f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80d7f4:	defffe04 	addi	sp,sp,-8
  80d7f8:	dfc00115 	stw	ra,4(sp)
  80d7fc:	df000015 	stw	fp,0(sp)
  80d800:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80d804:	01002074 	movhi	r4,129
  80d808:	210bc504 	addi	r4,r4,12052
  80d80c:	01402074 	movhi	r5,129
  80d810:	29449704 	addi	r5,r5,4700
  80d814:	01802074 	movhi	r6,129
  80d818:	318bc504 	addi	r6,r6,12052
  80d81c:	080d8740 	call	80d874 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80d820:	01002034 	movhi	r4,128
  80d824:	21000004 	addi	r4,r4,0
  80d828:	01404034 	movhi	r5,256
  80d82c:	29500804 	addi	r5,r5,16416
  80d830:	01804034 	movhi	r6,256
  80d834:	31906d04 	addi	r6,r6,16820
  80d838:	080d8740 	call	80d874 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80d83c:	01002074 	movhi	r4,129
  80d840:	21027404 	addi	r4,r4,2512
  80d844:	01402074 	movhi	r5,129
  80d848:	29427404 	addi	r5,r5,2512
  80d84c:	01802074 	movhi	r6,129
  80d850:	31849704 	addi	r6,r6,4700
  80d854:	080d8740 	call	80d874 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80d858:	080f7b00 	call	80f7b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80d85c:	080f9d00 	call	80f9d0 <alt_icache_flush_all>
}
  80d860:	e037883a 	mov	sp,fp
  80d864:	dfc00117 	ldw	ra,4(sp)
  80d868:	df000017 	ldw	fp,0(sp)
  80d86c:	dec00204 	addi	sp,sp,8
  80d870:	f800283a 	ret

0080d874 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80d874:	defffc04 	addi	sp,sp,-16
  80d878:	df000315 	stw	fp,12(sp)
  80d87c:	df000304 	addi	fp,sp,12
  80d880:	e13ffd15 	stw	r4,-12(fp)
  80d884:	e17ffe15 	stw	r5,-8(fp)
  80d888:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80d88c:	e0fffe17 	ldw	r3,-8(fp)
  80d890:	e0bffd17 	ldw	r2,-12(fp)
  80d894:	18800e26 	beq	r3,r2,80d8d0 <alt_load_section+0x5c>
  {
    while( to != end )
  80d898:	00000a06 	br	80d8c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80d89c:	e0bffd17 	ldw	r2,-12(fp)
  80d8a0:	10c00017 	ldw	r3,0(r2)
  80d8a4:	e0bffe17 	ldw	r2,-8(fp)
  80d8a8:	10c00015 	stw	r3,0(r2)
  80d8ac:	e0bffe17 	ldw	r2,-8(fp)
  80d8b0:	10800104 	addi	r2,r2,4
  80d8b4:	e0bffe15 	stw	r2,-8(fp)
  80d8b8:	e0bffd17 	ldw	r2,-12(fp)
  80d8bc:	10800104 	addi	r2,r2,4
  80d8c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80d8c4:	e0fffe17 	ldw	r3,-8(fp)
  80d8c8:	e0bfff17 	ldw	r2,-4(fp)
  80d8cc:	18bff31e 	bne	r3,r2,80d89c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80d8d0:	e037883a 	mov	sp,fp
  80d8d4:	df000017 	ldw	fp,0(sp)
  80d8d8:	dec00104 	addi	sp,sp,4
  80d8dc:	f800283a 	ret

0080d8e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80d8e0:	defff804 	addi	sp,sp,-32
  80d8e4:	dfc00715 	stw	ra,28(sp)
  80d8e8:	df000615 	stw	fp,24(sp)
  80d8ec:	df000604 	addi	fp,sp,24
  80d8f0:	e13ffc15 	stw	r4,-16(fp)
  80d8f4:	e17ffd15 	stw	r5,-12(fp)
  80d8f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80d8fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d900:	e0bffc17 	ldw	r2,-16(fp)
  80d904:	1004803a 	cmplt	r2,r2,zero
  80d908:	1000081e 	bne	r2,zero,80d92c <lseek+0x4c>
  80d90c:	e0bffc17 	ldw	r2,-16(fp)
  80d910:	10800324 	muli	r2,r2,12
  80d914:	1007883a 	mov	r3,r2
  80d918:	00802074 	movhi	r2,129
  80d91c:	1086a604 	addi	r2,r2,6808
  80d920:	1887883a 	add	r3,r3,r2
  80d924:	e0ffff15 	stw	r3,-4(fp)
  80d928:	00000106 	br	80d930 <lseek+0x50>
  80d92c:	e03fff15 	stw	zero,-4(fp)
  80d930:	e0bfff17 	ldw	r2,-4(fp)
  80d934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80d938:	e0bffb17 	ldw	r2,-20(fp)
  80d93c:	1005003a 	cmpeq	r2,r2,zero
  80d940:	1000111e 	bne	r2,zero,80d988 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80d944:	e0bffb17 	ldw	r2,-20(fp)
  80d948:	10800017 	ldw	r2,0(r2)
  80d94c:	10800717 	ldw	r2,28(r2)
  80d950:	1005003a 	cmpeq	r2,r2,zero
  80d954:	1000091e 	bne	r2,zero,80d97c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80d958:	e0bffb17 	ldw	r2,-20(fp)
  80d95c:	10800017 	ldw	r2,0(r2)
  80d960:	10800717 	ldw	r2,28(r2)
  80d964:	e13ffb17 	ldw	r4,-20(fp)
  80d968:	e17ffd17 	ldw	r5,-12(fp)
  80d96c:	e1bffe17 	ldw	r6,-8(fp)
  80d970:	103ee83a 	callr	r2
  80d974:	e0bffa15 	stw	r2,-24(fp)
  80d978:	00000506 	br	80d990 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80d97c:	00bfde84 	movi	r2,-134
  80d980:	e0bffa15 	stw	r2,-24(fp)
  80d984:	00000206 	br	80d990 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80d988:	00bfebc4 	movi	r2,-81
  80d98c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80d990:	e0bffa17 	ldw	r2,-24(fp)
  80d994:	1004403a 	cmpge	r2,r2,zero
  80d998:	1000071e 	bne	r2,zero,80d9b8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80d99c:	080d9d00 	call	80d9d0 <alt_get_errno>
  80d9a0:	1007883a 	mov	r3,r2
  80d9a4:	e0bffa17 	ldw	r2,-24(fp)
  80d9a8:	0085c83a 	sub	r2,zero,r2
  80d9ac:	18800015 	stw	r2,0(r3)
    rc = -1;
  80d9b0:	00bfffc4 	movi	r2,-1
  80d9b4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80d9b8:	e0bffa17 	ldw	r2,-24(fp)
}
  80d9bc:	e037883a 	mov	sp,fp
  80d9c0:	dfc00117 	ldw	ra,4(sp)
  80d9c4:	df000017 	ldw	fp,0(sp)
  80d9c8:	dec00204 	addi	sp,sp,8
  80d9cc:	f800283a 	ret

0080d9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9d0:	defffd04 	addi	sp,sp,-12
  80d9d4:	dfc00215 	stw	ra,8(sp)
  80d9d8:	df000115 	stw	fp,4(sp)
  80d9dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d9e0:	00802074 	movhi	r2,129
  80d9e4:	108bc004 	addi	r2,r2,12032
  80d9e8:	10800017 	ldw	r2,0(r2)
  80d9ec:	1005003a 	cmpeq	r2,r2,zero
  80d9f0:	1000061e 	bne	r2,zero,80da0c <alt_get_errno+0x3c>
  80d9f4:	00802074 	movhi	r2,129
  80d9f8:	108bc004 	addi	r2,r2,12032
  80d9fc:	10800017 	ldw	r2,0(r2)
  80da00:	103ee83a 	callr	r2
  80da04:	e0bfff15 	stw	r2,-4(fp)
  80da08:	00000306 	br	80da18 <alt_get_errno+0x48>
  80da0c:	00802074 	movhi	r2,129
  80da10:	1092fb04 	addi	r2,r2,19436
  80da14:	e0bfff15 	stw	r2,-4(fp)
  80da18:	e0bfff17 	ldw	r2,-4(fp)
}
  80da1c:	e037883a 	mov	sp,fp
  80da20:	dfc00117 	ldw	ra,4(sp)
  80da24:	df000017 	ldw	fp,0(sp)
  80da28:	dec00204 	addi	sp,sp,8
  80da2c:	f800283a 	ret

0080da30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80da30:	defffd04 	addi	sp,sp,-12
  80da34:	dfc00215 	stw	ra,8(sp)
  80da38:	df000115 	stw	fp,4(sp)
  80da3c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80da40:	0009883a 	mov	r4,zero
  80da44:	080def80 	call	80def8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80da48:	080df2c0 	call	80df2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80da4c:	01002074 	movhi	r4,129
  80da50:	21048c04 	addi	r4,r4,4656
  80da54:	01402074 	movhi	r5,129
  80da58:	29448c04 	addi	r5,r5,4656
  80da5c:	01802074 	movhi	r6,129
  80da60:	31848c04 	addi	r6,r6,4656
  80da64:	080fd900 	call	80fd90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80da68:	080f9080 	call	80f908 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80da6c:	01002074 	movhi	r4,129
  80da70:	213e5b04 	addi	r4,r4,-1684
  80da74:	081058c0 	call	81058c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80da78:	d127b117 	ldw	r4,-24892(gp)
  80da7c:	d167b217 	ldw	r5,-24888(gp)
  80da80:	d1a7b317 	ldw	r6,-24884(gp)
  80da84:	08013500 	call	801350 <main>
  80da88:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80da8c:	01000044 	movi	r4,1
  80da90:	080d0380 	call	80d038 <close>
  exit (result);
  80da94:	e13fff17 	ldw	r4,-4(fp)
  80da98:	08105a00 	call	8105a0 <exit>

0080da9c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80da9c:	defffe04 	addi	sp,sp,-8
  80daa0:	df000115 	stw	fp,4(sp)
  80daa4:	df000104 	addi	fp,sp,4
  80daa8:	e13fff15 	stw	r4,-4(fp)
}
  80daac:	e037883a 	mov	sp,fp
  80dab0:	df000017 	ldw	fp,0(sp)
  80dab4:	dec00104 	addi	sp,sp,4
  80dab8:	f800283a 	ret

0080dabc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80dabc:	defffe04 	addi	sp,sp,-8
  80dac0:	df000115 	stw	fp,4(sp)
  80dac4:	df000104 	addi	fp,sp,4
  80dac8:	e13fff15 	stw	r4,-4(fp)
}
  80dacc:	e037883a 	mov	sp,fp
  80dad0:	df000017 	ldw	fp,0(sp)
  80dad4:	dec00104 	addi	sp,sp,4
  80dad8:	f800283a 	ret

0080dadc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80dadc:	defff704 	addi	sp,sp,-36
  80dae0:	dfc00815 	stw	ra,32(sp)
  80dae4:	df000715 	stw	fp,28(sp)
  80dae8:	df000704 	addi	fp,sp,28
  80daec:	e13ffb15 	stw	r4,-20(fp)
  80daf0:	e17ffc15 	stw	r5,-16(fp)
  80daf4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80daf8:	e0bffb17 	ldw	r2,-20(fp)
  80dafc:	1004803a 	cmplt	r2,r2,zero
  80db00:	1000081e 	bne	r2,zero,80db24 <read+0x48>
  80db04:	e0bffb17 	ldw	r2,-20(fp)
  80db08:	10800324 	muli	r2,r2,12
  80db0c:	1007883a 	mov	r3,r2
  80db10:	00802074 	movhi	r2,129
  80db14:	1086a604 	addi	r2,r2,6808
  80db18:	1887883a 	add	r3,r3,r2
  80db1c:	e0ffff15 	stw	r3,-4(fp)
  80db20:	00000106 	br	80db28 <read+0x4c>
  80db24:	e03fff15 	stw	zero,-4(fp)
  80db28:	e0bfff17 	ldw	r2,-4(fp)
  80db2c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80db30:	e0bffa17 	ldw	r2,-24(fp)
  80db34:	1005003a 	cmpeq	r2,r2,zero
  80db38:	1000241e 	bne	r2,zero,80dbcc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80db3c:	e0bffa17 	ldw	r2,-24(fp)
  80db40:	10800217 	ldw	r2,8(r2)
  80db44:	108000cc 	andi	r2,r2,3
  80db48:	10800060 	cmpeqi	r2,r2,1
  80db4c:	10001a1e 	bne	r2,zero,80dbb8 <read+0xdc>
  80db50:	e0bffa17 	ldw	r2,-24(fp)
  80db54:	10800017 	ldw	r2,0(r2)
  80db58:	10800517 	ldw	r2,20(r2)
  80db5c:	1005003a 	cmpeq	r2,r2,zero
  80db60:	1000151e 	bne	r2,zero,80dbb8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80db64:	e0bffa17 	ldw	r2,-24(fp)
  80db68:	10800017 	ldw	r2,0(r2)
  80db6c:	10800517 	ldw	r2,20(r2)
  80db70:	e17ffc17 	ldw	r5,-16(fp)
  80db74:	e1bffd17 	ldw	r6,-12(fp)
  80db78:	e13ffa17 	ldw	r4,-24(fp)
  80db7c:	103ee83a 	callr	r2
  80db80:	e0bff915 	stw	r2,-28(fp)
  80db84:	e0bff917 	ldw	r2,-28(fp)
  80db88:	1004403a 	cmpge	r2,r2,zero
  80db8c:	1000071e 	bne	r2,zero,80dbac <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80db90:	080dbfc0 	call	80dbfc <alt_get_errno>
  80db94:	e0fff917 	ldw	r3,-28(fp)
  80db98:	00c7c83a 	sub	r3,zero,r3
  80db9c:	10c00015 	stw	r3,0(r2)
          return -1;
  80dba0:	00bfffc4 	movi	r2,-1
  80dba4:	e0bffe15 	stw	r2,-8(fp)
  80dba8:	00000e06 	br	80dbe4 <read+0x108>
        }
        return rval;
  80dbac:	e0bff917 	ldw	r2,-28(fp)
  80dbb0:	e0bffe15 	stw	r2,-8(fp)
  80dbb4:	00000b06 	br	80dbe4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80dbb8:	080dbfc0 	call	80dbfc <alt_get_errno>
  80dbbc:	1007883a 	mov	r3,r2
  80dbc0:	00800344 	movi	r2,13
  80dbc4:	18800015 	stw	r2,0(r3)
  80dbc8:	00000406 	br	80dbdc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80dbcc:	080dbfc0 	call	80dbfc <alt_get_errno>
  80dbd0:	1007883a 	mov	r3,r2
  80dbd4:	00801444 	movi	r2,81
  80dbd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80dbdc:	00bfffc4 	movi	r2,-1
  80dbe0:	e0bffe15 	stw	r2,-8(fp)
  80dbe4:	e0bffe17 	ldw	r2,-8(fp)
}
  80dbe8:	e037883a 	mov	sp,fp
  80dbec:	dfc00117 	ldw	ra,4(sp)
  80dbf0:	df000017 	ldw	fp,0(sp)
  80dbf4:	dec00204 	addi	sp,sp,8
  80dbf8:	f800283a 	ret

0080dbfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dbfc:	defffd04 	addi	sp,sp,-12
  80dc00:	dfc00215 	stw	ra,8(sp)
  80dc04:	df000115 	stw	fp,4(sp)
  80dc08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dc0c:	00802074 	movhi	r2,129
  80dc10:	108bc004 	addi	r2,r2,12032
  80dc14:	10800017 	ldw	r2,0(r2)
  80dc18:	1005003a 	cmpeq	r2,r2,zero
  80dc1c:	1000061e 	bne	r2,zero,80dc38 <alt_get_errno+0x3c>
  80dc20:	00802074 	movhi	r2,129
  80dc24:	108bc004 	addi	r2,r2,12032
  80dc28:	10800017 	ldw	r2,0(r2)
  80dc2c:	103ee83a 	callr	r2
  80dc30:	e0bfff15 	stw	r2,-4(fp)
  80dc34:	00000306 	br	80dc44 <alt_get_errno+0x48>
  80dc38:	00802074 	movhi	r2,129
  80dc3c:	1092fb04 	addi	r2,r2,19436
  80dc40:	e0bfff15 	stw	r2,-4(fp)
  80dc44:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc48:	e037883a 	mov	sp,fp
  80dc4c:	dfc00117 	ldw	ra,4(sp)
  80dc50:	df000017 	ldw	fp,0(sp)
  80dc54:	dec00204 	addi	sp,sp,8
  80dc58:	f800283a 	ret

0080dc5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80dc5c:	defffe04 	addi	sp,sp,-8
  80dc60:	df000115 	stw	fp,4(sp)
  80dc64:	df000104 	addi	fp,sp,4
  80dc68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80dc6c:	e0bfff17 	ldw	r2,-4(fp)
  80dc70:	108000d0 	cmplti	r2,r2,3
  80dc74:	10000d1e 	bne	r2,zero,80dcac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80dc78:	e0bfff17 	ldw	r2,-4(fp)
  80dc7c:	00c02074 	movhi	r3,129
  80dc80:	18c6a604 	addi	r3,r3,6808
  80dc84:	10800324 	muli	r2,r2,12
  80dc88:	10c5883a 	add	r2,r2,r3
  80dc8c:	10800204 	addi	r2,r2,8
  80dc90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80dc94:	e0bfff17 	ldw	r2,-4(fp)
  80dc98:	00c02074 	movhi	r3,129
  80dc9c:	18c6a604 	addi	r3,r3,6808
  80dca0:	10800324 	muli	r2,r2,12
  80dca4:	10c5883a 	add	r2,r2,r3
  80dca8:	10000015 	stw	zero,0(r2)
  }
}
  80dcac:	e037883a 	mov	sp,fp
  80dcb0:	df000017 	ldw	fp,0(sp)
  80dcb4:	dec00104 	addi	sp,sp,4
  80dcb8:	f800283a 	ret

0080dcbc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80dcbc:	defff804 	addi	sp,sp,-32
  80dcc0:	df000715 	stw	fp,28(sp)
  80dcc4:	df000704 	addi	fp,sp,28
  80dcc8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dccc:	0005303a 	rdctl	r2,status
  80dcd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dcd4:	e0fffb17 	ldw	r3,-20(fp)
  80dcd8:	00bfff84 	movi	r2,-2
  80dcdc:	1884703a 	and	r2,r3,r2
  80dce0:	1001703a 	wrctl	status,r2
  
  return context;
  80dce4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80dce8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80dcec:	d0a07317 	ldw	r2,-32308(gp)
  80dcf0:	10c000c4 	addi	r3,r2,3
  80dcf4:	00bfff04 	movi	r2,-4
  80dcf8:	1884703a 	and	r2,r3,r2
  80dcfc:	d0a07315 	stw	r2,-32308(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80dd00:	d0e07317 	ldw	r3,-32308(gp)
  80dd04:	e0bffe17 	ldw	r2,-8(fp)
  80dd08:	1887883a 	add	r3,r3,r2
  80dd0c:	00804034 	movhi	r2,256
  80dd10:	10800004 	addi	r2,r2,0
  80dd14:	10c0072e 	bgeu	r2,r3,80dd34 <sbrk+0x78>
  80dd18:	e0bffd17 	ldw	r2,-12(fp)
  80dd1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd20:	e0bffa17 	ldw	r2,-24(fp)
  80dd24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80dd28:	00bfffc4 	movi	r2,-1
  80dd2c:	e0bfff15 	stw	r2,-4(fp)
  80dd30:	00000c06 	br	80dd64 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80dd34:	d0a07317 	ldw	r2,-32308(gp)
  80dd38:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80dd3c:	d0e07317 	ldw	r3,-32308(gp)
  80dd40:	e0bffe17 	ldw	r2,-8(fp)
  80dd44:	1885883a 	add	r2,r3,r2
  80dd48:	d0a07315 	stw	r2,-32308(gp)
  80dd4c:	e0bffd17 	ldw	r2,-12(fp)
  80dd50:	e0bff915 	stw	r2,-28(fp)
  80dd54:	e0bff917 	ldw	r2,-28(fp)
  80dd58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80dd5c:	e0bffc17 	ldw	r2,-16(fp)
  80dd60:	e0bfff15 	stw	r2,-4(fp)
  80dd64:	e0bfff17 	ldw	r2,-4(fp)
} 
  80dd68:	e037883a 	mov	sp,fp
  80dd6c:	df000017 	ldw	fp,0(sp)
  80dd70:	dec00104 	addi	sp,sp,4
  80dd74:	f800283a 	ret

0080dd78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80dd78:	defff704 	addi	sp,sp,-36
  80dd7c:	dfc00815 	stw	ra,32(sp)
  80dd80:	df000715 	stw	fp,28(sp)
  80dd84:	df000704 	addi	fp,sp,28
  80dd88:	e13ffb15 	stw	r4,-20(fp)
  80dd8c:	e17ffc15 	stw	r5,-16(fp)
  80dd90:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dd94:	e0bffb17 	ldw	r2,-20(fp)
  80dd98:	1004803a 	cmplt	r2,r2,zero
  80dd9c:	1000081e 	bne	r2,zero,80ddc0 <write+0x48>
  80dda0:	e0bffb17 	ldw	r2,-20(fp)
  80dda4:	10800324 	muli	r2,r2,12
  80dda8:	1007883a 	mov	r3,r2
  80ddac:	00802074 	movhi	r2,129
  80ddb0:	1086a604 	addi	r2,r2,6808
  80ddb4:	1887883a 	add	r3,r3,r2
  80ddb8:	e0ffff15 	stw	r3,-4(fp)
  80ddbc:	00000106 	br	80ddc4 <write+0x4c>
  80ddc0:	e03fff15 	stw	zero,-4(fp)
  80ddc4:	e0bfff17 	ldw	r2,-4(fp)
  80ddc8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80ddcc:	e0bffa17 	ldw	r2,-24(fp)
  80ddd0:	1005003a 	cmpeq	r2,r2,zero
  80ddd4:	1000241e 	bne	r2,zero,80de68 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ddd8:	e0bffa17 	ldw	r2,-24(fp)
  80dddc:	10800217 	ldw	r2,8(r2)
  80dde0:	108000cc 	andi	r2,r2,3
  80dde4:	1005003a 	cmpeq	r2,r2,zero
  80dde8:	10001a1e 	bne	r2,zero,80de54 <write+0xdc>
  80ddec:	e0bffa17 	ldw	r2,-24(fp)
  80ddf0:	10800017 	ldw	r2,0(r2)
  80ddf4:	10800617 	ldw	r2,24(r2)
  80ddf8:	1005003a 	cmpeq	r2,r2,zero
  80ddfc:	1000151e 	bne	r2,zero,80de54 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80de00:	e0bffa17 	ldw	r2,-24(fp)
  80de04:	10800017 	ldw	r2,0(r2)
  80de08:	10800617 	ldw	r2,24(r2)
  80de0c:	e17ffc17 	ldw	r5,-16(fp)
  80de10:	e1bffd17 	ldw	r6,-12(fp)
  80de14:	e13ffa17 	ldw	r4,-24(fp)
  80de18:	103ee83a 	callr	r2
  80de1c:	e0bff915 	stw	r2,-28(fp)
  80de20:	e0bff917 	ldw	r2,-28(fp)
  80de24:	1004403a 	cmpge	r2,r2,zero
  80de28:	1000071e 	bne	r2,zero,80de48 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80de2c:	080de980 	call	80de98 <alt_get_errno>
  80de30:	e0fff917 	ldw	r3,-28(fp)
  80de34:	00c7c83a 	sub	r3,zero,r3
  80de38:	10c00015 	stw	r3,0(r2)
        return -1;
  80de3c:	00bfffc4 	movi	r2,-1
  80de40:	e0bffe15 	stw	r2,-8(fp)
  80de44:	00000e06 	br	80de80 <write+0x108>
      }
      return rval;
  80de48:	e0bff917 	ldw	r2,-28(fp)
  80de4c:	e0bffe15 	stw	r2,-8(fp)
  80de50:	00000b06 	br	80de80 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80de54:	080de980 	call	80de98 <alt_get_errno>
  80de58:	1007883a 	mov	r3,r2
  80de5c:	00800344 	movi	r2,13
  80de60:	18800015 	stw	r2,0(r3)
  80de64:	00000406 	br	80de78 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80de68:	080de980 	call	80de98 <alt_get_errno>
  80de6c:	1007883a 	mov	r3,r2
  80de70:	00801444 	movi	r2,81
  80de74:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80de78:	00bfffc4 	movi	r2,-1
  80de7c:	e0bffe15 	stw	r2,-8(fp)
  80de80:	e0bffe17 	ldw	r2,-8(fp)
}
  80de84:	e037883a 	mov	sp,fp
  80de88:	dfc00117 	ldw	ra,4(sp)
  80de8c:	df000017 	ldw	fp,0(sp)
  80de90:	dec00204 	addi	sp,sp,8
  80de94:	f800283a 	ret

0080de98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80de98:	defffd04 	addi	sp,sp,-12
  80de9c:	dfc00215 	stw	ra,8(sp)
  80dea0:	df000115 	stw	fp,4(sp)
  80dea4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dea8:	00802074 	movhi	r2,129
  80deac:	108bc004 	addi	r2,r2,12032
  80deb0:	10800017 	ldw	r2,0(r2)
  80deb4:	1005003a 	cmpeq	r2,r2,zero
  80deb8:	1000061e 	bne	r2,zero,80ded4 <alt_get_errno+0x3c>
  80debc:	00802074 	movhi	r2,129
  80dec0:	108bc004 	addi	r2,r2,12032
  80dec4:	10800017 	ldw	r2,0(r2)
  80dec8:	103ee83a 	callr	r2
  80decc:	e0bfff15 	stw	r2,-4(fp)
  80ded0:	00000306 	br	80dee0 <alt_get_errno+0x48>
  80ded4:	00802074 	movhi	r2,129
  80ded8:	1092fb04 	addi	r2,r2,19436
  80dedc:	e0bfff15 	stw	r2,-4(fp)
  80dee0:	e0bfff17 	ldw	r2,-4(fp)
}
  80dee4:	e037883a 	mov	sp,fp
  80dee8:	dfc00117 	ldw	ra,4(sp)
  80deec:	df000017 	ldw	fp,0(sp)
  80def0:	dec00204 	addi	sp,sp,8
  80def4:	f800283a 	ret

0080def8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80def8:	defffd04 	addi	sp,sp,-12
  80defc:	dfc00215 	stw	ra,8(sp)
  80df00:	df000115 	stw	fp,4(sp)
  80df04:	df000104 	addi	fp,sp,4
  80df08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  80df0c:	08102700 	call	810270 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80df10:	00800044 	movi	r2,1
  80df14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80df18:	e037883a 	mov	sp,fp
  80df1c:	dfc00117 	ldw	ra,4(sp)
  80df20:	df000017 	ldw	fp,0(sp)
  80df24:	dec00204 	addi	sp,sp,8
  80df28:	f800283a 	ret

0080df2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80df2c:	defffe04 	addi	sp,sp,-8
  80df30:	dfc00115 	stw	ra,4(sp)
  80df34:	df000015 	stw	fp,0(sp)
  80df38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80df3c:	01002074 	movhi	r4,129
  80df40:	21071004 	addi	r4,r4,7232
  80df44:	000b883a 	mov	r5,zero
  80df48:	000d883a 	mov	r6,zero
  80df4c:	080e1100 	call	80e110 <altera_avalon_jtag_uart_init>
  80df50:	01002074 	movhi	r4,129
  80df54:	21070604 	addi	r4,r4,7192
  80df58:	080df900 	call	80df90 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80df5c:	01002074 	movhi	r4,129
  80df60:	210b2804 	addi	r4,r4,11424
  80df64:	000b883a 	mov	r5,zero
  80df68:	01800084 	movi	r6,2
  80df6c:	080eda40 	call	80eda4 <altera_avalon_uart_init>
  80df70:	01002074 	movhi	r4,129
  80df74:	210b1e04 	addi	r4,r4,11384
  80df78:	080df900 	call	80df90 <alt_dev_reg>
}
  80df7c:	e037883a 	mov	sp,fp
  80df80:	dfc00117 	ldw	ra,4(sp)
  80df84:	df000017 	ldw	fp,0(sp)
  80df88:	dec00204 	addi	sp,sp,8
  80df8c:	f800283a 	ret

0080df90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80df90:	defffd04 	addi	sp,sp,-12
  80df94:	dfc00215 	stw	ra,8(sp)
  80df98:	df000115 	stw	fp,4(sp)
  80df9c:	df000104 	addi	fp,sp,4
  80dfa0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80dfa4:	e13fff17 	ldw	r4,-4(fp)
  80dfa8:	01402074 	movhi	r5,129
  80dfac:	294bbd04 	addi	r5,r5,12020
  80dfb0:	080f7f40 	call	80f7f4 <alt_dev_llist_insert>
}
  80dfb4:	e037883a 	mov	sp,fp
  80dfb8:	dfc00117 	ldw	ra,4(sp)
  80dfbc:	df000017 	ldw	fp,0(sp)
  80dfc0:	dec00204 	addi	sp,sp,8
  80dfc4:	f800283a 	ret

0080dfc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80dfc8:	defffa04 	addi	sp,sp,-24
  80dfcc:	dfc00515 	stw	ra,20(sp)
  80dfd0:	df000415 	stw	fp,16(sp)
  80dfd4:	df000404 	addi	fp,sp,16
  80dfd8:	e13ffd15 	stw	r4,-12(fp)
  80dfdc:	e17ffe15 	stw	r5,-8(fp)
  80dfe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80dfe4:	e0bffd17 	ldw	r2,-12(fp)
  80dfe8:	10800017 	ldw	r2,0(r2)
  80dfec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80dff0:	e0bffc17 	ldw	r2,-16(fp)
  80dff4:	11000a04 	addi	r4,r2,40
  80dff8:	e0bffd17 	ldw	r2,-12(fp)
  80dffc:	11c00217 	ldw	r7,8(r2)
  80e000:	e17ffe17 	ldw	r5,-8(fp)
  80e004:	e1bfff17 	ldw	r6,-4(fp)
  80e008:	080e6100 	call	80e610 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e00c:	e037883a 	mov	sp,fp
  80e010:	dfc00117 	ldw	ra,4(sp)
  80e014:	df000017 	ldw	fp,0(sp)
  80e018:	dec00204 	addi	sp,sp,8
  80e01c:	f800283a 	ret

0080e020 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e020:	defffa04 	addi	sp,sp,-24
  80e024:	dfc00515 	stw	ra,20(sp)
  80e028:	df000415 	stw	fp,16(sp)
  80e02c:	df000404 	addi	fp,sp,16
  80e030:	e13ffd15 	stw	r4,-12(fp)
  80e034:	e17ffe15 	stw	r5,-8(fp)
  80e038:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e03c:	e0bffd17 	ldw	r2,-12(fp)
  80e040:	10800017 	ldw	r2,0(r2)
  80e044:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e048:	e0bffc17 	ldw	r2,-16(fp)
  80e04c:	11000a04 	addi	r4,r2,40
  80e050:	e0bffd17 	ldw	r2,-12(fp)
  80e054:	11c00217 	ldw	r7,8(r2)
  80e058:	e17ffe17 	ldw	r5,-8(fp)
  80e05c:	e1bfff17 	ldw	r6,-4(fp)
  80e060:	080e8340 	call	80e834 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e064:	e037883a 	mov	sp,fp
  80e068:	dfc00117 	ldw	ra,4(sp)
  80e06c:	df000017 	ldw	fp,0(sp)
  80e070:	dec00204 	addi	sp,sp,8
  80e074:	f800283a 	ret

0080e078 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e078:	defffc04 	addi	sp,sp,-16
  80e07c:	dfc00315 	stw	ra,12(sp)
  80e080:	df000215 	stw	fp,8(sp)
  80e084:	df000204 	addi	fp,sp,8
  80e088:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e08c:	e0bfff17 	ldw	r2,-4(fp)
  80e090:	10800017 	ldw	r2,0(r2)
  80e094:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e098:	e0bffe17 	ldw	r2,-8(fp)
  80e09c:	11000a04 	addi	r4,r2,40
  80e0a0:	e0bfff17 	ldw	r2,-4(fp)
  80e0a4:	11400217 	ldw	r5,8(r2)
  80e0a8:	080e4a80 	call	80e4a8 <altera_avalon_jtag_uart_close>
}
  80e0ac:	e037883a 	mov	sp,fp
  80e0b0:	dfc00117 	ldw	ra,4(sp)
  80e0b4:	df000017 	ldw	fp,0(sp)
  80e0b8:	dec00204 	addi	sp,sp,8
  80e0bc:	f800283a 	ret

0080e0c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e0c0:	defffa04 	addi	sp,sp,-24
  80e0c4:	dfc00515 	stw	ra,20(sp)
  80e0c8:	df000415 	stw	fp,16(sp)
  80e0cc:	df000404 	addi	fp,sp,16
  80e0d0:	e13ffd15 	stw	r4,-12(fp)
  80e0d4:	e17ffe15 	stw	r5,-8(fp)
  80e0d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e0dc:	e0bffd17 	ldw	r2,-12(fp)
  80e0e0:	10800017 	ldw	r2,0(r2)
  80e0e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e0e8:	e0bffc17 	ldw	r2,-16(fp)
  80e0ec:	11000a04 	addi	r4,r2,40
  80e0f0:	e17ffe17 	ldw	r5,-8(fp)
  80e0f4:	e1bfff17 	ldw	r6,-4(fp)
  80e0f8:	080e51c0 	call	80e51c <altera_avalon_jtag_uart_ioctl>
}
  80e0fc:	e037883a 	mov	sp,fp
  80e100:	dfc00117 	ldw	ra,4(sp)
  80e104:	df000017 	ldw	fp,0(sp)
  80e108:	dec00204 	addi	sp,sp,8
  80e10c:	f800283a 	ret

0080e110 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e110:	defffa04 	addi	sp,sp,-24
  80e114:	dfc00515 	stw	ra,20(sp)
  80e118:	df000415 	stw	fp,16(sp)
  80e11c:	df000404 	addi	fp,sp,16
  80e120:	e13ffd15 	stw	r4,-12(fp)
  80e124:	e17ffe15 	stw	r5,-8(fp)
  80e128:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e12c:	e0fffd17 	ldw	r3,-12(fp)
  80e130:	00800044 	movi	r2,1
  80e134:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e138:	e0bffd17 	ldw	r2,-12(fp)
  80e13c:	10800017 	ldw	r2,0(r2)
  80e140:	11000104 	addi	r4,r2,4
  80e144:	e0bffd17 	ldw	r2,-12(fp)
  80e148:	10800817 	ldw	r2,32(r2)
  80e14c:	1007883a 	mov	r3,r2
  80e150:	2005883a 	mov	r2,r4
  80e154:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80e158:	e13ffe17 	ldw	r4,-8(fp)
  80e15c:	e17fff17 	ldw	r5,-4(fp)
  80e160:	d8000015 	stw	zero,0(sp)
  80e164:	01802074 	movhi	r6,129
  80e168:	31b87404 	addi	r6,r6,-7728
  80e16c:	e1fffd17 	ldw	r7,-12(fp)
  80e170:	080fa000 	call	80fa00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80e174:	e0bffd17 	ldw	r2,-12(fp)
  80e178:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80e17c:	e0bffd17 	ldw	r2,-12(fp)
  80e180:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e184:	00802074 	movhi	r2,129
  80e188:	10930304 	addi	r2,r2,19468
  80e18c:	10800017 	ldw	r2,0(r2)
  80e190:	100b883a 	mov	r5,r2
  80e194:	01802074 	movhi	r6,129
  80e198:	31b8fe04 	addi	r6,r6,-7176
  80e19c:	e1fffd17 	ldw	r7,-12(fp)
  80e1a0:	080f65c0 	call	80f65c <alt_alarm_start>
  80e1a4:	1004403a 	cmpge	r2,r2,zero
  80e1a8:	1000041e 	bne	r2,zero,80e1bc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80e1ac:	e0fffd17 	ldw	r3,-12(fp)
  80e1b0:	00a00034 	movhi	r2,32768
  80e1b4:	10bfffc4 	addi	r2,r2,-1
  80e1b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80e1bc:	e037883a 	mov	sp,fp
  80e1c0:	dfc00117 	ldw	ra,4(sp)
  80e1c4:	df000017 	ldw	fp,0(sp)
  80e1c8:	dec00204 	addi	sp,sp,8
  80e1cc:	f800283a 	ret

0080e1d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80e1d0:	defff804 	addi	sp,sp,-32
  80e1d4:	df000715 	stw	fp,28(sp)
  80e1d8:	df000704 	addi	fp,sp,28
  80e1dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80e1e0:	e0bfff17 	ldw	r2,-4(fp)
  80e1e4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80e1e8:	e0bffe17 	ldw	r2,-8(fp)
  80e1ec:	10800017 	ldw	r2,0(r2)
  80e1f0:	e0bffd15 	stw	r2,-12(fp)
  80e1f4:	00000006 	br	80e1f8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e1f8:	e0bffd17 	ldw	r2,-12(fp)
  80e1fc:	10800104 	addi	r2,r2,4
  80e200:	10800037 	ldwio	r2,0(r2)
  80e204:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80e208:	e0bffc17 	ldw	r2,-16(fp)
  80e20c:	1080c00c 	andi	r2,r2,768
  80e210:	1005003a 	cmpeq	r2,r2,zero
  80e214:	1000741e 	bne	r2,zero,80e3e8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80e218:	e0bffc17 	ldw	r2,-16(fp)
  80e21c:	1080400c 	andi	r2,r2,256
  80e220:	1005003a 	cmpeq	r2,r2,zero
  80e224:	1000351e 	bne	r2,zero,80e2fc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80e228:	00800074 	movhi	r2,1
  80e22c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e230:	e0bffe17 	ldw	r2,-8(fp)
  80e234:	10800a17 	ldw	r2,40(r2)
  80e238:	10800044 	addi	r2,r2,1
  80e23c:	1081ffcc 	andi	r2,r2,2047
  80e240:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80e244:	e0bffe17 	ldw	r2,-8(fp)
  80e248:	10c00b17 	ldw	r3,44(r2)
  80e24c:	e0bffa17 	ldw	r2,-24(fp)
  80e250:	18801626 	beq	r3,r2,80e2ac <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80e254:	e0bffd17 	ldw	r2,-12(fp)
  80e258:	10800037 	ldwio	r2,0(r2)
  80e25c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80e260:	e0bffb17 	ldw	r2,-20(fp)
  80e264:	10a0000c 	andi	r2,r2,32768
  80e268:	1005003a 	cmpeq	r2,r2,zero
  80e26c:	10000f1e 	bne	r2,zero,80e2ac <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80e270:	e0bffe17 	ldw	r2,-8(fp)
  80e274:	10c00a17 	ldw	r3,40(r2)
  80e278:	e0bffb17 	ldw	r2,-20(fp)
  80e27c:	1009883a 	mov	r4,r2
  80e280:	e0bffe17 	ldw	r2,-8(fp)
  80e284:	1885883a 	add	r2,r3,r2
  80e288:	10800e04 	addi	r2,r2,56
  80e28c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e290:	e0bffe17 	ldw	r2,-8(fp)
  80e294:	10800a17 	ldw	r2,40(r2)
  80e298:	10800044 	addi	r2,r2,1
  80e29c:	10c1ffcc 	andi	r3,r2,2047
  80e2a0:	e0bffe17 	ldw	r2,-8(fp)
  80e2a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80e2a8:	003fe106 	br	80e230 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80e2ac:	e0bffb17 	ldw	r2,-20(fp)
  80e2b0:	10bfffec 	andhi	r2,r2,65535
  80e2b4:	1005003a 	cmpeq	r2,r2,zero
  80e2b8:	1000101e 	bne	r2,zero,80e2fc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e2bc:	e0bffe17 	ldw	r2,-8(fp)
  80e2c0:	10c00817 	ldw	r3,32(r2)
  80e2c4:	00bfff84 	movi	r2,-2
  80e2c8:	1886703a 	and	r3,r3,r2
  80e2cc:	e0bffe17 	ldw	r2,-8(fp)
  80e2d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80e2d4:	e0bffd17 	ldw	r2,-12(fp)
  80e2d8:	11000104 	addi	r4,r2,4
  80e2dc:	e0bffe17 	ldw	r2,-8(fp)
  80e2e0:	10800817 	ldw	r2,32(r2)
  80e2e4:	1007883a 	mov	r3,r2
  80e2e8:	2005883a 	mov	r2,r4
  80e2ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e2f0:	e0bffd17 	ldw	r2,-12(fp)
  80e2f4:	10800104 	addi	r2,r2,4
  80e2f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80e2fc:	e0bffc17 	ldw	r2,-16(fp)
  80e300:	1080800c 	andi	r2,r2,512
  80e304:	1005003a 	cmpeq	r2,r2,zero
  80e308:	103fbb1e 	bne	r2,zero,80e1f8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80e30c:	e0bffc17 	ldw	r2,-16(fp)
  80e310:	10bfffec 	andhi	r2,r2,65535
  80e314:	1004d43a 	srli	r2,r2,16
  80e318:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e31c:	00001506 	br	80e374 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80e320:	e13ffd17 	ldw	r4,-12(fp)
  80e324:	e0bffe17 	ldw	r2,-8(fp)
  80e328:	10c00d17 	ldw	r3,52(r2)
  80e32c:	e0bffe17 	ldw	r2,-8(fp)
  80e330:	1885883a 	add	r2,r3,r2
  80e334:	10820e04 	addi	r2,r2,2104
  80e338:	10800003 	ldbu	r2,0(r2)
  80e33c:	10c03fcc 	andi	r3,r2,255
  80e340:	18c0201c 	xori	r3,r3,128
  80e344:	18ffe004 	addi	r3,r3,-128
  80e348:	2005883a 	mov	r2,r4
  80e34c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e350:	e0bffe17 	ldw	r2,-8(fp)
  80e354:	10800d17 	ldw	r2,52(r2)
  80e358:	10800044 	addi	r2,r2,1
  80e35c:	10c1ffcc 	andi	r3,r2,2047
  80e360:	e0bffe17 	ldw	r2,-8(fp)
  80e364:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80e368:	e0bff917 	ldw	r2,-28(fp)
  80e36c:	10bfffc4 	addi	r2,r2,-1
  80e370:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e374:	e0bff917 	ldw	r2,-28(fp)
  80e378:	1005003a 	cmpeq	r2,r2,zero
  80e37c:	1000051e 	bne	r2,zero,80e394 <altera_avalon_jtag_uart_irq+0x1c4>
  80e380:	e0bffe17 	ldw	r2,-8(fp)
  80e384:	10c00d17 	ldw	r3,52(r2)
  80e388:	e0bffe17 	ldw	r2,-8(fp)
  80e38c:	10800c17 	ldw	r2,48(r2)
  80e390:	18bfe31e 	bne	r3,r2,80e320 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80e394:	e0bff917 	ldw	r2,-28(fp)
  80e398:	1005003a 	cmpeq	r2,r2,zero
  80e39c:	103f961e 	bne	r2,zero,80e1f8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e3a0:	e0bffe17 	ldw	r2,-8(fp)
  80e3a4:	10c00817 	ldw	r3,32(r2)
  80e3a8:	00bfff44 	movi	r2,-3
  80e3ac:	1886703a 	and	r3,r3,r2
  80e3b0:	e0bffe17 	ldw	r2,-8(fp)
  80e3b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e3b8:	e0bffe17 	ldw	r2,-8(fp)
  80e3bc:	10800017 	ldw	r2,0(r2)
  80e3c0:	11000104 	addi	r4,r2,4
  80e3c4:	e0bffe17 	ldw	r2,-8(fp)
  80e3c8:	10800817 	ldw	r2,32(r2)
  80e3cc:	1007883a 	mov	r3,r2
  80e3d0:	2005883a 	mov	r2,r4
  80e3d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e3d8:	e0bffd17 	ldw	r2,-12(fp)
  80e3dc:	10800104 	addi	r2,r2,4
  80e3e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80e3e4:	003f8406 	br	80e1f8 <altera_avalon_jtag_uart_irq+0x28>
}
  80e3e8:	e037883a 	mov	sp,fp
  80e3ec:	df000017 	ldw	fp,0(sp)
  80e3f0:	dec00104 	addi	sp,sp,4
  80e3f4:	f800283a 	ret

0080e3f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80e3f8:	defffc04 	addi	sp,sp,-16
  80e3fc:	df000315 	stw	fp,12(sp)
  80e400:	df000304 	addi	fp,sp,12
  80e404:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80e408:	e0bfff17 	ldw	r2,-4(fp)
  80e40c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80e410:	e0bffe17 	ldw	r2,-8(fp)
  80e414:	10800017 	ldw	r2,0(r2)
  80e418:	10800104 	addi	r2,r2,4
  80e41c:	10800037 	ldwio	r2,0(r2)
  80e420:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80e424:	e0bffd17 	ldw	r2,-12(fp)
  80e428:	1081000c 	andi	r2,r2,1024
  80e42c:	1005003a 	cmpeq	r2,r2,zero
  80e430:	10000c1e 	bne	r2,zero,80e464 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80e434:	e0bffe17 	ldw	r2,-8(fp)
  80e438:	10800017 	ldw	r2,0(r2)
  80e43c:	11000104 	addi	r4,r2,4
  80e440:	e0bffe17 	ldw	r2,-8(fp)
  80e444:	10800817 	ldw	r2,32(r2)
  80e448:	10810014 	ori	r2,r2,1024
  80e44c:	1007883a 	mov	r3,r2
  80e450:	2005883a 	mov	r2,r4
  80e454:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80e458:	e0bffe17 	ldw	r2,-8(fp)
  80e45c:	10000915 	stw	zero,36(r2)
  80e460:	00000a06 	br	80e48c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80e464:	e0bffe17 	ldw	r2,-8(fp)
  80e468:	10c00917 	ldw	r3,36(r2)
  80e46c:	00a00034 	movhi	r2,32768
  80e470:	10bfff04 	addi	r2,r2,-4
  80e474:	10c00536 	bltu	r2,r3,80e48c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80e478:	e0bffe17 	ldw	r2,-8(fp)
  80e47c:	10800917 	ldw	r2,36(r2)
  80e480:	10c00044 	addi	r3,r2,1
  80e484:	e0bffe17 	ldw	r2,-8(fp)
  80e488:	10c00915 	stw	r3,36(r2)
  80e48c:	00802074 	movhi	r2,129
  80e490:	10930304 	addi	r2,r2,19468
  80e494:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80e498:	e037883a 	mov	sp,fp
  80e49c:	df000017 	ldw	fp,0(sp)
  80e4a0:	dec00104 	addi	sp,sp,4
  80e4a4:	f800283a 	ret

0080e4a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80e4a8:	defffc04 	addi	sp,sp,-16
  80e4ac:	df000315 	stw	fp,12(sp)
  80e4b0:	df000304 	addi	fp,sp,12
  80e4b4:	e13ffd15 	stw	r4,-12(fp)
  80e4b8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e4bc:	00000706 	br	80e4dc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80e4c0:	e0bffe17 	ldw	r2,-8(fp)
  80e4c4:	1090000c 	andi	r2,r2,16384
  80e4c8:	1005003a 	cmpeq	r2,r2,zero
  80e4cc:	1000031e 	bne	r2,zero,80e4dc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80e4d0:	00bffd44 	movi	r2,-11
  80e4d4:	e0bfff15 	stw	r2,-4(fp)
  80e4d8:	00000b06 	br	80e508 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e4dc:	e0bffd17 	ldw	r2,-12(fp)
  80e4e0:	10c00d17 	ldw	r3,52(r2)
  80e4e4:	e0bffd17 	ldw	r2,-12(fp)
  80e4e8:	10800c17 	ldw	r2,48(r2)
  80e4ec:	18800526 	beq	r3,r2,80e504 <altera_avalon_jtag_uart_close+0x5c>
  80e4f0:	e0bffd17 	ldw	r2,-12(fp)
  80e4f4:	10c00917 	ldw	r3,36(r2)
  80e4f8:	e0bffd17 	ldw	r2,-12(fp)
  80e4fc:	10800117 	ldw	r2,4(r2)
  80e500:	18bfef36 	bltu	r3,r2,80e4c0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e504:	e03fff15 	stw	zero,-4(fp)
  80e508:	e0bfff17 	ldw	r2,-4(fp)
}
  80e50c:	e037883a 	mov	sp,fp
  80e510:	df000017 	ldw	fp,0(sp)
  80e514:	dec00104 	addi	sp,sp,4
  80e518:	f800283a 	ret

0080e51c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80e51c:	defff804 	addi	sp,sp,-32
  80e520:	df000715 	stw	fp,28(sp)
  80e524:	df000704 	addi	fp,sp,28
  80e528:	e13ffb15 	stw	r4,-20(fp)
  80e52c:	e17ffc15 	stw	r5,-16(fp)
  80e530:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80e534:	00bff9c4 	movi	r2,-25
  80e538:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80e53c:	e0bffc17 	ldw	r2,-16(fp)
  80e540:	e0bfff15 	stw	r2,-4(fp)
  80e544:	e0ffff17 	ldw	r3,-4(fp)
  80e548:	189a8060 	cmpeqi	r2,r3,27137
  80e54c:	1000041e 	bne	r2,zero,80e560 <altera_avalon_jtag_uart_ioctl+0x44>
  80e550:	e0ffff17 	ldw	r3,-4(fp)
  80e554:	189a80a0 	cmpeqi	r2,r3,27138
  80e558:	10001b1e 	bne	r2,zero,80e5c8 <altera_avalon_jtag_uart_ioctl+0xac>
  80e55c:	00002706 	br	80e5fc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80e560:	e0bffb17 	ldw	r2,-20(fp)
  80e564:	10c00117 	ldw	r3,4(r2)
  80e568:	00a00034 	movhi	r2,32768
  80e56c:	10bfffc4 	addi	r2,r2,-1
  80e570:	18802226 	beq	r3,r2,80e5fc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80e574:	e0bffd17 	ldw	r2,-12(fp)
  80e578:	10800017 	ldw	r2,0(r2)
  80e57c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80e580:	e0bff917 	ldw	r2,-28(fp)
  80e584:	10800090 	cmplti	r2,r2,2
  80e588:	1000071e 	bne	r2,zero,80e5a8 <altera_avalon_jtag_uart_ioctl+0x8c>
  80e58c:	e0fff917 	ldw	r3,-28(fp)
  80e590:	00a00034 	movhi	r2,32768
  80e594:	10bfffc4 	addi	r2,r2,-1
  80e598:	18800326 	beq	r3,r2,80e5a8 <altera_avalon_jtag_uart_ioctl+0x8c>
  80e59c:	e0bff917 	ldw	r2,-28(fp)
  80e5a0:	e0bffe15 	stw	r2,-8(fp)
  80e5a4:	00000306 	br	80e5b4 <altera_avalon_jtag_uart_ioctl+0x98>
  80e5a8:	00e00034 	movhi	r3,32768
  80e5ac:	18ffff84 	addi	r3,r3,-2
  80e5b0:	e0fffe15 	stw	r3,-8(fp)
  80e5b4:	e0bffb17 	ldw	r2,-20(fp)
  80e5b8:	e0fffe17 	ldw	r3,-8(fp)
  80e5bc:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80e5c0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80e5c4:	00000d06 	br	80e5fc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80e5c8:	e0bffb17 	ldw	r2,-20(fp)
  80e5cc:	10c00117 	ldw	r3,4(r2)
  80e5d0:	00a00034 	movhi	r2,32768
  80e5d4:	10bfffc4 	addi	r2,r2,-1
  80e5d8:	18800826 	beq	r3,r2,80e5fc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80e5dc:	e13ffd17 	ldw	r4,-12(fp)
  80e5e0:	e0bffb17 	ldw	r2,-20(fp)
  80e5e4:	10c00917 	ldw	r3,36(r2)
  80e5e8:	e0bffb17 	ldw	r2,-20(fp)
  80e5ec:	10800117 	ldw	r2,4(r2)
  80e5f0:	1885803a 	cmpltu	r2,r3,r2
  80e5f4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80e5f8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80e5fc:	e0bffa17 	ldw	r2,-24(fp)
}
  80e600:	e037883a 	mov	sp,fp
  80e604:	df000017 	ldw	fp,0(sp)
  80e608:	dec00104 	addi	sp,sp,4
  80e60c:	f800283a 	ret

0080e610 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80e610:	defff204 	addi	sp,sp,-56
  80e614:	dfc00d15 	stw	ra,52(sp)
  80e618:	df000c15 	stw	fp,48(sp)
  80e61c:	df000c04 	addi	fp,sp,48
  80e620:	e13ffb15 	stw	r4,-20(fp)
  80e624:	e17ffc15 	stw	r5,-16(fp)
  80e628:	e1bffd15 	stw	r6,-12(fp)
  80e62c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80e630:	e0bffc17 	ldw	r2,-16(fp)
  80e634:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80e638:	00004806 	br	80e75c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80e63c:	e0bffb17 	ldw	r2,-20(fp)
  80e640:	10800a17 	ldw	r2,40(r2)
  80e644:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80e648:	e0bffb17 	ldw	r2,-20(fp)
  80e64c:	10800b17 	ldw	r2,44(r2)
  80e650:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80e654:	e0fff717 	ldw	r3,-36(fp)
  80e658:	e0bff617 	ldw	r2,-40(fp)
  80e65c:	18800536 	bltu	r3,r2,80e674 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80e660:	e0bff717 	ldw	r2,-36(fp)
  80e664:	e0fff617 	ldw	r3,-40(fp)
  80e668:	10c5c83a 	sub	r2,r2,r3
  80e66c:	e0bff815 	stw	r2,-32(fp)
  80e670:	00000406 	br	80e684 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80e674:	00820004 	movi	r2,2048
  80e678:	e0fff617 	ldw	r3,-40(fp)
  80e67c:	10c5c83a 	sub	r2,r2,r3
  80e680:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80e684:	e0bff817 	ldw	r2,-32(fp)
  80e688:	1005003a 	cmpeq	r2,r2,zero
  80e68c:	10001f1e 	bne	r2,zero,80e70c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80e690:	e0fffd17 	ldw	r3,-12(fp)
  80e694:	e0bff817 	ldw	r2,-32(fp)
  80e698:	1880022e 	bgeu	r3,r2,80e6a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80e69c:	e0bffd17 	ldw	r2,-12(fp)
  80e6a0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80e6a4:	e0bffb17 	ldw	r2,-20(fp)
  80e6a8:	10c00e04 	addi	r3,r2,56
  80e6ac:	e0bff617 	ldw	r2,-40(fp)
  80e6b0:	1887883a 	add	r3,r3,r2
  80e6b4:	e0bffa17 	ldw	r2,-24(fp)
  80e6b8:	1009883a 	mov	r4,r2
  80e6bc:	180b883a 	mov	r5,r3
  80e6c0:	e1bff817 	ldw	r6,-32(fp)
  80e6c4:	0808d940 	call	808d94 <memcpy>
      ptr   += n;
  80e6c8:	e0fff817 	ldw	r3,-32(fp)
  80e6cc:	e0bffa17 	ldw	r2,-24(fp)
  80e6d0:	10c5883a 	add	r2,r2,r3
  80e6d4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80e6d8:	e0fffd17 	ldw	r3,-12(fp)
  80e6dc:	e0bff817 	ldw	r2,-32(fp)
  80e6e0:	1885c83a 	sub	r2,r3,r2
  80e6e4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e6e8:	e0fff617 	ldw	r3,-40(fp)
  80e6ec:	e0bff817 	ldw	r2,-32(fp)
  80e6f0:	1885883a 	add	r2,r3,r2
  80e6f4:	10c1ffcc 	andi	r3,r2,2047
  80e6f8:	e0bffb17 	ldw	r2,-20(fp)
  80e6fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80e700:	e0bffd17 	ldw	r2,-12(fp)
  80e704:	10800048 	cmpgei	r2,r2,1
  80e708:	103fcc1e 	bne	r2,zero,80e63c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80e70c:	e0fffa17 	ldw	r3,-24(fp)
  80e710:	e0bffc17 	ldw	r2,-16(fp)
  80e714:	1880141e 	bne	r3,r2,80e768 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80e718:	e0bffe17 	ldw	r2,-8(fp)
  80e71c:	1090000c 	andi	r2,r2,16384
  80e720:	1004c03a 	cmpne	r2,r2,zero
  80e724:	1000101e 	bne	r2,zero,80e768 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80e728:	e0bffb17 	ldw	r2,-20(fp)
  80e72c:	10c00a17 	ldw	r3,40(r2)
  80e730:	e0bff717 	ldw	r2,-36(fp)
  80e734:	1880051e 	bne	r3,r2,80e74c <altera_avalon_jtag_uart_read+0x13c>
  80e738:	e0bffb17 	ldw	r2,-20(fp)
  80e73c:	10c00917 	ldw	r3,36(r2)
  80e740:	e0bffb17 	ldw	r2,-20(fp)
  80e744:	10800117 	ldw	r2,4(r2)
  80e748:	18bff736 	bltu	r3,r2,80e728 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80e74c:	e0bffb17 	ldw	r2,-20(fp)
  80e750:	10c00a17 	ldw	r3,40(r2)
  80e754:	e0bff717 	ldw	r2,-36(fp)
  80e758:	18800326 	beq	r3,r2,80e768 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80e75c:	e0bffd17 	ldw	r2,-12(fp)
  80e760:	10800048 	cmpgei	r2,r2,1
  80e764:	103fb51e 	bne	r2,zero,80e63c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80e768:	e0fffa17 	ldw	r3,-24(fp)
  80e76c:	e0bffc17 	ldw	r2,-16(fp)
  80e770:	18801926 	beq	r3,r2,80e7d8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e774:	0005303a 	rdctl	r2,status
  80e778:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e77c:	e0fff517 	ldw	r3,-44(fp)
  80e780:	00bfff84 	movi	r2,-2
  80e784:	1884703a 	and	r2,r3,r2
  80e788:	1001703a 	wrctl	status,r2
  
  return context;
  80e78c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80e790:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e794:	e0bffb17 	ldw	r2,-20(fp)
  80e798:	10800817 	ldw	r2,32(r2)
  80e79c:	10c00054 	ori	r3,r2,1
  80e7a0:	e0bffb17 	ldw	r2,-20(fp)
  80e7a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e7a8:	e0bffb17 	ldw	r2,-20(fp)
  80e7ac:	10800017 	ldw	r2,0(r2)
  80e7b0:	11000104 	addi	r4,r2,4
  80e7b4:	e0bffb17 	ldw	r2,-20(fp)
  80e7b8:	10800817 	ldw	r2,32(r2)
  80e7bc:	1007883a 	mov	r3,r2
  80e7c0:	2005883a 	mov	r2,r4
  80e7c4:	10c00035 	stwio	r3,0(r2)
  80e7c8:	e0bff917 	ldw	r2,-28(fp)
  80e7cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e7d0:	e0bff417 	ldw	r2,-48(fp)
  80e7d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80e7d8:	e0fffa17 	ldw	r3,-24(fp)
  80e7dc:	e0bffc17 	ldw	r2,-16(fp)
  80e7e0:	18800526 	beq	r3,r2,80e7f8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80e7e4:	e0fffa17 	ldw	r3,-24(fp)
  80e7e8:	e0bffc17 	ldw	r2,-16(fp)
  80e7ec:	1887c83a 	sub	r3,r3,r2
  80e7f0:	e0ffff15 	stw	r3,-4(fp)
  80e7f4:	00000906 	br	80e81c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80e7f8:	e0bffe17 	ldw	r2,-8(fp)
  80e7fc:	1090000c 	andi	r2,r2,16384
  80e800:	1005003a 	cmpeq	r2,r2,zero
  80e804:	1000031e 	bne	r2,zero,80e814 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80e808:	00bffd44 	movi	r2,-11
  80e80c:	e0bfff15 	stw	r2,-4(fp)
  80e810:	00000206 	br	80e81c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80e814:	00bffec4 	movi	r2,-5
  80e818:	e0bfff15 	stw	r2,-4(fp)
  80e81c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e820:	e037883a 	mov	sp,fp
  80e824:	dfc00117 	ldw	ra,4(sp)
  80e828:	df000017 	ldw	fp,0(sp)
  80e82c:	dec00204 	addi	sp,sp,8
  80e830:	f800283a 	ret

0080e834 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80e834:	defff204 	addi	sp,sp,-56
  80e838:	dfc00d15 	stw	ra,52(sp)
  80e83c:	df000c15 	stw	fp,48(sp)
  80e840:	df000c04 	addi	fp,sp,48
  80e844:	e13ffb15 	stw	r4,-20(fp)
  80e848:	e17ffc15 	stw	r5,-16(fp)
  80e84c:	e1bffd15 	stw	r6,-12(fp)
  80e850:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80e854:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80e858:	e0bffc17 	ldw	r2,-16(fp)
  80e85c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80e860:	00003a06 	br	80e94c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80e864:	e0bffb17 	ldw	r2,-20(fp)
  80e868:	10800c17 	ldw	r2,48(r2)
  80e86c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80e870:	e0bffb17 	ldw	r2,-20(fp)
  80e874:	10800d17 	ldw	r2,52(r2)
  80e878:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80e87c:	e0fffa17 	ldw	r3,-24(fp)
  80e880:	e0bff917 	ldw	r2,-28(fp)
  80e884:	1880062e 	bgeu	r3,r2,80e8a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80e888:	e0fff917 	ldw	r3,-28(fp)
  80e88c:	e0bffa17 	ldw	r2,-24(fp)
  80e890:	1885c83a 	sub	r2,r3,r2
  80e894:	10bfffc4 	addi	r2,r2,-1
  80e898:	e0bff815 	stw	r2,-32(fp)
  80e89c:	00000c06 	br	80e8d0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80e8a0:	e0bff917 	ldw	r2,-28(fp)
  80e8a4:	1005003a 	cmpeq	r2,r2,zero
  80e8a8:	1000051e 	bne	r2,zero,80e8c0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80e8ac:	00820004 	movi	r2,2048
  80e8b0:	e0fffa17 	ldw	r3,-24(fp)
  80e8b4:	10c5c83a 	sub	r2,r2,r3
  80e8b8:	e0bff815 	stw	r2,-32(fp)
  80e8bc:	00000406 	br	80e8d0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80e8c0:	0081ffc4 	movi	r2,2047
  80e8c4:	e0fffa17 	ldw	r3,-24(fp)
  80e8c8:	10c5c83a 	sub	r2,r2,r3
  80e8cc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80e8d0:	e0bff817 	ldw	r2,-32(fp)
  80e8d4:	1005003a 	cmpeq	r2,r2,zero
  80e8d8:	10001f1e 	bne	r2,zero,80e958 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80e8dc:	e0fffd17 	ldw	r3,-12(fp)
  80e8e0:	e0bff817 	ldw	r2,-32(fp)
  80e8e4:	1880022e 	bgeu	r3,r2,80e8f0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80e8e8:	e0bffd17 	ldw	r2,-12(fp)
  80e8ec:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80e8f0:	e0bffb17 	ldw	r2,-20(fp)
  80e8f4:	10c20e04 	addi	r3,r2,2104
  80e8f8:	e0bffa17 	ldw	r2,-24(fp)
  80e8fc:	1885883a 	add	r2,r3,r2
  80e900:	e0fffc17 	ldw	r3,-16(fp)
  80e904:	1009883a 	mov	r4,r2
  80e908:	180b883a 	mov	r5,r3
  80e90c:	e1bff817 	ldw	r6,-32(fp)
  80e910:	0808d940 	call	808d94 <memcpy>
      ptr   += n;
  80e914:	e0fff817 	ldw	r3,-32(fp)
  80e918:	e0bffc17 	ldw	r2,-16(fp)
  80e91c:	10c5883a 	add	r2,r2,r3
  80e920:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80e924:	e0fffd17 	ldw	r3,-12(fp)
  80e928:	e0bff817 	ldw	r2,-32(fp)
  80e92c:	1885c83a 	sub	r2,r3,r2
  80e930:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e934:	e0fffa17 	ldw	r3,-24(fp)
  80e938:	e0bff817 	ldw	r2,-32(fp)
  80e93c:	1885883a 	add	r2,r3,r2
  80e940:	10c1ffcc 	andi	r3,r2,2047
  80e944:	e0bffb17 	ldw	r2,-20(fp)
  80e948:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80e94c:	e0bffd17 	ldw	r2,-12(fp)
  80e950:	10800048 	cmpgei	r2,r2,1
  80e954:	103fc31e 	bne	r2,zero,80e864 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e958:	0005303a 	rdctl	r2,status
  80e95c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e960:	e0fff517 	ldw	r3,-44(fp)
  80e964:	00bfff84 	movi	r2,-2
  80e968:	1884703a 	and	r2,r3,r2
  80e96c:	1001703a 	wrctl	status,r2
  
  return context;
  80e970:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80e974:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e978:	e0bffb17 	ldw	r2,-20(fp)
  80e97c:	10800817 	ldw	r2,32(r2)
  80e980:	10c00094 	ori	r3,r2,2
  80e984:	e0bffb17 	ldw	r2,-20(fp)
  80e988:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e98c:	e0bffb17 	ldw	r2,-20(fp)
  80e990:	10800017 	ldw	r2,0(r2)
  80e994:	11000104 	addi	r4,r2,4
  80e998:	e0bffb17 	ldw	r2,-20(fp)
  80e99c:	10800817 	ldw	r2,32(r2)
  80e9a0:	1007883a 	mov	r3,r2
  80e9a4:	2005883a 	mov	r2,r4
  80e9a8:	10c00035 	stwio	r3,0(r2)
  80e9ac:	e0bff717 	ldw	r2,-36(fp)
  80e9b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e9b4:	e0bff417 	ldw	r2,-48(fp)
  80e9b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80e9bc:	e0bffd17 	ldw	r2,-12(fp)
  80e9c0:	10800050 	cmplti	r2,r2,1
  80e9c4:	1000111e 	bne	r2,zero,80ea0c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80e9c8:	e0bffe17 	ldw	r2,-8(fp)
  80e9cc:	1090000c 	andi	r2,r2,16384
  80e9d0:	1004c03a 	cmpne	r2,r2,zero
  80e9d4:	1000101e 	bne	r2,zero,80ea18 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80e9d8:	e0bffb17 	ldw	r2,-20(fp)
  80e9dc:	10c00d17 	ldw	r3,52(r2)
  80e9e0:	e0bff917 	ldw	r2,-28(fp)
  80e9e4:	1880051e 	bne	r3,r2,80e9fc <altera_avalon_jtag_uart_write+0x1c8>
  80e9e8:	e0bffb17 	ldw	r2,-20(fp)
  80e9ec:	10c00917 	ldw	r3,36(r2)
  80e9f0:	e0bffb17 	ldw	r2,-20(fp)
  80e9f4:	10800117 	ldw	r2,4(r2)
  80e9f8:	18bff736 	bltu	r3,r2,80e9d8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80e9fc:	e0bffb17 	ldw	r2,-20(fp)
  80ea00:	10c00d17 	ldw	r3,52(r2)
  80ea04:	e0bff917 	ldw	r2,-28(fp)
  80ea08:	18800326 	beq	r3,r2,80ea18 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80ea0c:	e0bffd17 	ldw	r2,-12(fp)
  80ea10:	10800048 	cmpgei	r2,r2,1
  80ea14:	103fcd1e 	bne	r2,zero,80e94c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ea18:	e0fffc17 	ldw	r3,-16(fp)
  80ea1c:	e0bff617 	ldw	r2,-40(fp)
  80ea20:	18800526 	beq	r3,r2,80ea38 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80ea24:	e0fffc17 	ldw	r3,-16(fp)
  80ea28:	e0bff617 	ldw	r2,-40(fp)
  80ea2c:	1887c83a 	sub	r3,r3,r2
  80ea30:	e0ffff15 	stw	r3,-4(fp)
  80ea34:	00000906 	br	80ea5c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80ea38:	e0bffe17 	ldw	r2,-8(fp)
  80ea3c:	1090000c 	andi	r2,r2,16384
  80ea40:	1005003a 	cmpeq	r2,r2,zero
  80ea44:	1000031e 	bne	r2,zero,80ea54 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80ea48:	00bffd44 	movi	r2,-11
  80ea4c:	e0bfff15 	stw	r2,-4(fp)
  80ea50:	00000206 	br	80ea5c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80ea54:	00bffec4 	movi	r2,-5
  80ea58:	e0bfff15 	stw	r2,-4(fp)
  80ea5c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ea60:	e037883a 	mov	sp,fp
  80ea64:	dfc00117 	ldw	ra,4(sp)
  80ea68:	df000017 	ldw	fp,0(sp)
  80ea6c:	dec00204 	addi	sp,sp,8
  80ea70:	f800283a 	ret

0080ea74 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  80ea74:	defff404 	addi	sp,sp,-48
  80ea78:	df000b15 	stw	fp,44(sp)
  80ea7c:	df000b04 	addi	fp,sp,44
  80ea80:	e13ffc15 	stw	r4,-16(fp)
  80ea84:	e17ffd15 	stw	r5,-12(fp)
  80ea88:	e1bffe15 	stw	r6,-8(fp)
  80ea8c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  80ea90:	e0fffe17 	ldw	r3,-8(fp)
  80ea94:	e0bfff17 	ldw	r2,-4(fp)
  80ea98:	10c5883a 	add	r2,r2,r3
  80ea9c:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
  80eaa0:	e0c00117 	ldw	r3,4(fp)
  80eaa4:	e0800217 	ldw	r2,8(fp)
  80eaa8:	10c5883a 	add	r2,r2,r3
  80eaac:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
  80eab0:	e0800117 	ldw	r2,4(fp)
  80eab4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
  80eab8:	e0bffe17 	ldw	r2,-8(fp)
  80eabc:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  80eac0:	00800044 	movi	r2,1
  80eac4:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  80eac8:	e0bffc17 	ldw	r2,-16(fp)
  80eacc:	11000504 	addi	r4,r2,20
  80ead0:	e0fffd17 	ldw	r3,-12(fp)
  80ead4:	00800044 	movi	r2,1
  80ead8:	10c6983a 	sll	r3,r2,r3
  80eadc:	2005883a 	mov	r2,r4
  80eae0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  80eae4:	e0800317 	ldw	r2,12(fp)
  80eae8:	1080008c 	andi	r2,r2,2
  80eaec:	1004c03a 	cmpne	r2,r2,zero
  80eaf0:	1000051e 	bne	r2,zero,80eb08 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  80eaf4:	e0bffc17 	ldw	r2,-16(fp)
  80eaf8:	10800304 	addi	r2,r2,12
  80eafc:	1007883a 	mov	r3,r2
  80eb00:	00810004 	movi	r2,1024
  80eb04:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80eb08:	e0bffc17 	ldw	r2,-16(fp)
  80eb0c:	10800037 	ldwio	r2,0(r2)
  80eb10:	00000006 	br	80eb14 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80eb14:	e0bffc17 	ldw	r2,-16(fp)
  80eb18:	10800204 	addi	r2,r2,8
  80eb1c:	10800037 	ldwio	r2,0(r2)
  80eb20:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  80eb24:	e0bff717 	ldw	r2,-36(fp)
  80eb28:	1080100c 	andi	r2,r2,64
  80eb2c:	1005003a 	cmpeq	r2,r2,zero
  80eb30:	1000031e 	bne	r2,zero,80eb40 <alt_avalon_spi_command+0xcc>
  80eb34:	e0bff617 	ldw	r2,-40(fp)
  80eb38:	1004c03a 	cmpne	r2,r2,zero
  80eb3c:	1000041e 	bne	r2,zero,80eb50 <alt_avalon_spi_command+0xdc>
  80eb40:	e0bff717 	ldw	r2,-36(fp)
  80eb44:	1080200c 	andi	r2,r2,128
  80eb48:	1005003a 	cmpeq	r2,r2,zero
  80eb4c:	103ff11e 	bne	r2,zero,80eb14 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  80eb50:	e0bff717 	ldw	r2,-36(fp)
  80eb54:	1080100c 	andi	r2,r2,64
  80eb58:	1005003a 	cmpeq	r2,r2,zero
  80eb5c:	1000201e 	bne	r2,zero,80ebe0 <alt_avalon_spi_command+0x16c>
  80eb60:	e0bff617 	ldw	r2,-40(fp)
  80eb64:	10800050 	cmplti	r2,r2,1
  80eb68:	10001d1e 	bne	r2,zero,80ebe0 <alt_avalon_spi_command+0x16c>
    {
      credits--;
  80eb6c:	e0bff617 	ldw	r2,-40(fp)
  80eb70:	10bfffc4 	addi	r2,r2,-1
  80eb74:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
  80eb78:	e0ffff17 	ldw	r3,-4(fp)
  80eb7c:	e0bffb17 	ldw	r2,-20(fp)
  80eb80:	18800b2e 	bgeu	r3,r2,80ebb0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  80eb84:	e0bffc17 	ldw	r2,-16(fp)
  80eb88:	11000104 	addi	r4,r2,4
  80eb8c:	e0bfff17 	ldw	r2,-4(fp)
  80eb90:	10800003 	ldbu	r2,0(r2)
  80eb94:	10c03fcc 	andi	r3,r2,255
  80eb98:	e0bfff17 	ldw	r2,-4(fp)
  80eb9c:	10800044 	addi	r2,r2,1
  80eba0:	e0bfff15 	stw	r2,-4(fp)
  80eba4:	2005883a 	mov	r2,r4
  80eba8:	10c00035 	stwio	r3,0(r2)
  80ebac:	00000c06 	br	80ebe0 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
  80ebb0:	e0bff917 	ldw	r2,-28(fp)
  80ebb4:	1005003a 	cmpeq	r2,r2,zero
  80ebb8:	1000071e 	bne	r2,zero,80ebd8 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
  80ebbc:	e0bff917 	ldw	r2,-28(fp)
  80ebc0:	10bfffc4 	addi	r2,r2,-1
  80ebc4:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  80ebc8:	e0bffc17 	ldw	r2,-16(fp)
  80ebcc:	10800104 	addi	r2,r2,4
  80ebd0:	10000035 	stwio	zero,0(r2)
  80ebd4:	00000206 	br	80ebe0 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
  80ebd8:	00bf0004 	movi	r2,-1024
  80ebdc:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  80ebe0:	e0bff717 	ldw	r2,-36(fp)
  80ebe4:	1080200c 	andi	r2,r2,128
  80ebe8:	1005003a 	cmpeq	r2,r2,zero
  80ebec:	103fc91e 	bne	r2,zero,80eb14 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  80ebf0:	e0bffc17 	ldw	r2,-16(fp)
  80ebf4:	10800037 	ldwio	r2,0(r2)
  80ebf8:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
  80ebfc:	e0bff817 	ldw	r2,-32(fp)
  80ec00:	1005003a 	cmpeq	r2,r2,zero
  80ec04:	1000041e 	bne	r2,zero,80ec18 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
  80ec08:	e0bff817 	ldw	r2,-32(fp)
  80ec0c:	10bfffc4 	addi	r2,r2,-1
  80ec10:	e0bff815 	stw	r2,-32(fp)
  80ec14:	00000706 	br	80ec34 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
  80ec18:	e0bff517 	ldw	r2,-44(fp)
  80ec1c:	1007883a 	mov	r3,r2
  80ec20:	e0800217 	ldw	r2,8(fp)
  80ec24:	10c00005 	stb	r3,0(r2)
  80ec28:	e0800217 	ldw	r2,8(fp)
  80ec2c:	10800044 	addi	r2,r2,1
  80ec30:	e0800215 	stw	r2,8(fp)
      credits++;
  80ec34:	e0bff617 	ldw	r2,-40(fp)
  80ec38:	10800044 	addi	r2,r2,1
  80ec3c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
  80ec40:	e0bff817 	ldw	r2,-32(fp)
  80ec44:	1004c03a 	cmpne	r2,r2,zero
  80ec48:	103fb21e 	bne	r2,zero,80eb14 <alt_avalon_spi_command+0xa0>
  80ec4c:	e0c00217 	ldw	r3,8(fp)
  80ec50:	e0bffa17 	ldw	r2,-24(fp)
  80ec54:	18800126 	beq	r3,r2,80ec5c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
  80ec58:	003fae06 	br	80eb14 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  80ec5c:	e0bffc17 	ldw	r2,-16(fp)
  80ec60:	10800204 	addi	r2,r2,8
  80ec64:	10800037 	ldwio	r2,0(r2)
  80ec68:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  80ec6c:	e0bff717 	ldw	r2,-36(fp)
  80ec70:	1080080c 	andi	r2,r2,32
  80ec74:	1005003a 	cmpeq	r2,r2,zero
  80ec78:	103ff81e 	bne	r2,zero,80ec5c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  80ec7c:	e0800317 	ldw	r2,12(fp)
  80ec80:	1080004c 	andi	r2,r2,1
  80ec84:	1004c03a 	cmpne	r2,r2,zero
  80ec88:	1000031e 	bne	r2,zero,80ec98 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  80ec8c:	e0bffc17 	ldw	r2,-16(fp)
  80ec90:	10800304 	addi	r2,r2,12
  80ec94:	10000035 	stwio	zero,0(r2)

  return read_length;
  80ec98:	e0800117 	ldw	r2,4(fp)
}
  80ec9c:	e037883a 	mov	sp,fp
  80eca0:	df000017 	ldw	fp,0(sp)
  80eca4:	dec00104 	addi	sp,sp,4
  80eca8:	f800283a 	ret

0080ecac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ecac:	defffa04 	addi	sp,sp,-24
  80ecb0:	dfc00515 	stw	ra,20(sp)
  80ecb4:	df000415 	stw	fp,16(sp)
  80ecb8:	df000404 	addi	fp,sp,16
  80ecbc:	e13ffd15 	stw	r4,-12(fp)
  80ecc0:	e17ffe15 	stw	r5,-8(fp)
  80ecc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ecc8:	e0bffd17 	ldw	r2,-12(fp)
  80eccc:	10800017 	ldw	r2,0(r2)
  80ecd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80ecd4:	e0bffc17 	ldw	r2,-16(fp)
  80ecd8:	11000a04 	addi	r4,r2,40
  80ecdc:	e0bffd17 	ldw	r2,-12(fp)
  80ece0:	11c00217 	ldw	r7,8(r2)
  80ece4:	e17ffe17 	ldw	r5,-8(fp)
  80ece8:	e1bfff17 	ldw	r6,-4(fp)
  80ecec:	080f1a40 	call	80f1a4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80ecf0:	e037883a 	mov	sp,fp
  80ecf4:	dfc00117 	ldw	ra,4(sp)
  80ecf8:	df000017 	ldw	fp,0(sp)
  80ecfc:	dec00204 	addi	sp,sp,8
  80ed00:	f800283a 	ret

0080ed04 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ed04:	defffa04 	addi	sp,sp,-24
  80ed08:	dfc00515 	stw	ra,20(sp)
  80ed0c:	df000415 	stw	fp,16(sp)
  80ed10:	df000404 	addi	fp,sp,16
  80ed14:	e13ffd15 	stw	r4,-12(fp)
  80ed18:	e17ffe15 	stw	r5,-8(fp)
  80ed1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ed20:	e0bffd17 	ldw	r2,-12(fp)
  80ed24:	10800017 	ldw	r2,0(r2)
  80ed28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80ed2c:	e0bffc17 	ldw	r2,-16(fp)
  80ed30:	11000a04 	addi	r4,r2,40
  80ed34:	e0bffd17 	ldw	r2,-12(fp)
  80ed38:	11c00217 	ldw	r7,8(r2)
  80ed3c:	e17ffe17 	ldw	r5,-8(fp)
  80ed40:	e1bfff17 	ldw	r6,-4(fp)
  80ed44:	080f4340 	call	80f434 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80ed48:	e037883a 	mov	sp,fp
  80ed4c:	dfc00117 	ldw	ra,4(sp)
  80ed50:	df000017 	ldw	fp,0(sp)
  80ed54:	dec00204 	addi	sp,sp,8
  80ed58:	f800283a 	ret

0080ed5c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80ed5c:	defffc04 	addi	sp,sp,-16
  80ed60:	dfc00315 	stw	ra,12(sp)
  80ed64:	df000215 	stw	fp,8(sp)
  80ed68:	df000204 	addi	fp,sp,8
  80ed6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ed70:	e0bfff17 	ldw	r2,-4(fp)
  80ed74:	10800017 	ldw	r2,0(r2)
  80ed78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80ed7c:	e0bffe17 	ldw	r2,-8(fp)
  80ed80:	11000a04 	addi	r4,r2,40
  80ed84:	e0bfff17 	ldw	r2,-4(fp)
  80ed88:	11400217 	ldw	r5,8(r2)
  80ed8c:	080f1440 	call	80f144 <altera_avalon_uart_close>
}
  80ed90:	e037883a 	mov	sp,fp
  80ed94:	dfc00117 	ldw	ra,4(sp)
  80ed98:	df000017 	ldw	fp,0(sp)
  80ed9c:	dec00204 	addi	sp,sp,8
  80eda0:	f800283a 	ret

0080eda4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80eda4:	defff704 	addi	sp,sp,-36
  80eda8:	dfc00815 	stw	ra,32(sp)
  80edac:	df000715 	stw	fp,28(sp)
  80edb0:	df000704 	addi	fp,sp,28
  80edb4:	e13ffc15 	stw	r4,-16(fp)
  80edb8:	e17ffd15 	stw	r5,-12(fp)
  80edbc:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80edc0:	e0bffc17 	ldw	r2,-16(fp)
  80edc4:	10800017 	ldw	r2,0(r2)
  80edc8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80edcc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80edd0:	1004c03a 	cmpne	r2,r2,zero
  80edd4:	1000061e 	bne	r2,zero,80edf0 <altera_avalon_uart_init+0x4c>
  80edd8:	0005883a 	mov	r2,zero
  80eddc:	1004c03a 	cmpne	r2,r2,zero
  80ede0:	1000031e 	bne	r2,zero,80edf0 <altera_avalon_uart_init+0x4c>
  80ede4:	0005883a 	mov	r2,zero
  80ede8:	1005003a 	cmpeq	r2,r2,zero
  80edec:	1000031e 	bne	r2,zero,80edfc <altera_avalon_uart_init+0x58>
  80edf0:	00800044 	movi	r2,1
  80edf4:	e0bfff15 	stw	r2,-4(fp)
  80edf8:	00000106 	br	80ee00 <altera_avalon_uart_init+0x5c>
  80edfc:	e03fff15 	stw	zero,-4(fp)
  80ee00:	e0bfff17 	ldw	r2,-4(fp)
  80ee04:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80ee08:	e0bffa17 	ldw	r2,-24(fp)
  80ee0c:	1004c03a 	cmpne	r2,r2,zero
  80ee10:	1000111e 	bne	r2,zero,80ee58 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80ee14:	e0fffc17 	ldw	r3,-16(fp)
  80ee18:	00832004 	movi	r2,3200
  80ee1c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80ee20:	e0bffb17 	ldw	r2,-20(fp)
  80ee24:	11000304 	addi	r4,r2,12
  80ee28:	e0bffc17 	ldw	r2,-16(fp)
  80ee2c:	10800117 	ldw	r2,4(r2)
  80ee30:	1007883a 	mov	r3,r2
  80ee34:	2005883a 	mov	r2,r4
  80ee38:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80ee3c:	d8000015 	stw	zero,0(sp)
  80ee40:	e13ffd17 	ldw	r4,-12(fp)
  80ee44:	e17ffe17 	ldw	r5,-8(fp)
  80ee48:	01802074 	movhi	r6,129
  80ee4c:	31bb9b04 	addi	r6,r6,-4500
  80ee50:	e1fffc17 	ldw	r7,-16(fp)
  80ee54:	080fa000 	call	80fa00 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80ee58:	e037883a 	mov	sp,fp
  80ee5c:	dfc00117 	ldw	ra,4(sp)
  80ee60:	df000017 	ldw	fp,0(sp)
  80ee64:	dec00204 	addi	sp,sp,8
  80ee68:	f800283a 	ret

0080ee6c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80ee6c:	defffa04 	addi	sp,sp,-24
  80ee70:	dfc00515 	stw	ra,20(sp)
  80ee74:	df000415 	stw	fp,16(sp)
  80ee78:	df000404 	addi	fp,sp,16
  80ee7c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80ee80:	e0bfff17 	ldw	r2,-4(fp)
  80ee84:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80ee88:	e0bffd17 	ldw	r2,-12(fp)
  80ee8c:	10800017 	ldw	r2,0(r2)
  80ee90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80ee94:	e0bffc17 	ldw	r2,-16(fp)
  80ee98:	10800204 	addi	r2,r2,8
  80ee9c:	10800037 	ldwio	r2,0(r2)
  80eea0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80eea4:	e0bffc17 	ldw	r2,-16(fp)
  80eea8:	10800204 	addi	r2,r2,8
  80eeac:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80eeb0:	e0bffc17 	ldw	r2,-16(fp)
  80eeb4:	10800204 	addi	r2,r2,8
  80eeb8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80eebc:	e0bffe17 	ldw	r2,-8(fp)
  80eec0:	1080200c 	andi	r2,r2,128
  80eec4:	1005003a 	cmpeq	r2,r2,zero
  80eec8:	1000031e 	bne	r2,zero,80eed8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80eecc:	e13ffd17 	ldw	r4,-12(fp)
  80eed0:	e17ffe17 	ldw	r5,-8(fp)
  80eed4:	080ef080 	call	80ef08 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80eed8:	e0bffe17 	ldw	r2,-8(fp)
  80eedc:	1081100c 	andi	r2,r2,1088
  80eee0:	1005003a 	cmpeq	r2,r2,zero
  80eee4:	1000031e 	bne	r2,zero,80eef4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80eee8:	e13ffd17 	ldw	r4,-12(fp)
  80eeec:	e17ffe17 	ldw	r5,-8(fp)
  80eef0:	080efe80 	call	80efe8 <altera_avalon_uart_txirq>
  }
  

}
  80eef4:	e037883a 	mov	sp,fp
  80eef8:	dfc00117 	ldw	ra,4(sp)
  80eefc:	df000017 	ldw	fp,0(sp)
  80ef00:	dec00204 	addi	sp,sp,8
  80ef04:	f800283a 	ret

0080ef08 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ef08:	defffc04 	addi	sp,sp,-16
  80ef0c:	df000315 	stw	fp,12(sp)
  80ef10:	df000304 	addi	fp,sp,12
  80ef14:	e13ffe15 	stw	r4,-8(fp)
  80ef18:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80ef1c:	e0bfff17 	ldw	r2,-4(fp)
  80ef20:	108000cc 	andi	r2,r2,3
  80ef24:	1004c03a 	cmpne	r2,r2,zero
  80ef28:	10002b1e 	bne	r2,zero,80efd8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80ef2c:	e0bffe17 	ldw	r2,-8(fp)
  80ef30:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ef34:	e0bffe17 	ldw	r2,-8(fp)
  80ef38:	10800317 	ldw	r2,12(r2)
  80ef3c:	10800044 	addi	r2,r2,1
  80ef40:	10800fcc 	andi	r2,r2,63
  80ef44:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80ef48:	e0bffe17 	ldw	r2,-8(fp)
  80ef4c:	11000317 	ldw	r4,12(r2)
  80ef50:	e0bffe17 	ldw	r2,-8(fp)
  80ef54:	10800017 	ldw	r2,0(r2)
  80ef58:	10800037 	ldwio	r2,0(r2)
  80ef5c:	1007883a 	mov	r3,r2
  80ef60:	e0bffe17 	ldw	r2,-8(fp)
  80ef64:	2085883a 	add	r2,r4,r2
  80ef68:	10800704 	addi	r2,r2,28
  80ef6c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80ef70:	e0fffe17 	ldw	r3,-8(fp)
  80ef74:	e0bffd17 	ldw	r2,-12(fp)
  80ef78:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ef7c:	e0bffe17 	ldw	r2,-8(fp)
  80ef80:	10800317 	ldw	r2,12(r2)
  80ef84:	10800044 	addi	r2,r2,1
  80ef88:	10800fcc 	andi	r2,r2,63
  80ef8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80ef90:	e0bffe17 	ldw	r2,-8(fp)
  80ef94:	10c00217 	ldw	r3,8(r2)
  80ef98:	e0bffd17 	ldw	r2,-12(fp)
  80ef9c:	18800e1e 	bne	r3,r2,80efd8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80efa0:	e0bffe17 	ldw	r2,-8(fp)
  80efa4:	10c00117 	ldw	r3,4(r2)
  80efa8:	00bfdfc4 	movi	r2,-129
  80efac:	1886703a 	and	r3,r3,r2
  80efb0:	e0bffe17 	ldw	r2,-8(fp)
  80efb4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80efb8:	e0bffe17 	ldw	r2,-8(fp)
  80efbc:	10800017 	ldw	r2,0(r2)
  80efc0:	11000304 	addi	r4,r2,12
  80efc4:	e0bffe17 	ldw	r2,-8(fp)
  80efc8:	10800117 	ldw	r2,4(r2)
  80efcc:	1007883a 	mov	r3,r2
  80efd0:	2005883a 	mov	r2,r4
  80efd4:	10c00035 	stwio	r3,0(r2)
  }   
}
  80efd8:	e037883a 	mov	sp,fp
  80efdc:	df000017 	ldw	fp,0(sp)
  80efe0:	dec00104 	addi	sp,sp,4
  80efe4:	f800283a 	ret

0080efe8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80efe8:	defffd04 	addi	sp,sp,-12
  80efec:	df000215 	stw	fp,8(sp)
  80eff0:	df000204 	addi	fp,sp,8
  80eff4:	e13ffe15 	stw	r4,-8(fp)
  80eff8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80effc:	e0bffe17 	ldw	r2,-8(fp)
  80f000:	10c00417 	ldw	r3,16(r2)
  80f004:	e0bffe17 	ldw	r2,-8(fp)
  80f008:	10800517 	ldw	r2,20(r2)
  80f00c:	18803626 	beq	r3,r2,80f0e8 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f010:	e0bffe17 	ldw	r2,-8(fp)
  80f014:	10800617 	ldw	r2,24(r2)
  80f018:	1080008c 	andi	r2,r2,2
  80f01c:	1005003a 	cmpeq	r2,r2,zero
  80f020:	1000041e 	bne	r2,zero,80f034 <altera_avalon_uart_txirq+0x4c>
  80f024:	e0bfff17 	ldw	r2,-4(fp)
  80f028:	1082000c 	andi	r2,r2,2048
  80f02c:	1005003a 	cmpeq	r2,r2,zero
  80f030:	10001e1e 	bne	r2,zero,80f0ac <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80f034:	e0bffe17 	ldw	r2,-8(fp)
  80f038:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80f03c:	e0bffe17 	ldw	r2,-8(fp)
  80f040:	10800017 	ldw	r2,0(r2)
  80f044:	11000104 	addi	r4,r2,4
  80f048:	e0bffe17 	ldw	r2,-8(fp)
  80f04c:	10c00417 	ldw	r3,16(r2)
  80f050:	e0bffe17 	ldw	r2,-8(fp)
  80f054:	1885883a 	add	r2,r3,r2
  80f058:	10801704 	addi	r2,r2,92
  80f05c:	10800003 	ldbu	r2,0(r2)
  80f060:	10c03fcc 	andi	r3,r2,255
  80f064:	2005883a 	mov	r2,r4
  80f068:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80f06c:	e0bffe17 	ldw	r2,-8(fp)
  80f070:	10800417 	ldw	r2,16(r2)
  80f074:	10c00044 	addi	r3,r2,1
  80f078:	e0bffe17 	ldw	r2,-8(fp)
  80f07c:	10c00415 	stw	r3,16(r2)
  80f080:	e0bffe17 	ldw	r2,-8(fp)
  80f084:	10800417 	ldw	r2,16(r2)
  80f088:	10c00fcc 	andi	r3,r2,63
  80f08c:	e0bffe17 	ldw	r2,-8(fp)
  80f090:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f094:	e0bffe17 	ldw	r2,-8(fp)
  80f098:	10800117 	ldw	r2,4(r2)
  80f09c:	10c01014 	ori	r3,r2,64
  80f0a0:	e0bffe17 	ldw	r2,-8(fp)
  80f0a4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f0a8:	00000f06 	br	80f0e8 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80f0ac:	e0bffe17 	ldw	r2,-8(fp)
  80f0b0:	10800017 	ldw	r2,0(r2)
  80f0b4:	10800204 	addi	r2,r2,8
  80f0b8:	10800037 	ldwio	r2,0(r2)
  80f0bc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f0c0:	e0bfff17 	ldw	r2,-4(fp)
  80f0c4:	1082000c 	andi	r2,r2,2048
  80f0c8:	1004c03a 	cmpne	r2,r2,zero
  80f0cc:	1000061e 	bne	r2,zero,80f0e8 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f0d0:	e0bffe17 	ldw	r2,-8(fp)
  80f0d4:	10c00117 	ldw	r3,4(r2)
  80f0d8:	00bfefc4 	movi	r2,-65
  80f0dc:	1886703a 	and	r3,r3,r2
  80f0e0:	e0bffe17 	ldw	r2,-8(fp)
  80f0e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80f0e8:	e0bffe17 	ldw	r2,-8(fp)
  80f0ec:	10c00417 	ldw	r3,16(r2)
  80f0f0:	e0bffe17 	ldw	r2,-8(fp)
  80f0f4:	10800517 	ldw	r2,20(r2)
  80f0f8:	1880061e 	bne	r3,r2,80f114 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f0fc:	e0bffe17 	ldw	r2,-8(fp)
  80f100:	10c00117 	ldw	r3,4(r2)
  80f104:	00beefc4 	movi	r2,-1089
  80f108:	1886703a 	and	r3,r3,r2
  80f10c:	e0bffe17 	ldw	r2,-8(fp)
  80f110:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f114:	e0bffe17 	ldw	r2,-8(fp)
  80f118:	10800017 	ldw	r2,0(r2)
  80f11c:	11000304 	addi	r4,r2,12
  80f120:	e0bffe17 	ldw	r2,-8(fp)
  80f124:	10800117 	ldw	r2,4(r2)
  80f128:	1007883a 	mov	r3,r2
  80f12c:	2005883a 	mov	r2,r4
  80f130:	10c00035 	stwio	r3,0(r2)
}
  80f134:	e037883a 	mov	sp,fp
  80f138:	df000017 	ldw	fp,0(sp)
  80f13c:	dec00104 	addi	sp,sp,4
  80f140:	f800283a 	ret

0080f144 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80f144:	defffc04 	addi	sp,sp,-16
  80f148:	df000315 	stw	fp,12(sp)
  80f14c:	df000304 	addi	fp,sp,12
  80f150:	e13ffd15 	stw	r4,-12(fp)
  80f154:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f158:	00000706 	br	80f178 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80f15c:	e0bffe17 	ldw	r2,-8(fp)
  80f160:	1090000c 	andi	r2,r2,16384
  80f164:	1005003a 	cmpeq	r2,r2,zero
  80f168:	1000031e 	bne	r2,zero,80f178 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80f16c:	00bffd44 	movi	r2,-11
  80f170:	e0bfff15 	stw	r2,-4(fp)
  80f174:	00000606 	br	80f190 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f178:	e0bffd17 	ldw	r2,-12(fp)
  80f17c:	10c00417 	ldw	r3,16(r2)
  80f180:	e0bffd17 	ldw	r2,-12(fp)
  80f184:	10800517 	ldw	r2,20(r2)
  80f188:	18bff41e 	bne	r3,r2,80f15c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f18c:	e03fff15 	stw	zero,-4(fp)
  80f190:	e0bfff17 	ldw	r2,-4(fp)
}
  80f194:	e037883a 	mov	sp,fp
  80f198:	df000017 	ldw	fp,0(sp)
  80f19c:	dec00104 	addi	sp,sp,4
  80f1a0:	f800283a 	ret

0080f1a4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80f1a4:	defff004 	addi	sp,sp,-64
  80f1a8:	dfc00f15 	stw	ra,60(sp)
  80f1ac:	df000e15 	stw	fp,56(sp)
  80f1b0:	df000e04 	addi	fp,sp,56
  80f1b4:	e13ffb15 	stw	r4,-20(fp)
  80f1b8:	e17ffc15 	stw	r5,-16(fp)
  80f1bc:	e1bffd15 	stw	r6,-12(fp)
  80f1c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80f1c4:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80f1c8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80f1cc:	e0bffe17 	ldw	r2,-8(fp)
  80f1d0:	1090000c 	andi	r2,r2,16384
  80f1d4:	1005003a 	cmpeq	r2,r2,zero
  80f1d8:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80f1dc:	e0bffb17 	ldw	r2,-20(fp)
  80f1e0:	10800217 	ldw	r2,8(r2)
  80f1e4:	10800044 	addi	r2,r2,1
  80f1e8:	10800fcc 	andi	r2,r2,63
  80f1ec:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f1f0:	00001906 	br	80f258 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80f1f4:	e0bff617 	ldw	r2,-40(fp)
  80f1f8:	10800044 	addi	r2,r2,1
  80f1fc:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f200:	e0bffb17 	ldw	r2,-20(fp)
  80f204:	10c00217 	ldw	r3,8(r2)
  80f208:	e0bffb17 	ldw	r2,-20(fp)
  80f20c:	1885883a 	add	r2,r3,r2
  80f210:	10800704 	addi	r2,r2,28
  80f214:	10800003 	ldbu	r2,0(r2)
  80f218:	1007883a 	mov	r3,r2
  80f21c:	e0bffc17 	ldw	r2,-16(fp)
  80f220:	10c00005 	stb	r3,0(r2)
  80f224:	e0bffc17 	ldw	r2,-16(fp)
  80f228:	10800044 	addi	r2,r2,1
  80f22c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80f230:	e0bffb17 	ldw	r2,-20(fp)
  80f234:	10800217 	ldw	r2,8(r2)
  80f238:	10c00044 	addi	r3,r2,1
  80f23c:	e0bffb17 	ldw	r2,-20(fp)
  80f240:	10c00215 	stw	r3,8(r2)
  80f244:	e0bffb17 	ldw	r2,-20(fp)
  80f248:	10800217 	ldw	r2,8(r2)
  80f24c:	10c00fcc 	andi	r3,r2,63
  80f250:	e0bffb17 	ldw	r2,-20(fp)
  80f254:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f258:	e0fff617 	ldw	r3,-40(fp)
  80f25c:	e0bffd17 	ldw	r2,-12(fp)
  80f260:	1880050e 	bge	r3,r2,80f278 <altera_avalon_uart_read+0xd4>
  80f264:	e0bffb17 	ldw	r2,-20(fp)
  80f268:	10c00217 	ldw	r3,8(r2)
  80f26c:	e0bffb17 	ldw	r2,-20(fp)
  80f270:	10800317 	ldw	r2,12(r2)
  80f274:	18bfdf1e 	bne	r3,r2,80f1f4 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f278:	e0bff617 	ldw	r2,-40(fp)
  80f27c:	1004c03a 	cmpne	r2,r2,zero
  80f280:	1000271e 	bne	r2,zero,80f320 <altera_avalon_uart_read+0x17c>
  80f284:	e0bffb17 	ldw	r2,-20(fp)
  80f288:	10c00217 	ldw	r3,8(r2)
  80f28c:	e0bffb17 	ldw	r2,-20(fp)
  80f290:	10800317 	ldw	r2,12(r2)
  80f294:	1880221e 	bne	r3,r2,80f320 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80f298:	e0bff917 	ldw	r2,-28(fp)
  80f29c:	1004c03a 	cmpne	r2,r2,zero
  80f2a0:	1000061e 	bne	r2,zero,80f2bc <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f2a4:	080f3d40 	call	80f3d4 <alt_get_errno>
  80f2a8:	00c002c4 	movi	r3,11
  80f2ac:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80f2b0:	00800044 	movi	r2,1
  80f2b4:	e0bff705 	stb	r2,-36(fp)
        break;
  80f2b8:	00001f06 	br	80f338 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2bc:	0005303a 	rdctl	r2,status
  80f2c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2c4:	e0fff517 	ldw	r3,-44(fp)
  80f2c8:	00bfff84 	movi	r2,-2
  80f2cc:	1884703a 	and	r2,r3,r2
  80f2d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2d4:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f2d8:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f2dc:	e0bffb17 	ldw	r2,-20(fp)
  80f2e0:	10800117 	ldw	r2,4(r2)
  80f2e4:	10c02014 	ori	r3,r2,128
  80f2e8:	e0bffb17 	ldw	r2,-20(fp)
  80f2ec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f2f0:	e0bffb17 	ldw	r2,-20(fp)
  80f2f4:	10800017 	ldw	r2,0(r2)
  80f2f8:	11000304 	addi	r4,r2,12
  80f2fc:	e0bffb17 	ldw	r2,-20(fp)
  80f300:	10800117 	ldw	r2,4(r2)
  80f304:	1007883a 	mov	r3,r2
  80f308:	2005883a 	mov	r2,r4
  80f30c:	10c00035 	stwio	r3,0(r2)
  80f310:	e0bffa17 	ldw	r2,-24(fp)
  80f314:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f318:	e0bff417 	ldw	r2,-48(fp)
  80f31c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f320:	e0bff617 	ldw	r2,-40(fp)
  80f324:	1004c03a 	cmpne	r2,r2,zero
  80f328:	1000031e 	bne	r2,zero,80f338 <altera_avalon_uart_read+0x194>
  80f32c:	e0bffd17 	ldw	r2,-12(fp)
  80f330:	1004c03a 	cmpne	r2,r2,zero
  80f334:	103fc81e 	bne	r2,zero,80f258 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f338:	0005303a 	rdctl	r2,status
  80f33c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f340:	e0fff317 	ldw	r3,-52(fp)
  80f344:	00bfff84 	movi	r2,-2
  80f348:	1884703a 	and	r2,r3,r2
  80f34c:	1001703a 	wrctl	status,r2
  
  return context;
  80f350:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f354:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f358:	e0bffb17 	ldw	r2,-20(fp)
  80f35c:	10800117 	ldw	r2,4(r2)
  80f360:	10c02014 	ori	r3,r2,128
  80f364:	e0bffb17 	ldw	r2,-20(fp)
  80f368:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f36c:	e0bffb17 	ldw	r2,-20(fp)
  80f370:	10800017 	ldw	r2,0(r2)
  80f374:	11000304 	addi	r4,r2,12
  80f378:	e0bffb17 	ldw	r2,-20(fp)
  80f37c:	10800117 	ldw	r2,4(r2)
  80f380:	1007883a 	mov	r3,r2
  80f384:	2005883a 	mov	r2,r4
  80f388:	10c00035 	stwio	r3,0(r2)
  80f38c:	e0bffa17 	ldw	r2,-24(fp)
  80f390:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f394:	e0bff217 	ldw	r2,-56(fp)
  80f398:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80f39c:	e0bff703 	ldbu	r2,-36(fp)
  80f3a0:	1005003a 	cmpeq	r2,r2,zero
  80f3a4:	1000031e 	bne	r2,zero,80f3b4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80f3a8:	00bffd04 	movi	r2,-12
  80f3ac:	e0bfff15 	stw	r2,-4(fp)
  80f3b0:	00000206 	br	80f3bc <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80f3b4:	e0bff617 	ldw	r2,-40(fp)
  80f3b8:	e0bfff15 	stw	r2,-4(fp)
  80f3bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80f3c0:	e037883a 	mov	sp,fp
  80f3c4:	dfc00117 	ldw	ra,4(sp)
  80f3c8:	df000017 	ldw	fp,0(sp)
  80f3cc:	dec00204 	addi	sp,sp,8
  80f3d0:	f800283a 	ret

0080f3d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f3d4:	defffd04 	addi	sp,sp,-12
  80f3d8:	dfc00215 	stw	ra,8(sp)
  80f3dc:	df000115 	stw	fp,4(sp)
  80f3e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f3e4:	00802074 	movhi	r2,129
  80f3e8:	108bc004 	addi	r2,r2,12032
  80f3ec:	10800017 	ldw	r2,0(r2)
  80f3f0:	1005003a 	cmpeq	r2,r2,zero
  80f3f4:	1000061e 	bne	r2,zero,80f410 <alt_get_errno+0x3c>
  80f3f8:	00802074 	movhi	r2,129
  80f3fc:	108bc004 	addi	r2,r2,12032
  80f400:	10800017 	ldw	r2,0(r2)
  80f404:	103ee83a 	callr	r2
  80f408:	e0bfff15 	stw	r2,-4(fp)
  80f40c:	00000306 	br	80f41c <alt_get_errno+0x48>
  80f410:	00802074 	movhi	r2,129
  80f414:	1092fb04 	addi	r2,r2,19436
  80f418:	e0bfff15 	stw	r2,-4(fp)
  80f41c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f420:	e037883a 	mov	sp,fp
  80f424:	dfc00117 	ldw	ra,4(sp)
  80f428:	df000017 	ldw	fp,0(sp)
  80f42c:	dec00204 	addi	sp,sp,8
  80f430:	f800283a 	ret

0080f434 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80f434:	defff204 	addi	sp,sp,-56
  80f438:	dfc00d15 	stw	ra,52(sp)
  80f43c:	df000c15 	stw	fp,48(sp)
  80f440:	df000c04 	addi	fp,sp,48
  80f444:	e13ffc15 	stw	r4,-16(fp)
  80f448:	e17ffd15 	stw	r5,-12(fp)
  80f44c:	e1bffe15 	stw	r6,-8(fp)
  80f450:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80f454:	e0bffe17 	ldw	r2,-8(fp)
  80f458:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f45c:	e0bfff17 	ldw	r2,-4(fp)
  80f460:	1090000c 	andi	r2,r2,16384
  80f464:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f468:	00004006 	br	80f56c <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f46c:	e0bffc17 	ldw	r2,-16(fp)
  80f470:	10800517 	ldw	r2,20(r2)
  80f474:	10800044 	addi	r2,r2,1
  80f478:	10800fcc 	andi	r2,r2,63
  80f47c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f480:	e0bffc17 	ldw	r2,-16(fp)
  80f484:	10c00417 	ldw	r3,16(r2)
  80f488:	e0bff917 	ldw	r2,-28(fp)
  80f48c:	1880251e 	bne	r3,r2,80f524 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80f490:	e0bffa17 	ldw	r2,-24(fp)
  80f494:	1005003a 	cmpeq	r2,r2,zero
  80f498:	1000051e 	bne	r2,zero,80f4b0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f49c:	080f5fc0 	call	80f5fc <alt_get_errno>
  80f4a0:	1007883a 	mov	r3,r2
  80f4a4:	008002c4 	movi	r2,11
  80f4a8:	18800015 	stw	r2,0(r3)
        break;
  80f4ac:	00003206 	br	80f578 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f4b0:	0005303a 	rdctl	r2,status
  80f4b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f4b8:	e0fff717 	ldw	r3,-36(fp)
  80f4bc:	00bfff84 	movi	r2,-2
  80f4c0:	1884703a 	and	r2,r3,r2
  80f4c4:	1001703a 	wrctl	status,r2
  
  return context;
  80f4c8:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f4cc:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f4d0:	e0bffc17 	ldw	r2,-16(fp)
  80f4d4:	10800117 	ldw	r2,4(r2)
  80f4d8:	10c11014 	ori	r3,r2,1088
  80f4dc:	e0bffc17 	ldw	r2,-16(fp)
  80f4e0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f4e4:	e0bffc17 	ldw	r2,-16(fp)
  80f4e8:	10800017 	ldw	r2,0(r2)
  80f4ec:	11000304 	addi	r4,r2,12
  80f4f0:	e0bffc17 	ldw	r2,-16(fp)
  80f4f4:	10800117 	ldw	r2,4(r2)
  80f4f8:	1007883a 	mov	r3,r2
  80f4fc:	2005883a 	mov	r2,r4
  80f500:	10c00035 	stwio	r3,0(r2)
  80f504:	e0bffb17 	ldw	r2,-20(fp)
  80f508:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f50c:	e0bff617 	ldw	r2,-40(fp)
  80f510:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f514:	e0bffc17 	ldw	r2,-16(fp)
  80f518:	10c00417 	ldw	r3,16(r2)
  80f51c:	e0bff917 	ldw	r2,-28(fp)
  80f520:	18bffc26 	beq	r3,r2,80f514 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80f524:	e0bff817 	ldw	r2,-32(fp)
  80f528:	10bfffc4 	addi	r2,r2,-1
  80f52c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f530:	e0bffc17 	ldw	r2,-16(fp)
  80f534:	10c00517 	ldw	r3,20(r2)
  80f538:	e0bffd17 	ldw	r2,-12(fp)
  80f53c:	10800003 	ldbu	r2,0(r2)
  80f540:	1009883a 	mov	r4,r2
  80f544:	e0bffc17 	ldw	r2,-16(fp)
  80f548:	1885883a 	add	r2,r3,r2
  80f54c:	10801704 	addi	r2,r2,92
  80f550:	11000005 	stb	r4,0(r2)
  80f554:	e0bffd17 	ldw	r2,-12(fp)
  80f558:	10800044 	addi	r2,r2,1
  80f55c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80f560:	e0fffc17 	ldw	r3,-16(fp)
  80f564:	e0bff917 	ldw	r2,-28(fp)
  80f568:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f56c:	e0bff817 	ldw	r2,-32(fp)
  80f570:	1004c03a 	cmpne	r2,r2,zero
  80f574:	103fbd1e 	bne	r2,zero,80f46c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f578:	0005303a 	rdctl	r2,status
  80f57c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f580:	e0fff517 	ldw	r3,-44(fp)
  80f584:	00bfff84 	movi	r2,-2
  80f588:	1884703a 	and	r2,r3,r2
  80f58c:	1001703a 	wrctl	status,r2
  
  return context;
  80f590:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f594:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f598:	e0bffc17 	ldw	r2,-16(fp)
  80f59c:	10800117 	ldw	r2,4(r2)
  80f5a0:	10c11014 	ori	r3,r2,1088
  80f5a4:	e0bffc17 	ldw	r2,-16(fp)
  80f5a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f5ac:	e0bffc17 	ldw	r2,-16(fp)
  80f5b0:	10800017 	ldw	r2,0(r2)
  80f5b4:	11000304 	addi	r4,r2,12
  80f5b8:	e0bffc17 	ldw	r2,-16(fp)
  80f5bc:	10800117 	ldw	r2,4(r2)
  80f5c0:	1007883a 	mov	r3,r2
  80f5c4:	2005883a 	mov	r2,r4
  80f5c8:	10c00035 	stwio	r3,0(r2)
  80f5cc:	e0bffb17 	ldw	r2,-20(fp)
  80f5d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5d4:	e0bff417 	ldw	r2,-48(fp)
  80f5d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f5dc:	e0fffe17 	ldw	r3,-8(fp)
  80f5e0:	e0bff817 	ldw	r2,-32(fp)
  80f5e4:	1885c83a 	sub	r2,r3,r2
}
  80f5e8:	e037883a 	mov	sp,fp
  80f5ec:	dfc00117 	ldw	ra,4(sp)
  80f5f0:	df000017 	ldw	fp,0(sp)
  80f5f4:	dec00204 	addi	sp,sp,8
  80f5f8:	f800283a 	ret

0080f5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f5fc:	defffd04 	addi	sp,sp,-12
  80f600:	dfc00215 	stw	ra,8(sp)
  80f604:	df000115 	stw	fp,4(sp)
  80f608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f60c:	00802074 	movhi	r2,129
  80f610:	108bc004 	addi	r2,r2,12032
  80f614:	10800017 	ldw	r2,0(r2)
  80f618:	1005003a 	cmpeq	r2,r2,zero
  80f61c:	1000061e 	bne	r2,zero,80f638 <alt_get_errno+0x3c>
  80f620:	00802074 	movhi	r2,129
  80f624:	108bc004 	addi	r2,r2,12032
  80f628:	10800017 	ldw	r2,0(r2)
  80f62c:	103ee83a 	callr	r2
  80f630:	e0bfff15 	stw	r2,-4(fp)
  80f634:	00000306 	br	80f644 <alt_get_errno+0x48>
  80f638:	00802074 	movhi	r2,129
  80f63c:	1092fb04 	addi	r2,r2,19436
  80f640:	e0bfff15 	stw	r2,-4(fp)
  80f644:	e0bfff17 	ldw	r2,-4(fp)
}
  80f648:	e037883a 	mov	sp,fp
  80f64c:	dfc00117 	ldw	ra,4(sp)
  80f650:	df000017 	ldw	fp,0(sp)
  80f654:	dec00204 	addi	sp,sp,8
  80f658:	f800283a 	ret

0080f65c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f65c:	defff404 	addi	sp,sp,-48
  80f660:	df000b15 	stw	fp,44(sp)
  80f664:	df000b04 	addi	fp,sp,44
  80f668:	e13ffb15 	stw	r4,-20(fp)
  80f66c:	e17ffc15 	stw	r5,-16(fp)
  80f670:	e1bffd15 	stw	r6,-12(fp)
  80f674:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f678:	e03ff915 	stw	zero,-28(fp)
  80f67c:	00802074 	movhi	r2,129
  80f680:	10930304 	addi	r2,r2,19468
  80f684:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80f688:	1005003a 	cmpeq	r2,r2,zero
  80f68c:	1000411e 	bne	r2,zero,80f794 <alt_alarm_start+0x138>
  {
    if (alarm)
  80f690:	e0bffb17 	ldw	r2,-20(fp)
  80f694:	1005003a 	cmpeq	r2,r2,zero
  80f698:	10003b1e 	bne	r2,zero,80f788 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80f69c:	e0fffb17 	ldw	r3,-20(fp)
  80f6a0:	e0bffd17 	ldw	r2,-12(fp)
  80f6a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80f6a8:	e0fffb17 	ldw	r3,-20(fp)
  80f6ac:	e0bffe17 	ldw	r2,-8(fp)
  80f6b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6b4:	0005303a 	rdctl	r2,status
  80f6b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6bc:	e0fff817 	ldw	r3,-32(fp)
  80f6c0:	00bfff84 	movi	r2,-2
  80f6c4:	1884703a 	and	r2,r3,r2
  80f6c8:	1001703a 	wrctl	status,r2
  
  return context;
  80f6cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80f6d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f6d4:	00802074 	movhi	r2,129
  80f6d8:	10930404 	addi	r2,r2,19472
  80f6dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80f6e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f6e4:	e0fffc17 	ldw	r3,-16(fp)
  80f6e8:	e0bff917 	ldw	r2,-28(fp)
  80f6ec:	1885883a 	add	r2,r3,r2
  80f6f0:	10c00044 	addi	r3,r2,1
  80f6f4:	e0bffb17 	ldw	r2,-20(fp)
  80f6f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f6fc:	e0bffb17 	ldw	r2,-20(fp)
  80f700:	10c00217 	ldw	r3,8(r2)
  80f704:	e0bff917 	ldw	r2,-28(fp)
  80f708:	1880042e 	bgeu	r3,r2,80f71c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80f70c:	e0fffb17 	ldw	r3,-20(fp)
  80f710:	00800044 	movi	r2,1
  80f714:	18800405 	stb	r2,16(r3)
  80f718:	00000206 	br	80f724 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80f71c:	e0bffb17 	ldw	r2,-20(fp)
  80f720:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f724:	e0fffb17 	ldw	r3,-20(fp)
  80f728:	00802074 	movhi	r2,129
  80f72c:	108bc304 	addi	r2,r2,12044
  80f730:	e0bff615 	stw	r2,-40(fp)
  80f734:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f738:	e0fff717 	ldw	r3,-36(fp)
  80f73c:	e0bff617 	ldw	r2,-40(fp)
  80f740:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80f744:	e0bff617 	ldw	r2,-40(fp)
  80f748:	10c00017 	ldw	r3,0(r2)
  80f74c:	e0bff717 	ldw	r2,-36(fp)
  80f750:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f754:	e0bff617 	ldw	r2,-40(fp)
  80f758:	10c00017 	ldw	r3,0(r2)
  80f75c:	e0bff717 	ldw	r2,-36(fp)
  80f760:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80f764:	e0fff617 	ldw	r3,-40(fp)
  80f768:	e0bff717 	ldw	r2,-36(fp)
  80f76c:	18800015 	stw	r2,0(r3)
  80f770:	e0bffa17 	ldw	r2,-24(fp)
  80f774:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f778:	e0bff517 	ldw	r2,-44(fp)
  80f77c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f780:	e03fff15 	stw	zero,-4(fp)
  80f784:	00000506 	br	80f79c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80f788:	00bffa84 	movi	r2,-22
  80f78c:	e0bfff15 	stw	r2,-4(fp)
  80f790:	00000206 	br	80f79c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80f794:	00bfde84 	movi	r2,-134
  80f798:	e0bfff15 	stw	r2,-4(fp)
  80f79c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80f7a0:	e037883a 	mov	sp,fp
  80f7a4:	df000017 	ldw	fp,0(sp)
  80f7a8:	dec00104 	addi	sp,sp,4
  80f7ac:	f800283a 	ret

0080f7b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f7b0:	defffe04 	addi	sp,sp,-8
  80f7b4:	df000115 	stw	fp,4(sp)
  80f7b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f7bc:	e03fff15 	stw	zero,-4(fp)
  80f7c0:	00000506 	br	80f7d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f7c4:	e0bfff17 	ldw	r2,-4(fp)
  80f7c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f7cc:	e0bfff17 	ldw	r2,-4(fp)
  80f7d0:	10800804 	addi	r2,r2,32
  80f7d4:	e0bfff15 	stw	r2,-4(fp)
  80f7d8:	e0bfff17 	ldw	r2,-4(fp)
  80f7dc:	10820030 	cmpltui	r2,r2,2048
  80f7e0:	103ff81e 	bne	r2,zero,80f7c4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f7e4:	e037883a 	mov	sp,fp
  80f7e8:	df000017 	ldw	fp,0(sp)
  80f7ec:	dec00104 	addi	sp,sp,4
  80f7f0:	f800283a 	ret

0080f7f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f7f4:	defff904 	addi	sp,sp,-28
  80f7f8:	dfc00615 	stw	ra,24(sp)
  80f7fc:	df000515 	stw	fp,20(sp)
  80f800:	df000504 	addi	fp,sp,20
  80f804:	e13ffd15 	stw	r4,-12(fp)
  80f808:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f80c:	e0bffd17 	ldw	r2,-12(fp)
  80f810:	1005003a 	cmpeq	r2,r2,zero
  80f814:	1000041e 	bne	r2,zero,80f828 <alt_dev_llist_insert+0x34>
  80f818:	e0bffd17 	ldw	r2,-12(fp)
  80f81c:	10800217 	ldw	r2,8(r2)
  80f820:	1004c03a 	cmpne	r2,r2,zero
  80f824:	1000071e 	bne	r2,zero,80f844 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80f828:	080f8a80 	call	80f8a8 <alt_get_errno>
  80f82c:	1007883a 	mov	r3,r2
  80f830:	00800584 	movi	r2,22
  80f834:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f838:	00bffa84 	movi	r2,-22
  80f83c:	e0bfff15 	stw	r2,-4(fp)
  80f840:	00001306 	br	80f890 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80f844:	e0fffd17 	ldw	r3,-12(fp)
  80f848:	e0bffe17 	ldw	r2,-8(fp)
  80f84c:	e0bffb15 	stw	r2,-20(fp)
  80f850:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f854:	e0fffc17 	ldw	r3,-16(fp)
  80f858:	e0bffb17 	ldw	r2,-20(fp)
  80f85c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80f860:	e0bffb17 	ldw	r2,-20(fp)
  80f864:	10c00017 	ldw	r3,0(r2)
  80f868:	e0bffc17 	ldw	r2,-16(fp)
  80f86c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f870:	e0bffb17 	ldw	r2,-20(fp)
  80f874:	10c00017 	ldw	r3,0(r2)
  80f878:	e0bffc17 	ldw	r2,-16(fp)
  80f87c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80f880:	e0fffb17 	ldw	r3,-20(fp)
  80f884:	e0bffc17 	ldw	r2,-16(fp)
  80f888:	18800015 	stw	r2,0(r3)

  return 0;  
  80f88c:	e03fff15 	stw	zero,-4(fp)
  80f890:	e0bfff17 	ldw	r2,-4(fp)
}
  80f894:	e037883a 	mov	sp,fp
  80f898:	dfc00117 	ldw	ra,4(sp)
  80f89c:	df000017 	ldw	fp,0(sp)
  80f8a0:	dec00204 	addi	sp,sp,8
  80f8a4:	f800283a 	ret

0080f8a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f8a8:	defffd04 	addi	sp,sp,-12
  80f8ac:	dfc00215 	stw	ra,8(sp)
  80f8b0:	df000115 	stw	fp,4(sp)
  80f8b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f8b8:	00802074 	movhi	r2,129
  80f8bc:	108bc004 	addi	r2,r2,12032
  80f8c0:	10800017 	ldw	r2,0(r2)
  80f8c4:	1005003a 	cmpeq	r2,r2,zero
  80f8c8:	1000061e 	bne	r2,zero,80f8e4 <alt_get_errno+0x3c>
  80f8cc:	00802074 	movhi	r2,129
  80f8d0:	108bc004 	addi	r2,r2,12032
  80f8d4:	10800017 	ldw	r2,0(r2)
  80f8d8:	103ee83a 	callr	r2
  80f8dc:	e0bfff15 	stw	r2,-4(fp)
  80f8e0:	00000306 	br	80f8f0 <alt_get_errno+0x48>
  80f8e4:	00802074 	movhi	r2,129
  80f8e8:	1092fb04 	addi	r2,r2,19436
  80f8ec:	e0bfff15 	stw	r2,-4(fp)
  80f8f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f8f4:	e037883a 	mov	sp,fp
  80f8f8:	dfc00117 	ldw	ra,4(sp)
  80f8fc:	df000017 	ldw	fp,0(sp)
  80f900:	dec00204 	addi	sp,sp,8
  80f904:	f800283a 	ret

0080f908 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f908:	defffd04 	addi	sp,sp,-12
  80f90c:	dfc00215 	stw	ra,8(sp)
  80f910:	df000115 	stw	fp,4(sp)
  80f914:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f918:	00bfff04 	movi	r2,-4
  80f91c:	00c02074 	movhi	r3,129
  80f920:	18c27404 	addi	r3,r3,2512
  80f924:	1885883a 	add	r2,r3,r2
  80f928:	e0bfff15 	stw	r2,-4(fp)
  80f92c:	00000606 	br	80f948 <_do_ctors+0x40>
        (*ctor) (); 
  80f930:	e0bfff17 	ldw	r2,-4(fp)
  80f934:	10800017 	ldw	r2,0(r2)
  80f938:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f93c:	e0bfff17 	ldw	r2,-4(fp)
  80f940:	10bfff04 	addi	r2,r2,-4
  80f944:	e0bfff15 	stw	r2,-4(fp)
  80f948:	e0ffff17 	ldw	r3,-4(fp)
  80f94c:	00802074 	movhi	r2,129
  80f950:	10827304 	addi	r2,r2,2508
  80f954:	18bff62e 	bgeu	r3,r2,80f930 <_do_ctors+0x28>
        (*ctor) (); 
}
  80f958:	e037883a 	mov	sp,fp
  80f95c:	dfc00117 	ldw	ra,4(sp)
  80f960:	df000017 	ldw	fp,0(sp)
  80f964:	dec00204 	addi	sp,sp,8
  80f968:	f800283a 	ret

0080f96c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f96c:	defffd04 	addi	sp,sp,-12
  80f970:	dfc00215 	stw	ra,8(sp)
  80f974:	df000115 	stw	fp,4(sp)
  80f978:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f97c:	00bfff04 	movi	r2,-4
  80f980:	00c02074 	movhi	r3,129
  80f984:	18c27404 	addi	r3,r3,2512
  80f988:	1885883a 	add	r2,r3,r2
  80f98c:	e0bfff15 	stw	r2,-4(fp)
  80f990:	00000606 	br	80f9ac <_do_dtors+0x40>
        (*dtor) (); 
  80f994:	e0bfff17 	ldw	r2,-4(fp)
  80f998:	10800017 	ldw	r2,0(r2)
  80f99c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f9a0:	e0bfff17 	ldw	r2,-4(fp)
  80f9a4:	10bfff04 	addi	r2,r2,-4
  80f9a8:	e0bfff15 	stw	r2,-4(fp)
  80f9ac:	e0ffff17 	ldw	r3,-4(fp)
  80f9b0:	00802074 	movhi	r2,129
  80f9b4:	10827404 	addi	r2,r2,2512
  80f9b8:	18bff62e 	bgeu	r3,r2,80f994 <_do_dtors+0x28>
        (*dtor) (); 
}
  80f9bc:	e037883a 	mov	sp,fp
  80f9c0:	dfc00117 	ldw	ra,4(sp)
  80f9c4:	df000017 	ldw	fp,0(sp)
  80f9c8:	dec00204 	addi	sp,sp,8
  80f9cc:	f800283a 	ret

0080f9d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f9d0:	defffe04 	addi	sp,sp,-8
  80f9d4:	dfc00115 	stw	ra,4(sp)
  80f9d8:	df000015 	stw	fp,0(sp)
  80f9dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f9e0:	0009883a 	mov	r4,zero
  80f9e4:	01440004 	movi	r5,4096
  80f9e8:	08104fc0 	call	8104fc <alt_icache_flush>
#endif
}
  80f9ec:	e037883a 	mov	sp,fp
  80f9f0:	dfc00117 	ldw	ra,4(sp)
  80f9f4:	df000017 	ldw	fp,0(sp)
  80f9f8:	dec00204 	addi	sp,sp,8
  80f9fc:	f800283a 	ret

0080fa00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80fa00:	defff904 	addi	sp,sp,-28
  80fa04:	dfc00615 	stw	ra,24(sp)
  80fa08:	df000515 	stw	fp,20(sp)
  80fa0c:	df000504 	addi	fp,sp,20
  80fa10:	e13ffc15 	stw	r4,-16(fp)
  80fa14:	e17ffd15 	stw	r5,-12(fp)
  80fa18:	e1bffe15 	stw	r6,-8(fp)
  80fa1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80fa20:	e0800217 	ldw	r2,8(fp)
  80fa24:	d8800015 	stw	r2,0(sp)
  80fa28:	e13ffc17 	ldw	r4,-16(fp)
  80fa2c:	e17ffd17 	ldw	r5,-12(fp)
  80fa30:	e1bffe17 	ldw	r6,-8(fp)
  80fa34:	e1ffff17 	ldw	r7,-4(fp)
  80fa38:	080fbd40 	call	80fbd4 <alt_iic_isr_register>
}  
  80fa3c:	e037883a 	mov	sp,fp
  80fa40:	dfc00117 	ldw	ra,4(sp)
  80fa44:	df000017 	ldw	fp,0(sp)
  80fa48:	dec00204 	addi	sp,sp,8
  80fa4c:	f800283a 	ret

0080fa50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80fa50:	defff904 	addi	sp,sp,-28
  80fa54:	df000615 	stw	fp,24(sp)
  80fa58:	df000604 	addi	fp,sp,24
  80fa5c:	e13ffe15 	stw	r4,-8(fp)
  80fa60:	e17fff15 	stw	r5,-4(fp)
  80fa64:	e0bfff17 	ldw	r2,-4(fp)
  80fa68:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa6c:	0005303a 	rdctl	r2,status
  80fa70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa74:	e0fffb17 	ldw	r3,-20(fp)
  80fa78:	00bfff84 	movi	r2,-2
  80fa7c:	1884703a 	and	r2,r3,r2
  80fa80:	1001703a 	wrctl	status,r2
  
  return context;
  80fa84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fa88:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80fa8c:	e0fffc17 	ldw	r3,-16(fp)
  80fa90:	00800044 	movi	r2,1
  80fa94:	10c4983a 	sll	r2,r2,r3
  80fa98:	1007883a 	mov	r3,r2
  80fa9c:	00802074 	movhi	r2,129
  80faa0:	1092ff04 	addi	r2,r2,19452
  80faa4:	10800017 	ldw	r2,0(r2)
  80faa8:	1886b03a 	or	r3,r3,r2
  80faac:	00802074 	movhi	r2,129
  80fab0:	1092ff04 	addi	r2,r2,19452
  80fab4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fab8:	00802074 	movhi	r2,129
  80fabc:	1092ff04 	addi	r2,r2,19452
  80fac0:	10800017 	ldw	r2,0(r2)
  80fac4:	100170fa 	wrctl	ienable,r2
  80fac8:	e0bffd17 	ldw	r2,-12(fp)
  80facc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fad0:	e0bffa17 	ldw	r2,-24(fp)
  80fad4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fad8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80fadc:	e037883a 	mov	sp,fp
  80fae0:	df000017 	ldw	fp,0(sp)
  80fae4:	dec00104 	addi	sp,sp,4
  80fae8:	f800283a 	ret

0080faec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80faec:	defff904 	addi	sp,sp,-28
  80faf0:	df000615 	stw	fp,24(sp)
  80faf4:	df000604 	addi	fp,sp,24
  80faf8:	e13ffe15 	stw	r4,-8(fp)
  80fafc:	e17fff15 	stw	r5,-4(fp)
  80fb00:	e0bfff17 	ldw	r2,-4(fp)
  80fb04:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb08:	0005303a 	rdctl	r2,status
  80fb0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb10:	e0fffb17 	ldw	r3,-20(fp)
  80fb14:	00bfff84 	movi	r2,-2
  80fb18:	1884703a 	and	r2,r3,r2
  80fb1c:	1001703a 	wrctl	status,r2
  
  return context;
  80fb20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fb24:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80fb28:	e0fffc17 	ldw	r3,-16(fp)
  80fb2c:	00800044 	movi	r2,1
  80fb30:	10c4983a 	sll	r2,r2,r3
  80fb34:	0084303a 	nor	r2,zero,r2
  80fb38:	1007883a 	mov	r3,r2
  80fb3c:	00802074 	movhi	r2,129
  80fb40:	1092ff04 	addi	r2,r2,19452
  80fb44:	10800017 	ldw	r2,0(r2)
  80fb48:	1886703a 	and	r3,r3,r2
  80fb4c:	00802074 	movhi	r2,129
  80fb50:	1092ff04 	addi	r2,r2,19452
  80fb54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fb58:	00802074 	movhi	r2,129
  80fb5c:	1092ff04 	addi	r2,r2,19452
  80fb60:	10800017 	ldw	r2,0(r2)
  80fb64:	100170fa 	wrctl	ienable,r2
  80fb68:	e0bffd17 	ldw	r2,-12(fp)
  80fb6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb70:	e0bffa17 	ldw	r2,-24(fp)
  80fb74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fb78:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80fb7c:	e037883a 	mov	sp,fp
  80fb80:	df000017 	ldw	fp,0(sp)
  80fb84:	dec00104 	addi	sp,sp,4
  80fb88:	f800283a 	ret

0080fb8c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80fb8c:	defffc04 	addi	sp,sp,-16
  80fb90:	df000315 	stw	fp,12(sp)
  80fb94:	df000304 	addi	fp,sp,12
  80fb98:	e13ffe15 	stw	r4,-8(fp)
  80fb9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80fba0:	000530fa 	rdctl	r2,ienable
  80fba4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80fba8:	e0ffff17 	ldw	r3,-4(fp)
  80fbac:	00800044 	movi	r2,1
  80fbb0:	10c4983a 	sll	r2,r2,r3
  80fbb4:	1007883a 	mov	r3,r2
  80fbb8:	e0bffd17 	ldw	r2,-12(fp)
  80fbbc:	1884703a 	and	r2,r3,r2
  80fbc0:	1004c03a 	cmpne	r2,r2,zero
}
  80fbc4:	e037883a 	mov	sp,fp
  80fbc8:	df000017 	ldw	fp,0(sp)
  80fbcc:	dec00104 	addi	sp,sp,4
  80fbd0:	f800283a 	ret

0080fbd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80fbd4:	defff404 	addi	sp,sp,-48
  80fbd8:	dfc00b15 	stw	ra,44(sp)
  80fbdc:	df000a15 	stw	fp,40(sp)
  80fbe0:	df000a04 	addi	fp,sp,40
  80fbe4:	e13ffb15 	stw	r4,-20(fp)
  80fbe8:	e17ffc15 	stw	r5,-16(fp)
  80fbec:	e1bffd15 	stw	r6,-12(fp)
  80fbf0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80fbf4:	00bffa84 	movi	r2,-22
  80fbf8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80fbfc:	e0bffc17 	ldw	r2,-16(fp)
  80fc00:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80fc04:	e0bff917 	ldw	r2,-28(fp)
  80fc08:	10800808 	cmpgei	r2,r2,32
  80fc0c:	1000291e 	bne	r2,zero,80fcb4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc10:	0005303a 	rdctl	r2,status
  80fc14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc18:	e0fff717 	ldw	r3,-36(fp)
  80fc1c:	00bfff84 	movi	r2,-2
  80fc20:	1884703a 	and	r2,r3,r2
  80fc24:	1001703a 	wrctl	status,r2
  
  return context;
  80fc28:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80fc2c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80fc30:	e0bff917 	ldw	r2,-28(fp)
  80fc34:	00c02074 	movhi	r3,129
  80fc38:	18d50f04 	addi	r3,r3,21564
  80fc3c:	100490fa 	slli	r2,r2,3
  80fc40:	10c7883a 	add	r3,r2,r3
  80fc44:	e0bffd17 	ldw	r2,-12(fp)
  80fc48:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80fc4c:	e0bff917 	ldw	r2,-28(fp)
  80fc50:	00c02074 	movhi	r3,129
  80fc54:	18d50f04 	addi	r3,r3,21564
  80fc58:	100490fa 	slli	r2,r2,3
  80fc5c:	10c5883a 	add	r2,r2,r3
  80fc60:	10c00104 	addi	r3,r2,4
  80fc64:	e0bffe17 	ldw	r2,-8(fp)
  80fc68:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80fc6c:	e0bffd17 	ldw	r2,-12(fp)
  80fc70:	1005003a 	cmpeq	r2,r2,zero
  80fc74:	1000051e 	bne	r2,zero,80fc8c <alt_iic_isr_register+0xb8>
  80fc78:	e17ff917 	ldw	r5,-28(fp)
  80fc7c:	e13ffb17 	ldw	r4,-20(fp)
  80fc80:	080fa500 	call	80fa50 <alt_ic_irq_enable>
  80fc84:	e0bfff15 	stw	r2,-4(fp)
  80fc88:	00000406 	br	80fc9c <alt_iic_isr_register+0xc8>
  80fc8c:	e17ff917 	ldw	r5,-28(fp)
  80fc90:	e13ffb17 	ldw	r4,-20(fp)
  80fc94:	080faec0 	call	80faec <alt_ic_irq_disable>
  80fc98:	e0bfff15 	stw	r2,-4(fp)
  80fc9c:	e0bfff17 	ldw	r2,-4(fp)
  80fca0:	e0bffa15 	stw	r2,-24(fp)
  80fca4:	e0bff817 	ldw	r2,-32(fp)
  80fca8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fcac:	e0bff617 	ldw	r2,-40(fp)
  80fcb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80fcb4:	e0bffa17 	ldw	r2,-24(fp)
}
  80fcb8:	e037883a 	mov	sp,fp
  80fcbc:	dfc00117 	ldw	ra,4(sp)
  80fcc0:	df000017 	ldw	fp,0(sp)
  80fcc4:	dec00204 	addi	sp,sp,8
  80fcc8:	f800283a 	ret

0080fccc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80fccc:	defff904 	addi	sp,sp,-28
  80fcd0:	dfc00615 	stw	ra,24(sp)
  80fcd4:	df000515 	stw	fp,20(sp)
  80fcd8:	df000504 	addi	fp,sp,20
  80fcdc:	e13ffc15 	stw	r4,-16(fp)
  80fce0:	e17ffd15 	stw	r5,-12(fp)
  80fce4:	e1bffe15 	stw	r6,-8(fp)
  80fce8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80fcec:	e13ffd17 	ldw	r4,-12(fp)
  80fcf0:	e17ffe17 	ldw	r5,-8(fp)
  80fcf4:	e1bfff17 	ldw	r6,-4(fp)
  80fcf8:	080fee40 	call	80fee4 <open>
  80fcfc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80fd00:	e0bffb17 	ldw	r2,-20(fp)
  80fd04:	1004803a 	cmplt	r2,r2,zero
  80fd08:	10001c1e 	bne	r2,zero,80fd7c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80fd0c:	e0bffb17 	ldw	r2,-20(fp)
  80fd10:	00c02074 	movhi	r3,129
  80fd14:	18c6a604 	addi	r3,r3,6808
  80fd18:	10800324 	muli	r2,r2,12
  80fd1c:	10c5883a 	add	r2,r2,r3
  80fd20:	10c00017 	ldw	r3,0(r2)
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80fd2c:	e0bffb17 	ldw	r2,-20(fp)
  80fd30:	00c02074 	movhi	r3,129
  80fd34:	18c6a604 	addi	r3,r3,6808
  80fd38:	10800324 	muli	r2,r2,12
  80fd3c:	10c5883a 	add	r2,r2,r3
  80fd40:	10800104 	addi	r2,r2,4
  80fd44:	10c00017 	ldw	r3,0(r2)
  80fd48:	e0bffc17 	ldw	r2,-16(fp)
  80fd4c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80fd50:	e0bffb17 	ldw	r2,-20(fp)
  80fd54:	00c02074 	movhi	r3,129
  80fd58:	18c6a604 	addi	r3,r3,6808
  80fd5c:	10800324 	muli	r2,r2,12
  80fd60:	10c5883a 	add	r2,r2,r3
  80fd64:	10800204 	addi	r2,r2,8
  80fd68:	10c00017 	ldw	r3,0(r2)
  80fd6c:	e0bffc17 	ldw	r2,-16(fp)
  80fd70:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80fd74:	e13ffb17 	ldw	r4,-20(fp)
  80fd78:	080dc5c0 	call	80dc5c <alt_release_fd>
  }
} 
  80fd7c:	e037883a 	mov	sp,fp
  80fd80:	dfc00117 	ldw	ra,4(sp)
  80fd84:	df000017 	ldw	fp,0(sp)
  80fd88:	dec00204 	addi	sp,sp,8
  80fd8c:	f800283a 	ret

0080fd90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80fd90:	defffb04 	addi	sp,sp,-20
  80fd94:	dfc00415 	stw	ra,16(sp)
  80fd98:	df000315 	stw	fp,12(sp)
  80fd9c:	df000304 	addi	fp,sp,12
  80fda0:	e13ffd15 	stw	r4,-12(fp)
  80fda4:	e17ffe15 	stw	r5,-8(fp)
  80fda8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80fdac:	01002074 	movhi	r4,129
  80fdb0:	2106a904 	addi	r4,r4,6820
  80fdb4:	e17ffd17 	ldw	r5,-12(fp)
  80fdb8:	01800044 	movi	r6,1
  80fdbc:	01c07fc4 	movi	r7,511
  80fdc0:	080fccc0 	call	80fccc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80fdc4:	01002074 	movhi	r4,129
  80fdc8:	2106a604 	addi	r4,r4,6808
  80fdcc:	e17ffe17 	ldw	r5,-8(fp)
  80fdd0:	000d883a 	mov	r6,zero
  80fdd4:	01c07fc4 	movi	r7,511
  80fdd8:	080fccc0 	call	80fccc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80fddc:	01002074 	movhi	r4,129
  80fde0:	2106ac04 	addi	r4,r4,6832
  80fde4:	e17fff17 	ldw	r5,-4(fp)
  80fde8:	01800044 	movi	r6,1
  80fdec:	01c07fc4 	movi	r7,511
  80fdf0:	080fccc0 	call	80fccc <alt_open_fd>
}  
  80fdf4:	e037883a 	mov	sp,fp
  80fdf8:	dfc00117 	ldw	ra,4(sp)
  80fdfc:	df000017 	ldw	fp,0(sp)
  80fe00:	dec00204 	addi	sp,sp,8
  80fe04:	f800283a 	ret

0080fe08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80fe08:	defffc04 	addi	sp,sp,-16
  80fe0c:	df000315 	stw	fp,12(sp)
  80fe10:	df000304 	addi	fp,sp,12
  80fe14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80fe18:	e0bffe17 	ldw	r2,-8(fp)
  80fe1c:	10800217 	ldw	r2,8(r2)
  80fe20:	10d00034 	orhi	r3,r2,16384
  80fe24:	e0bffe17 	ldw	r2,-8(fp)
  80fe28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fe2c:	e03ffd15 	stw	zero,-12(fp)
  80fe30:	00002006 	br	80feb4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80fe34:	e0bffd17 	ldw	r2,-12(fp)
  80fe38:	00c02074 	movhi	r3,129
  80fe3c:	18c6a604 	addi	r3,r3,6808
  80fe40:	10800324 	muli	r2,r2,12
  80fe44:	10c5883a 	add	r2,r2,r3
  80fe48:	10c00017 	ldw	r3,0(r2)
  80fe4c:	e0bffe17 	ldw	r2,-8(fp)
  80fe50:	10800017 	ldw	r2,0(r2)
  80fe54:	1880141e 	bne	r3,r2,80fea8 <alt_file_locked+0xa0>
  80fe58:	e0bffd17 	ldw	r2,-12(fp)
  80fe5c:	00c02074 	movhi	r3,129
  80fe60:	18c6a604 	addi	r3,r3,6808
  80fe64:	10800324 	muli	r2,r2,12
  80fe68:	10c5883a 	add	r2,r2,r3
  80fe6c:	10800204 	addi	r2,r2,8
  80fe70:	10800017 	ldw	r2,0(r2)
  80fe74:	1004403a 	cmpge	r2,r2,zero
  80fe78:	10000b1e 	bne	r2,zero,80fea8 <alt_file_locked+0xa0>
  80fe7c:	e0bffd17 	ldw	r2,-12(fp)
  80fe80:	10800324 	muli	r2,r2,12
  80fe84:	1007883a 	mov	r3,r2
  80fe88:	00802074 	movhi	r2,129
  80fe8c:	1086a604 	addi	r2,r2,6808
  80fe90:	1887883a 	add	r3,r3,r2
  80fe94:	e0bffe17 	ldw	r2,-8(fp)
  80fe98:	18800326 	beq	r3,r2,80fea8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80fe9c:	00bffcc4 	movi	r2,-13
  80fea0:	e0bfff15 	stw	r2,-4(fp)
  80fea4:	00000a06 	br	80fed0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fea8:	e0bffd17 	ldw	r2,-12(fp)
  80feac:	10800044 	addi	r2,r2,1
  80feb0:	e0bffd15 	stw	r2,-12(fp)
  80feb4:	00802074 	movhi	r2,129
  80feb8:	108bbf04 	addi	r2,r2,12028
  80febc:	10800017 	ldw	r2,0(r2)
  80fec0:	1007883a 	mov	r3,r2
  80fec4:	e0bffd17 	ldw	r2,-12(fp)
  80fec8:	18bfda2e 	bgeu	r3,r2,80fe34 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80fecc:	e03fff15 	stw	zero,-4(fp)
  80fed0:	e0bfff17 	ldw	r2,-4(fp)
}
  80fed4:	e037883a 	mov	sp,fp
  80fed8:	df000017 	ldw	fp,0(sp)
  80fedc:	dec00104 	addi	sp,sp,4
  80fee0:	f800283a 	ret

0080fee4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80fee4:	defff404 	addi	sp,sp,-48
  80fee8:	dfc00b15 	stw	ra,44(sp)
  80feec:	df000a15 	stw	fp,40(sp)
  80fef0:	df000a04 	addi	fp,sp,40
  80fef4:	e13ffb15 	stw	r4,-20(fp)
  80fef8:	e17ffc15 	stw	r5,-16(fp)
  80fefc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80ff00:	00bfffc4 	movi	r2,-1
  80ff04:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80ff08:	00bffb44 	movi	r2,-19
  80ff0c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80ff10:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80ff14:	e13ffb17 	ldw	r4,-20(fp)
  80ff18:	01402074 	movhi	r5,129
  80ff1c:	294bbd04 	addi	r5,r5,12020
  80ff20:	08102900 	call	810290 <alt_find_dev>
  80ff24:	e0bffa15 	stw	r2,-24(fp)
  80ff28:	e0bffa17 	ldw	r2,-24(fp)
  80ff2c:	1004c03a 	cmpne	r2,r2,zero
  80ff30:	1000051e 	bne	r2,zero,80ff48 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80ff34:	e13ffb17 	ldw	r4,-20(fp)
  80ff38:	08103240 	call	810324 <alt_find_file>
  80ff3c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80ff40:	00800044 	movi	r2,1
  80ff44:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80ff48:	e0bffa17 	ldw	r2,-24(fp)
  80ff4c:	1005003a 	cmpeq	r2,r2,zero
  80ff50:	1000301e 	bne	r2,zero,810014 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80ff54:	e13ffa17 	ldw	r4,-24(fp)
  80ff58:	08104440 	call	810444 <alt_get_fd>
  80ff5c:	e0bff815 	stw	r2,-32(fp)
  80ff60:	e0bff817 	ldw	r2,-32(fp)
  80ff64:	1004403a 	cmpge	r2,r2,zero
  80ff68:	1000031e 	bne	r2,zero,80ff78 <open+0x94>
    {
      status = index;
  80ff6c:	e0bff817 	ldw	r2,-32(fp)
  80ff70:	e0bff715 	stw	r2,-36(fp)
  80ff74:	00002906 	br	81001c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80ff78:	e0bff817 	ldw	r2,-32(fp)
  80ff7c:	10800324 	muli	r2,r2,12
  80ff80:	1007883a 	mov	r3,r2
  80ff84:	00802074 	movhi	r2,129
  80ff88:	1086a604 	addi	r2,r2,6808
  80ff8c:	1885883a 	add	r2,r3,r2
  80ff90:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80ff94:	e0fffc17 	ldw	r3,-16(fp)
  80ff98:	00900034 	movhi	r2,16384
  80ff9c:	10bfffc4 	addi	r2,r2,-1
  80ffa0:	1886703a 	and	r3,r3,r2
  80ffa4:	e0bff917 	ldw	r2,-28(fp)
  80ffa8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80ffac:	e0bff617 	ldw	r2,-40(fp)
  80ffb0:	1004c03a 	cmpne	r2,r2,zero
  80ffb4:	1000061e 	bne	r2,zero,80ffd0 <open+0xec>
  80ffb8:	e13ff917 	ldw	r4,-28(fp)
  80ffbc:	080fe080 	call	80fe08 <alt_file_locked>
  80ffc0:	e0bff715 	stw	r2,-36(fp)
  80ffc4:	e0bff717 	ldw	r2,-36(fp)
  80ffc8:	1004803a 	cmplt	r2,r2,zero
  80ffcc:	1000131e 	bne	r2,zero,81001c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80ffd0:	e0bffa17 	ldw	r2,-24(fp)
  80ffd4:	10800317 	ldw	r2,12(r2)
  80ffd8:	1005003a 	cmpeq	r2,r2,zero
  80ffdc:	1000091e 	bne	r2,zero,810004 <open+0x120>
  80ffe0:	e0bffa17 	ldw	r2,-24(fp)
  80ffe4:	10800317 	ldw	r2,12(r2)
  80ffe8:	e13ff917 	ldw	r4,-28(fp)
  80ffec:	e17ffb17 	ldw	r5,-20(fp)
  80fff0:	e1bffc17 	ldw	r6,-16(fp)
  80fff4:	e1fffd17 	ldw	r7,-12(fp)
  80fff8:	103ee83a 	callr	r2
  80fffc:	e0bfff15 	stw	r2,-4(fp)
  810000:	00000106 	br	810008 <open+0x124>
  810004:	e03fff15 	stw	zero,-4(fp)
  810008:	e0bfff17 	ldw	r2,-4(fp)
  81000c:	e0bff715 	stw	r2,-36(fp)
  810010:	00000206 	br	81001c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810014:	00bffb44 	movi	r2,-19
  810018:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81001c:	e0bff717 	ldw	r2,-36(fp)
  810020:	1004403a 	cmpge	r2,r2,zero
  810024:	1000091e 	bne	r2,zero,81004c <open+0x168>
  {
    alt_release_fd (index);  
  810028:	e13ff817 	ldw	r4,-32(fp)
  81002c:	080dc5c0 	call	80dc5c <alt_release_fd>
    ALT_ERRNO = -status;
  810030:	081006c0 	call	81006c <alt_get_errno>
  810034:	e0fff717 	ldw	r3,-36(fp)
  810038:	00c7c83a 	sub	r3,zero,r3
  81003c:	10c00015 	stw	r3,0(r2)
    return -1;
  810040:	00bfffc4 	movi	r2,-1
  810044:	e0bffe15 	stw	r2,-8(fp)
  810048:	00000206 	br	810054 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  81004c:	e0bff817 	ldw	r2,-32(fp)
  810050:	e0bffe15 	stw	r2,-8(fp)
  810054:	e0bffe17 	ldw	r2,-8(fp)
}
  810058:	e037883a 	mov	sp,fp
  81005c:	dfc00117 	ldw	ra,4(sp)
  810060:	df000017 	ldw	fp,0(sp)
  810064:	dec00204 	addi	sp,sp,8
  810068:	f800283a 	ret

0081006c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81006c:	defffd04 	addi	sp,sp,-12
  810070:	dfc00215 	stw	ra,8(sp)
  810074:	df000115 	stw	fp,4(sp)
  810078:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81007c:	00802074 	movhi	r2,129
  810080:	108bc004 	addi	r2,r2,12032
  810084:	10800017 	ldw	r2,0(r2)
  810088:	1005003a 	cmpeq	r2,r2,zero
  81008c:	1000061e 	bne	r2,zero,8100a8 <alt_get_errno+0x3c>
  810090:	00802074 	movhi	r2,129
  810094:	108bc004 	addi	r2,r2,12032
  810098:	10800017 	ldw	r2,0(r2)
  81009c:	103ee83a 	callr	r2
  8100a0:	e0bfff15 	stw	r2,-4(fp)
  8100a4:	00000306 	br	8100b4 <alt_get_errno+0x48>
  8100a8:	00802074 	movhi	r2,129
  8100ac:	1092fb04 	addi	r2,r2,19436
  8100b0:	e0bfff15 	stw	r2,-4(fp)
  8100b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8100b8:	e037883a 	mov	sp,fp
  8100bc:	dfc00117 	ldw	ra,4(sp)
  8100c0:	df000017 	ldw	fp,0(sp)
  8100c4:	dec00204 	addi	sp,sp,8
  8100c8:	f800283a 	ret

008100cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8100cc:	defffa04 	addi	sp,sp,-24
  8100d0:	df000515 	stw	fp,20(sp)
  8100d4:	df000504 	addi	fp,sp,20
  8100d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8100dc:	0005303a 	rdctl	r2,status
  8100e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8100e4:	e0fffd17 	ldw	r3,-12(fp)
  8100e8:	00bfff84 	movi	r2,-2
  8100ec:	1884703a 	and	r2,r3,r2
  8100f0:	1001703a 	wrctl	status,r2
  
  return context;
  8100f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8100f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8100fc:	e0bfff17 	ldw	r2,-4(fp)
  810100:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  810104:	e0bffc17 	ldw	r2,-16(fp)
  810108:	10c00017 	ldw	r3,0(r2)
  81010c:	e0bffc17 	ldw	r2,-16(fp)
  810110:	10800117 	ldw	r2,4(r2)
  810114:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  810118:	e0bffc17 	ldw	r2,-16(fp)
  81011c:	10c00117 	ldw	r3,4(r2)
  810120:	e0bffc17 	ldw	r2,-16(fp)
  810124:	10800017 	ldw	r2,0(r2)
  810128:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81012c:	e0fffc17 	ldw	r3,-16(fp)
  810130:	e0bffc17 	ldw	r2,-16(fp)
  810134:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  810138:	e0fffc17 	ldw	r3,-16(fp)
  81013c:	e0bffc17 	ldw	r2,-16(fp)
  810140:	18800015 	stw	r2,0(r3)
  810144:	e0bffe17 	ldw	r2,-8(fp)
  810148:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81014c:	e0bffb17 	ldw	r2,-20(fp)
  810150:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810154:	e037883a 	mov	sp,fp
  810158:	df000017 	ldw	fp,0(sp)
  81015c:	dec00104 	addi	sp,sp,4
  810160:	f800283a 	ret

00810164 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810164:	defffb04 	addi	sp,sp,-20
  810168:	dfc00415 	stw	ra,16(sp)
  81016c:	df000315 	stw	fp,12(sp)
  810170:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810174:	d0a07417 	ldw	r2,-32304(gp)
  810178:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81017c:	d0a7b517 	ldw	r2,-24876(gp)
  810180:	10800044 	addi	r2,r2,1
  810184:	d0a7b515 	stw	r2,-24876(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810188:	00003106 	br	810250 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81018c:	e0bffe17 	ldw	r2,-8(fp)
  810190:	10800017 	ldw	r2,0(r2)
  810194:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810198:	e0bffe17 	ldw	r2,-8(fp)
  81019c:	10800403 	ldbu	r2,16(r2)
  8101a0:	10803fcc 	andi	r2,r2,255
  8101a4:	1005003a 	cmpeq	r2,r2,zero
  8101a8:	1000051e 	bne	r2,zero,8101c0 <alt_tick+0x5c>
  8101ac:	d0a7b517 	ldw	r2,-24876(gp)
  8101b0:	1004c03a 	cmpne	r2,r2,zero
  8101b4:	1000021e 	bne	r2,zero,8101c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8101b8:	e0bffe17 	ldw	r2,-8(fp)
  8101bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8101c0:	e0bffe17 	ldw	r2,-8(fp)
  8101c4:	10c00217 	ldw	r3,8(r2)
  8101c8:	d0a7b517 	ldw	r2,-24876(gp)
  8101cc:	10c01e36 	bltu	r2,r3,810248 <alt_tick+0xe4>
  8101d0:	e0bffe17 	ldw	r2,-8(fp)
  8101d4:	10800403 	ldbu	r2,16(r2)
  8101d8:	10803fcc 	andi	r2,r2,255
  8101dc:	1004c03a 	cmpne	r2,r2,zero
  8101e0:	1000191e 	bne	r2,zero,810248 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8101e4:	e0bffe17 	ldw	r2,-8(fp)
  8101e8:	10c00317 	ldw	r3,12(r2)
  8101ec:	e0bffe17 	ldw	r2,-8(fp)
  8101f0:	11000517 	ldw	r4,20(r2)
  8101f4:	183ee83a 	callr	r3
  8101f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8101fc:	e0bffd17 	ldw	r2,-12(fp)
  810200:	1004c03a 	cmpne	r2,r2,zero
  810204:	1000031e 	bne	r2,zero,810214 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  810208:	e13ffe17 	ldw	r4,-8(fp)
  81020c:	08100cc0 	call	8100cc <alt_alarm_stop>
  810210:	00000d06 	br	810248 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  810214:	e0bffe17 	ldw	r2,-8(fp)
  810218:	10c00217 	ldw	r3,8(r2)
  81021c:	e0bffd17 	ldw	r2,-12(fp)
  810220:	1887883a 	add	r3,r3,r2
  810224:	e0bffe17 	ldw	r2,-8(fp)
  810228:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81022c:	e0bffe17 	ldw	r2,-8(fp)
  810230:	10c00217 	ldw	r3,8(r2)
  810234:	d0a7b517 	ldw	r2,-24876(gp)
  810238:	1880032e 	bgeu	r3,r2,810248 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81023c:	e0fffe17 	ldw	r3,-8(fp)
  810240:	00800044 	movi	r2,1
  810244:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  810248:	e0bfff17 	ldw	r2,-4(fp)
  81024c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810250:	d0e07404 	addi	r3,gp,-32304
  810254:	e0bffe17 	ldw	r2,-8(fp)
  810258:	10ffcc1e 	bne	r2,r3,81018c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81025c:	e037883a 	mov	sp,fp
  810260:	dfc00117 	ldw	ra,4(sp)
  810264:	df000017 	ldw	fp,0(sp)
  810268:	dec00204 	addi	sp,sp,8
  81026c:	f800283a 	ret

00810270 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  810270:	deffff04 	addi	sp,sp,-4
  810274:	df000015 	stw	fp,0(sp)
  810278:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81027c:	000170fa 	wrctl	ienable,zero
}
  810280:	e037883a 	mov	sp,fp
  810284:	df000017 	ldw	fp,0(sp)
  810288:	dec00104 	addi	sp,sp,4
  81028c:	f800283a 	ret

00810290 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  810290:	defff904 	addi	sp,sp,-28
  810294:	dfc00615 	stw	ra,24(sp)
  810298:	df000515 	stw	fp,20(sp)
  81029c:	df000504 	addi	fp,sp,20
  8102a0:	e13ffd15 	stw	r4,-12(fp)
  8102a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8102a8:	e0bffe17 	ldw	r2,-8(fp)
  8102ac:	10800017 	ldw	r2,0(r2)
  8102b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8102b4:	e13ffd17 	ldw	r4,-12(fp)
  8102b8:	08041740 	call	804174 <strlen>
  8102bc:	10800044 	addi	r2,r2,1
  8102c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8102c4:	00000d06 	br	8102fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8102c8:	e0bffc17 	ldw	r2,-16(fp)
  8102cc:	11000217 	ldw	r4,8(r2)
  8102d0:	e1bffb17 	ldw	r6,-20(fp)
  8102d4:	e17ffd17 	ldw	r5,-12(fp)
  8102d8:	08105d80 	call	8105d8 <memcmp>
  8102dc:	1004c03a 	cmpne	r2,r2,zero
  8102e0:	1000031e 	bne	r2,zero,8102f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8102e4:	e0bffc17 	ldw	r2,-16(fp)
  8102e8:	e0bfff15 	stw	r2,-4(fp)
  8102ec:	00000706 	br	81030c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8102f0:	e0bffc17 	ldw	r2,-16(fp)
  8102f4:	10800017 	ldw	r2,0(r2)
  8102f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8102fc:	e0fffe17 	ldw	r3,-8(fp)
  810300:	e0bffc17 	ldw	r2,-16(fp)
  810304:	10fff01e 	bne	r2,r3,8102c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  810308:	e03fff15 	stw	zero,-4(fp)
  81030c:	e0bfff17 	ldw	r2,-4(fp)
}
  810310:	e037883a 	mov	sp,fp
  810314:	dfc00117 	ldw	ra,4(sp)
  810318:	df000017 	ldw	fp,0(sp)
  81031c:	dec00204 	addi	sp,sp,8
  810320:	f800283a 	ret

00810324 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  810324:	defffa04 	addi	sp,sp,-24
  810328:	dfc00515 	stw	ra,20(sp)
  81032c:	df000415 	stw	fp,16(sp)
  810330:	df000404 	addi	fp,sp,16
  810334:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810338:	00802074 	movhi	r2,129
  81033c:	108bbb04 	addi	r2,r2,12012
  810340:	10800017 	ldw	r2,0(r2)
  810344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810348:	00003306 	br	810418 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  81034c:	e0bffd17 	ldw	r2,-12(fp)
  810350:	11000217 	ldw	r4,8(r2)
  810354:	08041740 	call	804174 <strlen>
  810358:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  81035c:	e0bffd17 	ldw	r2,-12(fp)
  810360:	10c00217 	ldw	r3,8(r2)
  810364:	e0bffc17 	ldw	r2,-16(fp)
  810368:	1885883a 	add	r2,r3,r2
  81036c:	10bfffc4 	addi	r2,r2,-1
  810370:	10800003 	ldbu	r2,0(r2)
  810374:	10803fcc 	andi	r2,r2,255
  810378:	1080201c 	xori	r2,r2,128
  81037c:	10bfe004 	addi	r2,r2,-128
  810380:	10800bd8 	cmpnei	r2,r2,47
  810384:	1000031e 	bne	r2,zero,810394 <alt_find_file+0x70>
    {
      len -= 1;
  810388:	e0bffc17 	ldw	r2,-16(fp)
  81038c:	10bfffc4 	addi	r2,r2,-1
  810390:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  810394:	e0bffc17 	ldw	r2,-16(fp)
  810398:	1007883a 	mov	r3,r2
  81039c:	e0bffe17 	ldw	r2,-8(fp)
  8103a0:	1885883a 	add	r2,r3,r2
  8103a4:	10800003 	ldbu	r2,0(r2)
  8103a8:	10803fcc 	andi	r2,r2,255
  8103ac:	1080201c 	xori	r2,r2,128
  8103b0:	10bfe004 	addi	r2,r2,-128
  8103b4:	10800be0 	cmpeqi	r2,r2,47
  8103b8:	10000a1e 	bne	r2,zero,8103e4 <alt_find_file+0xc0>
  8103bc:	e0bffc17 	ldw	r2,-16(fp)
  8103c0:	1007883a 	mov	r3,r2
  8103c4:	e0bffe17 	ldw	r2,-8(fp)
  8103c8:	1885883a 	add	r2,r3,r2
  8103cc:	10800003 	ldbu	r2,0(r2)
  8103d0:	10803fcc 	andi	r2,r2,255
  8103d4:	1080201c 	xori	r2,r2,128
  8103d8:	10bfe004 	addi	r2,r2,-128
  8103dc:	1004c03a 	cmpne	r2,r2,zero
  8103e0:	10000a1e 	bne	r2,zero,81040c <alt_find_file+0xe8>
  8103e4:	e0bffd17 	ldw	r2,-12(fp)
  8103e8:	11000217 	ldw	r4,8(r2)
  8103ec:	e1bffc17 	ldw	r6,-16(fp)
  8103f0:	e17ffe17 	ldw	r5,-8(fp)
  8103f4:	08105d80 	call	8105d8 <memcmp>
  8103f8:	1004c03a 	cmpne	r2,r2,zero
  8103fc:	1000031e 	bne	r2,zero,81040c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810400:	e0bffd17 	ldw	r2,-12(fp)
  810404:	e0bfff15 	stw	r2,-4(fp)
  810408:	00000806 	br	81042c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  81040c:	e0bffd17 	ldw	r2,-12(fp)
  810410:	10800017 	ldw	r2,0(r2)
  810414:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810418:	00c02074 	movhi	r3,129
  81041c:	18cbbb04 	addi	r3,r3,12012
  810420:	e0bffd17 	ldw	r2,-12(fp)
  810424:	10ffc91e 	bne	r2,r3,81034c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810428:	e03fff15 	stw	zero,-4(fp)
  81042c:	e0bfff17 	ldw	r2,-4(fp)
}
  810430:	e037883a 	mov	sp,fp
  810434:	dfc00117 	ldw	ra,4(sp)
  810438:	df000017 	ldw	fp,0(sp)
  81043c:	dec00204 	addi	sp,sp,8
  810440:	f800283a 	ret

00810444 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  810444:	defffc04 	addi	sp,sp,-16
  810448:	df000315 	stw	fp,12(sp)
  81044c:	df000304 	addi	fp,sp,12
  810450:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  810454:	00bffa04 	movi	r2,-24
  810458:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81045c:	e03ffe15 	stw	zero,-8(fp)
  810460:	00001e06 	br	8104dc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  810464:	e0bffe17 	ldw	r2,-8(fp)
  810468:	00c02074 	movhi	r3,129
  81046c:	18c6a604 	addi	r3,r3,6808
  810470:	10800324 	muli	r2,r2,12
  810474:	10c5883a 	add	r2,r2,r3
  810478:	10800017 	ldw	r2,0(r2)
  81047c:	1004c03a 	cmpne	r2,r2,zero
  810480:	1000131e 	bne	r2,zero,8104d0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  810484:	e0bffe17 	ldw	r2,-8(fp)
  810488:	00c02074 	movhi	r3,129
  81048c:	18c6a604 	addi	r3,r3,6808
  810490:	10800324 	muli	r2,r2,12
  810494:	10c7883a 	add	r3,r2,r3
  810498:	e0bfff17 	ldw	r2,-4(fp)
  81049c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8104a0:	00802074 	movhi	r2,129
  8104a4:	108bbf04 	addi	r2,r2,12028
  8104a8:	10c00017 	ldw	r3,0(r2)
  8104ac:	e0bffe17 	ldw	r2,-8(fp)
  8104b0:	1880040e 	bge	r3,r2,8104c4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8104b4:	00c02074 	movhi	r3,129
  8104b8:	18cbbf04 	addi	r3,r3,12028
  8104bc:	e0bffe17 	ldw	r2,-8(fp)
  8104c0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8104c4:	e0bffe17 	ldw	r2,-8(fp)
  8104c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8104cc:	00000606 	br	8104e8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8104d0:	e0bffe17 	ldw	r2,-8(fp)
  8104d4:	10800044 	addi	r2,r2,1
  8104d8:	e0bffe15 	stw	r2,-8(fp)
  8104dc:	e0bffe17 	ldw	r2,-8(fp)
  8104e0:	10800810 	cmplti	r2,r2,32
  8104e4:	103fdf1e 	bne	r2,zero,810464 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8104e8:	e0bffd17 	ldw	r2,-12(fp)
}
  8104ec:	e037883a 	mov	sp,fp
  8104f0:	df000017 	ldw	fp,0(sp)
  8104f4:	dec00104 	addi	sp,sp,4
  8104f8:	f800283a 	ret

008104fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8104fc:	defffb04 	addi	sp,sp,-20
  810500:	df000415 	stw	fp,16(sp)
  810504:	df000404 	addi	fp,sp,16
  810508:	e13ffe15 	stw	r4,-8(fp)
  81050c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810510:	e0bfff17 	ldw	r2,-4(fp)
  810514:	10840070 	cmpltui	r2,r2,4097
  810518:	1000021e 	bne	r2,zero,810524 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81051c:	00840004 	movi	r2,4096
  810520:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  810524:	e0fffe17 	ldw	r3,-8(fp)
  810528:	e0bfff17 	ldw	r2,-4(fp)
  81052c:	1885883a 	add	r2,r3,r2
  810530:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810534:	e0bffe17 	ldw	r2,-8(fp)
  810538:	e0bffd15 	stw	r2,-12(fp)
  81053c:	00000506 	br	810554 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810540:	e0bffd17 	ldw	r2,-12(fp)
  810544:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810548:	e0bffd17 	ldw	r2,-12(fp)
  81054c:	10800804 	addi	r2,r2,32
  810550:	e0bffd15 	stw	r2,-12(fp)
  810554:	e0fffd17 	ldw	r3,-12(fp)
  810558:	e0bffc17 	ldw	r2,-16(fp)
  81055c:	18bff836 	bltu	r3,r2,810540 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  810560:	e0bffe17 	ldw	r2,-8(fp)
  810564:	108007cc 	andi	r2,r2,31
  810568:	1005003a 	cmpeq	r2,r2,zero
  81056c:	1000021e 	bne	r2,zero,810578 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  810570:	e0bffd17 	ldw	r2,-12(fp)
  810574:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  810578:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81057c:	e037883a 	mov	sp,fp
  810580:	df000017 	ldw	fp,0(sp)
  810584:	dec00104 	addi	sp,sp,4
  810588:	f800283a 	ret

0081058c <atexit>:
  81058c:	200b883a 	mov	r5,r4
  810590:	000d883a 	mov	r6,zero
  810594:	0009883a 	mov	r4,zero
  810598:	000f883a 	mov	r7,zero
  81059c:	081064c1 	jmpi	81064c <__register_exitproc>

008105a0 <exit>:
  8105a0:	defffe04 	addi	sp,sp,-8
  8105a4:	000b883a 	mov	r5,zero
  8105a8:	dc000015 	stw	r16,0(sp)
  8105ac:	dfc00115 	stw	ra,4(sp)
  8105b0:	2021883a 	mov	r16,r4
  8105b4:	08107840 	call	810784 <__call_exitprocs>
  8105b8:	00802074 	movhi	r2,129
  8105bc:	108bb804 	addi	r2,r2,12000
  8105c0:	11000017 	ldw	r4,0(r2)
  8105c4:	20800f17 	ldw	r2,60(r4)
  8105c8:	10000126 	beq	r2,zero,8105d0 <exit+0x30>
  8105cc:	103ee83a 	callr	r2
  8105d0:	8009883a 	mov	r4,r16
  8105d4:	080d2000 	call	80d200 <_exit>

008105d8 <memcmp>:
  8105d8:	00c000c4 	movi	r3,3
  8105dc:	1980032e 	bgeu	r3,r6,8105ec <memcmp+0x14>
  8105e0:	2144b03a 	or	r2,r4,r5
  8105e4:	10c4703a 	and	r2,r2,r3
  8105e8:	10000f26 	beq	r2,zero,810628 <memcmp+0x50>
  8105ec:	31ffffc4 	addi	r7,r6,-1
  8105f0:	3000061e 	bne	r6,zero,81060c <memcmp+0x34>
  8105f4:	00000a06 	br	810620 <memcmp+0x48>
  8105f8:	39ffffc4 	addi	r7,r7,-1
  8105fc:	00bfffc4 	movi	r2,-1
  810600:	21000044 	addi	r4,r4,1
  810604:	29400044 	addi	r5,r5,1
  810608:	38800526 	beq	r7,r2,810620 <memcmp+0x48>
  81060c:	20c00003 	ldbu	r3,0(r4)
  810610:	28800003 	ldbu	r2,0(r5)
  810614:	18bff826 	beq	r3,r2,8105f8 <memcmp+0x20>
  810618:	1885c83a 	sub	r2,r3,r2
  81061c:	f800283a 	ret
  810620:	0005883a 	mov	r2,zero
  810624:	f800283a 	ret
  810628:	180f883a 	mov	r7,r3
  81062c:	20c00017 	ldw	r3,0(r4)
  810630:	28800017 	ldw	r2,0(r5)
  810634:	18bfed1e 	bne	r3,r2,8105ec <memcmp+0x14>
  810638:	31bfff04 	addi	r6,r6,-4
  81063c:	21000104 	addi	r4,r4,4
  810640:	29400104 	addi	r5,r5,4
  810644:	39bff936 	bltu	r7,r6,81062c <memcmp+0x54>
  810648:	003fe806 	br	8105ec <memcmp+0x14>

0081064c <__register_exitproc>:
  81064c:	defffa04 	addi	sp,sp,-24
  810650:	00802074 	movhi	r2,129
  810654:	108bb804 	addi	r2,r2,12000
  810658:	dc000015 	stw	r16,0(sp)
  81065c:	14000017 	ldw	r16,0(r2)
  810660:	dd000415 	stw	r20,16(sp)
  810664:	2829883a 	mov	r20,r5
  810668:	81405217 	ldw	r5,328(r16)
  81066c:	dcc00315 	stw	r19,12(sp)
  810670:	dc800215 	stw	r18,8(sp)
  810674:	dc400115 	stw	r17,4(sp)
  810678:	dfc00515 	stw	ra,20(sp)
  81067c:	2023883a 	mov	r17,r4
  810680:	3027883a 	mov	r19,r6
  810684:	3825883a 	mov	r18,r7
  810688:	28002526 	beq	r5,zero,810720 <__register_exitproc+0xd4>
  81068c:	29000117 	ldw	r4,4(r5)
  810690:	008007c4 	movi	r2,31
  810694:	11002716 	blt	r2,r4,810734 <__register_exitproc+0xe8>
  810698:	8800101e 	bne	r17,zero,8106dc <__register_exitproc+0x90>
  81069c:	2105883a 	add	r2,r4,r4
  8106a0:	1085883a 	add	r2,r2,r2
  8106a4:	20c00044 	addi	r3,r4,1
  8106a8:	1145883a 	add	r2,r2,r5
  8106ac:	0009883a 	mov	r4,zero
  8106b0:	15000215 	stw	r20,8(r2)
  8106b4:	28c00115 	stw	r3,4(r5)
  8106b8:	2005883a 	mov	r2,r4
  8106bc:	dfc00517 	ldw	ra,20(sp)
  8106c0:	dd000417 	ldw	r20,16(sp)
  8106c4:	dcc00317 	ldw	r19,12(sp)
  8106c8:	dc800217 	ldw	r18,8(sp)
  8106cc:	dc400117 	ldw	r17,4(sp)
  8106d0:	dc000017 	ldw	r16,0(sp)
  8106d4:	dec00604 	addi	sp,sp,24
  8106d8:	f800283a 	ret
  8106dc:	29802204 	addi	r6,r5,136
  8106e0:	00800044 	movi	r2,1
  8106e4:	110e983a 	sll	r7,r2,r4
  8106e8:	30c04017 	ldw	r3,256(r6)
  8106ec:	2105883a 	add	r2,r4,r4
  8106f0:	1085883a 	add	r2,r2,r2
  8106f4:	1185883a 	add	r2,r2,r6
  8106f8:	19c6b03a 	or	r3,r3,r7
  8106fc:	14802015 	stw	r18,128(r2)
  810700:	14c00015 	stw	r19,0(r2)
  810704:	00800084 	movi	r2,2
  810708:	30c04015 	stw	r3,256(r6)
  81070c:	88bfe31e 	bne	r17,r2,81069c <__register_exitproc+0x50>
  810710:	30804117 	ldw	r2,260(r6)
  810714:	11c4b03a 	or	r2,r2,r7
  810718:	30804115 	stw	r2,260(r6)
  81071c:	003fdf06 	br	81069c <__register_exitproc+0x50>
  810720:	00802074 	movhi	r2,129
  810724:	10954f04 	addi	r2,r2,21820
  810728:	100b883a 	mov	r5,r2
  81072c:	80805215 	stw	r2,328(r16)
  810730:	003fd606 	br	81068c <__register_exitproc+0x40>
  810734:	00802034 	movhi	r2,128
  810738:	108d7204 	addi	r2,r2,13768
  81073c:	1000021e 	bne	r2,zero,810748 <__register_exitproc+0xfc>
  810740:	013fffc4 	movi	r4,-1
  810744:	003fdc06 	br	8106b8 <__register_exitproc+0x6c>
  810748:	01006404 	movi	r4,400
  81074c:	103ee83a 	callr	r2
  810750:	1007883a 	mov	r3,r2
  810754:	103ffa26 	beq	r2,zero,810740 <__register_exitproc+0xf4>
  810758:	80805217 	ldw	r2,328(r16)
  81075c:	180b883a 	mov	r5,r3
  810760:	18000115 	stw	zero,4(r3)
  810764:	18800015 	stw	r2,0(r3)
  810768:	80c05215 	stw	r3,328(r16)
  81076c:	18006215 	stw	zero,392(r3)
  810770:	18006315 	stw	zero,396(r3)
  810774:	0009883a 	mov	r4,zero
  810778:	883fc826 	beq	r17,zero,81069c <__register_exitproc+0x50>
  81077c:	003fd706 	br	8106dc <__register_exitproc+0x90>

00810780 <register_fini>:
  810780:	f800283a 	ret

00810784 <__call_exitprocs>:
  810784:	00802074 	movhi	r2,129
  810788:	108bb804 	addi	r2,r2,12000
  81078c:	10800017 	ldw	r2,0(r2)
  810790:	defff304 	addi	sp,sp,-52
  810794:	df000b15 	stw	fp,44(sp)
  810798:	d8800115 	stw	r2,4(sp)
  81079c:	00802034 	movhi	r2,128
  8107a0:	108d6d04 	addi	r2,r2,13748
  8107a4:	1005003a 	cmpeq	r2,r2,zero
  8107a8:	d8800215 	stw	r2,8(sp)
  8107ac:	d8800117 	ldw	r2,4(sp)
  8107b0:	dd400815 	stw	r21,32(sp)
  8107b4:	dd000715 	stw	r20,28(sp)
  8107b8:	10805204 	addi	r2,r2,328
  8107bc:	dfc00c15 	stw	ra,48(sp)
  8107c0:	ddc00a15 	stw	r23,40(sp)
  8107c4:	dd800915 	stw	r22,36(sp)
  8107c8:	dcc00615 	stw	r19,24(sp)
  8107cc:	dc800515 	stw	r18,20(sp)
  8107d0:	dc400415 	stw	r17,16(sp)
  8107d4:	dc000315 	stw	r16,12(sp)
  8107d8:	282b883a 	mov	r21,r5
  8107dc:	2039883a 	mov	fp,r4
  8107e0:	d8800015 	stw	r2,0(sp)
  8107e4:	2829003a 	cmpeq	r20,r5,zero
  8107e8:	d8800117 	ldw	r2,4(sp)
  8107ec:	14405217 	ldw	r17,328(r2)
  8107f0:	88001026 	beq	r17,zero,810834 <__call_exitprocs+0xb0>
  8107f4:	ddc00017 	ldw	r23,0(sp)
  8107f8:	88800117 	ldw	r2,4(r17)
  8107fc:	8c802204 	addi	r18,r17,136
  810800:	143fffc4 	addi	r16,r2,-1
  810804:	80000916 	blt	r16,zero,81082c <__call_exitprocs+0xa8>
  810808:	05bfffc4 	movi	r22,-1
  81080c:	a000151e 	bne	r20,zero,810864 <__call_exitprocs+0xe0>
  810810:	8409883a 	add	r4,r16,r16
  810814:	2105883a 	add	r2,r4,r4
  810818:	1485883a 	add	r2,r2,r18
  81081c:	10c02017 	ldw	r3,128(r2)
  810820:	a8c01126 	beq	r21,r3,810868 <__call_exitprocs+0xe4>
  810824:	843fffc4 	addi	r16,r16,-1
  810828:	85bff81e 	bne	r16,r22,81080c <__call_exitprocs+0x88>
  81082c:	d8800217 	ldw	r2,8(sp)
  810830:	10003126 	beq	r2,zero,8108f8 <__call_exitprocs+0x174>
  810834:	dfc00c17 	ldw	ra,48(sp)
  810838:	df000b17 	ldw	fp,44(sp)
  81083c:	ddc00a17 	ldw	r23,40(sp)
  810840:	dd800917 	ldw	r22,36(sp)
  810844:	dd400817 	ldw	r21,32(sp)
  810848:	dd000717 	ldw	r20,28(sp)
  81084c:	dcc00617 	ldw	r19,24(sp)
  810850:	dc800517 	ldw	r18,20(sp)
  810854:	dc400417 	ldw	r17,16(sp)
  810858:	dc000317 	ldw	r16,12(sp)
  81085c:	dec00d04 	addi	sp,sp,52
  810860:	f800283a 	ret
  810864:	8409883a 	add	r4,r16,r16
  810868:	88c00117 	ldw	r3,4(r17)
  81086c:	2105883a 	add	r2,r4,r4
  810870:	1445883a 	add	r2,r2,r17
  810874:	18ffffc4 	addi	r3,r3,-1
  810878:	11800217 	ldw	r6,8(r2)
  81087c:	1c001526 	beq	r3,r16,8108d4 <__call_exitprocs+0x150>
  810880:	10000215 	stw	zero,8(r2)
  810884:	303fe726 	beq	r6,zero,810824 <__call_exitprocs+0xa0>
  810888:	00c00044 	movi	r3,1
  81088c:	1c06983a 	sll	r3,r3,r16
  810890:	90804017 	ldw	r2,256(r18)
  810894:	8cc00117 	ldw	r19,4(r17)
  810898:	1884703a 	and	r2,r3,r2
  81089c:	10001426 	beq	r2,zero,8108f0 <__call_exitprocs+0x16c>
  8108a0:	90804117 	ldw	r2,260(r18)
  8108a4:	1884703a 	and	r2,r3,r2
  8108a8:	10000c1e 	bne	r2,zero,8108dc <__call_exitprocs+0x158>
  8108ac:	2105883a 	add	r2,r4,r4
  8108b0:	1485883a 	add	r2,r2,r18
  8108b4:	11400017 	ldw	r5,0(r2)
  8108b8:	e009883a 	mov	r4,fp
  8108bc:	303ee83a 	callr	r6
  8108c0:	88800117 	ldw	r2,4(r17)
  8108c4:	98bfc81e 	bne	r19,r2,8107e8 <__call_exitprocs+0x64>
  8108c8:	b8800017 	ldw	r2,0(r23)
  8108cc:	147fd526 	beq	r2,r17,810824 <__call_exitprocs+0xa0>
  8108d0:	003fc506 	br	8107e8 <__call_exitprocs+0x64>
  8108d4:	8c000115 	stw	r16,4(r17)
  8108d8:	003fea06 	br	810884 <__call_exitprocs+0x100>
  8108dc:	2105883a 	add	r2,r4,r4
  8108e0:	1485883a 	add	r2,r2,r18
  8108e4:	11000017 	ldw	r4,0(r2)
  8108e8:	303ee83a 	callr	r6
  8108ec:	003ff406 	br	8108c0 <__call_exitprocs+0x13c>
  8108f0:	303ee83a 	callr	r6
  8108f4:	003ff206 	br	8108c0 <__call_exitprocs+0x13c>
  8108f8:	88800117 	ldw	r2,4(r17)
  8108fc:	1000081e 	bne	r2,zero,810920 <__call_exitprocs+0x19c>
  810900:	89000017 	ldw	r4,0(r17)
  810904:	20000726 	beq	r4,zero,810924 <__call_exitprocs+0x1a0>
  810908:	b9000015 	stw	r4,0(r23)
  81090c:	8809883a 	mov	r4,r17
  810910:	08035b40 	call	8035b4 <free>
  810914:	bc400017 	ldw	r17,0(r23)
  810918:	883fb71e 	bne	r17,zero,8107f8 <__call_exitprocs+0x74>
  81091c:	003fc506 	br	810834 <__call_exitprocs+0xb0>
  810920:	89000017 	ldw	r4,0(r17)
  810924:	882f883a 	mov	r23,r17
  810928:	2023883a 	mov	r17,r4
  81092c:	883fb21e 	bne	r17,zero,8107f8 <__call_exitprocs+0x74>
  810930:	003fc006 	br	810834 <__call_exitprocs+0xb0>
  810934:	0201ffff 	0x201ffff
  810938:	ffff0000 	call	ffff000 <__ram_exceptions_end+0xeffae4c>
  81093c:	00000401 	jmpi	40 <__alt_mem_sdram_controller-0x7fffc0>
  810940:	ffff0001 	jmpi	ffff000 <__ram_exceptions_end+0xeffae4c>
  810944:	00000401 	jmpi	40 <__alt_mem_sdram_controller-0x7fffc0>
  810948:	ffff0001 	jmpi	ffff000 <__ram_exceptions_end+0xeffae4c>
  81094c:	00000401 	jmpi	40 <__alt_mem_sdram_controller-0x7fffc0>
  810950:	883a0001 	jmpi	883a000 <__ram_exceptions_end+0x7835e4c>
  810954:	010d0bff 	0x10d0bff
  810958:	7f010002 	0x7f010002
  81095c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  810960:	00810e34 	movhi	r2,1080
  810964:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  810968:	01090bff 	0x1090bff
  81096c:	7f010002 	0x7f010002
	...
  810978:	010d0bff 	0x10d0bff
  81097c:	01000004 	movi	r4,0
  810980:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  810984:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  810988:	010d0bff 	0x10d0bff
  81098c:	01000004 	movi	r4,0
  810990:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  810994:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  810998:	010d0bff 	0x10d0bff
  81099c:	01000004 	movi	r4,0
  8109a0:	00000101 	jmpi	10 <__alt_mem_sdram_controller-0x7ffff0>
  8109a4:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  8109a8:	010d0bff 	0x10d0bff
  8109ac:	7f010002 	0x7f010002
  8109b0:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  8109b4:	00810e34 	movhi	r2,1080
  8109b8:	00000001 	jmpi	0 <__alt_mem_sdram_controller-0x800000>
  8109bc:	01090bff 	0x1090bff
  8109c0:	7f010002 	0x7f010002
	...
  8109cc:	00810780 	call	81078 <__alt_mem_sdram_controller-0x77ef88>
